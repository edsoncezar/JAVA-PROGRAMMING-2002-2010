<HTML>

<HEAD>
   <TITLE>Appendix - A -- The Java API Quick REference</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">










<H1><FONT COLOR=#FF0000>Appendix - A</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>The Java API Quick REference</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>


<UL>
<LI><A HREF="#javaapplet" >java.applet</A>
<LI><A HREF="#javaawt" >java.awt</A>
<LI><A HREF="#javaawtimage" >java.awt.image</A>
<LI><A HREF="#javaawtpeer" >java.awt.peer</A>
<LI><A HREF="#javaio" >java.io</A>
<LI><A HREF="#javalang" >java.lang</A>
<LI><A HREF="#javanet" >java.net</A>
<LI><A HREF="#javautil" >java.util</A>
</UL>
<HR>
<P>
This appendix summarizes the classes and interfaces of the Java
API. The eight packages of the Java API are presented in alphabetical
order.
<H2><A NAME="javaapplet"><FONT SIZE=5 COLOR=#FF0000>java.applet</FONT></A>
</H2>
<P>
The <TT>java.applet</TT> package provides
the <TT>Applet</TT> class and the
interfaces needed to support Java applets. It consists of a single
<TT>Applet</TT> class and three interfaces
that enable audio playing and applet integration within browsers.
<H3>Classes</H3>
<H4>Applet</H4>
<P>
The <TT>Applet</TT> class is a subclass
of the <TT>java.awt.Panel</TT> class
that is used to implement Java applets.
<H3>Interfaces</H3>
<H4><TT>AppletContext</TT></H4>
<P>
The <TT>AppletContext</TT> interface
provides methods that allow an applet to interact with the context
in which it is run, such as a browser, the applet viewer, or an
application program.
<H4><TT>AppletStub</TT></H4>
<P>
The <TT>AppletStub</TT> interface
provides methods that are used to implement programs that display
an applet.
<H4><TT>AudioClip</TT></H4>
<P>
The <TT>AudioClip</TT> interface provides
methods that are used to implement classes that support the playing
of audio clips within applets.
<H2><A NAME="javaawt"><FONT SIZE=5 COLOR=#FF0000>java.awt</FONT></A>
</H2>
<P>
The <TT>java.awt</TT> package provides
the classes that support Java window programming. This package
is known as the Abstract Windowing Toolkit.
<H3>Classes</H3>
<H4><TT>BorderLayout</TT></H4>
<P>
The <TT>BorderLayout</TT> class is
used to lay out the GUI objects contained within a <TT>Container</TT>
object. It is the default layout for <TT>Window</TT>,
<TT>Frame</TT>, and <TT>Dialog</TT>
objects.
<H4><TT>Button</TT></H4>
<P>
The <TT>Button</TT> class implements
a clickable button GUI control.
<H4><TT>Canvas</TT></H4>
<P>
The <TT>Canvas</TT> class implements
a GUI object that supports drawing. Drawing is not implemented
on the canvas itself, but on the <TT>Graphics</TT>
object provided by the canvas.
<H4><TT>CardLayout</TT></H4>
<P>
The <TT>CardLayout</TT> class is used
to lay out the objects in a <TT>Container</TT>
object in a form similar to a deck of cards.
<H4><TT>Checkbox</TT></H4>
<P>
The <TT>Checkbox</TT> class is used
to implement checkbox and radio button GUI controls.
<H4><TT>CheckboxGroup</TT></H4>
<P>
The <TT>CheckboxGroup</TT> class is
used with the <TT>Checkbox</TT> class
to implement radio buttons.
<H4><TT>CheckboxMenuItem</TT></H4>
<P>
The <TT>CheckboxMenuItem</TT> class
is used to implement menu items that can be checked on or off.
<H4><TT>Choice</TT></H4>
<P>
The <TT>Choice</TT> class is used
to implement pull-down lists that can be placed within the main
area of a window.
<H4><TT>Color</TT></H4>
<P>
The <TT>Color</TT> class provides
a system-independent color implementation and defines several
color constants.
<H4><TT>Component</TT></H4>
<P>
The <TT>Component</TT> class is the
superclass of all window GUI controls. It provides a common set
of methods that support component organization, display, and event
handling.
<H4><TT>Container</TT></H4>
<P>
The <TT>Container</TT> class is the
superclass of window classes that contain other objects and provides
a common set of methods to organize and display contained objects.
<H4><TT>Dialog</TT></H4>
<P>
The <TT>Dialog</TT> class is used
to implement dialog box windows.
<H4><TT>Dimension</TT></H4>
<P>
The <TT>Dimension</TT> class is used
to represent the width and height of a two-dimensional object.
<H4><TT>Event</TT></H4>
<P>
The <TT>Event</TT> class is used to
encapsulate all events processed by Java window programs.
<H4><TT>FileDialog</TT></H4>
<P>
The <TT>FileDialog</TT> class is used
to construct dialog boxes that support the selection of files
for input and output operations.
<H4><TT>FlowLayout</TT></H4>
<P>
The <TT>FlowLayout</TT> class is used
to lay out window <TT>Container</TT>
objects. It is the default layout used with the <TT>Panel</TT>
class.
<H4><TT>Font</TT></H4>
<P>
The <TT>Font</TT> class implements
a system-independent set of fonts that control text display.
<H4><TT>FontMetrics</TT></H4>
<P>
The <TT>FontMetrics</TT> class is
used to access the specific display properties of a <TT>Font</TT>
class.
<H4><TT>Frame</TT></H4>
<P>
The <TT>Frame</TT> class is used to
create and control the main application window of standalone Java
window programs.
<H4><TT>Graphics</TT></H4>
<P>
The <TT>Graphics</TT> class supports
the drawing of graphical objects and text within a window.
<H4><TT>GridBagConstraints</TT></H4>
<P>
The <TT>GridBagConstraints</TT> class
is used to identify the positioning parameters of a component
that is contained within an object that is laid out using the
<TT>GridBagLayout</TT> class.
<H4><TT>GridBagLayout</TT></H4>
<P>
The <TT>GridBagLayout</TT> class allows
a <TT>Container</TT> object to be
laid out in a gridlike fashion with component objects occupying
more than one row or column.
<H4><TT>GridLayout</TT></H4>
<P>
The <TT>GridLayout</TT> class is used
to lay out a <TT>Container</TT> object
in a grid where all elements of the grid are the same size.
<H4><TT>Image</TT></H4>
<P>
The <TT>Image</TT> class provides
a content-independent mechanism for implementing graphical <BR>
images.
<H4><TT>Insets</TT></H4>
<P>
The <TT>Insets</TT> class is used
to specify the margins associated with a GUI object.
<H4><TT>Label</TT></H4>
<P>
The <TT>Label</TT> class is used to
display text labels within a window or other GUI container.
<H4><TT>List</TT></H4>
<P>
The <TT>List</TT> class implements
single- and multiple-selection list GUI controls.
<H4><TT>MediaTracker</TT></H4>
<P>
The <TT>MediaTracker</TT> class provides
a set of methods for managing images used to implement multimedia
objects.
<H4><TT>Menu</TT></H4>
<P>
The <TT>Menu</TT> class implements
a single pull-down menu that is attached to a menu bar or other
menu.
<H4><TT>MenuBar</TT></H4>
<P>
The <TT>MenuBar</TT> class implements
a menu bar that is attached to the <TT>Frame</TT>
object of a window program.
<H4><TT>MenuComponent</TT></H4>
<P>
The <TT>MenuComponent</TT> class is
the superclass of all menu-related classes and provides a common
set of methods used by its subclasses.
<H4><TT>MenuItem</TT></H4>
<P>
The <TT>MenuItem</TT> class is used
to implement items that can be selected from a pull-down menu.
It is extended by the <TT>Menu</TT>
and <TT>CheckboxMenuItem</TT> classes.
<H4><TT>Panel</TT></H4>
<P>
The <TT>Panel</TT> class is used as
a container to organize GUI components within a window. Its default
layout is <TT>FlowLayout</TT>.
<H4><TT>Point</TT></H4>
<P>
The <TT>Point</TT> class is used to
represent general, two-dimensional x, y coordinates.
<H4><TT>Polygon</TT></H4>
<P>
The <TT>Polygon</TT> class represents
a polygon as a list of x, y coordinates that identify the polygon's
vertices.
<H4><TT>Rectangle</TT></H4>
<P>
The <TT>Rectangle</TT> class represents
a rectangle using the x, y coordinate of its upper-left corner,
its width, and height.
<H4><TT>Scrollbar</TT></H4>
<P>
The <TT>Scrollbar</TT> class is used
to implement vertical and horizontal scrollbars.
<H4><TT>TextArea</TT></H4>
<P>
The <TT>TextArea</TT> class implements
scrollable text-entry objects that span multiple lines and columns.
<H4><TT>TextComponent</TT></H4>
<P>
The <TT>TextComponent</TT> class is
the superclass of all text-based classes. It provides a common
set of methods used by the <TT>TextArea</TT>
and <TT>TextField</TT> classes.
<H4><TT>TextField</TT></H4>
<P>
The <TT>TextField</TT> class implements
a one-line text-entry field.
<H4><TT>Toolkit</TT></H4>
<P>
The <TT>Toolkit</TT> class provides
the linkage between the common AWT supported by Java and the platform-dependent
implementation of the AWT.
<H4><TT>Window</TT></H4>
<P>
The <TT>Window</TT> class is the superclass
of all window-related classes and provides a common set of methods
for organizing and displaying windows.
<H3>Interfaces</H3>
<H4><TT>LayoutManager</TT></H4>
<P>
The <TT>LayoutManager</TT> interface
provides a set of methods that are implemented by classes that
control the layout of a container.
<H4><TT>MenuContainer</TT></H4>
<P>
The <TT>MenuContainer</TT> class provides
a set of methods that are implemented by classes that contain
menus.
<H2><A NAME="javaawtimage"><FONT SIZE=5 FACE="co">java.awt.image</FONT></A>
</H2>
<P>
The <TT>java.awt.image</TT> package
defines classes and interfaces that support image generation,
storage, and processing.
<H3>Classes</H3>
<H4><TT>ColorModel</TT></H4>
<P>
The <TT>ColorModel</TT> class provides
a general framework for representing colors and maps this framework
to the RGB color model.
<H4><TT>CropImageFilter</TT></H4>
<P>
The <TT>CropImageFilter</TT> class
is used to crop images to a specified area.
<H4><TT>DirectColorModel</TT></H4>
<P>
The <TT>DirectColorModel</TT> class
is used to directly access the color values of a pixel.
<H4><TT>FilteredImageSource</TT></H4>
<P>
The <TT>FilteredImageSource</TT> class
provides the capability to filter an image using an object of
class <TT>ImageFilter</TT>.
<H4><TT>ImageFilter</TT></H4>
<P>
The <TT>ImageFilter</TT> class provides
a common set of methods for implementing an image filter.
<H4><TT>IndexColorModel</TT></H4>
<P>
The <TT>IndexColorModel</TT> class
is a subclass of the <TT>ColorModel</TT>
class that translates fixed colormap pixel values to their RGB
component colors.
<H4><TT>MemoryImageSource</TT></H4>
<P>
The <TT>MemoryImageSource</TT> class
is used to create images using an array of pixel values.
<H4><TT>PixelGrabber</TT></H4>
<P>
The <TT>PixelGrabber</TT> class is
used to capture the pixels of an image and store them in an array.
<H4><TT>RGBImageFilter</TT></H4>
<P>
The <TT>RGBImageFilter</TT> class
is used to create image filters that modify the pixels of the
default RGB color model.
<H3>Interfaces</H3>
<H4><TT>ImageConsumer</TT></H4>
<P>
The <TT>ImageConsumer</TT> interface
provides a set of methods for accessing image data provided by
classes that implement the <TT>ImageProducer</TT>
interface.
<H4><TT>ImageObserver</TT></H4>
<P>
The <TT>ImageObserver</TT> interface
provides a set of constants and methods through which objects
can be notified about an image that is being constructed.
<H4><TT>ImageProducer</TT></H4>
<P>
The <TT>ImageProducer</TT> interface
provides a set of methods for classes that produce images. These
methods are used to reconstruct or modify an image being produced.
<H2><A NAME="javaawtpeer"><FONT SIZE=5 FACE="co">java.awt.peer</FONT></A>
</H2>
<P>
The <TT>java.awt.peer</TT> package
provides a set of interface definitions that map platform-<BR>
independent AWT classes to their native platform-dependent implementations.
<H3>Classes</H3>
<P>
This package does not have any classes.
<H3>Interfaces</H3>
<H4><TT>ButtonPeer</TT></H4>
<P>
The <TT>ButtonPeer</TT> interface
specifies the native methods that are required to support the
implementation of the <TT>java.awt.Button</TT>
class.
<H4><TT>CanvasPeer</TT></H4>
<P>
The <TT>CanvasPeer</TT> interface
specifies the native methods that are required to support the
implementation of the <TT>java.awt.Canvas</TT>
class.
<H4><TT>CheckboxMenuItemPeer</TT>
</H4>
<P>
The <TT>CheckboxMenuItemPeer</TT>
interface specifies the native methods that are required to support
the implementation of the <TT>java.awt.CheckboxMenuItem</TT>
class.
<H4><TT>CheckboxPeer</TT></H4>
<P>
The <TT>CheckboxPeer</TT> interface
specifies the native methods that are required to support the
implementation of the <TT>java.awt.Checkbox</TT>
class.
<H4><TT>ChoicePeer</TT></H4>
<P>
The <TT>ChoicePeer</TT> interface
specifies the native methods that are required to support the
implementation of the <TT>java.awt.Choice</TT>
class.
<H4><TT>ComponentPeer</TT></H4>
<P>
The <TT>ComponentPeer</TT> interface
specifies the native methods that are required to support the
implementation of the <TT>java.awt.Component</TT>
class.
<H4><TT>ContainerPeer</TT></H4>
<P>
The <TT>ContainerPeer</TT> interface
specifies the native methods that are required to support the
implementation of the <TT>java.awt.Container</TT>
class.
<H4><TT>DialogPeer</TT></H4>
<P>
The <TT>DialogPeer</TT> interface
specifies the native methods that are required to support the
implementation of the <TT>java.awt.Dialog</TT>
class.
<H4><TT>FileDialogPeer</TT></H4>
<P>
The <TT>FileDialogPeer</TT> interface
specifies the native methods that are required to support the
implementation of the <TT>java.awt.FileDialog</TT>
class.
<H4><TT>FramePeer</TT></H4>
<P>
The <TT>FramePeer</TT> interface specifies
the native methods that are required to support the implementation
of the <TT>java.awt.Frame</TT> class.
<H4><TT>LabelPeer</TT></H4>
<P>
The <TT>LabelPeer</TT> interface specifies
the native methods that are required to support the implementation
of the <TT>java.awt.Label</TT> class.
<H4><TT>ListPeer</TT></H4>
<P>
The <TT>ListPeer</TT> interface specifies
the native methods that are required to support the implementation
of the <TT>java.awt.List</TT> class.
<H4><TT>MenuBarPeer</TT></H4>
<P>
The <TT>MenuBarPeer</TT> interface
specifies the native methods that are required to support the
implementation of the <TT>java.awt.MenuBar</TT>
class.
<H4><TT>MenuComponentPeer</TT></H4>
<P>
The <TT>MenuComponentPeer</TT> interface
specifies the native methods that are required to support the
implementation of the <TT>java.awt.MenuComponent</TT>
class.
<H4><TT>MenuItemPeer</TT></H4>
<P>
The <TT>MenuItemPeer</TT> interface
specifies the native methods that are required to support the
implementation of the <TT>java.awt.MenuItem</TT>
class.
<H4><TT>MenuPeer</TT></H4>
<P>
The <TT>MenuPeer</TT> interface specifies
the native methods that are required to support the implementation
of the <TT>java.awt.Menu</TT> class.
<H4><TT>PanelPeer</TT></H4>
<P>
The <TT>PanelPeer</TT> interface specifies
the native methods that are required to support the implementation
of the <TT>java.awt.Panel</TT> class.
<H4><TT>ScrollbarPeer</TT></H4>
<P>
The <TT>ScrollbarPeer</TT> interface
specifies the native methods that are required to support the
implementation of the <TT>java.awt.Scrollbar</TT>
class.
<H4><TT>TextAreaPeer</TT></H4>
<P>
The <TT>TextAreaPeer</TT> interface
specifies the native methods that are required to support the
implementation of the <TT>java.awt.TextArea</TT>
class.
<H4><TT>TextComponentPeer</TT></H4>
<P>
The <TT>TextComponentPeer</TT> interface
specifies the native methods that are required to support the
implementation of the <TT>java.awt.TextComponent</TT>
class.
<H4><TT>TextFieldPeer</TT></H4>
<P>
The <TT>TextFieldPeer</TT> interface
specifies the native methods that are required to support the
implementation of the <TT>java.awt.TextField</TT>
class.
<H4><TT>WindowPeer</TT></H4>
<P>
The <TT>WindowPeer</TT> interface
specifies the native methods that are required to support the
implementation of the <TT>java.awt.Window</TT>
class.
<H2><A NAME="javaio"><FONT SIZE=5 FACE="co">java.io</FONT></A>
</H2>
<P>
The <TT>java.io</TT> package provides
a number of classes that support stream-based I/O. These classes
are organized into two main class hierarchies under the <TT>InputStream</TT>
and <TT>OutputStream</TT> classes.
<H3>Classes</H3>
<H4><TT>BufferedInputStream</TT></H4>
<P>
The <TT>BufferedInputStream</TT> class
provides the capability to implement buffering for an arbitrary
<TT>InputStream</TT> object.
<H4><TT>BufferedOutputStream</TT>
</H4>
<P>
The <TT>BufferedOutputStream</TT>
class provides the capability to implement buffering for an arbitrary
<TT>OutputStream</TT> object.
<H4><TT>ByteArrayInputStream</TT>
</H4>
<P>
The <TT>ByteArrayInputStream</TT>
class is used to convert a byte array into an <TT>InputStream</TT>
object.
<H4><TT>ByteArrayOutputStream</TT>
</H4>
<P>
The <TT>ByteArrayOutputStream</TT>
class is used to convert a byte array into an <TT>OutputStream</TT>
object.
<H4><TT>DataInputStream</TT></H4>
<P>
The <TT>DataInputStream</TT> class
provides the capability to read primitive data types and objects
from an <TT>InputStream</TT> object.
<H4><TT>DataOutputStream</TT></H4>
<P>
The <TT>DataOutputStream</TT> class
provides the capability to write primitive data types and objects
to an <TT>OutputStream</TT> object.
<H4><TT>File</TT></H4>
<P>
The <TT>File</TT> class is used to
provide system-independent access to a file or directory on the
host system.
<H4><TT>FileDescriptor</TT></H4>
<P>
The <TT>FileDescriptor</TT> class
provides a system-independent implementation of file descriptor
<BR>
objects.
<H4><TT>FileInputStream</TT></H4>
<P>
The <TT>FileInputStream</TT> class
allows a <TT>File</TT> object to be
used as the basis for creating an object of class <TT>InputStream</TT>.
<H4><TT>FileOutputStream</TT></H4>
<P>
The <TT>FileOutputStream</TT> class
allows a <TT>File</TT> object to be
used to create an object of class <TT>OutputStream</TT>.
<H4><TT>FilterInputStream</TT></H4>
<P>
The <TT>FilterInputStream</TT> class
is the superclass of all classes that support input stream filtering.
<H4><TT>FilterOutputStream</TT></H4>
<P>
The <TT>FilterOutputStream</TT> class
is the superclass of all classes that support output stream filtering.
<H4><TT>InputStream</TT></H4>
<P>
The <TT>InputStream</TT> class is
the superclass of all input stream classes. It provides the methods
required to implement an input stream of bytes.
<H4><TT>LineNumberInputStream</TT>
</H4>
<P>
The <TT>LineNumberInputStream</TT>
class is used to track the line numbers associated with an <TT>InputStream</TT>
object.
<H4><TT>OutputStream</TT></H4>
<P>
The <TT>OutputStream</TT> class is
the superclass of all output stream classes. It provides the methods
required to implement an output stream of bytes.
<H4><TT>PipedInputStream</TT></H4>
<P>
The <TT>PipedInputStream</TT> class
is used to provide an input stream to a thread so that it can
read data written to a <TT>PipedOutputStream</TT>
object by another thread.
<H4><TT>PipedOutputStream</TT></H4>
<P>
The <TT>PipedOutputStream</TT> class
is used to provide an output stream to a thread so that it can
send data to another thread that reads the data from a <TT>PipedInputStream</TT>
object.
<H4><TT>PrintStream</TT></H4>
<P>
The <TT>PrintStream</TT> class provides
an output stream that supports a common set of methods for printing
objects and primitive data types.
<H4><TT>PushbackInputStream</TT></H4>
<P>
The <TT>PushbackInputStream</TT> class
is used to provide an output stream that is capable of having
data written back onto it so that it can be read again.
<H4><TT>RandomAccessFile</TT></H4>
<P>
The <TT>RandomAccessFile</TT> class
implements a file that can be directly read or written to at arbitrary
file locations.
<H4><TT>SequenceInputStream</TT></H4>
<P>
The <TT>SequenceInputStream</TT> class
is used to concatenate a sequence of input streams into a single
input stream.
<H4><TT>StreamTokenizer</TT></H4>
<P>
The <TT>StreamTokenizer</TT> class
is used to convert an input stream into a stream of tokens for
processing by an input parser.
<H4><TT>StringBufferInputStream</TT>
</H4>
<P>
The <TT>StringBufferInputStream</TT>
class is used to convert a <TT>StringBuffer</TT>
object for use as an <TT>InputStream</TT>
object.
<H3>Interfaces</H3>
<H4><TT>DataInput</TT></H4>
<P>
The <TT>DataInput</TT> interface provides
a set of methods for constructing a system-independent implementation
of an input stream.
<H4><TT>DataOutput</TT></H4>
<P>
The <TT>DataOutput</TT> interface
provides a set of methods for constructing a system-independent
implementation of an output stream.
<H4><TT>FilenameFilter</TT></H4>
<P>
The <TT>FilenameFilter</TT> interface
provides the <TT>accept()</TT> method
for determining whether a filename should be included in a filtered
list of filenames.
<H2><A NAME="javalang"><FONT SIZE=5 FACE="co">java.lang</FONT></A>
</H2>
<P>
The <TT>java.lang</TT> package provides
the core set of classes that are used in applets, console programs,
and window programs. The fundamental classes of the Java class
hierarchy are defined within this package. Some <TT>java.lang</TT>
classes also provide access to system-specific information.
<H3>Classes</H3>
<H4><TT>Boolean</TT></H4>
<P>
The <TT>Boolean</TT> class provides
a class wrapper that is used to access the <TT>boolean</TT>
primitive data type as a Java object.
<H4><TT>Character</TT></H4>
<P>
The <TT>Character</TT> class provides
a class wrapper that is used to access the <TT>char</TT>
primitive data type as a Java object.
<H4><TT>Class</TT></H4>
<P>
The <TT>Class</TT> class provides
runtime information about other classes in the form of a class
<BR>
descriptor.
<H4><TT>ClassLoader</TT></H4>
<P>
The <TT>ClassLoader</TT> class is
used to define policies for loading classes into the runtime environment.
<H4><TT>Compiler</TT></H4>
<P>
The <TT>Compiler</TT> class is used
to provide access to the Java compiler.
<H4><TT>Double</TT></H4>
<P>
The <TT>Double</TT> class provides
a class wrapper that is used to access the <TT>double</TT>
primitive data type as a Java object.
<H4><TT>Float</TT></H4>
<P>
The <TT>Float</TT> class provides
a class wrapper that is used to access the <TT>float</TT>
primitive data type as a Java object.
<H4><TT>Integer</TT></H4>
<P>
The <TT>Integer</TT> class provides
a class wrapper that is used to access the <TT>int</TT>
primitive data type as a Java object.
<H4><TT>Long</TT></H4>
<P>
The <TT>Long</TT> class provides a
class wrapper that is used to access the <TT>long</TT>
primitive data type as a Java object.
<H4><TT>Math</TT></H4>
<P>
The <TT>Math</TT> class provides a
standard library of mathematical functions.
<H4><TT>Number</TT></H4>
<P>
The <TT>Number</TT> class is the superclass
of all integer and floating-point classes. It can be used to convert
a numeric value from one class to another.
<H4><TT>Object</TT></H4>
<P>
The <TT>Object</TT> class is the superclass
of all Java classes and provides methods that are inherited by
all Java classes.
<H4><TT>Process</TT></H4>
<P>
The <TT>Process</TT> class is used
to provide system-independent access to processes that are executed
using the <TT>exec()</TT> method of
the <TT>System</TT> class.
<H4><TT>Runtime</TT></H4>
<P>
The <TT>Runtime</TT> class provides
access to the underlying Java runtime system.
<H4><TT>SecurityManager</TT></H4>
<P>
The <TT>SecurityManager</TT> class
is used to implement a security policy for the execution of untrusted
classes.
<H4><TT>String</TT></H4>
<P>
The <TT>String</TT> class is used
to implement constant character strings.
<H4><TT>StringBuffer</TT></H4>
<P>
The <TT>StringBuffer</TT> class is
used to implement growable character strings.
<H4><TT>System</TT></H4>
<P>
The <TT>System</TT> class provides
system-independent access to important system resources such as
<TT>stdin</TT>, <TT>stdout</TT>,
and <TT>stderr</TT>.
<H4><TT>Thread</TT></H4>
<P>
The <TT>Thread</TT> class is used
to implement multithreaded Java programs.
<H4><TT>ThreadGroup</TT></H4>
<P>
The <TT>ThreadGroup</TT> class is
used to organize and control a set of threads as a single entity.
<H4><TT>Throwable</TT></H4>
<P>
The <TT>Throwable</TT> class is the
superclass of all Java errors and exceptions.
<H3>Interfaces</H3>
<H4><TT>Cloneable</TT></H4>
<P>
The <TT>Cloneable</TT> interface is
implemented by classes that can be copied or cloned.
<H4><TT>Runnable</TT></H4>
<P>
The <TT>Runnable</TT> interface is
implemented by classes that can be executed. It is used to implement
threads that are not subclasses of the <TT>Thread</TT>
class.
<H2><A NAME="javanet"><FONT SIZE=5 FACE="co">java.net</FONT></A>
</H2>
<P>
The <TT>java.net</TT> package provides
a set of classes that implement socket-based client/server networking.
<H3>Classes</H3>
<H4><TT>ContentHandler</TT></H4>
<P>
The <TT>ContentHandler</TT> class
is used to extract and process an object that is read from an
<TT>URLConnection</TT> object.
<H4><TT>DatagramPacket</TT></H4>
<P>
The <TT>DatagramPacket</TT> class
encapsulates a datagram object that is read or written from a
UDP socket.
<H4><TT>DatagramSocket</TT></H4>
<P>
The <TT>DatagramSocket</TT> class
is used to implement a UDP socket for the transmission and reception
of datagrams.
<H4><TT>InetAddress</TT></H4>
<P>
The <TT>InetAddress</TT> class provides
an encapsulation of an Internet host and IP address.
<H4><TT>ServerSocket</TT></H4>
<P>
The <TT>ServerSocket</TT> class provides
the capability to create TCP sockets that can be used to implement
a server application.
<H4><TT>Socket</TT></H4>
<P>
The <TT>Socket</TT> class is used
to implement a socket used by a client program.
<H4><TT>SocketImpl</TT></H4>
<P>
The <TT>SocketImpl</TT> class is used
to tailor the implementation of Java socket classes to a specific
platform or network environment.
<H4><TT>URL</TT></H4>
<P>
The <TT>URL</TT> class encapsulates
URLs and provides a common set of methods for accessing the network
resources referenced by an URL.
<H4><TT>URLConnection</TT></H4>
<P>
The <TT>URLConnection</TT> class is
used to manage the HTTP connection created with the resource specified
by an URL.
<H4><TT>URLEncoder</TT></H4>
<P>
The <TT>URLEncoder</TT> class is used
to encode information in a format that is suitable for communication
via an URL.
<H4><TT>URLStreamHandler</TT></H4>
<P>
The <TT>URLStreamHandler</TT> class
is used to implement a <TT>URLConnection</TT>
for different protocol types.
<H3>Interfaces</H3>
<H4><TT>ContentHandlerFactory</TT>
</H4>
<P>
The <TT>ContentHandlerFactory</TT>
interface is used to associate <TT>ContentHandler</TT>
objects with MIME types.
<H4><TT>SocketImplFactory</TT></H4>
<P>
The <TT>SocketImplFactory</TT> interface
is used to create objects of the <TT>SocketImpl</TT>
class.
<H4><TT>URLStreamHandlerFactory</TT>
</H4>
<P>
The <TT>URLStreamHandlerFactory</TT>
interface is used to associate a <TT>URLStreamHandler</TT>
object with a protocol type.
<H2><A NAME="javautil"><FONT SIZE=5 FACE="co">java.util</FONT></A>
</H2>
<P>
The <TT>java.util</TT> package provides
a collection of classes that support a variety of common programming
functions.
<H3>Classes</H3>
<H4><TT>BitSet</TT></H4>
<P>
The <TT>BitSet</TT> class is used
to implement a compact set of bits that can be individually or
collectively accessed.
<H4><TT>Date</TT></H4>
<P>
The <TT>Date</TT> class provides access
to the current date and time in a system-independent manner.
<H4><TT>Dictionary</TT></H4>
<P>
The <TT>Dictionary</TT> class is used
to create data container objects that enable data values to be
accessed by their associated keys.
<H4><TT>Hashtable</TT></H4>
<P>
The <TT>Hashtable</TT> class is a
subclass of the <TT>Dictionary</TT>
class that allows a collection of objects to be accessed by a
hash code value.
<H4><TT>Observable</TT></H4>
<P>
The <TT>Observable</TT> class enables
objects to be constructed that inform observer objects as they
are updated. The observer objects must implement the <TT>Observer</TT>
interface.
<H4><TT>Properties</TT></H4>
<P>
The <TT>Properties</TT> class is a
subclass of <TT>Hashtable</TT> that
can be saved or loaded from a stream.
<H4><TT>Random</TT></H4>
<P>
The <TT>Random</TT> class is used
to implement random number generators.
<H4><TT>Stack</TT></H4>
<P>
The <TT>Stack</TT> class is used to
create a stack of objects.
<H4><TT>StringTokenizer</TT></H4>
<P>
The <TT>StringTokenizer</TT> class
is used to parse a <TT>String</TT>
object into a set of tokens.
<H4><TT>Vector</TT></H4>
<P>
The <TT>Vector</TT> class implements
a growable array.
<H3>Interfaces</H3>
<H4><TT>Enumeration</TT></H4>
<P>
The <TT>Enumeration</TT> interface
provides a set of methods for indexing through a set of objects.
<H4><TT>Observer</TT></H4>
<P>
The <TT>Observer</TT> interface is
implemented by classes that observe objects of the <TT>Observable</TT>
class.
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch36.htm"><IMG SRC="http://docs.rinet.ru/JaTricks/pc.gif" BORDER=0 HEIGHT=88
WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="http://docs.rinet.ru/JaTricks/cc.gif" BORDER=0
HEIGHT=88 WIDTH=140></A><A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/JaTricks/hb.gif" BORDER=0
HEIGHT=88 WIDTH=140></A><A HREF="appb.htm"><IMG SRC="http://docs.rinet.ru/JaTricks/nc.gif" BORDER=0
HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>

