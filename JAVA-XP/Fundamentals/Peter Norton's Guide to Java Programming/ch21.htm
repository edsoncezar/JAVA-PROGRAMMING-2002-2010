<HTML>

<HEAD>
   <TITLE>Chapter 21 -- Designing and Implementing Advanced
Applications</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<!--Begin JavaScript roadmap code.  If editing downloaded HTML source, delete
 this portion.-->

<script language="JavaScript">
<!--

function TripodShowPopup()
{
   var bName=navigator.appName;
   var bVer=parseInt(navigator.appVersion);
   var now = new Date();
   var popupURL = "/adm/popup/roadmap.shtml?"+"member_name=er4ebus&path=peternortonjavaprograming&client_ip=200.190.100.218&ts=1015337338&ad_type=POPUP&category=net&id=c056fc8a054025184ab6c6c888516ea9";
   var popupName = "TripodPopup";

   if (bName=="Netscape" && bVer<=3)
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=614,height=150');
   }
   else
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=604,height=135');
   }
   popup.location = popupURL;
}

if(window.parent==window)
{
   TripodShowPopup();
}

// -->
</script>

<script language="JavaScript1.2">
<!--

function changeOpenFunction()
{
   var original_window_open = window.open;
   function new_open_function(url, name, features, replace)
   {
      if(name != "TripodPopup")
         return original_window_open(url, name, features, replace);
   }
   window.open = new_open_function;
}
var bName = navigator.appName;

if(bName != "Netscape")
   changeOpenFunction();

// -->
</script>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#Ff0000>Chapter 21</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#Ff0000>Designing and Implementing Advanced
Applications</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>

<UL>
<LI><A HREF="#ProjectDevelopmentandPlanning" >Project Development and Planning</A>
<UL>
<LI><A HREF="#DeterminingRequirements" >Determining Requirements</A>
<LI><A HREF="#DefiningtheNecessaryObjects" >Defining the Necessary Objects</A>
<LI><A HREF="#PlottingtheProjecttoCompletion" >Plotting the Project to Completion</A>
</UL>

<LI><A HREF="#ProjectDesign" >Project Design</A>
<LI><A HREF="#ProjectImplementation" >Project Implementation</A>

<UL>
<LI><A HREF="#ContainersfortheObjects" >Containers for the Objects</A>
<LI><A HREF="#BuildingtheMainWindow" >Building the Main Window</A>
<LI><A HREF="#AddingtheMenuBarwithPulldownMenus" >Adding the Menu Bar with Pull-down Menus</A>
<LI><A HREF="#AddingtheChoiceMenus" >Adding the Choice Menus</A>
<LI><A HREF="#AddingtheTextArea" >Adding the Text Area</A>
<LI><A HREF="#AddingFileObjects" >Adding File Objects</A>
<LI><A HREF="#SettingtheWheelsinMotion" >Setting the Wheels in Motion</A>
<LI><A HREF="#HandlingEvents" >Handling Events</A>
<LI><A HREF="#BuildingtheUtilityFunctions" >Building the Utility Functions</A>
<LI><A HREF="#HandlingFileIO" >Handling File I/O</A>
<LI><A HREF="#DisplayingtheDialogBoxes" >Displaying the Dialog Boxes</A>
<LI><A HREF="#BuildingtheDialogBoxes" >Building the Dialog Boxes</A>
<LI><A HREF="#TextManipulationObjects" >Text-Manipulation Objects</A>
</UL>
<LI><A HREF="#TheCompleteProject" >The Complete Project</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
Java is a programming language that knows no bounds. Just as you
can create advanced applications in other programming languages,
you can do so in Java as well. This chapter takes you step by
step through the development of an advanced application called
Jompanion.
<P>
Jompanion is a companion editor for Java programming that includes
many features found in advanced applications. Whereas previous
chapters have focused primarily on programming concepts, this
chapter focuses on design concepts. The design of your application's
interface tells the user a lot about the program itself. Well-designed
applications feature friendly graphical interfaces complete with
pull-down menus, choice menus, and pop-up windows.
<P>
Because the Jompanion editor has a well-thought-out design, it
is the perfect example for illustrating design issues. The editor
also includes a complete set of advanced functions that you can
use in just about any application you create.
<H2><A NAME="ProjectDevelopmentandPlanning"><B><FONT SIZE=5 COLOR=#Ff0000>Project
Development and Planning</FONT></B></A></H2>
<P>
Although you can often create a small application on a whim, you
should create advanced applications only with careful forethought.
The more complex the project, the more involved your planning
should be. For most projects, planning involves mapping out the
steps necessary to complete the project on paper. For very complex
projects you might want to use a project-management tool such
as Microsoft Project to make the planning process easier.
<P>
Each step is generally allocated a time period, such as six days
for planning or eight days for implementation. Some steps are
dependent on other steps, meaning they cannot be started until
other aspects of the project are completed. Other steps are not
dependent on any other steps and can be performed at any time
during the project's development. Therefore, when you map out
the steps necessary to complete the project, you should always
note which steps are dependent on others and which are independent.
<P>
After you plot out the steps that will take you through project
completion, you can group the steps into phases that form the
software development life cycle for the application. Generally,
most projects include six phases:
<UL>
<LI><B>Requirements phase:</B> This phase is when you determine
project needs by first examining the purpose, scope, and audience
of the project and then evaluating your reasonable expectations
for the project. Finally, you translate these needs, goals, and
purposes into project requirements.
<LI><B>Specification/Analysis phase:</B> During this phase, you
determine the inner workings of the application. You can do this
in a traditional manner, through specification diagrams such as
data flow diagrams or state transition diagrams, or you can simply
write out the programming logic. You should also define the necessary
objects and the functions they will perform.
<LI><B>Planning phase:</B> During the planning phase, you take
the requirements and specifications developed in the previous
phases and plot out the steps necessary to complete the project.
<LI><B>Design phase:</B> The design phase is when you design the
layout of the project in more detail than you did in the specification
phase. For example, you might create outlines for classes and
methods.
<LI><B>Implementation phase:</B> During the implementation phase,
you actually create the project you have developed. This phase
often takes the longest period of time.
<LI><B>Testing phase:</B> During the testing phase, you ensure
the project performs as it was designed. Ideally, testing is an
ongoing phase throughout the development of the project. In fact,
when you complete each phase you should verify the materials you
have generated.
</UL>
<P>
The duration of each phase should be relevant to the size and
complexity of the application you are developing. You might be
able to develop and implement a project with limited scope in
a single day, but for more advanced projects this process can
take days, weeks, or months.
<P>
Although each phase should be performed in order, you can sometimes
combine phases if it suits your needs. For Jompanion, I combined
the requirements, specification, and planning phases into a general
phase called development and planning.
<H3><A NAME="DeterminingRequirements"><B>Determining Requirements</B></A>
</H3>
<P>
When you begin a new project, the first thing you should do is
develop a list of project needs. If you have not created a project
folder, you should do so now. The <I>project folder</I> will hold
everything related to the project. Generally, your project folder
will have both a paper and an electronic form. The paper form
of the folder can be a three-ring binder or a note pad. The electronic
version of the folder should reside on your hard drive as a directory.
<P>
To help you develop a list of project requirements, you should
first identify the purpose, scope, and target user for the application.
Your <I>purpose statement</I> should describe the type of application
you are creating and why you are creating it. The <I>scope</I>
of the project relates to its size and functionality. The <I>target
user</I> is the person or group for whom you are developing the
application.
<P>
Often you will have primary and secondary target users. The primary
target users are those who will use the application. The secondary
target users are those who may purchase or review the application.
For example, although children would use an educational application,
adults would purchase it. The children using the application would
want it to be fun. The adults buying the application would want
it to help the children learn.
<P>
The purpose, scope, and target user for Jompanion are defined
as follows:
<BLOCKQUOTE>
<I>Purpose:</I>
</BLOCKQUOTE>
<BLOCKQUOTE>
A companion editor for Java programming
</BLOCKQUOTE>
<BLOCKQUOTE>
<I>Scope:</I>
</BLOCKQUOTE>
<BLOCKQUOTE>
An advanced application with many features
</BLOCKQUOTE>
<BLOCKQUOTE>
<I>Target user:</I>
</BLOCKQUOTE>
<BLOCKQUOTE>
Anyone who plans to do Java programming and wants an easy-to-use
text editor.
</BLOCKQUOTE>
<P>
Next, make a list of constraints for the project. Constraints
that apply to most projects include duration, size, and budget.
Normally, you will specify the duration of the project if you
have a deadline. When you have a set amount of time or money to
invest in the project, you will want to constrain the budget.
You might also want to limit the size of the application, especially
if performance and memory use are a concern. The initial constraints
for Jompanion are
<BLOCKQUOTE>
<I>Project duration:</I>
</BLOCKQUOTE>
<BLOCKQUOTE>
No more than 2 weeks
</BLOCKQUOTE>
<BLOCKQUOTE>
<I>Project size:</I>
</BLOCKQUOTE>
<BLOCKQUOTE>
25-50KB
</BLOCKQUOTE>
<BLOCKQUOTE>
<I>Project budget:</I>
</BLOCKQUOTE>
<BLOCKQUOTE>
40-50 hours
</BLOCKQUOTE>
<P>
After you have determined the project constraints, you can develop
a list of needs. Project needs include personnel, computer hardware
and software, financial resources, and supplies. For Jompanion,
the list of needs is small:
<UL>
<LI>A computer with the Java Developer's Kit installed on it
<LI>Disk space on hard drive
<LI>Floppy disks to back up the project
<LI>Daily time investment
</UL>
<H3><A NAME="DefiningtheNecessaryObjects"><B>Defining the Necessary
Objects</B></A></H3>
<P>
After determining project requirements, you should create an overview
of the inner workings of the application by defining the necessary
objects and the flow of data between the objects. The way you
map out the objects and their flow will largely depend on the
type of application you are developing, the modeling tools you
are using, and the development philosophy at the organization
where you work. For Jompanion, I borrowed some of the concepts
used in structured analysis.
<P>
Preliminary modeling in structured analysis is done in the <I>environmental
model</I>, which helps you define the interfaces between your
application and the user. The environmental model includes three
key components:
<UL>
<LI>Statement of purpose-Provides a brief description of the application
for the management staff.
<LI>Context diagram-Provides an overview of the interaction between
the application and outside entities.
<LI>Event list-Provides a complete list of events that can occur
and to which the application must respond.
</UL>
<P>
You will find that the components of the environmental model are
useful for most projects and can be modified to suit almost any
type of project. Earlier I defined a brief statement of purpose
for Jompanion. I expanded upon it for use by management as follows:
<BLOCKQUOTE>
<I>Statement of Purpose:</I>
</BLOCKQUOTE>
<BLOCKQUOTE>
The purpose of the Jompanion text editor is to be a companion
editor for Java development. The editor includes advanced features
that make it useful for development, but it uses minimal system
resources.
</BLOCKQUOTE>
<P>
The <I>context diagram</I> defines the external entities with
which the application interacts. You will find that the more complex
the system, the more useful the diagram. As you can see in Figure
21.1, the only entities Jompanion interacts with are the user
and the file system.
<P>
<A HREF="f21-1.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f21-1.gif" ><B>Figure 21.1 : </B><I>Context diagram for Jompanion.</I></A>
<P>
The most useful component of the environmental model is the <I>event
list</I>. The event list for Jompanion provides a complete list
of events it should support. You use this list to help you define
objects for your application. Events for Jompanion include
<UL>
<LI>Create a new file
<LI>Open a file
<LI>Save current file
<LI>Save current file with a new name
<LI>Find a keyword or phrase
<LI>Replace a keyword or phrase with another keyword or phrase
<LI>Replace all occurrences of a keyword or phrase with another
keyword or phrase
<LI>Cut text and save to a buffer
<LI>Copy text and save to a buffer
<LI>Paste text from the buffer
<LI>Change font type
<LI>Change font size
<LI>Provide help or overview information
<LI>Inform user when errors occur
<LI>Allow user to resize the window if necessary
<LI>Quit or exit the editor
</UL>
<P>
After you develop the environmental model for your application,
you can go on to more detailed modeling. This is when you translate
the event list into data flow, input, and output. Whether you
use data-flow diagrams, state-transition diagrams, petri nets,
or some other type of data models will primarily depend on the
type of application you are developing.
<H3><A NAME="PlottingtheProjecttoCompletion"><B>Plotting the Project
to Completion</B></A></H3>
<P>
After you have modeled the project, you can plan it. The first
thing you should do in the planning stage is work out a schedule
for the project. The schedule does not have to be absolute, however;
the best schedules are flexible and include the necessary milestones,
goals, and time allocations to take the project through to completion.
<P>
The purpose of the schedule is to get you thinking about the project.
Plotting the project to completion helps you visualize the finished
project and transforms it from an abstract idea to something more
tangible and doable. The schedule for Jompanion is based on the
materials developed in earlier stages of the project.
<P>
After you develop a schedule, reevaluate the project specifications.
Are the constraints, needs, and functionality determined earlier
realistic given the timetable you have developed? If the answer
is yes, you can go on to designing the project.
<P>
If the answer is no, carefully review the project and see what
you can modify. Sometimes this might mean going back to management
and asking for more time. Other times it might mean postponing
the development of nonessential functions.
<H2><A NAME="ProjectDesign"><B><FONT SIZE=5 COLOR=#Ff0000>Project
Design</FONT></B></A></H2>
<P>
During the <I>design phase</I>, you use the preliminary materials
developed in the previous phases to design the application. Because
Java is an object-oriented language, it seems logical that you
use object-oriented design methodology to create Java applications.
The goal of object-oriented design is to determine the objects
in an application and then to design the application in terms
of those objects.
<P>
If you take a close look at the event list developed earlier in
the section titled &quot;Defining the Necessary Objects,&quot;
you should see that it translates into a series of objects needed
in the application. Start by grouping the events into object categories,
such as functions and user interfaces. Then consider which object
groups should be added to the main window. For Jompanion, these
objects include a menu bar, choice menus, a text area, and the
file you are editing. There must be containers for these objects
in the application.
<P>
You also need to allow users to manipulate the main window of
the application. In most applications, this is a feature of the
method that displays the window. This method should describe either
the attributes of the window or the call functions that describe
those attributes. Some of the attributes you should consider for
the main window of any application include
<UL>
<LI>Initial screen size
<LI>Color of the screen and borders
<LI>Color, size, and font type of text on the screen
<LI>Location of window-manipulation mechanisms
<LI>Style of the title bar
<LI>Location of the menu bar
<LI>Size of the text area
</UL>
<P>
The next object to design is a menu bar with several menus. You
can determine the type of menus by grouping the functions of the
editor into common categories, as shown in Table 21.1.
<P>
<CENTER><B>Table 21.1. The </B><TT><B><FONT FACE="Courier">MenuBar</FONT></B></TT><B>
object.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><I>Object</I></TD><TD WIDTH=102><I>Component</I>
</TD></TR>
<TR><TD WIDTH=84>Menu bar</TD><TD WIDTH=102>File menu</TD></TR>
<TR><TD WIDTH=84>&nbsp;</TD><TD WIDTH=102>Edit menu</TD></TR>
<TR><TD WIDTH=84>&nbsp;</TD><TD WIDTH=102>About menu</TD></TR>
</TABLE></CENTER>
<P>
<P>
Each menu component contains <I>menu items</I>, which are objects
that perform specific operations. These operations are driven
by the events defined earlier in this chapter and help to define
the methods needed in the application. Table 21.2 shows these
operations.<BR>
<P>
<CENTER><B>Table 21.2. Menu functions.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><I>Object</I></TD><TD WIDTH=99><I>Menu Item</I>
</TD><TD WIDTH=326><I>Purpose</I></TD></TR>
<TR><TD WIDTH=102>File menu</TD><TD WIDTH=99>New</TD><TD WIDTH=326>Create a new file
</TD></TR>
<TR><TD WIDTH=102>&nbsp;</TD><TD WIDTH=99>Open</TD><TD WIDTH=326>Open a file
</TD></TR>
<TR><TD WIDTH=102>&nbsp;</TD><TD WIDTH=99>Save</TD><TD WIDTH=326>Save current file
</TD></TR>
<TR><TD WIDTH=102>&nbsp;</TD><TD WIDTH=99>Save As</TD><TD WIDTH=326>Save current file with a new name
</TD></TR>
<TR><TD WIDTH=102>&nbsp;</TD><TD WIDTH=99>Exit</TD><TD WIDTH=326>Exit the editor
</TD></TR>
<TR><TD WIDTH=102>Edit menu</TD><TD WIDTH=99>Find</TD><TD WIDTH=326>Find a keyword or phrase
</TD></TR>
<TR><TD WIDTH=102>&nbsp;</TD><TD WIDTH=99>Replace</TD><TD WIDTH=326>Replace a keyword or phrase
</TD></TR>
<TR><TD WIDTH=102>&nbsp;</TD><TD WIDTH=99>Replace All</TD><TD WIDTH=326>Replace all occurrences of a keyword or phrase
</TD></TR>
<TR><TD WIDTH=102>&nbsp;</TD><TD WIDTH=99>Cut</TD><TD WIDTH=326>Cut text and save to a buffer
</TD></TR>
<TR><TD WIDTH=102>&nbsp;</TD><TD WIDTH=99>Copy</TD><TD WIDTH=326>Copy text and save to a buffer
</TD></TR>
<TR><TD WIDTH=102>&nbsp;</TD><TD WIDTH=99>Paste</TD><TD WIDTH=326>Paste text from the buffer
</TD></TR>
<TR><TD WIDTH=102>About menu</TD><TD WIDTH=99>About</TD><TD WIDTH=326>Provide help or overview information
</TD></TR>
</TABLE></CENTER>
<P>
<P>
In Java, events the user can cause by clicking a mouse button
are generally called <I>action events</I>. A set of related events,
called <I>key actions</I>, are events that occur when the user
presses a key. As you design the application, you should consider
mapping certain key actions to events. To make the Jompanion editor
easier to use, I decided to map most events to the function keys,
thus letting the user press a function key to initiate an event.
Table 21.3 shows how I mapped the function keys to events.<BR>
<P>
<CENTER><B>Table 21.3. Mapping key actions to events.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><I>Function Key</I></TD><TD WIDTH=112><I>Related Event</I>
</TD></TR>
<TR><TD WIDTH=110>f1</TD><TD WIDTH=112>Open</TD></TR>
<TR><TD WIDTH=110>f2</TD><TD WIDTH=112>Save</TD></TR>
<TR><TD WIDTH=110>f3</TD><TD WIDTH=112>Save As</TD></TR>
<TR><TD WIDTH=110>f4</TD><TD WIDTH=112>Find</TD></TR>
<TR><TD WIDTH=110>f5</TD><TD WIDTH=112>Replace</TD></TR>
<TR><TD WIDTH=110>f6</TD><TD WIDTH=112>Replace All</TD></TR>
<TR><TD WIDTH=110>f7</TD><TD WIDTH=112>Cut</TD></TR>
<TR><TD WIDTH=110>f8</TD><TD WIDTH=112>Copy</TD></TR>
<TR><TD WIDTH=110>f9</TD><TD WIDTH=112>Paste</TD></TR>
</TABLE></CENTER>
<P>
<P>
The next two objects in the application are the choice menus that
allow users to select the size and type of the font. (See Table
21.4.) When a user makes a selection, all text in the current
document is displayed in the new font type or size.<BR>
<P>
<CENTER><B>Table 21.4. Choice menus.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><I>Selection Menu</I></TD><TD WIDTH=178><I>Selection Menu Choices</I>
</TD></TR>
<TR><TD WIDTH=122>Font Type</TD><TD WIDTH=178>Courier</TD></TR>
<TR><TD WIDTH=122>&nbsp;</TD><TD WIDTH=178>System</TD></TR>
<TR><TD WIDTH=122>&nbsp;</TD><TD WIDTH=178>Helvetica</TD></TR>
<TR><TD WIDTH=122>&nbsp;</TD><TD WIDTH=178>Times Roman</TD></TR>
<TR><TD WIDTH=122>Font Size</TD><TD WIDTH=178>6</TD></TR>
<TR><TD WIDTH=122>&nbsp;</TD><TD WIDTH=178>7</TD></TR>
<TR><TD WIDTH=122>&nbsp;</TD><TD WIDTH=178>8</TD></TR>
<TR><TD WIDTH=122>&nbsp;</TD><TD WIDTH=178>9</TD></TR>
<TR><TD WIDTH=122>&nbsp;</TD><TD WIDTH=178>. . .</TD></TR>
<TR><TD WIDTH=122>&nbsp;</TD><TD WIDTH=178>24</TD></TR>
</TABLE></CENTER>
<P>
<P>
So far, I have accounted for all but two of the events specified
earlier, but the application still lacks a mechanism to inform
users when errors occur. Most applications display errors in pop-up
windows, which sounds like a good idea. This revelation, however,
leads to the question of where in the application other pop-up
windows might be needed and what purpose they will serve. Pop-up
windows that display information or accept user input are generally
called <I>dialog boxes</I>; Table 21.5 shows the list of dialog
boxes to be used in the Jompanion application.<BR>
<P>
<CENTER><B>Table 21.5. Dialog boxes for Jompanion.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><I>Dialog Box</I></TD><TD WIDTH=424><I>Description</I>
</TD></TR>
<TR><TD WIDTH=99>Error</TD><TD WIDTH=424>Informs the user when an error occurs
</TD></TR>
<TR><TD WIDTH=99>Find</TD><TD WIDTH=424>Lets the user enter search text
</TD></TR>
<TR><TD WIDTH=99>Help</TD><TD WIDTH=424>Displays quick keys for the editor
</TD></TR>
<TR><TD WIDTH=99>Open File</TD><TD WIDTH=424>Allows the user to open a file
</TD></TR>
<TR><TD WIDTH=99>Replace</TD><TD WIDTH=424>Lets the user enter text to search for and the text with which to replace it
</TD></TR>
<TR><TD WIDTH=99>Replace All</TD><TD WIDTH=424>Lets the user replace all occurrences of a word or phrase
</TD></TR>
<TR><TD WIDTH=99>Save File</TD><TD WIDTH=424>Allows the user to save a file
</TD></TR>
</TABLE></CENTER>
<P>
<P>
Now that you have identified the major objects used in the application,
you can create a list of them. As you implement each object in
the next phase, you can check off the object from the list to
be sure that you have accounted for all the major functions of
the application.
<BLOCKQUOTE>
<I>Key Object List:</I>
</BLOCKQUOTE>
<UL>
<LI>About dialog box
<LI>About menu item
<LI>Choice menu for font size
<LI>Choice menu for font type
<LI>Copy menu item
<LI>Cut menu item
<LI>Error dialog box
<LI>Exit menu item
<LI><TT><FONT FACE="Courier">File</FONT></TT> object
<LI>Find dialog box
<LI>Find menu item
<LI>Main window
<LI>Menu bar
<LI>New menu item
<LI>Open File dialog box
<LI>Open menu item
<LI>Paste menu item
<LI>Replace All dialog box
<LI>Replace All menu item
<LI>Replace dialog box
<LI>Replace menu item
<LI>Save As menu item
<LI>Save File dialog box
<LI>Save menu item
<LI>Text-editing area
</UL>
<P>
After mapping out most of the objects and events for the application,
you can go on to more detailed design. Here you should work out
the interaction between objects and determine the arguments objects
will accept and pass. When you are comfortable with the design
of the application and can visualize the flow of data from object
to object, you can begin the implementation phase. The next section
provides a detailed description of how Jompanion was transformed
from a concept to a completed application.
<H2><A NAME="ProjectImplementation"><B><FONT SIZE=5 COLOR=#Ff0000>Project
Implementation</FONT></B></A></H2>
<P>
In the <I>implementation phase</I>, you create the source code
for the project. For most advanced projects, this phase is actually
a combined phase involving teams of programmers who implement
and integrate the source code. Generally, each programming team
is responsible for creating a specific set of objects with related
functionality, such as the user interface or file I/O. After these
object sets are created, they are integrated into the application.
<P>
The Java programming language shakes up this methodology by allowing
programming teams to focus on higher-level functions, which can
cut hundreds of hours off any advanced project. As you saw in
the &quot;Project Design&quot; section, the Jompanion editor is
a fairly advanced project, especially when you consider it has
a completely graphical user interface. If Jompanion were programmed
in C, the source code would easily run 10,000+ lines. Thanks to
the class libraries in the Java API, the source code for Jompanion
is just over 800 lines.
<P>
The sections that follow show you how to build the Jompanion editor
following the design I have described. Step by step, each of the
objects identified in the design is implemented. As with any program
created in an object-oriented programming language, the key objects
identified in the design phase need containers so they can be
used throughout the program. The next section details those containers.
<H3><A NAME="ContainersfortheObjects"><B>Containers for the Objects</B></A>
</H3>
<P>
One purpose of the design phase is to help you identify objects
needed in the application. In the source code, you must create
an instance of these objects before you can use them. You do this
by declaring containers for the objects as instance variables.
Most instance-variable declarations follow the main class declaration.
<P>
Whenever you use instance variables, you should try to determine
if initial or default values are needed. In Jompanion, 20 of the
key containers follow the Jompanion class declaration:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">//container for the editing window in
the application<BR>
&nbsp;&nbsp;TextArea textArea;<BR>
&nbsp;&nbsp;//container for the choice menu for font type<BR>
&nbsp;&nbsp;//container for the size of the font as a string<BR>
&nbsp;&nbsp;String fontSize;<BR>
&nbsp;&nbsp;//container for the name of the current font<BR>
&nbsp;&nbsp;String fontName = &quot;Courier&quot;;<BR>
&nbsp;&nbsp;//container for the size of the font as a number<BR>
&nbsp;&nbsp;int fontNumeric = 12;<BR>
<BR>
&nbsp;&nbsp;Choice fontChoice;<BR>
&nbsp;&nbsp;//container for the choice menu for font size<BR>
&nbsp;&nbsp;Choice sizeChoice;<BR>
&nbsp;&nbsp;//container for the file object<BR>
&nbsp;&nbsp;private String fileName = null;<BR>
&nbsp;&nbsp;//container for the about dialog box<BR>
&nbsp;&nbsp;private AboutDialog aboutDialog = null;<BR>
&nbsp;&nbsp;//container for the error dialog box<BR>
&nbsp;&nbsp;private ErrorDialog errorDialog = null;<BR>
&nbsp;&nbsp;//container for the find dialog box<BR>
&nbsp;&nbsp;private FindDialog findDialog = null;<BR>
&nbsp;&nbsp;//container for the replace dialog box<BR>
&nbsp;&nbsp;private ReplaceDialog replaceDialog = null;<BR>
&nbsp;&nbsp;//container for the replace all dialog box<BR>
&nbsp;&nbsp;private ReplaceAllDialog replaceAllDialog = null;
<BR>
&nbsp;&nbsp;//container for the open file dialog box<BR>
&nbsp;&nbsp;private FileDialog openDialog;<BR>
&nbsp;&nbsp;//container for the save file dialog box<BR>
&nbsp;&nbsp;private FileDialog saveDialog;<BR>
&nbsp;&nbsp;//container for the about menu item<BR>
&nbsp;&nbsp;private MenuItem aboutMenuItem;<BR>
&nbsp;&nbsp;//container for the copy menu item<BR>
&nbsp;&nbsp;private MenuItem copyMenuItem;<BR>
&nbsp;&nbsp;//container for the cut menu item<BR>
&nbsp;&nbsp;private MenuItem cutMenuItem;<BR>
&nbsp;&nbsp;//container for the exit menu item<BR>
&nbsp;&nbsp;private MenuItem exitMenuItem;<BR>
&nbsp;&nbsp;//container for the find menu item<BR>
&nbsp;&nbsp;private MenuItem findMenuItem;<BR>
&nbsp;&nbsp;//container for the new menu item<BR>
&nbsp;&nbsp;private MenuItem newMenuItem;<BR>
&nbsp;&nbsp;//container for the open menu item<BR>
&nbsp;&nbsp;private MenuItem openMenuItem;<BR>
&nbsp;&nbsp;//container for the paste menu item<BR>
&nbsp;&nbsp;private MenuItem pasteMenuItem;<BR>
&nbsp;&nbsp;//container for the replace all menu item<BR>
&nbsp;&nbsp;private MenuItem replaceAllMenuItem;<BR>
&nbsp;&nbsp;//container for the replace menu item<BR>
&nbsp;&nbsp;private MenuItem replaceMenuItem;<BR>
&nbsp;&nbsp;//container for the save as menu item<BR>
&nbsp;&nbsp;private MenuItem saveAsMenuItem;<BR>
&nbsp;&nbsp;//container for the save menu item</FONT></TT>
</BLOCKQUOTE>
<P>
Naturally, a text editor needs objects associated with the direct
manipulation of text. Although the objects associated with the
menus and dialog boxes are used to display the graphical user
interface, they do not directly manipulate the text. You have
already identified the key functions for manipulating text; now
all you need to do is define containers to hold the objects used
to manipulate text. These containers include the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">//container for the text you are copying
<BR>
&nbsp;&nbsp;String copyString = &quot;&quot;;<BR>
&nbsp;&nbsp;//container for the text you are searching for<BR>
&nbsp;&nbsp;String findString = &quot;&quot;;<BR>
&nbsp;&nbsp;//container for the text you are replacing the search
text with<BR>
&nbsp;&nbsp;String replaceString = &quot;&quot;;<BR>
&nbsp;&nbsp;//container for the size of the font as a string<BR>
&nbsp;&nbsp;String fontSize = &quot;&quot;;<BR>
&nbsp;&nbsp;//container for the name of the current font<BR>
&nbsp;&nbsp;String fontName = &quot;Courier&quot;;<BR>
&nbsp;&nbsp;//container for the size of the font as a number</FONT></TT>
</BLOCKQUOTE>
<H3><A NAME="BuildingtheMainWindow"><B>Building the Main Window</B></A>
</H3>
<P>
The way you design and implement the main window of your application
is extremely important. Users do not want to stare at a screen
with colors that hurt their eyes, nor do they want to go through
three or four menu levels to perform core functions such as copying
text or opening a file. Users also do not like applications that
are frustrating to use. For this reason, your main window should
<UL>
<LI>Be visually appealing
<LI>Provide quick access to all major functions of the application
<LI>Be friendly and logically organized
</UL>
<P>
As you add features to the application's main window, you should
keep these concepts in mind. The key features for Jompanion's
main window were identified in the design phase, including a menu
bar, two choice menus, a text area, and a file object. Earlier,
you should have also identified key attributes for the main window,
such as the color of the background and text, the initial font
type and size, and the size of the window.
<P>
The <TT><FONT FACE="Courier">Jompanion()</FONT></TT> method shown
in Listing 21.1 sets up the main window for the Jompanion editor.
A call to <TT><FONT FACE="Courier">super</FONT></TT> places the
title bar on the window. The background color is set to white.
The font size and type are set to the default values for the <TT><FONT FACE="Courier">fontName</FONT></TT>
and <TT><FONT FACE="Courier">fontNumeric</FONT></TT> objects.
<HR>
<BLOCKQUOTE>
<B>Listing 21.1. The </B><TT><B><FONT FACE="Courier">Jompanion()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* This method Adds all the essential object interfaces to
the application<BR>
&nbsp;* and displays the application as well.<BR>
&nbsp;*/<BR>
&nbsp;&nbsp;public Jompanion() {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;super(&quot;Jompanion<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&Acirc;Written by William R. Stanek (c)
1996&quot;);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setFont(new Font(fontName, Font.PLAIN,
fontNumeric));<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;AddMenu();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;AddChoice();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;AddTextArea();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;AddDialog();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Dimension d;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;d = Toolkit.getDefaultToolkit().getScreenSize();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;resize(d.width, d.height);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea.requestFocus();<BR>
&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Next, the key objects are added to the screen by calling their
associated methods. You should always call these objects in the
order you want them to be placed on the screen. The <TT><FONT FACE="Courier">AddMenu()</FONT></TT>
method adds the menu bar to the window. The <TT><FONT FACE="Courier">AddChoice()</FONT></TT>
method adds the two choice menus to the window. The <TT><FONT FACE="Courier">AddTextArea()</FONT></TT>method
adds the text area to the window. The <TT><FONT FACE="Courier">AddDialog()</FONT></TT>
method sets up the file I/O dialog box for <TT><FONT FACE="Courier">File</FONT></TT>
objects.
<P>
After the key objects are constructed, the window size is set
to the current screen size. This is done by obtaining the dimensions
for the user's screen and then resizing the main window to the
screen size. You can also use this technique to set the initial
window size proportional to the user's screen size. The final
step is to display the main window. Figure 21.2 shows Jompanion's
main window.
<P>
<A HREF="f21-2.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f21-2.gif" ><B>Figure 21.2 : </B><I>Jompanion's main window.</I></A>
<H3><A NAME="AddingtheMenuBarwithPulldownMenus"><B>Adding the
Menu Bar with Pull-down Menus</B></A></H3>
<P>
The first step in creating the objects used in Jompanion's main
window is to build the menu bar. The menu bar contains pull-down
menus from which users can make selections. Although you can put
as many pull-down menus as you want on a single menu bar, you
should try to limit the number of pull-down menus to 10 or less.
By the same token, you should also try to limit the number of
menu items on any single pull-down menu.
<P>
When determining the number of items for a menu, keep in mind
that you should balance the length of the menus if possible. A
good rule of thumb is to limit menu items to roughly two times
the number of menus. Thus, instead of building a menu bar with
three pull-down menus and roughly 30 menu items per pull-down,
you could create a menu bar with seven pull-down menus and roughly
14 menu items per pull-down.
<P>
As shown in Listing 21.2, the menu bar for Jompanion was created
by logically grouping the necessary functions of the editor into
three menus. The first menu, called File, contains file-related
menu items. The second menu, Edit, contains all the editing functions.
The third menu, About, contains a menu item that provides information
on function-key assignments. Although you should try to balance
the length of items in menus, for some menus like Jompanion's
About menu it doesn't make sense to add other items to the menu.
<P>
To make the menu more readable and quicker to scan, menu items
should be logically grouped and ordered into subcategories as
well. You can separate subcategories in a pull-down menu using
the <TT><FONT FACE="Courier">addSeparator()</FONT></TT> method,
which adds a graphical rule to the menu that serves to visually
separate categories of menu items. Jompanion's File menu is divided
into three subcategories of file-related functions with two separators.
Similarly, the Edit menu is divided into two subcategories of
editing functions with one separator.
<P>
After all menus and menu items are added to the menu bar, the
menu bar is set for display using the <TT><FONT FACE="Courier">setMenuBar()</FONT></TT>method.
Keep in mind that the menu bar is not actually displayed until
the <TT><FONT FACE="Courier">show()</FONT></TT> method is invoked.
Figure 21.3 shows Jompanion with the Edit menu activated.
<P>
<A HREF="f21-3.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f21-3.gif" ><B>Figure 21.3 : </B><I>Jompanion's Edit menu.</I></A>
<HR>
<BLOCKQUOTE>
<B>Listing 21.2. Adding the menu bar.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* Menu Creation Routines:<BR>
&nbsp;* File: New, Open (f1), Save (f2), Save As (f3), Exit<BR>
&nbsp;* Edit: Find (f4), Replace (f5), Replace All (f6), <BR>
&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cut (f7), Copy
(f8), Paste (f9)<BR>
&nbsp;* About: About Jompanion<BR>
*/<BR>
<BR>
&nbsp;&nbsp;private void AddMenu() {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Menu menu;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;MenuBar menuBar = new MenuBar();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//Sets up the File menu<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu = new Menu(&quot;File&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;newMenuItem = new MenuItem(&quot;New&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.add(newMenuItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;openMenuItem = new MenuItem(&quot;Open&nbsp;&nbsp;(f1)&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.add(openMenuItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.addSeparator();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;saveMenuItem = new MenuItem(&quot;Save&nbsp;&nbsp;(f2)&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.add(saveMenuItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;saveAsMenuItem = new MenuItem(&quot;Save
As&nbsp;&nbsp;(f3)&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.add(saveAsMenuItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.addSeparator();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;exitMenuItem = new MenuItem(&quot;Exit&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.add(exitMenuItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menuBar.add(menu);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//sets up the Edit menu<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu = new Menu(&quot;Edit&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;findMenuItem = new MenuItem(&quot;Find&nbsp;&nbsp;(f4)&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.add(findMenuItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;replaceMenuItem = new MenuItem(&quot;Replace&nbsp;&nbsp;(f5)&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.add(replaceMenuItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;replaceAllMenuItem = new MenuItem(&quot;ReplaceAll&nbsp;&nbsp;(f6)&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.add(replaceAllMenuItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.addSeparator();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;cutMenuItem = new MenuItem(&quot;Cut&nbsp;&nbsp;(f7)&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.add(cutMenuItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;copyMenuItem = new MenuItem(&quot;Copy&nbsp;&nbsp;(f8)&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.add(copyMenuItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;pasteMenuItem = new MenuItem(&quot;Paste&nbsp;&nbsp;(f9)&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.add(pasteMenuItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menuBar.add(menu);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//sets up the About menu<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu = new Menu(&quot;About&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;aboutMenuItem = new MenuItem(&quot;About
Jompanion&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.add(aboutMenuItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menuBar.add(menu);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setMenuBar(menuBar);<BR>
&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="AddingtheChoiceMenus"><B>Adding the Choice Menus</B></A>
</H3>
<P>
The second step in creating the objects used in Jompanion's main
window is to create the two choice menus identified in the design
phase. Unlike menus that are added to an application via a menu
bar, choice menus are added as individual objects. Although you
could group the choice menus on a panel, the choice menus used
in Jompanion are added directly to the main window. This is done
by declaring instances of the Choice() method for the fontChoice
and fontSize menu objects, adding items to the menus, and then
using the add() method to add the choice menus to the main window.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Tip</B></TD></TR>
<TR><TD WIDTH=586>
<BLOCKQUOTE>
If you have not set the layout for the current window, the choice menus will not display. Although you could set the layout in Jompanion's <TT><FONT FACE="Courier">addChoice()</FONT></TT> method, the layout is currently set in the <TT><FONT 
FACE="Courier">addText()</FONT></TT> method. Either way, the choice menus and the text area are placed onto the screen with the same layout.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
When you design a choice menu, you should use clear organization.
Notice in Listing 21.3 that Jompanion uses both an alphabetic
and a numeric list. Generally, choice menus with alphabetic lists
should be in alphabetic order, and choice menus with numeric lists
should be in numeric order.
<HR>
<BLOCKQUOTE>
<B>Listing 21.3. Adding the choice menus.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* AddChoice creates the choice boxes for font type and size.
<BR>
&nbsp;* Once the choice boxes are built, they are added to the
application.<BR>
&nbsp;*/<BR>
&nbsp;&nbsp;private void AddChoice() {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//set up choice box for font type<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fontChoice = new Choice();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fontChoice.addItem(&quot;Courier&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fontChoice.addItem(&quot;Helvetica&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fontChoice.addItem(&quot;System&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fontChoice.addItem(&quot;TimesRoman&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fontChoice.select(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add(fontChoice);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//set up choice box for font size<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice = new Choice();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.addItem(&quot;8&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.addItem(&quot;10&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.addItem(&quot;12&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.addItem(&quot;14&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.addItem(&quot;16&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.addItem(&quot;18&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.addItem(&quot;20&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.addItem(&quot;22&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.addItem(&quot;24&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.addItem(&quot;26&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.addItem(&quot;28&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.addItem(&quot;30&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.select(2);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add(sizeChoice);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
You should always set appropriate default values that mirror the
initial settings for the application, especially when the menu
affects the screen display. If the default values are not set,
the first choice in the menu is displayed. The default value for
the <TT><FONT FACE="Courier">fontChoice</FONT></TT> menu object
in Jompanion is set to Courier, and the default value for the
<TT><FONT FACE="Courier">fontSize</FONT></TT> menu object is set
to 12. These defaults mirror the initial settings for font type
and font size specified in the variable declarations. The <TT><FONT FACE="Courier">select()</FONT></TT>
method is used to set the default value.
<H3><A NAME="AddingtheTextArea"><B>Adding the Text Area</B></A>
</H3>
<P>
The third step in creating the objects used in Jompanion's main
window is to build the text area. This is done using the <TT><FONT FACE="Courier">TextArea()</FONT></TT>
method. Because the <TT><FONT FACE="Courier">TextArea()</FONT></TT>
method only allows you to set the size of the text area in terms
of rows and columns, the optimal size of the text area is difficult
to determine and ultimately depends on the display mode of the
end-user's computer and the font type and size being used.
<P>
Jompanion sets the size of the text area to 24 rows and 80 columns.
For users with a 640<FONT FACE="Symbol">&#165;</FONT>480 display
mode or a 13&quot; Macintosh screen, 24 rows by 80 columns is
probably a good size for the text area. However, this means that
the text area will not fill the screen on computer systems with
larger display modes. Because the text area is for editing and
previewing text files, the boolean value <TT><FONT FACE="Courier">SetEditable</FONT></TT>
is set to <TT><FONT FACE="Courier">true</FONT></TT> before the
text area is displayed.
<P>
The method in Jompanion that calls the <TT><FONT FACE="Courier">TextArea()</FONT></TT>
method is called <TT><FONT FACE="Courier">AddTextArea</FONT></TT>,
which is defined as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* AddTextArea creates the text area for your edit sessions.
<BR>
&nbsp;*/<BR>
&nbsp;&nbsp;private void AddTextArea() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setLayout(new FlowLayout(FlowLayout.LEFT));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea = new TextArea(24, 80);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea.setEditable(true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add(textArea);<BR>
&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<H3><A NAME="AddingFileObjects"><B>Adding </B><TT><B><FONT SIZE=4 FACE="Courier">File</FONT></B></TT><B><FONT SIZE=4>
Objects</FONT></B></A></H3>
<P>
The final step in creating the objects used in Jompanion's main
window is to initialize the dialog boxes for opening and saving
files. This is done by creating new instances of <TT><FONT FACE="Courier">FileDialog</FONT></TT>.
The first dialog box is set with a value of <TT><FONT FACE="Courier">LOAD</FONT></TT>,
which allows the user to open files using the <TT><FONT FACE="Courier">FileDialog</FONT></TT>
method and its associated pop-up window. The second dialog box
is set with a value of <TT><FONT FACE="Courier">SAVE</FONT></TT>,
which allows the user to save files using the <TT><FONT FACE="Courier">FileDialog</FONT></TT>
method and its associated pop-up window.
<P>
The method in Jompanion that calls the <TT><FONT FACE="Courier">FileDialog()</FONT></TT>
method is called <TT><FONT FACE="Courier">AddDialog</FONT></TT>
and is defined as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* AddDialog initializes the dialog boxes for opening and
saving files.<BR>
&nbsp;*/<BR>
&nbsp;&nbsp;private void AddDialog() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;openDialog = new FileDialog(this, &quot;Open
File&quot;,FileDialog.LOAD);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;saveDialog = new FileDialog(this, &quot;Save
File&quot;,FileDialog.SAVE);<BR>
&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<H3><A NAME="SettingtheWheelsinMotion"><B>Setting the Wheels in
Motion</B></A></H3>
<P>
Although the <TT><FONT FACE="Courier">Jompanion()</FONT></TT>
method builds the main window and calls the methods that add objects
to the window, it is not the method that sets the whole application
in motion. This task is handled by the <TT><FONT FACE="Courier">main()</FONT></TT>
method, which is the first method invoked when any application
starts. The purpose of Jompanion's <TT><FONT FACE="Courier">main()</FONT></TT>
method is to call the <TT><FONT FACE="Courier">Jompanion()</FONT></TT>
method.
<P>
To increase the functionality of the application as a whole, you
can allow the application to accept a filename as a parameter.
For this reason, Jompanion's <TT><FONT FACE="Courier">main()</FONT></TT>
method lets you pass the name of a file you want to open when
the application starts. In addition to being able to open a file
in the current directory simply by entering the filename, you
can also specify the path to the file when you invoke Jompanion
from the command line.
<P>
The code for the <TT><FONT FACE="Courier">main()</FONT></TT> method
follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;//the main method of the
application invokes the Jompanion method<BR>
&nbsp;&nbsp;public static void main(String args[]) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Jompanion n = new Jompanion();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (args.length == 1)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (n.read(args[0])) n.fileName
= args[0];<BR>
&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
All events that occur after the application starts and the main
window displays are user driven. <I>User-driven events</I> occur
when the user makes a selection on a menu, presses a function
key, or causes an error.
<H3><A NAME="HandlingEvents"><B>Handling Events</B></A></H3>
<P>
The best way to handle events in applications is with the <TT><FONT FACE="Courier">handleEvent()</FONT></TT>
method. Most of the events that your application handles should
have been identified when you created the event list during the
design phase. Normally, appropriate actions for each of these
events should be defined in your application's <TT><FONT FACE="Courier">handleEvent()</FONT></TT>
method. However, two particular events-error handling and window
resizing-are generally not handled at this level. Because error
handling is particular to a class or method, events related to
errors are usually handled at a lower level. Because window resizing
is particular to each window used in the application, window resizing
is also handled at a lower level.
<P>
Updating the font type and font size based on a choice menu involves
converting argument values. For font type, the value of the argument
related to the target event is converted to a string. The string
contains the name of the font the user selected and is used as
an input value for the <TT><FONT FACE="Courier">Font()</FONT></TT>
method. Converting the font size is a bit more tricky. First,
a string called <TT><FONT FACE="Courier">fontSize</FONT></TT>
is set to the value of the target argument; then the string is
converted to an integer value using the <TT><FONT FACE="Courier">parseInt()</FONT></TT>
method. Because this method throws an exception, the exception
is checked for and corrected if it occurs.
<P>
The <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
plays a crucial role in the behavior of your application. If there
is a flaw in your event-handling logic, your program will not
behave as you expect. The first draft of Jompanion's <TT><FONT FACE="Courier">handleEvent</FONT></TT>
method for events related to font type and size contains a logic
flaw that causes the font setting to not get updated as you would
expect. Because the values for font type and font size are set
in separate <TT><FONT FACE="Courier">if...then</FONT></TT> statements
in the code that follows, the application forgets the value of
the current <TT><FONT FACE="Courier">fontName</FONT></TT> object
when you set value for the <TT><FONT FACE="Courier">fontSize</FONT></TT>
object and forgets the value of the current <TT><FONT FACE="Courier">fontSize</FONT></TT>
object when you set the value for the <TT><FONT FACE="Courier">fontName</FONT></TT>
object:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">if(event.target == fontChoice) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
fontName = event.arg.toString();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.setFont(new
Font(fontName, Font.PLAIN, fontNumeric));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(event.target
== sizeChoice) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
fontSize = event.arg.toString();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fontNumeric
= Integer.parseInt(fontSize);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
catch (NumberFormatException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fontNumeric
= 12;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If error occurs set font
size to 12<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.setFont(new
Font(fontName, Font.PLAIN, fontNumeric));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
The logic flaw is corrected by setting the <TT><FONT FACE="Courier">fontName</FONT></TT>
and <TT><FONT FACE="Courier">fontSize</FONT></TT> values in the
same <TT><FONT FACE="Courier">if...then</FONT></TT> statement,
as shown in the code sample that follows. To do this, the two
related events are combined using a logical <TT><FONT FACE="Courier">or</FONT></TT>.
Thus when the user makes a selection on either choice menu, the
values for both the <TT><FONT FACE="Courier">fontName</FONT></TT>
object and <TT><FONT FACE="Courier">fontSize</FONT></TT> object
are set:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">if(event.target == fontChoice || event.target
== sizeChoice){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
fontName = event.arg.toString();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.setFont(new
Font(fontName, Font.PLAIN, fontNumeric));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
fontSize = event.arg.toString();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fontNumeric
= Integer.parseInt(fontSize);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
catch (NumberFormatException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fontNumeric
= 12;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If error occurs set font
size to 12<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.setFont(new
Font(fontName, Font.PLAIN, fontNumeric));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
Jompanion's event list includes 16 items. Except for error handling
and window resizing, each of these events is handled by the method
shown in Listing 21.4. When a user closes the main window, the
<TT><FONT FACE="Courier">WINDOW_DESTROY</FONT></TT> event occurs
and the program exits. When a user makes a selection from a pull-down
or choice menu, an <TT><FONT FACE="Courier">ACTION_EVENT</FONT></TT>
event occurs. If the event is an instance of a <TT><FONT FACE="Courier">MenuItem</FONT></TT>
object, a method that corresponds to the selected menu item is
called, such as <TT><FONT FACE="Courier">cut()</FONT></TT> or
<TT><FONT FACE="Courier">paste()</FONT></TT>. If the value associated
with the event is an instance of <TT><FONT FACE="Courier">fontChoice</FONT></TT>
or <TT><FONT FACE="Courier">fontSize</FONT></TT>, a new font type
or size is set for the text area. When a user presses a key, a
<TT><FONT FACE="Courier">KEY_ACTION</FONT></TT> event occurs,
and the method associated with the key is called.
<HR>
<BLOCKQUOTE>
<B>Listing 21.4. Handling events from the menu bar.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* Handle Events:<BR>
&nbsp;* Event.WINDOW_DESTROY: ensures clean exit<BR>
&nbsp;* Event.ACTION_EVENT: Events from menu and choice boxes
<BR>
&nbsp;* Event.KEY_ACTION: Press function keys<BR>
*/<BR>
<BR>
&nbsp;&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;switch(event.id) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Event.WINDOW_DESTROY:
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Event.ACTION_EVENT:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(event.target
instanceof MenuItem) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(event.target
== aboutMenuItem) showAboutDialog();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
if(event.target == copyMenuItem) copy();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
if(event.target == cutMenuItem) cut();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
if(event.target == exitMenuItem) System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
if(event.target == findMenuItem) showFindDialog();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
if(event.target == newMenuItem) startNewWindow();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
if(event.target == openMenuItem) openFile();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
if(event.target == pasteMenuItem) paste();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
if(event.target == replaceAllMenuItem) showReplaceAllDialog();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
if(event.target == replaceMenuItem) showRepDialog();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
if(event.target == saveAsMenuItem) saveAsFile();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
if(event.target == saveMenuItem) saveOpenedFile();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(event.target
== fontChoice || event.target == sizeChoice){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
fontName = event.arg.toString();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.setFont(new
Font(fontName, Font.PLAIN, fontNumeric));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
fontSize = event.arg.toString();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fontNumeric
= Integer.parseInt(fontSize);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
catch (NumberFormatException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
fontNumeric = 12;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If error occurs
set font size to 12<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.setFont(new
Font(fontName, Font.PLAIN, fontNumeric));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(event.target
== fontChoice || event.target == sizeChoice){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
fontName = event.arg.toString();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.setFont(new
Font(fontName, Font.PLAIN, fontNumeric));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
fontSize = event.arg.toString();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fontNumeric
= Integer.parseInt(fontSize);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
catch (NumberFormatException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fontNumeric
= 12;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If error occurs set font
size to 12<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.setFont(new
Font(fontName, Font.PLAIN, fontNumeric));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Event.KEY_ACTION:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(event.key ==
Event.f1) openFile();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (event.key
== Event.f2) saveOpenedFile();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (event.key
== Event.f3) saveAsFile();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (event.key
== Event.f4) showFindDialog();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (event.key
== Event.f5) showRepDialog();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (event.key
== Event.f6) showReplaceAllDialog();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (event.key
== Event.f7) cut();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (event.key
== Event.f8) copy();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (event.key
== Event.f9) paste();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return(false);<BR>
&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="BuildingtheUtilityFunctions"><B>Building the Utility
Functions</B></A></H3>
<P>
At the heart of your application is a core set of functions, called
<I>utility functions</I>, that perform most of the real work.
These functions manipulate the text, graphics, audio, video, or
other objects used by your application. For Jompanion, there are
two sets of core functions.
<P>
The first set of core functions relates to text manipulation.
The <TT><FONT FACE="Courier">cut()</FONT></TT> method allows the
user to cut selected text and place it in the buffer. This is
done by setting a string equal to the value of the selected text
and then calling the <TT><FONT FACE="Courier">replaceText</FONT></TT>
method of the <TT><FONT FACE="Courier">textArea</FONT></TT> class.
The values passed to the <TT><FONT FACE="Courier">replaceText</FONT></TT>
method tell it to replace the selected text from start to finish
with an empty value, which effectively cuts the text from the
current editing session. If you do not set a buffer, your <TT><FONT FACE="Courier">cut()</FONT></TT>
method is nothing more than the Delete key on the user's keyboard.
<P>
To update the text area after the cut, the <TT><FONT FACE="Courier">requestFocus()</FONT></TT>
method is called. The <TT><FONT FACE="Courier">cut()</FONT></TT>
method follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;//cuts selected text and
places it on the buffer<BR>
&nbsp;&nbsp;public void cut() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;copyString = textArea.getSelectedText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea.replaceText(&quot;&quot;, textArea.getSelectionStart(),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;textArea.getSelectionEnd());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea.requestFocus();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
The second core function allows the user to copy selected text
to the buffer. This is done simply by setting a string equal to
the value of the selected text. The <TT><FONT FACE="Courier">copy()</FONT></TT>method
follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;//copies selected text to
the buffer<BR>
&nbsp;&nbsp;public void copy() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;copyString = textArea.getSelectedText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea.requestFocus();<BR>
&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
The third core function allows the user to paste text from the
buffer. Before you paste an object to the current window, you
should check to make sure the object is in the buffer. This is
done in the <TT><FONT FACE="Courier">past()</FONT></TT> method
by making sure the length of the <TT><FONT FACE="Courier">copyString</FONT></TT>
object-the buffer-is greater than zero. If the <TT><FONT FACE="Courier">copyString</FONT></TT>
is set to a value, the <TT><FONT FACE="Courier">insertText</FONT></TT>
method of the <TT><FONT FACE="Courier">textArea</FONT></TT> class
is called. The values passed to the <TT><FONT FACE="Courier">insertText</FONT></TT>
method tell it to add the buffer text at the current cursor location.
<P>
The <TT><FONT FACE="Courier">paste()</FONT></TT> method follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">//pastes text from the buffer to the
screen<BR>
&nbsp;&nbsp;public void paste() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (copyString.length() &gt; 0)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.insertText(copyString,
<BR>
textArea.getSelectionStart());<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea.requestFocus();<BR>
&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
The next set of core functions relates to file I/O. The <TT><FONT FACE="Courier">openFile()</FONT></TT>
method allows the user to open a text file. This is done by displaying
the <TT><FONT FACE="Courier">openDialog</FONT></TT> box initialized
earlier as an instance of <TT><FONT FACE="Courier">fileDialog</FONT></TT>.
When the user enters a filename, the method checks the validity
of the filename and then calls Jompanion's <TT><FONT FACE="Courier">read()</FONT></TT>
method. If the file is successfully read, a value is set for the
<TT><FONT FACE="Courier">fileName</FONT></TT> variable and the
file is displayed in the text area. The <TT><FONT FACE="Courier">openFile()</FONT></TT>
method follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">//method for opening files with a specified
name<BR>
&nbsp;&nbsp;private void openFile() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String filename;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;openDialog.show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;filename = openDialog.getFile();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (filename != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filename = check(filename);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (read(filename)) fileName
= filename;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea.requestFocus();<BR>
&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
The Save menu item allows the user to save a currently opened
file. For this reason, the next file I/O function depends on a
value being set for the <TT><FONT FACE="Courier">fileName</FONT></TT>
variable, which means the user opened a file and it is in the
editing window. If this value is not set, the <TT><FONT FACE="Courier">saveOpenedFile()</FONT></TT>
method invokes the <TT><FONT FACE="Courier">showErrorDialog</FONT></TT>
to inform the user that he has made an error. If this value is
set, the <TT><FONT FACE="Courier">saveOpenedFile()</FONT></TT>
method writes the file to the disk. The code for the method is
as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">//method saves a file you opened previously.
<BR>
&nbsp;&nbsp;//method produces error if you did not open a file
previously.<BR>
&nbsp;&nbsp;public void saveOpenedFile() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (fileName == null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showErrorDialog(&quot;You
did not previously open a file. Use Save As.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(fileName);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.requestFocus();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
When the user selects the Save As menu item, the <TT><FONT FACE="Courier">saveAsFile()</FONT></TT>
method is called. This method allows the user to save the current
editing session to a named file. To do this, the user enters a
name for the file in the <TT><FONT FACE="Courier">saveDialog</FONT></TT>
box initialized earlier as an instance of <TT><FONT FACE="Courier">fileDialog</FONT></TT>.
Provided that a filename is entered and is valid for the system,
the current editing session is saved by calling Jompanion's <TT><FONT FACE="Courier">write()</FONT></TT>
method. The code for the <TT><FONT FACE="Courier">saveAsFile()</FONT></TT>
method follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">//method saves the file you are currently
editing<BR>
&nbsp;&nbsp;private void saveAsFile() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String filename;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;saveDialog.show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;filename = saveDialog.getFile();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (filename != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filename = check(filename);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (write(filename)) fileName
= filename;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea.requestFocus();<BR>
&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
When the user selects the New menu item, the <TT><FONT FACE="Courier">startNewWindow()</FONT></TT>
method is called. There are several ways you could start a new
window. One way would be to clear the current editing window,
as this method does:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;//creates a new editing session
by deleting any previous text<BR>
&nbsp;&nbsp;private void startNewWindow() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fileName = null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea.setText(&quot;&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea.requestFocus();<BR>
&nbsp;&nbsp;}\</FONT></TT>
</BLOCKQUOTE>
<P>
The problem with clearing the current window is that the user
could possibly lose hours of work simply by selecting the wrong
menu item. Therefore, a better way to start a new window is to
invoke a new instance of the <TT><FONT FACE="Courier">Jompanion()</FONT></TT>
method, which actually does create a new window. This is done
as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;//creates a new editing session
by deleting any previous text<BR>
&nbsp;&nbsp;private void startNewWindow() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Jompanion n = new Jompanion();<BR>
&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<H3><A NAME="HandlingFileIO"><B>Handling File I/O</B></A></H3>
<P>
After opening a File dialog box that allows the user to open or
save text files, Jompanion checks the validity of the filename
and then invokes related methods for reading and writing files.
Jompanion's <TT><FONT FACE="Courier">read()</FONT></TT> and <TT><FONT FACE="Courier">write()</FONT></TT>
methods extend corresponding methods in the <TT><FONT FACE="Courier">java.io</FONT></TT>
package and return a boolean value that indicates success or failure.
<P>
Appropriately, a method called <TT><FONT FACE="Courier">check</FONT></TT>
is used to check the validity of filenames. Although the method
currently only checks for a bug that appends erroneous characters
to the end of the filename, you could easily modify this method
to always save files with a particular extension, such as <TT><FONT FACE="Courier">.java</FONT></TT>
or <TT><FONT FACE="Courier">.txt</FONT></TT>. The <TT><FONT FACE="Courier">check()</FONT></TT>
method follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">//method checks the validity of file
names and specifically for a bug<BR>
&nbsp;&nbsp;//fixes the error if it occurs<BR>
&nbsp;&nbsp;private String check(String filename) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (filename.endsWith(&quot;.*.*&quot;))
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filename = filename.substring(0,
filename.length()-4);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return(filename);<BR>
&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
Jompanion's <TT><FONT FACE="Courier">read()</FONT></TT> method,
shown in Listing 21.5, reads data input from the buffered input
stream one line at a time. Provided that the line contains text,
the <TT><FONT FACE="Courier">read()</FONT></TT> method reads the
line, inserts a null character at the end of the line, and continues
to read until it reaches the end of the file. When the end of
the file is reached, the file is closed and the <TT><FONT FACE="Courier">read()</FONT></TT>
method returns the boolean value <TT><FONT FACE="Courier">true</FONT></TT>
to the caller.
<HR>
<BLOCKQUOTE>
<B>Listing 21.5. The </B><TT><B><FONT FACE="Courier">read()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;//method handles reading
files from the file system<BR>
&nbsp;&nbsp;private boolean read(String filename) {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String line;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;FileInputStream in = null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;DataInputStream dataIn = null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;BufferedInputStream bis = null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;StringBuffer buffer = new StringBuffer();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;in = new FileInputStream(filename);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bis = new BufferedInputStream(in);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataIn = new DataInputStream(bis);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;} catch(Throwable e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showErrorDialog(&quot;Can't
open \&quot;&quot;+filename+&quot;\&quot;&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while ((line = dataIn.readLine())
!= null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buffer.append(line
+ &quot;\n&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;in.close();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.setText(buffer.toString());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;} catch(IOException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showErrorDialog(&quot;Can't
read \&quot;&quot;+filename+&quot;\&quot;&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return(true);<BR>
&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
This method catches two errors that occur in different stages
of the read process. The first error occurs when Jompanion cannot
open the file; the second occurs when Jompanion cannot read a
line in the open file. In either case, <TT><FONT FACE="Courier">read()</FONT></TT>
calls the <TT><FONT FACE="Courier">showErrorDialog</FONT></TT>
object, passes it an appropriate error message, and returns the
boolean value <TT><FONT FACE="Courier">false</FONT></TT> to the
caller.
<P>
Jompanion's <TT><FONT FACE="Courier">write()</FONT></TT> method,
shown in Listing 21.6, is very different from the <TT><FONT FACE="Courier">read()</FONT></TT>
method. As long as there are characters to read from the text
area, the <TT><FONT FACE="Courier">write()</FONT></TT> method
writes to a named output file. When the end of the file is reached,
the output file is closed and the <TT><FONT FACE="Courier">write()</FONT></TT>
method returns the boolean value <TT><FONT FACE="Courier">true</FONT></TT>
to the caller.
<P>
The <TT><FONT FACE="Courier">write()</FONT></TT> method catches
two errors that occur in different stages of the read process.
The first error occurs when Jompanion cannot open the output stream
file; the second occurs when Jompanion cannot read a line from
the text area and write it to the output file. In either case,
<TT><FONT FACE="Courier">write()</FONT></TT> calls the <TT><FONT FACE="Courier">showErrorDialog</FONT></TT>
object, passes it an appropriate error message, and returns the
boolean value <TT><FONT FACE="Courier">false</FONT></TT> to the
caller.
<HR>
<BLOCKQUOTE>
<B>Listing 21.6. The </B><TT><B><FONT FACE="Courier">write()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;//method handles writing
files to the file system<BR>
&nbsp;&nbsp;private boolean write(String filename) {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;FileOutputStream os = null;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os = new FileOutputStream(filename);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;} catch (Throwable e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showErrorDialog(&quot;Can't
write \&quot;&quot;+filename+&quot;\&quot;&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String s = textArea.getText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int len = s.length();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i&lt;len; i++)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os.write(s.charAt(i));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os.close();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;} catch(IOException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showErrorDialog(&quot;Can't
write \&quot;&quot;+filename+&quot;\&quot;&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return(true);<BR>
&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="DisplayingtheDialogBoxes"><B>Displaying the Dialog
Boxes</B></A></H3>
<P>
As you have probably noticed, the previous sections have not covered
the methods for finding and replacing text or for displaying the
related dialog boxes. Following the top-down design structure
used in Jompanion, you should create the user interface before
creating the methods that actually do the work of finding and
replacing text. For an advanced project, the best way to create
the user interface for dialog boxes is in two stages. First, you
create methods that show the dialog boxes; then you create classes
or methods that build the dialog boxes.
<P>
If you refer back to Jompanion's <TT><FONT FACE="Courier">handleEvent()</FONT></TT>
method, you will see that when a user selects a menu item, methods
that show the related dialog boxes are called directly if appropriate.
Jompanion uses five dialog boxes in all. The dialog boxes for
find, replace, replace all, and about are called directly when
a user selects a related item from a pull-down menu or presses
an appropriate function key. The error dialog box is invoked only
when an error occurs.
<P>
As you can see in Listing 21.7, the methods for displaying the
dialog boxes are very similar. The <TT><FONT FACE="Courier">showFindDialog()</FONT></TT>
method checks to make sure it was not called with a null value.
If it was, it does not display the dialog box. Otherwise, it checks
to see if text is selected in the editing window, uses the selected
text as the initial string for the find, and then creates a new
instance of Jompanion's <TT><FONT FACE="Courier">FindDialog</FONT></TT>
class.
<HR>
<BLOCKQUOTE>
<B>Listing 21.7. Displaying the dialog boxes.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* Show Dialog Boxes<BR>
&nbsp;* Find, Replace, Replace All, About, and Error<BR>
*/<BR>
<BR>
&nbsp;&nbsp;//displays the find dialog box which has one input
field.<BR>
&nbsp;&nbsp;//Currently selected text is placed in the input field.
<BR>
&nbsp;&nbsp;public void showFindDialog() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (findDialog != null) findDialog.dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String sel = textArea.getSelectedText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (sel.length() &gt; 0) findString =
sel;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;findDialog = new FindDialog(this, findString);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;findDialog.show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;findDialog.setFocus();<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;//displays the replace dialog box which has two input
fields.<BR>
&nbsp;&nbsp;//Currently selected text is placed in the find input
field.<BR>
&nbsp;&nbsp;//Previously searched and replaced text is placed
in the input field.<BR>
&nbsp;&nbsp;public void showRepDialog() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (replaceDialog != null) replaceDialog.dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String sel = textArea.getSelectedText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (sel.length() &gt; 0) findString =
sel;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;replaceDialog = new ReplaceDialog(this,
findString,<BR>
replaceString);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;replaceDialog.show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;replaceDialog.setFocus();<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;//displays the replace all dialog box which has two
input fields.<BR>
&nbsp;&nbsp;//Currently selected text is placed in the find input
field.<BR>
&nbsp;&nbsp;//Previously searched and replaced text is placed
in the input field.<BR>
&nbsp;&nbsp;public void showReplaceAllDialog() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (replaceAllDialog != null) replaceAllDialog.dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String sel = textArea.getSelectedText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (sel.length() &gt; 0) findString =
sel;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;replaceAllDialog = new ReplaceAllDialog(this,
findString,<BR>
replaceString);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;replaceAllDialog.show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;replaceAllDialog.setFocus();<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;//displays the about dialog box<BR>
&nbsp;&nbsp;private void showAboutDialog() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (aboutDialog != null) aboutDialog.dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;aboutDialog = new AboutDialog(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;aboutDialog.show();<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;//displays the error dialog box and the current error
<BR>
&nbsp;&nbsp;public void showErrorDialog(String message) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (errorDialog != null) errorDialog.dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;errorDialog = new ErrorDialog(this, message);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;errorDialog.show();<BR>
&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Although the <TT><FONT FACE="Courier">showReplaceDialog()</FONT></TT>and
<TT><FONT FACE="Courier">showReplaceAllDialog()</FONT></TT> methods
behave similarly, you should note that new instances of their
related classes are passed two strings: <TT><FONT FACE="Courier">findString</FONT></TT>
and <TT><FONT FACE="Courier">replaceString</FONT></TT>. Because
the <TT><FONT FACE="Courier">findString</FONT></TT> and <TT><FONT FACE="Courier">replaceString</FONT></TT>
objects are declared in the <TT><FONT FACE="Courier">Jompanion</FONT></TT>
class and are not access restricted, they are accessible to any
of the methods and classes in Jompanion. This allows text placed
in these strings to be buffered, which provides additional functionality
for the user.
<P>
When the user finds text using the Find dialog box, the find string
is buffered. If the user later selects Replace or Replace All
from the Edit menu, the current value of the find string is placed
on the appropriate line of the dialog box. However, because the
<TT><FONT FACE="Courier">showReplaceDialog()</FONT></TT> and the
<TT><FONT FACE="Courier">showReplaceAllDialog()</FONT></TT> methods
check for selected text and assign this value to the <TT><FONT FACE="Courier">findString</FONT></TT>
object, currently selected text always replaces any previously
buffered value for the <TT><FONT FACE="Courier">findString</FONT></TT>
object.
<P>
Similarly, Jompanion remembers the value of the <TT><FONT FACE="Courier">replaceString</FONT></TT>
object, which makes it easier to follow a single replace with
a replace all. You should consider using buffers in your applications
as well.
<P>
Because the <TT><FONT FACE="Courier">showAboutDialog()</FONT></TT>
and the <TT><FONT FACE="Courier">showErrorDialog()</FONT></TT>
methods do not allow the user to manipulate objects, they are
set up differently. The <TT><FONT FACE="Courier">showAboutDialog()</FONT></TT>
method simply creates a new instance of Jompanion's <TT><FONT FACE="Courier">AboutDialog</FONT></TT>
class and displays it. The <TT><FONT FACE="Courier">showErrorDialog()</FONT></TT>
method creates a new instance of Jompanion's <TT><FONT FACE="Courier">ErrorDialog</FONT></TT>
class. The string passed to the <TT><FONT FACE="Courier">ErrorDialog</FONT></TT>
class contains a message related to the error that occurred.
<H3><A NAME="BuildingtheDialogBoxes"><B>Building the Dialog Boxes</B></A>
</H3>
<P>
Because the objects that build Jompanion's dialog boxes contain
several methods and discrete functionality, I created them as
class-level objects. Declaring these objects within class structures
provides the added advantage of reducing the overhead associated
with the dialog boxes until they are actually needed and making
it easier to handle the distinct functionality of each dialog
box.
<H4><B>The </B><TT><B><FONT FACE="Courier">FindDialog</FONT></B></TT><B>
Class</B></H4>
<P>
The <TT><FONT FACE="Courier">FindDialog</FONT></TT> class, shown
in Listing 21.8, is the first of five related classes that extend
the <TT><FONT FACE="Courier">Dialog</FONT></TT> class of the AWT
package. The purpose of the <TT><FONT FACE="Courier">FindDialog</FONT></TT>
class is to build the Find dialog box, handle related events,
and set the focus of the editing window. These three functions
are controlled by separate methods. Figure 21.4 shows Jompanion
with the Find dialog box active.
<P>
<A HREF="f21-4.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f21-4.gif" ><B>Figure 21.4 : </B><I>Jompanion's Find dialog box.</I></A>
<HR>
<BLOCKQUOTE>
<B>Listing 21.8. The </B><TT><B><FONT FACE="Courier">FindDialog</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* The FindDialog Class sets up the find dialog box<BR>
&nbsp;* and handles related events.<BR>
*/<BR>
class FindDialog extends Dialog {<BR>
<BR>
&nbsp;&nbsp;Jompanion parent;<BR>
&nbsp;&nbsp;TextField textField;<BR>
<BR>
&nbsp;&nbsp;public FindDialog(Jompanion parent, String text) {
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;super(parent, &quot;Find&quot;, true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;this.parent = parent;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Panel p;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p = new Panel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Label l;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;l = new Label(&quot;Find What:&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.setLayout(null);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;l.reshape(0,25,110,30);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(l);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textField = new TextField(text);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textField.reshape(111,25,200,30);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(textField);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;Center&quot;, p);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Dimension d;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;d = parent.size();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;reshape(200,50,340,100);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setResizable(false);<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;switch(event.id) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Event.WINDOW_DESTROY:
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.textArea.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Event.ACTION_EVENT:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(event.target
== textField) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(textField.getText().length() &gt; 0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.setFindString(textField.getText());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.findText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.textArea.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.showErrorDialog(&quot;Find
Error&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.textArea.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return(false);<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;public void setFocus() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textField.requestFocus();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textField.select(0, textField.getText().length());
<BR>
&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
As you design your own dialog boxes for your applications, you
should consider carefully their style, size, and placement. Generally,
the dialog box should have a style that makes it easy to use and
read. Its size should be appropriate for the contents of the box
and should rarely display at more than half of the current screen
size. The dialog box should also display in an appropriate location,
such as centered on the current window.
<P>
The <TT><FONT FACE="Courier">FindDialog()</FONT></TT> method builds
the dialog box as a panel with a single text field labeled with
the keywords <TT><FONT FACE="Courier">Find What</FONT></TT>. The
style of the Find dialog box is controlled by setting the background
color, positioning the label and the text area within the panel
so it is easy to read and use, and defining the layout. The size
of the Find dialog box is set so that it is just large enough
to display the label and the text area. Finally, the dialog box
is placed so that it is displayed in the upper portion of the
window and to the right of the pull-down menus. To ensure the
user cannot resize the dialog box, the boolean value for the <TT><FONT FACE="Courier">setResizable()</FONT></TT>
method is set to <TT><FONT FACE="Courier">false</FONT></TT>.
<P>
The <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
handles two events: the closing of the dialog box and the pressing
of the Enter key with the cursor in the text field. When the user
closes the dialog box, the <TT><FONT FACE="Courier">WINDOW_DESTROY</FONT></TT>
event occurs and the Find dialog box is closed. Because text fields
are a single line of text, pressing the Enter key within the text
field causes an <TT><FONT FACE="Courier">ACTION_EVENT</FONT></TT>
to occur. To process the related event, check for a target event
that is an instance of the <TT><FONT FACE="Courier">TextField</FONT></TT>
object. In this class, the instance of the <TT><FONT FACE="Courier">TextField</FONT></TT>
object is declared as <TT><FONT FACE="Courier">textField</FONT></TT>.
<P>
When an event related to object <TT><FONT FACE="Courier">textField</FONT></TT>
occurs, the <TT><FONT FACE="Courier">handleEvent()</FONT></TT>
method checks the validity of the input by checking the length
of the text in the text field to ensure it is greater than zero.
If the length is greater than zero, the <TT><FONT FACE="Courier">findText()</FONT></TT>
method of the parent class is called. Otherwise, an error occurs
and an appropriate message is displayed by calling the <TT><FONT FACE="Courier">showErrorDialog()</FONT></TT>
method of the  parent.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=576>
<BLOCKQUOTE>
Even when the user presses Enter and leaves the text field empty, the length of the text field is greater than zero. This is because the carriage-return and line-feed characters are generally associated with the Enter key. Therefore, it is virtually 
impossible for an error to occur. (However, a well-designed program checks for all possible errors and handles them appropriately if they occur.)</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The final method declared in the <TT><FONT FACE="Courier">FindDialog</FONT></TT>
class is the <TT><FONT FACE="Courier">setFocus()</FONT></TT> method.
This method shows the location of the text the user searched for
and then selects the search text-an easy way to highlight the
results of the find.
<H4><B>The </B><TT><B><FONT FACE="Courier">ReplaceDialog</FONT></B></TT><B>
Class</B></H4>
<P>
Although the design of the <TT><FONT FACE="Courier">ReplaceDialog</FONT></TT>
class is very similar to that of the <TT><FONT FACE="Courier">FindDialog</FONT></TT>
class, the <TT><FONT FACE="Courier">ReplaceDialog</FONT></TT>
class is more complex because it uses multiple input fields. (See
Listing 21.9.) The logic used to handle events from multiple text
fields is extremely important. If your logic is not precise, the
application will not behave as you expect. Figure 21.5 shows Jompanion
with the Replace dialog box active.
<P>
<A HREF="f21-5.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f21-5.gif" ><B>Figure 21.5 : </B><I>Jompanion's Replace dialog box.</I></A>
<HR>
<BLOCKQUOTE>
<B>Listing 21.9. The </B><TT><B><FONT FACE="Courier">ReplaceDialog</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* The ReplaceDialog Class sets up the replace dialog box
<BR>
&nbsp;* and handles related events.<BR>
*/<BR>
class ReplaceDialog extends Dialog {<BR>
<BR>
&nbsp;&nbsp;Jompanion parent;<BR>
&nbsp;&nbsp;TextField fromField, toField;<BR>
<BR>
&nbsp;&nbsp;public ReplaceDialog(Jompanion parent, String fromString,
String<BR>
toString) {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;super(parent, &quot;Replace&quot;, true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;this.parent = parent;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Panel p;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p = new Panel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Label l;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;l = new Label(&quot;Find What:&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.setLayout(null);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;l.reshape(0,25,130,30);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(l);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fromField = new TextField(fromString);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fromField.reshape(131,25,200,30);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(fromField);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;l = new Label(&quot;Replace With:&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;l.reshape(0,60,130,30);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(l);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;toField = new TextField(toString);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;toField.reshape(131,60,200,30);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(toField);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;Center&quot;, p);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Dimension d;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;d = parent.size();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;reshape(200,50,360,150);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setResizable(false);<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;switch(event.id) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Event.WINDOW_DESTROY:
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.textArea.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Event.ACTION_EVENT:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(event.target
== fromField) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;toField.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if(event.target
== toField) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(fromField.getText().length() &gt; 0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.setFindString(fromField.getText());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.setReplaceString(toField.getText());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.replaceText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.textArea.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.showErrorDialog(&quot;Replace
Error&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.textArea.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return(false);<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;public void setFocus() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fromField.requestFocus();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fromField.select(0, fromField.getText().length());
<BR>
&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">ReplaceDialog</FONT></TT> class declares
two instances of the <TT><FONT FACE="Courier">TextField</FONT></TT>
object that tell the application where to search from and the
point to search to. The <TT><FONT FACE="Courier">fromField</FONT></TT>
object allows the user to input search text. The <TT><FONT FACE="Courier">toField</FONT></TT>
object allows the user to input the replacement text.
<P>
Before the <TT><FONT FACE="Courier">handleEvent()</FONT></TT>
method processes the events related to these fields, it checks
the name of the field in which the user pressed Enter. If the
event is related to the <TT><FONT FACE="Courier">fromField</FONT></TT>
object, the focus is reset to the <TT><FONT FACE="Courier">toField</FONT></TT>
object, which allows the user to press Enter to get to the next
input field. If the event is related to the <TT><FONT FACE="Courier">toField</FONT></TT>
object and the length of the input text is greater than zero,
the <TT><FONT FACE="Courier">replaceText()</FONT></TT> method
of the parent class is called. Otherwise, an error occurs and
an appropriate message is displayed by calling the <TT><FONT FACE="Courier">showErrorDialog()</FONT></TT>
method of the parent.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Tip</B></TD></TR>
<TR><TD WIDTH=585>
<BLOCKQUOTE>
When you use multiple text fields for input values that are dependent on each other, you should always reset the focus to the next field until the user is in the final input field. When the user is in the final input field, you should then process all 
input values.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H4><B>The </B><TT><B><FONT FACE="Courier">ReplaceAllDialog</FONT></B></TT><B>
Class</B></H4>
<P>
The <TT><FONT FACE="Courier">ReplaceAllDialog</FONT></TT> class
is shown in Listing 21.10. This class is almost identical to the
<TT><FONT FACE="Courier">ReplaceDialog</FONT></TT> class, but
there is one important difference in the way this class functions.
Instead of replacing a single instance of the search text, the
<TT><FONT FACE="Courier">ReplaceAllDialog</FONT></TT> class replaces
all instances of the search text.
<P>
The programming trick used to accomplish this involves changing
only a single line of the original <TT><FONT FACE="Courier">ReplaceDialog</FONT></TT>
class. The line of code reading
<BLOCKQUOTE>
<TT><FONT FACE="Courier">parent.replaceText();</FONT></TT>
</BLOCKQUOTE>
<P>
is changed to
<BLOCKQUOTE>
<TT><FONT FACE="Courier">while (parent.replaceText()) ;</FONT></TT>
</BLOCKQUOTE>
<P>
The new line of code says that while the <TT><FONT FACE="Courier">replaceText()</FONT></TT>
method returns a <TT><FONT FACE="Courier">true</FONT></TT> value,
continue to loop. Therefore, as long as the <TT><FONT FACE="Courier">replaceText()</FONT></TT>
method finds occurrences of the search text, the search text is
replaced.
<HR>
<BLOCKQUOTE>
<B>Listing 21.10. The </B><TT><B><FONT FACE="Courier">ReplaceAllDialog</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* The ReplaceAllDialog Class sets up the dialog box for
replacing<BR>
&nbsp;* all occurrences of a word or phrase and handles related
events.<BR>
*/<BR>
class ReplaceAllDialog extends Dialog {<BR>
<BR>
&nbsp;&nbsp;Jompanion parent;<BR>
&nbsp;&nbsp;TextField fromAllField, toAllField;<BR>
<BR>
&nbsp;&nbsp;public ReplaceAllDialog(Jompanion parent, String fromAllString,
String<BR>
toAllString) {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;super(parent, &quot;Replace All&quot;,
true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;this.parent = parent;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Panel p;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p = new Panel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Label l;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;l = new Label(&quot;Find All:&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.setLayout(null);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;l.reshape(0,25,130,30);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(l);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fromAllField = new TextField(fromAllString);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fromAllField.reshape(131,25,200,30);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(fromAllField);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;l = new Label(&quot;Replace With:&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;l.reshape(0,60,130,30);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(l);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;toAllField = new TextField(toAllString);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;toAllField.reshape(131,60,200,30);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(toAllField);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;Center&quot;, p);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Dimension d;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;d = parent.size();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;reshape(200,50,360,150);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setResizable(false);<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;switch(event.id) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Event.WINDOW_DESTROY:
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.textArea.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Event.ACTION_EVENT:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(event.target
== fromAllField) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;toAllField.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if(event.target
== toAllField) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(fromAllField.getText().length() &gt; 0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.setFindString(fromAllField.getText());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.setReplaceString(toAllField.getText());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while
(parent.replaceText()) ;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.textArea.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.showErrorDialog(&quot;Replace
All Error&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.textArea.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return(false);<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;public void setFocus() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fromAllField.requestFocus();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fromAllField.select(0, fromAllField.getText().length());
<BR>
&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>The </B><TT><B><FONT FACE="Courier">AboutDialog</FONT></B></TT><B>
Class</B></H4>
<P>
The purpose of the <TT><FONT FACE="Courier">AboutDialog</FONT></TT>
class (shown in Listing 21.11) is to build the About dialog box,
which displays the mapping of the function keys. The About dialog
box is designed so that it can be placed in the bottom of the
viewing area for easy reference. For this reason, the height of
the box is set to 120 pixels and the width of the box is set to
640 pixels. A grid layout is used to align the nine entries for
function keys into easy-to-read columns. To ensure the entries
are logically ordered when viewed, they are organized by column
in the code. Figure 21.6 shows Jompanion with the About dialog
box active.
<P>
<A HREF="f21-6.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f21-6.gif" ><B>Figure 21.6 :</B> <I>Jompanion's About dialog box.</I></A>
<HR>
<BLOCKQUOTE>
<B>Listing 21.11. The </B><TT><B><FONT FACE="Courier">AboutDialog</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* The AboutDialog Class sets up the dialog box that displays
<BR>
&nbsp;* information about Jompanion and handles related events
<BR>
*/<BR>
class AboutDialog extends Dialog {<BR>
<BR>
&nbsp;&nbsp;Jompanion parent;<BR>
<BR>
&nbsp;&nbsp;public AboutDialog(Jompanion parent) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;super(parent, &quot;Jompanion from the
Complete Guide to Java&quot;, true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;this.parent = parent;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Panel p;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p = new Panel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.setLayout(new GridLayout(3, 3));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(new Label(&quot;f1 - Open Files&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(new Label(&quot;f4 - Find&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(new Label(&quot;f7 - Cut&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(new Label(&quot;f2 - Save&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(new Label(&quot;f5 - Replace&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(new Label(&quot;f8 - Copy&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(new Label(&quot;f3 - Save As&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(new Label(&quot;f6 - Replace All&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(new Label(&quot;f9 - Paste&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;Center&quot;, p);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Dimension d; <BR>
&nbsp;&nbsp;&nbsp;&nbsp;d = parent.size();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;reshape(50,440,640,120);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setResizable(false);<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;switch(event.id) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Event.WINDOW_DESTROY:
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.textArea.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return(false);<BR>
&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>The </B><TT><B><FONT FACE="Courier">ErrorDialog</FONT></B></TT><B>
Class</B></H4>
<P>
The purpose of the <TT><FONT FACE="Courier">ErrorDialog</FONT></TT>
class is to build a dialog box that displays errors. (See Listing
21.12.) To ensure the dialog box gets the reader's immediate attention,
it has a yellow background and a bold font.
<HR>
<BLOCKQUOTE>
<B>Listing 21.12. The </B><TT><B><FONT FACE="Courier">ErrorDialog</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* The ErrorDialog Class sets up the dialog box that displays
<BR>
&nbsp;* errors to the user and handles the closing of the window
<BR>
*/<BR>
class ErrorDialog extends Dialog {<BR>
<BR>
&nbsp;&nbsp;Jompanion parent;<BR>
&nbsp;&nbsp;String message;<BR>
<BR>
&nbsp;&nbsp;public ErrorDialog(Jompanion parent, String message)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;super(parent, &quot;Error&quot;, true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setBackground(Color.yellow);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;this.parent = parent;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;this.message = message;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Panel p;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p = new Panel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(new Label(message));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.setFont(new Font(&quot;System&quot;,
Font.BOLD, 12));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;Center&quot;, p);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Dimension d;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;d = parent.size();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;reshape(200,50,420,100);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setResizable(false);<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;switch(event.id) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Event.WINDOW_DESTROY:
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.textArea.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return(false);<BR>
&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="TextManipulationObjects"><B>Text-Manipulation Objects</B></A>
</H3>
<P>
Now that the user interface for finding and replacing text is
built, you can define the associated text-manipulation objects.
As with other parts of the application, it is easiest if you start
with the basic objects and work to the advanced objects. As Listing
21.13 shows, Jompanion includes two basic text-manipulation objects
and two advanced ones.
<HR>
<BLOCKQUOTE>
<B>Listing 21.13. Text-manipulation objects.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;//sets the find string<BR>
&nbsp;&nbsp;public void setFindString(String str) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;findString = str;<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;//sets the replace string<BR>
&nbsp;&nbsp;public void setReplaceString(String str) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;replaceString = str;<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;//handles the search for text in the find input field
<BR>
&nbsp;&nbsp;public void findText() {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String s;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int spoint, index;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea.requestFocus();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (findString.length() == 0) return;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;s = textArea.getText();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (s.length() == 0) return;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;spoint = textArea.getSelectionEnd();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;index = s.substring(spoint).indexOf(findString);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (index &gt;= 0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i = spoint + index;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.select(i, i + findString.length());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;//handles replacing text<BR>
&nbsp;&nbsp;public boolean replaceText() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String s;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int spoint, index;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea.requestFocus();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (findString.length() == 0) return(false);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;s = textArea.getText();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (s.length() == 0) return(false);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;spoint = textArea.getSelectionStart();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;index = s.substring(spoint).indexOf(findString);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (index &gt;= 0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i = spoint + index;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int j = i + findString.length();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.replaceText(replaceString,
i, j);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.select(i, i+replaceString.length());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return(false);<BR>
&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The purpose of the <TT><FONT FACE="Courier">setFindString()</FONT></TT>
and <TT><FONT FACE="Courier">setReplaceString()</FONT></TT> methods
is simply to set a value for the find and replace strings. These
functions are created as separate methods so they can be called
from wherever they are needed in the application.
<P>
The <TT><FONT FACE="Courier">findText()</FONT></TT>method is called
by the <TT><FONT FACE="Courier">FindDialog</FONT></TT> class.
The purpose of this method is to search for text entered in the
Find input field by setting an index point within the document
and searching forward through the document until the next instance
of the text is found. The <TT><FONT FACE="Courier">getSelectionEnd()</FONT></TT>
method is used to determine the starting location of the index
point. By placing the index after the current occurrence of the
search text, the user can select text and then find the next occurrence
of the selected text. If the index point was placed before the
currently selected text using the <TT><FONT FACE="Courier">getSelectionStart()</FONT></TT>method,
the application would consider the currently selected text as
the next occurrence of the search text, which is flawed logic.
<P>
The <TT><FONT FACE="Courier">replaceText()</FONT></TT> method
is called by both the <TT><FONT FACE="Courier">ReplaceDialog</FONT></TT>
class and the <TT><FONT FACE="Courier">ReplaceAllDialog</FONT></TT>
class. The purpose of this method is to search for text entered
in the find input field and replace it with text in the replace
input field. To ensure a currently selected occurrence of the
find text is replaced, the index point for the start of the search
is set with the <TT><FONT FACE="Courier">getSelectionStart()</FONT></TT>
method. If the index point was placed after the currently selected
text using the <TT><FONT FACE="Courier">getSelectionEnd()</FONT></TT>
method, the application would never replace an instance of the
currently selected text, which is flawed logic.
<H2><A NAME="TheCompleteProject"><B><FONT SIZE=5 COLOR=#Ff0000>The
Complete Project</FONT></B></A></H2>
<P>
Although Jompanion is a fairly advanced application, its sound
design helped to ensure that the development and implementation
of the project went smoothly. Listing 21.14 shows the complete
code for the Jompanion application. Although typing in the code
line by line forces you to study each line of code, you can go
straight to the CD-ROM and access the complete source code if
you choose.
<HR>
<BLOCKQUOTE>
<B>Listing 21.14. The finished application.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
import java.io.*;<BR>
<BR>
/**<BR>
&nbsp;* Peter Norton's Guide to Java Programming<BR>
&nbsp;* Jompanion, a companion text editor for Java<BR>
&nbsp;* with many features including search, replace, replace
all<BR>
&nbsp;* cut, copy and paste. Jompanion also lets you set font
type<BR>
&nbsp;* and size.<BR>
*/<BR>
public class Jompanion extends Frame {<BR>
<BR>
&nbsp;&nbsp;//set up variables for use throughout Jompanion<BR>
<BR>
&nbsp;&nbsp;//container for the editing window in the application
<BR>
&nbsp;&nbsp;TextArea textArea;<BR>
&nbsp;&nbsp;//container for the choice menu for font type<BR>
<BR>
&nbsp;&nbsp;//container for the size of the font as a string<BR>
&nbsp;&nbsp;String fontSize;<BR>
&nbsp;&nbsp;//container for the name of the current font<BR>
&nbsp;&nbsp;String fontName = &quot;Courier&quot;;<BR>
&nbsp;&nbsp;//container for the size of the font as a number<BR>
&nbsp;&nbsp;int fontNumeric = 12;<BR>
&nbsp;&nbsp;Choice fontChoice;<BR>
&nbsp;&nbsp;//container for the choice menu for font size<BR>
&nbsp;&nbsp;Choice sizeChoice;<BR>
&nbsp;&nbsp;//container for the file object<BR>
&nbsp;&nbsp;private String fileName = null;<BR>
&nbsp;&nbsp;//container for the about dialog box<BR>
&nbsp;&nbsp;private AboutDialog aboutDialog = null;<BR>
&nbsp;&nbsp;//container for the error dialog box<BR>
&nbsp;&nbsp;private ErrorDialog errorDialog = null;<BR>
&nbsp;&nbsp;//container for the find dialog box<BR>
&nbsp;&nbsp;private FindDialog findDialog = null;<BR>
&nbsp;&nbsp;//container for the replace dialog box<BR>
&nbsp;&nbsp;private ReplaceDialog replaceDialog = null;<BR>
&nbsp;&nbsp;//container for the replace all dialog box<BR>
&nbsp;&nbsp;private ReplaceAllDialog replaceAllDialog = null;
<BR>
&nbsp;&nbsp;//container for the open file dialog box<BR>
&nbsp;&nbsp;private FileDialog openDialog;<BR>
&nbsp;&nbsp;//container for the save file dialog box<BR>
&nbsp;&nbsp;private FileDialog saveDialog;<BR>
&nbsp;&nbsp;//container for the about menu item<BR>
&nbsp;&nbsp;private MenuItem aboutMenuItem;<BR>
&nbsp;&nbsp;//container for the copy menu item<BR>
&nbsp;&nbsp;private MenuItem copyMenuItem;<BR>
&nbsp;&nbsp;//container for the cut menu item<BR>
&nbsp;&nbsp;private MenuItem cutMenuItem;<BR>
&nbsp;&nbsp;//container for the exit menu item<BR>
&nbsp;&nbsp;private MenuItem exitMenuItem;<BR>
&nbsp;&nbsp;//container for the find menu item<BR>
&nbsp;&nbsp;private MenuItem findMenuItem;<BR>
&nbsp;&nbsp;//container for the new menu item<BR>
&nbsp;&nbsp;private MenuItem newMenuItem;<BR>
&nbsp;&nbsp;//container for the open menu item<BR>
&nbsp;&nbsp;private MenuItem openMenuItem;<BR>
&nbsp;&nbsp;//container for the paste menu item<BR>
&nbsp;&nbsp;private MenuItem pasteMenuItem;<BR>
&nbsp;&nbsp;//container for the replace all menu item<BR>
&nbsp;&nbsp;private MenuItem replaceAllMenuItem;<BR>
&nbsp;&nbsp;//container for the replace menu item<BR>
&nbsp;&nbsp;private MenuItem replaceMenuItem;<BR>
&nbsp;&nbsp;//container for the save as menu item<BR>
&nbsp;&nbsp;private MenuItem saveAsMenuItem;<BR>
&nbsp;&nbsp;//container for the save menu item<BR>
&nbsp;&nbsp;private MenuItem saveMenuItem;<BR>
/**<BR>
&nbsp;* This method Adds all the essential object interfaces to
the application<BR>
&nbsp;* and displays the application as well.<BR>
&nbsp;*/<BR>
&nbsp;&nbsp;public Jompanion() {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;super(&quot;Jompanion<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&Acirc;Written by William R. Stanek (c)
1996&quot;);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setFont(new Font(fontName, Font.PLAIN,
fontNumeric));<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;AddMenu();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;AddChoice();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;AddTextArea();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;AddDialog();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Dimension d;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;d = Toolkit.getDefaultToolkit().getScreenSize();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;resize(d.width, d.height);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea.requestFocus();<BR>
&nbsp;&nbsp;}<BR>
<BR>
/**<BR>
&nbsp;* Menu Creation Routines:<BR>
&nbsp;* File: New, Open (f1), Save (f2), Save As (f3), Exit<BR>
&nbsp;* Edit: Find (f4), Replace (f5), Replace All (f6), <BR>
&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Cut (f7), Copy (f8),
Paste (f9)<BR>
&nbsp;* About: About Jompanion<BR>
*/<BR>
<BR>
&nbsp;&nbsp;private void AddMenu() {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Menu menu;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;MenuBar menuBar = new MenuBar();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//Sets up the File menu<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu = new Menu(&quot;File&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;newMenuItem = new MenuItem(&quot;New&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.add(newMenuItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;openMenuItem = new MenuItem(&quot;Open&nbsp;&nbsp;(f1)&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.add(openMenuItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.addSeparator();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;saveMenuItem = new MenuItem(&quot;Save&nbsp;&nbsp;(f2)&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.add(saveMenuItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;saveAsMenuItem = new MenuItem(&quot;Save
As&nbsp;&nbsp;(f3)&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.add(saveAsMenuItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.addSeparator();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;exitMenuItem = new MenuItem(&quot;Exit&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.add(exitMenuItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menuBar.add(menu);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//sets up the Edit menu<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu = new Menu(&quot;Edit&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;findMenuItem = new MenuItem(&quot;Find&nbsp;&nbsp;(f4)&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.add(findMenuItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;replaceMenuItem = new MenuItem(&quot;Replace&nbsp;&nbsp;(f5)&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.add(replaceMenuItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;replaceAllMenuItem = new MenuItem(&quot;ReplaceAll&nbsp;&nbsp;(f6)&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.add(replaceAllMenuItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.addSeparator();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;cutMenuItem = new MenuItem(&quot;Cut&nbsp;&nbsp;(f7)&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.add(cutMenuItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;copyMenuItem = new MenuItem(&quot;Copy&nbsp;&nbsp;(f8)&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.add(copyMenuItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;pasteMenuItem = new MenuItem(&quot;Paste&nbsp;&nbsp;(f9)&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.add(pasteMenuItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menuBar.add(menu);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//sets up the About menu<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu = new Menu(&quot;About&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;aboutMenuItem = new MenuItem(&quot;About
Jompanion&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menu.add(aboutMenuItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menuBar.add(menu);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setMenuBar(menuBar);<BR>
&nbsp;&nbsp;}<BR>
<BR>
/**<BR>
&nbsp;* AddChoice creates the choice boxes for font type and size.
<BR>
&nbsp;* Once the choice boxes are built, they are added to the
application.<BR>
&nbsp;*/<BR>
&nbsp;&nbsp;private void AddChoice() {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//set up choice box for font type<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fontChoice = new Choice();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fontChoice.addItem(&quot;Courier&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fontChoice.addItem(&quot;Helvetica&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fontChoice.addItem(&quot;System&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fontChoice.addItem(&quot;TimesRoman&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fontChoice.select(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add(fontChoice);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//set up choice box for font size<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice = new Choice();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.addItem(&quot;8&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.addItem(&quot;10&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.addItem(&quot;12&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.addItem(&quot;14&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.addItem(&quot;16&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.addItem(&quot;18&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.addItem(&quot;20&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.addItem(&quot;22&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.addItem(&quot;24&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.addItem(&quot;26&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.addItem(&quot;28&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.addItem(&quot;30&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sizeChoice.select(2);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add(sizeChoice);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
/**<BR>
&nbsp;* AddTextArea creates the text area for your edit sessions.
<BR>
&nbsp;*/<BR>
&nbsp;&nbsp;private void AddTextArea() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setLayout(new FlowLayout(FlowLayout.LEFT));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea = new TextArea(24, 80);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea.setEditable(true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add(textArea);<BR>
&nbsp;&nbsp;}<BR>
<BR>
/**<BR>
&nbsp;* AddDialog adds the dialog boxes for opening and saving
files.<BR>
&nbsp;*/<BR>
&nbsp;&nbsp;private void AddDialog() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;openDialog = new FileDialog(this, &quot;Open
File&quot;,FileDialog.LOAD);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;saveDialog = new FileDialog(this, &quot;Save
File&quot;,FileDialog.SAVE);<BR>
&nbsp;&nbsp;}<BR>
<BR>
<BR>
/**<BR>
&nbsp;* Handle Events:<BR>
&nbsp;* Event.WINDOW_DESTROY: ensures clean exit<BR>
&nbsp;* Event.ACTION_EVENT: Events from menu and choice boxes
<BR>
&nbsp;* Event.KEY_ACTION: Press function keys<BR>
*/<BR>
<BR>
&nbsp;&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;switch(event.id) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Event.WINDOW_DESTROY:
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Event.ACTION_EVENT:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(event.target
instanceof MenuItem) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(event.target
== aboutMenuItem) showAboutDialog();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
if(event.target == copyMenuItem) copy();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
if(event.target == cutMenuItem) cut();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
if(event.target == exitMenuItem) System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
if(event.target == findMenuItem) showFindDialog();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
if(event.target == newMenuItem) startNewWindow();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
if(event.target == openMenuItem) openFile();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
if(event.target == pasteMenuItem) paste();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
if(event.target == replaceAllMenuItem) showReplaceAllDialog();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
if(event.target == replaceMenuItem) showRepDialog();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
if(event.target == saveAsMenuItem) saveAsFile();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
if(event.target == saveMenuItem) saveOpenedFile();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(event.target
== fontChoice || event.target == sizeChoice){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
fontName = event.arg.toString();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.setFont(new
Font(fontName, Font.PLAIN, fontNumeric));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
fontSize = event.arg.toString();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fontNumeric
= Integer.parseInt(fontSize);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
catch (NumberFormatException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
fontNumeric = 12;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If error occurs
set font size to 12<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.setFont(new
Font(fontName, Font.PLAIN, fontNumeric));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Event.KEY_ACTION:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(event.key ==
Event.f1) openFile();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (event.key
== Event.f2) saveOpenedFile();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (event.key
== Event.f3) saveAsFile();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (event.key
== Event.f4) showFindDialog();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (event.key
== Event.f5) showRepDialog();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (event.key
== Event.f6) showReplaceAllDialog();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (event.key
== Event.f7) cut();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (event.key
== Event.f8) copy();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (event.key
== Event.f9) paste();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return(false);<BR>
&nbsp;&nbsp;}<BR>
<BR>
/**<BR>
&nbsp;* Utility Functions:<BR>
&nbsp;* Copy, Cut, Paste<BR>
&nbsp;* Open file, SaveAs, Save<BR>
&nbsp;* New<BR>
*/<BR>
<BR>
&nbsp;&nbsp;//cuts selected text and places it on the buffer<BR>
&nbsp;&nbsp;public void cut() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;copyString = textArea.getSelectedText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea.replaceText(&quot;&quot;, textArea.getSelectionStart(),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;textArea.getSelectionEnd());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea.requestFocus();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;//copies selected text to the buffer<BR>
&nbsp;&nbsp;public void copy() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;copyString = textArea.getSelectedText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea.requestFocus();<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;//pastes text from the buffer to the screen<BR>
&nbsp;&nbsp;public void paste() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (copyString.length() &gt; 0)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.insertText(copyString,
<BR>
textArea.getSelectionStart());<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea.requestFocus();<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;//method for opening files with a specified name<BR>
&nbsp;&nbsp;private void openFile() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String filename;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;openDialog.show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;filename = openDialog.getFile();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (filename != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filename = check(filename);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (read(filename)) fileName
= filename;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea.requestFocus();<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;//method saves the file you are currently editing
<BR>
&nbsp;&nbsp;private void saveAsFile() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String filename;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;saveDialog.show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;filename = saveDialog.getFile();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (filename != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filename = check(filename);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (write(filename)) fileName
= filename;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea.requestFocus();<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;//method saves a file you opened previously.<BR>
&nbsp;&nbsp;//method produces error if you did not open a file
previously.<BR>
&nbsp;&nbsp;public void saveOpenedFile() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (fileName == null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showErrorDialog(&quot;You
did not previously open a file. Use Save As.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(fileName);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.requestFocus();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;//creates a new editing session by deleting any previous
text<BR>
&nbsp;&nbsp;private void startNewWindow() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fileName = null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea.setText(&quot;&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea.requestFocus();<BR>
&nbsp;&nbsp;}<BR>
<BR>
/**<BR>
&nbsp;* Show Dialog Boxes<BR>
&nbsp;* Find, Replace, Replace All, About, and Error<BR>
*/<BR>
<BR>
&nbsp;&nbsp;//displays the find dialog box which has one input
field.<BR>
&nbsp;&nbsp;//Currently selected text is placed in the input field.
<BR>
&nbsp;&nbsp;public void showFindDialog() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (findDialog != null) findDialog.dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String sel = textArea.getSelectedText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (sel.length() &gt; 0) findString =
sel;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;findDialog = new FindDialog(this, findString);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;findDialog.show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;findDialog.setFocus();<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;//displays the replace dialog box which has two input
fields.<BR>
&nbsp;&nbsp;//Currently selected text is placed in the find input
field.<BR>
&nbsp;&nbsp;//Previously searched and replaced text is placed
in the input field.<BR>
&nbsp;&nbsp;public void showRepDialog() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (replaceDialog != null) replaceDialog.dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String sel = textArea.getSelectedText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (sel.length() &gt; 0) findString =
sel;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;replaceDialog = new ReplaceDialog(this,
findString,<BR>
replaceString);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;replaceDialog.show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;replaceDialog.setFocus();<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;//displays the replace all dialog box which has two
input fields.<BR>
&nbsp;&nbsp;//Currently selected text is placed in the find input
field.<BR>
&nbsp;&nbsp;//Previously searched and replaced text is placed
in the input field.<BR>
&nbsp;&nbsp;public void showReplaceAllDialog() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (replaceAllDialog != null) replaceAllDialog.dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String sel = textArea.getSelectedText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (sel.length() &gt; 0) findString =
sel;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;replaceAllDialog = new ReplaceAllDialog(this,
findString,<BR>
replaceString);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;replaceAllDialog.show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;replaceAllDialog.setFocus();<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;//displays the about dialog box<BR>
&nbsp;&nbsp;private void showAboutDialog() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (aboutDialog != null) aboutDialog.dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;aboutDialog = new AboutDialog(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;aboutDialog.show();<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;//displays the error dialog box and the current error
<BR>
&nbsp;&nbsp;public void showErrorDialog(String message) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (errorDialog != null) errorDialog.dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;errorDialog = new ErrorDialog(this, message);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;errorDialog.show();<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;//method handles reading files from the file system
<BR>
&nbsp;&nbsp;private boolean read(String filename) {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String line;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;FileInputStream in = null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;DataInputStream dataIn = null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;BufferedInputStream bis = null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;StringBuffer buffer = new StringBuffer();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;in = new FileInputStream(filename);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bis = new BufferedInputStream(in);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataIn = new DataInputStream(bis);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;} catch(Throwable e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showErrorDialog(&quot;Can't
open \&quot;&quot;+filename+&quot;\&quot;&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while ((line = dataIn.readLine())
!= null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buffer.append(line
+ &quot;\n&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;in.close();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.setText(buffer.toString());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;} catch(IOException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showErrorDialog(&quot;Can't
read \&quot;&quot;+filename+&quot;\&quot;&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return(true);<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;//method handles writing files to the file system
<BR>
&nbsp;&nbsp;private boolean write(String filename) {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;FileOutputStream os = null;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os = new FileOutputStream(filename);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;} catch (Throwable e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showErrorDialog(&quot;Can't
write \&quot;&quot;+filename+&quot;\&quot;&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String s = textArea.getText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int len = s.length();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i&lt;len; i++)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os.write(s.charAt(i));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os.close();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;} catch(IOException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showErrorDialog(&quot;Can't
write \&quot;&quot;+filename+&quot;\&quot;&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return(true);<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;//method checks the validity of file names and specifically
for a bug<BR>
&nbsp;&nbsp;//fixes the error if it occurs<BR>
&nbsp;&nbsp;private String check(String filename) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (filename.endsWith(&quot;.*.*&quot;))
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filename = filename.substring(0,
filename.length()-4);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return(filename);<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;//sets the find string<BR>
&nbsp;&nbsp;public void setFindString(String str) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;findString = str;<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;//sets the replace string<BR>
&nbsp;&nbsp;public void setReplaceString(String str) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;replaceString = str;<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;//handles the search for text in the find input field
<BR>
&nbsp;&nbsp;public void findText() {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String s;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int spoint, index;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea.requestFocus();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (findString.length() == 0) return;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;s = textArea.getText();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (s.length() == 0) return;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;spoint = textArea.getSelectionEnd();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;index = s.substring(spoint).indexOf(findString);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (index &gt;= 0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i = spoint + index;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.select(i, i + findString.length());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;//handles replacing text<BR>
&nbsp;&nbsp;public boolean replaceText() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String s;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int spoint, index;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textArea.requestFocus();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (findString.length() == 0) return(false);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;s = textArea.getText();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (s.length() == 0) return(false);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;spoint = textArea.getSelectionStart();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;index = s.substring(spoint).indexOf(findString);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (index &gt;= 0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i = spoint + index;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int j = i + findString.length();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.replaceText(replaceString,
i, j);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.select(i, i+replaceString.length());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return(false);<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;//the main method of the application invokes the Jompanion
method<BR>
&nbsp;&nbsp;public static void main(String args[]) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Jompanion n = new Jompanion();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (args.length == 1)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (n.read(args[0])) n.fileName
= args[0];<BR>
&nbsp;&nbsp;}<BR>
}<BR>
<BR>
/**<BR>
&nbsp;* The FindDialog Class sets up the find dialog box<BR>
&nbsp;* and handles related events.<BR>
*/<BR>
class FindDialog extends Dialog {<BR>
<BR>
&nbsp;&nbsp;Jompanion parent;<BR>
&nbsp;&nbsp;TextField textField;<BR>
<BR>
&nbsp;&nbsp;public FindDialog(Jompanion parent, String text) {
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;super(parent, &quot;Find&quot;, true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;this.parent = parent;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Panel p;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p = new Panel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Label l;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;l = new Label(&quot;Find What:&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.setLayout(null);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;l.reshape(0,25,110,30);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(l);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textField = new TextField(text);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textField.reshape(111,25,200,30);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(textField);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;Center&quot;, p);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Dimension d;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;d = parent.size();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;reshape(200,50,340,100);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setResizable(false);<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;switch(event.id) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Event.WINDOW_DESTROY:
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.textArea.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Event.ACTION_EVENT:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(event.target
== textField) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(textField.getText().length() &gt; 0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.setFindString(textField.getText());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.findText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.textArea.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.showErrorDialog(&quot;Find
Error&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.textArea.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return(false);<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;public void setFocus() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textField.requestFocus();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;textField.select(0, textField.getText().length());
<BR>
&nbsp;&nbsp;}<BR>
}<BR>
<BR>
/**<BR>
&nbsp;* The ReplaceDialog Class sets up the replace dialog box
<BR>
&nbsp;* and handles related events.<BR>
*/<BR>
class ReplaceDialog extends Dialog {<BR>
<BR>
&nbsp;&nbsp;Jompanion parent;<BR>
&nbsp;&nbsp;TextField fromField, toField;<BR>
<BR>
&nbsp;&nbsp;public ReplaceDialog(Jompanion parent, String fromString,
String<BR>
toString) {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;super(parent, &quot;Replace&quot;, true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;this.parent = parent;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Panel p;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p = new Panel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Label l;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;l = new Label(&quot;Find What:&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.setLayout(null);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;l.reshape(0,25,130,30);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(l);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fromField = new TextField(fromString);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fromField.reshape(131,25,200,30);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(fromField);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;l = new Label(&quot;Replace With:&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;l.reshape(0,60,130,30);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(l);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;toField = new TextField(toString);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;toField.reshape(131,60,200,30);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(toField);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;Center&quot;, p);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Dimension d;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;d = parent.size();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;reshape(200,50,360,150);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setResizable(false);<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;switch(event.id) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Event.WINDOW_DESTROY:
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.textArea.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Event.ACTION_EVENT:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(event.target
== fromField) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;toField.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if(event.target
== toField) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(fromField.getText().length() &gt; 0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.setFindString(fromField.getText());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.setReplaceString(toField.getText());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.replaceText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.textArea.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.showErrorDialog(&quot;Replace
Error&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.textArea.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return(false);<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;public void setFocus() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fromField.requestFocus();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fromField.select(0, fromField.getText().length());
<BR>
&nbsp;&nbsp;}<BR>
}<BR>
<BR>
/**<BR>
&nbsp;* The ReplaceAllDialog Class sets up the dialog box for
replacing<BR>
&nbsp;* all occurrences of a word or phrase and handles related
events.<BR>
*/<BR>
class ReplaceAllDialog extends Dialog {<BR>
<BR>
&nbsp;&nbsp;Jompanion parent;<BR>
&nbsp;&nbsp;TextField fromAllField, toAllField;<BR>
<BR>
&nbsp;&nbsp;public ReplaceAllDialog(Jompanion parent, String fromAllString,
String<BR>
toAllString) {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;super(parent, &quot;Replace All&quot;,
true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;this.parent = parent;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Panel p;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p = new Panel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Label l;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;l = new Label(&quot;Find All:&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.setLayout(null);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;l.reshape(0,25,130,30);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(l);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fromAllField = new TextField(fromAllString);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fromAllField.reshape(131,25,200,30);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(fromAllField);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;l = new Label(&quot;Replace With:&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;l.reshape(0,60,130,30);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(l);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;toAllField = new TextField(toAllString);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;toAllField.reshape(131,60,200,30);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(toAllField);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;Center&quot;, p);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Dimension d;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;d = parent.size();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;reshape(200,50,360,150);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setResizable(false);<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;switch(event.id) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Event.WINDOW_DESTROY:
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.textArea.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Event.ACTION_EVENT:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(event.target
== fromAllField) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;toAllField.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if(event.target
== toAllField) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(fromAllField.getText().length() &gt; 0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.setFindString(fromAllField.getText());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.setReplaceString(toAllField.getText());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while
(parent.replaceText()) ;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.textArea.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.showErrorDialog(&quot;Replace
All Error&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.textArea.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return(false);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public void setFocus() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fromAllField.requestFocus();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fromAllField.select(0, fromAllField.getText().length());
<BR>
&nbsp;&nbsp;}<BR>
}<BR>
<BR>
/**<BR>
&nbsp;* The AboutDialog Class sets up the dialog box that displays
<BR>
&nbsp;* information about Jompanion and handles related events
<BR>
*/<BR>
class AboutDialog extends Dialog {<BR>
<BR>
&nbsp;&nbsp;Jompanion parent;<BR>
<BR>
&nbsp;&nbsp;public AboutDialog(Jompanion parent) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;super(parent, &quot;Jompanion from the
Complete Guide to Java&quot;, true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;this.parent = parent;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Panel p;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p = new Panel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.setLayout(new GridLayout(3, 3));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(new Label(&quot;f1 - Open Files&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(new Label(&quot;f4 - Find&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(new Label(&quot;f7 - Cut&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(new Label(&quot;f2 - Save&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(new Label(&quot;f5 - Replace&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(new Label(&quot;f8 - Copy&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(new Label(&quot;f3 - Save As&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(new Label(&quot;f6 - Replace All&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(new Label(&quot;f9 - Paste&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;Center&quot;, p);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Dimension d;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;d = parent.size();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;reshape(50,440,640,120);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setResizable(false);<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;switch(event.id) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Event.WINDOW_DESTROY:
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.textArea.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return(false);<BR>
&nbsp;&nbsp;}<BR>
}<BR>
<BR>
/**<BR>
&nbsp;* The ErrorDialog Class sets up the dialog box that displays
<BR>
&nbsp;* errors to the user and handles the closing of the window
<BR>
*/<BR>
class ErrorDialog extends Dialog {<BR>
<BR>
&nbsp;&nbsp;Jompanion parent;<BR>
&nbsp;&nbsp;String message;<BR>
<BR>
&nbsp;&nbsp;public ErrorDialog(Jompanion parent, String message)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;super(parent, &quot;Error&quot;, true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setBackground(Color.yellow);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;this.parent = parent;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;this.message = message;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Panel p;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p = new Panel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.add(new Label(message));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;p.setFont(new Font(&quot;System&quot;,
Font.BOLD, 12));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;Center&quot;, p);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Dimension d;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;d = parent.size();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;reshape(200,50,420,100);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setResizable(false);<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;switch(event.id) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Event.WINDOW_DESTROY:
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent.textArea.requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return(false);<BR>
&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
After you understand how the application works, you should try
your hand at upgrading it. Some of the additional features you
may want to add to Jompanion include
<UL>
<LI>Using the <TT><FONT FACE="Courier">dim()</FONT></TT> method
to dim functions that are currently inaccessible, such as the
Cut, Copy, and Paste menu items that cannot be used until the
user selects text. You could implement this upgrade by checking
the length of the selected text. A length greater than zero means
the user has selected text. A length of zero or less means no
text is selected.
<LI>Add more menu items, such as a Close menu item to the File
menu and a Help menu item to the About menu. You could create
a menu item to close the current file. One way to do this is to
simply clear the text area. However, you should check the text
area to determine if there is data the user might want to save
before the window is cleared. To add a Help menu item, you should
develop methods to display and build the dialog box.
<LI>Support for more keys, such as Page Down and Page Up. In addition
to support for function keys f1 to f12, Java can also check for
other types of keys including Shift; Alt; Ctrl; Meta; Home; End;
Page Up; Page Down; and the left-arrow, right-arrow, up-arrow,
and down-arrow keys. You can add support for these keys by adding
events to Jompanion's <TT><FONT FACE="Courier">handleEvent()</FONT></TT>
method and creating methods that handle the events. Methods that
change the current position in the text area can be set by moving
the current focus within the document.
<LI>Multilevel undo, such as being able to undo a replace all.
To implement multilevel undo, you first need to create an array
that stores the index to the location of the change within the
document and the string that was changed at that location.
</UL>
<P>
<CENTER>
<FONT SIZE=1 FACE="Goudy"></FONT><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=527>
<BLOCKQUOTE>
The Meta key is used primarily on Sun UNIX workstations. On a Windows 95-compatible keyboard, this key would be your Windows key.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="Summary"><B><FONT SIZE=5 COLOR=#Ff0000>Summary</FONT></B></A>
</H2>
<P>
Developing advanced applications involves careful planning. For
most projects, planning involves mapping out the steps necessary
to complete the project and allocating a time period for implementing
each step. After you plot out the steps that will take you through
project completion, you can group the steps into phases. These
phases form the software development life cycle for the application.
<P>
A top-down methodology was used to develop and implement the Jompanion
editor. Using this type of methodology, high-level objects are
developed before the low-level ones. For Jompanion, the first
step in design and implementation involved developing the main
window. After the main window was developed, you looked at the
next level of objects  and so on, working your way to the low-level
objects that performed the actual manipulation of text. In following
this design approach, you used sound object-oriented design techniques
and should now be ready to create your own advanced applications
in Java.
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch20.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch20.htm"><IMG SRC="pc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/index.htm"><IMG SRC="hb.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch22.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch22.htm"><IMG 
SRC="nc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>