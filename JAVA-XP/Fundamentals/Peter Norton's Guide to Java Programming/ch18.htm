<HTML>

<HEAD>
   <TITLE>Chapter 18 -- Using Java Applications in the
Real World</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<!--Begin JavaScript roadmap code.  If editing downloaded HTML source, delete
 this portion.-->

<script language="JavaScript">
<!--

function TripodShowPopup()
{
   var bName=navigator.appName;
   var bVer=parseInt(navigator.appVersion);
   var now = new Date();
   var popupURL = "/adm/popup/roadmap.shtml?"+"member_name=er4ebus&path=peternortonjavaprograming&client_ip=200.190.100.218&ts=1015337200&ad_type=POPUP&category=net&id=82b3910d243243a8569bd127660f6d75";
   var popupName = "TripodPopup";

   if (bName=="Netscape" && bVer<=3)
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=614,height=150');
   }
   else
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=604,height=135');
   }
   popup.location = popupURL;
}

if(window.parent==window)
{
   TripodShowPopup();
}

// -->
</script>

<script language="JavaScript1.2">
<!--

function changeOpenFunction()
{
   var original_window_open = window.open;
   function new_open_function(url, name, features, replace)
   {
      if(name != "TripodPopup")
         return original_window_open(url, name, features, replace);
   }
   window.open = new_open_function;
}
var bName = navigator.appName;

if(bName != "Netscape")
   changeOpenFunction();

// -->
</script>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#Ff0000>Chapter 18</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#Ff0000>Using Java Applications in the
Real World</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>

<UL>
<LI><A HREF="#BiggerBetterFasterApplications" >Bigger, Better, Faster Applications</A>
<LI><A HREF="#ConceptualizingaRealWorldApplication" >Conceptualizing a Real-World Application</A>
<UL>
<LI><A HREF="#UsefulOnlineResources" >Useful Online Resources</A>
<LI><A HREF="#DeterminingRequirements" >Determining Requirements</A>
</UL>
<LI><A HREF="#DesigningaRealWorldApplication" >Designing a Real-World Application</A>
<UL>
<LI><A HREF="#OverallDesignandLayout" >Overall Design and Layout</A>
<LI><A HREF="#DesignfortheMainWindow" >Design for the Main Window</A>
<LI><A HREF="#DesignfortheMenuBar" >Design for the Menu Bar</A>
<LI><A HREF="#DesignfortheSlidePanelObject" >Design for the SlidePanel Object</A>
<LI><A HREF="#DesignfortheSlideCanvasObject" >Design for the SlideCanvas Object</A>
<LI><A HREF="#DesignfortheSlideTextObject" >Design for the SlideText Object</A>
<LI><A HREF="#DesignfortheControls" >Design for the Controls</A>
<LI><A HREF="#DesignfortheDialogBoxes" >Design for the Dialog Boxes</A>
<LI><A HREF="#FileIO" >File I/O</A>
<LI><A HREF="#RelationshipsAmongObjects" >Relationships Among Objects</A>
</UL>
<LI><A HREF="#ImplementingaRealWorldApplication" >Implementing a Real-World Application</A>
<UL>
<LI><A HREF="#BuildingtheMainWindow" >Building the Main Window</A>
<LI><A HREF="#AddingtheSlidePanelClass" >Adding the SlidePanel Class</A>
<LI><A HREF="#AddingtheSlideCanvasObject" >Adding the SlideCanvas Object</A>
<LI><A HREF="#AddingtheSlideTextObject" >Adding the SlideText Object</A>
<LI><A HREF="#AddingtheControls" >Adding the Controls</A>
<LI><A HREF="#AddingtheDialogBoxes" >Adding the Dialog Boxes</A>
</UL>
<LI><A HREF="#TheCompleteProject" >The Complete Project</A>
<LI><A HREF="#TestingandDebugging" >Testing and Debugging</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
Real-world applications differ from the simple stand-alone applications,
such as <TT><FONT FACE="Courier">SumGraph</FONT></TT>, in their
size, complexity, and usefulness. This chapter introduces you
to many of the techniques used to develop large applications.
<P>
This chapter works through a single example of an intermediate
Java application and introduces additional tools and objects that
are useful in building larger applications in Java. The chapter
ends with a test plan for the application.
<H2><A NAME="BiggerBetterFasterApplications"><B><FONT SIZE=5 COLOR=#Ff0000>Bigger,
Better, Faster Applications</FONT></B></A></H2>
<P>
Real-world applications are expected to have rapid response times;
user-friendly help screens; attractive, well-thought-out layouts;
and an easy-to-understand organization. Many features that are
not necessary in applets are expected in applications.
<P>
Adding the features expected for applications increases the amount
of programming required. Some features, such as menu layout and
frame appearance, are expected to appear similarly amongprograms
running on the same operating system. Most applications include
an About box giving version, copyright, and authoring information.
Applications also may include registration screens, graphical
toolbars, pop-up information windows, and many other tools.
<P>
Java can be used to develop programs with all these features,
although some are easier to include than others. The basic technique
for developing applications remains the same as the programs grow.
However, greater care must be taken with the design to allow for
the additional features and to provide sufficient robustness to
meet the needs of sophisticated users. A well-designed program
can be easily broken into pieces so that a different person or
team can work on each section. The sections then can be seamlessly
joined to produce a working program in a short time period.
<P>
As more tools and utilities become available for Java, development
time will be reduced. Because Java is object-oriented, incorporating
existing utilities into Java programs is straightforward; recall
how easy incorporating the <TT><FONT FACE="Courier">ScrollText</FONT></TT>
applet into the application was in <A HREF="ch17.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch17.htm" >Chapter 17</A>,
&quot;Creating a Stand-alone Application.&quot;
<P>
With the <TT><FONT FACE="Courier">java.awt</FONT></TT> package,
you can create a program whose appearance reflects the operating
system on which it runs. Therefore, programmers can incorporate
features into their applications without worrying about how it
will look on each platform.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Looking Ahead</B></TD></TR>
<TR><TD WIDTH=534>
<BLOCKQUOTE>
In this chapter you will be working through the development of a more complex application. The application includes several features common in real-world applications. Many of these features are introduced in the sample application in <A HREF="ch17.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch17.htm" 
>Chapter 17</A>, but the examples given here are significantly more robust. The discussions here will help prepare you for the advanced programs presented in Part VII, &quot;Advanced Issues.&quot;
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="ConceptualizingaRealWorldApplication"><B><FONT SIZE=5 COLOR=#Ff0000>Conceptualizing
a Real-World Application</FONT></B></A></H2>
<P>
<A HREF="ch17.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch17.htm" >Chapter 17</A> shows how the design of a simple
application can be modified as it is created. This chapter develops
a more complex example with more of the features found in real-world
applications.
<P>
The design of a large application is generally an iterative breakdown
process: The application is divided into smaller pieces and a
design is constructed for each piece. One of the key engineering
decisions is where to divide the pieces, which is not always obvious
from the specification. It is not necessary that the pieces be
of equivalent size or complexity, but it is necessary that they
be well defined and have distinct boundaries.
<H3><A NAME="UsefulOnlineResources"><B>Useful Online Resources</B></A>
</H3>
<P>
In developing larger applications, you can realize significant
time savings if you use utilities that have already been developed.
One of the greatest advantages of Java is the ease with which
utilities can be shared among developers.
<P>
Some of these utilities are available through sites on the Internet.
You can find counters, parsers, string tokenizers, and URL verifiers,
just to name a few.
<P>
Some likely online sources for Java utilities include
<BLOCKQUOTE>
<TT><A HREF="tppmsgs\msgs0.htm#41" tppabs="http://www.yahoo.com/Computers_and_Internet/Languages/Java/Utilities/">http://www.yahoo.com/Computers_and_Internet/Languages/Java/Utilities/</A>
<BR>
<BR>
<A HREF="tppmsgs\msgs0.htm#8" tppabs="http://www.gamelan.com/">http://www.gamelan.com/</A><BR>
<BR>
<A HREF="tppmsgs\msgs0.htm#42" tppabs="http://www.blackdown.org/~kbs/">http://www.blackdown.org/~kbs/</A></FONT></TT>
</BLOCKQUOTE>
<P>
Try these sites and others to find useful utilities to incorporate
into your applications.
<H3><A NAME="DeterminingRequirements"><B>Determining Requirements</B></A>
</H3>
<P>
The specification for the <TT><FONT FACE="Courier">SlideShow</FONT></TT>
application to be developed in this chapter is simply this:
<BLOCKQUOTE>
The application will display a slide show of multiple GIF images
with related text.
</BLOCKQUOTE>
<P>
Although this specification does not mention menus or controls,
it is safe to assume these are expected. It is also reasonable
to expect to provide a means of loading a show from a file and
a graceful mechanism to exit the application.
<P>
Expanding on this definition, <TT><FONT FACE="Courier">SlideShow</FONT></TT>
must perform the following tasks:
<UL>
<LI>Load a show from a file
<LI>Display images
<LI>Display text
<LI>Advance forward to the next slide
<LI>Return to the previous slide
<LI>Go to the last slide
<LI>Go to the first slide
<LI>Enable/disable the display of slides
<LI>Enable/disable the display of text
<LI>Provide help
<LI>Provide authoring information
<LI>Exit the program
</UL>
<H2><A NAME="DesigningaRealWorldApplication"><B><FONT SIZE=5 COLOR=#Ff0000>Designing
a Real-World Application</FONT></B></A></H2>
<P>
In this section the entire application is divided into objects,
resulting in actual objects to be implemented in Java. In some
cases, the objects are composed of other objects that you must
define and implement. The process stops when all the components
necessary to complete the tasks listed in the requirements are
defined. These components will be either implemented as new classes
in Java or created using existing Java class definitions.
<H3><A NAME="OverallDesignandLayout"><B>Overall Design and Layout</B></A>
</H3>
<P>
First, you need to define the main features of the application.
Applications are usually designed around one main viewing area
with additional tools provided in separate windows. The main viewing
area is where the user focuses when running the application; therefore,
it should be well designed and pleasant to the viewer.
<P>
The application's viewing area can be made up of many components
grouped into one container to simplify handling. The container
is responsible for providing the methods that can be used to modify
the display to the user. It does so using methods provided by
each of the objects it contains. It groups the methods provided
by its contents so that related events are always handled in the
same manner, even when they are called by different controls.
<P>
The main screen will be more than a simple display window. The
user must be able to move through the slides in the display. It
also would be nice to provide controls on the display for moving
through the pictures. These controls would function similar to
VCR controls, enabling the user to move forward and backward through
the slides.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=573>
<BLOCKQUOTE>
Screen appearance is an important part of any commercial application. Customers will decide to purchase a product on the basis of the way they react to its appearance. They will spend a great deal of time interacting with your application; it should be a 
pleasant experience.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
In considering screen layout for an application, you also need
to consider fonts, icons, and text size. Some applications require
a more modern font; others may require a larger or smaller text
size. Java allows you to pick a particular icon and assign it
to each window, so your application can be iconified to a graphic
that is familiar to your users. The icon is set using the <TT><FONT FACE="Courier">setIconImage()</FONT></TT>
in the <TT><FONT FACE="Courier">Frame</FONT></TT> class.
<P>
In creating the structure of the program, I made some decisions
that reflect an idea of how the screen will be laid out. The program
will have one area for display and another for controls. It will
include a menu. The display area will be divided into two sections,
one for text and the other for graphics. This is not all the information
you would need to determine a screen layout, but it is a good
starting point.
<H3><A NAME="DesignfortheMainWindow"><B>Design for the Main Window</B></A>
</H3>
<P>
The main window provides a frame for the application. Other objects
in the display appear in the main window. In general, an application's
main window will set its colors, fonts, layout, and other display
aspects. It then adds the objects it is responsible for displaying,
such as an event handler and the <TT><FONT FACE="Courier">main()</FONT></TT>
method used to start the application.
<P>
In the <TT><FONT FACE="Courier">SlideShow</FONT></TT> application,
two display aspects must be set: The background color will be
defined to be light gray, and the layout will be set to a border
layout.
<P>
Three objects should display in the main window: the menu bar
that will display across the top of the frame, the display panel
that consists of graphics and text objects, and a set of controls
used to direct the slide shows.
<H3><A NAME="DesignfortheMenuBar"><B>Design for the Menu Bar</B></A>
</H3>
<P>
The menu bar is a separate object that is attached to the frame
for the application. If there are multiple frames in an application,
each one should have its own menu bar; but if the main window
can control events in the other windows, those windows don't need
a menu bar. If there are multiple menu bars, you must decide which
features to include on each one. In the <TT><FONT FACE="Courier">SlideShow</FONT></TT>
application there is only one main window, and it will have a
menu bar. The Help windows will not be given a menu bar.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=584>
<BLOCKQUOTE>
Adding a menu bar to an application is not a trivial task. There are decisions about what to include on the menu bar, how to group choices on menus, when to make certain menu items visible, and how to connect each menu to the various activities it 
invokes.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
In most applications you want all the activities of the application
to be available on the menu because users will look at the menu
when it is not obvious how to perform a certain activity on the
screen. Your menu also must include an option to exit the application.
If you are providing help screens with your application, they
should be available from the menu as well.
<P>
For the <TT><FONT FACE="Courier">SlideShow</FONT></TT> application,
all the actions available on the control panel are duplicated
on the menu. In addition, the menu will provide the capability
to load a new show. Two check boxes will be added to the menu
to enable the user to turn off the video or the text display.
The menu also will allow the user to display help, display an
About box, or exit the application.
<P>
After selecting the activities to include in the menu, you need
to organize these options into groups on the menu. The first item
on most application menus is the File menu, which includes options
that involve loading and saving files. Generally, options to print
a file, control the printer, close a particular window, and exit
the application are also located here.
<P>
For the <TT><FONT FACE="Courier">SlideShow</FONT></TT> application,
the File menu will have two items: Load, which provides the option
to load a new show; and Exit, which allows the user to exit the
program.
<P>
The Help menu is usually the last item on the application menu.
Items found here commonly involve providing assistance to the
person using the application. This help may come in many different
forms. The Help menu will provide one item for each type of help
available.
<P>
The <TT><FONT FACE="Courier">SlideShow</FONT></TT> application
will provide a simple screen to describe the use of each of the
controls. It will also have an About box that displays copyright,
version, and authoring information. Each of these screens is accessible
from the Help menu.
<P>
The remaining functions on the <TT><FONT FACE="Courier">SlideShow</FONT></TT>
menu bar will be grouped into the Display menu, which provides
the items to move through the show and to turn off parts of the
display.
<P>
The menu bar for the <TT><FONT FACE="Courier">SlideShow</FONT></TT>
application is summarized in Table 18.1.<BR>
<P>
<CENTER><B>Table 18.1. Menu bar features of the </B><TT><B><FONT FACE="Courier">SlideShow</FONT></B></TT><B>
application.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><I>Category</I></TD><TD WIDTH=102><I>Item</I>
</TD><TD WIDTH=270><I>Description</I></TD></TR>
<TR><TD WIDTH=80>File</TD><TD WIDTH=102>Load</TD><TD WIDTH=270>Loads slides into the application
</TD></TR>
<TR><TD WIDTH=80>&nbsp;</TD><TD WIDTH=102>Exit</TD><TD WIDTH=270>Exits <TT><FONT FACE="Courier">SlideShow</FONT></TT>
</TD></TR>
<TR><TD WIDTH=80>Display</TD><TD WIDTH=102>Forward</TD><TD WIDTH=270>Moves forward to the next slide
</TD></TR>
<TR><TD WIDTH=80>&nbsp;</TD><TD WIDTH=102>Back</TD><TD WIDTH=270>Moves backward to the previous slide
</TD></TR>
<TR><TD WIDTH=80>&nbsp;</TD><TD WIDTH=102>Beginning</TD><TD WIDTH=270>Moves to the first slide in the show
</TD></TR>
<TR><TD WIDTH=80>&nbsp;</TD><TD WIDTH=102>End</TD><TD WIDTH=270>Moves to the last slide in the show
</TD></TR>
<TR><TD WIDTH=80>&nbsp;</TD><TD WIDTH=102>No Text</TD><TD WIDTH=270>When checked, the text is hidden
</TD></TR>
<TR><TD WIDTH=80>&nbsp;</TD><TD WIDTH=102>No Slides</TD><TD WIDTH=270>When checked, the pictures are hidden
</TD></TR>
<TR><TD WIDTH=80>Help</TD><TD WIDTH=102>Help Topics</TD><TD WIDTH=270>Provides a description of the controls
</TD></TR>
<TR><TD WIDTH=80>&nbsp;</TD><TD WIDTH=102>About</TD><TD WIDTH=270>Provides authoring information
</TD></TR>
</TABLE></CENTER>
<P>
<P>
For some applications, menu items may be pertinent at some times
but irrelevant at others. It makes sense to make these items invisible
when they are not available. In Java, menu items can be made invisible
only by removing them from the menu. However, it is perfectly
legal to change the items on a menu at runtime.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Tip</B></TD></TR>
<TR><TD WIDTH=582>
<BLOCKQUOTE>
There are times when it might make sense to dim certain menu items, such as those that are available under certain circumstances but are not currently available. This feature is not used in this application. The most common example of this technique is the 
Cut, Copy, and Paste commands on an Edit menu. The Java method to dim a menu item is <TT><FONT FACE="Courier">disable()</FONT></TT>. These menu items can be made available again using the <TT><FONT FACE="Courier">enable()</FONT></TT> method.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
For the <TT><FONT FACE="Courier">SlideShow</FONT></TT> application,
there is no need to make any of the items invisible. However,
the check boxes will be checked only if a particular option has
been selected by the user.
<H3><A NAME="DesignfortheSlidePanelObject"><B>Design for the </B><TT><B><FONT SIZE=4 FACE="Courier">SlidePanel</FONT></B></TT><B><FONT SIZE=4>
Object</FONT></B></A></H3>
<P>
You need to define a new class, <TT><FONT FACE="Courier">SlidePanel</FONT></TT>,
to provide the display object. The new class is an extension of
the <TT><FONT FACE="Courier">Panel</FONT></TT> class and will
contain two new classes: <TT><FONT FACE="Courier">SlideCanvas,</FONT></TT>
which will control the display of slides, and <TT><FONT FACE="Courier">SlideText,</FONT></TT>
which will control the display of the text.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=555>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">SlideCanvas</FONT></TT> and <TT><FONT FACE="Courier">SlideText</FONT></TT> are the real performers of the application. These classes provide the features that are available to other objects in the application.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The <TT><FONT FACE="Courier">SlidePanel</FONT></TT> class must
include methods to provide the following functions:
<UL>
<LI>Advance to the next slide
<LI>Revert to the previous slide
<LI>Go to the first slide
<LI>Go to the last slide
<LI>Disable the display of slides
<LI>Enable the display of slides
<LI>Disable the display of text
<LI>Enable the display of text
<LI>Load a new show
</UL>
<P>
The <TT><FONT FACE="Courier">SlidePanel</FONT></TT> methods encapsulate
the calls to the methods provided by the objects contained in
the panel and are used by both the menu and the controls. <TT><FONT FACE="Courier">SlidePanel</FONT></TT>
is also responsible for confirming that the text being displayed
corresponds to the slide being shown.
<H3><A NAME="DesignfortheSlideCanvasObject"><B>Design for the
</B><TT><B><FONT SIZE=4 FACE="Courier">SlideCanvas</FONT></B></TT><B><FONT SIZE=4>
Object</FONT></B></A></H3>
<P>
The <TT><FONT FACE="Courier">SlideCanvas</FONT></TT> class will
contain an array of images to display. This class is responsible
for reading the <TT><FONT FACE="Courier">.gif</FONT></TT> files
that contain the images and for building the array, as well as
for displaying the picture to the user and providing methods to
control that display. It maintains the total number of slides
stored in the array, the current slide, and a flag to indicate
whether slides are currently being displayed to the user.
<H3><A NAME="DesignfortheSlideTextObject"><B>Design for the </B><TT><B><FONT SIZE=4 FACE="Courier">SlideText</FONT></B></TT><B><FONT SIZE=4>
Object</FONT></B></A></H3>
<P>
The <TT><FONT FACE="Courier">SlideText</FONT></TT> class is quite
similar to the <TT><FONT FACE="Courier">SlideCanvas</FONT></TT>
class. The difference is that <TT><FONT FACE="Courier">SlideText</FONT></TT>
contains text strings rather than pictures. The text strings are
read from <TT><FONT FACE="Courier">.txt</FONT></TT> files containing
descriptions of the slides in the <TT><FONT FACE="Courier">SlideCanvas</FONT></TT>
object.
<P>
The <TT><FONT FACE="Courier">SlideText</FONT></TT> class will
have the same list of internal reference variables and must provide
methods similar to those provided by <TT><FONT FACE="Courier">SlideCanvas</FONT></TT>.
Instead of methods to enable and disable the display of slides,
<TT><FONT FACE="Courier">SlideText</FONT></TT> will provide methods
to enable and disable the display of text.
<H3><A NAME="DesignfortheControls"><B>Design for the Controls</B></A>
</H3>
<P>
Most applications will have some type of graphical controls on
the screen in addition to a menu. Selecting appropriate controls
and determining their layout are important design considerations.
Controls can be grouped and included as a toolbar or a palette.
An application may have large buttons for a user to indicate they
are done with a certain task, or it may have a picture with different
areas taking a user to different tasks. The application may provide
scroll boxes, drop-down list boxes, or radio buttons. Java provides
mechanisms for supplying many types of controls.
<P>
You can create controls as instances of existing objects in the
<TT><FONT FACE="Courier">java.awt</FONT></TT> package, or by extending
and combining those objects to provide custom controls. <I>Controls</I>
are separate objects that can be grouped together on an application.
They are usually separated from the display area of the application,
but they do not have to be. Each control or group of controls
should have an event handler so that it can react appropriately
when the user selects the control.
<P>
The controls for the <TT><FONT FACE="Courier">SlideShow</FONT></TT>
application will be constructed as a <TT><FONT FACE="Courier">Panel</FONT></TT>
object containing instances of the <TT><FONT FACE="Courier">Button</FONT></TT>
class. The controls will provide buttons to enable the user to
move forward or backward through the show and to move to the first
or last slide.
<H3><A NAME="DesignfortheDialogBoxes"><B>Design for the Dialog
Boxes</B></A></H3>
<P>
Three dialog boxes will be provided in the <TT><FONT FACE="Courier">SlideShow</FONT></TT>
application. The first will appear off the Load item on the File
menu and will enable the user to select a filename to load. The
other two dialog boxes will appear off the Help menu.
<P>
Create the Load dialog box using the existing <TT><FONT FACE="Courier">FileDialog</FONT></TT>
class. The <TT><FONT FACE="Courier">FileDialog</FONT></TT> class
is an example of a <I>utility</I>, a class that is useful across
many applications. To be useful, a utility must be self-contained
and easy to understand. The Java Developer's Kit provides several
good utilities, and other resources exist for gathering more Java
utilities, such as the official Java reference resource at Gamelan.
Utilities that are developed for one application can be easily
transferred to another.
<P>
The other two dialog boxes will be created as extensions to the
<TT><FONT FACE="Courier">Panel</FONT></TT> class. The title of
each dialog box and its contents will be coded into the extension.
To make the window easy to close, the extensions will provide
an OK button that closes the window.
<H3><A NAME="FileIO"><B>File I/O</B></A></H3>
<P>
One of the biggest differences between developing applets and
developing applications is the availability of local files for
reading and writing. <A HREF="ch17.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch17.htm" >Chapter 17</A> presents
a brief example of writing to a file. This section relates some
additional details on reading from files and accessing them on
the local disk.
<P>
The <TT><FONT FACE="Courier">SlideShow</FONT></TT> application
reads several different files. It initially reads a file to determine
which slides are part of the show, and then reads the files containing
those slides. Finally, it reads the text files containing a description
or comment about each picture.
<P>
In the first file access, the application will read the names
of the files without the extension so that the same filenames
can be used for both slides and comments. The slides are stored
in <TT><FONT FACE="Courier">.gif</FONT></TT> files and the comments
in <TT><FONT FACE="Courier">.txt</FONT></TT> files.
<P>
Although there are several types of streams that can be used to
read a file, the easiest method of performing file I/O is with
a <TT><FONT FACE="Courier">RandomFileAccess</FONT></TT> object.
This object encapsulates many of the file-access mechanisms, reducing
the complexity of the code used to read the file.
<P>
The <TT><FONT FACE="Courier">RandomFileAccess</FONT></TT> methods
may encounter errors when reading or writing a file such as missing
files, corrupt files, files that are read-only, and similar problems
related to file storage and access. Although the class may be
able to handle some of these problems, many of them must be reported
back to the user. Therefore, the methods in this class may throw
an <TT><FONT FACE="Courier">IOException</FONT></TT> error.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=588>
<BLOCKQUOTE>
The <TT><FONT FACE="Courier">Exception</FONT></TT> objects are a graceful way of handling error conditions. Any code that calls a method capable of throwing an exception must either catch the exception or throw back the exception to its caller. It is 
possible for a single method to throw multiple exceptions. (<A HREF="ch8.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch8.htm" >See Chapter 8</A>, &quot;Tying It All Together: Threads, Exceptions, and More,&quot; for a discussion of throwing and catching exceptions.)
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
If the method elects to catch the exception, it must provide code
to do so. The code to catch exceptions uses the following syntax,
with the method or methods being called within the braces after
the keyword <TT><FONT FACE="Courier">try</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">try {...} catch (ExceptionType exceptionname)
{...}</FONT></TT>
</BLOCKQUOTE>
<P>
The exception handling is placed in the braces following the keyword
<TT><FONT FACE="Courier">catch</FONT></TT>. The <TT><FONT FACE="Courier">Exception</FONT></TT>
object that is caught is assigned a name so that it can be referenced.
The way the exception is handled depends on the problem and the
context in which it occurred.
<P>
Some exceptions can be ignored. In this case, the space between
the braces is left blank. Other exceptions can be displayed with
or without an error message to the user. Some can be displayed
in their own pop-up window. Others can be written to a log file.
Some may even cause the program to shut down. In the <TT><FONT FACE="Courier">SlideShow</FONT></TT>
application, file I/O exceptions result in an error message being
displayed on the standard output-that is, the window where the
application was started, not the window where the application
is running.
<H3><A NAME="RelationshipsAmongObjects"><B>Relationships Among
Objects</B></A></H3>
<P>
After you have decided on the major pieces of your application,
the relationships among them must be established. Some pieces
may not have any interaction with other pieces. Other pieces will
affect the display of the screen they appear on, while still others
will affect the display of multiple screens. The menu must interact
with many of the objects in the application.
<P>
For the application being created, the dialog boxes will be displayed
via the menu. The menu will also be used to load a new show into
the main window. The controls that have been defined must call
methods in the display panel to change the display on the screen.
The functions available on the controls should be duplicated on
the menu; therefore, these methods also must be available to the
menu.
<P>
The relationships among objects and the users of the program indicate
the events that must be handled by the objects. The actions that
occur on the menu must be handled in the event handler of the
<TT><FONT FACE="Courier">SlideShow</FONT></TT> class. The actions
that occur in dialog boxes are handled by the event handler for
the dialog box. The controls have an event handler to respond
to user actions in the controls.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Peter's Principle</B></TD></TR>
<TR><TD WIDTH=564>
<BLOCKQUOTE>
In the real world, designing an application is hampered by the changing nature of the user's needs. The design process will start in one direction, only to have new needs or new constraints appear. The flexibility of Java helps to ease this problem; 
however, skilled project management is still important to successfully bring applications to completion.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="ImplementingaRealWorldApplication"><B><FONT SIZE=5 COLOR=#Ff0000>Implementing
a Real-World Application</FONT></B></A></H2>
<P>
In the implementation of the application, you will create the
classes that were designed in the previous section as well as
instances of these and other classes as needed to perform the
tasks required for the application. Seven new classes must be
defined to create the <TT><FONT FACE="Courier">SlideShow</FONT></TT>
application.
<H3><A NAME="BuildingtheMainWindow"><B>Building the Main Window</B></A>
</H3>
<P>
The first class to define is an extension of the <TT><FONT FACE="Courier">Frame</FONT></TT>
class named <TT><FONT FACE="Courier">SlideShow</FONT></TT>. The
main window is built in this class, as is the <TT><FONT FACE="Courier">main()</FONT></TT>
method used to start the application. After declaring the new
class, two key containers are defined to create instances of the
<TT><FONT FACE="Courier">MenuBar</FONT></TT> and <TT><FONT FACE="Courier">SlidePanel</FONT></TT>
objects. These declarations appear as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class SlideShow extends Frame
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected MenuBar mbar;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Menu for the slideshow<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected SlidePanel displayPanel;&nbsp;&nbsp;&nbsp;&nbsp;//
Panel to display the show</FONT></TT>
</BLOCKQUOTE>
<P>
To help you visualize these objects as they are discussed, Figure
18.1 shows the main window for the application.
<P>
<A HREF="f18-1.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f18-1.gif" ><B>Figure 18.1 : </B><I>The main window of the SlideShow application.</I></A>
<H4><B>The </B><TT><B><FONT FACE="Courier">SlideShow()</FONT></B></TT><B>
Method</B></H4>
<P>
Following a top-down methodology, you should construct the high-level
objects before the low-level objects. For this reason, you now
need to define the layout and style of the application and instantiate
the key objects used to build the window. This is handled in a
method called <TT><FONT FACE="Courier">SlideShow()</FONT></TT>,
which is shown in Listing 18.1.
<P>
The <TT><FONT FACE="Courier">SlideShow()</FONT></TT> method builds
the main window in a few easy steps. It calls a method used to
build the menu and then sets the menu bar on the frame. Afterward,
it sets the color of the background and defines the layout style
for the display panel and controls. Its final step is to create
new instances of the display panel and the controls and add them
to the frame. The display panel is instantiated and added to the
center of the frame using a single line of code. Likewise, the
controls are instantiated and added to the South portion of the
frame using a single line of code.
<HR>
<BLOCKQUOTE>
<B>Listing 18.1. The </B><TT><B><FONT FACE="Courier">SlideShow()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public SlideShow(String args) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InitializeMenu();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setMenuBar(mbar);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setBackground(Color.lightGray);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout(new BorderLayout());<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;Center&quot;,displayPanel
= new SlidePanel(args));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;South&quot;,new ShowControls(displayPanel));
<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>Creating the Menu Bar</B></H4>
<P>
The <TT><FONT FACE="Courier">SlideShow</FONT></TT> class is also
used to build the menu bar, which is an instance of the class
<TT><FONT FACE="Courier">MenuBar</FONT></TT> from the <TT><FONT FACE="Courier">java.awt</FONT></TT>
package. Compared with all the thought that goes into setting
up a menu, the code to create it is short. For clarity, the code
is placed in its own method called <TT><FONT FACE="Courier">InitializeMenu</FONT></TT>.
This method, shown in Listing 18.2, is called by the <TT><FONT FACE="Courier">SlideShow()</FONT></TT>
method.
<P>
To ensure that the menu bar is easy to use, menu items are logically
grouped into menu categories. The <TT><FONT FACE="Courier">SlideShow</FONT></TT>
application's menu bar has three menu categories: File, Display,
and Help, which are defined using the <TT><FONT FACE="Courier">Menu</FONT></TT>
class. Items on the menus are defined as <TT><FONT FACE="Courier">MenuItem</FONT></TT>
or <TT><FONT FACE="Courier">CheckBoxMenuItem</FONT></TT> objects
from the same package.
<P>
Just as you group menus into categories, you should also logically
group menu items. If a particular menu can be grouped into subcategories,
you can use the <TT><FONT FACE="Courier">addSeparator()</FONT></TT>
method to add a graphical rule to the menu to visually separate
the categories of menu items.
<P>
After you define all the menu items for a particular menu, you
need to add the menu to the menu bar using the <TT><FONT FACE="Courier">add()</FONT></TT>
method.
<HR>
<BLOCKQUOTE>
<B>Listing 18.2. The </B><TT><B><FONT FACE="Courier">InitializeMenu()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">// Creates the menu and attaches it to
the MenuBar<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private void InitializeMenu()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mbar
= new MenuBar();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Menu
m = new Menu(&quot;File&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Load...&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.addSeparator();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Exit&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mbar.add(m);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m
= new Menu(&quot;Display&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Forward&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Back&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Beginning&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;End&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.addSeparator();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
CheckboxMenuItem(&quot;No Text&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
CheckboxMenuItem(&quot;No Slides&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mbar.add(m);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m
= new Menu(&quot;Help&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Help Topics&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.addSeparator();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;About SlideShow&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mbar.add(m);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Figure 18.2 shows the Display menu in the <TT><FONT FACE="Courier">SlideShow</FONT></TT>
application. The menu contains each of the menu items listed in
the code with a separator between the menu subcategories.
<P>
<A HREF="f18-2.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f18-2.gif" ><B>Figure 18.2 : </B><I>Using the menu.</I></A>
<H4><B>Handling Events</B></H4>
<P>
The event handler of the <TT><FONT FACE="Courier">SlideShow</FONT></TT>
class is used to respond to the menu events in this application.
The code for the event handler is shown in Listing 18.3. Notice
that the item name is used to determine the user's selection.
Therefore, the item names in the event handler must exactly match
the item names listed on the menu.
<P>
The event handler is responsible for displaying the three dialog
boxes created in the previous section. In each case, it creates
the dialog box and assigns a name to the instance. It then uses
the name to display the dialog box. When the Load dialog box closes,
it passes the name of the file to the display panel so the appropriate
file is loaded.
<P>
For events in the Display menu, the event handler calls the appropriate
method on the display panel. When the user selects Exit or destroys
the window, the event handler causes the application to exit.
<HR>
<BLOCKQUOTE>
<B>Listing 18.3. The event handler for </B><TT><B><FONT FACE="Courier">SlideShow</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">// Event handler responds to events in
the window and<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// events on the menu<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleEvent(Event
evt) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.id == Event.WINDOW_DESTROY &amp;&amp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
evt.target instanceof SlideShow)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if(evt.target instanceof CheckboxMenuItem) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.arg.equals(&quot;No Text&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(((CheckboxMenuItem) evt.target).getState() == true)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.NoText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.ShowText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;No Slides&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(((CheckboxMenuItem) evt.target).getState() == true)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.NoSlides();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.ShowSlides();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if(evt.target instanceof MenuItem) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.arg.equals(&quot;Load...&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
FileName;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileDialog
fd =<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new
FileDialog((Frame) this,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Get
New Slide Show&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileDialog.LOAD);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName
= fd. getDirectory() + fd.getFile();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.LoadShow(FileName);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Forward&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.ShowNextSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Back&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.ShowPrevSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Beginning&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.ShowFirstSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;End&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.ShowLastSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Exit&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;About SlideShow&quot;))&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AboutBox
ab = new AboutBox(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ab.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Help Topics&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HelpBox
ab = new HelpBox(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ab.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
super.handleEvent(evt);&nbsp;&nbsp;&nbsp;&nbsp; // Let parent
handle event<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>Starting the Application</B></H4>
<P>
The final method defined in the <TT><FONT FACE="Courier">SlideShow</FONT></TT>
class is the <TT><FONT FACE="Courier">main()</FONT></TT> method.
In any application, <TT><FONT FACE="Courier">main()</FONT></TT>
is the first method called when the application starts. Listing
18.4 shows this method.
<P>
The <TT><FONT FACE="Courier">SlideShow</FONT></TT> application's
<TT><FONT FACE="Courier">main()</FONT></TT> method expects a filename
to be passed as an argument from the command line. If this does
not happen, the application prints a usage message and exits the
application. If a filename is passed as an argument, the <TT><FONT FACE="Courier">main()</FONT></TT>
method does the following:
<UL>
<LI>Creates a new instance of the <TT><FONT FACE="Courier">SlideShow</FONT></TT>
object
<LI>Sets a title on the main frame
<LI>Resizes the application's frame to the current window size
<LI>Shows the objects built when the <TT><FONT FACE="Courier">SlideShow()</FONT></TT>
method was invoked
</UL>
<P>
Resizing your application's main frame to the current window size
is a key design concept. In this way, you ensure that the main
frame always fits in the user's screen.
<HR>
<BLOCKQUOTE>
<B>Listing 18.4. The </B><TT><B><FONT FACE="Courier">main()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// main
method used to start application<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String args[]){
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Verify that there is a filename to attempt to load show<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(args.length &lt;= 0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
System.out.println(&quot;Usage: java SlideShow filename.&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Create instance of this object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SlideShow
ss = new SlideShow(args[0]);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.setTitle(&quot;Slide
Show&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Set the title of the frame<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.pack();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Pack components<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//resize
frame to current window size<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dimension
d;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d
= Toolkit.getDefaultToolkit().getScreenSize();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.resize(d.width,
d.height);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.show();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Display the frame<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="AddingtheSlidePanelClass"><B>Adding the </B><TT><B><FONT SIZE=4 FACE="Courier">SlidePanel</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT><FONT FACE="Courier">SlidePanel</FONT></TT> class added
in the <TT><FONT FACE="Courier">SlideShow()</FONT></TT> method
is implemented next. This class defines the main viewing area
for the application. The viewing area is divided into two parts:
the picture and the text. This parallels the two objects that
are placed in the <TT><FONT FACE="Courier">SlidePanel</FONT></TT>
class.
<P>
The two parts must change in coordination with one another. Therefore,
these objects are protected in <TT><FONT FACE="Courier">SlidePanel</FONT></TT>,
and all events that modify the contents of these objects must
occur through <TT><FONT FACE="Courier">SlidePanel</FONT></TT>.
This becomes important when you look at the code for the controls.
The declaration and constructor for <TT><FONT FACE="Courier">SlidePanel</FONT></TT>
appear in Listing 18.5.
<HR>
<BLOCKQUOTE>
<B>Listing 18.5. The </B><TT><B><FONT FACE="Courier">SlidePanel</FONT></B></TT><B>
constructor.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* SlidePanel class holds objects participating in the slideshow
<BR>
&nbsp;* Objects are arrays displaying one at a time to the user
<BR>
&nbsp;*/<BR>
class SlidePanel extends Panel {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected SlideCanvas displayCanvas;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Canvas to display .gifs<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected SlideText displayText;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Text area to display text<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Constructor adds objects to the
panel<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Gives each object the filename
to get load its array from<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public SlidePanel(String ShowName)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout(new
BorderLayout());<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;Center&quot;,displayCanvas
= new SlideCanvas(ShowName));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;South&quot;,displayText
= new SlideText(ShowName));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
All the features that act on the display in the main viewing area
must use methods defined in the object providing the main display.
For custom controls, the name of the object providing this display
is passed to each control. For menu options, the main event handler
is used to activate the cor-rect method.
<P>
In the <TT><FONT FACE="Courier">SlidePanel</FONT></TT> object,
you define methods for each of the functions listed in the design.
The body of these methods consists of calling similar methods
for each of the two objects on the display. (See Listing 18.6.)
These methods will be implemented when you define the <TT><FONT FACE="Courier">SlideCanvas</FONT></TT>
and <TT><FONT FACE="Courier">SlideText</FONT></TT> objects.
<HR>
<BLOCKQUOTE>
<B>Listing 18.6. Methods for the </B><TT><B><FONT FACE="Courier">SlidePanel()</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void ShowNextSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.ShowNextSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.ShowNextText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowPrevSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.ShowPrevSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.ShowPrevText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowFirstSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.ShowFirstSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.ShowFirstText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowLastSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.ShowLastSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.ShowLastText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void NoSlides(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.NoSlides();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowSlides(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.ShowSlides();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void NoText(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.NoText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowText(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.ShowText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void LoadShow(String ShowName)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.LoadShow(ShowName);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.LoadShow(ShowName);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="AddingtheSlideCanvasObject"><B>Adding the </B><TT><B><FONT SIZE=4 FACE="Courier">SlideCanvas</FONT></B></TT><B><FONT SIZE=4>
Object</FONT></B></A></H3>
<P>
Create the <TT><FONT FACE="Courier">SlideCanvas</FONT></TT> class
used to display images first. The information contained in this
object is held in variables that are implemented as protected.
The complete declaration appears as
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* SlideCanvas is an extension of Canvas<BR>
&nbsp;* It provides a means to display slides to the user<BR>
&nbsp;*/<BR>
class SlideCanvas extends Canvas {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected Image im[] = new Image[20];//Array
of Images to display<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected int NumSlides;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Number of images in the array<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected int CurrentSlide;&nbsp;&nbsp;&nbsp;&nbsp;//
Number of image currently displayed<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected boolean showslide;&nbsp;&nbsp;&nbsp;//
False to turn off display</FONT></TT>
</BLOCKQUOTE>
<P>
The constructor for this class takes one parameter: the name of
the file containing the list of images the show will display.
The constructor for the class is just three lines: the first calls
the constructor for the <TT><FONT FACE="Courier">Canvas</FONT></TT>
class; the second calls the method (described in the &quot;File
I/O&quot; section in this chapter) to load the array from the
given filename; and the final line sets the <TT><FONT FACE="Courier">showslide</FONT></TT>
variable to <TT><FONT FACE="Courier">true</FONT></TT>, indicating
that slides are shown, not hidden, by default. The code for the
constructor is
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public SlideCanvas(String ShowName) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LoadShow(ShowName);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Load internal array<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showslide
= true;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Enable the
display of slides<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
The class draws the image on the screen by overriding the <TT><FONT FACE="Courier">paint()</FONT></TT>
method. The new method will draw a blank rectangle if the display
is currently disabled. Otherwise, it will determine the current
size of the display and draw an appropriately sized image:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void paint(Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rectangle
r = bounds();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(showslide)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
g.drawImage(im[CurrentSlide],50,50,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r.width-100,r.height-100,this);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(Color.lightGray);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.fillRect(0,0,r.width,r.height);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
The access methods needed for these variables are defined in the
&quot;Designing a Real-World Application&quot; section in this
chapter. These methods ensure that an instance of the class is
repainted any time the current slide is altered. Again, you can
see the advantages of protected variables. If the variable containing
the current slide number could be accessed directly, there would
be no guarantee that the slide would be repainted when the current
slide is altered.
<P>
The first access methods are those that enable the user to move
through the slide show. The methods that move forward or backward
one slide must check for the array bounds. If the method encounters
an array boundary, it simply remains on the same slide. The methods
operate by setting a new current slide and then calling <TT><FONT FACE="Courier">repaint()</FONT></TT>
to display the slide, as in the following code fragment:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void ShowNextSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(CurrentSlide &lt; (NumSlides - 1)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentSlide
= CurrentSlide + 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowPrevSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(CurrentSlide &gt; 0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentSlide
= CurrentSlide - 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowFirstSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentSlide
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowLastSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentSlide
= NumSlides - 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
To enable and disable the display of slides, access methods must
be provided for the boolean variable <TT><FONT FACE="Courier">showslide</FONT></TT>.
These methods will change the value of the variable and then force
a repaint of the screen so that the new value becomes effective
immediately:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void NoSlides(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showslide
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowSlides(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showslide
= true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
The last method to be defined for <TT><FONT FACE="Courier">SlideCanvas</FONT></TT>
is the one that loads the array. This code must open the file
specified by the user, read each line from the file, store the
line in the array, close the file, and handle any exceptions.
These functions are shown in the following code:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void LoadShow(String LoadFile)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomAccessFile&nbsp;&nbsp;&nbsp;&nbsp;
ListFile;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String[]
imgFile = new String[20];&nbsp;&nbsp;&nbsp;// name of image to
display<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Loop counter<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Create an array of images and load the images<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i=0;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Open the file<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile
= new RandomAccessFile(LoadFile,&quot;r&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Read until the end of the file is reached<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
while (ListFile.getFilePointer() != ListFile.length() ) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Store each line from the file in an array element<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imgFile[i]
= ListFile.readLine() + &quot;.gif&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Close
the file<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile.close();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Trap any errors which occur while reading the file<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
catch (java.io.IOException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Could
not read from file.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(e);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
<TT><FONT FACE="Courier">RandomAccessFile</FONT></TT> is a class
that implements two different interfaces, <TT><FONT FACE="Courier">DataOutput</FONT></TT>
and <TT><FONT FACE="Courier">DataInput</FONT></TT>. Therefore,
objects that are instances of this class can be used for both
reading and writing. The <TT><FONT FACE="Courier">SlideShow</FONT></TT>
application currently does not need to write to a file. However,
writing to a file in an application works in a manner analogous
to reading.
<P>
This type of file access will handle reading from and writing
to text files. Something different is needed to read an image
file. In applets, the <TT><FONT FACE="Courier">getImage()</FONT></TT>
method is used to get an image from a file or a URL. This method
cannot be used in an application because it loads relative to
the applet's URL. The application does not have a URL, so it needs
another mechanism to load the image.
<P>
For applications, the image can be loaded using the <TT><FONT FACE="Courier">getImage()</FONT></TT>
method from a <TT><FONT FACE="Courier">Toolkit</FONT></TT> object.
To do this, the application first must get the current <TT><FONT FACE="Courier">Toolkit</FONT></TT>
object and then get the image. The <TT><FONT FACE="Courier">getImage()</FONT></TT>
method in the <TT><FONT FACE="Courier">Toolkit</FONT></TT> object
encapsulates all the details of reading the file and storing the
image. The code to load the images for the slide show is
<BLOCKQUOTE>
<TT><FONT FACE="Courier">NumSlides = i;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(i=0; i&lt;NumSlides;i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;im[i]
= getToolkit().getImage(imgFile[i]);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentSlide = 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<H3><A NAME="AddingtheSlideTextObject"><B>Adding the </B><TT><B><FONT SIZE=4 FACE="Courier">SlideText</FONT></B></TT><B><FONT SIZE=4>
Object</FONT></B></A></H3>
<P>
The <TT><FONT FACE="Courier">SlideText</FONT></TT> class is similar
to the <TT><FONT FACE="Courier">SlideCanvas</FONT></TT> class
except that it contains an array of text strings. The modified
declaration appears as
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* SlideText is an extension of TextArea<BR>
&nbsp;* It provides a means to display text descriptions to the
user<BR>
&nbsp;*/<BR>
class SlideText extends TextArea {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected String str[] = new String[20];//Array
of Strings to display<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected int NumTexts;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Number of strings in the array<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected int CurrentText;&nbsp;&nbsp;&nbsp;&nbsp;//
Number of strings currently displayed<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected boolean showtext;&nbsp;&nbsp;&nbsp;//
True if text is not being displayed</FONT></TT>
</BLOCKQUOTE>
<P>
The constructor for the <TT><FONT FACE="Courier">SlideText</FONT></TT>
class is just a little longer than the constructor for the <TT><FONT FACE="Courier">SlideCanvas</FONT></TT>
class. In addition to the tasks performed in the constructor for
<TT><FONT FACE="Courier">SlideCanvas</FONT></TT>, <TT><FONT FACE="Courier">SlideText</FONT></TT>
must set its <TT><FONT FACE="Courier">Editable</FONT></TT> attribute
to <TT><FONT FACE="Courier">false</FONT></TT> to prevent viewers
from modifying the slide descriptions:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public SlideText(String ShowName) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LoadShow(ShowName);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Load internal array<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setEditable(false);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Prevent editing of text<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showtext
= true;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Enable
the display of text<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
There is no <TT><FONT FACE="Courier">paint()</FONT></TT> method
for text classes. The normal <TT><FONT FACE="Courier">setText()</FONT></TT>
method takes a string as a parameter and sets the text of the
object to that string. To prevent another object from accidentally
setting the display text, you override this method and call a
new implementation of <TT><FONT FACE="Courier">setText()</FONT></TT>
that does not require a parameter, as in the following code fragment:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">// Override normal setText so text can
not be reset accidentally<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void setText(String str){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
The new implementation of <TT><FONT FACE="Courier">setText()</FONT></TT>
will set the text based on the current text element in the array.
Therefore, you do not need a parameter. If text is not being displayed,
set the text to an empty string, which must be done using the
version of <TT><FONT FACE="Courier">setText()</FONT></TT> in the
superclass because <TT><FONT FACE="Courier">setText(String)</FONT></TT>
was overridden for this class. The new implementation of <TT><FONT FACE="Courier">setText</FONT></TT>
is
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setText(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(showtext)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
super.setText(str[CurrentText]);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.setText(&quot;&quot;);
<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">SlideText</FONT></TT> class is responsible
for providing the same access methods as the <TT><FONT FACE="Courier">SlideCanvas</FONT></TT>
class. These methods are similar to those implemented for <TT><FONT FACE="Courier">SlideCanvas</FONT></TT>.
Note that the array boundaries must be checked in these methods
as well:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void ShowNextText() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(CurrentText &lt; (NumTexts - 1)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentText
= CurrentText + 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowPrevText() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(CurrentText &gt; 0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
CurrentText = CurrentText - 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
setText();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowFirstText() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentText
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowLastText() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentText
= NumTexts - 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
Hiding and displaying text is done by providing accessor methods
for the boolean variable. Instead of forcing a repaint of the
screen to cause the new value to become effective, these methods
call <TT><FONT FACE="Courier">setText()</FONT></TT> directly:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void NoText(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showtext
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowText(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showtext
= true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">load</FONT></TT> method follows the
same algorithm as that for <TT><FONT FACE="Courier">SlideCanvas</FONT></TT>;
however, a new method is implemented to provide for reading an
entire file into an element in the array of text strings. This
method, called <TT><FONT FACE="Courier">getText</FONT></TT>, will
make use of the <TT><FONT FACE="Courier">RandomAccessFile</FONT></TT>
class in a manner similar to how filenames are read. However,
instead of reading a line looking for a null terminator, this
method will read the entire file into a string. The new method
appears as
<BLOCKQUOTE>
<TT><FONT FACE="Courier">// Read text for an item from a file
<BR>
&nbsp;&nbsp;&nbsp;&nbsp; protected String getText(String LoadFile){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomAccessFile&nbsp;&nbsp;&nbsp;&nbsp;
ListFile;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte
b[] = new byte[1024];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
numbytes;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile
= new RandomAccessFile(LoadFile,&quot;r&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numbytes
= (int)ListFile.length();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile.read(b,0,numbytes);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile.close();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
catch (java.io.IOException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Could
not read from file.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(e);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
(new String(b,0));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
Using this method, the <TT><FONT FACE="Courier">load</FONT></TT>
method for the <TT><FONT FACE="Courier">SlideText</FONT></TT>
class can be implemented as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">// Load the text array based on filename
in the LoadFile<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void LoadShow(String LoadFile)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomAccessFile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String[]
strFile = new String[20];&nbsp;&nbsp;&nbsp;// name of image to
display<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Loop counter<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Create an array of strings and load the strings<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i=0;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile
= new RandomAccessFile(LoadFile,&quot;r&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while
(ListFile.getFilePointer() != ListFile.length() ) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strFile[i]
= ListFile.readLine() + &quot;.txt&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile.close();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
catch (java.io.IOException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Could
not read from file.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(e);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumTexts
= i;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(i=0; i&lt;NumTexts;i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[i]
= getText(strFile[i]);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentText
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<H3><A NAME="AddingtheControls"><B>Adding the Controls</B></A>
</H3>
<P>
Now that you can display images and text, you can turn your attention
to creating the controls to navigate through the show. The controls
are created using four buttons. These buttons are then grouped
into a single object that is an extension of the <TT><FONT FACE="Courier">Panel</FONT></TT>
class.
<P>
The controls must reference a particular <TT><FONT FACE="Courier">SlidePanel</FONT></TT>
where they will cause slides to change. Therefore, the constructor
for the controls takes an instance of <TT><FONT FACE="Courier">SlidePanel</FONT></TT>
as a parameter. This value is stored as an internal variable and
is used by the event handler for this class. The declaration and
constructor for the controls appear as
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* Control bar for moving through a slide show<BR>
&nbsp;*/<BR>
class ShowControls extends Panel {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static SlidePanel ss;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Panel controls are attached to<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Constructor requires a SlidePanel
to which the<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// controls are attached<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public ShowControls(SlidePanel theShow)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss
= theShow;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout(new
FlowLayout(FlowLayout.CENTER));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Button(&quot;|&lt;&lt;&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Button(&quot;&lt;&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Button(&quot;&gt;&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Button(&quot;&gt;&gt;|&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
When the user interacts with the controls, an event is triggered.
The controls must react to this event and perform the desired
operation. The <TT><FONT FACE="Courier">action()</FONT></TT> method
for the controls is triggered by the runtime environment when
an action event, such as pressing a button, takes place on the
control panel. This method determines whether a button was pressed
by examining the event target. If the event target is not a button,
it calls the action method for its superclass, which enables the
runtime environment to react to other defined actions:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean action(Event evt, Object
arg) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.target instanceof Button) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handleButton((String)arg);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else return super.action(evt,arg);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
When the action method determines that a button is the target
of the action, it calls the <TT><FONT FACE="Courier">handleButton</FONT></TT>
method. This method determines which button is pressed and calls
an appropriate method in the <TT><FONT FACE="Courier">SlidePanel</FONT></TT>
that this object controls:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">// Determine which button was pressed
and act accordingly<BR>
// Actions will refer to the Slide panel to which the<BR>
// control bar is attached<BR>
public void handleButton(String bname) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (bname.equals(&quot;&gt;&quot;))
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.ShowNextSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (bname.equals(&quot;&lt;&quot;))
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.ShowPrevSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (bname.equals(&quot;|&lt;&lt;&quot;))
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.ShowFirstSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (bname.equals(&quot;&gt;&gt;|&quot;))
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.ShowLastSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<H3><A NAME="AddingtheDialogBoxes"><B>Adding the Dialog Boxes</B></A>
</H3>
<P>
Dialog boxes in their general form are introduced in <A HREF="ch17.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch17.htm" >Chapter 17</A>.
This section shows you how to implement the three dialog boxes
that appear in response to the Load, Help Topics, and About SlideShow
menu items.
<H4><B>The File Dialog Box</B></H4>
<P>
The File dialog box is a specific kind of dialog box. Implemented
in the <TT><FONT FACE="Courier">java.awt</FONT></TT> package,
these boxes enable the user to select a particular file located
on his or her system. By default, the dialog box displays the
listing of the directory where the application is launched. However,
the directory the dialog box displays can be modified by the application.
<P>
The dialog box can be supplied with a default filename so that
it will display only files that match that filename. If the filename
contains wildcards, all files matching the expression are displayed.
In this manner, the File dialog box can be used to display only
files of a certain type.
<P>
The dialog box is implemented so that its appearance depends on
the operating system on which the application is running. This
means the user has the look and feel of a familiar platform, but
the application has all the advantages of platform independence.
Thankfully, the difference in appearance of the dialog box is
transparent to the programmer.
<P>
The constructor for the File dialog box is passed three parameters:
the current frame as the parent of the new window; a title for
the dialog box, in this case Get New Slide Show; and an indicator
that this is an Open dialog box, not a Save dialog box. For the
<TT><FONT FACE="Courier">SlideShow</FONT></TT> application, the
call to the file dialog box is
<BLOCKQUOTE>
<TT><FONT FACE="Courier">new FileDialog((Frame) this,&quot;Get
New Slide Show&quot;,FileDialog.LOAD);</FONT></TT>
</BLOCKQUOTE>
<P>
The dialog box as it appears on a Windows system is shown in Figure
18.3.
<P>
<A HREF="f18-3.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f18-3.gif" ><B>Figure 18.3 : </B><I>A file dialog box under Windows.</I></A>
<H4><B>The </B><TT><B><FONT FACE="Courier">HelpBox</FONT></B></TT><B>
Class</B></H4>
<P>
The Help dialog box is designed as an extension to the <TT><FONT FACE="Courier">Panel</FONT></TT>
class and is constructed with a grid layout. Each of the help
items is added as a label. The constructor for the dialog box
takes care of resizing the box, but does not actually display
it. The method that creates the dialog box will determine when
to display it.
<P>
The OK button specified in the design is added at the bottom of
the dialog box. The OK button is placed in its own panel so that
it is displayed in a standard button shape instead of occupying
the entire width of the grid item where it is displayed. Listing
18.7 shows the code for the <TT><FONT FACE="Courier">HelpBox</FONT></TT>
constructor.
<HR>
<BLOCKQUOTE>
<B>Listing 18.7. Creating the Help dialog box.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* Basic Help window to explain the slide controls<BR>
&nbsp;*/<BR>
class HelpBox extends Dialog<BR>
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public HelpBox(Frame parent)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(parent,
&quot;Help Topics&quot;, true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout(new
GridLayout(6,1));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Label(&quot;The controls work as follows:&quot;,Label.LEFT));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Label(&quot;&nbsp;&nbsp;&nbsp;&nbsp;|&lt;&lt;&nbsp;&nbsp;&nbsp;&nbsp;returns
to the first slide&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Label.LEFT));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Label(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;returns
to the previous slide&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Label.LEFT));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Label(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;advances
to the next slide&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Label.LEFT));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Label(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;|&nbsp;&nbsp;&nbsp;&nbsp;advances
to the last slide&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Label.LEFT));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Panel
pp = new Panel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pp.add(new
Button(&quot;OK&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(pp);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resize(250,300);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Figure 18.4 shows the Help box for the <TT><FONT FACE="Courier">SlideShow</FONT></TT>
application.
<P>
<A HREF="f18-4.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f18-4.gif" ><B>Figure 18.4 : </B><I>The Help box for SlideShow.</I></A>
<P>
The dialog box must have an event handler to respond to user events
in the dialog box. The user can click the OK button to close the
dialog box or close the window where the dialog box is displayed.
In either case, the application will dispose of the dialog box,
indicating that it is done with the resource the object used.
The event handler appears in Listing 18.8.
<HR>
<BLOCKQUOTE>
<B>Listing 18.8. The </B><TT><B><FONT FACE="Courier">HelpBox()</FONT></B></TT><B>
event handler.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Event
handler closes the window if the user<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// hits the OK button or the window
close button<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleEvent(Event
evt) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.id == Event.WINDOW_DESTROY &amp;&amp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evt.target
instanceof HelpBox) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if(&quot;OK&quot;.equals(evt.arg)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>The </B><TT><B><FONT FACE="Courier">AboutBox</FONT></B></TT><B>
Class</B></H4>
<P>
The About box is similar to the Help Topics dialog box. However,
because it has different contents, it uses a different layout.
At the center of the panel, a grid layout is used to display the
authoring information. The OK button goes in its own panel in
the South portion of the layout. The entire listing for the <TT><FONT FACE="Courier">AboutBox</FONT></TT>
class is shown in Listing 18.9.
<HR>
<BLOCKQUOTE>
<B>Listing 18.9. Creating the About dialog box.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* Creates an about box for the Slideshow<BR>
&nbsp;*/<BR>
class AboutBox extends Dialog<BR>
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public AboutBox(Frame parent)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(parent,
&quot;About SlideShow&quot;, true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout(new
GridLayout(3,1));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Label(&quot;SlideShow&quot;,Label.CENTER));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Label(&quot;by Peter Norton and William Stanek&quot;,Label.CENTER));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Panel
pp = new Panel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pp.add(new
Button(&quot;OK&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;South&quot;,pp);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resize(250,200);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Event handler closes the window
if the user<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// hits the OK button or the window
close button<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleEvent(Event
evt) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.id == Event.WINDOW_DESTROY &amp;&amp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evt.target
instanceof AboutBox) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if(&quot;OK&quot;.equals(evt.arg)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Figure 18.5 shows the About box for the <TT><FONT FACE="Courier">SlideShow</FONT></TT>
application.
<P>
<A HREF="f18-5.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f18-5.gif" ><B>Figure 18.5 : </B><I>The About box for SlideShow.</I></A>
<H2><A NAME="TheCompleteProject"><B><FONT SIZE=5 COLOR=#Ff0000>The
Complete Project</FONT></B></A></H2>
<P>
To test the application, you must be able to run the application
correctly. The stand-alone application can be run from the command
line using the command
<BLOCKQUOTE>
<TT><FONT FACE="Courier">java SlideShow filename.txt</FONT></TT>
</BLOCKQUOTE>
<P>
where <TT><FONT FACE="Courier">filename.txt</FONT></TT> is the
name of the file containing the list of slides to display. This
file can be created using a standard text editor, provided that
null characters are inserted between the filenames. The same type
of text editor can be used to create the descriptions supplied
with each slide.
<P>
For example, you could create a slide show file named <TT><FONT FACE="Courier">Hawaii.txt</FONT></TT>
containing a list of pictures from your vacation to Hawaii. The
pictures are named
<UL>
<LI><TT><FONT FACE="Courier">Mountain1.gif</FONT></TT>
<LI><TT><FONT FACE="Courier">Mountain2.gif</FONT></TT>
<LI><TT><FONT FACE="Courier">Beach1.gif</FONT></TT>
<LI><TT><FONT FACE="Courier">Beach2.gif</FONT></TT>
<LI><TT><FONT FACE="Courier">Luau1.gif</FONT></TT>
<LI><TT><FONT FACE="Courier">Luau2.gif</FONT></TT>
</UL>
<P>
The file <TT><FONT FACE="Courier">Hawaii.txt</FONT></TT> would
appear as
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Mountain1&#164;Mountain2&#164;Beach1&#164;Beach2&#164;Luau1&#164;Luau2</FONT></TT>
</BLOCKQUOTE>
<P>
where the symbol <FONT FACE="ASCII Font">&#164;</FONT> represents
the null character. If you have difficulty including the null
in a text editor, you can create a simple Java program to read
filenames from the command line and insert them in a file. After
each filename, append the string <TT><FONT FACE="Courier">\n</FONT></TT>
to get the null character. This allows you to use the simple <TT><FONT FACE="Courier">readline()</FONT></TT>
method in the program rather than adding code to parse the file.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Tip</B></TD></TR>
<TR><TD WIDTH=580>
<BLOCKQUOTE>
The ASCII code for the null character is <TT><FONT FACE="Courier">010</FONT></TT>. In Microsoft Word, you can generate the null character that Java expects as an end-of-line marker by holding the Alt key and typing <TT><FONT FACE="Courier">010</FONT></TT>. 
Unfortunately, when Word saves a text file, it puts an extra carriage return at the end of the file. Although <TT><FONT FACE="Courier">SlideShow</FONT></TT> will run, it will look for an extra file and generate an error. <A HREF="ch19.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch19.htm" >Chapter 19</A>, 
&quot;Application Upgrades,&quot; demonstrates how to create a long-term fix for this problem by building slide shows within the application.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
To continue the Hawaiian vacation slide show, you need six text
files with the names <TT><FONT FACE="Courier">Mountain1.txt</FONT></TT>,
<TT><FONT FACE="Courier">Mountain2.txt</FONT></TT>, <TT><FONT FACE="Courier">Beach1.txt</FONT></TT>,
and so on. These files will explain more about each picture. For
example, <TT><FONT FACE="Courier">Mountain1.txt</FONT></TT> might
read
<BLOCKQUOTE>
View looking south from Ka Ala on the leeward coast of Oahu. Taken
at 3 p.m. after an enjoyable all-day hike.
</BLOCKQUOTE>
<P>
Text files such as these help you to remember more about each
picture. They can be particularly helpful if you are going to
keep the pictures for any length of time.
<P>
The finished application is shown in Listing 18.10. This example
has demonstrated the possibilities of Java applications. Now you
should be able to put the techniques discussed in this chapter
to use to build original Java programs.
<P>
After working through this example, try to modify the application
to increase your experience with Java. For example, you could
rewrite the <TT><FONT FACE="Courier">Aboutbox</FONT></TT> class
so that the constructor takes two arguments, the title and the
author. The class would then know exactly how to display the information
and could be reused in other applications.
<P>
You could use a similar technique to create standard Help boxes.
The argument to the constructor could be a string or list of strings
containing the information to be displayed in the help window.
These types of utilities are in the process of being developed
for Java.
<HR>
<BLOCKQUOTE>
<B>Listing 18.10. The complete </B><TT><B><FONT FACE="Courier">SlideShow</FONT></B></TT><B>
application.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
import java.applet.*;<BR>
import java.io.RandomAccessFile;<BR>
<BR>
/**<BR>
&nbsp;* Creates Window with panel for the slideshow<BR>
&nbsp;* plus a Menu and controls for the SlideShow<BR>
&nbsp;*/<BR>
public class SlideShow extends Frame {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected MenuBar mbar;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Menu for the slideshow<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected SlidePanel displayPanel;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Panel to display the show<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public SlideShow(String args) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setBackground(Color.lightGray);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout(new
BorderLayout());<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;Center&quot;,displayPanel
= new SlidePanel(args));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;South&quot;,new
ShowControls(displayPanel));<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InitializeMenu();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setMenuBar(mbar);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Creates the menu and attaches
it to the MenuBar<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private void InitializeMenu()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mbar
= new MenuBar();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Menu
m = new Menu(&quot;File&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Load...&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.addSeparator();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Exit&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mbar.add(m);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m
= new Menu(&quot;Display&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Forward&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Back&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Beginning&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;End&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.addSeparator();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
CheckboxMenuItem(&quot;No Text&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
CheckboxMenuItem(&quot;No Slides&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mbar.add(m);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m
= new Menu(&quot;Help&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Help Topics&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.addSeparator();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;About SlideShow&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mbar.add(m);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Event handler responds to events
in the window and<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// events on the menu<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleEvent(Event
evt) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.id == Event.WINDOW_DESTROY &amp;&amp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evt.target
instanceof SlideShow)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if(evt.target instanceof CheckboxMenuItem) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.arg.equals(&quot;No Text&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(((CheckboxMenuItem) evt.target).getState() == true)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.NoText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.ShowText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;No Slides&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(((CheckboxMenuItem) evt.target).getState() == true)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.NoSlides();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.ShowSlides();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if(evt.target instanceof MenuItem) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.arg.equals(&quot;Load...&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
FileName;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileDialog
fd =<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new FileDialog((Frame) this,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Get
New Slide Show&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileDialog.LOAD);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName
= fd. getDirectory() + fd.getFile();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.LoadShow(FileName);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Forward&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.ShowNextSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Back&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.ShowPrevSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Beginning&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.ShowFirstSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;End&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.ShowLastSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Exit&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;About SlideShow&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AboutBox
ab = new AboutBox(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ab.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Help Topics&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HelpBox
ab = new HelpBox(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ab.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
super.handleEvent(evt);&nbsp;&nbsp;&nbsp;&nbsp; // Let parent
handle event<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// main method used to start application
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String args[]){
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Verify that there is a filename to attempt to load show<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(args.length &lt;= 0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Usage:
java SlideShow filename.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Create instance of this object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SlideShow
ss = new SlideShow(args[0]);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.setTitle(&quot;Slide
Show&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Set the title of the frame<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.pack();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Pack components<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//resize
frame to current window size<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dimension
d;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d
= Toolkit.getDefaultToolkit().getScreenSize();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.resize(d.width,
d.height);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.show();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Display the frame<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}<BR>
<BR>
/**<BR>
&nbsp;* SlidePanel class holds objects participating in the slideshow
<BR>
&nbsp;* Objects are arrays displaying one at a time to the user
<BR>
&nbsp;*/<BR>
class SlidePanel extends Panel {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected SlideCanvas displayCanvas;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Canvas to display .gifs<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected SlideText displayText;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Text area to display text<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Constructor adds objects to the
panel<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Gives each object the filename
to get load its array from<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public SlidePanel(String ShowName)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout(new
BorderLayout());<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;Center&quot;,displayCanvas
= new SlideCanvas(ShowName));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;South&quot;,displayText
= new SlideText(ShowName));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void NoText(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.NoText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowText(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.ShowText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void NoSlides(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.NoSlides();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowSlides(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.ShowSlides();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void LoadShow(String ShowName)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.LoadShow(ShowName);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.LoadShow(ShowName);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowNextSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.ShowNextSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.ShowNextText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowPrevSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.ShowPrevSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.ShowPrevText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowFirstSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.ShowFirstSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.ShowFirstText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowLastSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.ShowLastSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.ShowLastText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}<BR>
<BR>
/**<BR>
&nbsp;* SlideCanvas is an extension of Canvas<BR>
&nbsp;* It provides a means to display slides to the user<BR>
&nbsp;*/<BR>
class SlideCanvas extends Canvas {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected Image im[] = new Image[20];&nbsp;&nbsp;//
Array of Images to display<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected int NumSlides;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Number of images in the array<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected int CurrentSlide;&nbsp;&nbsp;&nbsp;//
Number of image currently displayed<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected boolean showslide;&nbsp;&nbsp;//
False to turn off display<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public SlideCanvas(String ShowName)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LoadShow(ShowName);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showslide
= true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void NoSlides(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showslide
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowSlides(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showslide
= true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void paint(Graphics g) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rectangle
r = bounds();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(showslide)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawImage(im[CurrentSlide],50,50,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r.width-100,r.height-100,this);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(Color.lightGray);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.fillRect(0,0,r.width,r.height);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowNextSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(CurrentSlide &lt; (NumSlides - 1)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentSlide
= CurrentSlide + 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowPrevSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(CurrentSlide &gt; 0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentSlide
= CurrentSlide - 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowFirstSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentSlide
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowLastSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentSlide
= NumSlides - 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void LoadShow(String LoadFile)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomAccessFile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
name of image to display<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String[]
imgFile = new String[20];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Loop counter<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Create an array of images and load the images<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i=0;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile
= new RandomAccessFile(LoadFile,&quot;r&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while
(ListFile.getFilePointer() != ListFile.length() ) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imgFile[i]
= ListFile.readLine() + &quot;.gif&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile.close();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
catch (java.io.IOException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Could
not read from file.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(e);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumSlides
= i;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(i=0; i&lt;NumSlides;i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;im[i]
= getToolkit().getImage(imgFile[i]);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentSlide = 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}<BR>
<BR>
/**<BR>
&nbsp;* SlideText is an extension of TextArea<BR>
&nbsp;* It provides a means to display text descriptions to the
user<BR>
&nbsp;*/<BR>
class SlideText extends TextArea {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected String str[] = new String[20];//Array
of Strings to display<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected int NumTexts;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Number of strings in the array<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected int CurrentText;&nbsp;&nbsp;&nbsp;&nbsp;//
Number of string currently displayed<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected boolean showtext;&nbsp;&nbsp;&nbsp;//
True if text is not being displayed<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public SlideText(String ShowName)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LoadShow(ShowName);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setEditable(false);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showtext
= true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void NoText(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showtext
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowText(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showtext
= true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Override normal setText so text
can not be reset accidentally<BR>
&nbsp;&nbsp;&nbsp;&nbsp; public void setText(String str){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void setText(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(showtext)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.setText(str[CurrentText]);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.setText(&quot;&quot;);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowNextText() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(CurrentText &lt; (NumTexts - 1)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentText
= CurrentText + 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowPrevText() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(CurrentText &gt; 0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentText
= CurrentText - 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp; public void ShowFirstText() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentText
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowLastText() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentText
= NumTexts - 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Load the text array based on
filename in the LoadFile<BR>
&nbsp;&nbsp;&nbsp;&nbsp; public void LoadShow(String LoadFile)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomAccessFile&nbsp;&nbsp;&nbsp;&nbsp;
ListFile;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String[]
strFile = new String[20];&nbsp;&nbsp;&nbsp;// name of image to
display<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Loop counter<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Create an array of strings and load the strings<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i=0;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile
= new RandomAccessFile(LoadFile,&quot;r&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while
(ListFile.getFilePointer() != ListFile.length() ) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strFile[i]
= ListFile.readLine() + &quot;.txt&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile.close();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
catch (java.io.IOException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Could
not read from file.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(e);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumTexts
= i;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(i=0; i&lt;NumTexts;i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[i]
= getText(strFile[i]);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentText
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Read text for an item from a
file<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected String getText(String
LoadFile){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomAccessFile&nbsp;&nbsp;&nbsp;&nbsp;
ListFile;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte
b[] = new byte[1024];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
numbytes;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile
= new RandomAccessFile(LoadFile,&quot;r&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numbytes
= (int)ListFile.length();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile.read(b,0,numbytes);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile.close();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
catch (java.io.IOException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Could
not read from file.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(e);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
(new String(b,0));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}<BR>
<BR>
/**<BR>
&nbsp;* Control bar for moving through a slide show<BR>
&nbsp;*/<BR>
class ShowControls extends Panel {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static SlidePanel ss;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Panel controls are attached to<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Constructor requires a SlidePanel
to which the<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// controls are attached<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public ShowControls(SlidePanel theShow)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss
= theShow;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout(new
FlowLayout(FlowLayout.CENTER));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Button(&quot;|&lt;&lt;&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Button(&quot;&lt;&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Button(&quot;&gt;&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Button(&quot;&gt;&gt;|&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Determine which button was pressed
and act accordingly<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Actions will refer to the Slide
panel to which the<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// control bar is attached<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void handleButton(String
bname) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(bname.equals(&quot;&gt;&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.ShowNextSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (bname.equals(&quot;&lt;&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.ShowPrevSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (bname.equals(&quot;|&lt;&lt;&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.ShowFirstSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (bname.equals(&quot;&gt;&gt;|&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.ShowLastSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean action(Event evt,
Object arg) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.target instanceof Button) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handleButton((String)arg);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else return super.action(evt,arg);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}<BR>
<BR>
/**<BR>
&nbsp;* Creates an about box for the Slideshow<BR>
&nbsp;*/<BR>
class AboutBox extends Dialog<BR>
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public AboutBox(Frame parent)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(parent,
&quot;About SlideShow&quot;, true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout(new
GridLayout(3,1));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Label(&quot;SlideShow&quot;,Label.CENTER));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Label(&quot;by Peter Norton and William Stanek&quot;,Label.CENTER));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Panel
pp = new Panel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pp.add(new
Button(&quot;OK&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;South&quot;,pp);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resize(250,200);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Event handler closes the window
if the user<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// hits the OK button or the window
close button<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleEvent(Event
evt) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if
(evt.id == Event.WINDOW_DESTROY &amp;&amp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evt.target
instanceof AboutBox) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
dispose();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if(&quot;OK&quot;.equals(evt.arg)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}<BR>
<BR>
/**<BR>
&nbsp;* Basic Help window to explain the slide controls<BR>
&nbsp;*/<BR>
class HelpBox extends Dialog<BR>
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public HelpBox(Frame parent)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(parent,
&quot;Help Topics&quot;, true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout(new
GridLayout(6,1));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Label(&quot;The controls work as follows:&quot;,Label.LEFT));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Label(&quot;&nbsp;&nbsp;&nbsp;&nbsp;|&lt;&lt;&nbsp;&nbsp;&nbsp;&nbsp;returns
to the first slide&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Label.LEFT));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Label(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;returns
to the previous slide&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Label.LEFT));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Label(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;advances
to the next slide&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Label.LEFT));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Label(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;|&nbsp;&nbsp;&nbsp;&nbsp;advances
to the last slide&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Label.LEFT));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Panel
pp = new Panel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pp.add(new
Button(&quot;OK&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(pp);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resize(250,300);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Event handler closes the window
if the user<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// hits the OK button or the window
close button<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleEvent(Event
evt) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.id == Event.WINDOW_DESTROY &amp;&amp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evt.target
instanceof HelpBox) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if(&quot;OK&quot;.equals(evt.arg)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H2><A NAME="TestingandDebugging"><B><FONT SIZE=5 COLOR=#Ff0000>Testing
and Debugging</FONT></B></A></H2>
<P>
Although you did not develop a test plan for the simple application
created in <A HREF="ch17.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch17.htm" >Chapter 17</A>, you should do so
for this more complex application. The test plan is written using
the components stated in the design. The overall question is,
&quot;Does the application perform as expected?&quot;
<P>
The following questions are related to the main frame of the application:
<UL>
<LI>Does the frame containing the application work as expected?
<LI>Does the application start as expected?
<LI>Does the application start and display a slide with text?
<LI>Does the application close when the user presses the Close
button on the frame?
<LI>Does the application resize when the user presses the resize
buttons on the frame?
</UL>
<P>
Next there are some basic questions about the appearance of the
application:
<UL>
<LI>Does each slide appear?
<LI>Does the text for each slide appear?
<LI>Are the controls visible?
<LI>Is the menu present?
</UL>
<P>
The following questions relate to the menu. Although some menu
items are similar, it is important to test each one individually.
The purpose of testing is to verify how the application will appear
to the user. Therefore, be sure to verify each of the following
items:
<UL>
<LI>Does the Exit option on the menu shut down the application?
<LI>Does the Load option on the menu work?
<LI>Does the File dialog box open?
<LI>When a show is selected in the File dialog box, is it displayed
to the user?
<LI>If the user cancels in the File dialog box, does the same
slide show remain?
<LI>Does the About box appear when the About menu item is selected?
<LI>Does the Help box appear when the Help Topics menu item is
selected?
<LI>Does the Forward menu item move to the next slide in the show?
<LI>Does the Backward menu item move to the previous item in the
show?
<LI>Does the Beginning menu item move to the first slide in the
show?
<LI>Does the End menu item move to the last slide in the show?
<LI>Does the No Text menu cause the text to disappear when it
is selected?
<LI>Is the No Text menu item checked after it has been selected?
<LI>Does selecting the No Text menu item a second time cause the
text to reappear?
<LI>After the No Text menu item is selected a second time, is
the checkmark removed from the menu item?
<LI>Does the No Slides menu cause the slide to disappear when
it is selected?
<LI>Is the No Slides menu item checked after it has been selected?
<LI>Does selecting the No Slides menu item a second time cause
the slide to reappear?
<LI>After the No Slides menu item is selected a second time, is
the checkmark removed from the menu item?
</UL>
<P>
In addition to testing that the menu displays the Help and About
windows, there are a few specific questions pertaining to the
windows themselves:
<UL>
<LI>Is all the text visible when the Help window is displayed?
<LI>Does the Help window close when the user presses the OK button?
<LI>Does the Help window close when the user presses the Close
button on its frame?
<LI>Is all the text visible when the About window is displayed?
<LI>Does the About window close when the user presses the OK button?
<LI>Does the About window close when the user presses the Close
button on its frame?
</UL>
<P>
Specific tests are also needed for the controls. This may seem
redundant because you have tested the methods during the menu
test; however, it verifies that each control is connected to the
correct method and is using the method correctly. Here are some
of the tests you would perform for the <TT><FONT FACE="Courier">SlideShow</FONT></TT>
application:
<UL>
<LI>Does the control marked &gt;&gt;| move to the last slide in
the show?
<LI>Does the control marked |&lt;&lt; move to the first slide
in the show?
<LI>Does the control marked &gt; move forward one slide?
<LI>Does the control marked &lt; move backward one slide?
</UL>
<P>
This completes the test plan. There are tests for each piece of
functionality provided by the application. There are certainly
more questions that could be asked about the functioning of this
application, but these tests are sufficient to verify the decisions
made in the application design and to alert programmers to any
unexpected occurrences.
<H2><A NAME="Summary"><B><FONT SIZE=5 COLOR=#Ff0000>Summary</FONT></B></A>
</H2>
<P>
This chapter demonstrates how to develop a complex, useful application.
It pulls together concepts that are introduced in preceding chapters
and applies them to the development of the application. The chapter
covers several techniques for developing larger applications.
The ideas presented here will assist you as you develop your own
Java applications.
<P>
At this point, you should have an understanding of the Java language
that will enable you to follow the discussions of advanced applications
in Part VII. You also should fully understand the application
presented in this chapter so that you can follow the discussion
in <A HREF="ch19.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch19.htm" >Chapter 19</A>.
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch17.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch17.htm"><IMG SRC="pc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/index.htm"><IMG SRC="hb.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch19.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch19.htm"><IMG 
SRC="nc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>
<HR WIDTH="100%"></P>
<P>


</BODY>
</HTML>