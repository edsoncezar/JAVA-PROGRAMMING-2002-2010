<HTML>

<HEAD>
   <TITLE>Chapter 19 -- Application Upgrades</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<!--Begin JavaScript roadmap code.  If editing downloaded HTML source, delete
 this portion.-->

<script language="JavaScript">
<!--

function TripodShowPopup()
{
   var bName=navigator.appName;
   var bVer=parseInt(navigator.appVersion);
   var now = new Date();
   var popupURL = "/adm/popup/roadmap.shtml?"+"member_name=er4ebus&path=peternortonjavaprograming&client_ip=200.190.100.218&ts=1015337243&ad_type=POPUP&category=net&id=f6422bb55776321ad3b1f5905352632a";
   var popupName = "TripodPopup";

   if (bName=="Netscape" && bVer<=3)
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=614,height=150');
   }
   else
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=604,height=135');
   }
   popup.location = popupURL;
}

if(window.parent==window)
{
   TripodShowPopup();
}

// -->
</script>

<script language="JavaScript1.2">
<!--

function changeOpenFunction()
{
   var original_window_open = window.open;
   function new_open_function(url, name, features, replace)
   {
      if(name != "TripodPopup")
         return original_window_open(url, name, features, replace);
   }
   window.open = new_open_function;
}
var bName = navigator.appName;

if(bName != "Netscape")
   changeOpenFunction();

// -->
</script>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#Ff0000>Chapter 19</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#Ff0000>Application Upgrades</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>

<UL>
<LI><A HREF="#TheSoftwareDevelopmentCycle" >The Software Development Cycle</A>
<UL>
<LI><A HREF="#TheDevelopmentProcess" >The Development Process</A>
<LI><A HREF="#TheMaintenanceProcess" >The Maintenance Process</A>
<LI><A HREF="#SuggestionstoFacilitateModifications" >Suggestions to Facilitate Modifications</A>
</UL>
<LI><A HREF="#ConceptualizingApplicationUpgrades" >Conceptualizing Application Upgrades</A>
<UL>
<LI><A HREF="#TheBuildandSaveCapability" >The Build-and-Save Capability</A>
<LI><A HREF="#ChangingtheStateoftheCheckBoxes" >Changing the State of the Check Boxes</A>
<LI><A HREF="#ReadingMultipleFiles" >Reading Multiple Files</A>
<LI><A HREF="#ContinuousPlay" >Continuous Play</A>
<LI><A HREF="#IncreasingtheNumberofPossibleSlides1" >Increasing the Number of Possible Slides</A>
<LI><A HREF="#FinalTaskList" >Final Task List</A>
</UL>
<LI><A HREF="#DesigningApplicationUpgrades" >Designing Application Upgrades</A>
<UL>
<LI><A HREF="#BuildandSave" >Build-and-Save</A>
<LI><A HREF="#IncreasingtheNumberofPossibleSlides" >Increasing the Number of Possible Slides</A>
<LI><A HREF="#AddingAudio" >Adding Audio</A>
<LI><A HREF="#SummingUptheObjectChanges" >Summing Up the Object Changes</A>
</UL>
<LI><A HREF="#ImplementingApplicationUpgrades" >Implementing Application Upgrades</A>
<UL>
<LI><A HREF="#ChangestoSlideCanvas" >Changes to SlideCanvas</A>
<LI><A HREF="#ChangestoSlideText" >Changes to SlideText</A>
<LI><A HREF="#ChangestoSlidePanel" >Changes to SlidePanel</A>
<LI><A HREF="#ChangestoSlideControls" >Changes to SlideControls</A>
<LI><A HREF="#ChangestoSlideShow" >Changes to SlideShow</A>
</UL>
<LI><A HREF="#TheFinalVersionofSlideShow" >The Final Version of SlideShow</A>
<LI><A HREF="#TestingandDebugging" >Testing and Debugging</A>
<UL>
<LI><A HREF="#TestingtheBuildandSaveCapability" >Testing the Build-and-Save Capability</A>
<LI><A HREF="#TestingtheCheckBoxes" >Testing the Check Boxes</A>
<LI><A HREF="#TestingtheCapabilitytoReadMultiple" >Testing the Capability to Read Multiple Files</A>
<LI><A HREF="#TestingtheContinuousPlayCapability" >Testing the Continuous-Play Capability</A>
<LI><A HREF="#TestingtheNumberofPossibleSlides" >Testing the Number of Possible Slides</A>
</UL>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
Delivered code is not necessarily finished. This chapter covers
application upgrades and maintenance, an important topic because
almost every application continues to evolve after its initial
delivery. The chapter begins with a discussion of the software
life cycle. Then several enhancements are proposed for the <TT><FONT FACE="Courier">SlideShow</FONT></TT>
application developed in <A HREF="ch18.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch18.htm" >Chapter 18</A>, &quot;Using
Java Applications in the Real World.&quot; The remainder of this
chapter walks you through the tasks involved in working on these
upgrades.
<H2><A NAME="TheSoftwareDevelopmentCycle"><B><FONT SIZE=5 COLOR=#Ff0000>The
Software Development Cycle</FONT></B></A></H2>
<P>
Software proceeds through several phases from its first inkling
as an idea in someone's mind to a robust application fully installed
on a user's system. At each stage the concept of the software
is clarified, modified, and expanded. This section begins with
a brief review of the software process.
<H3><A NAME="TheDevelopmentProcess"><B>The Development Process</B></A>
</H3>
<P>
There are many ways in which the software development process
can be broken into stages. For our purposes, consider that software
must be analyzed, designed, implemented, tested, and delivered.
When these steps are completed, additional changes to the application
are considered as upgrades or maintenance.
<P>
During <I>analysis</I>, user needs are defined and clarified.
For Java applications, this means creating a concrete specification
and then expanding it with the details that will be needed to
create a complete design.
<P>
During the <I>design</I> phase, a means of accomplishing the user
needs with appropriate hardware and software is defined. In Java
applications, the conceptualization and design process includes
the definition of the major classes that will be implemented and
any inheritance between those classes.
<P>
<I>Implementation</I> refers to the process of actualizing a design
by producing code. In Java, this means creating the classes and
instances in a manner that can be run by the Java interpreter.
<P>
<I>Testing</I> means verifying that the software as implemented
meets the design criteria and user specifications. Java applications
must have a concrete test plan so the code can be reconciled with
the requirements.
<P>
<I>Delivery</I> means supplying the user with the software. Java
requires that the runtime environment be supplied along with the
classes necessary for the implementation.
<H3><A NAME="TheMaintenanceProcess"><B>The Maintenance Process</B></A>
</H3>
<P>
Software development does not freeze at the moment of delivery.
Usually, software must grow and change over time. These activities
are collectively referred to as <I>software maintenance</I>. Application
upgrades are part of the normal maintenance phase of the software
life cycle. A modification effort is actually a mini project and
must proceed through all the phases of the development process.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Peter's Principle</B></TD></TR>
<TR><TD WIDTH=553>
<BLOCKQUOTE>
Some maintenance projects are more &quot;mini&quot; than others. Small maintenance/upgrade projects may proceed quickly and informally through all the steps in the development process. For example, modifying a program that calculates loan amortization to 
run for a 15-year loan instead of a 30-year loan is probably a minor change. However, modifying the same program to allow for a 30-year adjustable-rate loan with an adjustment cap of 2 percent per year, a lifetime cap of 10 percent, and a user-specified 
yearly index figure is most likely a major change. The second instance requires input and calculations that do not currently exist in the program. The first change merely requires changing some of the variables in the program.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Large maintenance/upgrade projects require careful management
and can include plans, designs, and code as large as the initial
development effort. At times, the upgrade project may be larger
than the original implementation project, yet the upgrade is still
called maintenance because it starts with existing code.
<P>
There are many reasons for software modification and continued
development after the first release. All products evolve, and
software is no exception. Applications may need additional features
not discovered during the original analysis and design. The software
may need fixes to correct problems not discovered during initial
development and testing, or the user's needs or environment may
change over time.
<P>
Applications also can be delivered in increments. In fact, when
projects are delivered in increments, they are easier to manage
and generally more successful than those for which programmers
attempt to deliver the entire project at one milestone. Delivered
applications may need to be altered for reasons besides planned
incremental releases, and the business reasons governing these
changes may affect the modification process.
<P>
Java is a new language, so it is still evolving. As new releases
come out, you may have to recompile or even reimplement code.
Designs may be reworked to take advantage of new features in later
releases. Functionality that is currently not available to users
may become available. Features implemented in other ways may be
incorporated into Java applications-for example, database access
using the Java Database Connectivity API.
<P>
As new utilities are developed both in-house and externally, they
can be incorporated into existing programs. However, portions
of applications may have to be reworked to accommodate or match
the new utilities.
<H3><A NAME="SuggestionstoFacilitateModifications"><B>Suggestions
to Facilitate Modifications</B></A></H3>
<P>
Ease of maintenance is a part of every step in development. If
the analysis is complete, users will find the most important features
in the first release of the software. If the design is well thought
out, modifications will be easier to include. If the code is easy
to read and follow, it will be easier to maintain. Some suggestions
to ease the modification process follow:
<UL>
<LI>Try to group changes and deliver another release rather than
make incremental changes. Although a new release generally will
involve a longer time period than will incremental changes, this
gives you time to gain a better understanding of the proposed
changes and assess their impact on the application. Having an
entire release to work on will help to ensure that the analysis
and design phases are done thoroughly. It is easier to assess
the impact of minor changes if the entire application is being
reviewed for a new release.
<LI>Document all requested changes and the impact of any proposed
change. The documentation process will force you to be more thorough
about your research. The documentation will also help to point
out conflicts among requests by different users. The documentation
should supply an idea of the number of hours needed to complete
the changes. It also should supply the impact of the request on
the existing application and users.
<LI>Have all users involved and in agreement about any modifications
before making changes. If this doesn't happen, you may find yourself
in the &quot;change it and change it back&quot; syndrome. It is
less time-consuming to resolve conflicting opinions while the
ideas for changing the application are still on paper.
<LI>Have users assign a priority to each modification. You can
reduce stress and conflict if you work on the most critical changes
first and save the minor items for later. However, what is critical
and what is minor to you may not be the same as what is critical
or minor for your user. Sometimes screen design and layout are
more critical to users than adding features they are not ready
to use or error checking for errors they seldom encounter.
<LI>Some changes may not be possible given current technology,
time, and budget constraints. Talk the users through the reasons
certain changes are not being implemented. Show them the cost
of attempting to implement the change. Provide any information
about when the tools might be available to enable you to make
the change. For example, at this writing Java does not provide
mechanisms for communicating directly with a database server.
Although custom scripts could be written to enable a Java application
to interact indirectly with a database server, this solution is
very time-consuming. However, several people are at work creating
this functionality. In a few months, it should be possible to
use Java to access a database. So it would probably make sense
to delay for a few months any change involving database connectivity.
<LI>The value of experience with code modification cannot be overemphasized.
It takes time to gain practice in working with conflicting needs
and integrating new code with existing code. The modification
process is easier if you work with experienced project managers.
</UL>
<P>
The remainder of this chapter works through modifications to the
<TT><FONT FACE="Courier">SlideShow</FONT></TT> application developed
in <A HREF="ch18.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch18.htm" >Chapter 18</A>. Several requests for new
features in the application are grouped into one new release.
<H2><A NAME="ConceptualizingApplicationUpgrades"><B><FONT SIZE=5 COLOR=#Ff0000>Conceptualizing
Application Upgrades</FONT></B></A></H2>
<P>
Before you begin any project, carefully analyze the development
requirements to uncover hidden assumptions and resolve conflicts.
This process is equally important when enhancing existing applications.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Looking Ahead</B></TD></TR>
<TR><TD WIDTH=578>
<BLOCKQUOTE>
In this section, several new requests for the <TT><FONT FACE="Courier">SlideShow</FONT></TT> application are presented and expanded. At the end of this section you should have a good idea of the new tasks that will be added to the application. This will 
enable you to create a comprehensive design for the modifications.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The following is a prioritized list of change requests for the
<TT><FONT FACE="Courier">SlideShow</FONT></TT> application:
<UL>
<LI>Adding a mechanism to build and save slide shows
<LI>Adding check boxes to controls to turn on and off pictures
or text
<LI>Making it possible to read a show consisting of multiple files
<LI>Adding a mechanism to enable continuous play on a timer
<LI>Increasing the possible number of slides that can be stored
<LI>Adding audio
<LI>Adding radio buttons or list boxes to turn audio on and off
</UL>
<P>
The items that are most important to the users are listed at the
top of the list. Each item is discussed in more detail in the
sections that follow.
<H3><A NAME="TheBuildandSaveCapability"><B>The Build-and-Save
Capability</B></A></H3>
<P>
Currently it is tricky to edit the slide show because of the null
character that must be used to separate the entries and because
the designers of the show are not able to see the show while they
are working on it. It would be easier to create a slide show if
you could look at the slides and pick and choose which slide to
include. It also would be helpful to be able to rearrange the
order of slides with a simple cut-and-paste menu similar to that
found in word processors.
<H3><A NAME="ChangingtheStateoftheCheckBoxes"><B>Changing the
State of the Check Boxes</B></A></H3>
<P>
The options available on the first part of the display menu mirror
the options on the control panel at the bottom of the display
screen. However, the No Slides and No Text check box menu items
are not reproduced on the control panel. It would enhance the
design to implement these on the controls. The new items could
be check boxes so that the current setting would be displayed
to the user as part of the control. This seems like a straightforward
addition to the controls because the same methods that are accessed
from the menu should be usable by the controls.
<H3><A NAME="ReadingMultipleFiles"><B>Reading Multiple Files</B></A>
</H3>
<P>
In the original <TT><FONT FACE="Courier">SlideShow</FONT></TT>
application, a show consists of one list of names contained in
a single text file. However, there may be times when users will
want to load several shows, back to back. Currently, this can
be done only by creating a new list of names containing all the
slides in the order desired. It would be convenient to be able
to list several files on the command line and have the pictures
from each loaded.<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Tip</B></TD></TR>
<TR><TD WIDTH=562>
<BLOCKQUOTE>
If you wanted to load multiple files in the program, this modification would be more complex. In that case, changes would have to be made to the windows controlling the file loading. The current modification, however, does not require any changes to the 
display. It deals strictly with changes to the handling of the command-line arguments.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Currently, only the first command-line argument is passed to the
methods that load the files. The remaining arguments are ignored.
To complete this modification, the remaining arguments are passed
to the load methods. Then as many slides as will fit in the array
are added.
<H3><A NAME="ContinuousPlay"><B>Continuous Play</B></A></H3>
<P>
The users want the entire slide show to redisplay at regular intervals.
The display of the slides should run one at a time after the user
presses one button. The user must have a button to stop continuous
play and remain on the same slide. The play mechanism will start
from the current slide and proceed forward. That way if the user
stops the play, he or she can restart it from the same location.
<H3><B><A NAME="IncreasingtheNumberofPossibleSlides1">Increasing the Number of Possible Slides1</A></B></H3>
<P>
Okay, so 20 slides may not be enough for your whole trip to Europe.
The application could be rewritten to use a linked list. Then
you could increase the number of slides until they meet the memory
limits on the computer. However, the easy approach for this one
is to increase the size of the array. The array will be increased
to hold up to 100 slides.
<H3><A NAME="FinalTaskList"><B>Final Task List</B></A></H3>
<P>
Now that you have a good understanding of each of the modifications,
you can put together a list of the new tasks that the application
must handle. Assuming the modifications will be grouped together
and released as an upgrade to the application, you can create
one task list for all the desired changes, such as the following:
<UL>
<LI>Cutting the current slide
<LI>Copying the current slide
<LI>Pasting a slide that has been cut or copied
<LI>Inserting a new slide from a <TT><FONT FACE="Courier">.gif</FONT></TT>
file
<LI>Saving a show to a new filename
<LI>Adding check boxes to the controls
<LI>Reading multiple files at startup
<LI>Starting continuous play
<LI>Ending continuous play
<LI>Displaying up to 100 slides in a show
<LI>Playing audio
<LI>Disabling audio
<LI>Enabling audio
</UL>
<P>
In the next section, the objects and methods needed to accomplish
these tasks are designed.
<H2><A NAME="DesigningApplicationUpgrades"><B><FONT SIZE=5 COLOR=#Ff0000>Designing
Application Upgrades</FONT></B></A></H2>
<P>
At the end of the design you will have a list of new objects to
be implemented. Because you are modifying an existing application,
your design also should include a list of changes to existing
objects. You must clearly define each of these changes.
<H3><A NAME="BuildandSave"><B>Build-and-Save</B></A></H3>
<P>
The build-and-save enhancement is composed of several small changes
to the existing application. The first three tasks involve editing
the slide show. The design for these tasks is presented subsequently
as one topic. The next topic is the design of the insert task.
After the show can be edited, a mechanism must be developed to
save the files involved in the modified slide show.
<H4><B>Editing the Slide Show</B></H4>
<P>
The users have been helpful in creating a specification that starts
us down the path to design. You know to add a new menu, Edit,
that will allow the users to cut, copy, and paste slides. This
menu will be used to insert new slides into the slide show.
<P>
You must add <TT><FONT FACE="Courier">Cut</FONT></TT>, <TT><FONT FACE="Courier">Copy</FONT></TT>,
and <TT><FONT FACE="Courier">Paste</FONT></TT> methods to both
<TT><FONT FACE="Courier">SlideCanvas</FONT></TT> and <TT><FONT FACE="Courier">SlideText</FONT></TT>.
<TT><FONT FACE="Courier">SlideCanvas</FONT></TT> will need an
<TT><FONT FACE="Courier">Image</FONT></TT> object to hold the
image most recently cut or copied from its internal array, and
<TT><FONT FACE="Courier">SlideText</FONT></TT> will need a <TT><FONT FACE="Courier">String</FONT></TT>
object for the same reason.
<P>
The <TT><FONT FACE="Courier">Cut</FONT></TT> method will copy
a slide to the new object and remove it from the array. The <TT><FONT FACE="Courier">Copy</FONT></TT>
method will copy the slide to the new object but will leave it
in the array. The <TT><FONT FACE="Courier">Paste</FONT></TT> method
will create a new slide in the array and paste the contents of
the new object into the new position. However, the <TT><FONT FACE="Courier">Paste</FONT></TT>
method will not copy over an existing slide.
<P>
The user can delete all the slides in a show, in which case the
application has nothing to display. To solve this problem, the
<TT><FONT FACE="Courier">paint()</FONT></TT> method for <TT><FONT FACE="Courier">SlideCanvas</FONT></TT>
is modified to display a blank rectangle when no slides are present.
The <TT><FONT FACE="Courier">setText()</FONT></TT> method for
<TT><FONT FACE="Courier">SlideText</FONT></TT> will display an
empty string in this case.
<H4><B>Inserting New Slides</B></H4>
<P>
In addition to rearranging existing slides, the modified application
will enable users to add a new slide to the show. The <TT><FONT FACE="Courier">Insert</FONT></TT>
menu item will be added in the <TT><FONT FACE="Courier">Edit</FONT></TT>
menu. This item will provide a dialog box to the user where he
or she can enter the filename of the slide to add.
<P>
A File dialog box will be used to get the filename to add. The
file must be in the same directory as the executing program. The
filename will be passed to an <TT><FONT FACE="Courier">Insert</FONT></TT>
method in the <TT><FONT FACE="Courier">SlidePanel</FONT></TT>
class in the same manner that the <TT><FONT FACE="Courier">load</FONT></TT>
and <TT><FONT FACE="Courier">save</FONT></TT> filenames are passed.
The method in <TT><FONT FACE="Courier">SlidePanel</FONT></TT>
will remove the file extension and pass the filename to an <TT><FONT FACE="Courier">Insert</FONT></TT>
method for each of its two components.
<P>
The <TT><FONT FACE="Courier">SlideCanvas</FONT></TT> object's
<TT><FONT FACE="Courier">Insert</FONT></TT> method will read a
file using the filename and the <TT><FONT FACE="Courier">.gif</FONT></TT>
extension. It creates a new <TT><FONT FACE="Courier">Image</FONT></TT>
object based on the contents of the file and stores it in the
current location in the array. The other items in the array are
shifted forward to accommodate the new image.
<P>
The <TT><FONT FACE="Courier">SlideText</FONT></TT> <TT><FONT FACE="Courier">Insert</FONT></TT>
method will read a file using the filename and the <TT><FONT FACE="Courier">.txt</FONT></TT>
extension. It will create a new <TT><FONT FACE="Courier">String</FONT></TT>
object and shift the contents of its array forward to accommodate
the new object for text.
<H4><B>Saving the Modified Show</B></H4>
<P>
To save the modified show, you need the filenames for the <TT><FONT FACE="Courier">.gif</FONT></TT>
and <TT><FONT FACE="Courier">.txt</FONT></TT> files. Currently,
they are loaded when the show is loaded, but they are not stored.
Part of this modification will be to modify the code so that updates
are stored. This is done by making the arrays that hold the filename's
instance arrays in the class rather than local to the <TT><FONT FACE="Courier">Load</FONT></TT>
method.
<P>
The filenames must be kept in the same order as the slides so
that saved shows can be loaded in the proper order. Because slides
can be rearranged within the array using the Edit menu items,
you must provide a mechanism to rearrange the filenames. Another
string is provided to act as a clipboard for the filenames so
that they can be manipulated as the slides are manipulated.
<P>
The list of filenames must be passed to a method in <TT><FONT FACE="Courier">SlidePanel</FONT></TT>,
so you will create an accessor method called <TT><FONT FACE="Courier">getSlideFiles()</FONT></TT>
that returns the array of filenames. Another accessor method that
returns the number of files currently in the show also will be
provided, and the <TT><FONT FACE="Courier">saveShow</FONT></TT>
method in <TT><FONT FACE="Courier">SlidePanel</FONT></TT> will
be triggered from the menu.
<P>
The menu option will open a File dialog box to retrieve the filename
where a list of slides in the show will be stored. The filename
entered by the user then will be passed to the method in <TT><FONT FACE="Courier">SlidePanel</FONT></TT>.
<P>
By default, the slide show names should be saved to a text file.
This default can be established by setting the file name to <TT><FONT FACE="Courier">*.txt</FONT></TT>
before displaying the dialog box.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Tip</B></TD></TR>
<TR><TD WIDTH=518>
<BLOCKQUOTE>
When working with opening and closing files, it is often helpful to review the <TT><FONT FACE="Courier">FileDialogBox</FONT></TT> methods available in the <TT><FONT FACE="Courier">java.awt</FONT></TT> package to remind yourself of details that may be 
helpful to your users. These methods are reviewed in <A HREF="ch12.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch12.htm" >Chapter 12</A>, &quot;The Java I/O and Utility Class Libraries.&quot;
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
As an added feature, the filename setting for text files can be
applied to the Load dialog box. Verify with the users that a filename
restriction such as this will be helpful. The restriction makes
it much easier to locate the proper file in the dialog box because
only files with the <TT><FONT FACE="Courier">.txt</FONT></TT>
extension are displayed.
<H4><B>Check Boxes</B></H4>
<P>
The next enhancement involves a single task adding check boxes
at the end of the existing controls. The first check box will
have the text &quot;Slides&quot;; the second will have the text
&quot;Text.&quot; Both will be set by default.
<P>
When the Slide check box is cleared, the method <TT><FONT FACE="Courier">NoSlides()</FONT></TT>
method in the <TT><FONT FACE="Courier">displayPanel</FONT></TT>
is called. Similarly, when the Slide check box is checked, the
<TT><FONT FACE="Courier">setSlides()</FONT></TT> method in the
<TT><FONT FACE="Courier">displayPanel</FONT></TT> object is called.
A corresponding set of method calls is used for the Text check
box.
<P>
The state of the display can be changed on either the control
panel or the menu bar. The menu must inform the controls if it
changes the setting of this option, and vice versa. This implies
that the menu and the controls each must be informed of the existence
of the other.
<P>
The event handler for the menu is modified to notify the controls
when the display state is changed through the menu. To accomplish
this, the event handler must have a means to reference the controls
object; therefore, an instance variable is added to store a reference
to the controls.
<P>
Similarly, the controls are modified to indicate to the menu that
a change of state has occurred. To notify the controls, the event
is posted to the event handler for the menu. To post the event,
the controls must know about the <TT><FONT FACE="Courier">Menu</FONT></TT>
object. Therefore, the constructor for the <TT><FONT FACE="Courier">SlideControls</FONT></TT>
class is modified to accept a reference to the <TT><FONT FACE="Courier">MenuBar</FONT></TT>
object and store the value in an instance variable.
<H4><B>Reading Multiple Files</B></H4>
<P>
Currently, when the application starts, the <TT><FONT FACE="Courier">main()</FONT></TT>
method passes only the first argument from the command line to
the <TT><FONT FACE="Courier">SlideShow</FONT></TT> constructor.
This will be altered so that all the command-line arguments are
passed. The constructor in <TT><FONT FACE="Courier">SlideShow</FONT></TT>
then passes the same array to the constructor for <TT><FONT FACE="Courier">SlidePanel</FONT></TT>.
<P>
The constructor for <TT><FONT FACE="Courier">SlidePanel</FONT></TT>
will be modified to loop through an array of filenames and load
each one. The first should go in the front of the array and be
loaded normally. The loads of the remaining files need a mechanism
to indicate to <TT><FONT FACE="Courier">LoadShow</FONT></TT> that
they should be loaded into the array after any existing slides
and not on top of them. To provide this mechanism, a boolean argument
is added to the <TT><FONT FACE="Courier">LoadShow</FONT></TT>
method. When this argument is <TT><FONT FACE="Courier">false</FONT></TT>,
the slides are loaded normally. When the argument is <TT><FONT FACE="Courier">true</FONT></TT>,
the slides are appended to the current show.
<P>
The <TT><FONT FACE="Courier">LoadShow</FONT></TT> methods in both
<TT><FONT FACE="Courier">SlideText</FONT></TT> and <TT><FONT FACE="Courier">SlideCanvas</FONT></TT>
will be rewritten to accommodate multiple input files. There are
two changes in the <TT><FONT FACE="Courier">LoadShow()</FONT></TT>
methods: The array counter, which stores the number of files in
the array, must account for multiple load files; and the boolean
parameter must be checked to determine whether the new slides
should be appended to the slides already loaded or should start
loading at the first position.
<P>
Because it is possible that multiple files will be loaded, the
total number of slides in the array is not necessarily the number
of slides loaded during a particular call to <TT><FONT FACE="Courier">LoadShow</FONT></TT>.
Therefore, the internal counter should not be initialized to zero
each time this method is called but rather when an instance of
the object is created. For this reason, the initialization is
moved to the class level, and the <TT><FONT FACE="Courier">LoadShow</FONT></TT>
method sets its internal counter from the instance variable. The
counter should be reinitialized when the user selects Load from
the File menu.
<P>
Currently, there is no difference between the call to <TT><FONT FACE="Courier">LoadShow</FONT></TT>
from the <TT><FONT FACE="Courier">main()</FONT></TT> method and
the call from the menu. All the existing calls to this method
could be modified to pass the second argument, or the method could
be overloaded. In this case, if the second argument is not present,
it is assumed to be false. Using the second option, there is no
need to make changes to the existing code; you can be secure that
the new functionality will not affect the existing objects. You
now have a well-thought-out design for loading multiple files
into one slide show.
<H4><B>Continuous Play</B></H4>
<P>
To implement the continuous-play mechanism, you will set up a
timer that calls the <TT><FONT FACE="Courier">ShowNextSlide()</FONT></TT>
method when it expires. The timer will be part of the <TT><FONT FACE="Courier">SlidePanel</FONT></TT>
class, so it can be called from the menu, the controls, or both.
It will run in its own thread so the user can make changes on
the controls, such as canceling continuous play, while it is running.
<P>
An instance variable is added to the <TT><FONT FACE="Courier">SlidePanel</FONT></TT>
class to determine if the continuous play is currently set. A
method will be provided to set this variable and start the timer,
and another will clear this variable. The timer will check the
variable each time it changes a slide. It will not change the
slide and will stop looping if the instance variable indicates
that continuous play has been canceled.
<P>
It also would be convenient for the timer to recognize when it
is at the end of the show and stop looping. Therefore, a method
is added in the <TT><FONT FACE="Courier">SlideCanvas</FONT></TT>
and <TT><FONT FACE="Courier">SlideText</FONT></TT> classes that
returns <TT><FONT FACE="Courier">true</FONT></TT> if the current
slide is the last slide and <TT><FONT FACE="Courier">false</FONT></TT>
otherwise. The timer will call one of these methods to determine
if it is at the last slide.
<H3><A NAME="IncreasingtheNumberofPossibleSlides"><B>Increasing
the Number of Possible Slides</B></A></H3>
<P>
Currently, the maximum number of slides that can be stored in
the show is 20, based on an array index of 10. This will be increased
to allow for a maximum of 100 slides.
<P>
Unfortunately, the array index is used in several places throughout
the <TT><FONT FACE="Courier">SlideCanvas</FONT></TT> and <TT><FONT FACE="Courier">SlideText</FONT></TT>
objects. A global replacement of 20 with a higher number will
solve the problem, unless there is a place where the code checks
for a number less than or equal to 19 instead of less than 20.
In the <TT><FONT FACE="Courier">SlideShow</FONT></TT> application
created in <A HREF="ch18.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch18.htm" >Chapter 18</A>, all references
are to the number 20. Still, we can prevent possible future problems
by assigning a name to the array index.
<P>
The array index will be replaced with a static final variable
named <TT><FONT FACE="Courier">ArrayMax</FONT></TT>. The variable
is static so that all instances of the class use the same value,
and final so that its value cannot be changed after initialization.
The value is initialized to 100, thus increasing the number of
possible slides.
<H3><A NAME="AddingAudio"><B>Adding Audio</B></A></H3>
<P>
It would enhance the appeal and usability of the application to
have audio clips of the text messages. Then the user could study
the picture while listening to the description instead of having
to read the description and then examine the picture. Unfortunately,
at this writing, the <TT><FONT FACE="Courier">play()</FONT></TT>
and <TT><FONT FACE="Courier">getAudio()</FONT></TT> methods in
Java are part of the <TT><FONT FACE="Courier">Applet</FONT></TT>
class. It can only be used to play a script if it is given a <TT><FONT FACE="Courier">baseURL</FONT></TT>.
Because of time constraints for the project, this request will
remain unimplemented until a workaround for this problem is discovered.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=564>
<BLOCKQUOTE>
If audio support were essential to the application, you would have to create a class of objects for handling audio in applications. As with any other programming language, you would have to create the code for this object from scratch or modify the 
existing <TT><FONT FACE="Courier">play()</FONT></TT> or <TT><FONT FACE="Courier">getAudio()</FONT></TT> methods to work outside of applets.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="SummingUptheObjectChanges"><B>Summing Up the Object
Changes</B></A></H3>
<P>
Now that you have an understanding of the upgrade, you can modify
the original design documentation for the upgrade. The modified
menu categories are shown in Table 19.1.<BR>
<P>
<CENTER><B>Table 19.1. Menu features.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><I>Category</I></TD><TD WIDTH=102><I>Item</I>
</TD><TD WIDTH=307><I>Description</I></TD></TR>
<TR><TD WIDTH=80>File</TD><TD WIDTH=102>Load</TD><TD WIDTH=307>Loads slides into the application
</TD></TR>
<TR><TD WIDTH=80>&nbsp;</TD><TD WIDTH=102>Save</TD><TD WIDTH=307>Saves filenames of the current slides
</TD></TR>
<TR><TD WIDTH=80>&nbsp;</TD><TD WIDTH=102>Exit</TD><TD WIDTH=307>Exits <TT><FONT FACE="Courier">SlideShow</FONT></TT>
</TD></TR>
<TR><TD WIDTH=80>Edit</TD><TD WIDTH=102>Cut</TD><TD WIDTH=307>Removes current slide and adds to clipboard
</TD></TR>
<TR><TD WIDTH=80>&nbsp;</TD><TD WIDTH=102>Copy</TD><TD WIDTH=307>Adds current slide to clipboard
</TD></TR>
<TR><TD WIDTH=80>&nbsp;</TD><TD WIDTH=102>Paste</TD><TD WIDTH=307>Copies from clipboard, creating a new slide
</TD></TR>
<TR><TD WIDTH=80>&nbsp;</TD><TD WIDTH=102>Insert</TD><TD WIDTH=307>Adds a new slide from a file
</TD></TR>
<TR><TD WIDTH=80>Display</TD><TD WIDTH=102>Forward</TD><TD WIDTH=307>Moves forward to the next slide
</TD></TR>
<TR><TD WIDTH=80>&nbsp;</TD><TD WIDTH=102>Back</TD><TD WIDTH=307>Moves backward to the previous slide
</TD></TR>
<TR><TD WIDTH=80>&nbsp;</TD><TD WIDTH=102>Beginning</TD><TD WIDTH=307>Moves to the first slide in the show
</TD></TR>
<TR><TD WIDTH=80>&nbsp;</TD><TD WIDTH=102>End</TD><TD WIDTH=307>Moves to the last slide in the show
</TD></TR>
<TR><TD WIDTH=80>&nbsp;</TD><TD WIDTH=102>No Text</TD><TD WIDTH=307>When checked, the text is hidden
</TD></TR>
<TR><TD WIDTH=80>&nbsp;</TD><TD WIDTH=102>No Slides</TD><TD WIDTH=307>When checked, the pictures are hidden
</TD></TR>
<TR><TD WIDTH=80>Help</TD><TD WIDTH=102>Help Topics</TD><TD WIDTH=307>Provides a description of the controls
</TD></TR>
<TR><TD WIDTH=80>&nbsp;</TD><TD WIDTH=102>About</TD><TD WIDTH=307>Provides authoring information
</TD></TR>
</TABLE></CENTER>
<P>
<P>
The design process includes taking the changes that have been
described for each modification and reorganizing them according
to the objects that are affected. Two lists are necessary, one
for new objects to implement and one for existing objects to modify.
<P>
On the basis of the design discussion, you must implement the
following objects:
<UL>
<LI>An <TT><FONT FACE="Courier">Image</FONT></TT> object to store
cut slide image
<LI>A <TT><FONT FACE="Courier">String</FONT></TT> object to store
cut slide text
<LI>An Edit menu item
<LI>A Cut menu item
<LI>A Copy menu item
<LI>A Paste menu item
<LI>An Insert menu item
<LI>A dialog box for Slide Insert
<LI>An array of image filenames
<LI>An array of text filenames
<LI>A string to store the cut image filename
<LI>A string to store the cut text filename
<LI>A Slide check box
<LI>A Text check box
</UL>
<P>
The many modifications to the existing classes are listed in Table
19.2.<BR>
<P>
<CENTER><B>Table 19.2. Changes to existing classes.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><I>Class Name</I></TD><TD WIDTH=443><I>List of Changes</I>
</TD></TR>
<TR><TD WIDTH=147><TT><FONT FACE="Courier">SlideCanvas</FONT></TT>
</TD><TD WIDTH=443>Add <TT><FONT FACE="Courier">Cut</FONT></TT> method
<BR>
Add <TT><FONT FACE="Courier">Copy</FONT></TT> method<BR>
Add <TT><FONT FACE="Courier">Paste</FONT></TT> method<BR>
Add <TT><FONT FACE="Courier">Insert</FONT></TT> method<BR>
Add method to return the current slide names<BR>
Add method to return the current number of slides<BR>
Modify <TT><FONT FACE="Courier">LoadShow</FONT></TT> to allow multiple input files<BR>
Increase the number of possible slides to 100
</TD></TR>
<TR><TD WIDTH=147><TT><FONT FACE="Courier">SlideText</FONT></TT>
</TD><TD WIDTH=443>Add <TT><FONT FACE="Courier">Cut</FONT></TT> method
<BR>
Add <TT><FONT FACE="Courier">Copy</FONT></TT> method<BR>
Add <TT><FONT FACE="Courier">Paste</FONT></TT> method<BR>
Add <TT><FONT FACE="Courier">Insert</FONT></TT> method<BR>
Modify <TT><FONT FACE="Courier">LoadShow</FONT></TT> to allow multiple input files<BR>
Add a method to return <TT><FONT FACE="Courier">true</FONT></TT> at the end of the show<BR>
Increase the number of possible slides to 100
</TD></TR>
<TR><TD WIDTH=147><TT><FONT FACE="Courier">SlidePanel</FONT></TT>
</TD><TD WIDTH=443>Add <TT><FONT FACE="Courier">Cut</FONT></TT> method
<BR>
Add <TT><FONT FACE="Courier">Copy</FONT></TT> method<BR>
Add <TT><FONT FACE="Courier">Paste</FONT></TT> method<BR>
Add <TT><FONT FACE="Courier">Insert</FONT></TT> method<BR>
Add a <TT><FONT FACE="Courier">Save</FONT></TT> method<BR>
Modify constructor to allow loading of multiple files<BR>
Add a variable to determine if continuous play is on<BR>
Add a method to start continuous play<BR>
Add a method to stop continuous play<BR>
Add a <TT><FONT FACE="Courier">Run</FONT></TT> method
</TD></TR>
<TR><TD WIDTH=147><TT><FONT FACE="Courier">SlideControls</FONT></TT>
</TD><TD WIDTH=443>Add Slide check box
<BR>
Add Text check box<BR>
Modify constructor to accept and store a <TT><FONT FACE="Courier">MenuBar</FONT></TT> object<BR>
Modify event handler to notify <TT><FONT FACE="Courier">MenuBar</FONT></TT> if state changes via controls
</TD></TR>
<TR><TD WIDTH=147><TT><FONT FACE="Courier">SlideShow</FONT></TT>
</TD><TD WIDTH=443>Modify menu to include all items in Table 19.1
<BR>
Modify event handler to handle new items<BR>
Add an instance variable referring to the current controls<BR>
Modify event handler to notify controls when state is changed via the menu<BR>
Modify the <TT><FONT FACE="Courier">main()</FONT></TT> method to pass all input arguments to the constructor<BR>
Modify the constructor to pass the input arguments to <TT><FONT FACE="Courier">SlidePanel</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="ImplementingApplicationUpgrades"><B><FONT SIZE=5 COLOR=#Ff0000>Implementing
Application Upgrades</FONT></B></A></H2>
<P>
This section demonstrates how to implement the changes described
in the design section. Here, each of the new objects and the modifications
for existing objects are implemented.
<H3><A NAME="ChangestoSlideCanvas"><B>Changes to </B><TT><B><FONT SIZE=4 FACE="Courier">SlideCanvas</FONT></B></TT></A>
</H3>
<P>
Given the list of changes created for the <TT><FONT FACE="Courier">SlideCanvas</FONT></TT>
class as part of the design, you could just go through and make
each of the changes. However, it is important to study how some
of the changes affect one another. For example, adding the array
to maintain filenames means that this array must be dealt with
when the position of images in the image array is changed.
<H4><B>Changes to Declarations</B></H4>
<P>
Several new components are added to the <TT><FONT FACE="Courier">SlideCanvas</FONT></TT>
class. They are protected containers used to store information
used by <TT><FONT FACE="Courier">SlideCanvas</FONT></TT>. The
declaration for these objects appears as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">// Image object to store cut slide image
<BR>
protected Image SlideClip;<BR>
// Array of image filenames<BR>
protected String[] imgFile = new String[20];<BR>
// String to store cut image filename<BR>
protected String FileClip=new String();</FONT></TT>
</BLOCKQUOTE>
<P>
The declarations for the <TT><FONT FACE="Courier">NumSlides</FONT></TT>
and <TT><FONT FACE="Courier">CurrentSlide</FONT></TT> variables
are also changed so that they are initialized when they are declared.
The new declarations are
<BLOCKQUOTE>
<TT><FONT FACE="Courier">protected int NumSlides=0;     // Number
of images in the array<BR>
protected int CurrentSlide=0;  // Number of image currently displayed</FONT></TT>
</BLOCKQUOTE>
<H4><B>Adding the </B><TT><B><FONT FACE="Courier">cutSlide</FONT></B></TT><B>
Method</B></H4>
<P>
You implement the <TT><FONT FACE="Courier">cutSlide</FONT></TT>
method by taking a reference to the current slide; storing it
to the internal clipboard, <TT><FONT FACE="Courier">SlideClip</FONT></TT>;
and then removing the slide from the array. The complete <TT><FONT FACE="Courier">cutSlide()</FONT></TT>
method is shown in Listing 19.1.
<HR>
<BLOCKQUOTE>
<B>Listing 19.1. The </B><TT><B><FONT FACE="Courier">cutSlide()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void cutSlide(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
i;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check
that there is an element to cut<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(NumSlides &lt; 0)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Copy
element and its filename to buffer<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SlideClip
= im[CurrentSlide];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileClip
= imgFile[CurrentSlide];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Decrease
the number of elements in the array<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumSlides
= NumSlides - 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Shift
the array to close the gap<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(i=CurrentSlide;i&lt;NumSlides;i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;im[i]
= im[i+1];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imgFile[i]
= imgFile[i+1];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(CurrentSlide == NumSlides)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentSlide
= NumSlides - 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Before cutting a slide, the <TT><FONT FACE="Courier">cutSlide()</FONT></TT>
method ensures the slide is present in the array. If no slides
are present, it returns to its caller. If a slide is present,
it copies to the <TT><FONT FACE="Courier">SlideClip</FONT></TT>
object, decreases the number of slides present, and shifts the
array contents.
<P>
In most cases, when the user cuts a slide, the following slide
becomes the current slide. However, if the last slide is clipped-meaning
there is no following slide-the current slide is set to the previous
slide. This check is made at the end of the <TT><FONT FACE="Courier">cutSlide</FONT></TT>
method by comparing the <TT><FONT FACE="Courier">CurrentSlide</FONT></TT>
variable and the <TT><FONT FACE="Courier">NumSlides</FONT></TT>
variable.
<P>
Because you have modified the filename array so it is available
to the entire class, you can cut the filename associated with
the current slide and save it to <TT><FONT FACE="Courier">FileClip</FONT></TT>.
In this way, the two arrays are kept parallel to one another through
the cutting and pasting.
<H4><B>Adding the </B><TT><B><FONT FACE="Courier">copySlide</FONT></B></TT><B>
Method</B></H4>
<P>
You implement the <TT><FONT FACE="Courier">copySlide</FONT></TT>
method by copying the current slide into the internal clipboard.
Recall that when you copy an object, you do not remove it from
the array. The <TT><FONT FACE="Courier">copySlide()</FONT></TT>
method is shown in Listing 19.2.
<HR>
<BLOCKQUOTE>
<B>Listing 19.2. The </B><TT><B><FONT FACE="Courier">copySlide()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void copySlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check
that there is an element to copy<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(NumSlides &lt; 0)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SlideClip
= im[CurrentSlide];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>Adding the </B><TT><B><FONT FACE="Courier">pasteSlide</FONT></B></TT><B>
Method</B></H4>
<P>
The <TT><FONT FACE="Courier">pasteSlide</FONT></TT> method creates
a new slide in the array and then copies the slide from the internal
clipboard to the array. The <TT><FONT FACE="Courier">pasteSlide()</FONT></TT>
method is shown in Listing 19.3.
<HR>
<BLOCKQUOTE>
<B>Listing 19.3. The </B><TT><B><FONT FACE="Courier">pasteSlide()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void pasteSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
i;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check
that there is an element to paste<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(SlideClip == null)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check
that there is room to paste an element<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(NumSlides == 20)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Make
a space in the array and the file array<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i=NumSlides;i&gt;=CurrentSlide;i--)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;im[i+1]=im[i];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imgFile[i+1]=imgFile[i];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Increase the number of slides in the show<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumSlides
= NumSlides + 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Store the items in the clipboard to the new slot<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;im[CurrentSlide]
= SlideClip;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imgFile[CurrentSlide]=FileClip;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>Adding the </B><TT><B><FONT FACE="Courier">insertSlide</FONT></B></TT><B>
Method</B></H4>
<P>
The <TT><FONT FACE="Courier">insertSlide</FONT></TT> method loads
a new image using its filename and stores the image in the internal
array. If the internal array is full, the method simply returns.
If the array is not full, each image is moved forward and the
new image is inserted behind the current image. Listing 19.4 shows
the code for this method.
<HR>
<BLOCKQUOTE>
<B>Listing 19.4. The </B><TT><B><FONT FACE="Courier">insertSlide()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void InsertSlide(String FileName)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
i;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check
that there is room to paste an element<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(NumSlides == 20)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Make
a space in the array and the file array<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i=NumSlides;i&gt;=CurrentSlide;i--)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;im[i+1]=im[i];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imgFile[i+1]=imgFile[i];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Increase the number of slides in the show<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumSlides
= NumSlides + 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Store the items from the file to the new slot<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imgFile[CurrentSlide]=FileName;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;im[CurrentSlide]
= getToolkit().getImage(imgFile[CurrentSlide]+&quot;.gif&quot;);;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>Adding Accessor Methods</B></H4>
<P>
The <TT><FONT FACE="Courier">SlideCanvas</FONT></TT> class needs
two methods to allow other classes to read, but not write, its
protected variables. These methods allow the <TT><FONT FACE="Courier">SlidePanel</FONT></TT>
class to save the filenames in the current show. The first method
returns the number of slides currently in the show, and the second
returns the array containing the names of the slides:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int getNumSlides() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
NumSlides;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
public String[] getSlideFiles() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
imgFile;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<H4><B>Modifying </B><TT><B><FONT FACE="Courier">LoadShow</FONT></B></TT><B>
to Allow Multiple Input Files</B></H4>
<P>
The existing <TT><FONT FACE="Courier">LoadShow()</FONT></TT> method
is modified to take a boolean as a second parameter. If the parameter
is passed as <TT><FONT FACE="Courier">true</FONT></TT>, the method
appends the slides it loads to the slides already in the array.
If the parameter is set to <TT><FONT FACE="Courier">false</FONT></TT>,
the method overwrites the existing slides with the new slides.
<P>
To avoid modifying the existing calls to <TT><FONT FACE="Courier">LoadShow()</FONT></TT>,
you will overload the method by adding another <TT><FONT FACE="Courier">LoadShow()</FONT></TT>
method that just takes the filename as a parameter. This method
simply calls the newly defined <TT><FONT FACE="Courier">LoadShow(filename,
boolean</FONT></TT>) method with the second parameter set to <TT><FONT FACE="Courier">false</FONT></TT>.
This causes any existing show to be overwritten when a new show
is loaded, exactly as these calls worked before you made any changes.
<P>
The new <TT><FONT FACE="Courier">LoadShow</FONT></TT> methods
for the <TT><FONT FACE="Courier">SlideCanvas</FONT></TT> class
appear in Listing 19.5. If you compare this with the original
methods, you will notice that the basic operation is the same;
the only difference is in the statements that control how the
local variable is initialized.
<HR>
<BLOCKQUOTE>
<B>Listing 19.5. The </B><TT><B><FONT FACE="Courier">LoadShow()</FONT></B></TT><B>
methods.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void LoadShow(String LoadFile){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LoadShow(LoadFile,false);<BR>
}<BR>
// Load the text array based on filename in the LoadFile<BR>
public void LoadShow(String LoadFile,boolean addfile) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomAccessFile&nbsp;&nbsp;&nbsp;&nbsp;
ListFile;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Loop counter<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Create an array of images and
load the images<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (addfile)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i=NumTexts;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i=0;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile
= new RandomAccessFile(LoadFile,&quot;r&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while
(ListFile.getFilePointer() != ListFile.length() ) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strFile[i]
= ListFile.readLine();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile.close();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (java.io.IOException e)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Could
not read from file&nbsp;&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(e);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumTexts = i;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i=0; i&lt;NumTexts;i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[i]
= getText(strFile[i]+&quot;.txt&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>Increasing the Number of Possible Slides to 100</B></H4>
<P>
The simplest way to increase the number of slides allowed is to
replace all instances of 20 with 100. However, you must then check
the class carefully to ensure that there are no cases in which
checks are made for the previous counter value, such as i&#173;19
instead of i&lt;20. 
<P>
Cases like this present a problem that can be solved in other
languages using constants, but you can't use constants for this
in Java. In Java you can create a variable that is both static
and final. Therefore, I will create a variable that can hold the
value for the number of slides.
<P>
The new variable <TT><FONT FACE="Courier">ArrayMax</FONT></TT>
is declared in the <TT><FONT FACE="Courier">SlideCanvas</FONT></TT>
class. The declaration looks like this:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">static final int ArrayMax = 100;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Size of array</FONT></TT>
</BLOCKQUOTE>
<P>
All references to the value <TT><FONT FACE="Courier">20</FONT></TT>
as an array maximum are then replaced with the name <TT><FONT FACE="Courier">ArrayMax</FONT></TT>.
<H4><B>The Complete </B><TT><B><FONT FACE="Courier">SlideCanvas</FONT></B></TT><B>
Class</B></H4>
<P>
You have made numerous changes to the <TT><FONT FACE="Courier">SlideCanvas</FONT></TT>
class. A complete listing, including all the changes and all the
original code, is shown in Listing 19.6.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=584>
<BLOCKQUOTE>
As you start to work with the classes of the new <TT><FONT FACE="Courier">SlideShow</FONT></TT> application, keep in mind that the new classes represent changes to the existing program. You will find the updated program in its entirety on the CD-ROM. 
Still, the best way to learn what is happening is to make the changes to each class individually. Before you start, you should copy the existing <TT><FONT FACE="Courier">SlideShow</FONT></TT> application to a new directory on your hard drive. Next, replace 
the classes that have changed in their entirety with the new code for the class. The <TT><FONT FACE="Courier">import</FONT></TT> statements in the original program should be included in the new application. These <TT><FONT FACE="Courier">import</FONT></TT> 
statements should read as follows:
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
import java.applet.*;<BR>
import java.io.RandomAccessFile;</FONT></TT>
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 19.6. The complete </B><TT><B><FONT FACE="Courier">SlideCanvas</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* SlideCanvas is an extension of Canvas<BR>
&nbsp;* It provides a means to display slides to the user<BR>
&nbsp;*/<BR>
<BR>
class SlideCanvas extends Canvas {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Size of array<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static final int ArrayMax = 100;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Array of Images to display<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected Image im[] = new Image[ArrayMax];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// name of image to display<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected String[] imgFile = new
String[ArrayMax];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Number of images in the array
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected int NumSlides=0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Number of image currently displayed
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected int CurrentSlide=0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// False to turn off display<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected boolean showslide;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Image for cutting &amp; pasting
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected Image SlideClip;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// String for cutting &amp; pasting
filename<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected String FileClip=new String();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public String[] getSlideFiles()
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
imgFile;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public int getNumSlides() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
NumSlides;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean endOfShow() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(CurrentSlide == (NumSlides-1))<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void cutSlide(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
i;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check
that there is an element to cut<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(NumSlides &lt; 0)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Copy
element and its filename to buffer<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SlideClip
= im[CurrentSlide];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileClip
= imgFile[CurrentSlide];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Decrease
the number of elements in the array<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumSlides
= NumSlides - 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Shift
the array to close the gap<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(i=CurrentSlide;i&lt;NumSlides;i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;im[i]
= im[i+1];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imgFile[i]
= imgFile[i+1];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(CurrentSlide == NumSlides)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentSlide
= NumSlides - 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void copySlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check
that there is an element to copy<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(NumSlides &lt; 0)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SlideClip
= im[CurrentSlide];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void pasteSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
i;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check
that there is an element to paste<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(SlideClip == null)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check
that there is room to paste an element<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(NumSlides == ArrayMax)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Make
a space in the array and the file array<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i=NumSlides;i&gt;=CurrentSlide;i--)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;im[i+1]=im[i];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imgFile[i+1]=imgFile[i];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Increase the number of slides in the show<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumSlides
= NumSlides + 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Store the items in the clipboard to the new slot<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;im[CurrentSlide]
= SlideClip;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imgFile[CurrentSlide]=FileClip;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void InsertSlide(String FileName)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
i;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check
that there is room to paste an element<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(NumSlides == ArrayMax)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Make
a space in the array and the file array<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i=NumSlides;i&gt;=CurrentSlide;i--)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;im[i+1]=im[i];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imgFile[i+1]=imgFile[i];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Increase the number of slides in the show<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumSlides
= NumSlides + 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Store the items from the file to the new slot<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imgFile[CurrentSlide]=FileName;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;im[CurrentSlide]
= getToolkit().getImage<BR>
&Acirc;(imgFile[CurrentSlide]+&quot;.gif&quot;);;<BR>
repaint();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public SlideCanvas(String ShowName)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LoadShow(ShowName);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showslide
= true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void NoSlides(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showslide
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowSlides(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showslide
= true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void paint(Graphics g) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rectangle
r = bounds();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
((showslide)&amp;&amp;(NumSlides&gt;0))<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawImage(im[CurrentSlide],50,50,r.width-100,r.height-100,this);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(Color.lightGray);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.fillRect(0,0,r.width,r.height);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowNextSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(CurrentSlide &lt; (NumSlides - 1)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentSlide
= CurrentSlide + 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowPrevSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(CurrentSlide &gt; 0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentSlide
= CurrentSlide - 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowFirstSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentSlide
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowLastSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentSlide
= NumSlides - 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void LoadShow(String LoadFile){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LoadShow(LoadFile,false);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void LoadShow(String LoadFile,
boolean addfile) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomAccessFile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Loop counter<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Create an array of images and load the images<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(addfile)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i=NumSlides;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i=0;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile
= new RandomAccessFile(LoadFile,&quot;r&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while
(ListFile.getFilePointer() != ListFile.length() ) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imgFile[i]
= ListFile.readLine();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile.close();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
catch (java.io.IOException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Could
not read from file.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(e);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumSlides
= i;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(i=0; i&lt;NumSlides;i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;im[i]
= getToolkit().getImage(imgFile[i]+&quot;.gif&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="ChangestoSlideText"><B>Changes to </B><TT><B><FONT SIZE=4 FACE="Courier">SlideText</FONT></B></TT></A>
</H3>
<P>
The changes for <TT><FONT FACE="Courier">SlideText</FONT></TT>
are similar to the changes for <TT><FONT FACE="Courier">SlideCanvas</FONT></TT>.
Again, you can go through the list of changes to this object that
are the result of the changes discussed in the &quot;Designing
Application Upgrades&quot; section.
<H4><B>Changes to Declarations</B></H4>
<P>
So that the <TT><FONT FACE="Courier">SlideText</FONT></TT> class
is not dependent on the <TT><FONT FACE="Courier">SlideCanvas</FONT></TT>
class for any of its functionality, you need to program it to
implement its own array of filenames. It also must declare a string
to serve as a clipboard for the cut or copied text. These declarations
appear as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">// name of file containing image to display
<BR>
protected String[] strFile = new String[20];<BR>
// String for cutting &amp; pasting<BR>
protected String StringClip=new String();<BR>
// String for cutting &amp; pasting filename<BR>
protected String FileClip=new String();</FONT></TT>
</BLOCKQUOTE>
<P>
The initialization of the <TT><FONT FACE="Courier">NumText</FONT></TT>
and <TT><FONT FACE="Courier">CurrentText</FONT></TT> variables
is also moved to the declaration and appears as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">protected int NumTexts=0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Number of strings in the array<BR>
protected int CurrentText=0;&nbsp;&nbsp;// Number of string currently
displayed</FONT></TT>
</BLOCKQUOTE>
<P>
Now that you have added all the new objects you will need, you
can add the new methods.
<H4><B>Adding the </B><TT><B><FONT FACE="Courier">cutString</FONT></B></TT><B>
Method</B></H4>
<P>
The <TT><FONT FACE="Courier">cutString()</FONT></TT> method is
added to remove the current text string from the array and store
it in the newly declared <TT><FONT FACE="Courier">StringClip</FONT></TT>
object. The method must remove the corresponding filename for
the <TT><FONT FACE="Courier">strFile</FONT></TT> array and store
it in <TT><FONT FACE="Courier">FileClip</FONT></TT>. The code
to perform these functions is similar to <TT><FONT FACE="Courier">cutImage</FONT></TT>
and is shown in Listing 19.7.
<HR>
<BLOCKQUOTE>
<B>Listing 19.7. The </B><TT><B><FONT FACE="Courier">cutString()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void cutString(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
i;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check
that there is an element to cut<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(NumTexts &lt; 0)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Copy
element and its filename to buffer<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringClip
= str[CurrentText];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileClip
= strFile[CurrentText];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Decrease
the number of elements in the array<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumTexts
= NumTexts - 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Shift
the array to close the gap<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(i=CurrentText;i&lt;NumTexts;i++){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[i]
= str[i+1];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strFile[i]
= strFile[i+1];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(CurrentText == NumTexts)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
CurrentText = NumTexts - 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>Adding the </B><TT><B><FONT FACE="Courier">copyString</FONT></B></TT><B>
Method</B></H4>
<P>
Before copying a text slide, the <TT><FONT FACE="Courier">Copy</FONT></TT>
method ensures there is a slide available for copying. It then
copies the text to the <TT><FONT FACE="Courier">StringClip</FONT></TT>
variable and the filename to the <TT><FONT FACE="Courier">FileClip</FONT></TT>
variable. It does not affect the contents of the arrays. Listing
19.8 is the complete code for this method.
<HR>
<BLOCKQUOTE>
<B>Listing 19.8. The </B><TT><B><FONT FACE="Courier">copyString()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void copyString() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check
that there is an element to copy<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(NumTexts &lt; 0)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringClip
= str[CurrentText];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>Adding the </B><TT><B><FONT FACE="Courier">pasteString</FONT></B></TT><B>
Method</B></H4>
<P>
Listing 19.9 shows the <TT><FONT FACE="Courier">pasteString()</FONT></TT>method
that is created to copy the text from the <TT><FONT FACE="Courier">SlideText</FONT></TT>
class's internal clipboard to a new location in the array. Before
pasting the text slide, the <TT><FONT FACE="Courier">pasteString()</FONT></TT>
method ensures that a string exists to copy and that there is
room to insert another string in the array. If both these conditions
are true, the method shifts the array forward and creates the
new string. The filename where the string is stored is pasted
into the filename array so that the show can be saved accurately.
<HR>
<BLOCKQUOTE>
<B>Listing 19.9. The </B><TT><B><FONT FACE="Courier">pasteString()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void pasteString() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
i;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check
that there is an element to paste<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(StringClip == null)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check
that there is room to paste an element<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(NumTexts == 20)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Make
a space in the array and the file array<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i=NumTexts;i&gt;=CurrentText;i--){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[i+1]=str[i];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strFile[i+1]=strFile[i];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Increase the number of slides in the show<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumTexts
= NumTexts + 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Store the items in the clipboard to the new slot<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[CurrentText]=StringClip;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strFile[CurrentText]=FileClip;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>Adding the </B><TT><B><FONT FACE="Courier">insertSlide</FONT></B></TT><B>
Method</B></H4>
<P>
The purpose of the <TT><FONT FACE="Courier">insertSlide()</FONT></TT>
method is to read the text for a new slide from a file on the
user's file system. To read a file and return its contents as
a text string, the method makes use of the same <TT><FONT FACE="Courier">getText()</FONT></TT>
method used by <TT><FONT FACE="Courier">LoadShow</FONT></TT>.
Although the filename is passed by the caller, the <TT><FONT FACE="Courier">insertSlide()</FONT></TT>
method appends the file extension <TT><FONT FACE="Courier">.txt</FONT></TT>
so that only files with the <TT><FONT FACE="Courier">.txt</FONT></TT>
extension are read. The new method is shown in Listing 19.10.
<HR>
<BLOCKQUOTE>
<B>Listing 19.10. The </B><TT><B><FONT FACE="Courier">insertSlide()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void InsertSlide(String Filename)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
i;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check
that there is room to paste an element<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(NumTexts == 20)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Make
a space in the array and the file array<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i=NumTexts;i&gt;=CurrentText;i--){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[i+1]=str[i];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strFile[i+1]=strFile[i];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Increase the number of slides in the show<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumTexts
= NumTexts + 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Read item from the file into the new location<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strFile[CurrentText]=Filename;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[CurrentText]=getText(strFile[CurrentText]+&quot;.txt&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>Modifying the </B><TT><B><FONT FACE="Courier">LoadShow()</FONT></B></TT><B>
Method</B></H4>
<P>
The <TT><FONT FACE="Courier">LoadShow()</FONT></TT> method for
<TT><FONT FACE="Courier">SlideText</FONT></TT> is overloaded just
as is <TT><FONT FACE="Courier">SlideCanvas</FONT></TT>. The new
overloaded methods are shown in Listing 19.11.
<HR>
<BLOCKQUOTE>
<B>Listing 19.11. The </B><TT><B><FONT FACE="Courier">LoadShow()</FONT></B></TT><B>
methods.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">// Overload LoadShow so existing calls
don't need to be modified<BR>
public void LoadShow(String LoadFile){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LoadShow(LoadFile,false);<BR>
}<BR>
// Load the text array based on filename in the LoadFile<BR>
public void LoadShow(String LoadFile,boolean addfile) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomAccessFile&nbsp;&nbsp;&nbsp;&nbsp;
ListFile;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Loop counter<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Create an array of images and
load the images<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (addfile)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i=NumTexts;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i=0;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile
= new RandomAccessFile(LoadFile,&quot;r&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while
(ListFile.getFilePointer() != ListFile.length() ) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strFile[i]
= ListFile.readLine();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile.close();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (java.io.IOException e)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Could
not read from file.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(e);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumTexts = i;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i=0; i&lt;NumTexts;i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[i]
= getText(strFile[i]+&quot;.txt&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>Adding the </B><TT><B><FONT FACE="Courier">EndOfShow()</FONT></B></TT><B>
Method</B></H4>
<P>
When the automatic-play feature is implemented, the <TT><FONT FACE="Courier">SlideShow</FONT></TT>
application must be able to detect when the end of the slide show
is reached. To do this, an <TT><FONT FACE="Courier">endOfShow()</FONT></TT>
method is added to the <TT><FONT FACE="Courier">SlideText</FONT></TT>
class. This method returns <TT><FONT FACE="Courier">true</FONT></TT>
to the caller when the last slide is displayed. Listing 19.12
shows the <TT><FONT FACE="Courier">endOfShow()</FONT></TT> method.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=557>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">CurrentText</FONT></TT> is the index of the current string, and the index values start at zero. <TT><FONT FACE="Courier">NumTexts</FONT></TT> is the total number of strings stored, counting from one. When the <TT><FONT 
FACE="Courier">CurrentText</FONT></TT> value is one less than the <TT><FONT FACE="Courier">NumTexts</FONT></TT> value, the last slide is in the display window.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 19.12. The </B><TT><B><FONT FACE="Courier">endOfShow()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean endOfShow() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(CurrentText == (NumTexts-1))<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>Increasing the Number of Possible Slides</B></H4>
<P>
The new static final variable <TT><FONT FACE="Courier">ArrayMax</FONT></TT>
also must be declared in the <TT><FONT FACE="Courier">SlideText</FONT></TT>
class. The declaration looks like this:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">static final int ArrayMax = 100;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Size of array</FONT></TT>
</BLOCKQUOTE>
<P>
All references to the value <TT><FONT FACE="Courier">20</FONT></TT>
as an array maximum in the <TT><FONT FACE="Courier">SlideText</FONT></TT>
class are then replaced with the name <TT><FONT FACE="Courier">ArrayMax</FONT></TT>.
<H4><B>The Complete </B><TT><B><FONT FACE="Courier">SlideText</FONT></B></TT><B>
Class</B></H4>
<P>
Listing 19.13 shows the complete <TT><FONT FACE="Courier">SlideText</FONT></TT>
class with all the new methods and the modifications to the existing
methods.
<HR>
<BLOCKQUOTE>
<B>Listing 19.13. The </B><TT><B><FONT FACE="Courier">SlideText</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* SlideText is an extension of TextArea<BR>
&nbsp;* It provides a means to display text descriptions to the
user<BR>
&nbsp;*/<BR>
<BR>
class SlideText extends TextArea {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Size of array<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static final int ArrayMax = 100;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Array of Strings to display<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected String str[] = new String[ArrayMax];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// name of file containing image
to display<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected String[] strFile = new
String[ArrayMax];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Number of strings in the array
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected int NumTexts=0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Number of string currently displayed
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected int CurrentText=0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// True if text is not being displayed
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected boolean showtext;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// String for cutting &amp; pasting
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected String StringClip=new
String();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// String for cutting &amp; pasting
filename<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected String FileClip=new String();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public SlideText(String ShowName)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LoadShow(ShowName);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setEditable(false);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showtext
= true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void cutString(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
i;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check
that there is an element to cut<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(NumTexts &lt; 0)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Copy
element and its filename to buffer<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringClip
= str[CurrentText];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileClip
= strFile[CurrentText];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Decrease
the number of elements in the array<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumTexts
= NumTexts - 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Shift
the array to close the gap<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(i=CurrentText;i&lt;NumTexts;i++){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[i]
= str[i+1];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strFile[i]
= strFile[i+1];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(CurrentText == NumTexts)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentText
= NumTexts - 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean endOfShow() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(CurrentText == (NumTexts-1))<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void copyString() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check
that there is an element to copy<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(NumTexts &lt; 0)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringClip
= str[CurrentText];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp; public void pasteString() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
i;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check
that there is an element to paste<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(StringClip == null)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check
that there is room to paste an element<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(NumTexts == ArrayMax)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Make
a space in the array and the file array<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i=NumTexts;i&gt;=CurrentText;i--){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[i+1]=str[i];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strFile[i+1]=strFile[i];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Increase the number of slides in the show<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumTexts
= NumTexts + 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Store the items in the clipboard to the new slot<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[CurrentText]=StringClip;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strFile[CurrentText]=FileClip;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void InsertSlide(String Filename)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
i;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check
that there is room to paste an element<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(NumTexts == ArrayMax)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Make
a space in the array and the file array<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i=NumTexts;i&gt;=CurrentText;i--){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[i+1]=str[i];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strFile[i+1]=strFile[i];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Increase the number of slides in the show<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumTexts
= NumTexts + 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Read item from the file into the new location<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strFile[CurrentText]=Filename;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[CurrentText]=getText(strFile[CurrentText]+&quot;.txt&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void NoText(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showtext
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowText(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showtext
= true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Override normal setText so text
can not be reset accidentally<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void setText(String str){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void setText(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
((showtext) &amp;&amp; (NumTexts&gt;0))<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.setText(str[CurrentText]);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.setText(&quot;&quot;);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowNextText() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(CurrentText &lt; (NumTexts - 1)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentText
= CurrentText + 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowPrevText() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(CurrentText &gt; 0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentText
= CurrentText - 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowFirstText() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentText
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowLastText() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentText
= NumTexts - 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void LoadShow(String LoadFile){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LoadShow(LoadFile,false);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Load the text array based on
filename in the LoadFile<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void LoadShow(String LoadFile,boolean
addfile) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomAccessFile&nbsp;&nbsp;&nbsp;&nbsp;
ListFile;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Loop counter<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Create an array of images and load the images<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(addfile)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i=NumTexts;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i=0;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile
= new RandomAccessFile(LoadFile,&quot;r&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while
(ListFile.getFilePointer() != ListFile.length() ) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strFile[i]
= ListFile.readLine();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile.close();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
catch (java.io.IOException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Could
not read from file.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(e);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumTexts
= i;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(i=0; i&lt;NumTexts;i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[i]
= getText(strFile[i]+&quot;.txt&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Read text for an item from a
file<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected String getText(String
LoadFile){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomAccessFile&nbsp;&nbsp;&nbsp;&nbsp;
ListFile;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte
b[] = new byte[1024];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
numbytes;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile
= new RandomAccessFile(LoadFile,&quot;r&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numbytes
= (int)ListFile.length();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile.read(b,0,numbytes);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile.close();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
catch (java.io.IOException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Could
not read from file.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(e);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
(new String(b,0));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="ChangestoSlidePanel"><B>Changes to </B><TT><B><FONT SIZE=4 FACE="Courier">SlidePanel</FONT></B></TT></A>
</H3>
<P>
The <TT><FONT FACE="Courier">SlidePanel</FONT></TT> class is responsible
for using the new methods provided by the <TT><FONT FACE="Courier">SlideCanvas</FONT></TT>
and <TT><FONT FACE="Courier">SlideText</FONT></TT> classes. The
changes presented for the <TT><FONT FACE="Courier">SlidePanel</FONT></TT>
class are from the list completed in the &quot;Designing Application
Upgrades&quot; section.
<H4><B>Changes to Declarations</B></H4>
<P>
To include the autoplay feature, the <TT><FONT FACE="Courier">SlidePanel</FONT></TT>
class implements the <TT><FONT FACE="Courier">Runnable</FONT></TT>
interface so it can run a timer in a separate thread. This necessitates
a change to the class declaration. The thread to run the timer
and the boolean variable described in the design are declared
as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">class SlidePanel extends Panel implements
Runnable{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected boolean keepPlaying;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
True when in autoplay<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected Thread lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Local thread for autoplay</FONT></TT>
</BLOCKQUOTE>
<H4><B>Adding the </B><TT><B><FONT FACE="Courier">cutSlide</FONT></B></TT><B>,
</B><TT><B><FONT FACE="Courier">copySlide</FONT></B></TT><B>,
and </B><TT><B><FONT FACE="Courier">pasteSlide</FONT></B></TT><B>
Methods</B></H4>
<P>
The <TT><FONT FACE="Courier">cutSlide</FONT></TT>, <TT><FONT FACE="Courier">copySlide</FONT></TT>,
and <TT><FONT FACE="Courier">pasteSlide</FONT></TT> methods for
the <TT><FONT FACE="Courier">SlidePanel</FONT></TT> class are
responsible for calling the corresponding methods of the <TT><FONT FACE="Courier">SlideCanvas</FONT></TT>
and <TT><FONT FACE="Courier">SlideText</FONT></TT> objects. The
methods containing these calls are shown in Listing 19.14.
<HR>
<BLOCKQUOTE>
<B>Listing 19.14. The </B><TT><B><FONT FACE="Courier">cutSlide()</FONT></B></TT><B>,
</B><TT><B><FONT FACE="Courier">copySlide()</FONT></B></TT><B>,
and </B><TT><B><FONT FACE="Courier">pasteSlide()</FONT></B></TT><B>
methods for </B><TT><B><FONT FACE="Courier">SlidePanel</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void cutSlide(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.cutSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.cutString();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void copySlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.copySlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.copyString();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void pasteSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.pasteSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.pasteString();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>Adding the </B><TT><B><FONT FACE="Courier">InsertSlide</FONT></B></TT><B>
Method</B></H4>
<P>
The <TT><FONT FACE="Courier">InsertSlide</FONT></TT> method is
only slightly more complex than the <TT><FONT FACE="Courier">Cut</FONT></TT>,
<TT><FONT FACE="Courier">Copy</FONT></TT>, and <TT><FONT FACE="Courier">Paste</FONT></TT>
methods. The <TT><FONT FACE="Courier">Insert</FONT></TT> method
must remove the file extension from the filename it receives so
it can pass just the filename to the <TT><FONT FACE="Courier">Insert</FONT></TT>
methods for <TT><FONT FACE="Courier">SlideCanvas</FONT></TT> and
<TT><FONT FACE="Courier">SlideText</FONT></TT>. To do this, it
uses the <TT><FONT FACE="Courier">indexOf</FONT></TT> method found
in the <TT><FONT FACE="Courier">String</FONT></TT> class to locate
the period (<TT><FONT FACE="Courier">.</FONT></TT>) serving as
the separator between the filename and the extension. It then
creates a new string from the substring that appears before that
character. The complete code is given in Listing 19.15.
<HR>
<BLOCKQUOTE>
<B>Listing 19.15. The </B><TT><B><FONT FACE="Courier">InsertSlide()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void InsertSlide(String SlideFile)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
FilePrefix;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;sepIndex;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sepIndex
= SlideFile.indexOf(&quot;.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(sepIndex &lt; 0 )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FilePrefix
= SlideFile.substring(0,sepIndex);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.InsertSlide(FilePrefix);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.InsertSlide(FilePrefix);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>Adding the </B><TT><B><FONT FACE="Courier">saveShow()</FONT></B></TT><B>
Method</B></H4>
<P>
The two new methods provided by <TT><FONT FACE="Courier">SlideCanvas</FONT></TT>
are used in the <TT><FONT FACE="Courier">saveShow()</FONT></TT>
method: The <TT><FONT FACE="Courier">saveShow</FONT></TT> method
opens a new file with the filename it is passed and writes the
names of the current slides to the file, one per line. Listing
19.16 shows the code for this method.
<HR>
<BLOCKQUOTE>
<B>Listing 19.16. The </B><TT><B><FONT FACE="Courier">saveShow()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void saveShow(String SaveFile)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomAccessFile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String[]
fileNames;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
NumFiles;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
i;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumFiles
= displayCanvas.getNumSlides();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileNames
= displayCanvas.getSlideFiles();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile
= new RandomAccessFile(SaveFile,&quot;rw&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(i=0;i&lt;NumFiles;i++)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile.writeBytes(fileNames[i]+&quot;\n&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile.close();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
catch (java.io.IOException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Could
not write to save file &quot;+SaveFile);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(e);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>Modifying the Constructor</B></H4>
<P>
The constructor of the <TT><FONT FACE="Courier">SlidePanel</FONT></TT>
class is modified to allow an array of strings as input. The constructor
first calls the <TT><FONT FACE="Courier">SlideCanvas</FONT></TT>
and <TT><FONT FACE="Courier">SlideText</FONT></TT> constructors
with the first element in this array and then adds a new loop.
The loop makes additional calls to <TT><FONT FACE="Courier">SlideCanvas</FONT></TT>
and <TT><FONT FACE="Courier">SlideText</FONT></TT> using both
the remaining values in the argument list and a second parameter
set to <TT><FONT FACE="Courier">true</FONT></TT>. The parameter
indicates that the slides in these files should be loaded in addition
to the existing slides. The new constructor is shown in Listing
19.17.
<HR>
<BLOCKQUOTE>
<B>Listing 19.17. The constructor for </B><TT><B><FONT FACE="Courier">SlidePanel</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">// Constructor adds objects to the panel
<BR>
// Gives each object the filename to load its array from<BR>
public SlidePanel(String ShowName[]) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout(new BorderLayout());<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;Center&quot;,displayCanvas
= new SlideCanvas(ShowName[0]));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;South&quot;,displayText
= new SlideText(ShowName[0]));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i=1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (i &lt; ShowName.length) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.LoadShow(ShowName[i],true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.LoadShow(ShowName[i],true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>Adding Methods to Start and Stop Continuous Play</B></H4>
<P>
The <TT><FONT FACE="Courier">startPlay()</FONT></TT> method sets
the instance variable <TT><FONT FACE="Courier">keepPlaying</FONT></TT>
and starts a new thread. This creates the first call to the <TT><FONT FACE="Courier">run</FONT></TT>
method that will then loop through the slide show. The <TT><FONT FACE="Courier">stop</FONT></TT>
method just sets the instance variable <TT><FONT FACE="Courier">keepPlaying</FONT></TT>
to <TT><FONT FACE="Courier">false</FONT></TT> and allows the <TT><FONT FACE="Courier">run()</FONT></TT>
method to fall out of the loop, terminating the thread. Both of
these methods are shown in Listing 19.18.
<HR>
<BLOCKQUOTE>
<B>Listing 19.18. The </B><TT><B><FONT FACE="Courier">StartPlay()</FONT></B></TT><B>
and </B><TT><B><FONT FACE="Courier">StopPlay()</FONT></B></TT><B>
methods.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void StartPlay(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keepPlaying=true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lt = new Thread(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lt.start();<BR>
}<BR>
public void StopPlay(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keepPlaying=false;<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>Adding the </B><TT><B><FONT FACE="Courier">run()</FONT></B></TT><B>
Method</B></H4>
<P>
The <TT><FONT FACE="Courier">run()</FONT></TT> method added to
the <TT><FONT FACE="Courier">SlidePanel</FONT></TT> class implements
the timer and loop. It uses the <TT><FONT FACE="Courier">sleep()</FONT></TT>
method with an interval of 4,000 milliseconds (4 seconds) to provide
a pause between the display of each slide. The method is shown
in Listing 19.19.
<HR>
<BLOCKQUOTE>
<B>Listing 19.19. The </B><TT><B><FONT FACE="Courier">run()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void run(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (keepPlaying &amp;&amp; !displayCanvas.endOfShow())
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShowNextSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
{lt.sleep(4000);}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch
( InterruptedException e ) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Continous
play interrupted by&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(e);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>The Complete </B><TT><B><FONT FACE="Courier">SlidePanel</FONT></B></TT><B>
Class</B></H4>
<P>
Listing 19.20 shows the complete <TT><FONT FACE="Courier">SlidePanel</FONT></TT>
class. The new variables, the new constructor, all the new methods,
the old variables, and all the old methods are contained in this
listing.
<HR>
<BLOCKQUOTE>
<B>Listing 19.20. The </B><TT><B><FONT FACE="Courier">SlidePanel</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* SlidePanel class holds objects participating in the slideshow
<BR>
&nbsp;* Objects are arrays displaying one at a time to the user
<BR>
&nbsp;*/<BR>
<BR>
class SlidePanel extends Panel implements Runnable{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected SlideCanvas displayCanvas;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Canvas to display .gifs<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected SlideText displayText;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Text area&nbsp;to display text<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected boolean keepPlaying;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
True when&nbsp;in autoplay<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected Thread lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Local thread for autoplay<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Constructor adds objects to the
panel<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Gives each object the filename
to get load its array from<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public SlidePanel(String ShowName[])
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout(new
BorderLayout());<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;Center&quot;,displayCanvas
= new SlideCanvas(ShowName[0]));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;South&quot;,displayText
= new SlideText(ShowName[0]));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
i=1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while
(i &lt; ShowName.length) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.LoadShow(ShowName[i],true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.LoadShow(ShowName[i],true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void StartPlay(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keepPlaying=true;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lt
= new Thread(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lt.start();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void run(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while
(keepPlaying &amp;&amp; !displayCanvas.endOfShow()) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShowNextSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
{lt.sleep(4000);}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch
( InterruptedException e ) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Continous
play interrupted by&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(e);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void StopPlay(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keepPlaying=false;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void InsertSlide(String SlideFile)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
FilePrefix;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;sepIndex;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sepIndex
= SlideFile.indexOf(&quot;.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(sepIndex &lt; 0 )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FilePrefix
= SlideFile.substring(0,sepIndex);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.InsertSlide(FilePrefix);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.InsertSlide(FilePrefix);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void saveShow(String SaveFile)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomAccessFile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String[]
fileNames;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
NumFiles;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
i;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumFiles
= displayCanvas.getNumSlides();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileNames
= displayCanvas.getSlideFiles();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile
= new RandomAccessFile(SaveFile,&quot;rw&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(i=0;i&lt;NumFiles;i++)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile.writeBytes(fileNames[i]+&quot;\n&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListFile.close();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
catch (java.io.IOException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Could
not write to save file &quot;+SaveFile);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(e);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void cutSlide(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.cutSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.cutString();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void copySlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.copySlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.copyString();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void pasteSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.pasteSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.pasteString();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void NoText(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.NoText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowText(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.ShowText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void NoSlides(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.NoSlides();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowSlides(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.ShowSlides();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void LoadShow(String ShowName)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.LoadShow(ShowName);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.LoadShow(ShowName);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowNextSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.ShowNextSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.ShowNextText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowPrevSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.ShowPrevSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.ShowPrevText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowFirstSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.ShowFirstSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.ShowFirstText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void ShowLastSlide() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayCanvas.ShowLastSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayText.ShowLastText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="ChangestoSlideControls"><B>Changes to </B><TT><B><FONT SIZE=4 FACE="Courier">SlideControls</FONT></B></TT></A>
</H3>
<P>
Now modify the controls to add two new check boxes. The controls
must now communicate with the menu bar when the state of either
of the check boxes is changed. As with the other classes, the
modifications are made as listed in the &quot;Designing Application
Upgrades&quot; section.
<H4><B>Adding Storage for a </B><TT><B><FONT FACE="Courier">MenuBar</FONT></B></TT>
</H4>
<P>
To notify the menu that a check box changed on the control panel,
the controls must know about the <TT><FONT FACE="Courier">Menu</FONT></TT>
object. Therefore, the constructor for the <TT><FONT FACE="Courier">SlideControls</FONT></TT>
class is modified to accept a <TT><FONT FACE="Courier">MenuBar</FONT></TT>
and store the value in an instance variable. This line appears
as
<BLOCKQUOTE>
<TT><FONT FACE="Courier">static MenuBar mb;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Menubar for the show</FONT></TT>
</BLOCKQUOTE>
<P>
The value stored here is loaded in the constructor and used in
the event handler.
<H4><B>Adding Check Boxes and New Buttons to the Controls</B>
</H4>
<P>
Before you can add check boxes and new buttons for AutoPlay and
Stop to the <TT><FONT FACE="Courier">ShowControls</FONT></TT>
class, you must modify the constructor for the class to accept
a <TT><FONT FACE="Courier">MenuBar</FONT></TT> object and store
the value in the new <TT><FONT FACE="Courier">mbar</FONT></TT>
object. In this way, the controls know when changes occur on the
menu bar.
<P>
Next, add the new check boxes to the constructor. A local reference
to each control is kept when it is added. This reference is used
to set the control's state to <TT><FONT FACE="Courier">checked</FONT></TT>.
The final step is to add the AutoPlay and Stop buttons to the
constructor.
<P>
Listing 19.21 shows the new constructor for the <TT><FONT FACE="Courier">ShowControls</FONT></TT>
class.
<HR>
<BLOCKQUOTE>
<B>Listing 19.21. The constructor for the </B><TT><B><FONT FACE="Courier">ShowControls</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">// Constructor requires a SlidePanel
to which the<BR>
// controls are attached<BR>
public ShowControls(SlidePanel theShow) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checkbox cbSlides;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checkbox cbText;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss = theShow;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb = mbar;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout(new FlowLayout(FlowLayout.CENTER));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new Button(&quot;|&lt;&lt;&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new Button(&quot;&lt;&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new Button(&quot;&gt;&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new Button(&quot;&gt;&gt;|&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(cbSlides = new Checkbox(&quot;Slides&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cbSlides.setState(true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(cbText = new Checkbox(&quot;Text&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cbText.setState(true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new Button(&quot;AutoPlay&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new Button(&quot;Stop&quot;));
<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>Modifying the Event Handler</B></H4>
<P>
Implementing the radio buttons involves modifying the existing
event handler for two new event types. The event handler will
pass <TT><FONT FACE="Courier">Checkbox</FONT></TT> events to a
new method named <TT><FONT FACE="Courier">handleCheckbox()</FONT></TT>and
look for <TT><FONT FACE="Courier">CheckboxMenuItem</FONT></TT>
events. These events are passed to a new method called <TT><FONT FACE="Courier">handleCheckboxMenuItem()</FONT></TT>.
The new event handler appears as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean action(Event evt, Object
arg) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.target instanceof Button) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handleButton((String)arg);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.target instanceof Checkbox) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handleCheckbox(((Checkbox)
evt.target).getLabel(),(Boolean) arg);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}if(evt.target
instanceof CheckboxMenuItem) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handleCheckboxMenuItem(evt);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
super.action(evt,arg);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=505>
<BLOCKQUOTE>
Each class that has actions can have its own type of argument. Notice in the <TT><FONT FACE="Courier">handleEvent</FONT></TT> method that the argument value for a check box is a boolean. This is unlike the <TT><FONT FACE="Courier">Button</FONT></TT> class, 
in which the argument value in the action method is a string.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The <TT><FONT FACE="Courier">handleCheckbox</FONT></TT> method
responds to all <TT><FONT FACE="Courier">Checkbox</FONT></TT>
events in the <TT><FONT FACE="Courier">SlideControls</FONT></TT>
object. This method uses the instance variable in the <TT><FONT FACE="Courier">SlideControls</FONT></TT>
object to access the <TT><FONT FACE="Courier">SlidePanel</FONT></TT>.
It then shows or hides the slides for that <TT><FONT FACE="Courier">SlidePanel</FONT></TT>
depending on the state of the check box.
<P>
The method also posts the event to the event handler for the menu
using the <TT><FONT FACE="Courier">postEvent()</FONT></TT> method
for the <TT><FONT FACE="Courier">MenuBar</FONT></TT> object stored
at the class level. This means the menu is notified when the state
changes on the controls.
<P>
The <TT><FONT FACE="Courier">handleCheckbox()</FONT></TT> method
appears as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void handleCheckbox(Event evt,
String cbname,Boolean cbstate){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (cbname.equals(&quot;Slides&quot;))
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(cbstate.equals(Boolean.TRUE)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.ShowSlides();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb.postEvent(evt);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.NoSlides();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb.postEvent(evt);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (cbname.equals(&quot;Text&quot;))
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(cbstate.equals(Boolean.TRUE)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.ShowText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb.postEvent(evt);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.NoText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb.postEvent(evt);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">handleCheckbox()</FONT></TT> method
changes the state of the check boxes on the controls in response
to events that occur on the menu. When the state changes on the
menu, the state of the check boxes must be changed. To do this,
a <TT><FONT FACE="Courier">CheckBoxMenuItem</FONT></TT> event
is posted to the <TT><FONT FACE="Courier">ShowControls</FONT></TT>
object from the method handling the change in the menu. The method
to handle these events appears as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">// Change state of checkboxes if state
is different on menu<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void handleCheckboxMenuItem(Event
evt) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.arg.equals(&quot;No Text&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if (((CheckboxMenuItem) evt.target).getState() == true)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((Checkbox)
this.getComponent(5)).setState(false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((Checkbox)
this.getComponent(5)).setState(true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;No Slides&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(((CheckboxMenuItem) evt.target).getState() == true)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((Checkbox)
this.getComponent(4)).setState(false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((Checkbox)
this.getComponent(4)).setState(true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
The event handler can now process state changes from either the
controls or the menu. It must also be modified to react to the
two new buttons, AutoPlay and Stop, that were added to the controls.
The event handler in the <TT><FONT FACE="Courier">SlideControls</FONT></TT>
class passes all button-related events to the method <TT><FONT FACE="Courier">handleButton</FONT></TT>.
Modify this method to check for either of these buttons and to
trigger the appropriate method in the <TT><FONT FACE="Courier">SlidePanel</FONT></TT>.
The new <TT><FONT FACE="Courier">handleButton</FONT></TT> method
appears as
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void handleButton(String bname)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(bname.equals(&quot;&gt;&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ss.ShowNextSlide();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (bname.equals(&quot;&lt;&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.ShowPrevSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (bname.equals(&quot;|&lt;&lt;&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.ShowFirstSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (bname.equals(&quot;&gt;&gt;|&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.ShowLastSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (bname.equals(&quot;AutoPlay&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ss.StartPlay();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (bname.equals(&quot;Stop&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ss.StopPlay();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
Figure 19.1 shows the updated controls on the <TT><FONT FACE="Courier">SlideShow</FONT></TT>
application. Because both text and graphics are displayed in the
figure, the check boxes for slides and text are checked.
<P>
<A HREF="f19-1.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f19-1.gif" ><B>Figure 19.1 : </B><I>The updated controls for SlideShow.</I></A>
<H4><B>The Complete </B><TT><B><FONT FACE="Courier">ShowControls</FONT></B></TT><B>
Class</B></H4>
<P>
Although the changes to <TT><FONT FACE="Courier">ShowControls</FONT></TT>
are not as extensive as for other classes, a complete code listing,
shown in Listing 19.22, can help to clarify them.
<HR>
<BLOCKQUOTE>
<B>Listing 19.22. The </B><TT><B><FONT FACE="Courier">ShowControls</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* Control bar for moving through a slide show<BR>
&nbsp;*/<BR>
<BR>
class ShowControls extends Panel {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static SlidePanel ss;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Panel controls are attached to<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static MenuBar mb;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Menubar for the show<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Constructor requires a SlidePanel
to which the<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// controls are attached<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public ShowControls(SlidePanel theShow,
MenuBar mbar) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checkbox
cbSlides;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checkbox
cbText;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss
= theShow;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb
= mbar;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout(new
FlowLayout(FlowLayout.CENTER));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Button(&quot;|&lt;&lt;&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Button(&quot;&lt;&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Button(&quot;&gt;&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Button(&quot;&gt;&gt;|&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(cbSlides
= new Checkbox(&quot;Slides&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cbSlides.setState(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(cbText
= new Checkbox(&quot;Text&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cbText.setState(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Button(&quot;AutoPlay&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new
Button(&quot;Stop&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Determine which button was pressed
and act accordingly<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Actions will refer to the Slide
panel to which the<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// control bar is attached<BR>
&nbsp;&nbsp;&nbsp;&nbsp; public void handleButton(String bname)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(bname.equals(&quot;&gt;&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.ShowNextSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (bname.equals(&quot;&lt;&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.ShowPrevSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (bname.equals(&quot;|&lt;&lt;&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.ShowFirstSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (bname.equals(&quot;&gt;&gt;|&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.ShowLastSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (bname.equals(&quot;AutoPlay&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.StartPlay();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (bname.equals(&quot;Stop&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.StopPlay();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void handleCheckbox(Event
evt, String cbname, Boolean cbstate) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(cbname.equals(&quot;Slides&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(cbstate.equals(Boolean.TRUE)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.ShowSlides();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb.postEvent(evt);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.NoSlides();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb.postEvent(evt);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (cbname.equals(&quot;Text&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(cbstate.equals(Boolean.TRUE)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.ShowText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb.postEvent(evt);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.NoText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb.postEvent(evt);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Change state of checkboxes if
state is different on menu<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void handleCheckboxMenuItem(Event
evt) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.arg.equals(&quot;No Text&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(((CheckboxMenuItem) evt.target).getState() == true)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((Checkbox)
this.getComponent(5)).setState(false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((Checkbox)
this.getComponent(5)).setState(true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;No Slides&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(((CheckboxMenuItem) evt.target).getState() == true)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((Checkbox)
this.getComponent(4)).setState(false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((Checkbox)
this.getComponent(4)).setState(true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean action(Event evt,
Object arg) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.target instanceof Button) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handleButton((String)arg);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.target instanceof Checkbox) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handleCheckbox(evt,
((Checkbox) evt.target).getLabel(),<BR>
&Acirc;(Boolean) arg);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}if(evt.target
instanceof CheckboxMenuItem) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handleCheckboxMenuItem(evt);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
super.action(evt,arg);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="ChangestoSlideShow"><B>Changes to </B><TT><B><FONT SIZE=4 FACE="Courier">SlideShow</FONT></B></TT></A>
</H3>
<P>
The changes to the <TT><FONT FACE="Courier">SlideShow</FONT></TT>
class complete the necessary modifications. The <TT><FONT FACE="Courier">SlideShow</FONT></TT>
modifications supply the new menu with a corresponding event handler
and allow all command-line arguments to be supplied to the <TT><FONT FACE="Courier">SlidePanel</FONT></TT>
class.
<H4><B>Modifying the Menu</B></H4>
<P>
You can modify the <TT><FONT FACE="Courier">InitializeMenu()</FONT></TT>
method so that Edit appears on the menu bar. On the Edit menu
you add Cut, Copy, Paste, a separator, and Insert. Because the
Paste option is not available until a slide has been cut or copied,
you must ensure that its menu item is disabled when the menu is
first displayed. The event handler then must enable this menu
option after a <TT><FONT FACE="Courier">Cut</FONT></TT> or <TT><FONT FACE="Courier">Copy</FONT></TT>
event occurs.
<P>
The line to disable the Paste item looks like this:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">m.getItem(2).disable();</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">InitializeMenu()</FONT></TT> method
with the new menu items is shown in Listing 19.23.
<HR>
<BLOCKQUOTE>
<B>Listing 19.23. The </B><TT><B><FONT FACE="Courier">InitializeMenu()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">private void InitializeMenu()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mbar
= new MenuBar();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Menu
m = new Menu(&quot;File&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Load...&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Save...&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.addSeparator();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Exit&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mbar.add(m);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m
= new Menu(&quot;Edit&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Cut&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Copy&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Paste&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.addSeparator();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Insert&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.getItem(2).disable();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mbar.add(m);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m
= new Menu(&quot;Display&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Forward&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Back&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Beginning&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;End&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.addSeparator();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
CheckboxMenuItem(&quot;No Text&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
CheckboxMenuItem(&quot;No Slides&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mbar.add(m);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m
= new Menu(&quot;Help&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Help Topics&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.addSeparator();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;About SlideShow&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mbar.add(m);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Figure 19.2 shows the new Edit menu for the <TT><FONT FACE="Courier">SlideShow</FONT></TT>
application. Because there are no objects on the buffer, the Paste
option is dimmed.
<P>
<A HREF="f19-2.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f19-2.gif" ><B>Figure 19.2 :</B><I> The Edit menu for SlideShow.</I></A>
<H4><B>Modifying Declarations</B></H4>
<P>
The event handler must communicate with the controls to inform
them of state changes on the menu, so a reference to the controls
must be available to the event handler. This reference is declared
at the class level and set in the constructor for the class. The
declaration appears as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">protected ShowControls SlideControl;//
Controls to move through show</FONT></TT>
</BLOCKQUOTE>
<H4><B>Modifying the Constructor</B></H4>
<P>
The <TT><FONT FACE="Courier">SlideShow</FONT></TT> constructor
is modified to set the <TT><FONT FACE="Courier">SlideControl</FONT></TT>
object when it creates the controls. The controls are created
using the new constructor for the <TT><FONT FACE="Courier">ShowControls</FONT></TT>
class. The <TT><FONT FACE="Courier">ShowControls</FONT></TT> constructor
requires a menu bar as a parameter; therefore, the creation of
the menu bar is moved to the beginning of the constructor.
<P>
The <TT><FONT FACE="Courier">SlidePanel</FONT></TT> constructor
is now expecting an array of arguments instead of a single string.
Therefore, the <TT><FONT FACE="Courier">SlideShow</FONT></TT>
constructor is modified to accept an array of arguments and pass
them to <TT><FONT FACE="Courier">SlidePanel</FONT></TT>.
<P>
The new version of the <TT><FONT FACE="Courier">SlideShow</FONT></TT>
constructor with these three changes appears in Listing 19.24.
<HR>
<BLOCKQUOTE>
<B>Listing 19.24. The </B><TT><B><FONT FACE="Courier">SlideShow</FONT></B></TT><B>
constructor.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public SlideShow(String args[]) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InitializeMenu();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Menu creation moved to the top<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setMenuBar(mbar);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Menu attached to frame<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setBackground(Color.lightGray);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout(new BorderLayout());<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;Center&quot;,displayPanel
= new SlidePanel(args));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Set instance variable for controls
so it may be called in event handler<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Pass the controls a reference
to the menu<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;South&quot;,SlideControl
= new ShowControls(displayPanel, mbar));<BR>
<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>Modifying the </B><TT><B><FONT FACE="Courier">main()</FONT></B></TT><B>
Method</B></H4>
<P>
The only alteration to the <TT><FONT FACE="Courier">main()</FONT></TT>
method is that it should pass the entire array of input arguments
instead of only the first item in the array. This amounts to changing
the line
<BLOCKQUOTE>
<TT><FONT FACE="Courier">SlideShow ss = new SlideShow(args[0]);</FONT></TT>
</BLOCKQUOTE>
<P>
to the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">SlideShow ss = new SlideShow(args);</FONT></TT>
</BLOCKQUOTE>
<H4><B>Modifying the Event Handler</B></H4>
<P>
Several modifications must be made to the event handler for the
<TT><FONT FACE="Courier">SlideShow</FONT></TT> class. The handler
must accommodate events for each of the new menu options and the
events from the check boxes on the controls.
<P>
This is an appropriate time to consider breaking the event handler
into smaller objects. Perhaps it would be appropriate to have
one method for each type of component as is done in the <TT><FONT FACE="Courier">SlideControls</FONT></TT>
object. However, for the frame most of the events involve menu
items. Therefore, divide the event handler for <TT><FONT FACE="Courier">SlideShow</FONT></TT>
into pieces based on the four menus on the menu bar. A fifth method
will handle the state changes from the controls. The event handler
still exits the application in response to the <TT><FONT FACE="Courier">WINDOW_DESTROY</FONT></TT>
event.
<P>
The event handler checks the event target to determine if it is
an instance of a menu item or of a check box. If it is neither
of these, the event handler for the parent class is called. If
the target is a menu item, the event handler must determine the
menu where the item appears. The explicit casting makes this check
look more complex than it is. For example, the line
<BLOCKQUOTE>
<TT><FONT FACE="Courier">if (((Menu) ((MenuItem) evt.target).getParent()).getLabel().equals(&quot;File&quot;))
{</FONT></TT>
</BLOCKQUOTE>
<P>
casts the event target to a menu item and then gets the parent
of that menu item. The parent is cast as a menu, and the <TT><FONT FACE="Courier">getLabel()</FONT></TT>
method of the menu class is used to get the name of the menu.
If the name is File, the statement returns <TT><FONT FACE="Courier">true</FONT></TT>,
indicating this is an item on the File menu.
<P>
The new event handler appears in Listing 19.25.
<HR>
<BLOCKQUOTE>
<B>Listing 19.25. The event handler for </B><TT><B><FONT FACE="Courier">SlideShow</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">// Handles events in main window<BR>
// Even handlers are supplied for each menu on the menu bar<BR>
public boolean handleEvent(Event evt) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (evt.id == Event.WINDOW_DESTROY
&amp;&amp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evt.target
instanceof SlideShow)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if(evt.target instanceof
MenuItem) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(((Menu) ((MenuItem) evt.target).getParent()).<BR>
&Acirc;getLabel().equals(&quot;File&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
handleFileEvent(evt);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (((Menu) ((MenuItem) evt.target).getParent()).<BR>
&Acirc;getLabel().equals(&quot;Edit&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
handleEditEvent(evt);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (((Menu) ((MenuItem) evt.target).getParent()).<BR>
&Acirc;getLabel().equals(&quot;Display&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
handleDisplayEvent(evt);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (((Menu) ((MenuItem) evt.target).getParent()).<BR>
&Acirc;getLabel().equals(&quot;Help&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
handleHelpEvent(evt);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (evt.target instanceof
Checkbox) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
handleCheckbox(evt, (Checkbox) evt.target);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return super.handleEvent(evt);&nbsp;&nbsp;&nbsp;&nbsp;
// Let parent handle event<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
You can now create each of the new methods called in the event
handler. These are reviewed in the order they are listed in the
event handler.
<P>
The <TT><FONT FACE="Courier">handleFileEvent()</FONT></TT> method
must allow saves in addition to the loads and exits that were
in the original event handler. When the <TT><FONT FACE="Courier">Save</FONT></TT>
item is selected on the menu, the event handler responds by creating
a new File dialog box. The parent for this box is the current
frame, the title is Save Slide Show, and the type is a Save dialog
box. After the box is created, the <TT><FONT FACE="Courier">setFile()</FONT></TT>
method is used to set the extension for the file to <TT><FONT FACE="Courier">.txt</FONT></TT>.
This encourages the user to save the show as a text file. When
the user has selected the filename, the new filename and directory
are passed to the <TT><FONT FACE="Courier">saveShow()</FONT></TT>
method in the <TT><FONT FACE="Courier">SlidePanel</FONT></TT>
class.
<P>
The complete <TT><FONT FACE="Courier">handleFileEvent()</FONT></TT>
method is shown in Listing 19.26.
<HR>
<BLOCKQUOTE>
<B>Listing 19.26. The </B><TT><B><FONT FACE="Courier">handleFileEvent()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">// Event handler responds to events from
the File menu<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleFileEvent(Event
evt) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(evt.target
instanceof MenuItem) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.arg.equals(&quot;Load...&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
FileName;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileDialog
fd =<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new
FileDialog((Frame) this,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Get
New Slide Show&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileDialog.LOAD);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd.setFile(&quot;*.txt&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName
= fd. getDirectory() + fd.getFile();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.LoadShow(FileName);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Save...&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
FileName;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileDialog
fd =<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new FileDialog((Frame) this,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Save
Slide Show&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileDialog.SAVE);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd.setFile(&quot;*.txt&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName
= fd.getDirectory() + fd.getFile();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.saveShow(FileName);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Exit&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
super.handleEvent(evt);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Let parent
handle event<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">handleEditEvent()</FONT></TT> method
is used to respond to the items on the edit menu. The Paste item
should be enabled only when the Cut or Copy command is selected.
The line to do this appears as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">((Menu)((MenuItem) evt.target).getParent()).getItem(2).enable();</FONT></TT>
</BLOCKQUOTE>
<P>
This line casts the event target as a menu item and uses the <TT><FONT FACE="Courier">getParent()</FONT></TT>
method for the <TT><FONT FACE="Courier">MenuItem</FONT></TT> class
to get the menu where the item is listed. This an instance of
the Edit menu. The Paste command that you want to enable is the
third item on this particular Edit menu, but because the index
for the menu item starts at zero, the third item has an index
of 2. This item is enabled with the <TT><FONT FACE="Courier">enable</FONT></TT>
command. Each of these steps could have been written out separately,
as in the following code:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">MenuItem targetItem;<BR>
Menu&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;targetMenu;<BR>
<BR>
displayPanel.copySlide();<BR>
targetItem = (MenuItem) evt.target;<BR>
targetMenu = (Menu) targetItem.getParent();<BR>
targetMenu.getItem(2).enable();</FONT></TT>
</BLOCKQUOTE>
<P>
The event handler is modified to handle the new items that have
been added to the menu. The rewritten event handler appears in
Listing 19.27.
<HR>
<BLOCKQUOTE>
<B>Listing 19.27. The </B><TT><B><FONT FACE="Courier">handleEditEvent()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">// Event handler responds to events from
the Event menu<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleEditEvent(Event
evt) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(evt.target
instanceof MenuItem) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.arg.equals(&quot;Cut&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.cutSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((Menu)((MenuItem)
evt.target).getParent()).<BR>
&Acirc;getItem(2).enable();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Copy&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((Menu)((MenuItem)
evt.target).getParent()).<BR>
&Acirc;getItem(2).enable();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.copySlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Paste&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.pasteSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Insert&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
FileName;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileDialog
fd =<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new FileDialog((Frame) this,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Get
New Slide Show&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileDialog.LOAD);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd.setFile(&quot;*.gif&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName
= fd.getFile();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.InsertSlide(FileName);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
super.handleEvent(evt);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Let parent
handle event<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">handleDisplayEvent()</FONT></TT>
method responds to the items on the Display menu. The items to
maneuver through the show are handled in the same manner as in
the original application. The response to the <TT><FONT FACE="Courier">CheckboxMenuItems</FONT></TT>
is modified to post the event to the control panel. The response
to the AutoPlay and Stop menu items is to call the appropriate
method in the <TT><FONT FACE="Courier">SlidePanel</FONT></TT>
class. Listing 19.28 shows the complete <TT><FONT FACE="Courier">handleDisplayEvent()</FONT></TT>
method.
<HR>
<BLOCKQUOTE>
<B>Listing 19.28. The </B><TT><B><FONT FACE="Courier">handleDisplayEvent()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">// Event handler responds to events from
the Display menu<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleDisplayEvent(Event
evt) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(evt.target
instanceof CheckboxMenuItem) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.arg.equals(&quot;No Text&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(((CheckboxMenuItem) evt.target).getState() == true){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.NoText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SlideControl.postEvent(evt);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.ShowText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SlideControl.postEvent(evt);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;No Slides&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(((CheckboxMenuItem) evt.target).getState() == true) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.NoSlides();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SlideControl.postEvent(evt);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.ShowSlides();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SlideControl.postEvent(evt);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if(evt.target instanceof MenuItem) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.arg.equals(&quot;Forward&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.ShowNextSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Back&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.ShowPrevSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Beginning&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.ShowFirstSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;End&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.ShowLastSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
super.handleEvent(evt);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Let parent
handle event<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The response to the items on the Help menu does not change. However,
because the event handler is divided into several methods, a new
method, shown in Listing 19.29, is created to handle these events.
<HR>
<BLOCKQUOTE>
<B>Listing 19.29. The </B><TT><B><FONT FACE="Courier">handleHelpEvent()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">// Event handler responds to events from
the Help menu<BR>
public boolean handleHelpEvent(Event evt) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(evt.target instanceof MenuItem)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.arg.equals(&quot;About SlideShow&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AboutBox
ab = new AboutBox(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ab.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Help Topics&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HelpBox
ab = new HelpBox(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ab.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return super.handleEvent(evt);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Let parent handle event<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">SlideShow</FONT></TT> object modifies
the state of the check boxes on the menu in response to changes
on the controls. These are <TT><FONT FACE="Courier">Checkbox</FONT></TT>
events that are handled in the new method <TT><FONT FACE="Courier">handleCheckbox()</FONT></TT>.
This method checks the name and state of the check box and modifies
the current state of the menu accordingly. The new method appears
in Listing 19.30.
<HR>
<BLOCKQUOTE>
<B>Listing 19.30. The </B><TT><B><FONT FACE="Courier">handleCheckbox()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean handleCheckbox(Event evt,
Checkbox cb) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean cbstate = cb.getState();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String cbname = cb.getLabel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (cbname.equals(&quot;Slides&quot;))
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(cbstate == true)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((CheckboxMenuItem)
mbar.getMenu(2).getItem(6)).setState(false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((CheckboxMenuItem)
mbar.getMenu(2).getItem(6)).setState(true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (cbname.equals(&quot;Text&quot;))
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(cbstate == true)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
((CheckboxMenuItem) mbar.getMenu(2).getItem(5)).setState(false);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
((CheckboxMenuItem) mbar.getMenu(2).getItem(5)).setState(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return super.handleEvent(evt);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>The Complete </B><TT><B><FONT FACE="Courier">SlideShow</FONT></B></TT><B>
Class</B></H4>
<P>
The <TT><FONT FACE="Courier">SlideShow</FONT></TT> class now includes
all the changes discussed in this section. Listing 19.31 shows
the code for the complete class.
<HR>
<BLOCKQUOTE>
<B>Listing 19.31. The </B><TT><B><FONT FACE="Courier">SlideShow</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* Creates Window with panel for the slideshow<BR>
&nbsp;* plus a Menu and controls for the SlideShow<BR>
&nbsp;*/<BR>
<BR>
public class SlideShow extends Frame {<BR>
protected MenuBar mbar;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Menu for the slideshow<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected SlidePanel displayPanel;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Panel to display the show<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected ShowControls SlideControl;//
Controls to move through show<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public SlideShow(String args[])
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InitializeMenu();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setMenuBar(mbar);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setBackground(Color.lightGray);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout(new
BorderLayout());<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;Center&quot;,displayPanel
= new SlidePanel(args));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;South&quot;,SlideControl
= new ShowControls(displayPanel, mbar));<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Creates the menu and attaches
it to the MenuBar<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private void InitializeMenu()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mbar
= new MenuBar();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Menu
m = new Menu(&quot;File&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Load...&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Save...&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.addSeparator();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Exit&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mbar.add(m);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m
= new Menu(&quot;Edit&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Cut&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Copy&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Paste&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.addSeparator();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Insert&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.getItem(2).disable();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mbar.add(m);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m
= new Menu(&quot;Display&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Forward&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Back&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Beginning&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;End&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.addSeparator();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
CheckboxMenuItem(&quot;No Text&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
CheckboxMenuItem(&quot;No Slides&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mbar.add(m);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m
= new Menu(&quot;Help&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Help Topics&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.addSeparator();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;About SlideShow&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mbar.add(m);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Event handler responds to events
from the File menu<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleFileEvent(Event
evt) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(evt.target
instanceof MenuItem) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.arg.equals(&quot;Load...&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
FileName;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileDialog
fd =<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new FileDialog((Frame) this,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Get
New Slide Show&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileDialog.LOAD);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd.setFile(&quot;*.txt&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName
= fd. getDirectory() + fd.getFile();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.LoadShow(FileName);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Save...&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
FileName;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileDialog
fd =<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new FileDialog((Frame) this,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Save
Slide Show&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileDialog.SAVE);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd.setFile(&quot;*.txt&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName
= fd.getDirectory() + fd.getFile();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.saveShow(FileName);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Exit&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
super.handleEvent(evt);&nbsp;&nbsp;&nbsp;&nbsp; // Let parent
handle event<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Event handler responds to events
from the Event menu<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleEditEvent(Event
evt) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(evt.target
instanceof MenuItem) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.arg.equals(&quot;Cut&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.cutSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((Menu)((MenuItem)
evt.target).getParent()).getItem(2).enable();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Copy&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((Menu)((MenuItem)
evt.target).getParent()).getItem(2).enable();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.copySlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Paste&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.pasteSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Insert&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
FileName;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileDialog
fd =<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new FileDialog((Frame) this,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Get
New Slide Show&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileDialog.LOAD);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd.setFile(&quot;*.gif&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileName
= fd.getFile();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.InsertSlide(FileName);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
super.handleEvent(evt);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Let parent
handle event<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Event handler responds to events
from the Display menu<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleDisplayEvent(Event
evt) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(evt.target
instanceof CheckboxMenuItem) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.arg.equals(&quot;No Text&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(((CheckboxMenuItem) evt.target).getState() == true){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.NoText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SlideControl.postEvent(evt);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.ShowText();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SlideControl.postEvent(evt);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;No Slides&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(((CheckboxMenuItem) evt.target).getState() == true) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.NoSlides();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SlideControl.postEvent(evt);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.ShowSlides();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
SlideControl.postEvent(evt);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if(evt.target instanceof MenuItem) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.arg.equals(&quot;Forward&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.ShowNextSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Back&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.ShowPrevSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Beginning&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.ShowFirstSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;End&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayPanel.ShowLastSlide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
super.handleEvent(evt);&nbsp;&nbsp;&nbsp;&nbsp; // Let parent
handle event<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Event handler responds to events
from the Help menu<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleHelpEvent(Event
evt) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(evt.target
instanceof MenuItem) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.arg.equals(&quot;About SlideShow&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AboutBox
ab = new AboutBox(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ab.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Help Topics&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HelpBox
ab = new HelpBox(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ab.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
super.handleEvent(evt);&nbsp;&nbsp;&nbsp;&nbsp; // Let parent
handle event<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleCheckbox(Event
evt, Checkbox cb) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean
cbstate = cb.getState();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
cbname = cb.getLabel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(cbname.equals(&quot;Slides&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(cbstate == true)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((CheckboxMenuItem)
mbar.getMenu(2).<BR>
&Acirc;getItem(6)).setState(false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((CheckboxMenuItem)
mbar.getMenu(2).<BR>
&Acirc;getItem(6)).setState(true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (cbname.equals(&quot;Text&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(cbstate == true)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((CheckboxMenuItem)
mbar.getMenu(2).<BR>
&Acirc;getItem(5)).setState(false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((CheckboxMenuItem)
mbar.getMenu(2).<BR>
&Acirc;getItem(5)).setState(true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
super.handleEvent(evt);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Handles events in main window
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Even handlers are supplied for
each menu on the menu bar<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleEvent(Event
evt) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if
(evt.id == Event.WINDOW_DESTROY &amp;&amp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evt.target
instanceof SlideShow)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if(evt.target instanceof MenuItem) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(((Menu) ((MenuItem) evt.target).getParent()).<BR>
&Acirc;getLabel().equals(&quot;File&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
handleFileEvent(evt);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (((Menu) ((MenuItem) evt.target).getParent()).<BR>
&Acirc;getLabel().equals(&quot;Edit&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
handleEditEvent(evt);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (((Menu) ((MenuItem) evt.target).getParent()).<BR>
&Acirc;getLabel().equals(&quot;Display&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
handleDisplayEvent(evt);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (((Menu) ((MenuItem) evt.target).getParent()).<BR>
&Acirc;getLabel().equals(&quot;Help&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
handleHelpEvent(evt);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.target instanceof Checkbox) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
handleCheckbox(evt, (Checkbox) evt.target);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
super.handleEvent(evt);&nbsp;&nbsp;&nbsp;&nbsp; // Let parent
handle event<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// main method used to start application
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String args[]){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Verify that there is a filename to attempt to load show<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(args.length &lt;= 0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Usage:
java SlideShow filename.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Create instance of this object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SlideShow
ss = new SlideShow(args);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.setTitle(&quot;Slide
Show&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Set the title of the frame<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.pack();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Pack components<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dimension
d;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d
= Toolkit.getDefaultToolkit().getScreenSize();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.resize(d.width,
d.height);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss.show();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Display the frame<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H2><A NAME="TheFinalVersionofSlideShow"><B><FONT SIZE=5 COLOR=#Ff0000>The
Final Version of </FONT></B><TT><B><FONT SIZE=5 COLOR=#Ff0000 FACE="Courier">SlideShow</FONT></B></TT></A>
</H2>
<P>
Referring back to the design, you can see that the completed modification
includes all the changes listed. All the new objects have been
added. The modifications to existing objects have been completed.
The menu items listed in the design now appear and function on
the working application. For easy reference, the application is
available on the CD-ROM that accompanies this book. Also, each
class-level object has its own section in this chapter, so you
can refer to them individually for reference if necessary.
<P>
The <TT><FONT FACE="Courier">SlideShow</FONT></TT> application
with its modifications represents a real-world development project.
Adding the features in this chapter should have given you insight
into how simple applications can evolve into large projects over
time.
<H2><A NAME="TestingandDebugging"><B><FONT SIZE=5 COLOR=#Ff0000>Testing
and Debugging</FONT></B></A></H2>
<P>
Testing is even more crucial for application upgrades than it
is for the initial release. At this point, your users are accustomed
to the way the original application operates and do not want any
surprise changes. Your thorough testing should ensure that no
such surprises occur. The users will also be paying careful attention
to the places where the application has changed. Again, your tests
should make sure they see what they are expecting.
<P>
To test an upgrade thoroughly, create a completely new set of
tests. Document these tests for the same reasons that you documented
the test plan for the original application. In addition to testing
the new features, you should also run the tests from the initial
installation. This verifies that all the features originally provided
still work.
<P>
It is useful to have a separate directory to run tests. This keeps
the results from being confused with those of a previous test.
Wait until all the modifications for a release are completed before
beginning testing. Just as with new development, perform all testing
before correcting problems.
<P>
The remainder of this section provides a brief set of tests for
each change implemented.
<H3><A NAME="TestingtheBuildandSaveCapability"><B>Testing the
Build-and-Save Capability</B></A></H3>
<P>
The build-and-save capability affects several portions of the
application. Tests must be provided for all the new features.
The first set of questions deals with the options added to the
menu:
<UL>
<LI>Does the Edit menu appear on the menu bar?
<LI>Is the Cut option available on the Edit menu?
<LI>Is the Copy option available on the Edit menu?
<LI>Is the Paste option present but dimmed on the Edit menu when
the program first starts?
<LI>Is the Insert option available on the Edit menu?
<LI>Is the Save option available on the File menu?
<LI>After a slide is copied with the Copy option, is the Paste
option available?
<LI>After a slide is cut with the Cut option, is the Paste option
available?
</UL>
<P>
In addition to verifying that the option appears correctly on
the menu, you need to make sure that the application saves work
correctly:
<UL>
<LI>Does the Save option produce a File dialog box and allow the
user to save a file?
<LI>Can the user load a file that has been saved in a prior session?
</UL>
<P>
The next set of questions focuses on correct functioning of the
Cut, Copy, Paste, and Insert options.
<UL>
<LI>Do the picture and text disappear from the screen when the
Cut option is selected?
<LI>Are the picture and text inserted prior to the current picture
when the Paste option is selected after the Cut option?
<LI>Do the picture and text remain on the screen when the Copy
option is selected?
<LI>Are the picture and text inserted prior to the current picture
and text when the Paste option is selected after the Copy option?
<LI>Does the Insert option bring up a File dialog box?
<LI>Does the File dialog box from the Insert option allow you
to select a <TT><FONT FACE="Courier">.gif</FONT></TT> file to
load?
<LI>When a file is selected in the File dialog box from the Insert
option, do the picture and text load into the show prior to the
current slide?
</UL>
<H3><A NAME="TestingtheCheckBoxes"><B>Testing the Check Boxes</B></A>
</H3>
<P>
Build-and-save has the longest test plan because it is changed
so extensively. The check boxes do not take as long to verify.
However, care must still be taken to verify the interaction between
the check boxes and the menu. Suggested test questions include
the following:
<UL>
<LI>When the Slides box is cleared, is the display of pictures
hidden?
<LI>When the Text box is cleared, is the display of text hidden?
<LI>When the Slides box is checked, are the pictures displayed
again?
<LI>When the Text box is checked, is the text displayed again?
<LI>When the Slides box is checked, is the No Slides menu option
unchecked?
<LI>When the Slides box is cleared, is the No Slides menu option
checked?
<LI>When the Text box is checked, is the No Text menu option unchecked?
<LI>When the Text box is cleared, is the No Text menu option checked?
<LI>When the Slides box is checked, is the No Slides menu option
unchecked?
<LI>When the No Slides menu option is checked, is the Slides box
cleared?
<LI>When the No Slides menu option is cleared, is the Slides box
checked?
<LI>When the No Text menu option is checked, is the Text box cleared?
<LI>When the No Text menu option is cleared, is the Text box checked?
</UL>
<H3><A NAME="TestingtheCapabilitytoReadMultiple"><B>Testing the
Capability to Read Multiple Files</B></A></H3>
<P>
Compared with the first two changes, the test plan for the capability
to read multiple files is quite short. Test questions include
the following:
<UL>
<LI>When the command line contains a list of two or more files
to load, are they visible in the program?
<LI>When the command line contains only one file, is it correctly
loaded into the program?
</UL>
<H3><A NAME="TestingtheContinuousPlayCapability"><B>Testing the
Continuous-Play Capability</B></A></H3>
<P>
To test the continuous-play feature, you need to verify both the
start and stop of continuous play. The questions to ask follow:
<UL>
<LI>When the AutoPlay button is selected, are new slides displayed
on a four-second interval?
<LI>When the Stop button is selected, does the screen remain on
the same slide?
</UL>
<H3><A NAME="TestingtheNumberofPossibleSlides"><B>Testing the
Number of Possible Slides</B></A></H3>
<P>
Changing the number of slides that can be held internally will
not result any obvious changes to the application. However, it
is still important to verify that the change accomplished what
is needed. The test plan for this modification is simply
<UL>
<LI>Can a show containing more than 20 slides be loaded into the
program?
</UL>
<H2><A NAME="Summary"><B><FONT SIZE=5 COLOR=#Ff0000>Summary</FONT></B></A>
</H2>
<P>
This chapter covers several ideas relating to the modification
of existing applications. Various upgrades to the <TT><FONT FACE="Courier">SlideShow</FONT></TT>
application have been developed to serve as examples of how applications
can be modified and to further demonstrate the capabilities and
limitations of the Java language.
<P>
At this point you should be comfortable with reading and understanding
existing Java code. You should be able to create new classes by
extending existing classes and adding features. You have covered
most of the techniques involved in building Java applications
and can create your own intermediate applets and applications.
You are ready to move on to building advanced applets and applications.
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch18.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch18.htm"><IMG SRC="pc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/index.htm"><IMG SRC="hb.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch20.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch20.htm"><IMG 
SRC="nc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>
<HR WIDTH="100%"></P>
<P>


</BODY>
</HTML>