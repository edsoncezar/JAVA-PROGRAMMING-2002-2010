<HTML>

<HEAD>
   <TITLE>Chapter 2 -- Getting Started with the JDK</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<!--Begin JavaScript roadmap code.  If editing downloaded HTML source, delete
 this portion.-->

<script language="JavaScript">
<!--

function TripodShowPopup()
{
   var bName=navigator.appName;
   var bVer=parseInt(navigator.appVersion);
   var now = new Date();
   var popupURL = "/adm/popup/roadmap.shtml?"+"member_name=er4ebus&path=peternortonjavaprograming&client_ip=200.190.100.218&ts=1015336086&ad_type=POPUP&category=net&id=7f1aa6ad31f230df9ce2d52695902666";
   var popupName = "TripodPopup";

   if (bName=="Netscape" && bVer<=3)
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=614,height=150');
   }
   else
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=604,height=135');
   }
   popup.location = popupURL;
}

if(window.parent==window)
{
   TripodShowPopup();
}

// -->
</script>

<script language="JavaScript1.2">
<!--

function changeOpenFunction()
{
   var original_window_open = window.open;
   function new_open_function(url, name, features, replace)
   {
      if(name != "TripodPopup")
         return original_window_open(url, name, features, replace);
   }
   window.open = new_open_function;
}
var bName = navigator.appName;

if(bName != "Netscape")
   changeOpenFunction();

// -->
</script>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#Ff0000>Chapter 2</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#Ff0000>Getting Started with the JDK</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#TheJavaDevelopersEnvironment" >The Java Developer's Environment</A>
<UL>
<LI><A HREF="#TheJavaAPIandCoreLanguageFunctions" >The Java API and Core Language Functions</A>
<LI><A HREF="#ToolsintheJDK" >Tools in the JDK</A>
</UL>
<LI><A HREF="#PowerStartforSolaris" >Power Start for Solaris</A>
<UL>
<LI><A HREF="#ObtainingtheJavaDevelopersKit" >Obtaining the Java Developer's Kit</A>
<LI><A HREF="#InstallingtheJavaDevelopersKit" >Installing the Java Developer's Kit</A>
<LI><A HREF="#TestingtheInstallation" >Testing the Installation</A>
</UL>
<LI><A HREF="#PowerStartforWindows95NT" >Power Start for Windows 95/NT</A>
<UL>
<LI><A HREF="#ObtainingtheJavaDevelopersKitNT" >Obtaining the Java Developer's Kit</A>
<LI><A HREF="#InstallingtheJavaDevelopersKitNT" >Installing the Java Developer's Kit</A>
<LI><A HREF="#TestingtheInstallationNT" >Testing the Installation</A>
</UL>
<LI><A HREF="#PowerStartforMacintosh" >Power Start for Macintosh</A>
<UL>
<LI><A HREF="#ObtainingtheJavaDevelopersKitMAC" >Obtaining the Java Developer's Kit</A>
<LI><A HREF="#InstallingtheJavaDevelopersKitMAC" >Installing the Java Developer's Kit</A>
<LI><A HREF="#TestingtheInstallationMAC" >Testing the Installation</A>
</UL>
<LI><A HREF="#PowerStartforOS2" >Power Start for OS/2</A>
<UL>
<LI><A HREF="#ObtainingtheJavaDevelopersKitOS2" >Obtaining the Java Developer's Kit</A>
<LI><A HREF="#InstallingtheJavaDevelopersKitOS2" >Installing the Java Developer's Kit</A>
<LI><A HREF="#TestingtheInstallationOS2" >Testing the Installation</A>
<LI><A HREF="#PerformanceTuningforOS2" >Performance Tuning for OS/2</A>
</UL>
<LI><A HREF="#PowerStartforAIX" >Power Start for AIX</A>
<UL>
<LI><A HREF="#ObtainingtheJavaDevelopersKitAIX" >Obtaining the Java Developer's Kit</A>
<LI><A HREF="#InstallingtheJavaDevelopersKitAIX" >Installing the Java Developer's Kit</A>
<LI><A HREF="#TestingtheInstallationAIX" >Testing the Installation</A>
</UL>
<LI><A HREF="#MakingtheTransitionfromcctoJava" >Making the Transition from C/C++ to Java</A>
<UL>
<LI><A HREF="#JavaHasNoCompiletoMachineCode" >Java Has No Compile to Machine Code</A>
<LI><A HREF="#JavaHasNoExternalCSyntax" >Java Has No External C Syntax</A>
<LI><A HREF="#JavaHasNoMultipleInheritance" >Java Has No Multiple Inheritance</A>
<LI><A HREF="#JavaHasNoNamespaceProblems" >Java Has No Namespace Problems</A>
<LI><A HREF="#JavaHasNoPointers" >Java Has No Pointers</A>
</UL>
<LI><A HREF="#JavaHasNoSeparateHeaderFiles" >Java Has No Separate Header Files</A>
<UL>
<LI><A HREF="#JavaHasNoStandaloneFunctions" >Java Has No Stand-alone Functions</A>
<LI><A HREF="#SomeJavaProgramsHaveNomainFunction" >Some Java Programs Have No main Function</A>
<LI><A HREF="#JavaHasNoTemplates" >Java Has No Templates</A>
<LI><A HREF="#JavaHasExceptionHandling" >Java Has Exception Handling</A>
<LI><A HREF="#JavaHasAutomatedGarbageCollection" >Java Has Automated Garbage Collection</A>
</UL>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
After reading about the features of the Java programming language
in <A HREF="ch1.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch1.htm" >Chapter 1</A>, &quot;Introducing Java,&quot;
you are probably eager to get started. Before you can dive into
development for Java, you need to install a developer's environment
on your computer. Although commercial vendors are racing to get
Java development packages to the market, everything you need to
get started creating hot new Java applications is available directly
from JavaSoft. This free development environment straight from
the creators of Java is called the <I>Java Developer's Kit</I>,
or JDK.
<P>
To give you a jump start on Java development, this chapter details
how to obtain, install, and configure the JDK on your computer.
After you read the section on the Java environment, you might
want to jump to the section detailing how to install a Java developer's
environment on your particular computer system. In this chapter,
you will find sections designed to give you a quick start no matter
what operating system you use. You will find quick starts for
UNIX platforms, including Solaris and AIX; Windows 95/NT; Macintosh;
and OS/2.
<P>
If you are a current C/C++ programmer, insight into making the
transition from C/C++ to Java is also essential for getting started
with Java. For this reason, the chapter covers key concepts for
making that transition.
<H2><A NAME="TheJavaDevelopersEnvironment"><FONT SIZE=5 COLOR=#Ff0000>The
Java Developer's Environment</FONT></A></H2>
<P>
The development environment for Java is surprisingly rich, especially
considering that the Java programming language is fairly new.
Most Java developers and programmers find that the JDK contains
everything they need to get started creating powerful Java programs.
This is because the developer's kit includes the Java programming
language core functionality, the Java Application Programming
Interface (API) complete with multiple package sets, and essential
tools for creating Java programs.
<P>
The Java Developer's Kit is currently available for most operating
systems. You can obtain the Sun Solaris, Windows 95/NT, and Macintosh
versions directly from JavaSoft. Because the JavaSoft FTP site
is extremely busy, however, you might have to use a mirror site
to obtain the source code for the JDK. Table 2.1 is a list of
the main JavaSoft FTP site and mirror sites for the Solaris, Windows
95/NT, and Macintosh versions of the JDK.
<P>
When you access one of the FTP sites listed in this section, you
will want to use the directory path given instead of the full
path to the JDK. This will allow you to see the entire contents
of the associated directory. In this way, you can download the
most current version of the JDK for your system.<BR>
<P>
<CENTER><B>Table 2.1. FTP sites for the Java JDK.</B></CENTER>

<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=90%>
<TR><TD WIDTH=75><CENTER><I>Site</I></CENTER></TD><TD WIDTH=250><CENTER><I>URL Path to JDK</I></CENTER>
</TD><TD WIDTH=135><CENTER><I>FTP Site</I></CENTER></TD></TR>
<TR><TD WIDTH=75>JavaSoft FTP</TD><TD WIDTH=250><TT><FONT FACE="Courier"><A HREF="tppmsgs\msgs0.htm#22" tppabs="ftp://ftp.javasoft.com/pub">ftp://ftp.javasoft.com/pub</A></FONT></TT>
</TD><TD WIDTH=135><TT><FONT FACE="Courier">ftp.javasoft.com</FONT></TT>
</TD></TR>
<TR><TD WIDTH=75>USA mirror</TD><TD WIDTH=250><TT><FONT FACE="Courier"><A HREF="tppmsgs\msgs0.htm#23" tppabs="ftp://sunsite.unc.edu/pub/languages/java">ftp://sunsite.unc.edu/pub/languages/java</A></FONT></TT>
</TD><TD WIDTH=135><TT><FONT FACE="Courier">sunsite.unc.edu</FONT></TT>
</TD></TR>
<TR><TD WIDTH=75>USA mirror</TD><TD WIDTH=250><TT><FONT FACE="Courier"><A HREF="tppmsgs\msgs0.htm#24" tppabs="ftp://java.dnx.com/">ftp://java.dnx.com</A></FONT></TT>
</TD><TD WIDTH=135><TT><FONT FACE="Courier">java.dnx.com</FONT></TT>
</TD></TR>
<TR><TD WIDTH=75>UK mirror</TD><TD WIDTH=250><TT><FONT FACE="Courier"><A HREF="tppmsgs\msgs0.htm#25" tppabs="ftp://sunsite.doc.ic.ac.uk/packages/java">ftp://sunsite.doc.ic.ac.uk/packages/java</A></FONT></TT>
</TD><TD WIDTH=135><TT><FONT FACE="Courier">sunsite.doc.ic.ac.uk</FONT></TT>
</TD></TR>
<TR><TD WIDTH=75>Sweden mirror</TD><TD WIDTH=250><TT><FONT FACE="Courier"><A HREF="tppmsgs\msgs0.htm#26" tppabs="ftp://ftp.luth.se/pub/infosystems/www/hotjava">ftp://ftp.luth.se/pub/infosystems/www/hotjava</A></FONT></TT>
</TD><TD WIDTH=135><TT><FONT FACE="Courier">ftp.luth.se</FONT></TT>
</TD></TR>
<TR><TD WIDTH=75>German mirror</TD><TD WIDTH=250><TT><FONT FACE="Courier"><A HREF="tppmsgs\msgs0.htm#27" tppabs="ftp://sunsite.informatik.rwth-de/pub/mirror/">ftp://sunsite.informatik.rwth-de/pub/mirror/</A> </FONT></TT><FONT SIZE=2 FACE="ZapfDingbats">&Acirc;<TT><FONT 
FACE="Courier">java.sun.comaachen.de</FONT></TT></FONT>
</TD><TD WIDTH=135><FONT FACE="Courier">sunsite.informatik
<BR>
</FONT><FONT SIZE=2 FACE="ZapfDingbats">&Acirc;<TT><FONT FACE="Courier">rwth-de.</FONT></TT></FONT>
</TD></TR>
<TR><TD WIDTH=75>Japan mirror</TD><TD WIDTH=250><TT><FONT FACE="Courier"><A HREF="tppmsgs\msgs0.htm#28" tppabs="ftp://ftp.glocom.ac.jp/mirror/java.sun.com">ftp://ftp.glocom.ac.jp/mirror/java.sun.com</A></FONT></TT>
</TD><TD WIDTH=135><TT><FONT FACE="Courier">ftp.glocom.ac.jp</FONT></TT>
</TD></TR>
<TR><TD WIDTH=75>Korea mirror</TD><TD WIDTH=250><TT><FONT FACE="Courier"><A HREF="tppmsgs\msgs0.htm#29" tppabs="ftp://ftp.kaist.ac.kr/pub/java">ftp://ftp.kaist.ac.kr/pub/java</A></FONT></TT>
</TD><TD WIDTH=135><TT><FONT FACE="Courier">ftp.kaist.ac.kr</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
Other versions of the JDK also are available. You will find versions
for OS/2, AIX, and most UNIX platforms. The OS/2 and AIX versions
of the JDK are available from IBM, but you have to register to
use the IBM developers area. You can access IBM's online registration
form at the following URL:
<BLOCKQUOTE>
<TT><A HREF="tppmsgs\msgs0.htm#30" tppabs="http://www.hursley.ibm.com/javainfo/download/index.html">http://www.hursley.ibm.com/javainfo/download/index.html</A></TT>
</BLOCKQUOTE>
<P>
There is, in fact, little difference in the actual workings of
the developer's environment for most UNIX versions of the JDK.
This means that once you obtain a JDK source for your computer,
you can use most of the tips you will find in the Solaris section
to help you get started. Because there are some key differences
in the AIX configuration of the JDK, AIX users will find a section
that outlines these differences.
<P>
Similarly, the OS/2 version of the JDK strongly relates to the
Windows 95/NT version of the JDK. Therefore, although you will
find a section for OS/2, you should first review the Windows 95/NT
installation instructions.
<H3><A NAME="TheJavaAPIandCoreLanguageFunctions">The Java API
and Core Language Functions</A></H3>
<P>
The heart of the Java programming language is contained in a set
of packages called <TT><FONT FACE="Courier">java.lang</FONT></TT>,
which is a part of the Java Application Programming Interface.
Although the <TT><FONT FACE="Courier">java.lang</FONT></TT> package
provides the core functionality of the Java programming language,
it is not the only package included in the Java Developer's Kit.
<P>
The JDK includes the following packages: <TT><FONT FACE="Courier">java.applet</FONT></TT>,
<TT><FONT FACE="Courier">java.awt</FONT></TT>, <TT><FONT FACE="Courier">java.awt.image</FONT></TT>,
<TT><FONT FACE="Courier">java.awt.peer</FONT></TT>, <TT><FONT FACE="Courier">java.io</FONT></TT>,
<TT><FONT FACE="Courier">java.lang</FONT></TT>, <TT><FONT FACE="Courier">java.net</FONT></TT>,
and <TT><FONT FACE="Courier">java.util</FONT></TT>. These packages
provide everything you need to start creating powerful Java applications
quickly. The JDK also includes an additional package called <TT><FONT FACE="Courier">sun.tools.debug</FONT></TT>,
which is designed to make the application-debugging process easier.
<P>
Currently, you can also obtain the Java database connectivity
application programming interface, which enables developers to
write Java applications that access databases. The initial specification
for the Java database classes was released in March 1996. A brief
explanation of all packages currently available is shown in Table
2.2. (See Part IV, &quot;The Java Application Programming Interface,&quot;
for the complete inside scoop, including the hot new database
classes.)
<P>
<CENTER><B>Table 2.2. Java packages.</B></CENTER>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><CENTER><I>Package</I></CENTER></TD><TD WIDTH=177><CENTER><I>Package Name</I></CENTER>
</TD><TD WIDTH=256><CENTER><I>Description</I></CENTER></TD></TR>
<TR><TD WIDTH=157><TT><FONT FACE="Courier">java.applet</FONT></TT>
</TD><TD WIDTH=177>Applet</TD><TD WIDTH=256>A set of classes that relate to the applet environment and are generally used when viewing applets
</TD></TR>
<TR><TD WIDTH=157><TT><FONT FACE="Courier">java.awt</FONT></TT>
</TD><TD WIDTH=177>Abstract Windowing Toolkit</TD><TD WIDTH=256>A set of classes that provide graphical interface tools such as buttons, controls, scrollbars, and windows
</TD></TR>
<TR><TD WIDTH=157><TT><FONT FACE="Courier">java.awt.image</FONT></TT>
</TD><TD WIDTH=177>AWT Image</TD><TD WIDTH=256>A set of classes related to using images
</TD></TR>
<TR><TD WIDTH=157><TT><FONT FACE="Courier">java.awt.peer</FONT></TT>
</TD><TD WIDTH=177>AWT Peer</TD><TD WIDTH=256>A set of classes for AWT peer classes and methods
</TD></TR>
<TR><TD WIDTH=157><TT><FONT FACE="Courier">java.sql</FONT></TT>
</TD><TD WIDTH=177>Database connectivity</TD><TD WIDTH=256>A set of classes that enable developers to write Java applications that access databases
</TD></TR>
<TR><TD WIDTH=157><TT><FONT FACE="Courier">java.io</FONT></TT>
</TD><TD WIDTH=177>I/O</TD><TD WIDTH=256>A set of classes that provide standard input/output and file I/O utilities
</TD></TR>
<TR><TD WIDTH=157><TT><FONT FACE="Courier">java.lang</FONT></TT>
</TD><TD WIDTH=177>Language</TD><TD WIDTH=256>The core set of classes for the Java language that provide basic functions, such as string and array handling
</TD></TR>
<TR><TD WIDTH=157><TT><FONT FACE="Courier">java.net</FONT></TT>
</TD><TD WIDTH=177>Network</TD><TD WIDTH=256>A set of classes that provide tools for accessing networks by protocols, such as FTP, Telnet, and HTTP
</TD></TR>
<TR><TD WIDTH=157><TT><FONT FACE="Courier">java.util</FONT></TT>
</TD><TD WIDTH=177>Utility</TD><TD WIDTH=256>A set of classes that provide core utility functions such as encoding/decoding, hash tables, and stacks
</TD></TR>
<TR><TD WIDTH=157><TT><FONT FACE="Courier">sun.tools.debug</FONT></TT>
</TD><TD WIDTH=177>Debug</TD><TD WIDTH=256>A set of classes that provide debugging functions and tools
</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="ToolsintheJDK">Tools in the JDK</A></H3>
<P>
The Java Developer's Kit includes many terrific tools that make
programming in Java a joy. You use these tools to create Java
bytecode, to view your programs, and to debug your code. In the
current version of the JDK, the Java interpreter and the Java
compiler have been modified to load classes from zip files. Table
2.3 shows a brief description of these tools. (<A HREF="ch5.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch5.htm" >See Chapter 5</A>,
&quot;Java Tools and the JDK: A Primer,&quot; for a detailed description
of how to use these tools.)
<P>
<CENTER><B>Table 2.3. Tools in the JDK.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><CENTER><I>Executable</I></CENTER></TD><TD WIDTH=196><CENTER><I>Tool Name</I></CENTER>
</TD><TD WIDTH=256><CENTER><I>Description</I></CENTER></TD></TR>
<TR><TD WIDTH=138><TT><FONT FACE="Courier">appletviewer</FONT></TT>
</TD><TD WIDTH=196>The Java applet viewer</TD><TD WIDTH=256>Used to view applets without a Web browser
</TD></TR>
<TR><TD WIDTH=138><TT><FONT FACE="Courier">java</FONT></TT></TD>
<TD WIDTH=196>The Java interpreter</TD><TD WIDTH=256>Runs Java bytecode
</TD></TR>
<TR><TD WIDTH=138><TT><FONT FACE="Courier">javac</FONT></TT></TD>
<TD WIDTH=196>The Java compiler</TD><TD WIDTH=256>Compiles Java programs into bytecode
</TD></TR>
<TR><TD WIDTH=138><TT><FONT FACE="Courier">javadoc</FONT></TT>
</TD><TD WIDTH=196>The Java API documentation generator</TD><TD WIDTH=256>Creates API documentation in HTML format from Java source code
</TD></TR>
<TR><TD WIDTH=138><TT><FONT FACE="Courier">javah</FONT></TT></TD>
<TD WIDTH=196>The Java header and stub file generator</TD><TD WIDTH=256>Creates C-language header and stub files from a Java class, which allows your Java and C code to interact
</TD></TR>
<TR><TD WIDTH=138><TT><FONT FACE="Courier">javap</FONT></TT></TD>
<TD WIDTH=196>The Java class file disassembler</TD><TD WIDTH=256>Disassembles Java files and prints out a representation of Java bytecode
</TD></TR>
<TR><TD WIDTH=138><TT><FONT FACE="Courier">jdb</FONT></TT></TD>
<TD WIDTH=196>The Java language debugger</TD><TD WIDTH=256>Helps you find and fix problems in your Java code
</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="PowerStartforSolaris"><FONT SIZE=5 COLOR=#Ff0000>Power
Start for Solaris</FONT></A></H2>
<P>
Solaris is the operating system used by most Sun Microsystems
UNIX platforms. Because JavaSoft is an operating company of Sun
Microsystems, the original Java developer's environment was created
for Solaris version 2.3 or higher. Whereas the first developer's
environment was very basic and included the HotJava browser and
a limited API package set for the Alpha release of Java, the current
developer's environment contained in the Java Developer's Kit
is quite advanced and includes all the packages and tools discussed
earlier in the chapter.<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD WIDTH=575><B>Note</B></TD></TR>
<TR><TD WIDTH=575>
<BLOCKQUOTE>
The main operating system used on Sun Microsystems computers was originally called SunOS. When Sun moved to Solaris, the company tried to make a smooth transition to the new environment by calling the revisions of the old operating system Solaris 1.x and 
calling the new environment Solaris 2.x. The new naming scheme actually caused some confusion and continues to be a source of confusion today. To clear up your own understanding, keep in mind that when someone refers to Solaris 1.x they are referring to 
the old SunOS 4.x. When someone refers to Solaris 2.x, they are referring to SunOS 5.x. Consequently, Solaris 2.3 and SunOS 5.3 are essentially the same thing.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Because Solaris is a UNIX-based operating system, you should be
able to use the tips and suggestions found throughout this section
to help you install the JDK on any UNIX platform, providing that
the JDK has been specifically compiled for your particular flavor
of UNIX. Before installing the JDK, you should ensure that you
have enough space on your hard drive for the installation. For
Solaris, you retrieve a 4.5MB compressed file. When you install
the JDK, you will need an additional 7.9MB of disk space. Although
you can remove the compressed JDK file after a successful installation,
you still need about 13MB of disk space initially.
<P>
Here are the steps to follow to set up a Java developer's environment
on your computer:
<OL>
<LI>Obtain the Java Developer's Kit
<LI>Install the Java Developer's Kit
<LI>Test the installation
</OL>
<H3><A NAME="ObtainingtheJavaDevelopersKit">Obtaining the Java Developer's Kit</A></H3>
<P>
The JDK for Solaris includes the complete set of tools for viewing,
creating, and debugging Java programs and the precompiled code
packages from the standard API. To obtain the source file for
the JDK, you need to open an FTP session with one of the FTP sites
listed in the &quot;The Java Developer's Environment&quot; section
of this chapter.<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Warning:</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
If you have a pre-release version of the JDK installed on your system, you need to remove it before installing JDK 1.0 or later to remove files and directories that are no longer used with JDK 1.0 or later versions. However, before you do this, you should 
move any source code you created that is in the directories you will be deleting.</BLOCKQUOTE>
<BLOCKQUOTE>
From the shell prompt, you can type the following to remove the previous installation of the JDK in its entirety:</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">rm -rf \file\path</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">\file\path</FONT></TT> is the actual path to the previous installation of Java, such as
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">rm -rf \java</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
For JDK 1.0 or later, you do not need to set Java-related environment variables for the base installation to work. You should check to see if you set Java-related environment variables when you last installed the JDK. You can do this by typing the 
following from the command line:</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">env | egrep &quot;JAVA_HOME|CLASSPATH|LD_LIBRARY_PATH&quot;</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
If the <TT><FONT FACE="Courier">egrep</FONT></TT> command returns no output, you did not set these variables and can continue with the installation. If the <TT><FONT FACE="Courier">egrep</FONT></TT> command lists settings for these variables, you will want 
to consider unsetting them in your <TT><FONT FACE="Courier">.cshrc</FONT></TT> or <TT><FONT FACE="Courier">.profile</FONT></TT> files as appropriate. You will find a sidebar later in this chapter called &quot;Creating Your Own Packages and Classes for 
UNIX&quot; that can help you make these changes.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
You can obtain the JDK source file from an FTP site in one of
two ways:
<UL>
<LI>With your Web browser, enter the URL path to the FTP site
as listed in the &quot;URL Path to JDK&quot; column of Table 2.1.
<LI>From the shell prompt or Telnet session prompt, open an FTP
session to the FTP site as listed in the &quot;FTP Site&quot;
column of Table 2.1.
</UL>
<P>
In the example that follows, the JDK source is downloaded from
JavaSoft. If the JavaSoft FTP site is busy, you can obtain the
source from any of the mirror sites listed in Table 2.1. Because
file paths on the Internet tend to change, you should follow these
steps in order:
<OL>
<LI>Change to the directory where you want to install the JDK.
When you uncompress and unpack the compressed JDK file later in
the installation, you will be creating a directory called <TT><FONT FACE="Courier">java</FONT></TT>
under this directory.
<LI>Start the FTP session. You will be prompted to enter a user
name and password. Use the name <TT><FONT FACE="Courier">anonymous</FONT></TT>
and a password as <TT><I><FONT FACE="Courier">youruserid@yourhostname</FONT></I></TT>,
such as <TT><FONT FACE="Courier">william@tvp.com</FONT></TT>.
Here is how you start an FTP session with the JavaSoft FTP server:
<BR>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">$ ftp ftp.javasoft.com<BR>
Connected to ftp.javasoft.com.<BR>
220 java3 FTP server ready.<BR>
Name (ftp.javasoft.com): anonymous<BR>
331 Guest login ok, send your complete e-mail address as password.
<BR>
Password: <I>userid@hostname.com<BR>
</I>230-<BR>
230-&nbsp;&nbsp;&nbsp;&nbsp;Welcome to the Java home site.<BR>
230-<BR>
230 Guest login ok, access restrictions apply.<BR>
Remote system type is UNIX.<BR>
</FONT></TT>
</BLOCKQUOTE>
<BR>
<LI>The JDK binary file is generally located in a subdirectory
called <TT><FONT FACE="Courier">pub</FONT></TT>, so you want to
change to the <TT><FONT FACE="Courier">pub</FONT></TT> directory.
On some mirror sites you will have to go through several subdirectories
to get to Java's <TT><FONT FACE="Courier">pub</FONT></TT> subdirectory.
For example, on the Sunsite mirror (<TT><FONT FACE="Courier">sunsite.unc.edu</FONT></TT>)
you will have to change directories to <TT><FONT FACE="Courier">pub/languages/java/pub</FONT></TT>.
Start by listing the contents of the current directory and then
changing to the <TT><FONT FACE="Courier">pub</FONT></TT> directory:
<BR>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">ftp&gt; ls<BR>
200 PORT command successful.<BR>
150 Opening ASCII mode data connection for /bin/ls.<BR>
total 24<BR>
lrwxrwxrwx&nbsp;&nbsp;&nbsp;1 root&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;7
May 19 20:02 bin -&gt; usr/bin<BR>
dr-xr-xr-x&nbsp;&nbsp;&nbsp;2 root&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp;512
May 19 21:09 dev<BR>
dr-xr-xr-x&nbsp;&nbsp;&nbsp;2 nobody&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;1536
Jun 21 21:36 docs<BR>
dr-xr-xr-x&nbsp;&nbsp;&nbsp;2 root&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp;512
May 19 20:04 etc<BR>
dr-xr-xr-x&nbsp;&nbsp;&nbsp;5 500&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;512
Jun 14 01:13 pub<BR>
drwx-wx-wx&nbsp;&nbsp;&nbsp;2 root&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp;512
Jun 22 00:56 tmp<BR>
dr-xr-xr-x&nbsp;&nbsp;&nbsp;4 nobody&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;512
Jun 19 20:04 usr<BR>
-r--r--r--&nbsp;&nbsp;&nbsp;1 root&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;1255
May 27 01:33 welcome.msg<BR>
226 Transfer complete.<BR>
ftp&gt; cd pub<BR>
250 CWD command successful.<BR>
</FONT></TT>
</BLOCKQUOTE>
<BR>
<LI>When you are in the publication directory for the Java programming
language, you should list the contents of the directory. You want
to download the most current version of the JDK. The most recent
Solaris version in the example is <TT><FONT FACE="Courier">JDK-1_1-solaris2-sparc.tar.Z</FONT></TT>.
Download the appropriate source:
<BR>
<P>
<P>
<TT><FONT FACE="Courier">ftp&gt; ls<BR>
200 PORT command successful.<BR>
150 Opening ASCII mode data connection for /bin/ls.<BR>
total 61148<BR>
-r--r--r--&nbsp;&nbsp;&nbsp;1 root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;4595974
Jan 23 16:35 JDK-1_1-solaris2-sparc.tar.Z<BR>
-r--r--r--&nbsp;&nbsp;&nbsp;1 root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;3720379
Jan 23 16:35 JDK-1_1-win32-x86.exe<BR>
-r--r--r--&nbsp;&nbsp;&nbsp;1 root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;2243968
Feb 14 00:56 JDK-1_1-mac.sea.bin<BR>
-r--r--r--&nbsp;&nbsp;&nbsp;1 root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;3049734
Feb 14 00:56 JDK-1_1-mac.sea.hqx<BR>
-r--r--r--&nbsp;&nbsp;&nbsp;1 nobody&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;4508131
Dec 12 18:35 JDK-1_0-solaris2-sparc.tar.Z<BR>
-r--r--r--&nbsp;&nbsp;&nbsp;1 nobody&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;3717250
Dec 12 18:36 JDK-1_0-win32-x86.exe<BR>
-r--r--r--&nbsp;&nbsp;&nbsp;1 root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;15868
Feb 14 00:56 README<BR>
-r--r--r--&nbsp;&nbsp;&nbsp;1 nobody&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;5476531
Sep 11 02:05 <BR>
</FONT></TT><FONT SIZE=1 FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">hotjava-beta2-solaris2-sparc.tar.Z
<BR>
-r--r--r--&nbsp;&nbsp;&nbsp;1 nobody&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;3849659
Sep 11 02:06 hotjava-beta2-win32-x86.exe<BR>
226 Transfer complete.<BR>
ftp&gt; bin<BR>
200 Type set to I.<BR>
ftp&gt; get JDK-1_1-solaris2-sparc.tar<BR>
local: JDK-1_1-solaris2-sparc.tar remote: JDK-1_1-solaris2-sparc.tar
<BR>
200 PORT command successful.<BR>
150 Opening BINARY mode data connection for JDK-1_1-solaris2-sparc.tar
<BR>
</FONT></TT><FONT SIZE=1 FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">(4595974
bytes).<BR>
226 Transfer complete.<BR>
4595974 bytes received<BR>
ftp&gt;quit</FONT></TT>
</BLOCKQUOTE>
<H3><A NAME="InstallingtheJavaDevelopersKit">Installing the Java Developer's Kit</A></H3>
<P>
After you obtain the source file, you should check to make sure
the size of the file you downloaded matches the file size listed
on the FTP site. If the file sizes are not identical, your file
might have been corrupted during download. In that case, you want
to delete the file from your system and try to download the JDK
source file again.
<P>
Next, you need to uncompress and unpack the files. You can do
this using the following command:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">zcat JDK-1_1-solaris2-sparc.tar.Z | tar
xf -<BR>
</FONT></TT>
</BLOCKQUOTE>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
The <TT><FONT FACE="Courier">zcat</FONT></TT> command lists the contents of the compressed files and directories. The output of this is sent to the UNIX tape archive command <TT><FONT FACE="Courier">tar</FONT></TT>, which extracts the files and directories 
but does not list the extraction to the screen. Although you should be able to use this command no matter which flavor of UNIX you are running, you can also uncompress and extract the files using the following series of commands:
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">uncompress JDK-1_1-solaris2-sparc.tar<BR>
tar -xf JDK-1_1-solaris2-sparc.tar</FONT></TT>
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
When you uncompress and unpack the compressed JDK file, you will be creating a directory called <TT><FONT FACE="Courier">java</FONT></TT> under the current directory. If you are installing JDK 1.0 or later versions for Solaris on your system, the following 
files and subdirectories will be located under the <TT><FONT FACE="Courier">java</FONT></TT> directory:
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">-r--r--r--&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2826 Jan 12 06:20 COPYRIGHT
<BR>
-r--r--r--&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8195 Jan 16 16:45 README
<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024 Jan 12 11:09 bin
<BR>
drwxr-xr-x&nbsp;&nbsp;25&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024 Jan 12 11:11 demo<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024 Jan 12 11:09 include
<BR>
-r--r--r--&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1017 Jan 16 16:49 index.html
<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024 Jan 12 11:10 lib
<BR>
-rw-rw-r--&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;372227 Jan 16 16:48 src.zip</FONT></TT>
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
The <TT><FONT FACE="Courier">src.zip</FONT></TT> file contains
the source code for some of the classes used in the JDK. Because
these classes represent a good cross-section of the functionality
introduced by the Java API and are written in the Java programming
language, you can learn a lot by examining them. Therefore, I
highly recommend that you unzip the <TT><FONT FACE="Courier">src.zip</FONT></TT>
file and make a note to go through some of the files after you
read this book. By unzipping the <TT><FONT FACE="Courier">src.zip</FONT></TT>
file, you create the following directory structure on your file
system:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">src/<BR>
src/java/<BR>
src/java/lang/<BR>
src/java/util/<BR>
src/java/io/<BR>
src/java/net/<BR>
src/java/awt/<BR>
src/java/awt/peer/<BR>
src/java/awt/test/<BR>
src/java/awt/image/<BR>
src/java/applet/<BR>
src/sun/<BR>
src/sun/tools/<BR>
src/sun/tools/ttydebug/</FONT></TT>
</BLOCKQUOTE>
<P>
All the executables-except for the Java source-level debugger,
<TT><FONT FACE="Courier">jdb</FONT></TT>-come in two forms. Executables
with the suffix <TT><FONT FACE="Courier">_g</FONT></TT> are for
debugging and support all of Java's mechanisms for debugging.
Executables without the suffix <TT><FONT FACE="Courier">_g</FONT></TT>
are optimized for normal use and support only limited debugging
options. You will find the following executable files for the
JDK tools in the <TT><FONT FACE="Courier">bin</FONT></TT> directory:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">java/bin:<BR>
total 5<BR>
-r-xr-xr-x&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;833
Jan 12 06:10 appletviewer<BR>
lrwxrwxrwx&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;13
Feb 23 01:09 java -&gt; .java_wrapper<BR>
lrwxrwxrwx&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;13
Feb 23 01:09 java_g -&gt; .java_wrapper<BR>
lrwxrwxrwx&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;13
Feb 23 01:09 javac -&gt; .java_wrapper<BR>
lrwxrwxrwx&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;13
Feb 23 01:09 javac_g -&gt; .java_wrapper<BR>
-r-xr-xr-x&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;71
Jan 12 06:16 javadoc<BR>
lrwxrwxrwx&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;13
Feb 23 01:09 javah -&gt; .java_wrapper<BR>
lrwxrwxrwx&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;13
Feb 23 01:09 javah_g -&gt; .java_wrapper<BR>
lrwxrwxrwx&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;13
Feb 23 01:09 javap -&gt; .java_wrapper<BR>
lrwxrwxrwx&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;13
Feb 23 01:09 javap_g -&gt; .java_wrapper<BR>
lrwxrwxrwx&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;13
Feb 23 01:09 jdb -&gt; .java_wrapper<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Jan 12 11:09 sparc<BR>
-r-xr-xr-x&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1911
Jan 12 06:10 upgrade</FONT></TT>
</BLOCKQUOTE>
<P>
Most of the tools in the <TT><FONT FACE="Courier">bin</FONT></TT>
directory are symbolically linked to a Korn shell script called
<TT><FONT FACE="Courier">.java_wrapper</FONT></TT>. The function
of the wrapper script is to set the environment variables Java
needs if you forget to do it. It does this by finding the location
of the Java tool you are trying to execute, backing up one directory,
and setting this value to an environment variable called <TT><FONT FACE="Courier">JAVA_HOME</FONT></TT>.
The value for <TT><FONT FACE="Courier">JAVA_HOME</FONT></TT> is
the base directory where you installed the JDK.
<P>
The script then uses the value associated with the <TT><FONT FACE="Courier">JAVA_HOME</FONT></TT>
variable to set two other important environment variables: <TT><FONT FACE="Courier">CLASSPATH</FONT></TT>
and <TT><FONT FACE="Courier">LD_LIBRARY_PATH</FONT></TT>. The
<TT><FONT FACE="Courier">CLASSPATH</FONT></TT> variable is used
to find the Java class files. The wrapper script generally sets
this path to
<BLOCKQUOTE>
<TT><FONT FACE="Courier">java/classes:java/lib/classes.zip</FONT></TT>
</BLOCKQUOTE>
<P>
The default <TT><FONT FACE="Courier">CLASSPATH</FONT></TT> tells
the Java interpreter and compiler to look for your class files
in the following order:
<OL>
<LI>In the directory <TT><FONT FACE="Courier">java/classes</FONT></TT>
or the equivalent directory on your system
<LI>In the zipped file with a file path <TT><FONT FACE="Courier">java/lib/classes.zip</FONT></TT>
or the equivalent file path on your system
</OL>
<P>
The <TT><FONT FACE="Courier">LD_LIBRARY_PATH</FONT></TT> variable
is used to find essential library files. The wrapper script generally
sets this path to <TT><FONT FACE="Courier">java/lib/sparc</FONT></TT>.
<P>
The final thing the wrapper script does is to locate and execute
the tool you are trying to use. The compiled source for most of
the Solaris JDK tools is actually located in <TT><FONT FACE="Courier">java/bin/sparc</FONT></TT>.
If you examine the files for the Java compiler and the Java debugger
located in <TT><FONT FACE="Courier">java/bin/sparc</FONT></TT>,
you will also find that these are wrapper scripts.
<P>
Although it is good to know where the actual executables for the
tools are located, you should only execute them via the wrapper
script and from the <TT><FONT FACE="Courier">java/bin</FONT></TT>
directory. For this reason, you might want to add the full file
path to <TT><FONT FACE="Courier">java/bin</FONT></TT> to the search
path specified in your <TT><FONT FACE="Courier">.cshrc</FONT></TT>
or <TT><FONT FACE="Courier">.profile</FONT></TT> file. This will
allow you to run the JDK tools without having to specify the full
path to the binaries.<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Peter's Principle:</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
Creating Your Own Packages and Classes for UNIX</BLOCKQUOTE>
<BLOCKQUOTE>
If you plan to create your own packages or to store Java classes you create in a directory other than the <TT><FONT FACE="Courier">java/classes</FONT></TT> directory, you should set the <TT><FONT FACE="Courier">CLASSPATH</FONT></TT> variable to the 
location you plan to use for your packages and class files. C shell users will want to do this by editing the <TT><FONT FACE="Courier">.cshrc</FONT></TT> file in your home directory and adding a statement that sets the correct path to your Java classes, 
such as the following:
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">setenv CLASSPATH /myjavaclasses</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
The wrapper script is dynamic and will prepend the directories you specify for classes to the default <TT><FONT FACE="Courier">CLASSPATH</FONT></TT>. This means that if you add the directory <TT><FONT FACE="Courier">/myjavaclasses</FONT></TT> to the 
general <TT><FONT FACE="Courier">CLASSPATH</FONT></TT> default by setting the environment variable as shown, the Java interpreter and compiler will search for Java class files on your system in the following order:
</BLOCKQUOTE>
<OL>
<LI>In the directory or directories you specified when you set the <TT><FONT FACE="Courier">CLASSPATH</FONT></TT> environment variable
<LI>In the directory <TT><FONT FACE="Courier">java/classes</FONT></TT> or equivalent directory on your system
<LI>In the zipped file with a file path <TT><FONT FACE="Courier">java/lib/classes.zip</FONT></TT> or equivalent file path on your system
</OL>
<BLOCKQUOTE>
For these changes to take effect in the current command tool or shell environment, you will need to source your <TT><FONT FACE="Courier">.cshrc</FONT></TT> file or type the <TT><FONT FACE="Courier">setenv</FONT></TT> command at the shell prompt. This 
updates the current environment settings.
</BLOCKQUOTE>
<BLOCKQUOTE>
If you are using Bourne shell as your main UNIX shell, you can set the <TT><FONT FACE="Courier">CLASSPATH</FONT></TT> in your <TT><FONT FACE="Courier">.profile</FONT></TT> file. Do this by editing the <TT><FONT FACE="Courier">.profile</FONT></TT> file in 
your home directory and adding statements that set and export the <TT><FONT FACE="Courier">CLASSPATH</FONT></TT> variable's path, such as
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">CLASSPATH=/myjavaclasses</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">export CLASSPATH</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
For these changes to take effect in the current command tool or shell environment, you will need to set the <TT><FONT FACE="Courier">CLASSPATH</FONT></TT> variable and export it from the command line, like this:
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">CLASSPATH=$HOME/java;export CLASSPATH</FONT></TT>
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Another directory you will want to check is the <TT><FONT FACE="Courier">demo</FONT></TT>
directory. The <TT><FONT FACE="Courier">demo</FONT></TT> directory
contains many demonstration applets. By previewing these demos,
you can see Java in action. The <TT><FONT FACE="Courier">include</FONT></TT>
directory contains C-language header and stub files. These files
are primarily used to set paths and definitions needed by Java
and that are essential to Java interaction with C.
<P>
The <TT><FONT FACE="Courier">lib</FONT></TT> directory contains
essential library files and the zip file for all classes included
in the Java API, called <TT><FONT FACE="Courier">classes.zip</FONT></TT>.
Loading classes from zipped files makes it possible to compress
the entire contents of the Java API into one file. The Java runtime
class loader and the Java compiler extract any class files they
need from <TT><FONT FACE="Courier">classes.zip</FONT></TT>.<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Warning:</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
Although you can unzip the <TT><FONT FACE="Courier">src.zip</FONT></TT> file, you should not unzip the <TT><FONT FACE="Courier">classes.zip</FONT></TT> file. The <TT><FONT FACE="Courier">classes.zip</FONT></TT> file contains all the classes and methods in 
the Java API. If you unzip this file, you will create hundreds of unnecessary files on your hard drive.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="TestingtheInstallation">Testing the Installation</A></H3>
<P>
A great way to test your new Java developer's environment is to
preview one of the demo applets included in the JDK. As you can
see from the following code, each demo applet is located in the
<TT><FONT FACE="Courier">demo</FONT></TT> directory and has its
own subdirectory:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">demo:<BR>
total 23<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Jan 12 11:11 Animator<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Jan 12 11:11 ArcTest<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Jan 12 11:11 BarChart<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Jan 12 11:11 Blink<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Jan 12 11:11 BouncingHeads<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Jan 12 11:11 CardTest<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Jan 12 11:11 DitherTest<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Jan 12 11:11 DrawTest<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Jan 12 11:11 Fractal<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Jan 12 11:11 GraphLayout<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Jan 12 11:11 GraphicsTest<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Jan 12 11:11 ImageMap<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Jan 12 11:11 ImageTest<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Jan 12 11:11 JumpingBox<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Jan 12 11:11 MoleculeViewer<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Jan 12 11:11 NervousText<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Jan 12 11:11 ScrollingImages<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Jan 12 11:11 SimpleGraph<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Jan 12 11:11 SpreadSheet<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Jan 12 11:11 TicTacToe<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Jan 12 11:11 TumblingDuke<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Jan 12 11:11 UnderConstruction<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Jan 12 11:11 WireFrame</FONT></TT>
</BLOCKQUOTE>
<P>
In the subdirectories for each demonstration applet, you will
find all the files necessary to run the applet and to see how
the applet was created. For example, the directory for the <TT><FONT FACE="Courier">TicTacToe</FONT></TT>
applet contains the following:
<P>
<TT><FONT FACE="Courier">TicTacToe.class </FONT></TT><B>     
&nbsp;</B>The compiled class file for the <TT><FONT FACE="Courier">TicTacToe</FONT></TT>
applet
<P>
<TT><FONT FACE="Courier">TicTacToe.java </FONT></TT><B>      
 </B>The source code for the <TT><FONT FACE="Courier">TicTacToe</FONT></TT>
applet
<P>
<TT><FONT FACE="Courier">audio</FONT></TT> directory<B>      
     </B>Contains AU sound files the applet uses
<P>
<TT><FONT FACE="Courier">example1.html </FONT></TT><B>       
&nbsp;</B>A sample HTML document for viewing the applet
<P>
<TT><FONT FACE="Courier">images</FONT></TT> directory <B>    
     &nbsp;</B>Contains the images the applet uses
<P>
To test the installation, you can view the applet by accessing
the <TT><FONT FACE="Courier">example1.html</FONT></TT> file with
your Java-capable Web browser. You can also view the applet using
the <TT><FONT FACE="Courier">appletviewer</FONT></TT> tool that
comes with the JDK. If you are currently in the <TT><FONT FACE="Courier">java</FONT></TT>
base directory, you can type the following to view the <TT><FONT FACE="Courier">TicTacToe</FONT></TT>
demo applet with <TT><FONT FACE="Courier">appletviewer</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">bin/appletviewer demo/TicTacToe/example1.html</FONT></TT>
</BLOCKQUOTE>
<P>
The good news is that if you can run the demo applet, your base
installation worked correctly. If you have any problems running
the <TT><FONT FACE="Courier">TicTacToe</FONT></TT> applet with
<TT><FONT FACE="Courier">appletviewer</FONT></TT>, check your
current path by typing <TT><FONT FACE="Courier">pwd</FONT></TT>
at the shell prompt. You should change directories to the base
<TT><FONT FACE="Courier">java</FONT></TT> directory and try to
run <TT><FONT FACE="Courier">appletviewer</FONT></TT> again. Normally,
the base <TT><FONT FACE="Courier">java</FONT></TT> directory is
<TT><FONT FACE="Courier">/java</FONT></TT> or a subdirectory under
your home directory called <TT><FONT FACE="Courier">java</FONT></TT>.
<P>
If you get the error message <TT><FONT FACE="Courier">Exception
in thread NULL</FONT></TT> when running the Java interpreter,
compiler, or <TT><FONT FACE="Courier">appletviewer</FONT></TT>,
you should check the setting for your <TT><FONT FACE="Courier">CLASSPATH</FONT></TT>
environment variable by typing the following from the command
line:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">env | grep CLASSPATH</FONT></TT>
</BLOCKQUOTE>
<P>
The current setting for <TT><FONT FACE="Courier">CLASSPATH</FONT></TT>
should not list the class directory from an older JDK release.
For Java to run properly on your system, you must set the <TT><FONT FACE="Courier">CLASSPATH</FONT></TT>
variable correctly. If you do not plan to use packages and classes
stored in a directory other than the <TT><FONT FACE="Courier">java</FONT></TT>
base directory, you will want to edit your <TT><FONT FACE="Courier">.cshrc</FONT></TT>
or <TT><FONT FACE="Courier">.profile</FONT></TT> file and remove
the line that sets the <TT><FONT FACE="Courier">CLASSPATH</FONT></TT>
variable. If you plan to use packages and classes stored in a
directory other than the <TT><FONT FACE="Courier">java</FONT></TT>
base directory, you should update the setting for the <TT><FONT FACE="Courier">CLASSPATH</FONT></TT>
variable. Refer back to the sidebar titled &quot;Creating Your
Own Packages and Classes for UNIX&quot; to see how to do this.
<P>
Anyone who wants to maintain a separate class directory should
check to see if they have set the <TT><FONT FACE="Courier">CLASSPATH</FONT></TT>
environment variable correctly. An easy way to do this is to temporarily
move one of the demonstration class files to the location where
you plan to store your Java class files. The new location must
be empty if you follow this example.
<P>
From the <TT><FONT FACE="Courier">java/demo/TicTacToe</FONT></TT>
directory, type
<BLOCKQUOTE>
<TT><FONT FACE="Courier">mv TicTacToe.class /destination/file/path</FONT></TT>
</BLOCKQUOTE>
<P>
where <TT><FONT FACE="Courier">/destination/file/path</FONT></TT>
is the actual file path to the destination directory, such as
<BLOCKQUOTE>
<TT><FONT FACE="Courier">mv TicTacToe.class /myclasses/new/TicTacToe.class</FONT></TT>
</BLOCKQUOTE>
<P>
You should now be able to run the <TT><FONT FACE="Courier">TicTacToe</FONT></TT>
demo on <TT><FONT FACE="Courier">appletviewer</FONT></TT> without
having to specify the path to the class file for the applet. From
the <TT><FONT FACE="Courier">java/demo/TicTacToe</FONT></TT> directory,
type the following to test this:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;/&nbsp;&nbsp;/bin/appletviewer
example1.html</FONT></TT>
</BLOCKQUOTE>
<P>
If you cannot view the applet, you should check your environment
settings by typing the following from the command line:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">env | grep CLASSPATH</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">grep</FONT></TT> should return your
updated setting for <TT><FONT FACE="Courier">CLASSPATH</FONT></TT>,
such as
<BLOCKQUOTE>
<TT><FONT FACE="Courier">CLASSPATH=/myclasses/new</FONT></TT>
</BLOCKQUOTE>
<P>
If the <TT><FONT FACE="Courier">grep</FONT></TT> command returns
no output or the <TT><FONT FACE="Courier">CLASSPATH</FONT></TT>
variable is set incorrectly, refer back to the sidebar &quot;Creating
Your Own Packages and Classes for UNIX&quot; for helpful information.
<H2><A NAME="PowerStartforWindows95NT"><FONT SIZE=5 COLOR=#Ff0000>Power
Start for Windows 95/NT</FONT></A></H2>
<P>
Members of the Microsoft Windows family of operating systems are
the most-used operating systems in the world. Windows 95 is the
long-awaited enhancement to Windows 3.1, and Windows NT is a network-optimized
version of Windows. After Sun Microsystems created the Solaris
version of the Java Developer's Kit, it ported the JDK to Windows
NT. 
<P>
Because much of the inner workings of the Windows NT operating
system are essentially the same as those of the Windows 95 operating
system, the JDK was modified for use on both the Windows NT and
Windows 95 platforms. The current developer's environment for
Windows 95/NT is quite advanced and includes all the packages
and tools discussed earlier in this chapter.<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD WIDTH=590><B>Note</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
Although the friendly folks at IBM are working on a Windows 3.1 version of the JDK, at the time of this writing there is not a JDK for Windows 3.1 systems. However, because Windows 95/NT are Windows-based operating systems, you should be able to use the 
tips and suggestions you'll find throughout this section to help you install the JDK on systems running Windows 3.1 if a version of the JDK specifically compiled for use on Windows 3.1 systems is made available.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Before installing the JDK, you should ensure that you have enough
space on your hard drive for the installation. For Windows 95/NT,
you will retrieve a 3.7MB self-extracting archive file. When you
install the JDK, you will need an additional 5.6MB of disk space.
Although you can remove the self-extracting archive file after
a successful installation, you still need about 10MB of disk space
initially.
<P>
To set up a Java developer's environment on your computer, follow
these steps:
<OL>
<LI>Obtain the Java Developer's Kit
<LI>Install the Java Developer's Kit
<LI>Test the installation
</OL>
<H3><A NAME="ObtainingtheJavaDevelopersKitNT">Obtaining the Java Developer's Kit</H3>
<P>
The JDK for Windows 95/NT includes the complete set of tools for
viewing, creating, and debugging Java programs and the precompiled
code packages from the standard API. To obtain the source file
for the JDK, you need to open an FTP session with one of the FTP
sites listed in the section &quot;The Java Developer's Environment&quot;
at the beginning of this chapter.
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Warning:</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
If you have a prerelease version of the JDK installed on your system, you want to remove it before installing JDK 1.0 or later to remove files and directories that are no longer used with JDK 1.0 or later versions. However, before you do this, you should 
move any source code you created that is located in the directories you will be deleting. From the MS-DOS prompt, you can type the following to remove the previous installation of the JDK in its entirety:</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">deltree /Y C:<I>\file\path<BR>
</I>C:<I>\file\path</I></FONT></TT> is the actual path to the previous installation of Java, such as<BR>
<TT><FONT FACE="Courier">deltree /Y C:\java</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
You should also check to see if you set Java-related file paths when you last installed the JDK. You can do this by typing the following at the MS-DOS prompt:</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">TYPE C:\AUTOEXEC.BAT</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
This command lists the contents of your <TT><FONT FACE="Courier">AUTOEXEC.BAT</FONT></TT> file to the MS-DOS prompt window. You should now check for Java-related file paths and environment variables. Java-related file paths include any file paths where the 
old version of the JDK was installed. Java-related environment variables include <TT><FONT FACE="Courier">JAVA_HOME</FONT></TT>, <TT><FONT FACE="Courier">CLASSPATH</FONT></TT>, and <TT><FONT FACE="Courier">LD_LIBRARY_PATH</FONT></TT>.
</BLOCKQUOTE>
<BLOCKQUOTE>
If you did not set Java-related paths, you can continue with the installation. If you set Java-related paths, you want to check the validity of these settings when you follow the steps for setting and/or updating your paths as discussed in the sidebar 
titled &quot;Setting Your Paths for Java in Windows 95/NT,&quot; found in the next section of this chapter.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<FONT SIZE=1></FONT>
<P>
You can obtain the JDK source file from an FTP site in one of
two ways:
<UL>
<LI>With your Web browser, enter the URL path to the FTP site
as listed in the &quot;URL Path to JDK&quot; column of Table 2.1.
<LI>From the shell prompt or Telnet session prompt, open an FTP
session to the FTP site as listed in the &quot;FTP Site&quot;
column of Table 2.1.
</UL>
<P>
In the following example, the JDK source is downloaded from JavaSoft.
If the JavaSoft FTP site is busy, you can obtain the source from
any of the mirror sites listed in Table 2.1. Because file paths
on the Internet tend to change, you should follow these steps
sequentially:
<OL>
<LI>Start the FTP session. You will be prompted to enter a username
and password. Use the name <TT><FONT FACE="Courier">anonymous</FONT></TT>
and a password as <TT><I><FONT FACE="Courier">youruserid@yourhostname</FONT></I></TT>,
such as<TT><FONT FACE="Courier"> william@tvp.com</FONT></TT>.
Here is how you start an FTP session with the JavaSoft FTP server:
<BR>
<BR>
<TT><FONT FACE="Courier">$ ftp ftp.javasoft.com<BR>
Connected to ftp.javasoft.com.<BR>
220 java3 FTP server ready.<BR>
Name (ftp.javasoft.com): anonymous<BR>
331 Guest login ok, send your complete e-mail address as password.
<BR>
Password: <I>userid@hostname.com<BR>
</I>230-<BR>
230-&nbsp;&nbsp;&nbsp;&nbsp;Welcome to the Java home site.<BR>
230-<BR>
230 Guest login ok, access restrictions apply.<BR>
Remote system type is UNIX.</FONT></TT>
<LI>List the contents of the current directory. The JDK binary
file is generally located in a subdirectory called pub, so you
want to change to the pub directory. On some mirror sites you
have to go through several subdirectories to get to Java's pub
subdirectory. For example, on the Sunsite mirror (sunsite.unc.edu)
you have to change directories to pub/languages/java/pub. Start
by listing the contents of the current directory and then changing
to the pub directory:<BR>
<BR>
ftp&gt; ls<BR>
200 PORT command successful.<BR>
150 Opening ASCII mode data connection for /bin/ls.<BR>
total 24<BR>
lrwxrwxrwx&nbsp;&nbsp;&nbsp;1 root&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;7
May 19 20:02 bin -&gt; usr/bin<BR>
dr-xr-xr-x&nbsp;&nbsp;&nbsp;2 root&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp;512
May 19 21:09 dev<BR>
dr-xr-xr-x&nbsp;&nbsp;&nbsp;2 nobody&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;1536
Jun 21 21:36 docs<BR>
dr-xr-xr-x&nbsp;&nbsp;&nbsp;2 root&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp;512
May 19 20:04 etc<BR>
dr-xr-xr-x&nbsp;&nbsp;&nbsp;5 500&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;512
Jun 14 01:13 pub<BR>
drwx-wx-wx&nbsp;&nbsp;&nbsp;2 root&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp;512
Jun 22 00:56 tmp<BR>
dr-xr-xr-x&nbsp;&nbsp;&nbsp;4 nobody&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;512
Jun 19 20:04 usr<BR>
-r--r--r--&nbsp;&nbsp;&nbsp;1 root&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;1255
May 27 01:33 welcome.msg<BR>
226 Transfer complete.<BR>
ftp&gt; cd pub<BR>
250 CWD command successful.
<LI>When you are in the publication directory for the Java programming
language, you should list the contents of the directory. You want
to download the most current version of the JDK. The most recent
Windows 95/NT version in the example is <TT><FONT FACE="Courier">JDK-1_1-win32-x86.exe</FONT></TT>.
Download the appropriate source:<BR>
<BR>
<TT><FONT FACE="Courier">ftp&gt; ls<BR>
200 PORT command successful.<BR>
150 Opening ASCII mode data connection for /bin/ls.<BR>
total 61148<BR>
-r--r--r--&nbsp;&nbsp;&nbsp;1 root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;4595974
Jan 23 16:35 JDK-1_1-solaris2-sparc.tar.Z<BR>
-r--r--r--&nbsp;&nbsp;&nbsp;1 root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;3720379
Jan 23 16:35 JDK-1_1-win32-x86.exe<BR>
-r--r--r--&nbsp;&nbsp;&nbsp;1 root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;2243968
Feb 14 00:56 JDK-1_1-mac.sea.bin<BR>
-r--r--r--&nbsp;&nbsp;&nbsp;1 root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;3049734
Feb 14 00:56 JDK-1_1-mac.sea.hqx<BR>
-r--r--r--&nbsp;&nbsp;&nbsp;1 nobody&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;4508131
Dec 12 18:35 <BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">JDK-beta2-solaris2-sparc.tar.Z
<BR>
-r--r--r--&nbsp;&nbsp;&nbsp;1 nobody&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;3717250
Dec 12 18:36 JDK-1_0-win32-x86.exe<BR>
-r--r--r--&nbsp;&nbsp;&nbsp;1 root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;15868
Feb 14 00:56 README<BR>
-r--r--r--&nbsp;&nbsp;&nbsp;1 nobody&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;5476531
Sep 11 02:05 <BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">hotjava-beta2-solaris2-sparc.tar.Z
<BR>
-r--r--r--&nbsp;&nbsp;&nbsp;1 nobody&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;3849659
Sep 11 02:06 hotjava-beta2-win32-x86.exe<BR>
226 Transfer complete.<BR>
ftp&gt; bin<BR>
200 Type set to I.<BR>
ftp&gt; get JDK-1_1-win32-x86.exe<BR>
local: JDK-1_1-win32-x86.exe remote: JDK-1_1-win32-x86.exe<BR>
200 PORT command successful.<BR>
150 Opening BINARY mode data connection for JDK-1_1-win32-x86.exe
<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">(3720379
bytes).<BR>
226 Transfer complete.<BR>
3720379 bytes received<BR>
ftp&gt;quit</FONT></TT>
</OL>
<H3><A NAME="InstallingtheJavaDevelopersKitNT">Installing the Java Developer's Kit</A></H3>
<P>
After you obtain the source file, you should check to make sure
the size of the file you downloaded matches the file size listed
on the FTP site. If the file sizes aren't identical, your file
might have been corrupted during download. In that case, you want
to delete the file from your system and try to download the JDK
source file again.
<P>
To install the JDK from the MS-DOS prompt, follow these steps:
<OL>
<LI>Open a DOS window.
<LI>Change to the directory that contains the JDK source file.
<LI>Move the JDK to where you want to install it. To install Java
in <TT><FONT FACE="Courier">c:\java</FONT></TT>, which is recommended,
you can use the following command:<BR>
<BR>
<TT><FONT FACE="Courier">move JDK-1_1-win32-x86.exe c:\<BR>
</FONT></TT>
<LI>The self-extracting file will install itself if you type the
name of the executable at the DOS prompt, like this:<BR>
<BR>
<TT><FONT FACE="Courier">JDK-1_1-win32-x86.exe</FONT></TT>
</OL>
<P>
When you run the self-extracting archive file, you will be creating
a directory called <TT><FONT FACE="Courier">java</FONT></TT> under
the current directory. If you are installing JDK 1.0 or later
for Windows 95/NT on your system, the following files and subdirectories
will be located under the <TT><FONT FACE="Courier">java</FONT></TT>
directory:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;  Directory of C:\java<BR>
BIN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
bin<BR>
LIB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
lib<BR>
DEMO&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
demo<BR>
COPYRI~1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
2,826&nbsp;&nbsp;01-12-96 10:11a COPYRIGHT<BR>
README&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8,237&nbsp;&nbsp;01-16-96&nbsp;&nbsp;1:46p
README<BR>
INDEX~1&nbsp;&nbsp;HTM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1,017&nbsp;&nbsp;01-16-96&nbsp;&nbsp;1:48p
index.html<BR>
IncLUDE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
include<BR>
SRC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ZIP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;371,854&nbsp;&nbsp;01-16-96&nbsp;&nbsp;1:47p
src.zip</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">src.zip</FONT></TT> file contains
the source code for some of the classes used in the JDK. Because
these classes represent a good cross-section of the functionality
introduced by the Java API and are written in the Java programming
language, you can learn a lot by examining them. Therefore, I
highly recommend that you unzip the <TT><FONT FACE="Courier">src.zip</FONT></TT>
file and make a note to go through the some of the files after
you read this book.<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Tip</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
The class files in the <TT><FONT FACE="Courier">src.zip</FONT></TT> file are stored with Windows 95/NT long filenames. You will need an unzip utility, such as WinZip95 or EZ-Zip, that supports long filenames.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
By unzipping the <TT><FONT FACE="Courier">src.zip</FONT></TT>
file, you create the following directory structure on your file
system:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">src\<BR>
src\java\<BR>
src\java\lang\<BR>
src\java\util\<BR>
src\java\io\<BR>
src\java\net\<BR>
src\java\awt\<BR>
src\java\awt\peer\<BR>
src\java\awt\test\<BR>
src\java\awt\image\<BR>
src\java\applet\<BR>
src\sun\<BR>
src\sun\tools\<BR>
src\sun\tools\ttydebug\</FONT></TT>
</BLOCKQUOTE>
<P>
You will find the JDK tools in the <TT><FONT FACE="Courier">bin</FONT></TT>
directory. The <TT><FONT FACE="Courier">bin</FONT></TT> directory
contains the following executable and dynamic link library files:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;Directory of C:\java\bin
<BR>
JAVAI&nbsp;&nbsp;&nbsp;&nbsp;DLL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;162,304&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:30a
javai.dll<BR>
JAVA&nbsp;&nbsp;&nbsp;&nbsp;  EXE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4,608&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:30a
java.exe<BR>
JAVAW&nbsp;&nbsp;&nbsp;&nbsp;EXE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4,608&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:30a
javaw.exe<BR>
JAVAP&nbsp;&nbsp;&nbsp;&nbsp;EXE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;72,192&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:30a
javap.exe<BR>
JAVAH&nbsp;&nbsp;&nbsp;&nbsp;EXE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;40,448&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:26a
javah.exe<BR>
JAVAI_G&nbsp;&nbsp;DLL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 265,216&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:35a
javai_g.dll<BR>
JAVA_G&nbsp;&nbsp;&nbsp;EXE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5,632&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:35a
java_g.exe<BR>
JAVAW_G&nbsp;&nbsp;EXE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6,144&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:35a
javaw_g.exe<BR>
JAVAP_G&nbsp;&nbsp;EXE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;98,304&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:35a
javap_g.exe<BR>
JAVAH_G&nbsp;&nbsp;EXE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;54,784&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:31a
javah_g.exe<BR>
NET&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DLL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;14,336&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:37a
net.dll<BR>
NET_G&nbsp;&nbsp;&nbsp;&nbsp;DLL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;17,920&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:37a
net_g.dll<BR>
JAVAC&nbsp;&nbsp;&nbsp;&nbsp;EXE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4,608&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:40a
javac.exe<BR>
JAVAC_G&nbsp;&nbsp;EXE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6,144&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:40a
javac_g.exe<BR>
AGENT&nbsp;&nbsp;&nbsp;&nbsp;DLL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;14,848&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:41a
agent.dll<BR>
AGENT_G&nbsp;&nbsp;DLL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;18,432&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:42a
agent_g.dll<BR>
JDB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EXE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4,608&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:42a
jdb.exe<BR>
JDB_G&nbsp;&nbsp;&nbsp;&nbsp;EXE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6,144&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:42a
jdb_g.exe<BR>
JAVADOC&nbsp;&nbsp;EXE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4,608&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:43a
javadoc.exe<BR>
JAVADO~1 EXE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6,144&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:43a
javadoc_g.exe<BR>
AWT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DLL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
139,264&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:45a awt.dll<BR>
AWT_G&nbsp;&nbsp;&nbsp;&nbsp;DLL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
177,664&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:46a awt_g.dll<BR>
JPEG&nbsp;&nbsp;&nbsp;&nbsp; DLL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;63,488&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:46a
jpeg.dll<BR>
JPEG_G&nbsp;&nbsp;&nbsp;DLL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;89,088&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:47a
jpeg_g.dll<BR>
MMEDIA&nbsp;&nbsp;&nbsp;DLL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6,144&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:47a
mmedia.dll<BR>
MMEDIA_G DLL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7,680&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:47a
mmedia_g.dll<BR>
APPLET~1 EXE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5,120&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:49a
appletviewer.exe<BR>
APPLET~2 EXE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7,168&nbsp;&nbsp;01-12-96&nbsp;&nbsp;9:49a
appletviewer_g.exe<BR>
MFC30&nbsp;&nbsp;&nbsp;&nbsp;DLL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;322,832&nbsp;&nbsp;01-12-96&nbsp;&nbsp;8:00a
mfc30.dll</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">MSVCRT20 DLL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;253,952&nbsp;&nbsp;01-12-96&nbsp;&nbsp;8:00a
msvcrt20.dll</FONT></TT>
</BLOCKQUOTE>
<P>
The executables and link libraries come in two forms. Those files
with the suffix <TT><FONT FACE="Courier">_g</FONT></TT> are compiled
and linked with debugging information. Executables with the suffix
<TT><FONT FACE="Courier">_g</FONT></TT> support all of Java's
mechanisms for debugging. Executables without the suffix <TT><FONT FACE="Courier">_g</FONT></TT>
are optimized for normal use and support only limited debugging
options. Many of the files in this directory are used by the Java
environment itself and are, in fact, the Windows 95/NT interface
to Java. They include the following:<P>
<CENTER>
<TABLE>
<TR><TD WIDTH=127><TT><FONT FACE="Courier">awt.dll</FONT></TT>
</TD><TD WIDTH=576>Java uses the <TT><FONT FACE="Courier">awt.dll</FONT></TT> libraries to display graphics and to create graphical interfaces to buttons, scrollbars, and pop-up windows.
</TD></TR>
<TR><TD WIDTH=127><TT><FONT FACE="Courier">jpeg.dll</FONT></TT>
</TD><TD WIDTH=576>Java uses the <TT><FONT FACE="Courier">jpeg.dll</FONT></TT> libraries to interpret and display JPEG images.
</TD></TR>
<TR><TD WIDTH=127><TT><FONT FACE="Courier">mmedia.dll</FONT></TT>
</TD><TD WIDTH=576>Java uses the <TT><FONT FACE="Courier">mmedia.dll</FONT></TT> libraries to perform multimedia functions that include displaying GIF images and playing AU sound files.
</TD></TR>
<TR><TD WIDTH=127><TT><FONT FACE="Courier">net.dll</FONT></TT>
</TD><TD WIDTH=576>Java uses the <TT><FONT FACE="Courier">net.dll</FONT></TT> libraries when you perform network operations.
</TD></TR>
</TABLE></CENTER>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Peter's Principle:</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
Setting Your Paths for Java in Windows 95/NT</BLOCKQUOTE>
<BLOCKQUOTE>
After installing the JDK, you should update your <TT><FONT FACE="Courier">AUTOEXEC.BAT</FONT></TT> file so your computer can find the Java executables and class libraries. Follow these steps for updating your <TT><FONT 
FACE="Courier">AUTOEXEC.BAT</FONT></TT> file:
<BR>
</BLOCKQUOTE>
<OL>
<LI>Type the following:<BR>
<BR>
<TT><FONT FACE="Courier">EDIT C:\AUTOEXEC.BAT<BR>
</FONT></TT>
<LI>Add the full path to the Java executables to your <TT><FONT FACE="Courier">PATH</FONT></TT> statement, which allows you to run the JDK tools without having to specify the full path to the binaries. If you installed Java under the <TT><FONT 
FACE="Courier">C:\</FONT></TT> directory, which is recommended, you would place the following line after your current <TT><FONT FACE="Courier">PATH</FONT></TT> statement in your <TT><FONT FACE="Courier">AUTOEXEC.BAT</FONT></TT> file:
<BR>
<BR>
<TT><FONT FACE="Courier">PATH=%path%;C:\JAVA\BIN<BR>
</FONT></TT>
<LI>Setting the <TT><FONT FACE="Courier">CLASSPATH</FONT></TT> variable is optional. However, if you installed a previous version of the JDK, you should either remove the line that assigns the <TT><FONT FACE="Courier">CLASSPATH</FONT></TT> variable or set 
the <TT><FONT FACE="Courier">CLASSPATH</FONT></TT> environment variable to the location of the <TT><FONT FACE="Courier">classes.zip</FONT></TT> file.
<BR>
<BR>
If you installed Java under the <TT><FONT FACE="Courier">C:\</FONT></TT> directory, you would add the following line to your <TT><FONT FACE="Courier">AUTOEXEC.BAT</FONT></TT> file:
<BR>
<BR>
<TT><FONT FACE="Courier">SET CLASSPATH=C:\JAVA\LIB\CLASSES.ZIP<BR>
<BR>
</FONT></TT>If you plan to create your own packages or to store Java classes in a private directory, you should prepend the directory path to the setting for the <TT><FONT FACE="Courier">CLASSPATH</FONT></TT> variable. For example, if you wanted to store 
your class files in the directory <TT><FONT FACE="Courier">c:\myclasses</FONT></TT>, you would set the <TT><FONT FACE="Courier">CLASSPATH</FONT></TT> variable as follows:
<BR>
<BR>
<TT><FONT FACE="Courier">SET CLASSPATH=C:\MYCLASSES;C:\JAVA\LIB\CLASSES.ZIP<BR>
</FONT></TT>
<LI>Optionally, if you installed the JDK anywhere other than your file system's root directory and under a directory named <TT><FONT FACE="Courier">java</FONT></TT>, you will have to set the <TT><FONT FACE="Courier">JAVA_HOME</FONT></TT> environment 
variable. If you installed the JDK in <TT><FONT FACE="Courier">C:MYJAVA</FONT></TT>, you would set this variable as follows:
<BR>
<BR>
<TT><FONT FACE="Courier">SET JAVA_HOME=C:\MYJAVA<BR>
</FONT></TT>
<LI>Save and close your <TT><FONT FACE="Courier">AUTOEXEC.BAT</FONT></TT> file.
<LI>Reboot your computer. This sets the working environment for all future sessions. You can set your current working environment for use with Java. Your current working environment only applies to the MS-DOS prompt into which you enter the path setting. 
You must use the actual path to your Java executables. If you installed Java under the <TT><FONT FACE="Courier">C:\</FONT></TT> directory, you would type the following at the MS-DOS prompt:<BR>
<BR>
<TT><FONT FACE="Courier">PATH=%PATH%;C:\JAVA\BIN;</FONT></TT>
</OL>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Another directory you will want to check is the <TT><FONT FACE="Courier">demo</FONT></TT>
directory, which contains many demonstration applets. By previewing
these demos, you can see Java in action. The <TT><FONT FACE="Courier">include</FONT></TT>
directory contains C-language header and stub files. These files
are primarily used to set paths and definitions needed by Java
and essential to Java interaction with C.
<P>
The <TT><FONT FACE="Courier">lib</FONT></TT> directory contains
essential library files and the zipped file for all classes included
in the Java API, called <TT><FONT FACE="Courier">classes.zip</FONT></TT>.
Loading classes from zipped files makes it possible to compress
the entire contents of the Java API into one file. The Java runtime
class loader and the Java compiler extract any class files they
need from <TT><FONT FACE="Courier">classes.zip</FONT></TT>.<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Warning:</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
Although you can unzip the <TT><FONT FACE="Courier">src.zip</FONT></TT> file, you should not unzip the <TT><FONT FACE="Courier">classes.zip</FONT></TT> file. The <TT><FONT FACE="Courier">classes.zip</FONT></TT> file contains all the classes and methods in 
the Java API. If you unzip this file, you will create hundreds of unnecessary files on your hard drive.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="TestingtheInstallationNT">Testing the Installation</A></H3>
<P>
A great way to test your new Java developer's environment is to
preview one of the demo applets included in the JDK. As you can
see from the following code, each demo applet is located in the
<TT><FONT FACE="Courier">demo</FONT></TT> directory and has its
own subdirectory:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;Directory of C:\java\demo
<BR>
WIREFR~1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
WireFrame<BR>
TICTAC~1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
TicTacToe<BR>
BOUncI~1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
BouncingHeads<BR>
MOLECU~1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
MoleculeViewer<BR>
ARCTEST&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
ArcTest<BR>
DRAWTEST&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
DrawTest<BR>
CARDTEST&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
CardTest<BR>
SPREAD~1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
SpreadSheet<BR>
BLINK&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
Blink<BR>
TUMBLI~1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
TumblingDuke<BR>
NERVOU~1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
NervousText<BR>
FRACTAL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
Fractal<BR>
BARchART&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
BarChart<BR>
UNDERC~1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
UnderConstruction<BR>
JUMPIN~1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
JumpingBox<BR>
SCROLL~1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
ScrollingImages<BR>
DITHER~1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
DitherTest<BR>
IMAGEMAP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
ImageMap<BR>
GRAPHL~1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
GraphLayout<BR>
GRAPHI~1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
GraphicsTest<BR>
SIMPLE~1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
SimpleGraph<BR>
ANIMATOR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
Animator<BR>
IMAGET~1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
ImageTest</FONT></TT>
</BLOCKQUOTE>
<P>
In the subdirectories for each demonstration applet, you will
find all the files necessary to run the applet and to see how
the applet was created. For example, the directory for the <TT><FONT FACE="Courier">TicTacToe</FONT></TT>
applet contains the following:<BR>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><TT><FONT FACE="Courier">TicTacToe.class</FONT></TT>
</TD><TD WIDTH=349>The compiled class file for the <TT><FONT FACE="Courier">TicTacToe</FONT></TT> applet
</TD></TR>
<TR><TD WIDTH=167><TT><FONT FACE="Courier">TicTacToe.java</FONT></TT>
</TD><TD WIDTH=349>The source code for the <TT><FONT FACE="Courier">TicTacToe</FONT></TT> applet
</TD></TR>
<TR><TD WIDTH=167><TT><FONT FACE="Courier">audio</FONT></TT> directory
</TD><TD WIDTH=349>Contains AU sound files the applet uses</TD>
</TR>
<TR><TD WIDTH=167><TT><FONT FACE="Courier">example1.html</FONT></TT>
</TD><TD WIDTH=349>A sample HTML document for viewing the applet
</TD></TR>
<TR><TD WIDTH=167><TT><FONT FACE="Courier">images</FONT></TT> directory
</TD><TD WIDTH=349>Contains the images the applet uses</TD></TR>
</TABLE></CENTER>
<P>
<P>
To test the installation, you can view the applet by accessing
the <TT><FONT FACE="Courier">example1.html</FONT></TT> file with
your Java-capable Web browser. You can also view the applet using
the <TT><FONT FACE="Courier">appletviewer</FONT></TT> tool that
comes with the JDK. If you are currently in the <TT><FONT FACE="Courier">java</FONT></TT>
base directory, you can type the following to view the <TT><FONT FACE="Courier">TicTacToe</FONT></TT>
demo applet with <TT><FONT FACE="Courier">appletviewer</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">appletviewer demo\TicTacToe\example1.html</FONT></TT>
</BLOCKQUOTE>
<P>
If you are currently in the <TT><FONT FACE="Courier">java\demo\TicTacToe</FONT></TT>
directory, you can type the following to view the <TT><FONT FACE="Courier">TicTacToe</FONT></TT>
demo applet with <TT><FONT FACE="Courier">appletviewer</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">appletviewer example1.html</FONT></TT>
</BLOCKQUOTE>
<P>
When you run <TT><FONT FACE="Courier">appletviewer</FONT></TT>,
the <TT><FONT FACE="Courier">TicTacToe</FONT></TT> applet should
display on your screen. Because the <TT><FONT FACE="Courier">TicTacToe</FONT></TT>
applet uses threads, <TT><FONT FACE="Courier">appletviewer</FONT></TT>
may write something similar to the following in the<BR>
MS-DOS prompt area:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">thread applet-TicTacToe.class find class
TicTacToe</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Opening stream to: file:/C:/java/demo/TicTacToe/TicTacToe.class
to get TicTacToe</FONT></TT>
</BLOCKQUOTE>
<P>
The good news is that if you can run the demo applet, your base
installation worked correctly. If you have any problems running
the <TT><FONT FACE="Courier">TicTacToe</FONT></TT> applet with
<TT><FONT FACE="Courier">appletviewer</FONT></TT>, first make
sure you are in the correct directory. Next, make sure your <TT><FONT FACE="Courier">PATH</FONT></TT>
statement and environment are set correctly. When you type <TT><FONT FACE="Courier">PATH</FONT></TT>
at the MS-DOS prompt, you should see the previous path settings
and the updated path setting for Java. When you type <TT><FONT FACE="Courier">SET</FONT></TT>
at the MS-DOS prompt, you should see the previous environment
settings and the setting for Java's <TT><FONT FACE="Courier">CLASSPATH</FONT></TT>
environment variable, providing that you set this variable.
<P>
If you get the error message <TT><FONT FACE="Courier">Exception
in thread NULL</FONT></TT> when running the Java interpreter,
compiler, or <TT><FONT FACE="Courier">appletviewer</FONT></TT>,
you should check the setting for your <TT><FONT FACE="Courier">CLASSPATH</FONT></TT>
environment variable. You can do this by typing <TT><FONT FACE="Courier">SET</FONT></TT>
at the MS-DOS prompt. The <TT><FONT FACE="Courier">CLASSPATH</FONT></TT>
variable must specify the full path to the <TT><FONT FACE="Courier">classes.zip</FONT></TT>
file and should not list the class directory from an older JDK
release.
<P>
Anyone who wants to maintain a separate class directory should
check to see if they have set the <TT><FONT FACE="Courier">CLASSPATH</FONT></TT>
environment variable correctly. An easy way to do this is to temporarily
move one of the demonstration class files to the location where
you plan to store your Java class files. The new location must
be empty if you follow this example.
<P>
From the <TT><FONT FACE="Courier">java\demo\TicTacToe</FONT></TT>
directory, type
<BLOCKQUOTE>
<TT><FONT FACE="Courier">mkdir c:\destination\file\path<BR>
move TicTacToe.class \destination\file\path</FONT></TT>
</BLOCKQUOTE>
<P>
where <TT><FONT FACE="Courier">\destination\file\path</FONT></TT>
is the actual file path to the destination directory, such as
<BLOCKQUOTE>
<TT><FONT FACE="Courier">mkdir c:\myclasses<BR>
move TicTacToe.class c:\myclasses</FONT></TT>
</BLOCKQUOTE>
<P>
You should now be able to run the <TT><FONT FACE="Courier">TicTacToe</FONT></TT>
demo on <TT><FONT FACE="Courier">appletviewer</FONT></TT> without
having to specify the path to the class file for the applet. From
the <TT><FONT FACE="Courier">java\demo\TicTacToe</FONT></TT> directory,
type the following to test it:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">appletviewer example1.html</FONT></TT>
</BLOCKQUOTE>
<P>
If you cannot view the applet, you should check your environment
settings. You can do this by typing <TT><FONT FACE="Courier">SET</FONT></TT>
at the MS-DOS prompt.
<P>
The <TT><FONT FACE="Courier">SET</FONT></TT> command should return
your updated setting for <TT><FONT FACE="Courier">CLASSPATH</FONT></TT>,
such as
<BLOCKQUOTE>
<TT><FONT FACE="Courier">CLASSPATH=C:\MYCLASSES;C:\JAVA\LIB\CLASSES.ZIP</FONT></TT>
</BLOCKQUOTE>
<P>
If the <TT><FONT FACE="Courier">CLASSPATH</FONT></TT> variable
is set incorrectly, you should refer back to the sidebar &quot;Setting
Your Paths for Java in Windows 95/NT.&quot;
<H2><A NAME="PowerStartforMacintosh"><FONT SIZE=5 COLOR=#Ff0000>Power
Start for Macintosh</FONT></A></H2>
<P>
The Macintosh has one of the friendliest operating systems available,
and it is unfortunate that Mac owners had to wait so long for
an initial implementation of the Java Developer's Kit. The first
version of the Macintosh JDK released for general use was a limited-use
Beta version that included the AWT and network packages but lacked
many of the other packages found on other systems. Also, the Beta
JDK only allowed you to create applets for use with external viewers.
<P>
The reasons for these limitations in the Beta JDK are many, but
one of the major reasons is that the Macintosh operating system
is fundamentally different from most other operating systems.
The developers of the Beta JDK found that the folder hierarchy
used in other JDKs did not make sense on a Mac. For example, on
other systems the binary executables are stored in a <TT><FONT FACE="Courier">bin</FONT></TT>
directory. A &quot;bin&quot; folder on a Macintosh does not make
much sense. Therefore, the developers moved the executables to
the top-level folder.
<P>
Additionally, the command line used on other systems allows the
tools in the JDK to be very basic and streamlined. Typing things
at a command line, however, goes against the principles upon which
the Mac is founded. Mac users like their drag-and-drop functionality,
and that is what the developers of the Mac JDK set it to provide.
However, graphical tools are inherently more complex than command-line
tools, and that's why developing the Mac JDK was such a slow process.
<P>
The current Macintosh JDK is much more advanced and includes <TT><FONT FACE="Courier">AWT</FONT></TT>,
<TT><FONT FACE="Courier">Networking</FONT></TT>, and <TT><FONT FACE="Courier">Multimedia</FONT></TT>
libraries. These three libraries provide the core functionality
of the standard API on other systems. To run Java on your Mac,
you should be running System 7.5 or higher on a Power Macintosh
or a Macintosh with at least a 68030 processor.
<P>
Before installing the JDK, you should ensure that you have enough
space on your hard drive for the installation. You will retrieve
a 2.5MB compressed installer file. When you install the JDK, you
need an additional 6MB of disk space. Although you can remove
the compressed installer file after a successful installation,
you still initially need about 9MB of disk space.
<P>
To set up a Java developer's environment on your Macintosh, follow
these steps:
<OL>
<LI>Obtain the Java Developer's Kit
<LI>Install the Java Developer's Kit
<LI>Test the installation
</OL>
<H3><A NAME="ObtainingtheJavaDevelopersKitMAC">Obtaining the Java Developer's Kit</H3>
<P>
The JDK for Macintosh includes the complete set of tools for viewing,
creating, and debugging Java programs and the precompiled code
packages from the standard API. To obtain the source file for
the JDK, you need to open an FTP session with one of the FTP sites
listed in Table 2.1.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Warning:</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
If a prerelease version of the JDK is installed on your system, you want to remove it before installing JDK 1.0 or later. This will remove files and directories that are no longer used with JDK 1.0 or later versions. However, before you do this, you should 
move any source code you created that is located in the directories you will be deleting. You can remove a previous installation by putting the top-level folder into the trashcan-don't forget to flush!</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
You can obtain the JDK source file from an FTP site in one of
two ways:
<UL>
<LI>With your Web browser, enter the URL path to the FTP site
as listed in the &quot;URL Path to JDK&quot; column of Table 2.1.
<LI>Using an FTP tool, open an FTP session to the FTP site as
listed in the &quot;FTP Site&quot; column of Table 2.1.
</UL>
<P>
In the example that follows, the JDK source code is downloaded
from JavaSoft. If the JavaSoft FTP site is busy, you can obtain
the source from any of the mirror sites listed in Table 2.1. Because
file paths on the Internet tend to change, you should follow the
steps sequentially.
<OL>
<LI>Start the FTP session using your FTP tool of your choice or
a Web browser. The URL path to JavaSoft is<BR>
<BR>
<TT><FONT FACE="Courier"><A HREF="tppmsgs\msgs0.htm#22" tppabs="ftp://ftp.javasoft.com/pub">ftp://ftp.javasoft.com/pub</A><BR>
<BR>
</FONT></TT>The FTP site you want to access with the FTP tool
is <TT><FONT FACE="Courier">ftp.javasoft.com</FONT></TT>. When
you have successfully connected, you should see a listing of files
and folders in the base directory.
<LI>Click on the <TT><FONT FACE="Courier">pub</FONT></TT> directory.
You should see a listing of the contents of the <TT><FONT FACE="Courier">pub</FONT></TT>
directory. You want to download the most current version of the
JDK for Mac. Currently, the JDK is available in both Macintosh
binary (<TT><FONT FACE="Courier">JDK-1_1-mac.sea.bin</FONT></TT>)
and Macintosh <TT><FONT FACE="Courier">hqx</FONT></TT> format
(<TT><FONT FACE="Courier">JDK-1_1-mac.sea.hqx</FONT></TT>). Select
and retrieve the version you want to download by clicking on it.
</OL>
<H3><A NAME="InstallingtheJavaDevelopersKitMAC">Installing the Java Developer's Kit</A></H3>
<P>
After you obtain the compressed installer file, you should check
to make sure the size of the file you downloaded matches the file
size listed on the FTP site. If the file sizes are not identical,
your file might have been corrupted during download. In this case,
you want to delete the file from your system and try to download
the JDK source file again.
<P>
Before you can install the JDK, you need to decompress the installer
file. You should use <TT><FONT FACE="Courier">Stuffit</FONT></TT>
to decompress the Macintosh binary file and <TT><FONT FACE="Courier">DeHQX</FONT></TT>
or <TT><FONT FACE="Courier">BinHex4</FONT></TT> to decompress
the <TT><FONT FACE="Courier">hqx</FONT></TT> file.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
If you used <TT><FONT FACE="Courier">Fetch</FONT></TT> or <TT><FONT FACE="Courier">Anarchie</FONT></TT> to download the files, the installer file was automatically decompressed when the download finished.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
To install the JDK, simply run the installer program. You can
change the name of the folder that will contain the JDK if you
want. I prefer the folder name <TT><FONT FACE="Courier">Java</FONT></TT>
or <TT><FONT FACE="Courier">JDK</FONT></TT> to the default. Folders
and files created during the installation include the following:
<P>

<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><TT><FONT FACE="Courier">Java Compiler</FONT></TT>
</TD><TD WIDTH=433>The Java compiler</TD></TR>
<TR><TD WIDTH=157><TT><FONT FACE="Courier">Applet Viewer</FONT></TT>
</TD><TD WIDTH=433>An application used to view applets without a Web browser.
</TD></TR>
<TR><TD WIDTH=157><TT><FONT FACE="Courier">Classes</FONT></TT>
</TD><TD WIDTH=433>A folder for class files used by the compiler and <FONT SIZE=1 FACE="MCPdigital">Applet</FONT> <FONT SIZE=1 FACE="MCPdigital">Viewer</FONT>
</TD></TR>
<TR><TD WIDTH=157><TT><FONT FACE="Courier">Java.shlb</FONT></TT>
</TD><TD WIDTH=433>The Java runtime shared library for Powerpc
</TD></TR>
<TR><TD WIDTH=157><TT><FONT FACE="Courier">lib</FONT></TT></TD>
<TD WIDTH=433>A folder containing libraries for the Java interpreter and compiler
</TD></TR>
<TR><TD WIDTH=157><TT><FONT FACE="Courier">Sample Applets</FONT></TT>
</TD><TD WIDTH=433>A folder containing sample applets and source code
</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="TestingtheInstallationMAC">Testing the Installation</A></H3>
<P>
A great way to test your new Java developer's environment is to
preview one of the sample applets included in the JDK. You can
view the sample applets with your Java-capable Web browser or
with the <TT><FONT FACE="Courier">Applet Viewer</FONT></TT> tool
that comes with the JDK.
<P>
To use the <TT><FONT FACE="Courier">Applet Viewer</FONT></TT>
tool, do the following:
<OL>
<LI>Open the folder named <TT><FONT FACE="Courier">Sample Applets</FONT></TT>.
<LI>Open the folder named <TT><FONT FACE="Courier">TicTacToe</FONT></TT>.
<LI>Drop the file <TT><FONT FACE="Courier">example1.html</FONT></TT>
on the application Applet Viewer.
</OL>
<P>
You should now be able to view the sample applet.
<H2><A NAME="PowerStartforOS2"><FONT SIZE=5 COLOR=#Ff0000>Power
Start for OS/2</FONT></A></H2>
<P>
IBM's OS/2 operating system is a popular alternative to Microsoft
Windows. The OS/2 version of the Java Developer's Kit is basically
a port from the Windows 95/NT version. The first version of the
OS/2 JDK released for general use was a Beta version. Because
the Beta version was basically a direct port from the Windows
95/NT version, it had many problems. The current version of the
JDK is much more advanced and features better support for the
native OS/2 environment.
<P>
The OS/2 JDK requires OS/2 2.<I>x</I> or OS/2 Warp. IBM recommends
a 486-class machine with 12MB+ RAM and OS/2 Warp for optimal performance,
especially because you need OS/2 Warp to play Java audio files.
You will also need an HPFS disk with at least 15MB of free space.
Be forewarned that the JDK requires long-name support. Before
installing the JDK, you should ensure that you have enough space
on your hard drive for the installation. Additionally, to use
the networking features of Java, you need TCP/IP software such
as Warp IAK or TCP/IP 2.0+.
<P>
To set up a Java developer's environment on your computer, follow
these steps:
<OL>
<LI>Obtain the Java Developer's Kit
<LI>Install the Java Developer's Kit
<LI>Test the installation
</OL>
<H3><A NAME="ObtainingtheJavaDevelopersKitOS2">Obtaining the Java Developer's Kit</A></H3>
<P>
The JDK for OS/2 includes the complete set of tools for viewing,
creating, and debugging Java programs and the precompiled code
packages from the standard API. To obtain the source file for
the JDK, you have to register to use the IBM developers area on
the Web.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Warning </B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
If you have a pre-release version of the JDK installed on your system, you want to remove it before installing JDK 1.0 or later to remove files and directories that are no longer used with JDK 1.0 or later versions. However, before you do this, you should 
move any source code you created that is located in the directories you will be deleting. From the OS/2 command prompt, you can type the following to remove the previous installation of the JDK in its entirety:</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">deltree /Y C:<I>\file\path</I></FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
where <TT><FONT FACE="Courier">C:<I>\file\path</I></FONT></TT> is the actual path to the previous installation of Java, such as
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">deltree /Y C:\java</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
You should also check to see if you set Java-related file paths when you last installed the JDK. You can do this by typing the following at the OS/2 command prompt:</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">TYPE C:\CONFIG.SYS</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
The previous command should list the contents of your <TT><FONT FACE="Courier">CONFIG.SYS</FONT></TT> file. You should now check for Java-related file paths. Java-related file paths include any file paths where the old version of the JDK was installed.
</BLOCKQUOTE>
<BLOCKQUOTE>
If you did not set Java-related paths, you can continue with the installation. If you set Java-related paths, you want to check the validity of these settings when you follow the steps for setting and/or updating your paths as discussed in the sidebar 
&quot;Setting Up Your Java Environment in OS/2,&quot; which appears in the next section.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Obtaining the JDK source for OS/2 is as easy as 1, 2, 3:
<OL>
<LI>With your Web browser, enter the URL path to IBM's Web site
and follow the link from this index page to IBM's online registration
form for software developers:<BR>
<BR>
<TT><A HREF="tppmsgs\msgs0.htm#30" tppabs="http://www.hursley.ibm.com/javainfo/download/index.html">http://www.hursley.ibm.com/javainfo/download/index.html</A></TT>
<LI>After you fill out and submit the form, you will receive an
e-mail message verifying your username and password. This message
should come back to you in a few minutes. After you receive a
user ID and password, you will be able to access the private developers
area and download the JDK source. You can click on the appropriate
link on the index page listed earlier or try to access the OS/2
developers area directly at<BR>
<BR>
<TT><A HREF="tppmsgs\msgs0.htm#31" tppabs="http://www.hursley.ibm.com/javainfo/Developer/os2/index.html">http://www.hursley.ibm.com/javainfo/Developer/os2/index.html</A></TT>
<LI>The developers page should have a link to a zip file containing
the JDK source. Click on the link to download the JDK for OS/2.
</OL>
<H3><A NAME="InstallingtheJavaDevelopersKitOS2">Installing the Java Developer's Kit</A></H3>
<P>
Before you can install the JDK, you need to unzip the compressed
source file. If you do not have an unzip utility that supports
long filenames, Infozip's UNZIP version 5.12 or later works well.
<P>
To install the JDK, follow these steps:
<OL>
<LI>From an OS/2 command prompt, change to the directory that
contains the JDK source file.
<LI>Move the JDK to where you want to install it. To install Java
in <TT><FONT FACE="Courier">c:\javaos2</FONT></TT>, you can use
the following command:<BR>
<TT><FONT FACE="Courier">move <I>filename</I> c:\<BR>
</FONT></TT>where <TT><I><FONT FACE="Courier">filename</FONT></I></TT>
is the actual name of the zip file, such as<BR>
<TT><FONT FACE="Courier">move JAVAOS2.ZIP c:\</FONT></TT>
<LI>Unzip the file. Be sure to set the <TT><FONT FACE="Courier">-d</FONT></TT>
directories and subdirectories flag if your unzip utility requires
it. If you are using Infozip's UNZIP, you can type the following:
<BR>
<TT><FONT FACE="Courier">unzip javaos2.zip</FONT></TT>
</OL>
<P>
When you unzip the JDK source file, you will be creating a directory
called <TT><FONT FACE="Courier">javaos2</FONT></TT> under the
current directory. If you are installing the JDK for OS/2 on your
system, subdirectories located under the <TT><FONT FACE="Courier">javaos2</FONT></TT>
directory include the following:<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><TT><FONT FACE="Courier">.hotjava</FONT></TT>
</TD><TD WIDTH=494>Directory containing network property files
</TD></TR>
<TR><TD WIDTH=96><TT><FONT FACE="Courier">applet</FONT></TT></TD>
<TD WIDTH=494>Output directory for applet viewer log files</TD>
</TR>
<TR><TD WIDTH=96><TT><FONT FACE="Courier">bin</FONT></TT></TD>
<TD WIDTH=494>Directory containing the JDK tools</TD></TR>
<TR><TD WIDTH=96><TT><FONT FACE="Courier">classes</FONT></TT>
</TD><TD WIDTH=494>Directory containing class files used by the compiler and applet viewer
</TD></TR>
<TR><TD WIDTH=96><TT><FONT FACE="Courier">demo</FONT></TT></TD>
<TD WIDTH=494>Directory containing demonstration applets and source code
</TD></TR>
<TR><TD WIDTH=96><TT><FONT FACE="Courier">dll</FONT></TT></TD>
<TD WIDTH=494>Directory containing dynamic linked library files needed by the Java compiler and interpreter
</TD></TR>
<TR><TD WIDTH=96><TT><FONT FACE="Courier">include</FONT></TT>
</TD><TD WIDTH=494>Directory containing <TT><FONT FACE="Courier">include</FONT></TT> files for building native classes
</TD></TR>
<TR><TD WIDTH=96><TT><FONT FACE="Courier">lib</FONT></TT></TD>
<TD WIDTH=494>Directory containing library and Java property files
</TD></TR>
<TR><TD WIDTH=96><TT><FONT FACE="Courier">src</FONT></TT></TD>
<TD WIDTH=494>Directory containing the source for a subset of the classes from the API
</TD></TR>
</TABLE></CENTER>
<P>
<P>
The executables and link libraries come in two forms. Those files
with suffix <TT><FONT FACE="Courier">_g</FONT></TT> are compiled
and linked with debugging information. Executables with the suffix
<TT><FONT FACE="Courier">_g</FONT></TT> support all of Java's
mechanisms for debugging. Executables without the suffix <TT><FONT FACE="Courier">_g</FONT></TT>
are optimized for normal use and support only limited debugging
options. The dynamic linked libraries are used by the Java environment
itself and are, in fact, the OS/2 interface to Java.
<P>
The classes in the <TT><FONT FACE="Courier">src</FONT></TT> directory
represent a good cross-section of the functionality introduced
by the Java API and are written in the Java programming language.
You can learn a lot by examining them. Therefore, I highly recommend
that you make a note to go through some of the files after you
read this book.
<P>
Another directory you want to check is the <TT><FONT FACE="Courier">demo</FONT></TT>
directory, which contains many demonstration applets. By previewing
these demos, you can see Java in action. The <TT><FONT FACE="Courier">include</FONT></TT>
directory contains C-language header and stub files. These files
are primarily used to set paths and definitions needed by Java
and essential to Java interaction with C. Finally, the <TT><FONT FACE="Courier">lib</FONT></TT>
directory contains essential library files.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Peter's Principle:</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
Setting Up Your Java Environment in OS/2</BLOCKQUOTE>
<BLOCKQUOTE>
After installing the JDK, you should update your <TT><FONT FACE="Courier">CONFIG.SYS</FONT></TT> file so your computer can find the Java executables and class libraries. Follow these steps for updating your <TT><FONT FACE="Courier">CONFIG.SYS</FONT></TT> 
file:
</BLOCKQUOTE>
<OL>
<LI>Type the following at the OS/2 command prompt:<BR>
<TT><FONT FACE="Courier">EDIT C:\CONFIG.SYS</FONT></TT>
<LI>Add the full path to the Java <TT><FONT FACE="Courier">dll</FONT></TT> directory to the current path for the <TT><FONT FACE="Courier">LIBPATH</FONT></TT> environment variable. This allows Java to find the DLL files. If you installed the JDK in 
<TT><FONT FACE="Courier">c:\javaos2</FONT></TT>, the full path to the <TT><FONT FACE="Courier">dll</FONT></TT> directory is
<BR>
<TT><FONT FACE="Courier">c:\javaos2\dll</FONT></TT>
<LI>Add the full path to the Java <TT><FONT FACE="Courier">bin</FONT></TT> directory to the current path setting. This allows Java to find the binary executables for Java. If you installed the JDK in <TT><FONT FACE="Courier">c:\javaos2</FONT></TT>, the 
full path to the <TT><FONT FACE="Courier">bin</FONT></TT> directory is
<BR>
<TT><FONT FACE="Courier">c:\javaos2\bin</FONT></TT>
<LI>Optionally, if you installed the JDK in a directory other than <TT><FONT FACE="Courier">javaos2</FONT></TT>, you will have to set the <TT><FONT FACE="Courier">HOME</FONT></TT> and the <TT><FONT FACE="Courier">JAVA_HOME</FONT></TT> environment 
variables. If you installed the JDK in <TT><FONT FACE="Courier">C:MYJAVA</FONT></TT>, you would set these variables as follows:
<BR>
<TT><FONT FACE="Courier">SET HOME=C:\MYJAVA<BR>
SET JAVA_HOME=C:\MYJAVA</FONT></TT>
<LI>Save and close your <TT><FONT FACE="Courier">CONFIG.SYS</FONT></TT> file.
<LI>Reboot your computer. Rebooting your computer sets the working environment for all future sessions. Optionally, you can type the following from the OS/2 command prompt to set your current working environment for use with Java. Your current working 
environment applies only to the OS/2 command prompt into which you enter the environment and path settings. You must use the actual path to your Java executables and dynamic link libraries. If you installed Java under the <TT><FONT 
FACE="Courier">C:\javaos2</FONT></TT> directory, you would type the following at the OS/2 command prompt:<BR>
<TT><FONT FACE="Courier">SET PATH=%PATH%;C:\JAVAOS2\BIN;<BR>
SET LIBPATH=%LIBPATH%;C:\JAVAOS2\DLL;</FONT></TT>
</OL>

</TD></TR>
</TABLE></CENTER>
<BLOCKQUOTE>
</BLOCKQUOTE>
<H3><A NAME="TestingtheInstallationOS2">Testing the Installation</A></H3>
<P>
A great way to test your new Java developer's environment is to
preview one of the demo applets included in the JDK. Each demo
applet is located in the <TT><FONT FACE="Courier">demo</FONT></TT>
directory and has its own subdirectory. In the subdirectories
for each demonstration applet, you will find all the files necessary
to run the applet and to see how the applet was created. For example,
the directory for the <TT><FONT FACE="Courier">TicTacToe</FONT></TT>
applet contains the following:
<P>

<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1>
<TR><TD><TT><FONT FACE="Courier">TicTacToe.class</FONT></TT>
</TD><TD WIDTH=349>The compiled class file for the <TT><FONT FACE="Courier">TicTacToe</FONT></TT> applet
</TD></TR>
<TR><TD WIDTH=167><TT><FONT FACE="Courier">TicTacToe.java</FONT></TT>
</TD><TD WIDTH=349>The source code for the <TT><FONT FACE="Courier">TicTacToe</FONT></TT> applet
</TD></TR>
<TR><TD WIDTH=167><TT><FONT FACE="Courier">audio</FONT></TT> directory
</TD><TD WIDTH=349>Contains AU sound files the applet uses</TD>
</TR>
<TR><TD WIDTH=167><TT><FONT FACE="Courier">example1.html</FONT></TT>
</TD><TD WIDTH=349>A sample HTML document for viewing the applet
</TD></TR>
<TR><TD WIDTH=167><TT><FONT FACE="Courier">images</FONT></TT> directory
</TD><TD WIDTH=349>Contains the images the applet uses</TD></TR>
</TABLE></CENTER>
<P>
<P>
To test the installation, you can view the applet by accessing
the <TT><FONT FACE="Courier">example1.html</FONT></TT> file with
your Java-capable Web browser. You can also view the applet using
the <TT><FONT FACE="Courier">appletviewer</FONT></TT> tool that
comes with the JDK. If you are currently in the <TT><FONT FACE="Courier">javaos2</FONT></TT>
directory, you can type the following to view the <TT><FONT FACE="Courier">TicTacToe</FONT></TT>
demo applet with the <TT><FONT FACE="Courier">appletviewer</FONT></TT>
tool:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">start applet demo\TicTacToe\example1.html</FONT></TT>
</BLOCKQUOTE>
<P>
If you are currently in the <TT><FONT FACE="Courier">java\demo\TicTacToe</FONT></TT>
directory, you can type the following to view the <TT><FONT FACE="Courier">TicTacToe</FONT></TT>
demo applet with the <TT><FONT FACE="Courier">appletviewer</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">start applet example1.html</FONT></TT>
</BLOCKQUOTE>
<P>
When you run the <TT><FONT FACE="Courier">appletviewer</FONT></TT>
tool, you should see the applet and something similar to the following
should be written to the <TT><FONT FACE="Courier">javaos2\applet</FONT></TT>
log files:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">thread applet-TicTacToe.class find class
TicTacToe<BR>
Opening stream to: file:/C:/javaos2/demo/TicTacToe/TicTacToe.class
<BR>
&Acirc;to get TicTacToe</FONT></TT>
</BLOCKQUOTE>
<P>
The good news is that if you can run the demo applet, your base
installation worked correctly. If you have any problems running
the <TT><FONT FACE="Courier">TicTacToe</FONT></TT> applet with
the applet viewer tool, first make sure you are in the correct
directory. Next, make sure your <TT><FONT FACE="Courier">PATH</FONT></TT>
statement and environment are set correctly. When you type <TT><FONT FACE="Courier">PATH</FONT></TT>
at the OS/2 command prompt, you should see the previous path settings
and the updated path setting for Java. When you type <TT><FONT FACE="Courier">SET</FONT></TT>
at the OS/2 command prompt, you should see the previous environment
settings and the updated setting for the <TT><FONT FACE="Courier">LIBPATH</FONT></TT>
environment variable. Additionally, if you set the <TT><FONT FACE="Courier">HOME</FONT></TT>
and <TT><FONT FACE="Courier">JAVA_HOME</FONT></TT> variables,
you should see these settings as well when you type <TT><FONT FACE="Courier">SET</FONT></TT>
at the command prompt.
<H3><A NAME="PerformanceTuningforOS2">Performance Tuning for OS/2</A>
</H3>
<P>
A nice feature of the JDK for OS/2 is the capability to do additional
performance tuning. In particular, the OS/2 JDK allows you to
set three environment variables either permanently in your <TT><FONT FACE="Courier">CONFIG.SYS</FONT></TT>
or temporarily at the OS/2 command prompt.
<P>
Additional performance-tuning environment variables include the
following:
<P>

<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><TT><FONT FACE="Courier">JAVA_CONNECT_TIMEOUT=n</FONT></TT>
</TD><TD WIDTH=361>Used to adjust the time that Java will wait for a network connection before it reports a timeout. The default value for this variable is 30 seconds. Valid values for <TT><FONT FACE="Courier">n</FONT></TT> are from 1 through 1,000,000.
</TD></TR>
<TR><TD WIDTH=229><TT><FONT FACE="Courier">JAVA_AUDIO_VOLUME=v</FONT></TT>
</TD><TD WIDTH=361>Used to adjust the audio volume from Java as a percentage of the maximum allowable volume. The default value for this variable is 50. Valid values for <TT><FONT FACE="Courier">v</FONT></TT> are from 0 through 100.
</TD></TR>
<TR><TD WIDTH=229><TT><FONT FACE="Courier">JAVA_AUDIO_RATE=n</FONT></TT>
</TD><TD WIDTH=361>Used to set the preferred playback sample rate for audio. By default, Java first tries to play audio at 8,000 samples and then tries 11,025 samples. You can override this default by setting <TT><FONT FACE="Courier">n</FONT></TT> to a 
specific value: 8 for 8,000 samples per second or 11 for 11,025 samples per second.
</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="PowerStartforAIX"><FONT SIZE=5 COLOR=#Ff0000>Power
Start for AIX</FONT></A></H2>
<P>
One major flavor of UNIX for which the JDK is currently available
is AIX. As you will see, the steps for installing the AIX version
of the JDK are very similar to the steps for installing the Solaris
version. This is because the underlying architecture for both
Solaris and AIX is UNIX-based.
<P>
The AIX JDK requires AIX version 4.1.3 or higher. Before installing
the JDK, you should ensure that you have enough space on your
hard drive for the installation. For AIX, you will retrieve a
4.9MB compressed file. When you install the JDK, you will need
an additional 9MB of disk space. Although you can remove the compressed
JDK file after a successful installation, you still initially
need about 15MB of disk space.
<P>
To set up a Java developer's environment on your computer, follow
these steps:
<OL>
<LI>Obtain the Java Developer's Kit
<LI>Install the Java Developer's Kit
<LI>Test the installation
</OL>
<H3><A NAME="ObtainingtheJavaDevelopersKitAIX">Obtaining the Java
Developer's Kit</A></H3>
<P>
The JDK for AIX includes the complete set of tools for viewing,
creating, and debugging Java programs and the precompiled code
packages from the standard API. To obtain the source file for
the JDK, you have to register to use the IBM developers area on
the Web.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Warning:</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
If you have a pre-release version of the JDK installed on your system, you want to remove it before installing JDK 1.0 or later to remove files and directories that are no longer used with JDK 1.0 or later versions. However, before you do this, you should 
move any source code you created that is located in the directories you will be deleting.</BLOCKQUOTE>
<BLOCKQUOTE>
From the shell prompt, you can type the following to remove the previous installation of the JDK in its entirety:</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">rm -rf <I>\file\path</I></FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
where <TT><I><FONT FACE="Courier">\file\path</FONT></I></TT> is the actual path to the previous installation of Java, such as
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">rm -rf \java</FONT></TT>
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Obtaining the JDK source for AIX is as easy as 1, 2, 3:
<OL>
<LI>With your Web browser, enter the URL path to IBM's Web site
and follow the link from this index page to IBM's online registration
form for software developers:<BR>
<TT><A HREF="tppmsgs\msgs0.htm#30" tppabs="http://www.hursley.ibm.com/javainfo/download/index.html">http://www.hursley.ibm.com/javainfo/download/index.html</A></TT>
<LI>After you fill out and submit the form, you will receive an
e-mail message verifying your username and password. This message
should come back to you in a few minutes. After you receive a
user ID and password, you will be able to access the private developers
area and download the JDK source. You can click on the appropriate
link on the index page listed earlier or try to access the AIX
developer's area directly at<BR>
<TT><A HREF="tppmsgs\msgs0.htm#32" tppabs="http://www.hursley.ibm.com/javainfo/Developer/aix/index.html">http://www.hursley.ibm.com/javainfo/Developer/aix/index.html</A></TT>
<LI>The developers page should have a link to a zip file containing
the JDK source. Click on the link to download the JDK for AIX.
</OL>
<H3><A NAME="InstallingtheJavaDevelopersKitAIX">Installing the Java
Developer's Kit</A></H3>
<P>
The AIX JDK source file is compressed and packed. You need to
uncompress and unpack the files. The following steps will guide
you through the installation process:
<OL>
<LI>Change to the directory that contains the JDK source file.
<LI>Move the JDK to where you want to install it. To install Java
in <TT><FONT FACE="Courier">/java</FONT></TT>, which is recommended,
you can use the following command:<BR>
<TT><FONT FACE="Courier">mv <I>filename</I> /<BR>
</FONT></TT>  where <TT><I><FONT FACE="Courier">filename</FONT></I></TT>
is the actual name of the file, such as<BR>
<TT><FONT FACE="Courier">mv java1.1.tar.Z /</FONT></TT>
<LI>Uncompress and unpack the file. You can do this using the
following command:<BR>
<TT><FONT FACE="Courier">uncompress <I>filename</I> | tar -xf
-<BR>
</FONT></TT>where <TT><I><FONT FACE="Courier">filename</FONT></I></TT>
is the actually name of the file, such as<BR>
<TT><FONT FACE="Courier">uncompress java1.1.tar.Z | tar -xf -</FONT></TT>
</OL>
<P>
When you uncompress and unpack the compressed JDK file, you will
be creating a directory called <TT><FONT FACE="Courier">java</FONT></TT>
under the current directory. If you are installing the JDK for
AIX on your system, the following are some of the files and subdirectories
that will be located under the <TT><FONT FACE="Courier">java</FONT></TT>
directory:
<P>

<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1>
<TR><TD WIDTH=90><TT><FONT FACE="Courier">bin</FONT></TT></TD>
<TD WIDTH=500>Directory containing the JDK tools</TD></TR>
<TR><TD WIDTH=90><TT><FONT FACE="Courier">classes</FONT></TT>
</TD><TD WIDTH=500>Directory containing the compiled class files for the Java API
</TD></TR>
<TR><TD WIDTH=90><TT><FONT FACE="Courier">demo</FONT></TT></TD>
<TD WIDTH=500>Directory containing demonstration applets and source code
</TD></TR>
<TR><TD WIDTH=90><TT><FONT FACE="Courier">include</FONT></TT>
</TD><TD WIDTH=500>Directory containing C-language header and stub files
</TD></TR>
<TR><TD WIDTH=90><TT><FONT FACE="Courier">lib</FONT></TT></TD>
<TD WIDTH=500>Directory containing runtime library and Java property files
</TD></TR>
<TR><TD WIDTH=90><TT><FONT FACE="Courier">lib/ums</FONT></TT>
</TD><TD WIDTH=500>Directory containing audio libraries for systems with audio hardware on the motherboard
</TD></TR>
<TR><TD WIDTH=90><TT><FONT FACE="Courier">lib/aix</FONT></TT>
</TD><TD WIDTH=500>Directory containing AIX-specific libraries and audio libraries for systems without audio hardware on the motherboard
</TD></TR>
<TR><TD WIDTH=90><TT><FONT FACE="Courier">java</FONT></TT></TD>
<TD WIDTH=500>Directory containing the source for a subset of the classes from the API
</TD></TR>
</TABLE></CENTER>
<P>
<P>
You will find the following executable files for the JDK tools
in the <TT><FONT FACE="Courier">bin</FONT></TT> directory. All
the executables-except for the Java source-level debugger, <TT><FONT FACE="Courier">jdb</FONT></TT>-come
in two forms. Executables with the suffix <TT><FONT FACE="Courier">_g</FONT></TT>
are for debugging and support all of Java's mechanisms for debugging.
Executables without the suffix <TT><FONT FACE="Courier">_g</FONT></TT>
are optimized for normal use and support only limited debugging
options.
<P>
Another directory you want to check is the <TT><FONT FACE="Courier">demo</FONT></TT>
directory, which contains many demonstration applets. By previewing
these demos, you can see Java in action. The <TT><FONT FACE="Courier">include</FONT></TT>
directory contains C-language header and stub files. These files
are primarily used to set paths and definitions needed by Java
and essential to Java interaction with C. Finally, the <TT><FONT FACE="Courier">lib</FONT></TT>
directory contains essential library files.
<P>
You should now add the full path to the <TT><FONT FACE="Courier">java/bin</FONT></TT>
directory to your search path. This will allow you to execute
the JDK tools from any directory.
<H3><A NAME="TestingtheInstallationAIX">Testing the Installation</A>
</H3>
<P>
A great way to test your new Java developer's environment is to
preview one of the demo applets included in the JDK. In the subdirectories
for each demonstration applet, you will find all the files necessary
to run the applet and to see how the applet was created. For example,
the directory for the <TT><FONT FACE="Courier">TicTacToe</FONT></TT>
applet contains the following:
<P>

<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><TT><FONT FACE="Courier">TicTacToe.class</FONT></TT>
</TD><TD WIDTH=349>The compiled class file for the <TT><FONT FACE="Courier">TicTacToe</FONT></TT> applet
</TD></TR>
<TR><TD WIDTH=167><TT><FONT FACE="Courier">TicTacToe.java</FONT></TT>
</TD><TD WIDTH=349>The source code for the <TT><FONT FACE="Courier">TicTacToe</FONT></TT> applet
</TD></TR>
<TR><TD WIDTH=167><TT><FONT FACE="Courier">audio</FONT></TT> directory
</TD><TD WIDTH=349>Contains AU sound files the applet uses</TD>
</TR>
<TR><TD WIDTH=167><TT><FONT FACE="Courier">example1.html</FONT></TT>
</TD><TD WIDTH=349>A sample HTML document for viewing the applet
</TD></TR>
<TR><TD WIDTH=167><TT><FONT FACE="Courier">images</FONT></TT> directory
</TD><TD WIDTH=349>Contains the images the applet uses</TD></TR>
</TABLE></CENTER>
<P>
<P>
To test the installation, you can view the applet by accessing
the <TT><FONT FACE="Courier">example1.html</FONT></TT> file with
your Java-capable Web browser. You can also view the applet using
the <TT><FONT FACE="Courier">appletviewer</FONT></TT> tool that
comes with the JDK. If you are currently in the <TT><FONT FACE="Courier">java</FONT></TT>
base directory, you can type the following to view the <TT><FONT FACE="Courier">TicTacToe</FONT></TT>
demo applet with <TT><FONT FACE="Courier">appletviewer</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">bin/appletviewer demo/TicTacToe/example1.html</FONT></TT>
</BLOCKQUOTE>
<P>
The good news is that if you can run the demo applet, your base
installation worked correctly. If you have any problems running
the <TT><FONT FACE="Courier">TicTacToe</FONT></TT> applet with
<TT><FONT FACE="Courier">appletviewer</FONT></TT>, check your
current path by typing <TT><FONT FACE="Courier">pwd</FONT></TT>
at the shell prompt. You should change directories to the base
<TT><FONT FACE="Courier">java</FONT></TT> directory and try to
run <TT><FONT FACE="Courier">appletviewer</FONT></TT> again. Normally
the base <TT><FONT FACE="Courier">java</FONT></TT> directory is
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/java</FONT></TT>
</BLOCKQUOTE>
<P>
or a subdirectory under your home directory called
<BLOCKQUOTE>
<TT><FONT FACE="Courier">java</FONT></TT>
</BLOCKQUOTE>
<H2><A NAME="MakingtheTransitionfromcctoJava"><FONT SIZE=5 COLOR=#Ff0000>Making
the Transition from C/C++ to Java</FONT></A></H2>
<P>
Since the release of Java Alpha in 1995, thousands of frustrated
C/C++ programmers have chased the Java dream. From the hype surrounding
Java and the rejoicing in the press, they expected to become expert
Java programmers in no time. After all, like I said, Java is modeled
after C and C++.
<P>
The problem is that you must always crawl before you walk. However,
you will find that making the transition from C/C++ to Java is
easy if you take the time to learn about the fundamental differences
between C/C++ and Java. This section highlights these differences
so you know what you can and cannot do in Java right from the
start.
<H3><A NAME="JavaHasNoCompiletoMachineCode">Java Has No Compile
to Machine Code</A></H3>
<P>
C/C++ source code is compiled to machine code. This compiled source
is usable only on the specific platform for which it was compiled.
As you know, a compiled C/C++ program is directly executable.
Java source code, on the other hand, is compiled to an intermediate
form called <I>bytecode</I> that is neither machine code nor source
code.
<P>
One benefit of compiling to bytecode is that Java bytecode is
not platform specific and is usable on any platform to which the
Java programming language has been ported. You execute Java source
code using an interpreter that executes the bytecode and translates
it to a machine-readable form.
<P>
Another benefit of compiling to an intermediate form is that no
link step is required. The Java interpreter dynamically links
in classes on demand.
<H3><A NAME="JavaHasNoExternalCSyntax">Java Has No External C
Syntax</A></H3>
<P>
In C++, you can get to existing C procedures and system calls
using the extern C syntax that declares the C procedure to be
outside the normal C++ namespace. In Java, there is no extern
C syntax; as a result, you cannot use existing C or C++ code directly.
In fact, it is rather difficult to use C++ code at all.
<P>
Before you abandon ship, you should realize that Java incorporates
a wide range of functionality into the Java API. As specified
earlier in this chapter, the API includes packages for graphics,
multimedia, networking, system utilities, file I/O, and much more.
This means that most of the common functions for which you would
want to use your C/C++ libraries are already in the Java API.
<P>
Don't worry-for those C/C++ functions that you really need, there
is a way to use them in Java. It is, however, indirect and not
as easy as using the external C syntax. To use C functions in
Java, you must define a method whose purpose is to interface to
the C function. Within the method, you must specify how the C
function will interact with Java. Using C++ programs in Java is
a bit more convoluted. You must define a method whose purpose
is to interface to a C class that invokes C++ functions and member
functions from C. 
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Looking Ahead:</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
(<A HREF="ch22.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch22.htm" >See Chapter 22</A>, &quot;Integrating Native Programs and Libraries,&quot; for complete details on using C/C++ functions with Java.)
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
Generally, you will use C/C++ or another programming language
when you want to implement platform-specific functionality or
increase the speed of your application. Keep in mind that when
you use other programming languages with Java, you may be sacrificing
the platform independence of your application.
<H3><A NAME="JavaHasNoMultipleInheritance">Java Has No Multiple
Inheritance</A></H3>
<P>
An object that is a member of one class, a parent of another class,
and needs to inherit the full functionality of both classes is
one example of the need for multiple inheritance. Often when you
are programming advanced object-oriented applications, you need
to use classes that inherit the functionality of more than one
class. In fact, the more advanced your application is, the more
likely that you will need to use multiple inheritance.
<P>
Many experienced C++ programmers dig deep into their tool chests,
find some old code they have written that uses multiple inheritance,
and press on. In Java, this is not possible because Java does
not support multiple inheritance. Java replaces multiple inheritance
with <I>interfaces</I>. Current C++ programmers will find that
the concept of interfaces is easier to understand and use than
multiple inheritance, which is another plus for Java.
<P>
Interfaces allow you to define the protocols for methods and final
variables without having to worry about the specific implementation.
Once you declare an interface, other interfaces or classes can
implement that interface. A class that implements an interface
can have its own functionality. Additionally, both classes and
interfaces can implement multiple interfaces. However, the one
limitation to interfaces is that you must write code to reimplement
the desired functionality in each class implementing an interface.
<P>
An interface guarantees that all objects inherited from it will
provide the same methods as the interface. This allows for a more
object-oriented approach to programming. Even classes that are
inherited from multiple interfaces will always implement the methods
of their interfaces. For example, a class derived from the television
interface and the radio interface will have all the methods available
to both interfaces.
<H3><A NAME="JavaHasNoNamespaceProblems">Java Has No Namespace
Problems</A></H3>
<P>
Anyone who has worked in a large C++ environment has probably
encountered namespace problems. The simple fact is that when you
have different programmers working on different sections of a
project, someone is bound to create a class with the same name
as a totally different class in some other part of the project.
When this happens, you have namespace pollution and a big headache,
especially if the overlap is not discovered until a late stage
of the project-like when you are integrating the code modules
for testing. Correcting a namespace problem costs time and money.
<P>
Java avoids namespace problems by creating a namespace with many
levels that are considered in precedence order from the highest
level, the package namespace, to the lowest level, the nested
local block namespace. Each component level in the namespace is
used to build a unique object name. Thus, two classes with the
same name in different packages are unique.
<H3><A NAME="JavaHasNoPointers">Java Has No Pointers</A></H3>
<P>
Experienced C/C++ programmers know that most bugs in C/C++ code
relate to problems with pointers and memory management. This is
because practically everyone who has ever programmed in C or C++
has at one time or another had problems with pointers and memory
management. These two areas of C/C++ programming are a trial by
fire that you either learn flawlessly or have problems with forever
after. As you know from <A HREF="ch1.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch1.htm" >Chapter 1</A>, Java
does not use pointers and automatically manages memory for you,
which in itself is cause for celebration.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Technical Note:</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
To be 100% technically accurate, Java does not actually eliminate the concept of pointers. Every instance of an object is referenced via a pointer. The only functionality that pointers have is to retrieve the value of the object to which it is pointing. 
Programmers and users cannot manipulate these pointers, which is a significant change from how pointers are used in C/C++. In C/C++, as most programmers know, you handle the pointers yourself and pray they don't go astray. Therefore, when you read that 
Java has no pointers, it means that, for all intents and purposes, Java eliminates pointers as most programmers know them.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="JavaHasNoSeparateHeaderFiles">Java Has No Separate
Header Files</A></H3>
<P>
Header files are an important part of C++ programming. Many programmers
use header files as impromptu documentation, primarily because
header files can tell you at a glance how a particular class should
be used. When you want to see the interface to a function, you
bring up the header file and find the function. Java does not
have header files. The signature of a method must appear simultaneously
with its declaration. This means there is no convenient place
to find answers quickly.
<P>
If having to wade through pages of code to learn how to use a
particular class is not appealing, there is an upside. The Java
Developer's Kit includes two tools that make this task easier:
<TT><FONT FACE="Courier">javap</FONT></TT> and <TT><FONT FACE="Courier">javadoc</FONT></TT>.
The Java disassembler, <TT><FONT FACE="Courier">javap</FONT></TT>,
can be used to print class signatures. The Java API documentation
generator, <TT><FONT FACE="Courier">javadoc</FONT></TT>, creates
HTML documentation from comments embedded in source files. This
means if you have good inline documentation, <TT><FONT FACE="Courier">javadoc</FONT></TT>
can be used to create documentation in a more traditional and
easier-to-use form.
<P>
A lack of header files also has its advantages. Because the signature
of a method must appear simultaneously with its declaration, it
is more difficult to get a library that is missing the implementation
of some member function. It is also more difficult to use files
that are not in sync with the implementation.
<H3><A NAME="JavaHasNoStandaloneFunctions">Java Has No Stand-alone
Functions</A></H3>
<P>
Something C++ programmers will need to get used to is that Java
has no stand-alone functions. Java is first and foremost an object-oriented
programming language. In Java, all Java applications are objects
and all Java classes are derived from the primitive class <TT><FONT FACE="Courier">Object</FONT></TT>.
<H3><A NAME="SomeJavaProgramsHaveNomainFunction">Some Java Programs
Have No <TT><FONT FACE="Courier">main</FONT></TT><FONT SIZE=4>
Function</FONT></A></H3>
<P>
Some Java programs, called applets, do not need a <TT><FONT FACE="Courier">main</FONT></TT>
function. However, each Java class may have a <TT><FONT FACE="Courier">main</FONT></TT>
method, and all Java applications include the equivalent of the
<TT><FONT FACE="Courier">main</FONT></TT> function. When a stand-alone
application is executed, the <TT><FONT FACE="Courier">main</FONT></TT>
method is implemented and this is how parameters are passed into
the application. When an applet is executed, initialization and
start methods are implemented.
<H3><A NAME="JavaHasNoTemplates">Java Has No Templates</A></H3>
<P>
In C++ you can write generic methods called <I>templates</I> that
allow you to write one block of code that describes an implementation
for several similar types of arguments. This enables you to create
a method that accepts both integer and floating-point values,
which saves you from having to write two methods that do essentially
the same thing. You can also use templates to automatically generate
classes, and that capability is a big plus.
<P>
Although Java's use of the <TT><FONT FACE="Courier">Object</FONT></TT>
class as the parent for all other classes could be construed as
an implementation of templates, there is no functional equivalent
of C++ templates in Java. Because of this, you would have to have
separate methods for similar-type arguments. However, you can
generally reuse methods simply by cutting, pasting, and making
minor modifications as necessary.
<H3><A NAME="JavaHasExceptionHandling">Java Has Exception Handling</A>
</H3>
<P>
Error conditions that are not expected to occur under normal conditions
are called <I>exceptions</I>. When an exception occurs, bad things
happen. For example, a negative number is passed to a function
that computes the square root of a number. The function expects
all numbers it receives to be positive real numbers. It receives
a negative number instead, and an exception occurs. Sometimes
programs die right then and there; other times they do more insidious
things, such as passing incorrect pointers that eventually access
protected areas of the system.
<P>
Although there is no definitive way to handle exceptions in C++,
many bleary-eyed C++ programmers will be happy to know that exceptions
are a fundamental part of the Java programming language. In Java,
if you call a method that could throw an exception, you must check
to see if any of the possible exceptions occurred and handle them.
Additionally, the Java compiler checks for exception handling
and will tell you if you have not handled the exceptions for a
particular method. As you will see in <A HREF="ch8.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch8.htm" >Chapter 8</A>,
&quot;Tying It All Together: Threads, Exceptions, and More,&quot;
building exception handling into your methods is easy. It also
avoids yet another problem area in C/C++ programming.
<H3><A NAME="JavaHasAutomatedGarbageCollection">Java Has Automated
Garbage Collection</A></H3>
<P>
Keeping track of which chunks of memory are in use and which are
not is a major headache in C++. Many C++ classes use destructors
to free up chunks of memory that are no longer needed, but this
does not always work. If you delete objects that are still in
use, the program will crash. If you forget to delete objects that
are no longer in use, the program will crash when your system
runs out of memory. If you point to the wrong area of memory,
you can overwrite essential data and crash the program.
<P>
Java avoids memory-related problems by automating garbage collection.
To do this, the Java runtime environment tracks which chunks of
memory are in use and which aren't. When a chunk of memory is
no longer needed, the system automatically clears it. When a chunk
of memory is needed, the system automatically allocates it.
<P>
As a result, you no longer have to worry about freeing memory
when it's no longer in use. However, Java does not eliminate the
need for destructors completely. You still might need destructors
for certain classes, especially when you want to ensure that a
process cleans up gracefully after it is terminated. Fortunately,
Java provides an easy way to clean up processes gracefully using
a finalize method. The <TT><FONT FACE="Courier">finalize</FONT></TT>
method can be used like a C++ destructor to do final cleanup on
an object before garbage collection occurs. (See the section titled
&quot;The <TT><FONT FACE="Courier">finalize</FONT></TT> Method,&quot;
in <A HREF="ch7.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch7.htm" >Chapter 7</A>, &quot;Building Objects,&quot;
for more information.)
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#Ff0000>Summary</FONT></A>
</H2>
<P>
The Java Developer's Kit contains everything you need to get started
creating hot new Java applications. Versions of the JDK are currently
available for Windows 95/NT, Macintosh, OS/2, and most UNIX platforms
including Solaris and AIX. By installing the JDK on your system,
you create a developer's environment complete with essential tools
and precompiled code. For current C/C++ programmers, installing
the JDK on your system is only the first step toward getting started.
The next step is to review the differences between Java and C/C++,
so you know exactly what you can and cannot do in the Java programming
language.
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch1.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch1.htm"><IMG SRC="pc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/index.htm"><IMG SRC="hb.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch3.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch3.htm"><IMG 
SRC="nc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>
<HR WIDTH="100%"></P>
<P>


</BODY>
</HTML>

