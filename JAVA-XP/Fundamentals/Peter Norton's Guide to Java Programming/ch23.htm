<HTML>

<HEAD>
   <TITLE>Chapter 23 -- Advanced Debugging and Troubleshooting</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<!--Begin JavaScript roadmap code.  If editing downloaded HTML source, delete
 this portion.-->

<script language="JavaScript">
<!--

function TripodShowPopup()
{
   var bName=navigator.appName;
   var bVer=parseInt(navigator.appVersion);
   var now = new Date();
   var popupURL = "/adm/popup/roadmap.shtml?"+"member_name=er4ebus&path=peternortonjavaprograming&client_ip=200.190.100.218&ts=1015337416&ad_type=POPUP&category=net&id=3a86e1584503f4d824c2eb8b7fcf13ef";
   var popupName = "TripodPopup";

   if (bName=="Netscape" && bVer<=3)
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=614,height=150');
   }
   else
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=604,height=135');
   }
   popup.location = popupURL;
}

if(window.parent==window)
{
   TripodShowPopup();
}

// -->
</script>

<script language="JavaScript1.2">
<!--

function changeOpenFunction()
{
   var original_window_open = window.open;
   function new_open_function(url, name, features, replace)
   {
      if(name != "TripodPopup")
         return original_window_open(url, name, features, replace);
   }
   window.open = new_open_function;
}
var bName = navigator.appName;

if(bName != "Netscape")
   changeOpenFunction();

// -->
</script>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#Ff0000>Chapter 23</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#Ff0000>Advanced Debugging and Troubleshooting</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#StartingtheJavaDebugger" >Starting the Java Debugger</A>
<UL>
<LI><A HREF="#StartingtheDebuggerDirectly" >Starting the Debugger Directly</A>
<LI><A HREF="#AttachingtheDebuggertoaCurrentInte" >Attaching the Debugger to a Current Interpreter Session</A>
<LI><A HREF="#AttachingtheDebuggertoanAppletView" >Attaching the Debugger to an Applet Viewer Session</A>
</UL>
<LI><A HREF="#TroubleshootingtheCodewiththeDebugg" >Troubleshooting the Code with the Debugger</A>
<UL>
<LI><A HREF="#ExaminingThreads" >Examining Threads</A>
<LI><A HREF="#ExaminingMethodsandClasses" >Examining Methods and Classes</A>
<LI><A HREF="#ExaminingInstanceVariables" >Examining Instance Variables</A>
</UL>
<LI><A HREF="#IdentifyingTroublewiththeCode" >Identifying Trouble with the Code</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
Sometimes your code will compile just fine but will not run properly.
As you begin to develop advanced applets and applications, this
will happen more frequently. Instead of spending days poring over
thousands of lines of code trying to pinpoint problem areas, you
should spend an hour with a tool called the Java debugger. Use
it whenever you have problems in your source code that you cannot
solve without a little help.
<P>
Debugging code after a successful compile is quite different from
debugging code that will not compile, primarily because of the
type of errors you will come across at this stage of troubleshooting.
When your program will not compile, the errors mostly relate to
syntax, such as missing semicolons or bad references to objects.
However, when your program does not run the way you expect or
displays errors during execution of the code, the errors mostly
relate to the program's logic, such as calling the wrong method
or using a variable set to the wrong value.
<P>
Although the Java debugger is quite useful for debugging code
interactively, sometimes you do not want to do that. For those
times, a debugging utility called <TT><FONT FACE="Courier">HelpDebug</FONT></TT>
can be used to help debug your code using a noninteractive means.
For this reason, this chapter covers both interactive and noninteractive
debugging.
<P>
Advanced troubleshooting requires more logic than concept. Therefore,
this chapter takes you step by step through the debugging process
as it demonstrates how to use the Java debugger.
<H2><A NAME="StartingtheJavaDebugger"><B><FONT SIZE=5 COLOR=#Ff0000>Starting
the Java Debugger</FONT></B></A></H2>
<P>
Anyone who has ever programmed in C/C++ knows that a good debugger
can quite literally save the day. The Java debugger works much
like the other debuggers you may have used to debug your C or
C++ code. You invoke it from the command line. The name of the
command-line program is <TT><FONT FACE="Courier">jdb</FONT></TT>,
which stands for Java debugger. When invoked, the debugger uses
the Debugger API-<TT><FONT FACE="Courier">sun.tools.debug</FONT></TT>-to
help you troubleshoot problems in your code.
<P>
You can invoke the debugger from the command line in one of two
ways: The first way to start a <TT><FONT FACE="Courier">jdb</FONT></TT>
session is to pass it the name of your Java class file without
the <TT><FONT FACE="Courier">.class</FONT></TT> extension, and
the second is to attach it to a Java interpreter or applet viewer.
<P>
As with other tools in the Java Developer's Kit, the debugger
allows you to use command-line options. These options depend on
the way you use the debugger. If you use it directly, any options
you specify on the command line are passed on to the interpreter
the debugger invokes, so you can use any of the interpreter options
when you start the debugger directly.
<P>
When you attach the debugger to an interpreter session, you are
limited to three options: <TT><FONT FACE="Courier">-host</FONT></TT>,
 <TT><FONT FACE="Courier">-password</FONT></TT>, and <TT><FONT FACE="Courier">-classpath</FONT></TT>.
The <TT><FONT FACE="Courier">-host</FONT></TT> option sets the
name of the host machine on which the interpreter session is running.
The <TT><FONT FACE="Courier">-password</FONT></TT> option sets
the password and enables you to attach the debugger to a particular
session. The <TT><FONT FACE="Courier">-classpath</FONT></TT> option
lets you specify a path for your class files that overrides the
default or current <TT><FONT FACE="Courier">CLASSPATH</FONT></TT>
setting. Because this option takes precedence, you should set
it to include the current directory, the location of your personal
or third-party class files, and the location of the Java API classes.
<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Tip</B></TD></TR>
<TR><TD WIDTH=534>
<BLOCKQUOTE>
To aid the debugging process, compile your code with the <TT><FONT FACE="Courier">-g</FONT></TT> option of the Java compiler. This option tells the Java compiler to generate debugging tables. Although debugging tables are not useful for troubleshooting 
syntax problems, they are useful for troubleshooting logic problems. Generally, you will use these tables to browse local variables on the stack.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="StartingtheDebuggerDirectly"><B>Starting the Debugger
Directly</B></A></H3>
<P>
To start a debugging session directly, usually you would pass
it the name of your Java class file without the <TT><FONT FACE="Courier">.class</FONT></TT>
extension by typing the following at the command line:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">jdb classname</FONT></TT>
</BLOCKQUOTE>
<P>
where <TT><FONT FACE="Courier">classname</FONT></TT> is the name
of the class file that starts the program you want to debug.
<P>
When you start the debugger directly, it in turn starts the Java
interpreter with any parameters you passed on the command line.
Afterward, the debugger loads the specified class file.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=584>
<BLOCKQUOTE>
For the JDK version 1.0 or later, the debugger expects you to be on a networked host. If you are not, you may see the following error message or a similar one:</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">java.net.UnknownHostException</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;at java.net.InetAddress.getLocalHost(InetAddress.java:276)</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;at sun.tools.debug.RemoteDebugger.&lt;init&gt;(RemoteDebugger.java:61)</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;at sun.tools.ttydebug.TTY.&lt;init&gt;(TTY.java:1263)</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;at sun.tools.ttydebug.TTY.main(TTY.java:1387)</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
To clear up this problem, start a browser session that connects your computer to the Internet. Then you should be able to start the debugger.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="AttachingtheDebuggertoaCurrentInte"><B>Attaching
the Debugger to a Current Interpreter Session</B></A></H3>
<P>
Although most programmers prefer to invoke the debugger directly,
you can also attach a debugging session to an interpreter that
is already running. To do this, start the Java interpreter with
the <TT><FONT FACE="Courier">-debug</FONT></TT> option. When you
use this option, the interpreter displays a password that must
be used when starting the debugging session.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
Because the password is randomly allocated by session, you can use it only for the applet or application currently running on your system.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
 you should follow to attach the debugger to
an interpreter:
<OL>
<LI>Start the interpreter with the <TT><FONT FACE="Courier">-debug</FONT></TT>
option, such as
<BR><TT><FONT FACE="Courier">java -debug classname</FONT></TT>
<BR>where <TT><FONT FACE="Courier">classname</FONT></TT> is the
name of the class file that starts the application.
<LI>Invoke the debugger with the session password:
<BR><TT><FONT FACE="Courier">jdb -host hostname -password session_password</FONT></TT>
<BR>where <TT><FONT FACE="Courier">hostname</FONT></TT> is the
hostname of your computer and <TT><FONT FACE="Courier">session_password</FONT></TT>
is the password provided by the interpreter.
</OL>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
When you start the Java interpreter or applet viewer with the <TT><FONT FACE="Courier">-debug</FONT></TT> option under JDK version 1.0, they both check for the hostname and local Internet address of your system. If you are not on a networked host, you may 
see the following error message or a similar one:
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">java.net.UnknownHostException</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;at java.net.InetAddress.getLocalHost(InetAddress.java:276)</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;at sun.tools.debug.RemoteDebugger.&lt;init&gt;(RemoteDebugger.java:61)</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;at sun.tools.ttydebug.TTY.&lt;init&gt;(TTY.java:1263)</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;at sun.tools.ttydebug.TTY.main(TTY.java:1387)</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
To clear up this problem, start a browser session that connects your computer to the Internet. Then you should be able to start the interpreter or applet viewer with the <TT><FONT FACE="Courier">-debug</FONT></TT> option.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="AttachingtheDebuggertoanAppletView"><B>Attaching
the Debugger to an Applet Viewer Session</B></A></H3>
<P>
The final way to use the debugger is to attach it to an applet
viewer session by starting the applet viewer with the <TT><FONT FACE="Courier">-debug</FONT></TT>
option.
<P>
Here are the steps you would follow to attach the debugger to
the applet viewer:
<OL>
<LI>Start the applet viewer with the <TT><FONT FACE="Courier">-debug</FONT></TT>
option, such as
<BR><TT><FONT FACE="Courier">appletviewer -debug document.html</FONT></TT>
<BR>where <TT><FONT FACE="Courier">document.html</FONT></TT> is
the name of the HTML document with a valid <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT>
tag.
<LI>Run the applet using the <TT><FONT FACE="Courier">run</FONT></TT>
command of the debugger.
</OL>
<H2><A NAME="TroubleshootingtheCodewiththeDebugg"><B><FONT SIZE=5 COLOR=#Ff0000>Troubleshooting
the Code with the Debugger</FONT></B></A></H2>
<P>
After you start the debugger, an input prompt appears. You can
enter commands directly to the debugger at this prompt. One of
the most useful commands is <TT><FONT FACE="Courier">help</FONT></TT>,
which lists all the commands the debugger recognizes. The help
listing for the debugger follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Initializing jdb&#133;<BR>
&gt; help<BR>
<BR>
** command list **<BR>
threads [threadgroup]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- list threads
<BR>
thread &lt;thread id&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
set default thread<BR>
suspend [thread id(s)]&nbsp;&nbsp;&nbsp;&nbsp;-- suspend threads
(default: all)<BR>
resume [thread id(s)]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- resume threads
(default: all)<BR>
where [thread id] | all&nbsp;&nbsp;&nbsp;-- dump a thread's stack
<BR>
threadgroups&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
list threadgroups<BR>
threadgroup &lt;name&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
set current threadgroup<BR>
<BR>
print &lt;id&gt; [id(s)]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
print object or field<BR>
dump &lt;id&gt; [id(s)]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
print all object information<BR>
<BR>
locals&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
print all local variables in current stack frame<BR>
<BR>
classes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
list currently known classes<BR>
methods &lt;class id&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
list a class's methods<BR>
<BR>
stop in &lt;class id&gt;.&lt;method&gt; -- set a breakpoint in
a method<BR>
stop at &lt;class id&gt;:&lt;line&gt; -- set a breakpoint at a
line<BR>
up [n frames]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
move up a thread's stack<BR>
down [n frames]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
move down a thread's stack<BR>
clear &lt;class id&gt;:&lt;line&gt;&nbsp;&nbsp;&nbsp;-- clear
a breakpoint<BR>
step&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
execute current line<BR>
cont&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
continue execution from breakpoint<BR>
<BR>
catch &lt;class id&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
break for the specified exception<BR>
ignore &lt;class id&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
ignore when the specified exception<BR>
<BR>
list [line number]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
print source code<BR>
use [source file path]&nbsp;&nbsp;&nbsp;&nbsp;-- display or change
the source path<BR>
<BR>
memory&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
report memory usage<BR>
gc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
free unused objects<BR>
<BR>
load classname&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
load Java class to be debugged<BR>
run &lt;class&gt; [args]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
start execution of a loaded Java class<BR>
!!&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
repeat last command<BR>
help (or ?)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
list commands<BR>
exit (or quit)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
exit debugger</FONT></TT>
</BLOCKQUOTE>
<P>
The sections that follow examine how many of these options are
used to debug your code.
<H3><A NAME="ExaminingThreads"><B>Examining Threads</B></A></H3>
<P>
The debugger includes a group of useful commands for examining
threads. All Java programs have at least one thread of execution.
<P>
The <TT><FONT FACE="Courier">threads</FONT></TT> command lists
all the threads in use and their status. The type and number of
threads running on the system vary according to the threads used
by your system, how you start the debugger, and the threads used
by your Java program. When you start the debugger directly, no
Java program is running, and few threads are running on your system.
<P>
To follow along with this debugging session, start the debugger
for use with the Jompanion editor developed in <A HREF="ch21.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch21.htm" >Chapter 21</A>,
&quot;Designing and Implementing Advanced Applications.&quot;
To do this, change to the directory containing the class files
for Jompanion and type the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">jdb Jompanion</FONT></TT>
</BLOCKQUOTE>
<P>
Your system should display output similar to this:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Initializing jdb...<BR>
0x13a41e0:class(Jompanion)<BR>
&gt;<BR>
</FONT></TT>
</BLOCKQUOTE>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=499>
<BLOCKQUOTE>
The greater-than sign (<TT><FONT FACE="Courier">&gt;</FONT></TT>) is the input prompt for the debugger.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
At this point in the debugging session, the Jompanion application
is not running; I have merely invoked a session with the debugger.
To examine the threads currently running on your system, type
<TT><FONT FACE="Courier">threads</FONT></TT> at the debugger input
prompt. On a Windows 95 system using JDK 1.0, the following threads
run whenever you start the debugger:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&gt; threads<BR>
Group system:<BR>
&nbsp;1. (java.lang.Thread)0x13931f8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Finalizer
thread cond. waiting<BR>
&nbsp;2. (java.lang.Thread)0x1393918&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Debugger
agent&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;running<BR>
&nbsp;3. (sun.tools.debug.BreakpointHandler)0x13a2668 Breakpoint
<BR>
&Acirc;handler cond. waiting<BR>
Group main:<BR>
&nbsp;4. (java.lang.Thread)0x13930a0 main running</FONT></TT>
</BLOCKQUOTE>
<P>
The output from the <TT><FONT FACE="Courier">threads</FONT></TT>
command tells you a lot about the threads running on your system.
As you can see, each thread is listed by threadgroup and is numbered
consecutively. This number is the ID of the thread. Following
the thread ID is the class associated with the thread, its name,
and its status.
<P>
Using the ID number, you can set the default thread using the
<TT><FONT FACE="Courier">thread</FONT></TT> command. To switch
to the main thread, type the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&gt;thread 4</FONT></TT>
</BLOCKQUOTE>
<P>
When you do this, the input prompt changes to this:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
The new prompt, <TT><FONT FACE="Courier">main[1]</FONT></TT>,
tells you the current thread is the thread named <TT><FONT FACE="Courier">main</FONT></TT>.
All commands typed at the input prompt are taken in context of
this thread. However, because no Java program is running on your
system now, the debugger essentially behaves the same. To switch
to the debugger agent thread, type its ID at the input prompt,
like this:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">main[1] thread 2</FONT></TT>
</BLOCKQUOTE>
<P>
When you do this, the input prompt changes to this:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Debugger agent[1]</FONT></TT>
</BLOCKQUOTE>
<P>
To start the application from within the debugging session, type
<TT><FONT FACE="Courier">run</FONT></TT> at the debugger input
prompt. The following output should display in your command area:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&gt; run<BR>
run Jompanion<BR>
running ...<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
Now that a program is running, the <TT><FONT FACE="Courier">main[1]</FONT></TT>
prompt references the main thread of your program-in this case,
Jompanion's main thread. Using the <TT><FONT FACE="Courier">threads</FONT></TT>
command, you can check the threads running in the context of the
main thread. As you can see from the following listing, the threadgroup
and threads are different when a program is running:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">main[1] threads<BR>
Group Jompanion.main:<BR>
&nbsp;1. (java.lang.Thread)0x13a6738&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AWT-Win32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;running
<BR>
&nbsp;2. (java.lang.Thread)0x13a6790&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AWT-Callback-Win32
running<BR>
&nbsp;3. (sun.awt.ScreenUpdater)0x13a6a38 Screen Updater&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cond.
waiting<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
The three threads listed previously are all the threads running
in the context of the current thread. Obviously, there are more
threads running on your system, and you may be wondering what
happened to the threads the debugger is running. To see all the
threads running on your system, change to the system threadgroup
and then type the <TT><FONT FACE="Courier">threads</FONT></TT>
command:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">main[1] threadgroup system<BR>
main[1] threads<BR>
Group system:<BR>
&nbsp;1. (java.lang.Thread)0x13931f8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Finalizer
thread&nbsp;&nbsp; cond. waiting<BR>
&nbsp;2. (java.lang.Thread)0x1393918&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Debugger
agent&nbsp;&nbsp;&nbsp;&nbsp; running<BR>
&nbsp;3. (sun.tools.debug.BreakpointHandler)0x13a2668 <BR>
&Acirc;Breakpoint handler cond. waiting<BR>
Group main:<BR>
&nbsp;4. (java.lang.Thread)0x13930a0 main cond. waiting<BR>
Group Jompanion.main:<BR>
&nbsp;5. (java.lang.Thread)0x13a6738&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AWT-Win32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;running
<BR>
&nbsp;6. (java.lang.Thread)0x13a6790&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AWT-Callback-Win32
running<BR>
&nbsp;7. (sun.awt.ScreenUpdater)0x13a6a38 Screen Updater&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cond.
waiting<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
To analyze the behavior of your program when certain threads are
stopped, use the <TT><FONT FACE="Courier">suspend</FONT></TT>
command. Although this command is more useful when you have multiple
background threads, it is used here to stop the <TT><FONT FACE="Courier">Screen
Updater</FONT></TT> thread of the Jompanion application. After
stopping a thread, you can check its status using the <TT><FONT FACE="Courier">threads</FONT></TT>
command. Here's how:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">main[1] suspend 7<BR>
main[1] threads<BR>
Group system:<BR>
&nbsp;1. (java.lang.Thread)0x13931f8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Finalizer
thread&nbsp;&nbsp; cond. waiting<BR>
&nbsp;2. (java.lang.Thread)0x1393918&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Debugger
agent&nbsp;&nbsp;&nbsp;&nbsp; running<BR>
&nbsp;3. (sun.tools.debug.BreakpointHandler)0x13a2668 <BR>
&Acirc;Breakpoint handler cond. waiting<BR>
Group main:<BR>
&nbsp;4. (java.lang.Thread)0x13930a0 main cond. waiting<BR>
Group Jompanion.main:<BR>
&nbsp;5. (java.lang.Thread)0x13a6738&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AWT-Win32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;running
<BR>
&nbsp;6. (java.lang.Thread)0x13a6790&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AWT-Callback-Win32
running<BR>
&nbsp;7. (sun.awt.ScreenUpdater)0x13a6a38 Screen Updater&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;suspended
<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
After testing the behavior of your application with the thread
suspended, you will usually want to restart the thread and go
on to test the behavior of your application with other threads
suspended. To restart a thread, use the <TT><FONT FACE="Courier">resume</FONT></TT>
command.
<H3><A NAME="ExaminingMethodsandClasses"><B>Examining Methods
and Classes</B></A></H3>
<P>
By examining the methods and classes used in your program, you
can learn more about the behavior of your program, verify that
sections of the code are being executed as you expect, and pinpoint
problem areas in the code. The debugger provides many ways to
examine methods and classes. However, before you can do so, you
need to start a debugging session.
<P>
This section demonstrates how to attach the debugger to a running
application. To follow along, change to the directory containing
the Jompanion class files and start the Jompanion application
using the interpreter as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">java -debug Jompanion</FONT></TT>
</BLOCKQUOTE>
<P>
Your system should display a password to be used with the debugger,
such as the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Agent password=52d2zj</FONT></TT>
</BLOCKQUOTE>
<P>
If your password is <TT><FONT FACE="Courier">52d2zj</FONT></TT>,
you now open a new command window and type this:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">jdb -password 52d2zj</FONT></TT>
</BLOCKQUOTE>
<P>
Your system should display output similar to the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Initializing jdb...<BR>
&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
Now that your debugging session is started, you can examine the
classes and methods. To list the classes the debugger currently
knows about, use the debugger's <TT><FONT FACE="Courier">classes</FONT></TT>
command. If you use this command for Jompanion, the output from
the debugger is similar to the following abbreviated listing:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&gt; <B>classes<BR>
</B>** classes list **<BR>
0x1393008:class(java.lang.Thread)<BR>
0x1393018:class(java.lang.Object)<BR>
0x1393098:class(java.lang.Class)<BR>
0x1393028:class(java.lang.String)<BR>
0x1393038:class(java.lang.ThreadDeath)<BR>
0x1393048:class(java.lang.Error)<BR>
0x13932f0:class(Jompanion)<BR>
0x1393300:class(java.awt.Frame)<BR>
0x1393310:class(java.awt.Window)<BR>
0x1393320:class(java.awt.Container)<BR>
0x1393330:class(java.awt.Component)<BR>
0x1393ab0:class(java.awt.BorderLayout)<BR>
0x1393af8:class(java.awt.Color)<BR>
0x1393b70:class(java.awt.Font)<BR>
0x1393bd0:class(java.awt.MenuBar)<BR>
0x1393be0:class(java.awt.MenuComponent)<BR>
0x1393c08:class(sun.tools.java.ClassPath)<BR>
0x1393c18:class(java.io.File)<BR>
0x1393c60:class(sun.tools.java.ClassPathEntry)<BR>
0x1393cd0:class(sun.tools.zip.ZipFile)<BR>
0x1393d00:class(java.io.RandomAccessFile)<BR>
0x1393d70:class(java.util.Vector)<BR>
0x1393d90:class(java.awt.Menu)<BR>
0x1393da0:class(java.awt.MenuItem)<BR>
0x1393e90:interface(sun.tools.zip.ZipConstants)<BR>
0x1393ee0:class(sun.tools.zip.ZipEntry)<BR>
0x1393f30:interface(java.awt.peer.MenuBarPeer)<BR>
0x1394088:interface(java.awt.peer.FramePeer)<BR>
0x1394098:class(java.awt.Choice)<BR>
0x13940c0:interface(java.awt.peer.ChoicePeer)<BR>
0x13942d0:class(java.awt.FlowLayout)<BR>
0x13949a0:class(java.awt.TextArea)<BR>
0x13949b0:class(java.awt.TextComponent)<BR>
0x13949e0:interface(java.awt.peer.TextComponentPeer)<BR>
0x1394a08:class(java.awt.FileDialog)<BR>
0x1394a18:class(java.awt.Dialog)<BR>
0x1394a88:class(java.awt.Toolkit)<BR>
0x1395878:class(sun.awt.win32.MToolkit)<BR>
0x1398038:class(java.awt.Dimension)<BR>
0x1398050:class(sun.awt.win32.MFramePeer)<BR>
0x1398db8:class(sun.awt.win32.MPanelPeer)<BR>
0x1398dc8:class(sun.awt.win32.MCanvasPeer)<BR>
0x1398dd8:class(sun.awt.win32.MComponentPeer)<BR>
0x139df48:class(java.awt.Rectangle)<BR>
0x139df60:class(java.awt.Insets)<BR>
0x139e148:class(sun.awt.win32.MMenuBarPeer)<BR>
0x139e168:class(sun.tools.debug.BreakpointHandler)<BR>
0x139e1a0:class(sun.tools.debug.BreakpointQueue)<BR>
0x139e1e8:class(java.net.Socket)<BR>
0x139e220:class(sun.awt.win32.MMenuPeer)<BR>
0x139e230:class(sun.awt.win32.MMenuItemPeer)<BR>
0x139e2d0:class(sun.awt.win32.MChoicePeer)<BR>
0x139e300:class(sun.awt.win32.MTextAreaPeer)<BR>
0x139e330:interface(java.awt.peer.ContainerPeer)<BR>
0x139e340:interface(java.awt.peer.WindowPeer)<BR>
0x139e350:class(sun.awt.win32.Win32FontMetrics)<BR>
0x139e360:class(java.awt.FontMetrics)<BR>
0x139e3a8:interface(java.awt.peer.TextAreaPeer)<BR>
0x139e3d8:class(sun.awt.ScreenUpdater)<BR>
0x139e410:class(sun.awt.ScreenUpdaterEntry)<BR>
0x139e468:class(sun.awt.win32.Win32Graphics)<BR>
0x139e478:class(java.awt.Graphics)<BR>
&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
As you can see, the list of classes known to the debugger includes
all classes used by both the debugger and the program you are
debugging. You can use the <TT><FONT FACE="Courier">methods</FONT></TT>
command to see the methods in any class shown in the classes list.
To see a list of methods in the Jompanion class, type the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&gt; <B>methods Jompanion</B></FONT></TT>
</BLOCKQUOTE>
<P>
The debugger output should be similar to the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">void AddDialog()<BR>
boolean handleEvent(Event)<BR>
void cut()<BR>
void copy()<BR>
void paste()<BR>
void openFile()<BR>
void saveAsFile()<BR>
void saveOpenedFile()<BR>
void startNewText()<BR>
void showFindDialog()<BR>
void showRepDialog()<BR>
void showReplaceAllDialog()<BR>
void showAboutDialog()<BR>
void showErrorDialog(String)<BR>
boolean read(String)<BR>
boolean write(String)<BR>
String check(String)<BR>
void setFindString(String)<BR>
void setReplaceString(String)<BR>
void findSelectedText()<BR>
void findText()<BR>
void replaceSelectText()<BR>
boolean replaceText()<BR>
void main(String[])</FONT></TT>
</BLOCKQUOTE>
<P>
When you know the methods for a particular class, you can debug
the method using breakpoints and steps. When the program you are
debugging reaches a breakpoint, execution of the program stops.
You can then step through the program line by line to examine
what happens when the program executes specific lines within the
method.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Warning</B></TD></TR>
<TR><TD WIDTH=554>
<BLOCKQUOTE>
When your program reaches a breakpoint, all execution of the program stops. If the program occupies the entire screen when you hit the breakpoint, your workstation may lock up. To avoid this, resize the application or applet's frame so you can access the 
command area with the active debugging session.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
To set a breakpoint, use the <TT><FONT FACE="Courier">stop</FONT></TT>
command and reference the method you want to put the breakpoint
in at the class level. For example, to place a breakpoint in the
<TT><FONT FACE="Courier">copy</FONT></TT> method of the Jompanion
class, you would reference the method as <TT><FONT FACE="Courier">Jompanion.copy</FONT></TT>,
like this:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&gt; <B>stop in Jompanion.copy<BR>
</B>Breakpoint set in Jompanion.copy</FONT></TT>
</BLOCKQUOTE>
<P>
When the breakpoint is reached, program execution stops. You can
then examine the stack of the current thread using the <TT><FONT FACE="Courier">where</FONT></TT>
command or step through the method line by line using the <TT><FONT FACE="Courier">step</FONT></TT>
command. A useful command to use as you step through the program
is <TT><FONT FACE="Courier">list</FONT></TT>, which shows the
current execution point in the program.
<P>
To cause Jompanion to reach the breakpoint set in the <TT><FONT FACE="Courier">copy</FONT></TT>
method, use the <TT><FONT FACE="Courier">copy</FONT></TT> command
to copy selected text in the text area. The debugger should print
out the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Breakpoint hit: Jompanion.copy (Jompanion:244)
<BR>
AWT-Callback-Win32[1]</FONT></TT>
</BLOCKQUOTE>
<P>
This output tells you the method that reached the breakpoint is
called <TT><FONT FACE="Courier">Jompanion.copy</FONT></TT>, the
parent program is called Jompanion, and the line number where
the breakpoint was reached is 244. Notice that on the Windows
system used in the example, the prompt changed to <TT><FONT FACE="Courier">AWT-Callback-Win32[1]</FONT></TT>,
which is the current thread. All commands issued to the debugger
with this new prompt are in the context of the <TT><FONT FACE="Courier">AWT-Callback-Win32</FONT></TT>
thread.
<P>
Using the <TT><FONT FACE="Courier">where</FONT></TT> command,
you can see what the stack looks like:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">AWT-Callback-Win32[1] <B>where<BR>
</B>&nbsp;&nbsp;[1] Jompanion.copy (Jompanion:244)<BR>
&nbsp;&nbsp;[2] Jompanion.handleEvent (Jompanion:187)<BR>
&nbsp;&nbsp;[3] java.awt.Component.postEvent (Component:838)<BR>
&nbsp;&nbsp;[4] java.awt.MenuComponent.postEvent (MenuComponent:94)
<BR>
&nbsp;&nbsp;[5] java.awt.MenuComponent.postEvent (MenuComponent:94)
<BR>
&nbsp;&nbsp;[6] java.awt.MenuComponent.postEvent (MenuComponent:94)
<BR>
&nbsp;&nbsp;[7] sun.awt.win32.MMenuItemPeer.action (MMenuItemPeer:50)
<BR>
AWT-Callback-Win32[1]</FONT></TT>
</BLOCKQUOTE>
<P>
The stack shows you a picture of the steps the program took to
get to the breakpoint. In this case, you selected a menu item,
which posted an event that must be handled by the event handler.
The event handler in turn called the <TT><FONT FACE="Courier">copy</FONT></TT>
method, and the breakpoint was reached. You can move up and down
the stack using the <TT><FONT FACE="Courier">up</FONT></TT> and
<TT><FONT FACE="Courier">down</FONT></TT> commands.
<P>
Other breakpoint-related commands include <TT><FONT FACE="Courier">cont</FONT></TT>,
used to continue execution of the program after the breakpoint;
<TT><FONT FACE="Courier">resume</FONT></TT>, used to resume execution
of the current thread; and <TT><FONT FACE="Courier">clear</FONT></TT>,
used to clear a breakpoint.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=518>
<BLOCKQUOTE>
Keep in mind that the Java stack is organized according to the last in, first out methodology (LIFO). Because the last item in the stack is the first to pop off it when execution resumes, you need to read the stack in reverse order. Therefore, to trace the 
path to the current event in time order, start at the bottom of the stack and work to the top.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Using the <TT><FONT FACE="Courier">list</FONT></TT> command, you
can see exactly where you are in the source code:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">AWT-Callback-Win32[1] <B>list<BR>
</B>240&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.requestFocus();
<BR>
241&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
242<BR>
243&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//copies
selected text to the buffer<BR>
244&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&nbsp; public void
copy() {<BR>
245&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;copyString
= textArea.getSelectedText();<BR>
246&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.requestFocus();
<BR>
247&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
248<BR>
AWT-Callback-Win32[1]</FONT></TT>
</BLOCKQUOTE>
<P>
The output of the <TT><FONT FACE="Courier">list</FONT></TT> command
tells you where you are in the program. In the previous listing,
the program stopped on line number 244. You can then step through
the current method line by line using the <TT><FONT FACE="Courier">step</FONT></TT>
command.
<H3><A NAME="ExaminingInstanceVariables"><B>Examining Instance
Variables</B></A></H3>
<P>
By examining the instance variables in your program, you can check
their values and ensure that they are set within the ranges you
expect. Generally, you will want to check the status of instance
variables at a specific point during the program's execution,
so it's a good idea to set a breakpoint in a method whose instance
variables you want to check. Before you can examine methods and
classes used in your application, you need to start a debugging
session.
<P>
This section demonstrates how to attach the debugger to an applet.
If you want to follow along, change to the directory containing
the <TT><FONT FACE="Courier">ScrollText</FONT></TT> class files.
(The <TT><FONT FACE="Courier">ScrollText</FONT></TT> applet was
created in <A HREF="ch15.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch15.htm" >Chapter 15</A>, &quot;Creating
Java-Powered Web Presentations with Applets.&quot;) Next, create
a new HTML document or use an existing one that references the
<TT><FONT FACE="Courier">ScrollText</FONT></TT> applet, such as
the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;HTML&gt;<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt;ScrollText Applet&lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
&lt;BODY&gt;<BR>
&lt;APPLET CODE=&quot;ScrollText.class&quot; WIDTH=500 HEIGHT=300&gt;
<BR>
&lt;/APPLET&gt;<BR>
&lt;/BODY&gt;<BR>
&lt;/HTML&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
Then start the <TT><FONT FACE="Courier">ScrollText</FONT></TT>
applet with the applet viewer:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">appletviewer -debug ScrollText</FONT></TT>
</BLOCKQUOTE>
<P>
Your system should display output similar to the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">appletviewer -debug test.html<BR>
Initializing jdb...<BR>
0x13a41e0:class(sun.applet.AppletViewer)<BR>
&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
Finally, start the <TT><FONT FACE="Courier">ScrollText</FONT></TT>
applet using the <TT><FONT FACE="Courier">run</FONT></TT> command:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&gt; <B>run</B></FONT></TT>
</BLOCKQUOTE>
<P>
Your system should display output similar to the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">run sun.applet.AppletViewer test.html
<BR>
running ...<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
Now that the applet is started, you can use the <TT><FONT FACE="Courier">dump</FONT></TT>
command to check the status of a specified object's instance variables:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">main[1] <B>dump ScrollText<BR>
</B>ScrollText = 0x13a7ea8:class(ScrollText) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;superclass = 0x13a7eb8:class(java.applet.Applet)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;loader = null<BR>
&nbsp;&nbsp;&nbsp;&nbsp;interfaces:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0x13a2f70:interface(java.lang.Runnable)
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;static final LayoutManager panelLayout
= (java.awt.FlowLayout)0x13a7738<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">dump</FONT></TT> listing tells you
many things about the state of the class or object to which it
relates. For the <TT><FONT FACE="Courier">ScrollText</FONT></TT>
class, the <TT><FONT FACE="Courier">dump</FONT></TT> tells you
the superclass is <TT><FONT FACE="Courier">java.applet.Applet</FONT></TT>,
the loader is null, the applet uses the runnable interface, and
the layout setting is for <TT><FONT FACE="Courier">FlowLayout</FONT></TT>.
Provided that local variables are used in your program and are
available, you can also check the status of local variables using
the <TT><FONT FACE="Courier">locals</FONT></TT> command:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">main[1] <B>locals<BR>
</B>Local variables and arguments:<BR>
&nbsp;&nbsp;this = ScrollText[3000,3000,0x0,layout=java.awt.FlowLayout]</FONT></TT>
</BLOCKQUOTE>
<P>
You can set a breakpoint in the applet to check instance variables
related to a specific method at a given point in time. Because
the <TT><FONT FACE="Courier">scroll</FONT></TT> method plays a
key role in how the <TT><FONT FACE="Courier">ScrollText</FONT></TT>
applet works, it's a good idea to check variables in this method.
First, place the breakpoint; then dump the variable you want to
check, as in the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">main[1] <B>stop in ScrollText.scroll
<BR>
</B>Breakpoint set in ScrollText.scroll<BR>
main[1]<BR>
Breakpoint hit: ScrollText.scroll (ScrollText:83)<BR>
Thread-2[1] dump dist<BR>
this.dist = -480</FONT></TT>
</BLOCKQUOTE>
<P>
Using the <TT><FONT FACE="Courier">cont</FONT></TT> command, you
can resume execution of the program. Then, when the next breakpoint
is reached, you can dump the variable you want to check again,
as in the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Thread-2[1] <B>cont<BR>
</B>Thread-2[1]<BR>
Breakpoint hit: ScrollText.scroll (ScrollText:83)<BR>
Thread-2[1] dump dist<BR>
this.dist = -481</FONT></TT>
</BLOCKQUOTE>
<H2><A NAME="IdentifyingTroublewiththeCode"><B><FONT SIZE=5 COLOR=#Ff0000>Identifying
Trouble with the Code</FONT></B></A></H2>
<P>
Debugging your code is not a straightforward process, so there
are many ways to do it. There are two key methods used by Java
programmers; one is highly interactive and one is mostly noninteractive.
Just as you use the debugger to provide a highly interactive way
to find out the status of variables and what the program is doing
at a particular line of code, you can use the program itself to
tell you what it's doing at any given time in a primarily noninteractive
way simply by inserting <TT><FONT FACE="Courier">print</FONT></TT>
statements at key points in the logic of the program.
<P>
By adding <TT><FONT FACE="Courier">print</FONT></TT> statements
to key methods, you can ensure that the methods are executing.
You can check the sequence of events that lead to the method being
called and which methods are called after the method executes.
Usually, this type of <TT><FONT FACE="Courier">print</FONT></TT>
statement simply echoes the name of the method being executed,
as in the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">System.out.println(&quot;In the run method.&quot;);</FONT></TT>
</BLOCKQUOTE>
<P>
By placing <TT><FONT FACE="Courier">print</FONT></TT> statements
in conditional loops, you can see what conditions are met on the
basis of the current state of the program. You can then alter
the program's state and see if other conditions of the loop are
met. Usually, this type of <TT><FONT FACE="Courier">print</FONT></TT>
statement simply echoes the condition you are checking for, as
in the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">System.out.println(&quot;No parameter,
using default.&quot;);</FONT></TT>
</BLOCKQUOTE>
<P>
By placing <TT><FONT FACE="Courier">print</FONT></TT> statements
before or after values associated with a variable are changed,
you can ensure the value associated with the variable is what
you expect it to be when called and after the change occurs. Usually,
this type of <TT><FONT FACE="Courier">print</FONT></TT> statement
describes the variable and displays the value, such as
<BLOCKQUOTE>
<TT><FONT FACE="Courier">System.out.println(&quot;The location
parameter is set to: &quot; + x);</FONT></TT>
</BLOCKQUOTE>
<P>
After you use this mostly noninteractive method of debugging for
a while, you may see why many programmers prefer it. The key concept
is that you insert the <TT><FONT FACE="Courier">print</FONT></TT>
statements to help you debug and then either comment them out
or delete them before you provide the finished version of the
program.
<P>
The only bad thing about this method of debugging is that tracking
the <TT><FONT FACE="Courier">print</FONT></TT> statements that
display to your screen is sometimes difficult, especially if your
command window doesn't have a scroll feature. To make this style
of debugging easier, you may want to create a utility to aid the
debugging process, such as a window that displays all your debugging
messages in reverse time order so you always see the most current
messages but also have access to all previous messages.
<P>
Putting your debugging messages in a more usable and trackable
format is exactly what the <TT><FONT FACE="Courier">HelpDebug</FONT></TT>
application shown in Listing 23.1 does. The application creates
a window to which you can pass input and thus log your debugging
information. The heart of the application is an overloaded method
called <TT><FONT FACE="Courier">out</FONT></TT>. The first version
of the <TT><FONT FACE="Courier">out</FONT></TT> method enables
you to pass strings that you want displayed in the debugging window,
the second enables you to display values associated with objects,
and the final version enables you to pass values associated with
integers.
<HR>
<BLOCKQUOTE>
<B>Listing 23.1. The </B><TT><B><FONT FACE="Courier">HelpDebug</FONT></B></TT><B>
application.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* The Complete Guide to HelpDebug Application<BR>
&nbsp;* This application creates a window to log debugging information.
<BR>
&nbsp;*/<BR>
<BR>
import java.applet.Applet;<BR>
import java.awt.*;<BR>
import java.util.*;<BR>
<BR>
<BR>
public class HelpDebug extends Frame {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TextArea textArea;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void out(String str) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.insertText(str
+ '\n',0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void out(Object obj) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.insertText(String.valueOf(obj)
+ '\n',0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void out(int x) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.insertText(&quot;The
value of the integer is:&quot; + x + '\n',0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HelpDebug() {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(&quot;HelpDebug
Output Window&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pack();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reshape(200,0,300,300);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;show();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea
= new TextArea();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textArea.setText(&quot;[New
Debug Session]&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout(new
BorderLayout());<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;Center&quot;,textArea);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleEvent(Event
e) {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (e.id
== Event.WINDOW_DESTROY) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else return
super.handleEvent(e);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Before you can use the <TT><FONT FACE="Courier">HelpDebug</FONT></TT>
application, type in and compile the code or access the source
code for the application on the CD-ROM. Then you need to let your
application or applet know the <TT><FONT FACE="Courier">HelpDebug</FONT></TT>
application exists by doing the following:
<OL>
<LI>Import the <TT><FONT FACE="Courier">HelpDebug</FONT></TT>
class:
<BR><TT><FONT FACE="Courier">import HelpDebug;</FONT></TT>
<LI>Create a container for the <TT><FONT FACE="Courier">debug</FONT></TT>
object:
<BR><TT><FONT FACE="Courier">HelpDebug debug;</FONT></TT>
<LI>Create an instance of the <TT><FONT FACE="Courier">HelpDebug</FONT></TT>
object in the <TT><FONT FACE="Courier">main()</FONT></TT> method
of an application or the <TT><FONT FACE="Courier">init()</FONT></TT>
method of an applet:
<BR><TT><FONT FACE="Courier">debug = new HelpDebug();</FONT></TT>
</OL>
<P>
When your program can access <TT><FONT FACE="Courier">HelpDebug</FONT></TT>,
you can direct your debugging output to the <TT><FONT FACE="Courier">HelpDebug</FONT></TT>
application itself. You do this by calling the <TT><FONT FACE="Courier">out()</FONT></TT>
method of the object you created in step 3, like this:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">debug.out(&quot;The height parameter
as read in is:&quot; + hs);</FONT></TT>
</BLOCKQUOTE>
<P>
To show you how to use this method of debugging and gain practice
with the <TT><FONT FACE="Courier">HelpDebug</FONT></TT> class,
I'll modify the <TT><FONT FACE="Courier">ScrollText</FONT></TT>
applet. I'll do this by directing debugging statements to <TT><FONT FACE="Courier">HelpDebug</FONT></TT>'s
<TT><FONT FACE="Courier">out()</FONT></TT> method. As you examine
the modified applet shown in Listing 23.2, look at how the debugging
statements are added, where they are added, and what they output.
<HR>
<BLOCKQUOTE>
<B>Listing 23.2. The modified </B><TT><B><FONT FACE="Courier">ScrollText</FONT></B></TT><B>
applet with debugging.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.Graphics;<BR>
import java.awt.Font;<BR>
import HelpDebug;<BR>
<BR>
/**<BR>
&nbsp;* The Complete Guide to Java ScrollText Applet with Debugging
information<BR>
&nbsp;* This applet is used to scroll a text banner across the
screen<BR>
&nbsp;* The applet takes TEXT, WIDTH, and HEIGHT as parameters.
<BR>
&nbsp;*/<BR>
<BR>
public class ScrollText extends java.applet.Applet implements
Runnable {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int h;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Height of applet in pixels<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int w;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Width of applet in pixels<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char separated[];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Output string in array form<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String s = null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Input string containing display text<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String hs = null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Input string containing height<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String ws = null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Input string containing width<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread ScrollThread = null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Thread to control processing<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int speed=35;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Length of delay in milliseconds<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean threadSuspended = false;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp; int dist;<BR>
&nbsp;&nbsp;&nbsp;&nbsp; HelpDebug debug;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//container
for the debug object<BR>
<BR>
<BR>
/* Setup width, height, and display text */<BR>
public void init() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;debug = new HelpDebug();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ws = getParameter (&quot;width&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;debug.out(&quot;The width parameter
as read in is:&quot; + ws);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hs = getParameter (&quot;height&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;debug.out(&quot;The height parameter
as read in is:&quot; + hs);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ws == null){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Read width as input<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w
= 150;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
If not found use default<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w
= Integer.parseInt(ws); // Convert input string to integer<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (hs == null){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Read height as input<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h
= 50;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
If not found use default<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h
= Integer.parseInt (hs); // Convert input string to integer<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resize(w,h);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Set font based on height<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setFont(new Font(&quot;TimesRoman&quot;,Font.BOLD,h
- 6));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = getParameter(&quot;text&quot;);//
Read input text, if null use default<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (s == null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = &quot;
The Java ScrollText Applet at work.&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;debug.out(&quot;No
text parameter, using default&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;separated =&nbsp;&nbsp;new char
[s.length()];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s.getChars(0,s.length(),separated,0);
<BR>
&nbsp;}<BR>
<BR>
/* Start new thread to run applet */<BR>
public void start() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(ScrollThread == null)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;debug.out(&quot;Thread is null&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScrollThread =
new Thread(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScrollThread.start();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}<BR>
<BR>
/* End thread containing applet */<BR>
public void stop() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;debug.out(&quot;In the stop method.&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScrollThread = null;<BR>
&nbsp;}<BR>
<BR>
// While applet is running pause then scroll text<BR>
public void run() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;debug.out(&quot;In the run method.&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (ScrollThread != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {Thread.sleep(speed);} catch
(InterruptedException e){}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scroll();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScrollThread = null;<BR>
&nbsp;}<BR>
<BR>
// Scroll text by determining new location to draw text and redrawing
<BR>
synchronized void scroll () {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;debug.out(&quot;In the scroll method.&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dist--;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Move string to left<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;debug.out(dist);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If string has disappeared to
the left, move back to right edge<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (dist + ((s.length()+1)*(h *5
/ 11)) == 0){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dist=w;<BR>
}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
}<BR>
<BR>
// Redraw string at given location<BR>
public void paint(Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawChars(separated, 0, s.length(),
dist,4 *h / 5);<BR>
&nbsp;}<BR>
<BR>
// Suspend thread when mouse is pushed, resume when pushed again
<BR>
public boolean mouseDown(java.awt.Event evt, int x, int y) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;debug.out(&quot;Detected mouseDown
event&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (threadSuspended)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;debug.out(&quot;Resuming
Thread&#133;&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScrollThread.resume();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;debug.out(&quot;Stopping
Thread&#133;&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScrollThread.suspend();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;threadSuspended
= !threadSuspended;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Before you can use the modified applet, you have to type in and
compile the source code or access the source code for the modified
applet on the CD-ROM. You also need to create an HTML document
that displays the applet, such as the one shown in Listing 23.3.
This document is also available on the CD-ROM.
<HR>
<BLOCKQUOTE>
<B>Listing 23.3. The HTML document used to display the applet.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;HTML&gt;<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt;Applet for Debugging&lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
&lt;BODY&gt;<BR>
&lt;APPLET CODE=&quot;ScrollText.class&quot; WIDTH=500 HEIGHT=300&gt;
<BR>
&lt;PARAM NAME=TEXT VALUE=&quot;Applet Debugging Example&#133;&quot;&gt;
<BR>
&lt;/APPLET&gt;<BR>
&lt;/BODY&gt;<BR>
&lt;/HTML&gt;</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
After creating the necessary files, you can run the applet using
the applet viewer or your Web browser. Figure 23.1 shows the applet
and the debugging window. Note that the debugging output displayed
in the <TT><FONT FACE="Courier">HelpDebug</FONT></TT> window is
in reverse time order, which ensures that the most current debugging
information is always displayed at the top of the window.
<P>
<A HREF="f23-1.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f23-1.gif" ><B>Figure 23.1 : </B><I>Using the HelpDebug application.</I></A>
<H2><A NAME="Summary"><B><FONT SIZE=5 COLOR=#Ff0000>Summary</FONT></B></A>
</H2>
<P>
Debugging logic problems in your code is more difficult than debugging
syntax problems. Therefore, you need a set of advanced tools to
aid the debugging process. When you want to debug your code in
a highly interactive way, use the Java debugger. The Java debugger
is one of the most advanced tools in the Java Developer's Kit
and, as such, has many useful features for debugging your code.
When you want to debug your code in a mostly noninteractive way,
you may want to use <TT><FONT FACE="Courier">print</FONT></TT>
statements and possibly a utility that helps you track them. The
<TT><FONT FACE="Courier">HelpDebug</FONT></TT> utility presented
in this chapter is designed to help you do just that.
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch22.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch22.htm"><IMG SRC="pc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/index.htm"><IMG SRC="hb.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch24.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch24.htm"><IMG 
SRC="nc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>