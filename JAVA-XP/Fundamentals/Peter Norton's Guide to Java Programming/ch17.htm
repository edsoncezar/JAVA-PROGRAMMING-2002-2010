<HTML>

<HEAD>
   <TITLE>Chapter 17 -- Creating a Stand-alone Application</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<!--Begin JavaScript roadmap code.  If editing downloaded HTML source, delete
 this portion.-->

<script language="JavaScript">
<!--

function TripodShowPopup()
{
   var bName=navigator.appName;
   var bVer=parseInt(navigator.appVersion);
   var now = new Date();
   var popupURL = "/adm/popup/roadmap.shtml?"+"member_name=er4ebus&path=peternortonjavaprograming&client_ip=200.190.100.218&ts=1015337146&ad_type=POPUP&category=net&id=4b11140926931d32198f14b3bb2cb227";
   var popupName = "TripodPopup";

   if (bName=="Netscape" && bVer<=3)
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=614,height=150');
   }
   else
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=604,height=135');
   }
   popup.location = popupURL;
}

if(window.parent==window)
{
   TripodShowPopup();
}

// -->
</script>

<script language="JavaScript1.2">
<!--

function changeOpenFunction()
{
   var original_window_open = window.open;
   function new_open_function(url, name, features, replace)
   {
      if(name != "TripodPopup")
         return original_window_open(url, name, features, replace);
   }
   window.open = new_open_function;
}
var bName = navigator.appName;

if(bName != "Netscape")
   changeOpenFunction();

// -->
</script>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#Ff0000>Chapter 17</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#Ff0000>Creating a Stand-alone Application</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>

<UL>
<LI><A HREF="#HowStandaloneApplicationsDifferfrom" >How Stand-alone Applications Differ from Applets</A>
<UL>
<LI><A HREF="#DifferencesintheCode" >Differences in the Code</A>
<LI><A HREF="#DifferencesinPerformance" >Differences in Performance</A>
<LI><A HREF="#DifferencesinSecurity" >Differences in Security</A>
</UL>
<LI><A HREF="#ConceptualizationandDesignoftheAppl" >Conceptualization and Design of the Application</A>
<LI><A HREF="#DefiningtheApplicationStructure" >Defining the Application Structure</A>
<UL>
<LI><A HREF="#ANongraphicalExample" >A Nongraphical Example</A>
<LI><A HREF="#AGraphicalExample" >A Graphical Example</A>
</UL>
<LI><A HREF="#BuildingtheApplication" >Building the Application</A>
<UL>
<LI><A HREF="#AllowingInteractiveUpdatestotheAppl" >Allowing Interactive Updates to the Application</A>
<LI><A HREF="#WritingtotheLocalHardDrive" >Writing to the Local Hard Drive</A>
<LI><A HREF="#IncludinganAppletinanApplication" >Including an Applet in an Application</A>
<LI><A HREF="#AdditionalNeeds" >Additional Needs</A>
</UL>
<LI><A HREF="#TheFinishedStandaloneApplication" >The Finished Stand-alone Application</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
So far, all the chapters in this book have discussed Java development
with applets that run in external viewers. These applets can be
transferred across the Web or reside locally on the user's pc.
Either way, they cannot be run without a Java-enabled browser
or viewer.
<P>
This chapter introduces <I>stand-alone applications</I>. These
are Java programs that can be run independent of a browser or
external viewer. Unlike code that is compiled for a specific operating
system, Java applications require the Java interpreter to be loaded
each time they are run. They are run by calling the Java interpreter
and passing it the name of the class file containing the application.
<P>
Until recently, few developers understood the benefits of Java
beyond its usefulness to Internet development; therefore, few
stand-alone applications were written in Java. This is rather
unfortunate, because the true power of Java is in its usefulness
to developing software for multiple platforms regardless of whether
those platforms are connected to the Internet.
<H2><A NAME="HowStandaloneApplicationsDifferfrom"><B><FONT SIZE=5 COLOR=#Ff0000>How
Stand-alone Applications Differ from Applets</FONT></B></A></H2>
<P>
Although applications have many similarities to applets, they
have some important differences as well. The similarities arise
because both applets and applications are constructed using the
Java API. The differences stem from the distinct environments
in which the applets and applications run.
<H3><A NAME="DifferencesintheCode"><B>Differences in the Code</B></A>
</H3>
<P>
The most obvious way that stand-alone applications differ from
applets is the static <TT><FONT FACE="Courier">main()</FONT></TT>
method. This method is ignored when a class is run as an applet,
but is required to start the program if the class is run as an
application. The difference is based on the environment that starts
the class. This enables the same class to function as either an
applet or an application.
<P>
Unlike C++, the <TT><FONT FACE="Courier">main()</FONT></TT> method
in Java must be part of the public class that defines an application.
The method cannot be created separately from a class because it
is used to create the initial classes used in the application.
<P>
The <TT><FONT FACE="Courier">main()</FONT></TT> method is required
for a class to be run as an application because this is the method
the Java interpreter looks for when it starts. The entire application
can be stored in this method; however, that is not a recommended
practice. Generally, the <TT><FONT FACE="Courier">main()</FONT></TT>
method should create instances of objects and let the objects
control the execution of the program.
<P>
Neither the <TT><FONT FACE="Courier">init()</FONT></TT> method
nor the <TT><FONT FACE="Courier">start()</FONT></TT> method called
by the browser for applets is automatically called by the Java
interpreter when an application runs, so if an applet is converted
to a stand-alone application, these methods must be explicitly
called in <TT><FONT FACE="Courier">main()</FONT></TT>.
<P>
There are also differences in the expectations users have for
applets and applications. Applets are associated with a browser,
and the browser handles starting and exiting, so applets usually
are not expected to have menus or dialog boxes. Applications are
generally larger, more robust, and specialized to serve a particular
need. They usually contain multiple windows and a sophisticated
user interface.
<H3><A NAME="DifferencesinPerformance"><B>Differences in Performance</B></A>
</H3>
<P>
Applets are meant to be run in an external viewer, such as a Web
browser, and are expected to operate across a network. Therefore,
applets inherit all the overhead of the viewer in which they are
running. So, even if your applet needs only 100KB of memory, you
are still constrained by the memory needs of the Web browser,
which could be an additional 4, 8, or 16MB of memory. On a system
that's already running multiple applications, such as a word processor
and a spreadsheet program, the additional memory needs of the
browser can seriously affect performance.
<P>
Applications, on the other hand, are meant to be run in the Java
interpreter on a local machine. Without the overhead associated
with Java applets, Java applications can provide users with better
performance. Better performance translates to improved response
times and, possibly, increased productivity.
<H3><A NAME="DifferencesinSecurity"><B>Differences in Security</B></A>
</H3>
<P>
There are benefits to using applets that are not directly available
in applications. Browsers and other external viewers load local
and remote applets using two different mechanisms. If an applet
exists on the local file system and is in a directory defined
in the <TT><FONT FACE="Courier">CLASSPATH</FONT></TT> environment
variable, the applet is loaded by the file system loader. These
local applets are allowed to read and write files and can access
native code.
<P>
Non-local applets are loaded by the applet class loader and are
subject to the restrictions of the applet security manager. To
ensure that the integrity of the client machine isn't compromised
when accessing remote information, Java adds a layer of security
controls that places restrictions on what applets loaded over
the network can and cannot do.
<P>
To prevent non-local applets from gaining access to or destroying
information on the client machine, applets are generally restricted
from gaining access to the client's file system. This means applets
cannot manipulate files or directories on the client in any way.
They cannot read or write files. They cannot make directories.
They cannot check file type, size, or modification date. They
also cannot start another program on the client.
<P>
Although code written in another programming language, such as
C or C++, can be called from within Java applications, this cannot
be done from within applets loaded over the network. Again, this
is because of security concerns: Any program that can invoke native
code on a remote machine could also gain direct access to protected
areas of the system.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=565>
<BLOCKQUOTE>
Most of the security controls for applets are provided by the applet security manager. Obviously, you could create similar security controls for applications, but why create what already exists?</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="ConceptualizationandDesignoftheAppl"><B><FONT SIZE=5 COLOR=#Ff0000>Conceptualization
and Design of the Application</FONT></B></A></H2>
<P>
Conceptualizing and designing an application is similar to what
you would do with an applet. However, there are more options available
when working with an application, and often applications require
an extensive user interface. This implies there is more to consider
during the design of an application.
<P>
Applets may include pop-up windows, but they are not trusted windows
and appear with large warnings to the user. These warnings are
produced by the Java-enabled browser and are not present with
applications that often use dialog boxes to collect information
from the user. When you design an application, you must build
all the windows used in the application and define the manner
in which the windows are opened and closed.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
Because windows are generally associated with applications that are not restricted by the security manager, Java labels windows used by applets as untrusted. This means that the windows are subject to the rules of the security manager.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Applications also can include menus for controlling windows and
features. These menus must be included as part of the design.
Applets may include menus, but this is uncommon because the applets
are being run in the browser.
<P>
Recall from <A HREF="ch14.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch14.htm" >Chapter 14</A>, &quot;Creating
a Java Applet,&quot; that the first step in designing an applet
is to have a good overall understanding of the tasks it will perform.
This applies to applications as well. This chapter demonstrates
how to develop an application that sums an arbitrarily long list
of numbers. The development is done in stages to illustrate different
concepts that are important to applications.
<P>
Here's the initial specification for the application:
<BLOCKQUOTE>
Initially, the application will read a list of numbers from the
command line and display the sum. You will then allow the user
to enter additional values while the application is running. Finally,
you will add a title and improve the display of the application.
</BLOCKQUOTE>
<P>
To meet these requirements, you must create several objects in
the application: 
<UL>
<LI>An object to store and display the sum
<LI>An object to allow data entry
<LI>A container to hold the objects
<LI>A title to describe the application
</UL>
<P>
Before you define the structure of the application, remember that
applications do not always require a sophisticated user interface.
Indeed, some applications may be created to run on a server communicating
across a network with another application. This type of application
could write to a log file and not have any user interface at all.
<P>
The application that follows reads in arguments from the command
line and returns the sum of the arguments. The purpose of this
example is to demonstrate a simple application that does not require
a graphical interface.
<P>
This application is short, so it is contained in the <TT><FONT FACE="Courier">main()</FONT></TT>
method. No functionality from any class already defined in the
API is needed, so it inherits directly from the <TT><FONT FACE="Courier">Object</FONT></TT>
class. This is the default class; it is not necessary to explicitly
state the inheritance.
<P>
Both the <TT><FONT FACE="Courier">Integer</FONT></TT> and <TT><FONT FACE="Courier">String</FONT></TT>
classes are used for conversion, so import both into the application.
The command-line arguments are read as a string. Each argument
must be converted to an integer before it can be added to the
sum. The sum is stored internally as an integer and converted
to a string for display.
<P>
The conversions, shown in the following code fragment, cause the
code to appear more complex than it actually is:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.lang.Integer;<BR>
import java.lang.String;<BR>
<BR>
// Application to add numbers entered on the command line<BR>
class SumIt {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String args[])
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
theSum=0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
the sum of the inputs<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
loopCounter;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// the current
itteration<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(loopCounter=0;loopCounter&lt;args.length;loopCounter++)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theSum
= theSum + Integer.parseInt(args[loopCounter]);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;The
sum is &quot;+String.valueOf(theSum));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
This is a complete application in and of itself. Store it in the
file <TT><FONT FACE="Courier">SumIt.java</FONT></TT>. It can be
compiled by typing
<BLOCKQUOTE>
<TT><FONT FACE="Courier">javac SumIt.java</FONT></TT>
</BLOCKQUOTE>
<P>
When the application is compiled, you can run it from the command
line by typing
<BLOCKQUOTE>
<TT><FONT FACE="Courier">java SumIt 20 35 5</FONT></TT>
</BLOCKQUOTE>
<P>
where <TT><FONT FACE="Courier">20</FONT></TT>, <TT><FONT FACE="Courier">35</FONT></TT>,
and <TT><FONT FACE="Courier">5</FONT></TT> are the arguments passed
to the application. The output appears as
<BLOCKQUOTE>
<TT><FONT FACE="Courier">The sum is 60</FONT></TT>
</BLOCKQUOTE>
<P>
This style of application may be sufficient because some tasks
do not require user interaction. However, even then it would make
sense to divide the application into objects and methods that
are then called by the <TT><FONT FACE="Courier">main()</FONT></TT>
method.
<P>
The next section discusses structuring the application into objects
and methods. Some of the code from the <TT><FONT FACE="Courier">SumIt</FONT></TT>
example is used as you continue to develop the application.
<H2><A NAME="DefiningtheApplicationStructure"><B><FONT SIZE=5 COLOR=#Ff0000>Defining
the Application Structure</FONT></B></A></H2>
<P>
As applications grow larger, it is cumbersome to work with them
entirely in <TT><FONT FACE="Courier">main()</FONT></TT>. Applications
can use multiple objects just as applets can, so applications
must be structured around objects just as applets are. To describe
the application structure fully, define each of the objects, when
the objects are created and destroyed, and how the objects communicate.
Recall that these same characteristics are defined for each object
in the applets.
<P>
Objects do not necessarily have to have separate displays. As
the previous example shows, an application does not have to have
a display at all. So if the display is not used to divide applications
into objects, how does one divide them? There is no simple answer
to this question.
<P>
Generally, grouping similar functionalities together will help
define useful objects. Creating objects that mirror real-world
objects is often useful. Objects also can be created to encapsulate
particularly complex algorithms or to hide portions of code that
should not be modified. Other objects are created strictly to
assist with display to the user or output to a file.
<P>
The ability to define generic, reusable objects improves with
practice. There is no particularly correct manner for determining
the objects that compose an application. There can be many correct
sets of objects, just as there can be many correct C programs
with the same functionality.
<P>
In general, the <TT><FONT FACE="Courier">main()</FONT></TT> method
is used to create objects, which are responsible for doing the
actual work of running the application. Defining separate objects
for each task that the application performs and enabling the objects
to perform these tasks provides more flexibility for reusing classes
and modifying code.
<H3><A NAME="ANongraphicalExample"><B>A Nongraphical Example</B></A>
</H3>
<P>
A more flexible way to structure the application developed in
the first section is to create a separate class to hold the sum.
The remainder of the application must be able to interact with
this class in specific, well-defined ways. It must be able to
create a new sum, include a new number in the sum, and retrieve
the sum. It does not have to subtract from the sum or, for our
purposes here, clear the sum back to zero.
<P>
The following class defines methods appropriate for the object
that computes the sums:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">// Class to store a sum that is independent
of the display mechanism<BR>
class ASum {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int theSum;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public ASum() {theSum = 0;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Constructor sets instance var to 0<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void incSum(int toAdd) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theSum
= theSum + toAdd;&nbsp;&nbsp;&nbsp;// Add to instance variable
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public int getSum(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
theSum;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Return the value of the instance variable<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
Just as you defined new classes in applets to isolate and encapsulate
functionality, you do the same in applications. A <TT><FONT FACE="Courier">main()</FONT></TT>
method that utilizes the class defined here would appear as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">// Application to sum numbers entered
on the command line<BR>
// this application uses a separate class to store the sum<BR>
class SumObj {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String args[])
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ASum
theSum = new ASum();&nbsp;&nbsp;&nbsp;&nbsp;// the sum of the
inputs<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
loopCounter;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
the current iteration<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(loopCounter=0;loopCounter&lt;args.length;loopCounter++)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theSum.incSum(Integer.parseInt(args[loopCounter]));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;The
sum is &quot;+String.valueOf(theSum.getSum()));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
Now there is no way that the value of the sum could be accidentally
reset in the <TT><FONT FACE="Courier">main()</FONT></TT> method.
This type of structuring also means that if you want a graphical
front end, you can add it without changing the class that stores
the sum.
<P>
The capability to create an object in another class that displays
it may not seem important for this example, but suppose the needed
calculations were more complex. For example, instead of computing
a sum, what if the application required a method that took several
inputs and then did some abstract modeling or other complex calculations?
In this circumstance, the capability to use the same method and
add several different user interfaces is a large advantage. It
reduces the risk that new interfaces would introduce errors in
the model or calculations. This is the advantage of separating
the user input from the back-end processing.
<H3><A NAME="AGraphicalExample"><B>A Graphical Example</B></A>
</H3>
<P>
Adding a graphical front end to an application means adding some
objects to the application. The application does not run in the
browser, so it must have its own frame in which to run. This frame
is created in the <TT><FONT FACE="Courier">main()</FONT></TT>
method.
<P>
In addition to the frame, the application needs an object to display
the results. Because the results are not directly modifiable by
the user, a label is used to display them. Therefore, both the
<TT><FONT FACE="Courier">Label</FONT></TT> and <TT><FONT FACE="Courier">Frame</FONT></TT>
classes must be imported for the application to use. The <TT><FONT FACE="Courier">ASum</FONT></TT>
class can be used exactly as it is in the previous example. The
new <TT><FONT FACE="Courier">SumGraph</FONT></TT> class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.lang.Integer;<BR>
import java.lang.String;<BR>
import java.awt.Label;<BR>
import java.awt.Frame;<BR>
<BR>
// Application that sums inputs from the command line and displays
<BR>
// the result in a graphical interface. This application makes
use<BR>
// of the ASum object for storing the sum.<BR>
class SumGraph {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String args[])
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Frame
f;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Label
sl;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Creates a new object to display
the result<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ASum
theSum = new ASum();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// the sum of
the inputs<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
loopCounter;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
the current iteration<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(loopCounter=0;loopCounter&lt;args.length;loopCounter++)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theSum.incSum(Integer.parseInt(args[loopCounter]));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sl
= new Label(&quot;The sum is &quot;+String.valueOf(theSum.getSum()));
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f
= new Frame(&quot;Sum&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Creates frame for applicaton<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.add(&quot;Center&quot;,sl);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Puts the Sum object in frame<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.resize(300,
300);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Resizes the frame<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.show();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Displays the frame<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
Although the application now has a graphical user interface, all
the control still resides in the <TT><FONT FACE="Courier">main()</FONT></TT>
method. The key to improving the design is to make the <TT><FONT FACE="Courier">main()</FONT></TT>
method responsible for creating objects that can then hold and
display the sum. Furthermore, it is currently possible to modify
the <TT><FONT FACE="Courier">main()</FONT></TT> method so that
it updates the sum but does not update the label. This results
in a display that does not reflect the true value of the sum.
<P>
To avoid the problem of the display and the storage object becoming
out of sync, make the storage object, <TT><FONT FACE="Courier">theSum</FONT></TT>,
accessible only by the <TT><FONT FACE="Courier">Label</FONT></TT>
class. Then all other objects that attempt to update the sum must
do so via that class, so the <TT><FONT FACE="Courier">Label</FONT></TT>
class can adjust itself in response to each update.
<P>
To accomplish this, extend the <TT><FONT FACE="Courier">Label</FONT></TT>
class so that it can handle creating the sum as part of its constructor.
Then all the <TT><FONT FACE="Courier">main()</FONT></TT> method
has to do is create a frame and display the new class in the frame.
<P>
The new class is called <TT><FONT FACE="Courier">SumLabel</FONT></TT>
and is defined as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">// Class used to display a Sum in as
a Label<BR>
// This class makes use of ASum as an object to hold the sum<BR>
// The sum is created from an array of strings passed to the constructor
<BR>
class SumLabel extends Label{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public SumLabel(String args[]) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ASum
theSum = new ASum();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// the sum of
the inputs<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
loopCounter;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
the current itteration<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(loopCounter=0;loopCounter&lt;args.length;loopCounter++)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theSum.incSum(Integer.parseInt(args[loopCounter]));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.setText(&quot;The
sum is &quot;+String.valueOf(theSum.getSum()));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
Notice that the constructor for the new class must be passed the
argument list from the <TT><FONT FACE="Courier">main()</FONT></TT>
method. The new <TT><FONT FACE="Courier">main()</FONT></TT> method
is shown in the following code fragment:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">// Application that sums inputs from
the command line and displays<BR>
// the result in a graphical interface. This application makes
use<BR>
// of the SumLabel object for displaying and storing the sum.
<BR>
class SumGraph {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String args[])
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Frame
f;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Create a new object to display the result<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SumLabel
sl = new SumLabel(args);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f
= new Frame(&quot;Sum&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Creates a new frame<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.add(&quot;Center&quot;,sl);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Puts the Sum object in the frame<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.resize(300,
300);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Resizes the frame<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.show();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Displays the frame<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
This method is shorter and easier to follow than the previous
<TT><FONT FACE="Courier">main()</FONT></TT>. A considerable amount
of the functionality has been moved to the new class. It is also
easier to see how another class that displays the average of the
values entered, such as <TT><FONT FACE="Courier">AvgLabel</FONT></TT>,
 could be added to this method.
<P>
Save all three of these classes-<TT><FONT FACE="Courier">ASum</FONT></TT>,
<TT><FONT FACE="Courier">SumLabel</FONT></TT>, and <TT><FONT FACE="Courier">SumGraph</FONT></TT>-in
the file <TT><FONT FACE="Courier">SumGraph.java</FONT></TT> and
compile it using the command
<BLOCKQUOTE>
<TT><FONT FACE="Courier">javac SumGraph.java</FONT></TT>
</BLOCKQUOTE>
<P>
When you run the application, you can pass the parameters on the
command line as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">java SumGraph 23 54 1</FONT></TT>
</BLOCKQUOTE>
<P>
The application displays the result in the frame titled <TT><FONT FACE="Courier">Sum</FONT></TT>.
The minimize and maximize buttons can be used to resize the window.
However, there is one small problem with the user interface: The
Close button on the window does not work. The only way to close
the application is to press Ctrl+C with the cursor in the window
where it was started.
<P>
What's going on here? The window resizes and iconifies correctly,
but it does not close when the user presses its Close button.
If this were an applet, the browser would take care of closing
the applet when the user exits the window, but because this is
an application, it is essential to test for the user closing the
window and exiting the application. You could also add a Close
button to the application. However, even if a separate Close button
exists, the application must handle exiting when the window is
closed.
<P>
The <TT><FONT FACE="Courier">Frame</FONT></TT> class has an event
handler that reacts when the user changes the size of the window,
but it does not handle closing the window. There are two methods
of solving this problem. First, you could extend the <TT><FONT FACE="Courier">Frame</FONT></TT>
class to a class <TT><FONT FACE="Courier">myFrame</FONT></TT>,
in which case the event handler in the new class would check for
the window closing. The other option is to make the <TT><FONT FACE="Courier">SumGraph</FONT></TT>
class itself an extension of <TT><FONT FACE="Courier">Frame</FONT></TT>.
Either way, you should then add an event-handling method to respond
to the window closing: a <TT><FONT FACE="Courier">WINDOW_DESTROY</FONT></TT>
event. If you use this event, the application must import the
<TT><FONT FACE="Courier">java.awt.Event</FONT></TT> class.
<P>
The following code shows the <TT><FONT FACE="Courier">SumGraph</FONT></TT>
class as extension of the <TT><FONT FACE="Courier">Frame</FONT></TT>
class. The event handler is extended to provide for the window
being closed by the user:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.lang.Integer;<BR>
import java.lang.String;<BR>
import java.awt.Label;<BR>
import java.awt.Frame;<BR>
import java.awt.Event;<BR>
<BR>
// Application that sums inputs from the command line and displays
<BR>
// the result in a graphical interface. This application makes
use<BR>
// of the SumLave object for displaying and storing the sum.<BR>
class SumGraph extends Frame {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SumGraph() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(&quot;Sum&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String args[])
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SumGraph
f = new SumGraph();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Instantiate self<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Creates a new object to display the result<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SumLabel
sl = new SumLabel(args);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.add(&quot;Center&quot;,sl);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Puts Sum object in the frame<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.resize(300,
300);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Resizes the frame<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.show();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Displays the frame<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Event handler to allow for the
closing of the window<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleEvent(Event
evt)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.id == Event.WINDOW_DESTROY)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
super.handleEvent(evt);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
Okay, you need just two more objects for the application: an object
to allow data entry, for which you can use a standard <TT><FONT FACE="Courier">TextField</FONT></TT>
object, and a heading or title across the top of the display.
Although you could do this with an ordinary <TT><FONT FACE="Courier">label</FONT></TT>
with a large font, it is more interesting to use an object, such
as the <TT><FONT FACE="Courier">ScrollText</FONT></TT> applet
from the previous chapter. You'll add these objects in the next
section.
<H2><A NAME="BuildingtheApplication"><B><FONT SIZE=5 COLOR=#Ff0000>Building
the Application</FONT></B></A></H2>
<P>
Although it seems the application is nearly complete, it does
not yet interact with the user while it is running, nor does it
write the result to a file. This section demonstrates how to add
a text box to allow the user to add numbers while the application
is running. This section then discusses how to write the result
to a file and how to add enhancements such as menus and dialog
boxes.
<H3><A NAME="AllowingInteractiveUpdatestotheAppl"><B>Allowing
Interactive Updates to the Application</B></A></H3>
<P>
To allow interactive updates, there must be a way for the user
to update the display. Currently, the text of the label used for
display is set when the label is created with no provision to
update it. In fact, there is no method available to the <TT><FONT FACE="Courier">SumGraph</FONT></TT>
class that will update the sum.
<P>
The label and the sum must be updated in the same method, which
must be available to the <TT><FONT FACE="Courier">SumGraph</FONT></TT>
class. To accomplish this, create a method in the <TT><FONT FACE="Courier">SumLabel</FONT></TT>
class that updates both the sum and the label. Update the sum
using the <TT><FONT FACE="Courier">incSum()</FONT></TT> method
from the <TT><FONT FACE="Courier">ASum</FONT></TT> object created
earlier. The new method follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void updateSum(String newVal)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theSum.incSum(Integer.parseInt(newVal));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.setText(&quot;The sum is &quot;+String.valueOf(theSum.getSum()));
<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
For this method to work correctly, it must be able to access the
same <TT><FONT FACE="Courier">ASum</FONT></TT> object used in
the constructor of the <TT><FONT FACE="Courier">SumLabel</FONT></TT>.
However, the object was created locally to the constructor. Therefore,
the class <TT><FONT FACE="Courier">SumLabel</FONT></TT> is modified
to make the <TT><FONT FACE="Courier">ASum</FONT></TT> object available
to the entire class.
<P>
The declaration of <TT><FONT FACE="Courier">theSum</FONT></TT>
is taken out of the constructor and made into an instance variable.
It is declared as protected so that no other objects can modify
it. This prevents other objects from modifying the sum directly
because other objects may modify <TT><FONT FACE="Courier">theSum</FONT></TT>
variable and not change the label appropriately.
<P>
You may want other objects to be able to retrieve the stored sum.
In this case, create a method in the <TT><FONT FACE="Courier">SumLabel</FONT></TT>
class that will return the current sum. Use this method, <TT><FONT FACE="Courier">getSum()</FONT></TT>,
when creating a method that writes the sum to a file. The final
version of the <TT><FONT FACE="Courier">SumLabel</FONT></TT> class
follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">// Class used to display a Sum in as
a Label<BR>
// This class makes use of ASum as an object to hold the sum<BR>
// The sum is created from an array of strings passed to the constructor
<BR>
class SumLabel extends Label {<BR>
&nbsp;&nbsp;&nbsp;&nbsp; protected ASum theSum;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Create the initial sum from an
array of strings<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public SumLabel(String args[]) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
must go first in constructor<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
loopCounter;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
the current iteration<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theSum
= new ASum();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
the sum of the inputs<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(loopCounter=0;loopCounter&lt;args.length;loopCounter++)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theSum.incSum(Integer.parseInt(args[loopCounter]));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.setText(&quot;The
sum is &quot;+String.valueOf(theSum.getSum()));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.setAlignment(Label.CENTER);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Allow other classes to view the
sum, but not modify it<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public int getSum(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Return the value of the protected object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
theSum.getSum();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Allow other classes to update
the sum while also updating label<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void updateSum(String newVal)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theSum.incSum(Integer.parseInt(newVal));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.setText(&quot;The
sum is &quot;+String.valueOf(theSum.getSum()));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
Now the application must include a call to the <TT><FONT FACE="Courier">updateSum</FONT></TT>
method. The user is expected to enter data into a <TT><FONT FACE="Courier">TextField</FONT></TT>
object created by the <TT><FONT FACE="Courier">main()</FONT></TT>
method. To create this object, the application needs to import
the <TT><FONT FACE="Courier">java.awt.TextField</FONT></TT> class.
<P>
When the user is finished adding a new number to the field, he
or she is expected to press Enter. Pressing Enter triggers what
is called an <TT><FONT FACE="Courier">ACTION EVENT</FONT></TT>
that can be handled either by the <TT><FONT FACE="Courier">action()</FONT></TT>
method or by the <TT><FONT FACE="Courier">handleEvent()</FONT></TT>
method. An <TT><FONT FACE="Courier">action</FONT></TT> method
is shown in the following example:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean action(Event evt, Object
arg) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (evt.target instanceof TextField)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sl.updateSum(tf);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else return false;<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
Instead of using the <TT><FONT FACE="Courier">action()</FONT></TT>
method, modify the existing <TT><FONT FACE="Courier">handleEvent()</FONT></TT>
method in the <TT><FONT FACE="Courier">SumGraph</FONT></TT> class
so that all the event handling in the <TT><FONT FACE="Courier">SumGraph</FONT></TT>
class occurs in one place and is easy to locate. Event handlers
are more generic than action handlers, so it is not a problem
for the <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
to contain all the responses. Actions occur when users press buttons
or the Enter key when the cursor is in a text field. Events occur
when the program senses a change in the environment. Events include
moving the mouse, pressing a key, or leaving a text field in any
manner.
<P>
Therefore, in the event handler, the programmer must be careful
to react only when the user presses Enter in the entry field.
The event handler must test that the event occurs in the <TT><FONT FACE="Courier">TextField</FONT></TT>
object and that the event is triggered by the user pressing Enter.
<P>
Pressing Enter is an <TT><FONT FACE="Courier">action event</FONT></TT>.
Therefore, an <TT><FONT FACE="Courier">event id</FONT></TT> being
equal to <TT><FONT FACE="Courier">ACTION_EVENT</FONT></TT> indicates
that Enter was pressed if the user is in a <TT><FONT FACE="Courier">TextField</FONT></TT>.
<TT><FONT FACE="Courier">ACTION_EVENT</FONT></TT> is a static
variable defined in the event class. The <TT><FONT FACE="Courier">event
id</FONT></TT> is automatically set to this value when an action
event is triggered.
<P>
The event handler tests whether the user is in the entry field
by testing for the event target being an instance of the <TT><FONT FACE="Courier">TextField</FONT></TT>
object. The complete <TT><FONT FACE="Courier">handleEvent()</FONT></TT>
method follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean handleEvent(Event evt)
<BR>
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Allow for the closing of the
window<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (evt.id == Event.WINDOW_DESTROY)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Allow for new values being entered
in input field<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (evt.target instanceof
TextField &amp;&amp;<BR>
&nbsp;evt.id == Event.ACTION_EVENT) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sl.updateSum(((TextField)evt.target).getText());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;} else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return super.handleEvent(evt);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
Notice that it is not necessary to make the name of the <TT><FONT FACE="Courier">TextField</FONT></TT>
object available throughout the class. The event handler can act
by using the object of the event. In fact, it is not essential
to give a name to the <TT><FONT FACE="Courier">TextField</FONT></TT>,
although a name is created in <TT><FONT FACE="Courier">main()</FONT></TT>
for clarity.
<P>
The event handler calls the <TT><FONT FACE="Courier">updateSum()</FONT></TT>
method using <TT><FONT FACE="Courier">sl</FONT></TT>, an instance
of <TT><FONT FACE="Courier">SumLabel</FONT></TT> that is available
to the entire <TT><FONT FACE="Courier">SumGraph</FONT></TT> class.
From the object of the event, the event handler gets the text
string to pass to <TT><FONT FACE="Courier">updateSum</FONT></TT>.
The event handler knows that the object of the event is a <TT><FONT FACE="Courier">TextField</FONT></TT>
object, and it can use the <TT><FONT FACE="Courier">getText()</FONT></TT>
method to retrieve the text from that field. The handler must
be careful to cast the object to the correct object type so that
all the methods associated with that type are available before
it calls <TT><FONT FACE="Courier">getText()</FONT></TT>. Pay careful
attention to the parentheses on this line of code.
<H3><A NAME="WritingtotheLocalHardDrive"><B>Writing to the Local
Hard Drive</B></A></H3>
<P>
The security concerns that necessitate restricting an applet's
capability to write to files are not present when working with
applications. Although only the final sum is written to a file
for the example, similar code could be used to write repeatedly
to a file or multiple files.
<P>
A new method, <TT><FONT FACE="Courier">writeSum()</FONT></TT>,
handles writing to the file and is created as part of the <TT><FONT FACE="Courier">SumGraph</FONT></TT>
class. The <TT><FONT FACE="Courier">writeSum()</FONT></TT> method
uses a <TT><FONT FACE="Courier">RandomAccessFile</FONT></TT> object
to create a random-access file and write to it. For this method
to compile correctly, the application should import the class
<TT><FONT FACE="Courier">java.io.RandomAccessFile</FONT></TT>.
<P>
The methods that write to the file all could throw an exception
called <TT><FONT FACE="Courier">IOException</FONT></TT> when they
encounter an error writing to the file. The <TT><FONT FACE="Courier">writeSum()</FONT></TT>
method may either catch the exception or have the method throw
the exception back to the caller. To keep the caller isolated
from the details and problems of writing to the file, the method
is defined to catch the exception. If an exception occurs, the
method will print an error message to the screen, indicating that
there was a problem writing to the file.
<P>
If everything proceeds normally, the method will open the file,
get the sum from the <TT><FONT FACE="Courier">SumLabel</FONT></TT>
object, write the sum and appropriate text to the file, and close
the file. The method will not return a status. The code for this
method follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">//Write a sum contained in the object
sl to a file<BR>
public void writeSum(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomAccessFile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SumFile;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SumFile
= new RandomAccessFile(&quot;SumResult.txt&quot;,&quot;rw&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SumFile.writeBytes(&quot;The
sum is &quot;+sl.getSum()+&quot;.\n&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SumFile.close();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (java.io.IOException e)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Could
not write to SumResult file.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(e);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The final step is to call the <TT><FONT FACE="Courier">writeSum()</FONT></TT>method
from an appropriate point in the application. The method should
execute at the end of the program to write the final sum. How
do you determine that the program is exiting? Well, the application
currently exits when the user closes the window. The call to the
<TT><FONT FACE="Courier">writeSum()</FONT></TT> method is added
just prior to the <TT><FONT FACE="Courier">System.exit()</FONT></TT>
call to ensure that the sum is written when the application closes.
<P>
The application now has most of the required functionality, but
it still needs some type of title. The next section describes
how to add the <TT><FONT FACE="Courier">ScrollText</FONT></TT>
applet to provide a scrolling title for the application.
<H3><A NAME="IncludinganAppletinanApplication"><B>Including an
Applet in an Application</B></A></H3>
<P>
Applets are objects. Therefore, it seems reasonable that they
could be included in applications. They can be, but certain modifications
are necessary because the application does not include all the
environment variables that the applet often expects. However,
if the application happens to define all the objects included
in a Java-enabled browser, the applet should run without modification.
<P>
The basic problem with including <TT><FONT FACE="Courier">ScrollText</FONT></TT>
in its existing form is that you can't define the parameters used
in the <TT><FONT FACE="Courier">init()</FONT></TT> method. The
<TT><FONT FACE="Courier">init()</FONT></TT> method uses <TT><FONT FACE="Courier">getParameter</FONT></TT>
to determine the height and width of its display and to get the
text it will scroll. The application being built does not have
a means of setting these parameters.
<P>
This can be solved by overloading the <TT><FONT FACE="Courier">init()</FONT></TT>
method. In the new <TT><FONT FACE="Courier">init()</FONT></TT>
method the values for width, height, and text are passed as parameters
to the method. The internal values of the <TT><FONT FACE="Courier">ScrollText</FONT></TT>
applet are then set in the same manner as in the original <TT><FONT FACE="Courier">init()</FONT></TT>
method using the values passed to the method. With this one change,
the <TT><FONT FACE="Courier">SumGraph</FONT></TT> application
can then make use of the <TT><FONT FACE="Courier">ScrollText</FONT></TT>
applet. The new <TT><FONT FACE="Courier">init()</FONT></TT> method
appears as
<BLOCKQUOTE>
<TT><FONT FACE="Courier">//Init() method to allow parameter passing
from an application<BR>
public void init(String inWidth, String inHeight, String inText)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ws = inWidth;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hs = inHeight;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ws == null){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Read width as input, if not found use default<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w
= 150;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w
= Integer.parseInt(ws); // Convert input string to integer<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (hs == null){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Read height as input, if not found use default<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h
= 50;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h
= Integer.parseInt (hs); // Convert input string to integer<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resize(w,h);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Set font based on height<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setFont(new Font(&quot;TimesRoman&quot;,Font.BOLD,h
- 2));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = inText;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Read input text, if null use default<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (s == null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = &quot;
The Java ScrollText Applet at work.&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;separated =&nbsp;&nbsp;new char
[s.length()];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s.getChars(0,s.length(),separated,0);
<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
There are certainly many times when it is appropriate to use classes
defined as applets within an application. It is important to be
aware of all resources available in the browser that the application
has to mimic or avoid.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Tip</B></TD></TR>
<TR><TD WIDTH=583>
<BLOCKQUOTE>
Many existing applets can also be turned into applications. To do this, create a <TT><FONT FACE="Courier">main()</FONT></TT> method for the applet. Within the <TT><FONT FACE="Courier">main()</FONT></TT> method, create a frame for your application and then 
instantiate the applet. Because the applet is not running in the normal applet environment, you must make explicit calls to <TT><FONT FACE="Courier">init()</FONT></TT> and <TT><FONT FACE="Courier">start()</FONT></TT> within <TT><FONT 
FACE="Courier">main()</FONT></TT>. Finally, place the applet in a frame and display the frame. Because you are using the <TT><FONT FACE="Courier">Frame</FONT></TT> class, be sure to import <TT><FONT FACE="Courier">java.awt.Frame</FONT></TT>.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="AdditionalNeeds"><B>Additional Needs</B></A></H3>
<P>
Up to this point the focus of the chapter has been on the organization
and functionality of the application, but not its general appearance.
Currently, the application appears as shown in Figure 17.1. This
section reviews ways of improving the visual appeal of the application
without changing the functionality.
<P>
<A HREF="f17-1.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f17-1.gif" ><B>Figure 17.1 : </B><I>The SumGraph application before formatting.</I></A>
<H4><B>Visual Enhancements</B></H4>
<P>
Improving an application's appearance generally does not involve
a lot of code. Small coding changes can have large effects. However,
changing the appearance can involve a lot of time. You may want
to try several different changes to note their effects and experiment
with different layouts and fonts until you find a combination
that is visually pleasing.
<P>
To begin, change the layout of the frame to <TT><FONT FACE="Courier">GridLayout</FONT></TT>
instead of the default border layout. The grid is created with
one column and three rows. There is only one column, so don't
worry about the spacing between the columns. However, it is reasonable
to set some space between the rows. The command is
<BLOCKQUOTE>
<TT><FONT FACE="Courier">f.setLayout(new GridLayout(3,1,0,10));</FONT></TT>
</BLOCKQUOTE>
<P>
This results in a screen with three sections of the same size.
The layout must be set before you start adding objects to the
display.
<P>
The <TT><FONT FACE="Courier">ScrollText</FONT></TT> applet is
placed in the top section, the data entry field in the middle
section, and the results in the bottom section. You can do this
by explicitly stating where each will go, but it is easier to
simply add them in this order. To use the <TT><FONT FACE="Courier">GridLayout()</FONT></TT>
method, import the class <TT><FONT FACE="Courier">java.awt.GridLayout</FONT></TT>.
<P>
Next, modify the font for the frame to make the <TT><FONT FACE="Courier">SumLabel</FONT></TT>
and the <TT><FONT FACE="Courier">TextField</FONT></TT> display
larger. Set the font for the frame to a larger font size, say
16 points. The command is
<BLOCKQUOTE>
<TT><FONT FACE="Courier">f.setFont(new Font(&quot;TimesRoman&quot;,Font.BOLD,16));</FONT></TT>
</BLOCKQUOTE>
<P>
Put this line before the line that creates the objects so that
the new font will be applied to the objects. To use the <TT><FONT FACE="Courier">setFont</FONT></TT>
method, import the <TT><FONT FACE="Courier">java.awt.Font</FONT></TT>
class.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Tip</B></TD></TR>
<TR><TD WIDTH=585>
<BLOCKQUOTE>
You may have realized that a large portion of formatting the screen lies in importing the correct classes to affect the display the way you want. It should be noted here that <TT><FONT FACE="Courier">TimesRoman</FONT></TT> is one of several fonts known to 
Java. The supported fonts vary from platform to platform. You can get a <TT><FONT FACE="Courier">String</FONT></TT> array of the fonts supported on your platform using the following command:
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">String[] fonts= Toolkit.getDefaultToolkit().getFontList()</FONT></TT>
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Now that the fonts are easier to read, the next change is to modify
the <TT><FONT FACE="Courier">TextField</FONT></TT> so that it
appears as a single-line entry. Currently, the <TT><FONT FACE="Courier">TextField</FONT></TT>
takes up the entire space allocated to it in the grid. To change
this, create a panel in the middle section of the layout. The
<TT><FONT FACE="Courier">TextField</FONT></TT> is placed on the
new panel, which in turn is placed in the grid. This requires
importing the class <TT><FONT FACE="Courier">java.awt.Panel</FONT></TT>
and making minor adjustments to <TT><FONT FACE="Courier">main()</FONT></TT>
as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Panel pl = new Panel();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Create panel for text field<BR>
f.add(pl);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Puts the panel for entry in the frame<BR>
pl.add(tf);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Puts the entry field in the panel</FONT></TT>
</BLOCKQUOTE>
<P>
These changes merely affect the display, not the ability to access
the <TT><FONT FACE="Courier">TextField</FONT></TT> object.
<P>
The results would look better if they were centered in the layout.
Do this by centering the <TT><FONT FACE="Courier">Label</FONT></TT>
in its grid component. Modify the <TT><FONT FACE="Courier">SumLabel</FONT></TT>
class to have the constructor set the alignment as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">super.setAlignment(Label.CENTER);</FONT></TT>
</BLOCKQUOTE>
<P>
Another feature to include in the application is a set of insets.
<I>Insets</I> are border areas of blank space that surround the
grid layout. To create an inset, override the <TT><FONT FACE="Courier">insets()</FONT></TT>
method for the <TT><FONT FACE="Courier">SumGraph</FONT></TT> class
with the following method:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Insets insets() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Insets(40,10,10,10);
<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
This provides an inset of 40 pixels at the top and 10 pixels on
the bottom and on each side. The application as it now appears
is shown in Figure 17.2.
<P>
<A HREF="f17-2.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f17-2.gif" ><B>Figure 17.2 : </B><I>The SumGraph application after formatting.</I></A>
<P>
Formatting and layout are important parts of application development
that you can do as part of the design before any of the application
has been implemented. With an object-oriented language such as
Java, the exact location of the display can be modified easily.
Therefore, it may be easier to delay some aspects of the layout
until the application has been created. This enables you to gain
a better understanding of the objects needed for the application
and the functionality desired.
<H4><B>Menus</B></H4>
<P>
The application as it currently exists fulfills the functionality
explicitly stated in the specification. However, there are some
general expectations about applications that you should consider.
<P>
Most users expect graphical applications to have a menu and an
explicit <TT><FONT FACE="Courier">Exit</FONT></TT> option. They
usually expect a <TT><FONT FACE="Courier">Help</FONT></TT> option
to give explicit help or state some additional information about
the program. They also expect a pop-up window to prompt them before
they write output to disk. This section and the following describe
how to add these features to the example application.
<P>
To add a menu to the application, create an instance of the <TT><FONT FACE="Courier">MenuBar</FONT></TT>
object from the Java API and use the <TT><FONT FACE="Courier">setMenuBar()</FONT></TT>
method in the <TT><FONT FACE="Courier">Frame</FONT></TT> class
to attach the menu bar to the frame. This is done in the constructor
for the <TT><FONT FACE="Courier">SumGraph</FONT></TT> class. It
is also necessary to add menu items to the menu. You can create
a separate method to add the items so that the constructor does
not get too complex. Our constructor now appears as
<BLOCKQUOTE>
<TT><FONT FACE="Courier">SumGraph() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(&quot;Sum&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InitializeMenu();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setMenuBar(mbar);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Tip</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
It is good practice to use a separate method to create your menu and call the method from the constructor. This keeps your constructor short and easy to understand.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
In the <TT><FONT FACE="Courier">InitializeMenu()</FONT></TT> method,
two items need to be added to the menu bar. Each is an instance
of the class <TT><FONT FACE="Courier">Menu</FONT></TT>: the File
menu, with the Save and Quit items; and the Help menu, with the
About item.
<P>
To create the menus, the application should import three new classes,
<TT><FONT FACE="Courier">java.awt.MenuBar</FONT></TT>, <TT><FONT FACE="Courier">java.awt.Menu</FONT></TT>,
and <TT><FONT FACE="Courier">java.awt.MenuItem</FONT></TT>. The
<TT><FONT FACE="Courier">InitializeMenu()</FONT></TT> method is
created as private because no other class needs to initiate the
menu for the application. The code for the method follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">// Creates the menu and attaches it to
the MenuBar<BR>
private void InitializeMenu()<BR>
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mbar = new MenuBar();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Menu m = new Menu(&quot;File&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new MenuItem(&quot;Save&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.addSeparator();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new MenuItem(&quot;Quit&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mbar.add(m);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m = new Menu(&quot;Help&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new MenuItem(&quot;About...&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mbar.add(m);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
So, if you add these methods and recompile the application, the
menu will appear on your application with all the items needed.
However, the menu is not functional yet; you must associate a
response with each of the items using the event handler. Check
for an event target that is an instance of <TT><FONT FACE="Courier">MenuItem</FONT></TT>;
then determine which menu item triggered the event and respond
accordingly. Here is the expanded <TT><FONT FACE="Courier">handleEvent()</FONT></TT>
method:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean handleEvent(Event evt)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Allow for the closing of the window<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.id == Event.WINDOW_DESTROY)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeSum();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Allow
for new values being entered in input field<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.target instanceof TextField &amp;&amp;<BR>
evt.id == Event.ACTION_EVENT) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sl.updateSum(((TextField)evt.target).getText());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Allow
for reaction to menu items<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if(evt.target instanceof MenuItem) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.arg.equals(&quot;Save&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeSum();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Quit&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeSum();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;About...&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AboutBox
ab = new AboutBox(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ab.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
super.handleEvent(evt);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
Now the menu is just about done. You still need to define the
<TT><FONT FACE="Courier">AboutBox</FONT></TT> class that is used
to create the About box displayed by the About menu item. This
class is a dialog box that the user must close after viewing.
The next section defines this class.
<H4><B>Dialog Boxes</B></H4>
<P>
<I>Dialog boxes</I> are simple windows that provide information
to the user or ask easy questions. Dialog boxes are also appropriate
for accessing files in the file system. Java provides a class,
<TT><FONT FACE="Courier">FileDialog</FONT></TT>, for that purpose.
In this section, a read-only dialog box is added to provide information
about the application.
<P>
Dialog boxes can be <I>modal</I>. A modal dialog box does not
allow input to any other windows in the application while that
dialog box is present. This type of dialog box is useful when
you want the user to verify a particular operation before continuing
with that operation.
<P>
In this section you will create a class to provide a basic dialog
box. This dialog box displays a short description of the application
and remains on the screen until the user presses the OK button
on the dialog box. It will be modal, so the user will not be able
to enter any additional numbers until the dialog box is closed.
<P>
The Java API provides a basic dialog box class that you will extend
to create the dialog box. The new class is named <TT><FONT FACE="Courier">AboutBox</FONT></TT>
because it will be displayed from the <TT><FONT FACE="Courier">About</FONT></TT>
menu item.
<P>
The current frame is passed to the constructor of the new class.
The constructor in turn passes the frame to the constructor of
the <TT><FONT FACE="Courier">Dialog</FONT></TT> class. The frame
is used as the parent for the dialog box. In addition, the constructor
for the <TT><FONT FACE="Courier">Dialog</FONT></TT> class takes
a string that is used as the title of the dialog box. The final
parameter is a boolean value set to <TT><FONT FACE="Courier">true</FONT></TT>.
This indicates that the dialog box is modal and should prevent
input to other windows. So far, the code for the dialog box appears
as
<BLOCKQUOTE>
<TT><FONT FACE="Courier">class AboutBox extends Dialog<BR>
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public AboutBox(Frame parent)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(parent,
&quot;About Dialog&quot;, true);</FONT></TT>
</BLOCKQUOTE>
<P>
Next, display fields are added to the dialog box. <TT><FONT FACE="Courier">BorderLayout</FONT></TT>
is used for the dialog box, so the application must import <TT><FONT FACE="Courier">java.awt.BorderLayout</FONT></TT>.
After setting the layout, the About box adds a <TT><FONT FACE="Courier">Label</FONT></TT>
containing text that describes the program. To create a more generic
About box, you can pass the text to the constructor as a parameter.
<P>
The About box also must have an OK button so the user can close
the window. If the OK button is added directly to the window in
the South position, it will spread across the entire bottom of
the window. To prevent this, create a new panel to hold the button.
This is similar to what you did for the <TT><FONT FACE="Courier">TextField</FONT></TT>
object in the main display window. The About box adds the OK button
to the new panel and then adds the panel to the South position
in the dialog box.
<P>
The last line in the constructor resizes the dialog box so that
it is somewhat smaller than the main window. The constructor does
not actually display the box. The caller is expected to use the
<TT><FONT FACE="Courier">show()</FONT></TT> method to display
the dialog box on the screen. The remaining code for the constructor
is
<BLOCKQUOTE>
<TT><FONT FACE="Courier">setLayout(new BorderLayout());<BR>
add(&quot;Center&quot;,new Label(&quot;Interactive Summation Program&quot;,Label.CENTER));
<BR>
Panel pp = new Panel();<BR>
pp.add(new Button(&quot;OK&quot;));<BR>
add(&quot;South&quot;,pp);<BR>
resize(300,200);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
One more method is needed for the dialog box to work: The class
must handle the action that occurs when the user presses the OK
button. To account for this, add an <TT><FONT FACE="Courier">action</FONT></TT>
method to the <TT><FONT FACE="Courier">AboutBox</FONT></TT> class.
This method simply checks that the argument for the event is the
OK button and then closes the dialog box. The code appears as
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean action(Event evt, Object
arg)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&quot;OK&quot;.equals(arg))<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The box is closed using the <TT><FONT FACE="Courier">dispose()</FONT></TT>
method available to all dialog boxes and windows. This method
closes the dialog box and releases its resource, which can then
be collected by Java's garbage-collection mechanism.
<H2><A NAME="TheFinishedStandaloneApplication"><B><FONT SIZE=5 COLOR=#Ff0000>The
Finished Stand-alone Application</FONT></B></A></H2>
<P>
Sections of the <TT><FONT FACE="Courier">SumGraph</FONT></TT>
application have been mentioned throughout the discussion of different
topics in this chapter. Listing 17.1 is the code for the complete
application. The long list of imports could be shortened by importing
<TT><FONT FACE="Courier">java.awt.*</FONT></TT>. The individual
list is shown to demonstrate the many different classes that are
required to create even a simple application.
<HR>
<BLOCKQUOTE>
<B>Listing 17.1. The enhanced </B><TT><B><FONT FACE="Courier">SumGraph</FONT></B></TT><B>
application.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* Peter Norton's Guide to Java Programming<BR>
&nbsp;* The SumGraph Application<BR>
&nbsp;* This application sums inputs and displays the result<BR>
&nbsp;* in a graphical interface. You can pass inputs from the
<BR>
&nbsp;* command line as arguments or enter them individually in
<BR>
&nbsp;* a popup window. The application makes use of the SumLave
<BR>
&nbsp;* object for displaying and storing the sum.<BR>
&nbsp;*/<BR>
<BR>
import java.lang.Integer;<BR>
import java.lang.String;<BR>
import java.awt.Label;<BR>
import java.awt.Frame;<BR>
import java.awt.Event;<BR>
import java.awt.TextField;<BR>
import java.io.RandomAccessFile;<BR>
import java.awt.GridLayout;<BR>
import java.awt.Font;<BR>
import java.awt.Insets;<BR>
import java.awt.Panel;<BR>
import java.awt.Menu;<BR>
import java.awt.MenuBar;<BR>
import java.awt.MenuItem;<BR>
import java.awt.Dialog;<BR>
import java.awt.Button;<BR>
import java.awt.BorderLayout;<BR>
<BR>
// Class to store a sum that is independent of the display mechanism
<BR>
class ASum {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int theSum;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public ASum() {theSum = 0;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Constructor sets instance var to 0<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void incSum(int toAdd) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theSum
= theSum + toAdd;&nbsp;&nbsp;&nbsp;// Add to instance variable
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public int getSum(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
theSum;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Return the value of the instance variable<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}<BR>
// Class used to display a Sum in as a Label<BR>
// This class makes use of ASum as an object to hold the sum<BR>
// The sum is created from an array of strings passed to the constructor
<BR>
class SumLabel extends Label {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected ASum theSum;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Create the initial sum from an
array of strings<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public SumLabel(String args[]) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
must go first in constructor<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
loopCounter;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
the current iteration<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theSum
= new ASum();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
the sum of the inputs<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(loopCounter=0;loopCounter&lt;args.length;loopCounter++)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theSum.incSum(Integer.parseInt(args[loopCounter]));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.setText(&quot;The
sum is &quot;+String.valueOf(theSum.getSum()));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.setAlignment(Label.CENTER);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Allow other classes to view the
sum, but not modify it<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public int getSum(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Return the value of the protected object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
theSum.getSum();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Allow other classes to update
the sum while also updating label<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void updateSum(String newVal)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theSum.incSum(Integer.parseInt(newVal));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.setText(&quot;The
sum is &quot;+String.valueOf(theSum.getSum()));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}<BR>
<BR>
// The main class for the application.<BR>
// This class extends the Frame class and sets up the menu bar
<BR>
// and events.<BR>
class SumGraph extends Frame {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static SumLabel sl;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private MenuBar mbar;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Constructor that creates frame
and menu<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SumGraph() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(&quot;Sum&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InitializeMenu();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setMenuBar(mbar);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Creates the menu and attaches
it to the MenuBar<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private void InitializeMenu()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mbar
= new MenuBar();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Menu
m = new Menu(&quot;File&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Save&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.addSeparator();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;Quit&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mbar.add(m);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m
= new Menu(&quot;Help&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m.add(new
MenuItem(&quot;About...&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mbar.add(m);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Main method used to start application
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String args[])
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SumGraph
f = new SumGraph();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Instantiate self<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.setLayout(new
GridLayout(3,1,0,10));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.setFont(new
Font(&quot;TimesRoman&quot;,Font.BOLD,16));<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Create new instances of needed objects<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sl
= new SumLabel(args);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Panel
pl = new Panel();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Create panel for text field<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TextField
tf = new TextField(&quot;0&quot;,8);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScrollText
st = new ScrollText();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;st.init(&quot;280&quot;,&quot;85&quot;,&quot;Sums
are fun !&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;st.start();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.add(st);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Puts the scrolling text in the frame<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.add(pl);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Puts the panel for entry in the frame<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.add(sl);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Puts the panel for sum in the frame<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pl.add(tf);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Puts the entry field in the panel<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.resize(300,
300);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Resizes the frame<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.show();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Displays the frame<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Insets insets() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
new Insets(40,10,10,10);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Write a sum contained in the object
sl to a file<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void writeSum(){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RandomAccessFile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SumFile;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SumFile
= new RandomAccessFile(&quot;SumResult.txt&quot;,&quot;rw&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SumFile.writeBytes(&quot;The
sum is &quot;+sl.getSum()+&quot;.\n&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SumFile.close();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
catch (java.io.IOException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Could
not write to SumResult file.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(e);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleEvent(Event
evt)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Allow
for new values being entered in input field<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.id == Event.WINDOW_DESTROY)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeSum();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Allow
for new values being entered in input field<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.target instanceof TextField &amp;&amp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evt.id
== Event.ACTION_EVENT) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sl.updateSum(((TextField)evt.target).getText());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Allow
for reaction to menu items<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if(evt.target instanceof MenuItem) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(evt.arg.equals(&quot;Save&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeSum();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;Quit&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeSum();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (evt.arg.equals(&quot;About...&quot;)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AboutBox
ab = new AboutBox(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ab.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
super.handleEvent(evt);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
}<BR>
// Class used to create an about box for the SumGraph application
<BR>
class AboutBox extends Dialog<BR>
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Constructor used to create window
including information<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public AboutBox(Frame parent)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(parent,
&quot;About Dialog&quot;, true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout(new
BorderLayout());<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;Center&quot;,new
Label(&quot;Interactive Summation Program&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Label.CENTER));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Panel
pp = new Panel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pp.add(new
Button(&quot;OK&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;South&quot;,pp);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resize(300,200);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Action handler used to close window
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean action(Event evt,
Object arg)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&quot;OK&quot;.equals(arg))
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Before you can compile the <TT><FONT FACE="Courier">SumGraph</FONT></TT>
application, you need to make the changes recommended for the
<TT><FONT FACE="Courier">ScrollText</FONT></TT> applet. The revised
<TT><FONT FACE="Courier">ScrollText</FONT></TT> applet with the
overloaded <TT><FONT FACE="Courier">init()</FONT></TT> method
can be used in applets and applications. The complete code for
the revised <TT><FONT FACE="Courier">ScrollText</FONT></TT> applet
is shown in Listing 17.2.
<HR>
<BLOCKQUOTE>
<B>Listing 17.2. The revised </B><TT><B><FONT FACE="Courier">ScrollText</FONT></B></TT><B>
applet.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.Graphics;<BR>
import java.awt.Font;<BR>
import java.awt.Frame;<BR>
<BR>
/**<BR>
&nbsp;* Peter Norton's Guide to Programming Java * The ScrollText
applet<BR>
&nbsp;* has been reworked so it can be used with applications
<BR>
&nbsp;* This object is used to scroll a text banner across the
screen<BR>
&nbsp;* and takes TEXT, WIDTH, and HEIGHT as parameters.<BR>
&nbsp;*/<BR>
<BR>
public class ScrollText extends java.applet.Applet implements
Runnable {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int h;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Height of applet in pixels<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int w;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Width of applet in Pixels<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char separated[];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Output string in array form<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String s = null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Input string containing display text<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String hs = null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Input string containing height<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String ws = null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Input string containing width<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread ScrollThread = null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Thread to control processing<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int speed=35;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Length of delay in milliseconds<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean threadSuspended = false;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int dist;<BR>
<BR>
//Init() method to allow parameter passing from an application
<BR>
public void init(String inWidth, String inHeight, String inText)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ws = inWidth;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hs = inHeight;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ws == null){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Read width as input, if not found use default<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w
= 150;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w
= Integer.parseInt(ws); // Convert input string to integer<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (hs == null){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Read height as input, if not found use default<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h
= 50;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h
= Integer.parseInt (hs); // Convert input string to integer<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resize(w,h);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Set font based on height<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setFont(new Font(&quot;TimesRoman&quot;,Font.BOLD,h-2));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = inText;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Read input text, if null use default<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (s == null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = &quot;
The Java ScrollText Applet at work.&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;separated =&nbsp;&nbsp;new char
[s.length()];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s.getChars(0,s.length(),separated,0);
<BR>
&nbsp;}<BR>
<BR>
/* Start new thread to run applet */<BR>
public void start() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(ScrollThread == null)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScrollThread =
new Thread(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScrollThread.start();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
<BR>
/* End thread containing applet */<BR>
public void stop() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScrollThread = null;<BR>
&nbsp;}<BR>
<BR>
// While applet is running pause then scroll text<BR>
public void run() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (ScrollThread != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {Thread.sleep(speed);} catch
(InterruptedException e){}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scroll();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScrollThread = null;<BR>
&nbsp;}<BR>
<BR>
// Scroll text by determining new location to draw text and redrawing
<BR>
synchronized void scroll () {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dist-;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Move string to left<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If string has disappeared to
the left, move back to right edge<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (dist + ((s.length()+1)*(h *5
/ 11)) == 0){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dist=w;<BR>
}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
}<BR>
<BR>
// Redraw string at given location<BR>
public void paint(Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawChars(separated, 0, s.length(),
dist,4 *h / 5);<BR>
&nbsp;}<BR>
<BR>
// Suspend thread when mouse is pushed, resume when pused again
<BR>
public boolean mouseDown(java.awt.Event evt, int x, int y) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (threadSuspended)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScrollThread.resume();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScrollThread.suspend();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;threadSuspended
= !threadSuspended;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Save the updated <TT><FONT FACE="Courier">ScrollText</FONT></TT>
applet to a file named <TT><FONT FACE="Courier">ScrollText.java</FONT></TT>
and run the Java compiler using the command
<BLOCKQUOTE>
<TT><FONT FACE="Courier">javac ScrollText.java</FONT></TT>
</BLOCKQUOTE>
<P>
After compiling the <TT><FONT FACE="Courier">ScrollText</FONT></TT>
applet, you can compile the <TT><FONT FACE="Courier">SumGraph</FONT></TT>
application. If you haven't already saved the <TT><FONT FACE="Courier">SumGraph</FONT></TT>
application to a file named <TT><FONT FACE="Courier">SumGraph.java</FONT></TT>,
do so now. Then you can run the Java compiler using the command
<BLOCKQUOTE>
<TT><FONT FACE="Courier">javac SumGraph.java</FONT></TT>
</BLOCKQUOTE>
<P>
Now you can run the <TT><FONT FACE="Courier">SumGraph</FONT></TT>
program by typing
<BLOCKQUOTE>
<TT><FONT FACE="Courier">java SumGraph</FONT></TT>
</BLOCKQUOTE>
<P>
You can also pass the <TT><FONT FACE="Courier">SumGraph</FONT></TT>
program a list of numbers to sum from the command line, such as
<BLOCKQUOTE>
<TT><FONT FACE="Courier">java SumGraph 25 30 45</FONT></TT>
</BLOCKQUOTE>
<P>
The program will save the final sum to a file named <TT><FONT FACE="Courier">SumResult.txt</FONT></TT>
in the directory where it runs.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Tip</B></TD></TR>
<TR><TD WIDTH=582>
<BLOCKQUOTE>
Testing a stand-alone application is very important. Follow the suggestions described in <A HREF="ch14.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch14.htm" >Chapter 14</A>  for testing applets to create a test plan for your stand-alone application.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="Summary"><B><FONT SIZE=5 COLOR=#Ff0000>Summary</FONT></B></A>
</H2>
<P>
Applications have many similarities to applets and some important
differences. Applications require a <TT><FONT FACE="Courier">main()</FONT></TT>
method. Applets do not. Applications have full access to the local
file system and can access native code. Applets loaded over the
network cannot access the client's file system in any way.
<P>
Although applets provide better security, applications are more
flexible and generally have better performance. This increased
flexibility and performance provides you with more options when
creating applications. Most applications access the local file
system and include graphical interfaces such as pop-up windows
and pull-down menus.
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch16.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch16.htm"><IMG SRC="pc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/index.htm"><IMG SRC="hb.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch18.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch18.htm"><IMG 
SRC="nc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>
<HR WIDTH="100%"></P>
<P>


</BODY>
</HTML>
