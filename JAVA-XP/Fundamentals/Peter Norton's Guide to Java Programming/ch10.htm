<HTML>

<HEAD>
   <TITLE>Chapter 10 -- The java.lang and java.applet Class
Libraries</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<!--Begin JavaScript roadmap code.  If editing downloaded HTML source, delete
 this portion.-->

<script language="JavaScript">
<!--

function TripodShowPopup()
{
   var bName=navigator.appName;
   var bVer=parseInt(navigator.appVersion);
   var now = new Date();
   var popupURL = "/adm/popup/roadmap.shtml?"+"member_name=er4ebus&path=peternortonjavaprograming&client_ip=200.190.100.218&ts=1015336791&ad_type=POPUP&category=net&id=d2a70db27cb216360fbb95e6ddefc8e6";
   var popupName = "TripodPopup";

   if (bName=="Netscape" && bVer<=3)
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=614,height=150');
   }
   else
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=604,height=135');
   }
   popup.location = popupURL;
}

if(window.parent==window)
{
   TripodShowPopup();
}

// -->
</script>

<script language="JavaScript1.2">
<!--

function changeOpenFunction()
{
   var original_window_open = window.open;
   function new_open_function(url, name, features, replace)
   {
      if(name != "TripodPopup")
         return original_window_open(url, name, features, replace);
   }
   window.open = new_open_function;
}
var bName = navigator.appName;

if(bName != "Netscape")
   changeOpenFunction();

// -->
</script>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#Ff0000>Chapter 10</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#Ff0000>The java.lang and java.applet Class
Libraries</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>

<UL>
<LI><A HREF="#ThejavaappletAppletClass" >The java.applet.Applet Class</A>
<LI><A HREF="#ThejavalangPackaeandItsClasses" >The java.lang Package and Its Classes</A>
<UL>
<LI><A HREF="#Boolean" >Boolean</A>
<LI><A HREF="#Character" >Character</A>
<LI><A HREF="#Class" >Class</A>
<LI><A HREF="#ClassLoader" >ClassLoader</A>
<LI><A HREF="#Compiler" >Compiler</A>
<LI><A HREF="#NumberFloatIntegerLong" >Number, Float, Integer, Long</A>
<LI><A HREF="#Math" >Math</A>
<LI><A HREF="#Object" >Object</A>
<LI><A HREF="#ProcessRuntimeSystem" >Process, Runtime, System</A>
<LI><A HREF="#SecurityManager" >SecurityManager</A>
<LI><A HREF="#String" >String</A>
<LI><A HREF="#StringBuffer" >StringBuffer</A>
<LI><A HREF="#Thread" >Thread</A>
<LI><A HREF="#ThreadGroup" >ThreadGroup</A>
<LI><A HREF="#Throwable" >Throwable</A>
</UL>
<LI><A HREF="#javalangExceptionClasses" >java.lang Exception Classes</A>
<LI><A HREF="#AnExampleofanExceptionfromjavalan" >An Example of an Exception from java.lang-exceptions</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
The previous chapter gives an overview of the Java API. This chapter
explores the <TT><FONT FACE="Courier">java.applet</FONT></TT>
and <TT><FONT FACE="Courier">java.lang</FONT></TT> packages. The
<TT><FONT FACE="Courier">Applet</FONT></TT> class library-<TT><FONT FACE="Courier">java.applet</FONT></TT>-controls
applets. The Java language class library-<TT><FONT FACE="Courier">java.lang</FONT></TT>-has
two main purposes: to provide functionality for primitive data
types and other Java structures and to provide exceptions.
<P>
Use this chapter as a guide to help locate more information and
to understand the breadth and power of the Java API.
<H2><A NAME="ThejavaappletAppletClass"><FONT SIZE=5 COLOR=#Ff0000>The
</FONT><TT><FONT SIZE=5 COLOR=#Ff0000 FACE="Courier">java.applet.Applet</FONT></TT><FONT SIZE=5 COLOR=#Ff0000>
Class</FONT></A></H2>
<P>
The <TT><FONT FACE="Courier">Applet</FONT></TT> class is used
to create, execute, and stop running applets. It is part of the
format and structure that enables applets to run. The <TT><FONT FACE="Courier">Applet</FONT></TT>
class also provides applet-specific methods.
<P>
Most of the code in an applet is no different from that in an
application. Both use <TT><FONT FACE="Courier">java.lang</FONT></TT>
classes, for example, to do arithmetic functions and string manipulations.
Some methods, however, are applet specific and require the presence
of a Java-enabled browser. For example, one of these methods is
used to retrieve and play an audio clip from across the Net. All
the <TT><FONT FACE="Courier">Applet</FONT></TT> methods are described
in the following sections.
<P>
More information on these methods can be found in the online API
documentation. Be sure to &quot;truth test&quot; the information
found in the documentation. Java is a young product, and its methods
and classes are still undergoing revision.
<H5><TT><FONT FACE="Courier">destroy()</FONT></TT></H5>
<BLOCKQUOTE>
The <TT><FONT FACE="Courier">destroy()</FONT></TT> method schedules
with the Java interpreter to notify the garbage collector to sweep
up unused resources.
</BLOCKQUOTE>
<H5><TT><FONT FACE="Courier">getAppletContext()</FONT></TT></H5>
<BLOCKQUOTE>
The <TT><FONT FACE="Courier">getAppletContext()</FONT></TT> method
returns the environment in which the applet is running. This is
usually the browser or applet viewer name. Listing 10.1 shows
the use of the <TT><FONT FACE="Courier">Applet.getAppletContext</FONT></TT>
method.<BR>
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<B>Listing 10.1. The </B><TT><B><FONT FACE="Courier">Applet.getAppletContext</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.applet.*;<BR>
</FONT></TT>import java.awt.*;<BR>
<BR>
public class AnApplet extends Applet {<BR>
&nbsp;&nbsp;&nbsp;AppletContext myAppletContext;<BR>
&nbsp;&nbsp;&nbsp;public void init() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//get context in which applet
is running<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myAppletContext = this.getAppletContext();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//disply status message using
context<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myAppletContext.showStatus(&quot;entering
init&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sleep(2000);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void start() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myAppletContext.showStatus(&quot;entering
start&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sleep(2000);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;Hello World!&quot;,
10,20);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sleep(2000);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void sleep (int period) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {Thread.sleep(period);}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch(InterruptedException
e) {}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H5><TT><FONT FACE="Courier">getAppletInfo()</FONT></TT></H5>
<BLOCKQUOTE>
The <TT><FONT FACE="Courier">getAppletInfo()</FONT></TT> method<I>
</I>returns a string that was passed to it. It is called when
the applet information is requested from the applet viewer. I
recommend overriding the default information, which is a null
value. Listing 10.2 is an example of overriding the <TT><FONT FACE="Courier">getAppletInfo</FONT></TT>
method of <TT><FONT FACE="Courier">java.applet.Applet</FONT></TT>.
<BR>
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<B>Listing 10.2. Overriding the </B><TT><B><FONT FACE="Courier">getAppletInfo</FONT></B></TT><B>
method of </B><TT><B><FONT FACE="Courier">java.applet.Applet</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.applet.*;<BR>
</FONT></TT>import java.awt.*;<BR>
public class AnApplet extends Applet implements Runnable {<BR>
&nbsp;&nbsp;&nbsp;Thread myThread;<BR>
&nbsp;&nbsp;&nbsp;public void start() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (myThread == null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread
= new Thread(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread.start();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void stop() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (myThread != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread.stop();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread
= null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void run() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public String getAppletInfo() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(&quot;Applet:getAppletInfo;&nbsp;&nbsp;Author:Mr.
X; Version:1.0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&Acirc;Copyright 1996, Macmillan&quot;);
<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void paint (Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(getAppletInfo(),10,20);
<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H5><TT><FONT FACE="Courier">getAudioClip(URL)</FONT></TT><FONT SIZE=2>
and </FONT><TT><FONT FACE="Courier">getAudioClip(URL, String)</FONT></TT>
</H5>
<BLOCKQUOTE>
The <TT><FONT FACE="Courier">getAudioClip(URL)</FONT></TT> and
<TT><FONT FACE="Courier">getAudioClip(URL, String)</FONT></TT>
methods get an audio clip. Listing 10.3 is an example of the use
of these methods. Be sure to read the notes about Java-recognized
and -playable audio clips.
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<B>Listing 10.3. Retrieving and playing audio clips from across
the Internet.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/*<BR>
</FONT></TT>&nbsp;&nbsp;&nbsp;This example will retrieve two audio
clips from the Internet.<BR>
&nbsp;&nbsp;&nbsp;One it will play in a loop, the other it will
play once.&nbsp;&nbsp;They<BR>
&nbsp;&nbsp;&nbsp;will play simultaneously.<BR>
<BR>
&nbsp;&nbsp;&nbsp;Notes:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java only understands how
to play .au files that are recorded<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;as 8Khz, 8bit, mono.&nbsp;&nbsp;Many
.au files on the web are 16 bit.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;These will not play, but no
error messages are generated.<BR>
<BR>
*/<BR>
<BR>
import java.applet.*;<BR>
import java.awt.*;<BR>
import java.net.*;<BR>
import java.awt.image.*;<BR>
<BR>
public class AnApplet extends Applet implements Runnable {<BR>
&nbsp;&nbsp;&nbsp;Thread myThread;<BR>
&nbsp;&nbsp;&nbsp;String aURL;<BR>
&nbsp;&nbsp;&nbsp;URL myURL;<BR>
&nbsp;&nbsp;&nbsp;AudioClip myAudioClip;<BR>
&nbsp;&nbsp;&nbsp;String errTxt = &quot;Initializing&quot;;<BR>
&nbsp;&nbsp;&nbsp;int x,y,ix;<BR>
&nbsp;&nbsp;&nbsp;MediaTracker mt;<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void start() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (myThread == null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread
= new Thread(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread.start();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void stop() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (myThread != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.showStatus(&quot;Applet
stopped&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread.stop();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread
= null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void run() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resize(400,400);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// set aURL to audioclip location
string<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aURL = &quot;http://www.geffen.com/beck/Sounds/paynomind.au&quot;;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateDisplay(&quot;running
new URL&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// generate URL object using
aURL location<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {myURL = new URL(aURL);}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch(MalformedURLException
e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateDisplay(&quot;new
URL Failure&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.stop();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateDisplay(&quot;running
getAudioClip&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myAudioClip = getAudioClip(myURL);&nbsp;&nbsp;&nbsp;//
actually retrieve audioclip<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (myAudioClip == null) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateDisplay(&quot;getAudioClip
returned null&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.stop();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateDisplay(&quot;Playing
&quot;+aURL);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myAudioClip.loop();&nbsp;&nbsp;//
play audioclip in endless loop<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateDisplay(&quot;audo clip
complete&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// location of new audio clip
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aURL = &quot;http://java.internetone.com/blimp.au&quot;;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateDisplay(&quot;running
new URL&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// generate URL object using
new location<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {myURL = new URL(aURL);}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch(MalformedURLException
e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateDisplay(&quot;new
URL Failure&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.stop();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateDisplay(&quot;running
play&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// play audio clip once.&nbsp;&nbsp;will
mix in with already playing clip<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;play(myURL);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateDisplay(&quot;play complete&quot;);
<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void updateDisplay(String txt) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errTxt = new String(txt);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.showStatus(errTxt);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void repaint(Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;paint(g);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void paint (Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ix+=20;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(errTxt,10,ix);
<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void sleep (int period) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {Thread.sleep(period);}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch(InterruptedException
e) {}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H5><TT><FONT FACE="Courier">getCodeBase()</FONT></TT></H5>
<BLOCKQUOTE>
The <TT><FONT FACE="Courier">getCodeBase()</FONT></TT> method<I>
</I>gets the base URL-that is, it returns the directory path in
which the applet was started. The code shown in Listing 10.4 uses
the <TT><FONT FACE="Courier">Applet.getCodeBase</FONT></TT> method
to return the <TT><FONT FACE="Courier">CodeBase</FONT></TT> or
directory in which the applet was started.
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<B>Listing 10.4. Using the </B><TT><B><FONT FACE="Courier">Applet.getCodeBase</FONT></B></TT><B>
method to return the </B><TT><B><FONT FACE="Courier">CodeBase</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.applet.*;<BR>
</FONT></TT>import java.awt.*;<BR>
<BR>
public class AnApplet extends Applet {<BR>
&nbsp;&nbsp;&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;This applet
is URL - &quot; + this.getCodeBase(), 10,20);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H5><TT><FONT FACE="Courier">getDocumentBase()</FONT></TT></H5>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">getDocumentBase</FONT></TT><I> </I>gets
the document URL. The code shown in Listing 10.5 uses the <TT><FONT FACE="Courier">Applet.getDocumentBase</FONT></TT>
method to print the document base for this applet to the screen.
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<B>Listing 10.5. Using the </B><TT><B><FONT FACE="Courier">Applet.getDocumentBase</FONT></B></TT><B>
method to print the document base.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.applet.*;<BR>
</FONT></TT>import java.awt.*;<BR>
<BR>
public class AnApplet extends Applet {<BR>
&nbsp;&nbsp;&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;This applet
is embedded in URL - &quot; + <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&Acirc;this.getDocumentBase(),
10,20);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H5><TT><FONT FACE="Courier">getImage(URL)</FONT></TT><FONT SIZE=2>
and </FONT><TT><FONT FACE="Courier">getImage(URL, String)</FONT></TT>
</H5>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">getImage</FONT></TT><I> </I>gets an image
retrieved from the URL argument location. Listing 10.6 demonstrates
the use of the <TT><FONT FACE="Courier">java.applet.Applet.getImage</FONT></TT>
method.
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<B>Listing 10.6. Using the </B><TT><B><FONT FACE="Courier">java.applet.Applet.getImage</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/*<BR>
</FONT></TT>&nbsp;&nbsp;&nbsp;This example retrieves a gif image
from the Internet and displays it<BR>
&nbsp;&nbsp;&nbsp;on the screen.&nbsp;&nbsp;Height and Width return
-1 until image has completely<BR>
&nbsp;&nbsp;&nbsp;arrived.<BR>
*/<BR>
<BR>
import java.applet.*;<BR>
import java.awt.*;<BR>
import java.net.*;<BR>
import java.awt.image.*;<BR>
<BR>
public class AnApplet extends Applet implements Runnable {<BR>
&nbsp;&nbsp;&nbsp;Thread myThread;<BR>
&nbsp;&nbsp;&nbsp;Image myImage;<BR>
&nbsp;&nbsp;&nbsp;URL myURL;<BR>
&nbsp;&nbsp;&nbsp;String errTxt = &quot;Initializing&quot;;<BR>
&nbsp;&nbsp;&nbsp;int x,y;<BR>
&nbsp;&nbsp;&nbsp;MediaTracker mt;<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void start() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (myThread == null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread
= new Thread(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread.start();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void stop() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (myThread != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread.stop();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread
= null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void run() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// location of image<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {myURL = new URL(&quot;http://www.tvp.com/vpttlb.gif&quot;);}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch(MalformedURLException
e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errTxt =
new String(&quot;new URL Failure&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.showStatus(errTxt);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.stop();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myImage = getImage(myURL);//
request retrieval of image<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (myImage == null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errTxt =
new String(&quot;getImage returned null&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.showStatus(errTxt);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.stop();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// create
MediaTracker object to monitor retrieval<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mt = new
MediaTracker(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mt.addImage(myImage,1);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// wait
for image to arrive<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {mt.waitForID(1);}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (InterruptedException
e) {}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x = myImage.getWidth(this);//
get image width<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y = myImage.getHeight(this);//
get image height<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((x !=
-1) &amp;&amp; (y != -1)) {// insure image is complete<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resize(x,y);//
resize screen to size of image<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (myImage != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawImage(myImage,10,20,this);//
draw image on screen<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(errTxt,10,20);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void sleep (int period) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {Thread.sleep(period);}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch(InterruptedException
e) {}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H5><TT><FONT FACE="Courier">getParameter(String)</FONT></TT><FONT SIZE=2>
and </FONT><TT><FONT FACE="Courier">getParameterInfo()</FONT></TT>
</H5>
<BLOCKQUOTE>
The <TT><FONT FACE="Courier">getParameter()</FONT></TT> method
gets a parameter or an array of strings describing the applet.
This information should be overridden in applets so that other
applets can access the specific information. Listing 10.7 demonstrates
the use of the <TT><FONT FACE="Courier">getParameterInfo</FONT></TT>
method from <TT><FONT FACE="Courier">java.applet.Applet</FONT></TT>.
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<B>Listing 10.7. Using the </B><TT><B><FONT FACE="Courier">getParameterInfo</FONT></B></TT><B>
method from </B><TT><B><FONT FACE="Courier">java.applet.Applet</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/*<BR>
</FONT></TT>&nbsp;&nbsp;&nbsp;This example can make use of several
http parameters.&nbsp;&nbsp;getParameterInfo<BR>
&nbsp;&nbsp;&nbsp;is defined so that if an application queries
this applet, it can<BR>
&nbsp;&nbsp;&nbsp;find out what the parameters are.&nbsp;&nbsp;The
parameters that this applet<BR>
&nbsp;&nbsp;&nbsp;accepts are window size (height and width) and
a URL of an audioclip<BR>
&nbsp;&nbsp;&nbsp;to play.<BR>
<BR>
&nbsp;&nbsp;&nbsp;Note:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getParameterInfo is similar
to getAppletInfo in that<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;it is a method you should
override in your class to return the<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;appropriate information to
others that wish to query your applet.<BR>
*/<BR>
<BR>
import java.applet.*;<BR>
import java.awt.*;<BR>
import java.net.*;<BR>
<BR>
public class AnApplet extends Applet implements Runnable {<BR>
&nbsp;&nbsp;&nbsp;Thread myThread;<BR>
&nbsp;&nbsp;&nbsp;int height, width;<BR>
&nbsp;&nbsp;&nbsp;String param, strURL;<BR>
&nbsp;&nbsp;&nbsp;URL myURL;<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void init() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height = 200;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width = 400;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strURL = &quot;http://www.tvp.com/test/test.au&quot;;
<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void start() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (myThread == null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread
= new Thread(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread.start();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void stop() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (myThread != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread.stop();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread
= null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void run() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;param = getParameter(&quot;width&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (param != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width =
Integer.parseInt(param);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;param = getParameter(&quot;height&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (param != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height =
Integer.parseInt(param);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;param = getParameter(&quot;URL&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (param != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strURL =
param;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resize(width,height);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {myURL = new URL(strURL);}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch(MalformedURLException
e){}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;play(myURL);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public String[][] getParameterInfo() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String paramInfo[][] = {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &quot;height&quot;,
&quot;int&quot;, &quot;resize to height pixels&quot; },<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &quot;width&quot;,
&quot;int&quot;, &quot;resize to width pixels&quot; },<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &quot;URL&quot;,
&quot;URL&quot;, &quot;play audoclip located at URL&quot; }<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(paramInfo);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void paint (Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;now playing:
&quot;+strURL,10,20);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
After you compile the applet source code, you will need to create
an HTML document to view the applet, such as the following sample
document:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;HTML&gt;<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt; The Audio Player Applet &lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
&lt;BODY&gt;<BR>
&lt;APPLET CODE=&quot;AnApplet&quot; width=300 height=300&gt;
<BR>
&lt;PARAM NAME=&quot;width&quot; VALUE=&quot;200&quot;&gt;<BR>
&lt;PARAM NAME=&quot;height&quot; VALUE=&quot;200&quot;&gt;<BR>
&lt;PARAM NAME=&quot;URL&quot; VALUE=&quot;http://tvp.com/hello.au&quot;&gt;
<BR>
&lt;/APPLET&gt;<BR>
&lt;/BODY&gt;<BR>
&lt;/HTML&gt;<BR>
</FONT></TT>
</BLOCKQUOTE>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
To hear an actual sound file play on your system, you must specify a valid value for the URL parameter. Passing parameters to applets is explored in <A HREF="ch15.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch15.htm" >Chapter 15</A>, &quot;Creating Java-Powered Web Presentations with Applets.&quot;
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H5><TT><FONT FACE="Courier">init()</FONT></TT></H5>
<BLOCKQUOTE>
The <TT><FONT FACE="Courier">init()</FONT></TT> method<I> </I>initializes
the applet. This method is described in detail in <A HREF="ch7.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch7.htm" >Chapter 7</A>,
&quot;Building Objects.&quot; Most of the examples in this chapter
demonstrate its use as well. This method normally should be overridden
in code, which allows you to specify precisely how the applet
will be ini- tialized.
</BLOCKQUOTE>
<H5><TT><FONT FACE="Courier">play(URL)</FONT></TT><FONT SIZE=2>
and </FONT><TT><FONT FACE="Courier">play(URL, String)</FONT></TT>
</H5>
<BLOCKQUOTE>
The <TT><FONT FACE="Courier">play()</FONT></TT> method<I> </I>plays
an audio clip retrieved by <TT><FONT FACE="Courier">getAudioClip</FONT></TT>.
See Listing 10.3 for an example of the use of <TT><FONT FACE="Courier">play</FONT></TT><I>.</I>
</BLOCKQUOTE>
<H5><TT><FONT FACE="Courier">resize(int, int)</FONT></TT><FONT SIZE=2>
and </FONT><TT><FONT FACE="Courier">resize(Dimension)</FONT></TT>
</H5>
<BLOCKQUOTE>
The <TT><FONT FACE="Courier">resize()</FONT></TT> method<I> </I>resizes
an applet. The dimensions are in pixels. Listing 10.8 is an example
of <TT><FONT FACE="Courier">resize</FONT></TT>.
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<B>Listing 10.8. Using the </B><TT><B><FONT FACE="Courier">resize</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/*<BR>
</FONT></TT>&nbsp;&nbsp;&nbsp;This applet uses the Applet.resize
method to resize the applet<BR>
&nbsp;&nbsp;&nbsp;window to different sizes.&nbsp;&nbsp;The first
time it uses int,int as<BR>
&nbsp;&nbsp;&nbsp;parameters, the second time it uses a dimension
object as a parameter.<BR>
<BR>
*/<BR>
<BR>
import java.applet.*;<BR>
import java.awt.*;<BR>
<BR>
public class AnApplet extends Applet implements Runnable {<BR>
&nbsp;&nbsp;&nbsp;int x,y;<BR>
&nbsp;&nbsp;&nbsp;Dimension d;<BR>
&nbsp;&nbsp;&nbsp;Thread myThread;<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void start() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (myThread == null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread
= new Thread(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread.start();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void stop() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (myThread != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread.stop();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread
= null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void run() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x = 10;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y = 20;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sleep(2000);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.resize(300,300);&nbsp;&nbsp;&nbsp;&nbsp;//
resize(int,int)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x = 10;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y = 40;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sleep(2000);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d = new Dimension();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.width = 200;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.height = 800;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.resize(d);&nbsp;&nbsp;&nbsp;&nbsp;//
resize(Dimension)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x = 10;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y = 60;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;Hello World!
- &quot; + x + &quot;,&quot; + y, x,y);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void sleep (int period) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {Thread.sleep(period);}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch(InterruptedException
e) {}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H5><TT><FONT FACE="Courier">setStub(AppletStub)</FONT></TT></H5>
<BLOCKQUOTE>
The <TT><FONT FACE="Courier">setStub()</FONT></TT> method sets
the applet stub. Generally, this function is performed automatically
by the system and you will not need to perform this function in
your code.
</BLOCKQUOTE>
<H5><TT><FONT FACE="Courier">showStatus(String)</FONT></TT></H5>
<BLOCKQUOTE>
The <TT><FONT FACE="Courier">showStatus()</FONT></TT> method shows
a status message in the applet's context. For example, in Netscape
the status message shows up in the status area at the bottom of
the browser window. See Listing 10.3 for an example of <TT><FONT FACE="Courier">showStatus</FONT></TT>.
</BLOCKQUOTE>
<H5><TT><FONT FACE="Courier">start()</FONT></TT><FONT SIZE=2>
and </FONT><TT><FONT FACE="Courier">stop()</FONT></TT></H5>
<BLOCKQUOTE>
The <TT><FONT FACE="Courier">start()</FONT></TT> method starts
the applet and the <TT><FONT FACE="Courier">stop()</FONT></TT>
method<I> </I>stops the applet execution. (These methods are discussed
in <A HREF="ch7.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch7.htm" >Chapter 7</A>.) The online documentation
on <TT><FONT FACE="Courier">start</FONT></TT><I>,</I> as well
as that on<I> </I><TT><FONT FACE="Courier">stop</FONT></TT> and
<TT><FONT FACE="Courier">destroy</FONT></TT><I>,</I> is misleading.
It states that it is not necessary to call these methods explicitly.
I have had more predictable results when these methods <I>are</I>
called explicitly. See the listings throughout this chapter for
examples of the use of the <TT><FONT FACE="Courier">start</FONT></TT>
and <TT><FONT FACE="Courier">stop</FONT></TT> methods.
</BLOCKQUOTE>
<H5><TT><FONT FACE="Courier">isActive()</FONT></TT></H5>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">isActive()</FONT></TT><I> </I>returns
<TT><FONT FACE="Courier">true</FONT></TT> if the applet is active.
The status of the method is <TT><FONT FACE="Courier">true</FONT></TT>
immediately before <TT><FONT FACE="Courier">start</FONT></TT>
is executed. See Listing 10.9 for a demonstration of the use of
<TT><FONT FACE="Courier">isActive()</FONT></TT>.
</BLOCKQUOTE>
<HR>
<BLOCKQUOTE>
<B>Listing 10.9. </B><TT><B><FONT FACE="Courier">isActive()</FONT></B></TT><B>
displays the boolean value of whether the applet is active.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.applet.*;<BR>
</FONT></TT>import java.awt.*;<BR>
<BR>
public class AnApplet extends Applet {<BR>
&nbsp;&nbsp;&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;thisApplet
is active = &quot; + this.isActive(), 10,20);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H2><A NAME="ThejavalangPackaeandItsClasses"><FONT SIZE=5 COLOR=#Ff0000>The
</FONT><TT><FONT SIZE=5 COLOR=#Ff0000 FACE="Courier">java.lang</FONT></TT><FONT SIZE=5 COLOR=#Ff0000>
Package and Its Classes</FONT></A></H2>
<P>
The <TT><FONT FACE="Courier">java.lang</FONT></TT> package is
so important that it would be just about impossible to do anything
in Java without it. This is why it is imported automatically into
all applets and applications at compile time. You never need to
explicitly import <TT><FONT FACE="Courier">java.lang</FONT></TT><I>.</I>
The following sections include information about all the first-level
classes and a brief description of each. More detailed information
about each class is available in the online documentation.
<H3><A NAME="Boolean"><TT><FONT SIZE=4 FACE="Courier">Boolean</FONT></TT></A>
</H3>
<P>
Java's utility classes work with objects only when those objects
are used as arguments. However, in Java, booleans are <I>not</I>
objects. The <TT><FONT FACE="Courier">Boolean</FONT></TT> class
provides a format to &quot;wrap around&quot; boolean data values
to make them acceptable to Java utility classes. This process
is referred to as an <I>object wrapper</I>.
<P>
Here is an example of a method to convert strings to booleans:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Boolean myBool = Boolean.valueOf(&quot;True&quot;);&nbsp;&nbsp;&nbsp;&nbsp;//convert
string to Boolean</FONT></TT>
</BLOCKQUOTE>
<P>
This declares a new <TT><FONT FACE="Courier">Boolean</FONT></TT>
variable and sets it to the boolean value represented by the string
<TT><FONT FACE="Courier">&quot;True&quot;</FONT></TT>. Note two
things about this line: First, the variable <TT><FONT FACE="Courier">myBool</FONT></TT>
is declared to be of type Boolean as opposed to type boolean;
second, the <TT><FONT FACE="Courier">Boolean</FONT></TT> class
is called directly on the right-hand side of the assignment operator.
This can be done when a method is needed without having or needing
a corresponding object declared in the program code.
<P>
Here is another method that does the opposite: It converts a <TT><FONT FACE="Courier">Boolean</FONT></TT>
variable to a string:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">System.out.println(&quot;myBool = &quot;
+ myBool.toString(); //convert Boolean to string</FONT></TT>
</BLOCKQUOTE>
<P>
<TT><FONT FACE="Courier">Boolean</FONT></TT> is a simple class
with a limited set of methods. These are probably the two most
likely to be used by most programmers.
<H3><A NAME="Character"><TT><FONT SIZE=4 FACE="Courier">Character</FONT></TT></A>
</H3>
<P>
The <TT><FONT FACE="Courier">Character</FONT></TT> class works
as an object wrapper for characters in the same way that the <TT><FONT FACE="Courier">Boolean</FONT></TT>
class wraps booleans. There are more methods available for this
class than for <TT><FONT FACE="Courier">Boolean</FONT></TT>.
<P>
Here is an example of the method used to convert characters to
integers of any specified radix:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">myInt = Character.digit('b',16);&nbsp;&nbsp;//convert
Character to int in specified radix</FONT></TT>
</BLOCKQUOTE>
<P>
Because <TT><FONT FACE="Courier">b</FONT></TT> is the hexadecimal
value for 11, the previous example assigns <TT><FONT FACE="Courier">myInt</FONT></TT>
the value <TT><FONT FACE="Courier">11</FONT></TT>.
<P>
Here are examples of other methods in class <TT><FONT FACE="Courier">Character</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">myString = myChar.toString();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
//convert myChar to String<BR>
</FONT></TT>if (Character.isLowerCase(myChar))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//test
if char is lowercase<BR>
&nbsp;&nbsp;&nbsp;myChar = Character.toUpperCase(myChar);&nbsp;&nbsp;&nbsp;&nbsp;//convert
to uppercase<BR>
if (Character.isUpperCase(myChar))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//test
if char is uppercase<BR>
&nbsp;&nbsp;&nbsp;myChar = Character.toLowerCase(myChar);&nbsp;&nbsp;&nbsp;&nbsp;//convert
to lowercase<BR>
if (Character.isSpace(myCharArray[i]))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//test
if char is white space<BR>
<TT><FONT 
FACE="Courier">&nbsp;&nbsp;&nbsp;I++;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;//go
on to next character</FONT></TT>
</BLOCKQUOTE>
<H3><A NAME="Class"><TT><FONT SIZE=4 FACE="Courier">Class</FONT></TT></A>
</H3>
<P>
The <TT><FONT FACE="Courier">Class</FONT></TT> class contains
subclasses that return runtime information about classes. Each
class instance automatically has <TT><FONT FACE="Courier">Class</FONT></TT>
descriptor objects associated with it.
<P>
Here are examples of methods for determining class names and functions:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">System.out.println(&quot;Class name =
&quot; + myClass.getName());&nbsp;&nbsp;&nbsp;&nbsp;//return class
name<BR>
</FONT></TT>&nbsp;&nbsp;&nbsp;&nbsp;//return class name with &quot;class&quot;
or &quot;interface&quot; prependedSystem.out.println(&quot;Class
type/name = &quot; + myClass.toString());<BR>
//get superclass of this class<BR>
mySuperClass = myClass.getSuperclass();<BR>
//test if class is an interface or not<BR>
if (myClass.isInterface() == &quot;true&quot;)<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot;This object is an interface&quot;);
<BR>
else<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot;This object is a class&quot;);
<BR>
//return all interfaces associated with this class<BR>
myClassArray = myClass.getInterfaces();
</BLOCKQUOTE>
<H3><A NAME="ClassLoader"><TT><FONT SIZE=4 FACE="Courier">ClassLoader</FONT></TT></A>
</H3>
<P>
The <TT><FONT FACE="Courier">ClassLoader</FONT></TT> class overrides
the default structure of Java when loading in classes. The default
is defined by the <TT><FONT FACE="Courier">CLASSPATH</FONT></TT>
environment variable and is platform dependent. <TT><FONT FACE="Courier">ClassLoader</FONT></TT>
requests that files and classes be loaded from remote areas such
as across the network. It also contains methods for interpreting
foreign classes created by <TT><FONT FACE="Courier">defineClass()</FONT></TT>
to be loaded as regular Java classes. <TT><FONT FACE="Courier">ClassLoader</FONT></TT><I>
</I>is an abstract method and is not called if the default mechanisms
are to be followed. This class is used mainly by Java interpreters
and debuggers.
<H3><A NAME="Compiler"><TT><FONT SIZE=4 FACE="Courier">Compiler</FONT></TT></A>
</H3>
<P>
Java uses the <TT><FONT FACE="Courier">Compiler</FONT></TT> class
at program compile time. This class includes the following methods:
<P>
<TT><FONT FACE="Courier">command(Object)<BR>
compileClass(Class)<BR>
compileClasses(String)<BR>
disable()<BR>
enable()</FONT></TT>
<P>
The Java compiler invokes these methods when you compile a Java
program.
<H3><A NAME="NumberFloatIntegerLong"><TT><FONT SIZE=4 FACE="Courier">Number</FONT></TT><FONT SIZE=4>,
</FONT><TT><FONT SIZE=4 FACE="Courier">Float</FONT></TT><FONT SIZE=4>,
</FONT><TT><FONT SIZE=4 FACE="Courier">Integer</FONT></TT><FONT SIZE=4>,
</FONT><TT><FONT SIZE=4 FACE="Courier">Long</FONT></TT></A></H3>
<P>
<TT><FONT FACE="Courier">Number</FONT></TT> is an abstract superclass
for all number classes. It includes the <TT><FONT FACE="Courier">Integer</FONT></TT>,
<TT><FONT FACE="Courier">Long</FONT></TT>, <TT><FONT FACE="Courier">Float</FONT></TT>,
and <TT><FONT FACE="Courier">Double</FONT></TT> number classes.
<TT><FONT FACE="Courier">Number</FONT></TT> contains the basic
template methods for converting an arbitrary number into an instance
of <TT><FONT FACE="Courier">Integer</FONT></TT>, <TT><FONT FACE="Courier">Long</FONT></TT>,
<TT><FONT FACE="Courier">Float</FONT></TT>, or <TT><FONT FACE="Courier">Double</FONT></TT>.
The primitive number classes are all based on this class.
<P>
<TT><FONT FACE="Courier">Float</FONT></TT>, <TT><FONT FACE="Courier">Integer</FONT></TT>,
<TT><FONT FACE="Courier">Double</FONT></TT>, and <TT><FONT FACE="Courier">Long</FONT></TT>
are all object wrappers used to make their respective data types
acceptable to operations that require objects. All these data
types contain basic methods for converting the corresponding primitive
types to and from these classes. They also contain methods for
converting between numeric data types as well as for converting
to and from <TT><FONT FACE="Courier">String</FONT></TT> types.
The <TT><FONT FACE="Courier">String</FONT></TT> type is useful
for accepting text input of numbers and being able to easily convert
the string to a number for processing.
<P>
Here are several examples of the various operations available
for these data types:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class MyMain {<BR>
</FONT></TT>&nbsp;&nbsp;&nbsp;public static void main (String
args[]) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer myInteger;&nbsp;&nbsp;&nbsp;&nbsp;//declare
variables<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Double myDouble;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Float myFloat;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Long myLong;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Number myNumber;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String myString;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Integer constructor<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myInteger = new Integer(37);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Double constructor; conversion
Integer to int<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myDouble = new Double((double)myInteger.intValue());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//convert Double to string
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myString = myDouble.toString();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLong = Long.valueOf(myString);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(myLong);
<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<P>
Many of the methods associated with these data types may seem
extraneous. After all, why provide a method to convert an integer
to a string when this is done automatically when using the <TT><FONT FACE="Courier">+</FONT></TT>
operator in conjunction with strings? The reason is that it may
be necessary to treat an integer as an object and use an associated
method. If a generic class for printing values of objects to a
stream is needed, it may be easier to simply pass an object to
all subclasses of that class, do the conversion to string, and
then print to the stream. By converting a primitive type to an
object, you can treat it just like any other possible object rather
than make it a special case.
<H3><A NAME="Math"><TT><FONT SIZE=4 FACE="Courier">Math</FONT></TT></A>
</H3>
<P>
The utility class <TT><FONT FACE="Courier">Math</FONT></TT> contains
the standard Java math library, including such math functions
as absolute value, exponents, roots, and trigonometric functions.
All methods in this class are <I>static</I>, which means they
cannot be subclassed or instantiated. Some aspects of this class,
such as out-of-range or immeasurable results, are platform dependent.
<P>
Here is an example of using the <TT><FONT FACE="Courier">pow</FONT></TT>
and <TT><FONT FACE="Courier">sqrt</FONT></TT> functions to create
a method that calculates the distance between two points:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">static double calcDist(double x1,double
y1,double x2,double y2) {<BR>
</FONT></TT>&nbsp;&nbsp;&nbsp;double length;<BR>
&nbsp;&nbsp;&nbsp;length = Math.sqrt(Math.pow((x1-x2),2) + Math.pow((y1-y2),2));
<BR>
&nbsp;&nbsp;&nbsp;return(length);<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<P>
In addition to the standard math functions, there are routines
for selecting a value on the basis of a numerical limit. This
is done with the <TT><FONT FACE="Courier">min</FONT></TT>/<TT><FONT FACE="Courier">max</FONT></TT>
and <TT><FONT FACE="Courier">floor</FONT></TT>/<TT><FONT FACE="Courier">ceil</FONT></TT>
routines. The <TT><FONT FACE="Courier">min</FONT></TT> and <TT><FONT FACE="Courier">max</FONT></TT>
routines provide a terse method to select the smaller or larger
of two numbers, respectively, which can make for more compact
code. The following two code fragments accomplish the same thing-setting
<TT><FONT FACE="Courier">x</FONT></TT> equal to the greater of
<TT><FONT FACE="Courier">a</FONT></TT> or <TT><FONT FACE="Courier">b</FONT></TT>-but
the second is obviously much more compact.
<BLOCKQUOTE>
<TT><FONT FACE="Courier">if (a &gt; b) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//determine
if a &gt; b<BR>
</FONT></TT>&nbsp;&nbsp;&nbsp;x = a;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
//a is greater, set x equal to a<BR>
}<BR>
else {<BR>
&nbsp;&nbsp;&nbsp;x = b;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
//b is greater, set x equal to b<BR>
}<BR>
<BR>
<TT><FONT FACE="Courier">x = Math.max(a,b);&nbsp;&nbsp;&nbsp;&nbsp;//set
x equal to greater of a and b</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">floor</FONT></TT> and <TT><FONT FACE="Courier">ceil</FONT></TT>
routines offer similar compactness. These routines return the
next higher or lower whole number for a given value. They are
useful in working with graphic coordinates, such as screen displays,
that typically require whole numbers.
<P>
Using <TT><FONT FACE="Courier">floor</FONT></TT> and <TT><FONT FACE="Courier">ceil</FONT></TT>
routines allows for more specific control over how fractional
numbers are handled. For example, if a calculation is done to
draw a polygon, it is important that the lines making up the polygon
actually have endpoints that are the same as the next connecting
line. If some other method, such as rounding or casting to <TT><FONT FACE="Courier">int</FONT></TT>,
is used, the line coordinates may be off by a single pixel, resulting
in an image that does not look quite right-or possibly downright
sloppy.
<P>
Here is an example of how the <TT><FONT FACE="Courier">floor</FONT></TT>
method could be used:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">void clipToRectangle(float x1,y1,int
basex) {<BR>
</FONT></TT>&nbsp;&nbsp;&nbsp;z1 = x1/y1<BR>
&nbsp;&nbsp;&nbsp;//return the largest whole number less than
or equal to z1<BR>
&nbsp;&nbsp;&nbsp;z2 = Math.floor(z1);<BR>
&nbsp;&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;//insert body of message to make use of z2 value
then return to caller
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<P>
One last function worth mentioning in the <TT><FONT FACE="Courier">java.lang.Math</FONT></TT>
library is <TT><FONT FACE="Courier">random()</FONT></TT>. This
method generates random numbers, which are used in a variety of
applications from quantum mechanics to shoot-em-up games. The
<TT><FONT FACE="Courier">random()</FONT></TT> function in Java
returns a double-precision floating-point number<BR>
between 0 and 1. By using this value as a multiplier, a random
number between any two limits can be produced. Here is an example
of a method that will produce an integer random number between
any two specified limits:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static int genRandomInt(int lowerLimit,
int upperLimit) {<BR>
</FONT></TT>&nbsp;&nbsp;&nbsp;double tmpNum;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//declare
temporary variable<BR>
&nbsp;&nbsp;&nbsp;tmpNum = upperLimit-lowerLimit;&nbsp;&nbsp;//calculate
difference between high and low<BR>
&nbsp;&nbsp;&nbsp;tmpNum *= Math.random();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
//multiply random value times difference<BR>
&nbsp;&nbsp;&nbsp;tmpNum = Math.round(tmpNum);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
//round to nearest whole number<BR>
&nbsp;&nbsp;&nbsp;tmpNum += lowerLimit;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//add
new value to lower limit<BR>
&nbsp;&nbsp;&nbsp;return((int)tmpNum);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//cast
resulting number to int and return value<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<P>
This code fragment could have been rewritten in a single return
but was broken out into several lines to show more clearly how
the number was generated.
<P>
With random-number library functions, one question that should
always be asked is, &quot;How truly random are the numbers produced?&quot;
Many random-number generators do not produce very random numbers.
So how accurate is the random-number generator in Java's math
library? Not very, as it turns out.
<P>
Following is a small program to test the <TT><FONT FACE="Courier">random()</FONT></TT>
function. It tests a random number generator by calling it repeatedly
to generate numbers between 0 and 99 using the method specified
previously. It then stores in an array the number of times each
number between 0 and 99 is generated. At the end, it prints out
how many of each were actually generated. If <TT><FONT FACE="Courier">random()</FONT></TT>
generates truly random numbers, each number between 0 and 99 should
be generated an equal number of times if <TT><FONT FACE="Courier">random</FONT></TT>
is called often enough. This program allows the number of iterations
to be specified on the command line:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.util.Random;<BR>
</FONT></TT>public class MyMain {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static void main (String arg[])
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Random rnd = new
Random();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer cnt;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i,j;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int arrIndex =
0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cnt = Integer.valueOf(arg[0]);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int intArr[] =
new int[cnt.intValue()]; <BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i=0; i&lt;cnt.intValue();
i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(j=0; j&lt;100; j++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arrIndex
= Math.abs(rnd.nextInt() % cnt.intValue());<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intArr[arrIndex]++;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i=0; i&lt;cnt.intValue();
i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;intArr[&quot;
+ i + &quot;] = &quot; + intArr[i]);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<P>
Testing Java's random-number generator using this program shows
that <TT><FONT FACE="Courier">random()</FONT></TT> is not really
very random. Running this with a command-line value of 10,000,000
did not yield very high consistency. This means that the <TT><FONT FACE="Courier">random()</FONT></TT>
function, while quite usable for applications such as games, should
not be relied upon for any application in which security might
be a concern, such as encryption of critical information.
<H3><A NAME="Object"><TT><FONT SIZE=4 FACE="Courier">Object</FONT></TT></A>
</H3>
<P>
<TT><FONT FACE="Courier">Object</FONT></TT> is the class from
which all other objects in Java are derived. This class supports
a basic set of methods that all subclasses should customize for
their own needs. These methods are implemented in the <TT><FONT FACE="Courier">Java</FONT></TT>
class as actual routines, not simply as abstract methods. This
is so all subclasses will inherit these routines, ensuring that
the methods can be called without causing runtime exceptions.
Again, most methods should be overridden in any objects the programmer
declares. The methods themselves include methods for comparing,
duplicating, and garbage collecting.
<P>
To clarify how these work, following is an example based on this
simple class:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class MyObject {<BR>
</FONT></TT>&nbsp;&nbsp;&nbsp;int x,y;<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<P>
This class simply holds two integer variables, <TT><FONT FACE="Courier">x</FONT></TT>
and <TT><FONT FACE="Courier">y</FONT></TT>. Because all classes
are automatically subclasses of the <TT><FONT FACE="Courier">Object</FONT></TT>
class, the base <TT><FONT FACE="Courier">Object</FONT></TT> methods
are inherited by default. Because the methods for comparing objects
do not work as you might expect them to, these methods should
be overridden, as is shown in the next example.
<P>
The first method to look at is the method for comparing two objects,
called <TT><FONT FACE="Courier">equals</FONT></TT>. It is used
to determine if all values instantiated in each instance of an
object are equal. The method included in the <TT><FONT FACE="Courier">Object</FONT></TT>
class simply checks to see if the two objects are actually the
same instance. Any implementation of a class should include a
method that compares two different instances to see if they are
equal. The following example implements an <TT><FONT FACE="Courier">equals</FONT></TT>
method for class <TT><FONT FACE="Courier">MyObject</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean equals(Object obj) {<BR>
</FONT></TT>&nbsp;&nbsp;&nbsp;return((obj != null) &amp;&amp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
//does obj point to an object?<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(obj
instanceof MyObject) &amp;&amp;&nbsp;&nbsp;&nbsp;&nbsp; //is obj
an instance of MyObject?<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((MyObject)obj).x
== x) &amp;&amp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((MyObject)obj).y
== y));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //do values for x
&amp; y match?<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<P>
This method simply returns the results of a series of statements
that check various parts of the objects to determine whether they
are equal. The first simply checks to ensure that the passed-in
object is not null; the second checks that the passed-in object
is of type <TT><FONT FACE="Courier">MyObject</FONT></TT>; and
the last tests check whether all variables held in <TT><FONT FACE="Courier">MyObject</FONT></TT>
are of equal value. If all of the checks are validated, the two
objects are considered equal and <TT><FONT FACE="Courier">true</FONT></TT>
is returned. If any of these checks fails, <TT><FONT FACE="Courier">false</FONT></TT>
is returned.
<P>
The next base method is called <TT><FONT FACE="Courier">clone</FONT></TT>.
Its purpose is to allow the creation of a new instance of an object
that is an exact duplicate of the original instance. The default
method implemented in the <TT><FONT FACE="Courier">Object</FONT></TT>
class does absolutely nothing. The following example implements
a <TT><FONT FACE="Courier">clone</FONT></TT> method for the <TT><FONT FACE="Courier">MyObject</FONT></TT>
class:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized Object clone {<BR>
</FONT></TT>&nbsp;&nbsp;&nbsp;MyObject m = new MyObject();&nbsp;&nbsp;&nbsp;&nbsp;//create
new instance of MyObject<BR>
&nbsp;&nbsp;&nbsp;m.x = x;<BR>
&nbsp;&nbsp;&nbsp;m.y = y;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//set
x &amp; y values to the same values<BR>
&nbsp;&nbsp;&nbsp;return(m);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//return
clone of object<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a new instance of <TT><FONT FACE="Courier">MyObject</FONT></TT>
and then sets the values <TT><FONT FACE="Courier">x</FONT></TT>
and <TT><FONT FACE="Courier">y</FONT></TT> in the new instance
equal to the original values of <TT><FONT FACE="Courier">x</FONT></TT>
and <TT><FONT FACE="Courier">y</FONT></TT>. Note that because
an existing method is being overridden, the declaration must match
the original; therefore, the <TT><FONT FACE="Courier">clone</FONT></TT>
method actually returns type <TT><FONT FACE="Courier">Object</FONT></TT>
instead of type <TT><FONT FACE="Courier">MyObject</FONT></TT>.
This method must be synchronized so that the values of <TT><FONT FACE="Courier">x</FONT></TT>
or <TT><FONT FACE="Courier">y</FONT></TT> do not change in the
middle of a call to this method.
<P>
The next method is called <TT><FONT FACE="Courier">toString</FONT></TT>.
This method provides a way to represent an object as a string.
It is automatically called when an object is included in a print
string with the <TT><FONT FACE="Courier">+</FONT></TT> operator.
How this is actually implemented is entirely up to the programmer.
For simple objects, this can be as simple as returning a string
representation of a few variables. More complex objects may need
to print out something far more complex or may simply print out
some subset of the data available. Like <TT><FONT FACE="Courier">clone</FONT></TT>,
the default method implemented in the <TT><FONT FACE="Courier">Object</FONT></TT>
class does nothing and should be overridden. The following example
shows the implementation for <TT><FONT FACE="Courier">MyObject</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final synchronized String toString()
{&nbsp;&nbsp;&nbsp;&nbsp;//implement toString method<BR>
</FONT></TT>&nbsp;&nbsp;&nbsp;return &quot;[&quot; + x + &quot;,&quot;
+ y + &quot;]&quot;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//print
out values of object instance<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<P>
This method simply returns a string containing the values of <TT><FONT FACE="Courier">x</FONT></TT>
and <TT><FONT FACE="Courier">y</FONT></TT> in square brackets.
<P>
The last method to be discussed is called <TT><FONT FACE="Courier">finalize</FONT></TT>.
It is called by the garbage-collection mechanism in Java just
before the object is freed. This method should contain any final
cleanup, such as closing files and signaling other processes,
that an object should do at that time. Not all objects require
this final cleanup and so do not necessarily have to implement
this method.
<P>
The default <TT><FONT FACE="Courier">finalize</FONT></TT> method
implemented in the <TT><FONT FACE="Courier">Object</FONT></TT>
class does nothing, so it will work quite well if nothing special
is needed. The class used as an example up to this point does
not require a <TT><FONT FACE="Courier">finalize</FONT></TT> method,
but here is an example:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void finalize() {<BR>
</FONT></TT>&nbsp;&nbsp;&nbsp;x = -1;<BR>
&nbsp;&nbsp;&nbsp;y = -1;&nbsp;&nbsp;&nbsp;&nbsp;//set x &amp;
y to -1<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<P>
This method simply sets the values of<TT><FONT FACE="Courier">
x</FONT></TT> and <TT><FONT FACE="Courier">y</FONT></TT> to <TT><FONT FACE="Courier">-1</FONT></TT>.
<H3><A NAME="ProcessRuntimeSystem"><TT><FONT SIZE=4 FACE="Courier">Process</FONT></TT><FONT SIZE=4>,
</FONT><TT><FONT SIZE=4 FACE="Courier">Runtime</FONT></TT><FONT SIZE=4>,
</FONT><TT><FONT SIZE=4 FACE="Courier">System</FONT></TT></A>
</H3>
<P>
The <TT><FONT FACE="Courier">Process</FONT></TT> class contains
methods that control and manipulate subprocesses. It is an abstract
class that can be used to get the stand input or stand output
of a subprocess. The <TT><FONT FACE="Courier">Process</FONT></TT>
class can also be used to kill a subprocess, wait for a subclass
to terminate, and retrieve the final exit value of the process.
<P>
<TT><FONT FACE="Courier">Runtime</FONT></TT> is used by the Java
interpreter at application runtime. The <TT><FONT FACE="Courier">Runtime</FONT></TT>
class contains classes and methods to get information about systems
at runtime. One method is <TT><FONT FACE="Courier">totalMemory</FONT></TT><I>,</I>
which returns the number of bytes in system memory. <TT><FONT FACE="Courier">Runtime</FONT></TT>
also has methods that apply to the application currently running.
It has a method called <TT><FONT FACE="Courier">gc</FONT></TT>
that runs the garbage collector, but it is best to have the garbage
collector run by default unless there are special circumstances.
<P>
<TT><FONT FACE="Courier">System</FONT></TT> classes act as a platform-independent
means to do system-level input and output as well as handle errors.
The standard input streams are used to read character data. Standard
output streams are used to print to the screen. The ubiquitous
example of the use of <TT><FONT FACE="Courier">System</FONT></TT>
follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">System.out.println(&quot;Hello World!&quot;);</FONT></TT>
</BLOCKQUOTE>
<P>
<TT><FONT FACE="Courier">System</FONT></TT> variables are static.
<P>
The following example contains a method named <TT><FONT FACE="Courier">print</FONT></TT>
that prints out the properties of the system it is running on,
as well as the total and free available memory:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.util.*;<BR>
</FONT></TT>class MyEnv {<BR>
&nbsp;&nbsp;&nbsp;public void print() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//declare properties object
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Properties p;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//declare runtime object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Runtime r;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//get properties of system
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p = System.getProperties();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//get runtime information
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r = Runtime.getRuntime();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//list all properties available
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.list(System.out);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//print os version<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(System.getProperty(&quot;os.version&quot;,&quot;unkn&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//print total memory<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Total
memory = &quot; + r.totalMemory());<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//print free memory<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Free&nbsp;&nbsp;memory
= &quot; + r.freeMemory());<BR>
<TT><FONT FACE="Courier">} }</FONT></TT>
</BLOCKQUOTE>
<P>
The example class that follows contains a method called <TT><FONT FACE="Courier">runCmd</FONT></TT>
that will run a command passed in as a parameter. The <TT><FONT FACE="Courier">runCmd</FONT></TT>
method will then wait for the command to complete before continuing.
If an error occurs during execution of either the <TT><FONT FACE="Courier">exec</FONT></TT>
or <TT><FONT FACE="Courier">waitFor</FONT></TT> command, <TT><FONT FACE="Courier">System.exit</FONT></TT>
will be used to force the entire application to abort with the
indicated exit codes:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.io.*;<BR>
</FONT></TT>class MyExec {<BR>
&nbsp;&nbsp;&nbsp;public void runCmd(String cmd[]) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Process p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//declare
process object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Runtime r;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//declare
runtime object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r = Runtime.getRuntime();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
//get runtime information<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p = r.exec(cmd)
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//execute
command<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.waitFor();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//wait
for command to complete<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch(InterruptedException
e) {&nbsp;&nbsp;&nbsp;&nbsp;//handle waitFor failure<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;ERROR:
waitFor failure&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(10);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//exit
application with exit code 10<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch(IOException e) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//handle
exec failure<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;ERROR:
exec failure&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(11);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//exit
application with exit code 11<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<P>
This application uses the classes described in this section to
actually print information about the system to the screen and
to run a command using the <TT><FONT FACE="Courier">exec</FONT></TT>
method. The command can be specified on the command line:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.util.*;<BR>
</FONT></TT>import java.io.*;<BR>
<BR>
public class MyMain {<BR>
&nbsp;&nbsp;&nbsp;public static void main (String arg[]) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyEnv myEnv;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//declare
MyEnv object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyExec myExec;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//declare
MyExec object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myEnv = new MyEnv();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//create
MyEnv object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myEnv.print();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//print
system information to the screen<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myExec = new MyExec();&nbsp;&nbsp;&nbsp;&nbsp;//create
MyExec object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myExec.runCmd(arg);&nbsp;&nbsp;&nbsp;&nbsp;//call
runCmd method using command line arguements<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<H3><A NAME="SecurityManager"><TT><FONT SIZE=4 FACE="Courier">SecurityManager</FONT></TT></A>
</H3>
<P>
The <TT><FONT FACE="Courier">SecurityManager</FONT></TT> class
is an abstract class. You can create subclasses of it to implement
a security policy, such as the one used to manage the security
of applets. The applet viewer's security manager is used to restrict
the functions of applets and guard against malicious coding.
<P>
The key thing to know about security managers is that client applications
can have only one security manager. Generally, clients cannot
reference or create their own security manager. The security manager
is executed when the program starts and cannot be replaced, overridden,
extended, or overloaded.
<H3><A NAME="String"><TT><FONT SIZE=4 FACE="Courier">String</FONT></TT></A>
</H3>
<P>
The <TT><FONT FACE="Courier">String</FONT></TT> class provides
methods for representing and manipulating character strings. String
values cannot be changed after creation. Each character in a string
can be accessed as an array. The following two statements are
equivalent:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">String string1 = &quot;Ben&quot;;<BR>
&nbsp;&nbsp;&nbsp;char string2[] = {'B', 'e', 'n'};</FONT></TT>
</BLOCKQUOTE>
<P>
The second letter in the string can be extracted by the statement
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;&nbsp;String e = string1.substring(1,
2);</FONT></TT>
</BLOCKQUOTE>
<P>
There are other methods for string manipulation in this class,
such as the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">class StringFun {<BR>
</FONT></TT>&nbsp;&nbsp;&nbsp;public static void main (String
args[]) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp; String str = &quot;Manipulating strings
in Java is easier than you think.&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;The value of
the string is: &quot; + str);<BR>
&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;Length of the
string is: &quot; +str.length());<BR>
&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;The index of
the character J: &quot; +str.indexOf('J'));<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;The index of
the beginning of the substring \&quot;easier\&quot; is: <BR>
&nbsp;&nbsp;&nbsp;&nbsp; &Acirc;&quot; + str.indexOf(&quot;easier&quot;));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;The character
at position 10: &quot; + str.charAt(10));<BR>
&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;The substring
from positions 14 to 20: &quot; + <BR>
&nbsp;&nbsp;&nbsp;&nbsp; &Acirc;str.substring(14,20));<BR>
&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;The string in
upper case: &quot; + str.toUpperCase());<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<H3><A NAME="StringBuffer"><TT><FONT SIZE=4 FACE="Courier">StringBuffer</FONT></TT></A>
</H3>
<P>
<TT><FONT FACE="Courier">StringBuffer</FONT></TT> allows strings
to be changed and created. Remember, strings normally cannot be
changed. There are many methods and constructors used here to
manipulate strings. One example follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">benName = new StringBuffer().append(&quot;B&quot;).append(&quot;e&quot;).append(&quot;n&quot;).toString();</FONT></TT>
</BLOCKQUOTE>
<P>
This is similar to using <TT><FONT FACE="Courier">+</FONT></TT>
for string concatenation.
<H3><A NAME="Thread"><TT><FONT SIZE=4 FACE="Courier">Thread</FONT></TT></A>
</H3>
<P>
<TT><FONT FACE="Courier">Thread</FONT></TT><I> </I>contains methods
for creating, manipulating, and destroying threads. (See <A HREF="ch8.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch8.htm" >Chapter 8</A>,
<BR>
&quot;Tying It All Together: Threads, Exceptions, and More,&quot;
for more detailed information on threads.)
<H3><A NAME="ThreadGroup"><TT><FONT SIZE=4 FACE="Courier">ThreadGroup</FONT></TT></A>
</H3>
<P>
<TT><FONT FACE="Courier">ThreadGroup</FONT></TT> contains methods
that create, manipulate, and destroy groups of threads.
<H3><A NAME="Throwable"><TT><FONT SIZE=4 FACE="Courier">Throwable</FONT></TT></A>
</H3>
<P>
<TT><FONT FACE="Courier">Throwable</FONT></TT> methods are used
in conjunction with exceptions. This class provides information
to trace back through the stack in case of exceptions. It also
prints out exception messages.
<H2><A NAME="javalangExceptionClasses"><TT><FONT SIZE=5 COLOR=#Ff0000 FACE="Courier">java.lang</FONT></TT><FONT SIZE=5 COLOR=#Ff0000>
Exception Classes</FONT></A></H2>
<P>
Remember that <TT><FONT FACE="Courier">java.lang</FONT></TT>,
with all its classes and subclasses, is imported into every program
by default. One reason that exceptions are part of the <TT><FONT FACE="Courier">java.lang</FONT></TT>
library is that it is important to be able to test for exceptions
in every program.
<P>
Exceptions are discussed in <A HREF="ch8.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch8.htm" >Chapter 8</A>.
The full list of exception classes is shown in Table 10.1. They
are listed in hierarchical order, starting at the top of the pyramid.
<BR>
<P>
<CENTER><B>Table 10.1. Exception classes in </B><TT><B><FONT FACE="Courier">java.lang</FONT></B></TT><B>.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR><TD><CENTER><I>Exception</I></CENTER></TD><TD WIDTH=197><CENTER><I>Extends</I></CENTER>
</TD><TD WIDTH=244><CENTER><I>Purpose</I></CENTER></TD></TR>
<TR><TD WIDTH=197><TT><FONT FACE="Courier">ClassNotFoundException</FONT></TT>
</TD><TD WIDTH=197><TT><FONT FACE="Courier">Exception</FONT></TT>
</TD><TD WIDTH=244>Thrown when a requested class could not be found.
</TD></TR>
<TR><TD WIDTH=197><TT><FONT FACE="Courier">CloneNotSupportedException</FONT></TT>
</TD><TD WIDTH=197><TT><FONT FACE="Courier">Exception</FONT></TT>
</TD><TD WIDTH=244>Thrown when there has been an attempt to clone an unclonable object.
</TD></TR>
<TR><TD WIDTH=197><TT><FONT FACE="Courier">IllegalAccessException</FONT></TT>
</TD><TD WIDTH=197><TT><FONT FACE="Courier">Exception</FONT></TT>
</TD><TD WIDTH=244>Thrown when a requested method could not be accessed.
</TD></TR>
<TR><TD WIDTH=197><TT><FONT FACE="Courier">InstantiationException</FONT></TT>
</TD><TD WIDTH=197><TT><FONT FACE="Courier">Exception</FONT></TT>
</TD><TD WIDTH=244>Thrown when there has been an attempt to instantiate an abstract class or an interface. Interfaces are templates of methods and can never be instantiated. Abstract classes are also intended to be templates. They show the return value and 
argument types but must be overridden.
</TD></TR>
<TR><TD WIDTH=197><TT><FONT FACE="Courier">InterruptedException</FONT></TT>
</TD><TD WIDTH=197><TT><FONT FACE="Courier">Exception</FONT></TT>
</TD><TD WIDTH=244>Thrown when another thread has interrupted the currently running thread.
</TD></TR>
<TR><TD WIDTH=197><TT><FONT FACE="Courier">NoSuchMethodException</FONT></TT>
</TD><TD WIDTH=197><TT><FONT FACE="Courier">Exception</FONT></TT>
</TD><TD WIDTH=244>Indicates that a requested method could not be found.
</TD></TR>
<TR><TD WIDTH=197><TT><FONT FACE="Courier">RuntimeException</FONT></TT>
</TD><TD WIDTH=197><TT><FONT FACE="Courier">Exception</FONT></TT>
</TD><TD WIDTH=244>Traps for exceptions that occur during the execution of bytecode by the Java Virtual Machine.
</TD></TR>
<TR><TD WIDTH=197><TT><FONT FACE="Courier">ArrayStoreException</FONT></TT>
</TD><TD WIDTH=197><TT><FONT FACE="Courier">RuntimeException</FONT></TT>
</TD><TD WIDTH=244>Thrown during runtime when the user is trying to store the wrong type of object in an array.
</TD></TR>
<TR><TD WIDTH=197><TT><FONT FACE="Courier">ClassCastException</FONT></TT>
</TD><TD WIDTH=197><TT><FONT FACE="Courier">RuntimeException</FONT></TT>
</TD><TD WIDTH=244>Thrown when an invalid cast has occurred.</TD>
</TR>
<TR><TD WIDTH=197><TT><FONT FACE="Courier">IllegalArgumentException</FONT></TT>
</TD><TD WIDTH=197><TT><FONT FACE="Courier">RuntimeException</FONT></TT>
</TD><TD WIDTH=244>Indicates that an illegal argument exception has occurred.
</TD></TR>
<TR><TD WIDTH=197><TT><FONT FACE="Courier">IllegalThreadStateException</FONT></TT>
</TD><TD WIDTH=197><TT><FONT FACE="Courier">IllegalArgumentException</FONT></TT>
</TD><TD WIDTH=244>Indicates that a thread is not in the proper state for a requested operation. For example, the thread may not be running when a request is made to it.
</TD></TR>
<TR><TD WIDTH=197><TT><FONT FACE="Courier">NumberFormatException</FONT></TT>
</TD><TD WIDTH=197><TT><FONT FACE="Courier">IllegalArgumentException</FONT></TT>
</TD><TD WIDTH=244>Thrown when an invalid number format has occurred, such as when the user attempts to use a decimal point with a number typed as an integer.
</TD></TR>
<TR><TD WIDTH=197><TT><FONT FACE="Courier">ArithmeticException</FONT></TT>
</TD><TD WIDTH=197><TT><FONT FACE="Courier">RuntimeException</FONT></TT>
</TD><TD WIDTH=244>Thrown when an exceptional arithmetic condition has occurred. This class would be invoked when dividing by zero.
</TD></TR>
<TR><TD WIDTH=197><TT><FONT FACE="Courier">IllegalMonitorStateException</FONT></TT>
</TD><TD WIDTH=197><TT><FONT FACE="Courier">RuntimeException</FONT></TT>
</TD><TD WIDTH=244>Thrown when a monitor operation has been attempted and the monitor is in an invalid state. This could indicate permission problems.
</TD></TR>
<TR><TD WIDTH=197><TT><FONT FACE="Courier">IndexOutOfBoundsException</FONT></TT>
</TD><TD WIDTH=197><TT><FONT FACE="Courier">RuntimeException</FONT></TT>
</TD><TD WIDTH=244>Indicates that an index is out of bounds. This exception is fairly generic in nature. It has two subclasses that are more specific; see next two entries.
</TD></TR>
<TR><TD WIDTH=197><TT><FONT FACE="Courier">ArrayIndexOutOfBounds<BR>Exception</FONT></TT>
</TD><TD WIDTH=197><TT><FONT FACE="Courier">IndexOutOfBoundsException</FONT></TT>
</TD><TD WIDTH=244>Indicates that an invalid array index has been used.
</TD></TR>
<TR><TD WIDTH=197><TT><FONT FACE="Courier">StringIndexOutOfBounds<BR>Exception</FONT></TT>
</TD><TD WIDTH=197><TT><FONT FACE="Courier">IndexOutOfBoundsException</FONT></TT>
</TD><TD WIDTH=244>Indicates that a <TT><FONT FACE="Courier">String</FONT></TT> index is out of range.
</TD></TR>
<TR><TD WIDTH=197><TT><FONT FACE="Courier">NegativeArraySizeException</FONT></TT>
</TD><TD WIDTH=197><TT><FONT FACE="Courier">RuntimeException</FONT></TT>
</TD><TD WIDTH=244>Thrown when there has been an attempt to create an array that is negative in size. In other words, the argument to size the array is not a positive integer.
</TD></TR>
<TR><TD WIDTH=197><TT><FONT FACE="Courier">NullPointerException</FONT></TT>
</TD><TD WIDTH=197><TT><FONT FACE="Courier">RuntimeException</FONT></TT>
</TD><TD WIDTH=244>Indicates that there has been an attempt to use a pointer with a null value. It is a good idea to do bounds checking on pointer values before use.
</TD></TR>
<TR><TD WIDTH=197><TT><FONT FACE="Courier">SecurityException</FONT></TT>
</TD><TD WIDTH=197><TT><FONT FACE="Courier">RuntimeException</FONT></TT>
</TD><TD WIDTH=244>Indicates that a security exception has occurred. This is usually an attempt to access classes, methods, or variables that are not public.
</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="AnExampleofanExceptionfromjavalan"><FONT SIZE=5 COLOR=#Ff0000>An
Example of an Exception from </FONT><TT><FONT SIZE=5 COLOR=#Ff0000 FACE="Courier">java.lang-exceptions</FONT></TT></A>
</H2>
<P>
Listing 10.10 is an example of a Java applet that uses the <TT><FONT FACE="Courier">ArrayIndexOutOfBoundsException</FONT></TT>
exception. It shows how the exception is generated, caught, and
replaced with a new <TT><FONT FACE="Courier">ArrayIndexOutOfBoundsException</FONT></TT>,
which generates a custom error message.
<HR>
<P>
<CENTER><B>Listing 10.10. Use of the </B><TT><B><FONT FACE="Courier">ArrayIndexOutOfBoundsException</FONT></B></TT><B>
exception.<BR>
</B></CENTER>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.applet.*;<BR>
</FONT></TT>import java.awt.*;<BR>
import java.net.*;<BR>
<BR>
public class AnApplet extends Applet implements Runnable {<BR>
&nbsp;&nbsp;&nbsp;Thread myThread;<BR>
&nbsp;&nbsp;&nbsp;public void start() {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//start
running the applet<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (myThread == null) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
//create a thread if doesn't exit<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread
= new Thread(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread.start();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void stop() {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
//stop the applet from running<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (myThread != null) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//if
the thread is running, stop it<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread.stop();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread
= null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;public void run() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int[] arr = new int[10];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
//create an array with 11 elements<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {arr[11] = 1;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
//access the 12th element in the array<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch(ArrayIndexOutOfBoundsException
e) {&nbsp;&nbsp;&nbsp;&nbsp;//in case of this exception<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e = new
ArrayIndexOutOfBoundsException(&quot;Idiot, didn't you do <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&Acirc;bounds
checking on your array accesses?&quot;);&nbsp;&nbsp;&nbsp;&nbsp;
//override exception<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw(e);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
//throw exception message and exit method<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#Ff0000>Summary</FONT></A>
</H2>
<P>
This chapter has explored the <TT><FONT FACE="Courier">java.applet.Applet</FONT></TT>
and <TT><FONT FACE="Courier">java.lang</FONT></TT> packages from
the Java API. The <TT><FONT FACE="Courier">java.lang</FONT></TT>
package contains classes associated with basic data structures
in Java as well as Java-wide exceptions. Structures such as <TT><FONT FACE="Courier">Boolean</FONT></TT>
and <TT><FONT FACE="Courier">Integer</FONT></TT> are included
as classes in <TT><FONT FACE="Courier">java.lang</FONT></TT>.
<P>
The <TT><FONT FACE="Courier">java.applet</FONT></TT> package is
used to create an applet instance and to perform applet-specific
functions. Applets require the presence of a browser or applet
viewer, and the <TT><FONT FACE="Courier">Applet</FONT></TT> methods
rely on this environment.
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch9.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch9.htm"><IMG SRC="pc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/index.htm"><IMG SRC="hb.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch11.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch11.htm"><IMG 
SRC="nc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>
<HR WIDTH="100%"></P>
<P>


</BODY>
</HTML>
