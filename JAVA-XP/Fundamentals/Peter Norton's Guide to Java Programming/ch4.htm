<HTML>

<HEAD>
   <TITLE>Chapter 4 -- The Java Language: A Primer</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<!--Begin JavaScript roadmap code.  If editing downloaded HTML source, delete
 this portion.-->

<script language="JavaScript">
<!--

function TripodShowPopup()
{
   var bName=navigator.appName;
   var bVer=parseInt(navigator.appVersion);
   var now = new Date();
   var popupURL = "/adm/popup/roadmap.shtml?"+"member_name=er4ebus&path=peternortonjavaprograming&client_ip=200.190.100.218&ts=1015336158&ad_type=POPUP&category=net&id=7faa75c898d1268a11579a9c703d4a78";
   var popupName = "TripodPopup";

   if (bName=="Netscape" && bVer<=3)
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=614,height=150');
   }
   else
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=604,height=135');
   }
   popup.location = popupURL;
}

if(window.parent==window)
{
   TripodShowPopup();
}

// -->
</script>

<script language="JavaScript1.2">
<!--

function changeOpenFunction()
{
   var original_window_open = window.open;
   function new_open_function(url, name, features, replace)
   {
      if(name != "TripodPopup")
         return original_window_open(url, name, features, replace);
   }
   window.open = new_open_function;
}
var bName = navigator.appName;

if(bName != "Netscape")
   changeOpenFunction();

// -->
</script>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#Ff0000>Chapter 4</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#Ff0000>The Java Language: A Primer</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>

<UL>
<LI><A HREF="#CreatingYourFirstStandaloneJavaApp" >Creating Your First Stand-alone Java Application</A>
<UL>
<LI><A HREF="#TheBasicStructureofaStandaloneApp" >The Basic Structure of a Stand-alone Application</A>
<LI><A HREF="#PuttingItAllTogether" >Putting It All Together</A>
<LI><A HREF="#CreatingFirstApp" >Creating FirstApp</A>
<LI><A HREF="#CompilingFirstApp" >Compiling FirstApp</A>
<LI><A HREF="#RunningFirstApp" >Running FirstApp</A>
</UL>
<LI><A HREF="#YourFirstJavaApplet" >Your First Java Applet</A>
<UL>
<LI><A HREF="#TheBasicStructureofanApplet" >The Basic Structure of an Applet</A>
<LI><A HREF="#CreatingtheApplet" >Creating the Applet</A>
<LI><A HREF="#CompilingFirstApplet" >Compiling FirstApplet</A>
<LI><A HREF="#CreatinganHTMLFileforYourApplet" >Creating an HTML File for Your Applet</A>
<LI><A HREF="#CreatinganImageforYourApplet" >Creating an Image for Your Applet</A>
<LI><A HREF="#CreatingaSoundFileforYourApplet" >Creating a Sound File for Your Applet</A>
<LI><A HREF="#RunningFirstApplet" >Running FirstApplet</A>
</UL>
<LI><A HREF="#Troubleshooting" >Troubleshooting</A>
<UL>
<LI><A HREF="#CompilerErrors" >Compiler Errors</A>
<LI><A HREF="#InterpreterErrors" >Interpreter Errors</A>
<LI><A HREF="#ViewerErrors" >Viewer Errors</A>
</UL>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
After racing through cyberspace in <A HREF="ch3.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch3.htm" >Chapter 3</A>,
&quot;The Java Browser and the World Wide Web: A Primer,&quot;
you are probably ready for some hands-on experience with Java.
Now you are going to dive right in to a primer for the Java programming
language. The power of Java is that even the most basic Java programs
can feature multimedia. This is primarily because the fundamentals
of the Java programming language are easy to learn and use.
<P>
These fundamentals apply both to applets for use on the World
Wide Web and to stand-alone applications. In this chapter, you
create your first stand-alone application and your first applet.
To show you how easy Java programming can be, one of these programs
will use the built-in multimedia features of the language.
<P>
Don't worry-I'll stick to the basics. Even the most basic Java
programs are useful in demonstrating the structure of Java programs.
As you examine this structure, you will be able to see how classes,
methods, and objects are used in Java programs.
<H2><A NAME="CreatingYourFirstStandaloneJavaApp"><FONT SIZE=5 COLOR=#Ff0000>Creating
Your First Stand-alone Java Application</FONT></A></H2>
<P>
As long as the Java developer's environment is installed on your
computer as discussed in <A HREF="ch2.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch2.htm" >Chapter 2</A>, &quot;Getting
Started with the JDK,&quot; you are ready to create your first
stand-alone application. To follow the examples in this section,
you will need the Java compiler and the Java interpreter.
<H3><A NAME="TheBasicStructureofaStandaloneApp">The Basic Structure
of a Stand-alone Application</A></H3>
<P>
Your first Java program is a basic, stand-alone application called
<TT><FONT FACE="Courier">FirstApp</FONT></TT>. An important difference
between Java applets and applications is the inclusion of a method
called <TT><FONT FACE="Courier">main</FONT></TT>. The <TT><FONT FACE="Courier">main</FONT></TT>
method is included in all Java applications.
<P>
Although all this simple application does is print the words &quot;My
first stand-alone application is a success,&quot; you will use
this application as a stepping stone to more advanced programs
and concepts. The great thing about Java is that all Java programs
follow the same basic constructs. This is true no matter how complex
or simple the program is.
<P>
The five-line application shown in Listing 4.1 is no different.
It has all the features of more complex Java applications and
all the features of an object-oriented program as well:
<UL>
<LI>It <I>is</I> an object
<LI>It <I>uses</I> encapsulation and message passing
<LI>It <I>defines</I> a class
<LI>It <I>uses</I> inheritance
<LI>It <I>uses</I> access modifiers
</UL>
<HR>
<BLOCKQUOTE>
<B>Listing 4.1. Your first Java application.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">class FirstApp {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public static void main (String
args[]) {<BR>
</FONT></TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;My
first stand-alone application is a success.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
}
</BLOCKQUOTE>
<HR>
<P>
To understand how this simple five-line application uses five
of the key object-oriented programming concepts, you can look
at how these concepts relate to this application.
<H4>The Object and Encapsulation in <TT><FONT FACE="Courier">FirstApp</FONT></TT>
</H4>
<P>
<I>Objects</I> are the fundamental unit in object-oriented programming.
All objects have a state and a behavior. Everything the object
knows about its variables and methods describes its <I>state</I>.
The actions an object can perform describe its <I>behavior</I>.
The <TT><FONT FACE="Courier">FirstApp</FONT></TT> program defines
a single object that has
<BLOCKQUOTE>
A state that is unchanging or static
</BLOCKQUOTE>
<BLOCKQUOTE>
A behavior that is to print out a statement
</BLOCKQUOTE>
<P>
You can use objects to send messages to other objects without
having to know how those objects work. This object-oriented programming
concept is called <I>encapsulation</I>. In Java, objects, classes,
and packages are all encapsulated.
<P>
Encapsulation allows you to use a Java object as long as you know
what values the object will accept. The <TT><FONT FACE="Courier">FirstApp</FONT></TT>
program uses the concept of encapsulation to access a method called
<TT><FONT FACE="Courier">println</FONT></TT>. To use the <TT><FONT FACE="Courier">println</FONT></TT>
method, you do not have to know how it works. All you have to
know is that if you pass the method a line of text, it will print
the line of text to the screen.
<P>
Another thing you need to know to access an object is where it
is in the namespace. Java allows you to access public methods
and variables as long as you know where the methods and variables
are in the namespace. The <TT><FONT FACE="Courier">println</FONT></TT>
method is one of dozens of methods in the <TT><FONT FACE="Courier">System</FONT></TT>
class. The <TT><FONT FACE="Courier">System</FONT></TT> class is
a part of the core Java language package of the <I>Application
Programming Interface</I> (API).
<P>
Java knows how to find the <TT><FONT FACE="Courier">println</FONT></TT>
method because the path to the method is specified. Although you
do not have to specify the full path to methods, the full path
for the <TT><FONT FACE="Courier">println</FONT></TT> method is
<BLOCKQUOTE>
<TT><FONT FACE="Courier">java.lang.System.out.println</FONT></TT>
</BLOCKQUOTE>
<P>
You could translate this path into plain words. Here's how: <TT><FONT FACE="Courier">println</FONT></TT>
is a submethod of <TT><FONT FACE="Courier">out</FONT></TT>, which
is in the <TT><FONT FACE="Courier">System</FONT></TT> class. The
<TT><FONT FACE="Courier">System</FONT></TT> class is a part of
the <TT><FONT FACE="Courier">lang</FONT></TT> package of the Java
API.
<H4>Classes and Inheritance in <TT><FONT FACE="Courier">FirstApp</FONT></TT>
</H4>
<P>
In Java, classes encapsulate objects and serve to group a set
of related methods and variables. Although most Java programs
contain multiple class declarations, the <TT><FONT FACE="Courier">FirstApp</FONT></TT>
program has only one. This line of the <TT><FONT FACE="Courier">FirstApp</FONT></TT>
program declares it to be a class of objects called <TT><FONT FACE="Courier">FirstApp</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">class FirstApp {</FONT></TT>
</BLOCKQUOTE>
<P>
Usually you will declare classes in Java using one of two general
forms. The first general form of a class declaration is
<BLOCKQUOTE>
<TT><FONT FACE="Courier">class name {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//body
of class declaration<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The second general form of a class declaration is
<BLOCKQUOTE>
<TT><FONT FACE="Courier">class name extends extendedclass {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>&nbsp;</B>//body
of class dec*<BR>
l&nbsp;aration<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
In both general forms, the open bracket signifies the beginning
of the class and the close bracket signifies the ending of the
class. Within the brackets, you define the methods and instance
variables associated with the class.
<P>
You can extend all classes in Java with another class either implicitly
or explicitly. By doing so, you can create a class that inherits
the functionality of an existing class. This object-oriented programming
concept is called <I>inheritance</I>. Inheritance allows you to
reuse code and to extend the functionality of existing classes.
<P>
Like other Java classes that do not explicitly extend another
class, the <TT><FONT FACE="Courier">FirstApp</FONT></TT> class
extends the <TT><FONT FACE="Courier">Object</FONT></TT> class.
By inheriting the functionality of the <TT><FONT FACE="Courier">Object</FONT></TT>
class, your programs can do many things that they otherwise would
not be able to do. To put this in perspective, you could rewrite
the first general form of class declarations as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">class name extends Object {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//body
of class declaration<BR>
}</FONT></TT>
</BLOCKQUOTE>
<H4>Access Modifiers in <TT><FONT FACE="Courier">FirstApp</FONT></TT>
</H4>
<P>
In Java, access to methods and variables is controlled through
<I>access modifiers</I>. The Java programming language defines
four levels for access controls for methods and variables:<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD ><UL>
<LI>Public
</UL>
</TD><TD>Accessible by any class without limitation
</TD></TR>
<TR><TD><UL>
<LI>Protected
</UL>
</TD><TD>Accessible only by methods in the same class or subclass
</TD></TR>
<TR><TD><UL>
<LI>Private
</UL>
</TD><TD>Accessible only by objects within the same class
</TD></TR>
<TR><TD><UL>
<LI>Default
</UL>
</TD><TD>Unless declared otherwise, assumed to be friendly or accessible by any class in the same package
</TD></TR>
</TABLE></CENTER>
<P>
<P>
The main method in <TT><FONT FACE="Courier">FirstApp</FONT></TT>
is declared to be public. This means the method is completely
accessible to other methods and variables. Another program could
access <TT><FONT FACE="Courier">FirstApp</FONT></TT>'s <TT><FONT FACE="Courier">main</FONT></TT>
method by specifying the path to the method in Java's namespace.
<H3><A NAME="PuttingItAllTogether">Putting It All Together</A>
</H3>
<P>
Now that you have a basic understanding of how <TT><FONT FACE="Courier">FirstApp</FONT></TT>
uses object-oriented programming concepts, let's review the source
code for <TT><FONT FACE="Courier">FirstApp</FONT></TT> line by
line.
<P>
The first line of the application declares the class as <TT><FONT FACE="Courier">FirstApp</FONT></TT>.
Because the declaration does not specify what class the application
extends, by default <TT><FONT FACE="Courier">FirstApp</FONT></TT>
extends the <TT><FONT FACE="Courier">Object</FONT></TT> class.
The open bracket signifies the beginning of the <TT><FONT FACE="Courier">FirstApp</FONT></TT>
class:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">class FirstApp {</FONT></TT>
</BLOCKQUOTE>
<P>
The next line declares many things about a method called <TT><FONT FACE="Courier">main</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static void main (String args[])
{</FONT></TT>
</BLOCKQUOTE>
<P>
You can break down the previous declarations item by item as follows:
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><TT><FONT FACE="Courier">public</FONT></TT>
</TD><TD WIDTH=475>The modifier <TT><FONT FACE="Courier">public</FONT></TT> states that the method is accessible to other classes.
</TD></TR>
<TR><TD WIDTH=115><TT><FONT FACE="Courier">static</FONT></TT>
</TD><TD WIDTH=475>The modifier <TT><FONT FACE="Courier">static</FONT></TT> states that the method is unchanging and implicitly final, meaning the method cannot be overridden.
</TD></TR>
<TR><TD WIDTH=115><TT><FONT FACE="Courier">void</FONT></TT></TD>
<TD WIDTH=475>The modifier <TT><FONT FACE="Courier">void</FONT></TT> states that the method does not return a value.
</TD></TR>
<TR><TD WIDTH=115><TT><FONT FACE="Courier">main()</FONT></TT>
</TD><TD WIDTH=475>The word <TT><FONT FACE="Courier">main</FONT></TT> specifies the <TT><FONT FACE="Courier">main</FONT></TT> method for the application. Arguments for the method are placed between the open and close parentheses. The <TT><FONT 
FACE="Courier">main()</FONT></TT> method is required in Java applications to tell the interpreter where to start. <TT><FONT FACE="Courier">main</FONT></TT>, unlike <TT><FONT FACE="Courier">main()</FONT></TT> in C/C++, does not return a value. Java handles 
its exceptions internally rather than sending them back to the system.
</TD></TR>
<TR><TD WIDTH=115><TT><FONT FACE="Courier">(String args[])</FONT></TT>
</TD><TD WIDTH=475>This specifies that the <TT><FONT FACE="Courier">main</FONT></TT> method takes an argument that is an object of <TT><FONT FACE="Courier">String</FONT></TT>.
</TD></TR>
<TR><TD WIDTH=115><TT><FONT FACE="Courier">{</FONT></TT></TD>
<TD WIDTH=475>The open bracket signifies the beginning of the method.
</TD></TR>
</TABLE></CENTER>
<P>
<P>
The next statement calls the <TT><FONT FACE="Courier">println</FONT></TT>
method of the <TT><FONT FACE="Courier">System</FONT></TT> class
and prints the sentence &quot;My first stand-alone application
is a success.&quot; As with other methods, the arguments to pass
to the method are declared between open and close parentheses.
Each statement in Java ends in a semicolon:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">System.out.println(&quot;My first stand-alone
application is a success.&quot;);</FONT></TT>
</BLOCKQUOTE>
<P>
The final two lines of the <TT><FONT FACE="Courier">FirstApp</FONT></TT>
program are close brackets. The first close bracket completes
the block of code associated with the <TT><FONT FACE="Courier">main()</FONT></TT>
method. The second close bracket completes the block of code associated
with the <TT><FONT FACE="Courier">FirstApp</FONT></TT> class.
<H3><A NAME="CreatingFirstApp">Creating <TT><FONT SIZE=4 FACE="Courier">FirstApp</FONT></TT></A>
</H3>
<P>
Now that you know what the <TT><FONT FACE="Courier">FirstApp</FONT></TT>
program looks like, you can create the program on your computer.
Before you do this, there are two things you need to do:
<OL>
<LI>Decide where on your file system you want to place your applications
<LI>Create an appropriately named file
</OL>
<H4>Creating a File System Structure for Applications</H4>
<P>
When you installed the Java Developer's Kit on your system, you
created a directory or folder to hold the files used by Java.
Although you could store your personal Java applications in this
directory, you might want to store them elsewhere so you can easily
differentiate between the original programs and the ones you will
create.<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Peter's Principle</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
A good place to store your applications and all associated files might be in a directory called <TT><FONT FACE="Courier">java_apps</FONT></TT>. You will find that the easier it is to get to the directory, the better-therefore, you should not place this 
directory too many levels deep in your directory structure. Depending on the complexity of your applications, you might want to create a separate subdirectory for each application.
</BLOCKQUOTE>
<BLOCKQUOTE>
For complex or multipart applications, storing each application in a separate subdirectory makes sense. If you searched through the files and directories you created when you installed the JDK, you saw that the demo applets included with the JDK are stored 
in separate subdirectories. In the base subdirectory for each applet, you will find the source code, the compiled code, and an HTML document used in displaying the applet. Usually, you will find additional directories for sound and image files associated 
with the applet as well.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H4>Naming the Source File for the Application</H4>
<P>
After you have decided where you want to place your application
and have created directories if necessary, you can create the
source code for the application. Whenever you create source code
files for Java, you must remember three rules:
<UL>
<LI>Java requires you to create source code files with the <TT><FONT FACE="Courier">.java</FONT></TT>
extension.
<LI>Java requires that the source code file use the name of the
primary or first class declaration.
<LI>Regardless of whether your computer's operating system is
case sensitive, the Java compiler is case sensitive, and your
filenames must match the primary class name exactly.
</UL>
<P>
Following these naming rules, you must store the <TT><FONT FACE="Courier">FirstApp</FONT></TT>
program in a file called <TT><FONT FACE="Courier">FirstApp.java</FONT></TT>.
Although you can use your favorite text editor or word processor
to create this file, you must save the file as standard ASCII
text. For the sake of simplicity and ease of use, many programmers
prefer to use basic text editors as opposed to word processors.
On UNIX systems, you can use a command-line editor such as <TT><FONT FACE="Courier">vi</FONT></TT>
or <TT><FONT FACE="Courier">emacs</FONT></TT>. On Windows 95/NT
systems, you can use the MS-DOS editor or the Windows Notepad.
On Macintosh systems, you can use BBEdit or Simple Text.
<P>
After you finish entering the source code, you should check it
line by line for accuracy. When you are sure the source code is
accurate, save it to the directory you have designated for your
applications.
<H3><A NAME="CompilingFirstApp">Compiling <TT><FONT SIZE=4 FACE="Courier">FirstApp</FONT></TT></A>
</H3>
<P>
To compile the application, you will use the Java compiler <TT><FONT FACE="Courier">javac</FONT></TT>.
When you compile the source, the Java compiler creates a separate
file for each class in your program. If an application has more
than one class file, you should always invoke the Java interpreter
with the name of the class containing the <TT><FONT FACE="Courier">main</FONT></TT>
method. Because there is only one class declaration in <TT><FONT FACE="Courier">FirstApp</FONT></TT>,
the Java compiler will create only one class file.
<P>
Although compiling applications on the Macintosh is as easy as
dragging the <TT><FONT FACE="Courier">FirstApp.java</FONT></TT>
file onto the compiler, other system owners should not be too
envious. On other systems, <TT><FONT FACE="Courier">javac</FONT></TT>
is a <BR>
command-line program. Because the command line offers a simplified
interface and streamlined design, the version of <TT><FONT FACE="Courier">javac</FONT></TT>
for UNIX, Windows 95/NT, and OS/2 is actually much more versatile.
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Looking Ahead</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
If you like the ease of use associated with graphical tools and use a Windows based or UNIX system, don't worry. Graphical tools for Java on all systems is something that is already here. Several third party vendors have created compilers and interpreters 
that let you use graphical development environments. For more information on graphical development tools, see <A HREF="ch5.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch5.htm" >Chapter 5</A>, &quot;Java Tools and the JDK: A Primer.&quot;
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H4>Using a Graphical Compiler</H4>
<P>
Here are the steps you should use to compile <TT><FONT FACE="Courier">FirstApp</FONT></TT>
using a graphical compiler:
<OL>
<LI>Drop the <TT><FONT FACE="Courier">FirstApp.java</FONT></TT>
file onto the compiler or select Open from the compiler's File
menu.
<LI>The compiled output file, called <TT><FONT FACE="Courier">FirstApp.class</FONT></TT>,
is placed in the same directory as the source.
<LI>If an error window pops up, make sure you have typed the source
correctly in the <TT><FONT FACE="Courier">FirstApp.java</FONT></TT>
file. If after correcting your mistakes you still cannot get the
file to compile, refer to the section titled &quot;Troubleshooting&quot;
at the end of this chapter.
</OL>
<H4>Using a Command-Line Compiler</H4>
<P>
Here are the steps you should use to compile <TT><FONT FACE="Courier">FirstApp</FONT></TT>
using a command-line compiler:
<OL>
<LI>Change to the directory containing the source code and type
the following at the command prompt:<BR>
<BR>
<TT><FONT FACE="Courier">javac FirstApp.java<BR>
</FONT></TT>
<LI>The compiled output file, called <TT><FONT FACE="Courier">FirstApp.class</FONT></TT>,
is placed in the same directory as the source.
<LI>If you get an error stating that the system cannot find <TT><FONT FACE="Courier">javac</FONT></TT>,
your path is not set up correctly. You will have to set your path
correctly or type the full path to the compiler. If errors pertaining
to the source code are listed to the command area, make sure you
have typed the source correctly in the <TT><FONT FACE="Courier">FirstApp.java</FONT></TT>
file. If after correcting your mistakes you still cannot get the
file to compile, refer to the section &quot;Troubleshooting&quot;
at the end of this chapter.
</OL>
<H3><A NAME="RunningFirstApp">Running <TT><FONT SIZE=4 FACE="Courier">FirstApp</FONT></TT></A>
</H3>
<P>
When you compile an application, the compiler creates a separate
file for each class declaration. Because the <TT><FONT FACE="Courier">FirstApp</FONT></TT>
program contains only one class declaration, only one class file
is created. You run applications using the Java interpreter, <TT><FONT FACE="Courier">java</FONT></TT>.
On the Macintosh, using the Java interpreter is as easy as dragging
the <TT><FONT FACE="Courier">FirstApp.class</FONT></TT> file onto
the interpreter. On other systems, the Java interpreter is a command-line
program that is invoked with the name of the class you want to
run.
<H4>Using a Graphical Interpreter</H4>
<P>
Here's what you should do to run <TT><FONT FACE="Courier">FirstApp</FONT></TT>
using a graphical interpreter: Drop the <TT><FONT FACE="Courier">FirstApp.class</FONT></TT>
file onto the interpreter icon or select Open from the interpreter's
File menu.
<P>
You should see the sentence <TT><FONT FACE="Courier">My first
stand-alone application is a success.</FONT></TT> Congratulations-your
first stand-alone application <I>is</I> a success. If the interpreter
issues any errors, ensure that you tried to run the file with
the <TT><FONT FACE="Courier">.class</FONT></TT> extension. If
you still have problems, refer to the section &quot;Troubleshooting&quot;
at the end of this chapter.
<H4>Using a Command-Line Interpreter</H4>
<P>
Here's what you should to do run <TT><FONT FACE="Courier">FirstApp</FONT></TT>
using a command-line interpreter: Change to the directory containing
the compiled file with the <TT><FONT FACE="Courier">.class</FONT></TT>
extension and type the following at the command prompt:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">java FirstApp</FONT></TT>
</BLOCKQUOTE>
<P>
You should see the sentence <TT><FONT FACE="Courier">My first
stand-alone application is a success.</FONT></TT> Congratulations-your
first stand-alone application <I>is</I> a success. If the interpreter
issues errors, ensure that you typed <TT><FONT FACE="Courier">FirstApp</FONT></TT>
correctly and did not include the <TT><FONT FACE="Courier">.class</FONT></TT>
extension. If you still have problems, refer to the section &quot;Troubleshooting&quot;
at the end of this chapter.
<H2><A NAME="YourFirstJavaApplet"><FONT SIZE=5 COLOR=#Ff0000>Your
First Java Applet</FONT></A></H2>
<P>
If the Java developer's environment is installed on your computer,
as discussed in <A HREF="ch2.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch2.htm" >Chapter 2</A>, you are ready
to create your first applet. To follow the examples in this section,
you will need the Java compiler and the Java applet viewer.
<H3><A NAME="TheBasicStructureofanApplet">The Basic Structure
of an Applet</A></H3>
<P>
Your first Java applet is more complex than your first stand-alone
application, yet still uses the same basic constructs and the
same object-oriented programming concepts. This applet, called
<TT><FONT FACE="Courier">FirstApplet</FONT></TT>, uses Java's
built-in multimedia features to display an image and play a sound
file.
<P>
Listing 4.2 shows the <TT><FONT FACE="Courier">FirstApplet</FONT></TT>
program. Although the program is 17 lines long, four of these
lines are used simply to make the program more readable.
<HR>
<BLOCKQUOTE>
<B>Listing 4.2. Your first Java applet.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
import java.applet.*;<BR>
<BR>
public class FirstApplet extends Applet {<BR>
Image NewImage;<BR>
<BR>
&nbsp;&nbsp;public void init() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; resize(400,400);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NewImage = getImage(getCodeBase(),&quot;New.gif&quot;);
<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawImage(NewImage,0,0,this);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;play(getCodeBase(),&quot;New.au&quot;);
<BR>
&nbsp;&nbsp;}<BR>
<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Let's review the source code for <TT><FONT FACE="Courier">FirstApplet</FONT></TT>
line by line.
<P>
<TT><FONT FACE="Courier">import</FONT></TT> statements allow the
applet to use methods and classes from other packages:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
import java.applet.*;</FONT></TT>
</BLOCKQUOTE>
<P>
By default, all Java programs import the <TT><FONT FACE="Courier">java.lang</FONT></TT>
package, which provides the core functionality of the Java language.
The asterisk in the last element of the <TT><FONT FACE="Courier">import</FONT></TT>
statement allows Java to import classes dynamically. Here, the
classes from the <TT><FONT FACE="Courier">java.awt</FONT></TT>
package and the <TT><FONT FACE="Courier">java.applet</FONT></TT>
package are imported dynamically.
<P>
This line declares a class called <TT><FONT FACE="Courier">FirstApplet</FONT></TT>
that extends the <TT><FONT FACE="Courier">Applet</FONT></TT> class:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class FirstApplet extends Applet
{</FONT></TT>
</BLOCKQUOTE>
<P>
By extending the <TT><FONT FACE="Courier">Applet</FONT></TT> class,
<TT><FONT FACE="Courier">FirstApplet</FONT></TT> inherits the
functionality of that class. The open bracket signifies the beginning
of the <TT><FONT FACE="Courier">FirstApplet</FONT></TT> class.
<P>
This line initializes the variable <TT><FONT FACE="Courier">NewImage</FONT></TT>
and declares it to be of type <TT><FONT FACE="Courier">Image</FONT></TT>.
Here, <TT><FONT FACE="Courier">NewImage</FONT></TT> is a placeholder
for the image the applet will display:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Image NewImage;</FONT></TT>
</BLOCKQUOTE>
<P>
This line declares a method called <TT><FONT FACE="Courier">init</FONT></TT>
that overrides the <TT><FONT FACE="Courier">init</FONT></TT> method
of the <TT><FONT FACE="Courier">Applet</FONT></TT> class:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void init() {</FONT></TT>
</BLOCKQUOTE>
<P>
<TT><FONT FACE="Courier">Applet</FONT></TT>'s <TT><FONT FACE="Courier">init</FONT></TT>
method is overridden so you can resize the window before you display
the image. The modifier <TT><FONT FACE="Courier">public</FONT></TT>
states that the method is accessible to other classes. The modifier
<TT><FONT FACE="Courier">void</FONT></TT> states that the method
does not return a value. Normally the arguments a method accepts
are placed between the open and close parentheses. Because the
<TT><FONT FACE="Courier">init</FONT></TT> method accepts no arguments,
nothing is placed between the parentheses.
<P>
Using the <TT><FONT FACE="Courier">resize</FONT></TT> method,
you can resize the display area for the applet. Here, the display
area is resized to 400<FONT FACE="Symbol">&#165;</FONT>400 pixels:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">resize(400,400);</FONT></TT>
</BLOCKQUOTE>
<P>
After you have declared a variable of a certain type, you can
use it. This line of code sets a value for <TT><FONT FACE="Courier">NewImage</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">NewImage = getImage(getCodeBase(),&quot;New.gif&quot;);</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getImage</FONT></TT> method is used
to do this. The first argument for <TT><FONT FACE="Courier">getImage</FONT></TT>
is actually a call to a method called <TT><FONT FACE="Courier">getCodeBase</FONT></TT>,
which returns the location of the base or current directory on
your hard drive. The base directory is the directory containing
the class file you are running. The second argument is the name
of the image that can be found at the specified location.
<P>
This line declares a method called <TT><FONT FACE="Courier">paint</FONT></TT>
that overrides the <TT><FONT FACE="Courier">paint</FONT></TT>
method of the <TT><FONT FACE="Courier">AWT</FONT></TT> package:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void paint(Graphics g) {</FONT></TT>
</BLOCKQUOTE>
<P>
This method is overridden so the applet can draw the image to
a specific location. The modifier <TT><FONT FACE="Courier">public</FONT></TT>
states that the method is accessible to other classes. The modifier
<TT><FONT FACE="Courier">void</FONT></TT> states that the method
does not return a value. When the <TT><FONT FACE="Courier">paint</FONT></TT>
method is called, it needs to be sent an object of class <TT><FONT FACE="Courier">Graphics</FONT></TT>.
<TT><FONT FACE="Courier">Graphics</FONT></TT> is the abstract
base class for all graphic objects. The element <TT><FONT FACE="Courier">g</FONT></TT>
is the specified <TT><FONT FACE="Courier">Graphics</FONT></TT>
window.
<P>
This line invokes the <TT><FONT FACE="Courier">Graphics</FONT></TT>
object <TT><FONT FACE="Courier">g</FONT></TT>, which displays
the image called <TT><FONT FACE="Courier">NewImage</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">g.drawImage(NewImage,0,0,this);</FONT></TT>
</BLOCKQUOTE>
<P>
All the actual work is done by a method called <TT><FONT FACE="Courier">drawImage</FONT></TT>.
The <TT><FONT FACE="Courier">drawImage</FONT></TT> method accepts
arguments that tell it what image to display and where to display
it. Here, <TT><FONT FACE="Courier">NewImage</FONT></TT> will be
displayed at the x,y coordinate 0,0. The final argument is called
an <I>observer</I>. The purpose of the observer is to notify whether
the image is completely displayed.
<P>
As the name implies, the method <TT><FONT FACE="Courier">play</FONT></TT>
is used to play audio files. The first argument for <TT><FONT FACE="Courier">play</FONT></TT>
is a call to the <TT><FONT FACE="Courier">getCodeBase</FONT></TT>
method, which returns the location of the base or current directory
on your hard drive:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">play(getCodeBase(),&quot;New.au&quot;);</FONT></TT>
</BLOCKQUOTE>
<P>
The <I>base directory</I> is the directory containing the class
file you are running. The second argument is the name of the sound
file that can be found at the specified location.
<H3><A NAME="CreatingtheApplet">Creating the Applet</A></H3>
<P>
Now that you know what the <TT><FONT FACE="Courier">FirstApplet</FONT></TT>
program looks like, you can create the program on your computer.
Before you do this, you need decide where on your file system
you want to place your applets. Then you need to create an appropriately
named file.<P>
<CENTER.
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Tip</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
A good place to store your applets and all associated files might be in a directory called <TT><FONT FACE="Courier">java_applets</FONT></TT>. Depending on the complexity of your applets you may want to create a separate subdirectory for each applet. For 
complex or multipart applets storing each applet in a separate subdirectory makes sense.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
When you have decided wher you want to place your applet and have
created directories if necessary, you can create the source code
for the applet. Whenever you create source code files for Java,
you must remember three rules:
<UL>
<LI>Java requires you to create source code files with the <TT><FONT FACE="Courier">.java</FONT></TT>
extension.
<LI>Java requires that the source code file use the name of the
primary or first class declaration.
<LI>Regardless of whether your computer's operating system is
case sensitive, the Java compiler is case sensitive, and your
filenames must match the primary class name exactly.
</UL>
<P>
Following these naming rules, you must store the <TT><FONT FACE="Courier">FirstApplet</FONT></TT>
program in a file called <TT><FONT FACE="Courier">FirstApplet.java</FONT></TT>.
You must also save the file as standard ASCII text. After you
finish entering the source code, you should check it line by line
for accuracy. When you are sure the source code is accurate, you
should save it to the directory you have designated for your applets.
<H3><A NAME="CompilingFirstApplet">Compiling <TT><FONT SIZE=4 FACE="Courier">FirstApplet</FONT></TT></A>
</H3>
<P>
Compiling an applet is exactly the same as compiling an application.
To compile the applet, you will use the Java compiler, <TT><FONT FACE="Courier">javac</FONT></TT>.
When you compile the source, the Java compiler creates a separate
file for each class in your program. If an applet has more than
one class file, you should always invoke the Java interpreter
with the name of the class containing the primary method. Because
there is only one class declaration in <TT><FONT FACE="Courier">FirstApplet</FONT></TT>,
the Java compiler will create only one class file.
<H4>Using a Graphical Compiler</H4>
<P>
Here are the steps you should use to compile <TT><FONT FACE="Courier">FirstApplet</FONT></TT>
using a graphical compiler:
<OL>
<LI>Drop the <TT><FONT FACE="Courier">FirstApplet.java</FONT></TT>
file onto the compiler or select Open from the compiler's File
menu.
<LI>The compiled output file called <TT><FONT FACE="Courier">FirstApplet.class</FONT></TT>
is placed in the same directory as the source.
<LI>If an error window pops up, make sure you have typed the source
correctly in the <TT><FONT FACE="Courier">FirstApplet.java</FONT></TT>
file. If after correcting your mistakes you still cannot get the
file to compile, refer to the section &quot;Troubleshooting&quot;
at the end of this chapter.
</OL>
<H4>Using a Command-Line Compiler</H4>
<P>
Here are the steps you should use to compile <TT><FONT FACE="Courier">FirstApplet</FONT></TT>
using a command-line compiler:
<OL>
<LI>Change to the directory containing the source code and type
the following at the command prompt:<BR>
<BR>
<TT><FONT FACE="Courier">javac FirstApplet.java</FONT></TT>
<LI>The compiled output file called <TT><FONT FACE="Courier">FirstApplet.class</FONT></TT>
is placed in the same directory as the source.
<LI>If you get an error stating that the system cannot find <TT><FONT FACE="Courier">javac</FONT></TT>,
your path is not set up correctly. You will have to set your path
correctly or type the full path to the compiler. If errors pertaining
to the source code are listed to the command area, make sure you
have typed the source correctly in the <TT><FONT FACE="Courier">FirstApplet.java</FONT></TT>
file. If after correcting your mistakes you still cannot get the
file to compile, refer to the section &quot;Troubleshooting&quot;
at the end of this chapter.
</OL>
<H3><A NAME="CreatinganHTMLFileforYourApplet">Creating an HTML
File for Your Applet</A></H3>
<P>
Because applets are made for viewing with hypertext viewers such
as Web browsers, you must create an HTML document before you can
use an applet. Within the HTML document, you use a markup tag
called <TT><FONT FACE="Courier">APPLET</FONT></TT> to load and
run the specified applet. In the <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT>
tag, you refer to Java classes and not to the files containing
the class that ends in the <TT><FONT FACE="Courier">.class</FONT></TT>
extension. The example HTML document contains an <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT>
tag that refers to the <TT><FONT FACE="Courier">FirstApplet</FONT></TT>
class and not to the file named <TT><FONT FACE="Courier">FirstApplet.class</FONT></TT>.
<P>
Using your favorite word processor or text editor, create a plain
ASCII text file with the following contents:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;HTML&gt;<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt;First Java Applet&lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
&lt;BODY&gt;<BR>
&lt;APPLET CODE=&quot;FirstApplet&quot; width=400 height=400&gt;&lt;/APPLET&gt;
<BR>
&lt;/BODY&gt;<BR>
&lt;/HTML&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
After you create the file, save it in the same directory as the
compiled code for the <TT><FONT FACE="Courier">FirstApplet</FONT></TT>
program. Most HTML documents use the <TT><FONT FACE="Courier">.html</FONT></TT>
extension; you should save your HTML document with an appropriate
name, such as <TT><FONT FACE="Courier">example.html</FONT></TT>.
<P>
</CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><BLOCKQUOTE>
Powered Web Presentations with Applets,&quot; for complete details on using the <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT> tag.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="CreatinganImageforYourApplet">Creating an Image for
Your Applet</A></H3>
<P>
The Java API currently supports two image formats: GIF and JPEG,
which are the most widely used image formats on the World Wide
Web. The <TT><FONT FACE="Courier">FirstApplet</FONT></TT> program
displays a GIF image called <TT><FONT FACE="Courier">New.gif</FONT></TT>,
but you can create your own image to use instead. If you have
published on the Web, you probably have a GIF image that <TT><FONT FACE="Courier">FirstApplet</FONT></TT>
can display. To use a GIF image you currently have on your computer,
you will need to do the following:
<OL>
<LI>Rename the image: <TT><FONT FACE="Courier">New.gif</FONT></TT>.
<LI>Move the image to the directory containing the compiled code
for the application.
</OL>
<P>
If you do not have a GIF image you can use, don't worry. On the
CD-ROM you will find a sample image in the directory for <A HREF="ch4.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch4.htm" >Chapter 4</A>.
You could also create an image using your favorite graphics program,
such as CorelDRAW!. After you create the image, save the image
to a file called <TT><FONT FACE="Courier">New.gif</FONT></TT>
and move it to the directory containing the source code for the
application.<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
If you do not have a graphics program that will create GIF images and you plan to create applets for use on the World Wide Web, you should probably purchase one or download a shareware graphics program from a reliable archive site on the Internet. Here's 
how you can rewrite the <TT><FONT FACE="Courier">FirstApplet</FONT></TT> program so that it uses a text string instead of an image:
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
import java.applet.*;<BR>
<BR>
public class FirstApplet extends Applet {<BR>
<BR>
&nbsp;&nbsp;public void init() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resize(400,400);<BR>
&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;My first Java applet.&quot;,50,50);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;play(getCodeBase(),&quot;New.au&quot;);<BR>
&nbsp;&nbsp;}<BR>
<BR>
}</FONT></TT>
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<H3><A NAME="CreatingaSoundFileforYourApplet">Creating a Sound
File for Your Applet</A></H3>
<P>
In order for sound files to play on your system, your system must
be properly configured to play sound. At this time, the Java API
supports only the Sun AU format. Fortunately, the AU sound format
is one of the widely used formats on the World Wide Web. The <TT><FONT FACE="Courier">FirstApplet</FONT></TT>
program plays an AU sound file called <TT><FONT FACE="Courier">New.au</FONT></TT>,
but you can create your own sound file to use instead. If you
have published on the Web, you might have an AU sound file that
<TT><FONT FACE="Courier">FirstApplet</FONT></TT> can use.
<P>
To use an AU sound file you currently have on your computer, you
will need to do the following:
<OL>
<LI>Rename the sound file: <TT><FONT FACE="Courier">New.au</FONT></TT>.
<LI>Move the sound file to the directory containing the compiled
code for the application.
</OL>
<P>
</CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDHT=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
If you do not have an AU sound file, don't worry. The <TT><FONT FACE="Courier">FirstApplet</FONT></TT> program will still run-it just won't play a sound file for you. Also, you will find a sample AU sound file on the CD-ROM in the directory for <A 
HREF="ch4.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch4.htm" >Chapter 4</A>.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<H3><A NAME="RunningFirstApplet">Running <TT><FONT SIZE=4 FACE="Courier">FirstApplet</FONT></TT></A>
</H3>
<P>
After creating the necessary files for the <TT><FONT FACE="Courier">FirstApplet</FONT></TT>
program, you can run the applet using a hypertext viewer. The
Java Developer's Kit includes a viewer called <TT><FONT FACE="Courier">appletviewer</FONT></TT>.
On the Macintosh, using <TT><FONT FACE="Courier">appletviewer</FONT></TT>
is as easy as dragging the HTML file that references the applet
onto the AppletViewer icon. On other systems, <TT><FONT FACE="Courier">appletviewer</FONT></TT>
is a command-line program that is invoked with the name of the
class you want to run.
<H4>Using a Graphical Applet Viewer</H4>
<P>
Here's what you should do to run <TT><FONT FACE="Courier">FirstApplet</FONT></TT>
using a graphical applet viewer: Drop your .<TT><FONT FACE="Courier">html</FONT></TT>
file onto the AppletViewer icon or select Open from <TT><FONT FACE="Courier">appletviewer</FONT></TT>'s
File menu.
<P>
You should now see a pop-up window for the applet viewer. Within
a few seconds, you will see your GIF image and hear the audio
file. If the viewer issues errors, ensure that you used the correct
HTML document and that the document is in the same directory as
your compiled code. If you still have problems, refer to the section
&quot;Troubleshooting&quot; at the end of this chapter.
<H4>Using a Command-Line Applet Viewer</H4>
<P>
Here's what you should do to run <TT><FONT FACE="Courier">FirstApplet</FONT></TT>
using a command-line applet viewer: Change to the directory containing
the compiled file with the <TT><FONT FACE="Courier">.class</FONT></TT>
extension and type the following at the command prompt:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">appletviewer example.html</FONT></TT>
</BLOCKQUOTE>
<P>
You should now see a pop-up window for the applet viewer. Within
a few seconds, you will see your GIF image and hear the audio
file. If the viewer issues errors, ensure that you used the correct
HTML document and that the document is in the same directory as
your compiled code. If you still have problems, see the next section,
&quot;Troubleshooting.&quot;
<H2><A NAME="Troubleshooting"><FONT SIZE=5 COLOR=#Ff0000>Troubleshooting</FONT></A>
</H2>
<P>
Troubleshooting is something of an art form. Some programmers
can troubleshoot hundreds of lines of code in a few minutes. Others
wade through the same code for hours. Thankfully, once the JDK
is properly installed and tested on your system as outlined in
<A HREF="ch2.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch2.htm" >Chapter 2</A>, most of your errors at this
stage should pertain to the code itself and your paths. Therefore,
this is not an exhaustive list of all the errors that can occur
during the running of Java programs. Rather, it is a list of pointers
that should help you solve most problems and is divided into three
parts:
<UL>
<LI>Compiler Errors
<LI>Interpreter Errors
<LI>Viewer Errors
</UL>
<H3><A NAME="CompilerErrors">Compiler Errors</A></H3>
<P>
Compiler errors are normally output directly to the command window.
Whenever the Java compiler displays an error, it will not create
the <TT><FONT FACE="Courier">.class</FONT></TT> file. Consequently,
you must fix errors before you can successfully compile and run
the code. The Java compiler does a fair job of telling you where
the errors are in your file. However, a single error can be the
source of multiple errors later in the compilation. With this
in mind, you should generally look to the earliest errors for
the source of your problems. After you fix such an error, you
should recompile the code and look for other errors.
<P>
Most of the mistakes in your code at this stage should be typing
mistakes. Typos are often hard to find; you might have to check
your code character by character. There are three problem areas
in particular you should look for:<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><CENTER><I>Semicolons</I></CENTER></TD><TD WIDTH=493><CENTER><I>Statements should end with a semicolon.</I></CENTER>
</TD></TR>
<TR><TD WIDTH=98>Brackets</TD><TD WIDTH=493>Each class and method should have an open bracket and a close bracket. This means that for every class and method declaration, you should have one open bracket and one close bracket. The <TT><FONT 
FACE="Courier">FirstApp</FONT></TT> program has one class declaration and one method declaration. Thus, there should be two open and two close brackets. The <TT><FONT FACE="Courier">FirstApplet</FONT></TT> program has one class declaration and two method 
declarations. Thus, there should be three open and three close brackets. The brackets must be placed properly. The open bracket follows the class or method declaration. The close bracket is the final item in the class or method.
</TD></TR>
<TR><TD WIDTH=98>Parentheses</TD><TD WIDTH=493>Every method name should be directly followed by its arguments enclosed in parentheses. Even if a method has no parameters, it should have an open and a close parenthesis.
</TD></TR>
</TABLE></CENTER>
<P>
<H4>Ten Most Common Compiler Errors</H4>
<P>
The following is a list of the 10 most common errors you will
see if there are typos in <TT><FONT FACE="Courier">FirstApp</FONT></TT>.
Each compiler error report is followed by a solution. Although
<TT><FONT FACE="Courier">FirstApp</FONT></TT> is a very basic
program, you can use the logic involved in solving these errors
to help solve problems with larger programs, including the <TT><FONT FACE="Courier">FirstApplet</FONT></TT>
program:
<OL>
<LI>Compiler error report 1:<BR>
<TT><FONT FACE="Courier">FirstApp.java:1: '{' expected.<BR>
class FirstApp <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^
<BR>
1 error<BR>
</FONT></TT>Solution: Add an open bracket to the class declaration
on line 1 as follows:<BR>
<TT><FONT FACE="Courier">class FirstApp {</FONT></TT>
<LI>Compiler error report 2:<BR>
<TT><FONT FACE="Courier">FirstApp.java:3: ';' expected.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;First
stand-alone application.&quot;)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^
<BR>
1 error<BR>
</FONT></TT>Solution: Add a semicolon to the end of the statement
in line 4 as follows:<BR>
<TT><FONT FACE="Courier">System.out.println(&quot;First stand-alone
application.&quot;);</FONT></TT>
<LI>Compiler error report 3:<BR>
<TT><FONT FACE="Courier">FirstApp.java:2: ')' expected.<BR>
&nbsp;&nbsp;&nbsp;&nbsp; public static void main (String args[]
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
^<BR>
1 error<BR>
</FONT></TT>Solution: Add a close parenthesis to the method declaration
in line 2 as follows:<BR>
<TT><FONT FACE="Courier">public static void main (String args[])
{</FONT></TT>
<LI>Compiler error report 4:<BR>
<TT><FONT FACE="Courier">FirstApp.java:2: ')' expected.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public static void main (String
args]) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^
<BR>
1 error<BR>
</FONT></TT>Solution: In this case, the Java compiler gives a
misleading error message. Line 2 is not missing a close parenthesis.
It is missing an open square bracket. Although the error is misleading,
it does help to pinpoint the source of the problem. Here the problem
should be between the preceding open parenthesis and the next
close parenthesis. The problem can be fixed as follows:<BR>
<TT><FONT FACE="Courier">public static void main (String args[])
{</FONT></TT>
<LI>Compiler error report 5:<BR>
<TT><FONT FACE="Courier">FirstApp.java:2: Class tring not found
in type declaration.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public
static void main (tring args[]) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
^<BR>
1 error<BR>
</FONT></TT>Solution: Java is looking for a class called <TT><FONT FACE="Courier">tring</FONT></TT>
instead of a class called <TT><FONT FACE="Courier">String</FONT></TT>,
which can be fixed as follows:<BR>
<TT><FONT FACE="Courier">public static void main (String args[])
{</FONT></TT>
<LI>Compiler error report 6:<BR>
<TT><FONT FACE="Courier">FirstApp.java:2: Class vod not found
in type declaration.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public
static vod main (String args[]) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^
<BR>
FirstApp.java:2: Return required at end of vod main(java.lang.String[]).
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public
static vod main (String args[]) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^
<BR>
2 errors<BR>
</FONT></TT>Solution: The word <TT><FONT FACE="Courier">void</FONT></TT>
is entered incorrectly as <TT><FONT FACE="Courier">vod</FONT></TT>.
This causes the Java compiler to give one good error message and
one misleading error message. To fix this problem, you only need
to correct the typo:<BR>
<TT><FONT FACE="Courier">public static void main (String args[])
{</FONT></TT>
<LI>Compiler error report 7:<BR>
<TT><FONT FACE="Courier">FirstApp.java:2: Invalid method declaration;
return type required.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public
static void (String args[]) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^
<BR>
1 error<BR>
</FONT></TT>Solution: The method declaration is invalid because
it is missing the name of the method. To fix this problem, you
need to add the word <TT><FONT FACE="Courier">main</FONT></TT>:
<BR>
<TT><FONT FACE="Courier">public static void main (String args[])
{</FONT></TT>
<LI>Compiler error report 8:<BR>
<BR>
<TT><FONT FACE="Courier">FirstApp.java:3: Method outprintln(java.lang.String)
not found in <BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">class
java.lang.System.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.outprintln(&quot;First
stand-alone application.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^
<BR>
1 error<BR>
</FONT></TT>Solution: The call to the <TT><FONT FACE="Courier">println</FONT></TT>
method has a typo that is causing the Java compiler to look for
an invalid method called <TT><FONT FACE="Courier">outprintln</FONT></TT>.
Adding a period between the word <TT><FONT FACE="Courier">out</FONT></TT>
and the word <TT><FONT FACE="Courier">println</FONT></TT> solves
this problem:<BR>
<TT><FONT FACE="Courier">System.out.println(&quot;First stand-alone
application.&quot;);</FONT></TT>
<LI>Compiler error report 9:<BR>
<TT><FONT FACE="Courier">FirstApp.java:3: ')' expected.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(First
stand-alone application.);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^
<BR>
1 error<BR>
</FONT></TT>Solution: The Java compiler gives a misleading error
message. Line 3 is not missing a close parenthesis. It is missing
double quotation marks. Although the error is misleading, it does
help to pinpoint the source of the problem. Here the problem should
be between the preceding open parenthesis and the next close parenthesis.
The problem can be fixed as follows:<BR>
<TT><FONT FACE="Courier">System.out.println(&quot;First stand-alone
application.&quot;);</FONT></TT>
<LI>Compiler error report 10:<BR>
<TT><FONT FACE="Courier">FirstApp.java:5: '}' expected.<BR>
}<BR>
 ^<BR>
FirstApp.java:5: '}' expected.<BR>
}<BR>
 ^<BR>
2 errors<BR>
</FONT></TT>Solution: The compiler is a bit confused because there
is a problem in the way your open and close brackets are placed.
In particular, you probably have an open bracket where a close
bracket should be. Review the code and see where the close bracket
should be placed. The best place to start is at line 5. Work your
way backward from there.
</OL>
<P>
Other errors you may encounter are related to your paths. Your
paths aren't set up correctly if you see an error that says
<BLOCKQUOTE>
<TT><FONT FACE="Courier">javac:  Command not found</FONT></TT>
</BLOCKQUOTE>
<P>
To fix this problem, you need to update your path so that it includes
the directory where the Java binary executables are stored. <A HREF="ch2.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch2.htm" >Chapter 2</A>
includes a section on testing the installation for each major
operating system. You should refer to the section appropriate
for your operating system.
<H3><A NAME="InterpreterErrors">Interpreter Errors</A></H3>
<P>
Sometimes a program will compile but still will not run with the
Java interpreter. Unless redirected, interpreter errors are output
directly to the command window. Most interpreter errors relate
to either a missing <TT><FONT FACE="Courier">main</FONT></TT>
method or an incorrectly entered filename.
<H4>Three Most Common Interpreter Errors</H4>
<P>
The three most common errors you will see are listed in this section.
Each interpreter error report is followed by a solution.
<OL>
<LI>Interpreter error report 1:<BR>
<TT><FONT FACE="Courier">In class FirstApp: void main(String argv[])
is undefined<BR>
</FONT></TT>Solution: All Java applications must have a <TT><FONT FACE="Courier">main</FONT></TT>
method. The class file you are trying to run is missing the <TT><FONT FACE="Courier">main</FONT></TT>
method. If there is only one class file for this application,
add a <TT><FONT FACE="Courier">main</FONT></TT> method to the
source code and recompile. If there are more than one class file
for this application, invoke the interpreter with the name of
the class file containing the <TT><FONT FACE="Courier">main</FONT></TT>
method.
<LI>Interpreter error report 2:<BR>
<TT><FONT FACE="Courier">Can't find class Firstapp<BR>
</FONT></TT>Solution: The Java interpreter cannot find the class
file you have specified. This can be a result of an incorrectly
typed class name or your path structure. First, check to make
sure you have typed in the class name correctly. In this case,
<TT><FONT FACE="Courier">FirstApp</FONT></TT> was incorrectly
entered as <TT><FONT FACE="Courier">Firstapp</FONT></TT>. If you
typed in the class name correctly, check your paths. You must
either be in the directory containing the class file or have your
paths set up correctly to look for the class file.
<LI>Interpreter error report 3:<BR>
<TT><FONT FACE="Courier">Can't find class FirstApp/class<BR>
</FONT></TT>Solution: You have invoked the interpreter with the
filename instead of the class name for your application, and the
Java interpreter replaced the period with the appropriate directory
separator for your system. When you invoke the interpreter again,
do not use the <TT><FONT FACE="Courier">.class</FONT></TT> extension-use
the class name.
</OL>
<P>
Other errors you may encounter are related to your paths. Your
paths aren't set up correctly if you see an error that says
<BLOCKQUOTE>
<TT><FONT FACE="Courier">java:  Command not found</FONT></TT>
</BLOCKQUOTE>
<P>
To fix this problem, you need to update your path so that it includes
the directory where the Java binary executables are stored. <A HREF="ch2.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch2.htm" >Chapter 2</A>
includes a section on testing the installation for each major
operating system. You should refer to the section appropriate
for your operating system.
<H3><A NAME="ViewerErrors">Viewer Errors</A></H3>
<P>
Java's <TT><FONT FACE="Courier">appletviewer</FONT></TT> introduces
a new set of possible problems. This is primarily because to use
<TT><FONT FACE="Courier">appletviewer</FONT></TT> you need an
HTML document with a correctly defined <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT>
tag. Unless redirected, <TT><FONT FACE="Courier">appletviewer</FONT></TT>
errors are output directly to the command window.
<H4>Five Most Common Viewer Errors</H4>
<P>
The five most common errors you will see are listed in this section.
Each viewer error report is followed by a solution:
<OL>
<LI>Viewer error report 1:<BR>
<TT><FONT FACE="Courier">I/O exception while reading: \C:\java_applets\new
<BR>
</FONT></TT>Make sure that <TT><FONT FACE="Courier">new</FONT></TT>
is a file and is readable.<BR>
Solution: <TT><FONT FACE="Courier">appletviewer</FONT></TT> does
a good job of pinpointing the problem. You have entered the name
of a file that either does not exist on your system or isn't at
the location where Java expects to find it. If you typed in the
name of the HTML document correctly, check your paths. You must
either be in the directory containing the HTML document or have
your paths set up correctly to look for the HTML document.
<LI>Viewer error report 2:<BR>
<TT><FONT FACE="Courier">thread applet-FirstApplet.class find
class FirstApplet<BR>
Opening stream to: file:/C:/java_applets/FirstApplet.class to
get FirstApplet<BR>
load: class FirstApplet not found<BR>
</FONT></TT>Solution: The <TT><FONT FACE="Courier">appletviewer</FONT></TT>
was able to load the HTML document, but it cannot find the Java
class you specified in the <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT>
tag. View the contents of the HTML document and make sure you
have correctly entered the class name. If you typed in the class
name correctly, check your paths. Your HTML document must either
be in the directory containing the Java class file, or the <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT>
tag must specify the relative or full path to the class file.
<LI>Viewer error report 3:<BR>
<TT><FONT FACE="Courier">Warning: No Applets were started, make
sure the input contains an &lt;applet&gt; tag.<BR>
use: appletviewer [-debug] url|file ...<BR>
</FONT></TT>Solution: <TT><FONT FACE="Courier">appletviewer</FONT></TT>
is trying to display the document, but the document does not contain
an <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT> tag. Make
sure you are invoking the <TT><FONT FACE="Courier">appletviewer</FONT></TT>
with the name of the HTML document and not the name of your Java
class file. Then view the contents of the HTML document to make
sure you have a fully qualified <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT>
tag, such as<BR>
<TT><FONT FACE="Courier">&lt;APPLET CODE=&quot;FirstApplet&quot;
width=400 height=400&gt;&lt;/APPLET&gt;</FONT></TT>
<LI>Viewer error report 4:<BR>
<TT><FONT FACE="Courier">Warning: &lt;applet&gt; tag requires
width attribute.<BR>
Warning: No Applets were started, make sure the input contains
an &lt;applet&gt; tag.<BR>
use: appletviewer [-debug] url|file ...<BR>
</FONT></TT>Solution: <TT><FONT FACE="Courier">appletviewer</FONT></TT>
is trying to display the document, but the document does not contain
a fully qualified <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT>
tag. In this case, the <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT>
tag is missing the <TT><FONT FACE="Courier">WIDTH</FONT></TT>
attribute.
<LI>Viewer error report 5:<BR>
<TT><FONT FACE="Courier">W