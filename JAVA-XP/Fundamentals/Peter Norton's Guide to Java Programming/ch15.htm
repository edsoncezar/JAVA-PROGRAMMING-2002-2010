<HTML>

<HEAD>
   <TITLE>Chapter 15 -- Creating Java-Powered Web Presentations
with Applets</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<!--Begin JavaScript roadmap code.  If editing downloaded HTML source, delete
 this portion.-->

<script language="JavaScript">
<!--

function TripodShowPopup()
{
   var bName=navigator.appName;
   var bVer=parseInt(navigator.appVersion);
   var now = new Date();
   var popupURL = "/adm/popup/roadmap.shtml?"+"member_name=er4ebus&path=peternortonjavaprograming&client_ip=200.190.100.218&ts=1015337061&ad_type=POPUP&category=net&id=fe9771f6c03809b9d1521c1e82f869fa";
   var popupName = "TripodPopup";

   if (bName=="Netscape" && bVer<=3)
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=614,height=150');
   }
   else
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=604,height=135');
   }
   popup.location = popupURL;
}

if(window.parent==window)
{
   TripodShowPopup();
}

// -->
</script>

<script language="JavaScript1.2">
<!--

function changeOpenFunction()
{
   var original_window_open = window.open;
   function new_open_function(url, name, features, replace)
   {
      if(name != "TripodPopup")
         return original_window_open(url, name, features, replace);
   }
   window.open = new_open_function;
}
var bName = navigator.appName;

if(bName != "Netscape")
   changeOpenFunction();

// -->
</script>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#Ff0000>Chapter 15</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#Ff0000>Creating Java-Powered Web Presentations
with Applets</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>

<UL>
<LI><A HREF="#BasicHTMLDocumentStructure" >Basic HTML Document Structure</A>
<UL>
<LI><A HREF="#UnderstandingURLs" >Understanding URLs</A>
<LI><A HREF="#IntroductiontoHTMLTags" >Introduction to HTML Tags</A>
<LI><A HREF="#TheHeaderofanHTMLDocument" >The Header of an HTML Document</A>
<LI><A HREF="#TheBodyofanHTMLDocument" >The Body of an HTML Document</A>
</UL>
<LI><A HREF="#TheJavaExtensionstoHTML" >The Java Extensions to HTML</A>
<UL>
<LI><A HREF="#TheAPPLETElement" >The APPLET Element</A>
<LI><A HREF="#OptionalAttributesfortheAPPLETEleme" >Optional Attributes for the APPLET Element</A>
<LI><A HREF="#ThePARAMElement" >The PARAM Element</A>
</UL>
<LI><A HREF="#AddingAnimationtoWebDocuments" >Adding Animation to Web Documents</A>
<UL>
<LI><A HREF="#OverviewoftheAnimatorApplet" >Overview of the Animator Applet</A>
<LI><A HREF="#UsingParametersintheAnimatorApplet" >Using Parameters in the Animator Applet</A>
<LI><A HREF="#CreatingaJavaBasedAnimationwithAni" >Creating a Java-Based Animation with Animator</A>
</UL>
<LI><A HREF="#ReducingAnimationFlicker" >Reducing Animation Flicker</A>
<LI><A HREF="#PublishingaJavaPresentationontheWe" >Publishing a Java Presentation on the Web</A>
<UL>
<LI><A HREF="#UsingLiveApplets" >Using Live Applets</A>
<LI><A HREF="#PuttingTogetherthePresentation" >Putting Together the Presentation</A>
<LI><A HREF="#PublishingthePresentationontheWeb" >Publishing the Presentation on the Web</A>
<LI><A HREF="#ViewingthePresentation" >Viewing the Presentation</A>
</UL>
<LI><A HREF="#HowDoesJavaComparetoOtherAvailable" >How Does Java Compare to Other Available Products? </A>
<UL>
<LI><A HREF="#JavaVersusPerl" >Java Versus Perl</A>
<LI><A HREF="#JavaVersusOtherProgrammingLanguages" >Java Versus Other Programming Languages</A>
<LI><A HREF="#JavaVersusOfftheShelfSoftware" >Java Versus Off-the-Shelf Software</A>
<LI><A HREF="#JavaVersusHTML" >Java Versus HTML</A>
</UL>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
Applets are a driving force behind Java's widespread popularity.
The World Wide Web and Java can help you reach a global audience
of millions, yet before anyone can preview your dazzling new applets
you must create a document that showcases what you've done. To
do this, you use the <I>Hypertext Markup Language</I> (HTML) and
Java-specific markup tags.
<P>
Although this chapter discusses HTML and HTML document structure,
the focus is on using the unique Java-specific markup tags. You
will use these tags to add applets to sample HTML documents in
creative and powerful ways, and ultimately to create a Web presentation.
After creating a Java-powered presentation, you will need to publish
it on the Web. Enjoy this part, because this is when you get to
show the world your work.
<H2><A NAME="BasicHTMLDocumentStructure"><B><FONT SIZE=5 COLOR=#Ff0000>Basic
HTML Document Structure</FONT></B></A></H2>
<P>
Many books have been written on the subject of HTML, and I recommend
you buy a couple of them. It is not my intent to describe the
creation of the more intricate documents that can be produced
with HTML, but rather to show only the necessary steps to get
a Web browser to display an HTML document.
<H3><A NAME="UnderstandingURLs"><B>Understanding URLs</B></A>
</H3>
<P>
The first thing to know about HTML is how to read a <I>Uniform
Resource Locator</I>, or URL (pronounced you-are-el). URLs are
the addresses of Internet resources and are used by the Web browser
to find Web publications, sounds, graphics, and applets. The first
part of a URL contains the information necessary to determine
the protocol required to access and transfer the resource.
<P>
A protocol you may be familiar with is the <I>Hypertext Transfer
Protocol</I> (HTTP). As discussed in <A HREF="ch3.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch3.htm" >Chapter 3</A>,
&quot;The Java Browser and the World Wide Web: A Primer,&quot;
HTTP is used to transfer Web documents. After the protocol specification,
the URL lists the address of the resource, beginning with the
Internet host and domain names. For example, look at the following
URL, which specifies a hypertext document called <TT><FONT FACE="Courier">index.html</FONT></TT>
on JavaSoft's Web server:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">HTTP://java.sun.com/applets/index.html</FONT></TT>
</BLOCKQUOTE>
<P>
URLs follow this general pattern. Some contain a listing of directories
and subdirectories, separated by slash marks, before the actual
resource is named. No matter how long the URL is, the protocol
is the first item and the actual resource is the last item. Everything
between the protocol and the resource is the listing of the hostname
followed by the directory path that leads to the resource.
<P>
You will need this basic understanding of how URLs work a little
later in this chapter. After you have composed the HTML document
and prepared the applet to be loaded onto a Web server, you will
determine the URL where the Web publication will reside. When
you know the URL, you can let others know where to find your page.
<H3><A NAME="IntroductiontoHTMLTags"><B>Introduction to HTML Tags</B></A>
</H3>
<P>
HTML provides Web browsers with information for formatting text,
graphics, and other multimedia objects by using <I>markup tags</I>.
Tags define the structure of HTML documents and include an element
name enclosed by brackets-for example, <TT><FONT FACE="Courier">&lt;P&gt;</FONT></TT>,
which indicates a new paragraph.
<P>
Most tags are used in pairs. The <I>begin tag</I> tells the browser
a document element is beginning, and the <I>end tag</I> tells
the browser an element is ending. The only difference between
the two is that the end tag contains a forward slash before the
element name. For example, the begin document tag <TT><FONT FACE="Courier">&lt;HTML&gt;</FONT></TT>
is paired with the end document tag <TT><FONT FACE="Courier">&lt;/HTML&gt;</FONT></TT>.
<P>
Because HTML tags are based on standard ASCII text, all you need
to create HTML documents is a text editor or word processor. You
save your HTML documents as standard ASCII text with the <TT><FONT FACE="Courier">.htm</FONT></TT>
or <TT><FONT FACE="Courier">.html</FONT></TT> extension.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Tip</B></TD></TR>
<TR><TD WIDTH=570>
<BLOCKQUOTE>
As you create your first Web page, keep in mind that ASCII text formatting is usually ignored by Web browsers. When your browser sees formatting such as tabs, spaces, paragraph returns, and page breaks-no matter how many times you repeat them-it interprets 
them as a single space. This primarily is because browsers rely on the HTML markup to specify the format of the page.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Although HTML is not case sensitive, it is important to use a
consistent case in your tags. To clearly separate tags from text,
it is a good practice to use either all uppercase or all lowercase
and stick with it throughout the document. This is also important
if you intend to use one of the many HTML editors available-they
insert tags that are either all lowercase or all uppercase but
do not mix the two in any single document.
<H3><A NAME="TheHeaderofanHTMLDocument"><B>The Header of an HTML
Document</B></A></H3>
<P>
After the begin document tag <TT><FONT FACE="Courier">&lt;HTML&gt;</FONT></TT>,
the next tag to go into a Web page is the begin header tag, <TT><FONT FACE="Courier">&lt;HEAD&gt;</FONT></TT>.
This tag specifies the beginning of the document's header section
and is used in a pair with the end header tag, <TT><FONT FACE="Courier">&lt;/HEAD&gt;</FONT></TT>.
Although the HTML specification lists many tags for document headers,
most document headers contain only a document title and its corresponding
tags.
<P>
You specify the document title with the <TT><FONT FACE="Courier">&lt;TITLE&gt;</FONT></TT>
tag, which, with its corresponding end tag <TT><FONT FACE="Courier">&lt;/TITLE&gt;</FONT></TT>,
should surround a well-thought-out title for your document. The
title is significant because most Web browsers display the title
prominently on their title bar. Browsers also store the title
when readers save the location of the page as a bookmark or hotlist
item. Both of these examples are good reasons for keeping the
title as short and concise as possible. However, the title still
must help the reader remember what it was about the page that
caused him to mark its place. Other points to remember about the
title are that there can be only one in each document and that
it can contain only plain text.
<P>
The first Web presentation you will create in this chapter is
for the <TT><FONT FACE="Courier">RGB2Hex</FONT></TT> converter.
Therefore, a good title might be something like the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;TITLE&gt; RGB to Hex Converter &lt;/TITLE&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
The title is short and to the point, but it clearly defines what
the page contains. Having completed the header, you now must construct
the body of the document.
<H3><A NAME="TheBodyofanHTMLDocument"><B>The Body of an HTML Document</B></A>
</H3>
<P>
The document body begins with the next tag needed for defining
the document structure, the body tag <TT><FONT FACE="Courier">&lt;BODY&gt;</FONT></TT>.
The remainder of the document, including all text, pictures, links,
forms, tables, and Java applets, is contained within the begin
and end tags in this pair. Your HTML document at this point should
look like this:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;HTML&gt;<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt; RGB to Hex Converter &lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
&lt;BODY&gt;<BR>
 . . .<BR>
&lt;/BODY&gt;<BR>
&lt;/HTML&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
Now that you have defined the basic document structure, you can
add some features, such as headings that will be centered in the
browser window. To center headings, use the center tag, <TT><FONT FACE="Courier">&lt;CENTER&gt;</FONT></TT>,
or add the attribute <TT><FONT FACE="Courier">ALIGN=CENTER</FONT></TT>
to the heading tag. Although the current HTML specification does
not provide many options for allowing the document writer to perform
true page layout, HTML does provide tags like these to help with
the presentation.<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Peter's Principle</B></TD></TR>
<TR><TD WIDTH=588>
<BLOCKQUOTE>
The nice thing about the <TT><FONT FACE="Courier">&lt;CENTER&gt;</FONT></TT> tag is that it is not just for headings. The tag can be used anywhere in the body of the document when you want text, graphics, or other multimedia objects to be centered in the 
browser window. The bad thing about the <TT><FONT FACE="Courier">&lt;CENTER&gt;</FONT></TT> tag is that it is nonstandard HTML markup used by the Netscape Navigator browser or other browsers capable of using Netscape extensions to HTML. For this reason, I 
prefer to use the <TT><FONT FACE="Courier">ALIGN</FONT></TT> attribute with the heading tags when I want to center text.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The heading tags come in six levels: <TT><FONT FACE="Courier">&lt;H1&gt;</FONT></TT>
through <TT><FONT FACE="Courier">&lt;H6&gt;</FONT></TT>. The higher
the number, the smaller the font size used in the heading. Heading
tags are always used in pairs, meaning the <TT><FONT FACE="Courier">&lt;H1&gt;</FONT></TT>
tag specifies the beginning of a level-1 heading and the <TT><FONT FACE="Courier">&lt;/H1&gt;</FONT></TT>
tag specifies the end of a level-1 heading.
<P>
In the <TT><FONT FACE="Courier">RGB2Hex</FONT></TT> document,
you will use the <TT><FONT FACE="Courier">&lt;H2&gt;</FONT></TT>
and <TT><FONT FACE="Courier">&lt;H3&gt;</FONT></TT> heading tags.
The text between the opening and ending heading tags can be of
any length and can include multiple lines. This does not, however,
mean that the header should be of great length. Looking at line
after line of emphasized text can become annoying very quickly.
Use the heading tags as titles for paragraphs or marquee signs
for pictures, forms, tables, and applets. You can add the <TT><FONT FACE="Courier">ALIGN</FONT></TT>
attribute to any heading tag, as in the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;H1 ALIGN=CENTER&gt; Heading text
to center &lt;/H1&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
To further enhance the appearance of the document, you can add
horizontal rules, which are great for showing clear separation
between headings and text or between different sections contained
in a document. The tag for the horizontal rule is simply <TT><FONT FACE="Courier">&lt;HR&gt;</FONT></TT>
and is one of the few tags that does not require an ending tag.
For each <TT><FONT FACE="Courier">&lt;HR&gt;</FONT></TT> tag used,
a single horizontal rule that extends the width of the page is
produced. Inserting multiple adjacent <TT><FONT FACE="Courier">&lt;HR&gt;</FONT></TT>
tags will produce a double- or triple-line effect.
<P>
At this point the HTML document looks like this:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;HTML&gt;<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt; RGB to Hex Converter &lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
&lt;BODY&gt;<BR>
&lt;CENTER&gt;<BR>
&lt;H2&gt; The RGB to Hex Converter &lt;/H2&gt;<BR>
&lt;H3&gt; Written with JAVA &lt;H3&gt;<BR>
&lt;HR&gt;<BR>
&lt;/BODY&gt;<BR>
&lt;/HTML&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
Now that you have a document for presentation on the World Wide
Web, you need to mesh together the document and the Java applet.
To do so, you use the Java extensions to HTML, which are described
in the next section of this chapter. These extensions are really
just more tags that define for the browser what to look for, where
to find the code for the applet, and how to display the applet
when it is loaded. Although not all the Java extensions are exclusive
to Java, they are included because of their usefulness in displaying
an applet. When you finish the next section, the <TT><FONT FACE="Courier">RGB2Hex</FONT></TT>
applet will be an integral part of your Web page.
<H2><A NAME="TheJavaExtensionstoHTML"><B><FONT SIZE=5 COLOR=#Ff0000>The
Java Extensions to HTML</FONT></B></A></H2>
<P>
The <TT><FONT FACE="Courier">APPLET</FONT></TT> and <TT><FONT FACE="Courier">PARAM</FONT></TT>
elements comprise what I refer to collectively as the Java extensions
to HTML. I refer to them this way because they work much the same
way that other extensions, such as Netscape's, have in the past-that
is, they add to the value of the current HTML specifications.
When the HTML 3.2 draft specification was released in May 1996,
the <TT><FONT FACE="Courier">APPLET</FONT></TT> and <TT><FONT FACE="Courier">PARAM</FONT></TT>
elements officially became a part of the HTML standard. HTML 3.2
is the next evolution of the Hypertext Markup Language and is
designed to replace HTML 2.0.
<P>
You will find that the <TT><FONT FACE="Courier">APPLET</FONT></TT>
and <TT><FONT FACE="Courier">PARAM</FONT></TT> elements have many
attributes that serve different purposes, and that not all of
them are required for each applet. Indeed, do not attempt to use
all these attributes in every single instance of these elements.
Trying to use all the Java extensions will only cause clutter
and confusion if they serve no true purpose.
<P>
The following sections describe the attributes of the <TT><FONT FACE="Courier">APPLET</FONT></TT>
and <TT><FONT FACE="Courier">PARAM</FONT></TT> elements and when
it is appropriate to use each attribute.
<H3><A NAME="TheAPPLETElement"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier">APPLET</FONT></B></TT><B><FONT SIZE=4>
Element</FONT></B></A></H3>
<P>
When Java was first introduced, the <TT><FONT FACE="Courier">APP</FONT></TT>
element was added to HTML to indicate a Java applet. Recently,
the <TT><FONT FACE="Courier">APPLET</FONT></TT> element has taken
its place, and with it came many changes. Most of these are subtle,
so if you were writing Java code before the change you should
have no problem picking them up. If you were not, forget that
the <TT><FONT FACE="Courier">APP</FONT></TT> element ever existed
and just learn the <TT><FONT FACE="Courier">APPLET</FONT></TT>
element.
<P>
The <TT><FONT FACE="Courier">APPLET</FONT></TT> element is similar
to the former <TT><FONT FACE="Courier">APP</FONT></TT> element
in that it contains some required attributes and includes optional
attributes. One major difference is that the <TT><FONT FACE="Courier">APPLET</FONT></TT>
element now has an opening tag <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT>
and an ending tag <TT><FONT FACE="Courier">&lt;/APPLET&gt;</FONT></TT>.
The updated HTML document that contains the <TT><FONT FACE="Courier">APPLET</FONT></TT>
element with the required fields is as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;HTML&gt;<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt; RGB to Hex Converter &lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
&lt;BODY&gt;<BR>
&lt;CENTER&gt;<BR>
&lt;H2&gt; The RGB to Hex Converter &lt;/H2&gt;<BR>
&lt;H3&gt; Written with JAVA &lt;H3&gt;<BR>
&lt;HR&gt;<BR>
&lt;APPLET CODE=&quot;RGB2Hex&quot; WIDTH=300 HEIGHT=300&gt;<BR>
&lt;/APPLET&gt;<BR>
&lt;/CENTER&gt;<BR>
&lt;/BODY&gt;<BR>
&lt;/HTML&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
Inside the <TT><FONT FACE="Courier">APPLET</FONT></TT> element
are the required attributes <TT><FONT FACE="Courier">CODE</FONT></TT>,
<TT><FONT FACE="Courier">WIDTH</FONT></TT>, and <TT><FONT FACE="Courier">HEIGHT</FONT></TT>.
The <TT><FONT FACE="Courier">CODE</FONT></TT> attribute has taken
the place of the <TT><FONT FACE="Courier">CLASS</FONT></TT> attribute
found in the <TT><FONT FACE="Courier">APP</FONT></TT> element.
The <TT><FONT FACE="Courier">CODE</FONT></TT> attribute is a required
because it gives the name of the file that contains the applet's
compiled <TT><FONT FACE="Courier">Applet</FONT></TT> subclass.
The <TT><FONT FACE="Courier">CODE</FONT></TT> attribute is absolute
and can contain only the filename for the applet, not a path to
a filename. If the applet code resides in a directory other than
the one the HTML document is in, the <TT><FONT FACE="Courier">APPLET</FONT></TT>
element must include the optional attribute <TT><FONT FACE="Courier">CODEBASE</FONT></TT>
to indicate the path to the applet.
<P>
The <TT><FONT FACE="Courier">WIDTH</FONT></TT> and <TT><FONT FACE="Courier">HEIGHT</FONT></TT>
attributes define the initial width and height of the applet display
area. The unit of measurement used by these attributes is the
pixel. Remember that not everyone uses the same display resolution
for their monitors; what may appear to be a large applet at a
display resolution of 640<FONT FACE="Symbol">&#165;</FONT>480
may appear small at 1024<FONT FACE="Symbol">&#165;</FONT>768.
However, it is impossible to account for every possibility.
<P>
Another important point to remember is that these attributes define
only the initial display area for the applet and not any windows
or dialog boxes that the applet might bring up. Now that you've
learned about all the required attributes of the <TT><FONT FACE="Courier">APPLET</FONT></TT>
element, let's look at each of the optional attributes.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Tip</B></TD></TR>
<TR><TD WIDTH=578>
<BLOCKQUOTE>
You may find some applets that do not work with your Web browser. In all probability these applets will conform to the 1.0 Alpha API instead of API versions 1.0 and later that are reviewed in this chapter. Here is a quick conversion chart for rewriting 
these applets to conform to the current API:</BLOCKQUOTE>
<BLOCKQUOTE>
1. Replace the <TT><FONT FACE="Courier">APP</FONT></TT> element with the <TT><FONT FACE="Courier">APPLET</FONT></TT> element.
</BLOCKQUOTE>
<BLOCKQUOTE>
2. Replace the <TT><FONT FACE="Courier">CLASS</FONT></TT> attribute with the <TT><FONT FACE="Courier">CODE</FONT></TT> attribute.
</BLOCKQUOTE>
<BLOCKQUOTE>
3. Replace the <TT><FONT FACE="Courier">SRC</FONT></TT> attribute with the <TT><FONT FACE="Courier">CODEBASE</FONT></TT> attribute.
</BLOCKQUOTE>
<BLOCKQUOTE>
4. <TT><FONT FACE="Courier">ALIGN</FONT></TT> attribute remains.
</BLOCKQUOTE>
<BLOCKQUOTE>
5. <TT><FONT FACE="Courier">HEIGHT</FONT></TT> and <TT><FONT FACE="Courier">WIDTH</FONT></TT> attributes remain.
</BLOCKQUOTE>
<BLOCKQUOTE>
6. Place applet-specific attributes into <TT><FONT FACE="Courier">&lt;PARAM&gt;</FONT></TT> tags.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
If you know HTML or have published HTML documents, you may be
wondering why the Java extensions specify begin and end <TT><FONT FACE="Courier">APPLET</FONT></TT>
tags. After all, all the necessary instructions are in the begin
applet tag, <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT>,
which makes the end <TT><FONT FACE="Courier">APPLET</FONT></TT>
tag seem unnecessary. Indeed, most Web publishers don't know why
there are begin and end <TT><FONT FACE="Courier">APPLET</FONT></TT>
tags and don't place anything between them.
<P>
Between the begin and end <TT><FONT FACE="Courier">APPLET</FONT></TT>
tags, you can define an area of the document that will be displayed
by browsers that are not capable of using Java applets. For example,
if your applet is an animation, you can place an image reference
in this area to allow readers who don't have Java-capable browsers
to see something other than empty space. All Java-enhanced pages
should contain a fully defined area of text, multimedia objects,
and markup for such browsers. This will greatly expand the available
audience for your Web presentations.
<P>
The HTML document you are creating can be extended using this
concept, as shown in Listing 15.1. Readers who have a Java-capable
browser see the <TT><FONT FACE="Courier">RGB2Hex</FONT></TT> applet.
Readers who don't see an image called <TT><FONT FACE="Courier">RGB2Hex.gif</FONT></TT>
and a message that tells them about the applet shown in the image.
Figure 15.1 shows the document as displayed by a Web browser that
cannot run Java applets.
<P>
<A HREF="f15-1.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f15-1.gif" ><B>Figure 15.1 :</B> <I>Defining making for users without Java-capable browsers.</I></A>
<HR>
<BLOCKQUOTE>
<B>Listing 15.1. Extending the document for wider audiences.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;HTML&gt;<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt; RGB to Hex Converter &lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
&lt;BODY&gt;<BR>
&lt;CENTER&gt;<BR>
&lt;H2&gt; The RGB to Hex Converter &lt;/H2&gt;<BR>
&lt;H3&gt; Written with JAVA &lt;H3&gt;<BR>
&lt;HR&gt;<BR>
&lt;APPLET CODE=&quot;RGB2Hex&quot; WIDTH=300 HEIGHT=300&gt;<BR>
&lt;IMG SRC=&quot;RGB2Hex.gif&quot;&gt;<BR>
&lt;BLOCKQUOTE&gt;<BR>
The screenshot shows the RGB2Hex applet programmed in the Java
<BR>
programming language. This applet lets you convert RGB color<BR>
values to hexadecimal values and see the corresponding color output.
<BR>
&lt;/BLOCKQUOTE&gt;<BR>
&lt;/APPLET&gt;<BR>
&lt;/CENTER&gt;<BR>
&lt;/BODY&gt;<BR>
&lt;/HTML&gt;</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="OptionalAttributesfortheAPPLETEleme"><B>Optional
Attributes for the </B><TT><B><FONT SIZE=4 FACE="Courier">APPLET</FONT></B></TT><B><FONT SIZE=4>
Element</FONT></B></A></H3>
<P>
The optional attributes are every bit as important as the required
ones. These attributes allow for much greater freedom in the use
of applets and the layout of the Web presentation. This section
reviews each optional attribute and gives details of how it is
used.
<H4><TT><B><FONT FACE="Courier">ALIGN</FONT></B></TT></H4>
<P>
Another feature that illustrates the attention to detail in the
Java HTML extensions is the <TT><FONT FACE="Courier">ALIGN</FONT></TT>
attribute, which defines the alignment of the applet. Each of
the possible values causes the applet or the text around it to
line up differently. These values are the same as those for the
<TT><FONT FACE="Courier">&lt;IMG&gt;</FONT></TT> tag used for
displaying images in HTML, as you can see from the following list:
<UL>
<LI><TT><FONT FACE="Courier">ALIGN=CENTER</FONT></TT> is similar
to center justification in that it places the applet in the center
of its line on the document.
<LI><TT><FONT FACE="Courier">ALIGN=LEFT</FONT></TT> aligns the
applet with the left side of the document.
<LI><TT><FONT FACE="Courier">ALIGN=RIGHT</FONT></TT> aligns the
applet with the right side of the document.
<LI><TT><FONT FACE="Courier">ALIGN=TOP</FONT></TT> aligns the
applet with the topmost item on its line, which can be anything
from text to an image file.
<LI><TT><FONT FACE="Courier">ALIGN=TEXTTOP</FONT></TT> aligns
the applet with the top of the tallest text on the line.
<LI><TT><FONT FACE="Courier">ALIGN=MIDDLE</FONT></TT> aligns the
applet with the middle of the baseline of the text.
<LI><TT><FONT FACE="Courier">ALIGN=ABSMIDDLE</FONT></TT> aligns
the applet with the middle of the largest item on the line.
<LI><TT><FONT FACE="Courier">ALIGN=BASELINE</FONT></TT> aligns
the bottom of the applet with the baseline of the text.
<LI><TT><FONT FACE="Courier">ALIGN=BOTTOM</FONT></TT> is actually
the same as <TT><FONT FACE="Courier">ALIGN=BASELINE</FONT></TT>.
<LI><TT><FONT FACE="Courier">ALIGN=ABSBOTTOM</FONT></TT> aligns
the bottom of the applet with the lowest item on the line. This
can extend below the baseline of the text.
</UL>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=570>
<BLOCKQUOTE>
The value <TT><FONT FACE="Courier">ALIGN=BASELINE</FONT></TT> was introduced by Netscape Navigator. Although it is interchangeable with the value <TT><FONT FACE="Courier">ALIGN=BOTTOM</FONT></TT>, the developers of Netscape felt the word<TT><FONT 
FACE="Courier"> BASELINE</FONT></TT> was a better description of the way the text would be aligned.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The <TT><FONT FACE="Courier">ALIGN</FONT></TT> attribute determines
how the text is arranged with regard to the applet, but it does
not determine how much space there will be between the text and
the applet. To adjust the whitespace around the applet, you use
the <TT><FONT FACE="Courier">VSPACE</FONT></TT> and <TT><FONT FACE="Courier">HSPACE</FONT></TT>
attributes.
<H4><TT><B><FONT FACE="Courier">HSPACE</FONT></B></TT><B> and
</B><TT><B><FONT FACE="Courier">VSPACE</FONT></B></TT></H4>
<P>
The <TT><FONT FACE="Courier">HSPACE</FONT></TT> and <TT><FONT FACE="Courier">VSPACE
</FONT></TT>attributes let you define, in pixels, the amount of
whitespace around the applet. <TT><FONT FACE="Courier">VSPACE</FONT></TT>
defines the vertical space above and below the applet, and <TT><FONT FACE="Courier">HSPACE</FONT></TT>
defines the horizontal space on either side of the applet. These
attributes also work the same as those used for the <TT><FONT FACE="Courier">&lt;IMG&gt;</FONT></TT>
tag in HTML and are used like the <TT><FONT FACE="Courier">WIDTH</FONT></TT>
and <TT><FONT FACE="Courier">HEIGHT</FONT></TT> attributes. To
have five pixels of space around the applet, you would use <TT><FONT FACE="Courier">HSPACE=5</FONT></TT>
and <TT><FONT FACE="Courier">VSPACE=5</FONT></TT> in the <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT>
tag.
<P>
These are all the attributes that affect how the applet will be
displayed on the page. The next attribute is useful only when
the applet cannot be displayed on the page.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Tip</B></TD></TR>
<TR><TD WIDTH=570>
<BLOCKQUOTE>
Although the <TT><FONT FACE="Courier">ALIGN</FONT></TT>, <TT><FONT FACE="Courier">VSPACE</FONT></TT>, and <TT><FONT FACE="Courier">HSPACE</FONT></TT> attributes are listed in the JDK, none of them seem to have been fully incorporated into Java-enabled Web 
browsers as of this writing. The <TT><FONT FACE="Courier">ALIGN</FONT></TT> values <TT><FONT FACE="Courier">MIDDLE</FONT></TT>, <TT><FONT FACE="Courier">TOP</FONT></TT>, <TT><FONT FACE="Courier">TEXTTOP</FONT></TT>, <TT><FONT 
FACE="Courier">ABSMIDDLE</FONT></TT>, <TT><FONT FACE="Courier">BASELINE</FONT></TT>, <TT><FONT FACE="Courier">BOTTOM</FONT></TT>, and <TT><FONT FACE="Courier">ABSBOTTOM</FONT></TT> do work, but the <TT><FONT FACE="Courier">LEFT</FONT></TT>, <TT><FONT 
FACE="Courier">RIGHT</FONT></TT>, and <TT><FONT FACE="Courier">CENTER</FONT></TT> attributes did not at this writing. A practical workaround for this is to include a new paragraph tag (<TT><FONT FACE="Courier">&lt;P&gt;</FONT></TT>) before each instance of 
an applet. Inside the braces of the new paragraph tag alignment, you can include instructions for the paragraph. <TT><FONT FACE="Courier">&lt;P ALIGN=RIGHT&gt;</FONT></TT> will cause everything between it and the <TT><FONT 
FACE="Courier">&lt;/P&gt;</FONT></TT> tag to align to the right margin of the document. Likewise, everything between a <TT><FONT FACE="Courier">&lt;P ALIGN=CENTER&gt;</FONT></TT> tag and its ending <TT><FONT FACE="Courier">&lt;/P&gt;</FONT></TT> tag will 
be center justified. A description of these attributes is provided here in expectation that they will be incorporated into Web browsers in the near future.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H4><TT><B><FONT FACE="Courier">ALT</FONT></B></TT></H4>
<P>
When you try to load a Java-enhanced document into a browser that
does not support Java, the applet will not be displayed. One alternative
to a blank space in your page may be the alternative text (or
<TT><FONT FACE="Courier">ALT</FONT></TT>) attribute. Using the
<TT><FONT FACE="Courier">ALT</FONT></TT> attribute, you can define
alternative text to display when the browser recognizes the <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT>
tag but is not capable of running applets. In the <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT>
tag, the <TT><FONT FACE="Courier">ALT</FONT></TT> attribute is
used in this manner:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;APPLET CODE=&quot;RGB2Hex&quot; WIDTH=300
HEIGHT=300<BR>
ALT=&quot;This JAVA applet is a utility to convert RGB<BR>
input to Hex values.&quot;&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
Currently, this attribute is of dubious value solely because all
Web browsers that recognize the <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT>
tag also automatically run Java applets. However, the HTML 3.2
specification includes the <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT>
tag, which means that browsers that claim to support HTML 3.2
must also support the <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT>
tag. Although these browsers may support HTML 3.2, they will not
necessarily support Java.
<H4><TT><B><FONT FACE="Courier">CODEBASE</FONT></B></TT></H4>
<P>
The optional attribute <TT><FONT FACE="Courier">CODEBASE</FONT></TT>,
mentioned previously, can be used in any HTML document to direct
the Web browser to look for an applet located someplace other
than the current directory without changing the current URL being
viewed on the Web browser. With <TT><FONT FACE="Courier">CODEBASE</FONT></TT>,
anyone can use an applet stored elsewhere. This could be important
to someone who is allotted only a few megabytes of storage space
on his server, or perhaps to development teams that use separate
servers and want to save time by not having to transfer files
before use.
<P>
If the applet's compiled <TT><FONT FACE="Courier">Applet</FONT></TT>
subclass resides anywhere other than the base document URL, <TT><FONT FACE="Courier">CODEBASE</FONT></TT>
is needed to load the applet. <TT><FONT FACE="Courier">CODEBASE</FONT></TT>
is used to give the URL of the applet because the <TT><FONT FACE="Courier">CODE</FONT></TT>
attribute is absolute and can contain only the name of the <TT><FONT FACE="Courier">Applet</FONT></TT>
subclass. When <TT><FONT FACE="Courier">CODE</FONT></TT> is used
without <TT><FONT FACE="Courier">CODEBASE</FONT></TT>, the document's
base URL is used.
<P>
A simple way to think of this is that if you use <TT><FONT FACE="Courier">CODEBASE</FONT></TT>,
you can tell the Web browser where to look for the applet; otherwise,
the browser looks in the current directory. Thus, using <TT><FONT FACE="Courier">CODEBASE</FONT></TT>,
you can run an applet stored on a different server or in a different
directory than your Web presentation.
<P>
<TT><FONT FACE="Courier">CODEBASE</FONT></TT> is also valuable
in that it assists in organization of the Web site and frees Java
programmers from ties to a single directory, such as the <TT><FONT FACE="Courier">cgi-bin</FONT></TT>
directory normally used for CGI scripts. Creating subdirectories
in your Web publication directory for applets can help you stay
organized. In this way, Java applets can reside in their own directory,
or applets for a particular page can be grouped into a directory
on the basis of where they are used. <TT><FONT FACE="Courier">CODEBASE</FONT></TT>
enables an HTML document to refer to these directories without
having to use a document located in the same directory as the
applet. Attention to little details such as this is one reason
for Java's popularity.
<H4><TT><B><FONT FACE="Courier">NAME</FONT></B></TT></H4>
<P>
Another means of identifying an applet is the <TT><FONT FACE="Courier">NAME</FONT></TT>
attribute. It plays a key role in how applets interact with other
applets on the same Web page. By naming an applet, you can target
it from other applets on the page, which makes it possible for
applets on the same page to find and communicate with each other.
If, for example, a user activates one of three applets on a page
and all three applets are named with the <TT><FONT FACE="Courier">NAME</FONT></TT>
attribute, the active applet can pass values to the other two
applets that cause them to behave in new ways, display new images
and text, or even start a new animation sequence.
<P>
The <TT><FONT FACE="Courier">NAME</FONT></TT> attribute is also
included in the braces of the <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT>
tag. An example follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;APPLET CODEBASE=&quot;http://tvp.com/applets/HyperText&quot;
<BR>
CODE=&quot;NervousText&quot; WIDTH=400 Height=75 ALIGN=middle
NAME=appletA&gt;<BR>
&lt;/APPLET&gt;<BR>
&lt;APPLET CODEBASE=&quot;http://java.sun.com/applets/applets/NervousText&quot;
<BR>
CODE=&quot;NervousText&quot; WIDTH=400 Height=75 ALIGN=middle
NAME=appletB&gt;<BR>
&lt;/APPLET&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
In this example, <TT><FONT FACE="Courier">appletA</FONT></TT>
can communicate with <TT><FONT FACE="Courier">appletB</FONT></TT>.
When message passing is used for communication in Java applets,
using the correct name for the applet is important to ensure that
messages go to their correct destination. The name of the destination
can be passed to the sender as a parameter using the <TT><FONT FACE="Courier">PARAM</FONT></TT>
element (described next).
<H3><A NAME="ThePARAMElement"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier">PARAM</FONT></B></TT><B><FONT SIZE=4>
Element</FONT></B></A></H3>
<P>
The <TT><FONT FACE="Courier">PARAM</FONT></TT> element is used
to pass general-purpose parameters to an applet. Without it, applets
could not communicate with each other, and you could not pass
general-purpose values to applets. This section looks at how parameters
are referenced in HTML documents and Java code.
<H4><B>Parameters Referenced in HTML Documents</B></H4>
<P>
The <TT><FONT FACE="Courier">PARAM</FONT></TT> element is one
of the few elements in HTML that uses only a begin tag. You place
the begin tag, <TT><FONT FACE="Courier">&lt;PARAM&gt;</FONT></TT>,
between the opening and ending <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT>
tags. This is the only element between the <TT><FONT FACE="Courier">APPLET</FONT></TT>
tags that Java-capable Web browsers take advantage of when they
run an associated applet.
<P>
Applets access the attributes in the <TT><FONT FACE="Courier">&lt;PARAM&gt;</FONT></TT>
tag by using the <TT><FONT FACE="Courier">getParameter()</FONT></TT>
method. This enables applets to look and behave differently when
used in various Web documents.
<P>
The <TT><FONT FACE="Courier">&lt;PARAM&gt;</FONT></TT> tag has
two attributes that must be defined: the <TT><FONT FACE="Courier">NAME</FONT></TT>
attribute and the <TT><FONT FACE="Courier">VALUE</FONT></TT> attribute.
The <TT><FONT FACE="Courier">NAME</FONT></TT> attribute assigns
the name for which the <TT><FONT FACE="Courier">getParameter()</FONT></TT>
method in your applet searches. The <TT><FONT FACE="Courier">VALUE</FONT></TT>
attribute is used to pass a specific value to an applet. Here
is an example using these attributes:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;HTML&gt;<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt; Scrolling Text &lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
&lt;BODY&gt;<BR>
&lt;APPLET CODE=&quot;ScrollText&quot; WIDTH=800 HEIGHT=400&gt;
<BR>
&lt;PARAM NAME=text VALUE= &quot;Introducing the Java ScrollText
Applet!&quot;&gt;<BR>
&lt;PARAM NAME=width value=&quot;800&quot;&gt;<BR>
&lt;PARAM NAME=height value=&quot;390&quot;&gt;<BR>
&lt;/APPLET&gt;<BR>
&lt;/BODY&gt;<BR>
&lt;/HTML&gt;<BR>
</FONT></TT>
</BLOCKQUOTE>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=587>
<BLOCKQUOTE>
Do not confuse the <TT><FONT FACE="Courier">NAME</FONT></TT> attribute of the <TT><FONT FACE="Courier">&lt;PARAM&gt;</FONT></TT> tag with that of the <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT> tag. The name in the <TT><FONT 
FACE="Courier">&lt;PARAM&gt;</FONT></TT> tag is the name that the <TT><FONT FACE="Courier">getParameter()</FONT></TT> method searches for, as opposed to the <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT> attribute <TT><FONT 
FACE="Courier">NAME</FONT></TT>, which is used to give each instance of an applet a name.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
In the previous example, the applet <TT><FONT FACE="Courier">ScrollText</FONT></TT>
is being passed three separate parameters: The first is the text
the applet will display; the second and third are the width and
height again. The last two parameters are included because when
an applet is displayed by a Web browser, the dimensions of the
applet are taken from the HTML code. This can cause problems if
the creator of the applet does not prepare for it.
<H4><B>Parameters from Inside Java Code</B></H4>
<P>
All of this seems easy from the outside, but to understand how
this works in the Java code is another matter. Listing 15.2 shows
the code for the <TT><FONT FACE="Courier">ScrollText</FONT></TT>
applet.
<P>
In the listing, the <TT><FONT FACE="Courier">getParameter()</FONT></TT>
method is used on lines 16, 17, and 30. These are the points where
the Java code brings in the <TT><FONT FACE="Courier">&lt;PARAM&gt;</FONT></TT>
attributes listed in the HTML document. There can be as many <TT><FONT FACE="Courier">&lt;PARAM&gt;</FONT></TT>
attributes given as needed for the applet. For example, the <TT><FONT FACE="Courier">ScrollText</FONT></TT>
applet could be extended to receive other attributes such as the
color of the text or the background. This would be a good project
to undertake after you read <A HREF="ch16.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch16.htm" >Chapter 16</A>,
&quot;Applet Reuse.&quot;
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=588>
<BLOCKQUOTE>
In Listing 15.2, code lines that use the <TT><FONT FACE="Courier">getParameter()</FONT></TT> method are highlighted with bold text.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 15.2. The </B><TT><B><FONT FACE="Courier">ScrollText</FONT></B></TT><B>
applet.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.Graphics;<BR>
import java.awt.Font;<BR>
<BR>
/**<BR>
&nbsp;* Peter Norton's Guide to Programming Java<BR>
&nbsp;* The Java ScrollText Applet<BR>
&nbsp;* This applet is used to scroll a text banner across the
screen<BR>
&nbsp;* The applet takes TEXT, WIDTH, and HEIGHT as parameters.
<BR>
&nbsp;*/<BR>
<BR>
public class ScrollText extends java.applet.Applet implements
Runnable {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int h;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Height of applet in pixels<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int w;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Width of applet in pixels<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char separated[];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Output string in array form<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String s = null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Input string containing display text<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String hs = null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Input string containing height<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String ws = null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Input string containing width<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread ScrollThread = null;&nbsp;&nbsp;&nbsp;&nbsp;
// Thread to control processing<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int speed=35;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Length of delay in milliseconds<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean threadSuspended = false;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int dist;<BR>
<BR>
/* Setup width, height, and display text */<BR>
public void init() {<BR>
&nbsp;<B>&nbsp;&nbsp;&nbsp;</B>&nbsp;<B>ws = getParameter (&quot;width&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;</B>&nbsp;<B>hs = getParameter (&quot;height&quot;);
<BR>
&nbsp;</B>&nbsp;&nbsp;&nbsp;&nbsp;if (ws == null){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Read width as input<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w
= 150;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
If not found use default<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w
= Integer.parseInt(ws); // Convert input string to integer<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (hs == null){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Read height as input<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h
= 50;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
If not found use default<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h
= Integer.parseInt (hs); // Convert input string to integer<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resize(w,h);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Set font based on height<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setFont(new Font(&quot;TimesRoman&quot;,Font.BOLD,h
- 2));<BR>
&nbsp;<B>&nbsp;&nbsp;&nbsp;</B>&nbsp;<B>s = getParameter(&quot;text&quot;);//
Read input text, if null use default<BR>
&nbsp;</B>&nbsp;&nbsp;&nbsp;&nbsp;if (s == null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = &quot;
The Java ScrollText Applet at work.&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;separated =&nbsp;&nbsp;new char
[s.length()];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s.getChars(0,s.length(),separated,0);
<BR>
&nbsp;}<BR>
<BR>
/* Start new thread to run applet */<BR>
public void start() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(ScrollThread == null)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScrollThread =
new Thread(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScrollThread.start();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
<BR>
/* End thread containing applet */<BR>
public void stop() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScrollThread = null;<BR>
&nbsp;}<BR>
<BR>
// While applet is running pause then scroll text<BR>
public void run() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (ScrollThread != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {Thread.sleep(speed);} catch
(InterruptedException e){}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scroll();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScrollThread = null;<BR>
&nbsp;}<BR>
<BR>
// Scroll text by determining new location to draw text and redrawing
<BR>
synchronized void scroll () {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dist--;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Move string to left<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If string has disappeared to
the left, move back to right edge<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (dist + ((s.length()+1)*(h *5
/ 11)) == 0){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dist=w;<BR>
}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
}<BR>
<BR>
// Redraw string at given location<BR>
public void paint(Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawChars(separated, 0, s.length(),
dist,4 *h / 5);<BR>
&nbsp;}<BR>
<BR>
// Suspend thread when mouse is pushed, resume when pushed again
<BR>
public boolean mouseDown(java.awt.Event evt, int x, int y) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (threadSuspended)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScrollThread.resume();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScrollThread.suspend();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;threadSuspended
= !threadSuspended;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
To gain experience in working with parameter passing, type the
applet as shown and then compile it. Refer to <A HREF="ch14.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch14.htm" >Chapter 14</A>,
&quot;Creating a Java Applet,&quot; for complete instructions
on compiling an applet.
<H4><B>Possible Problems with Parameters</B></H4>
<P>
There is one problem with using the <TT><FONT FACE="Courier">&lt;PARAM&gt;</FONT></TT>
tag: Unless all possible parameters are listed and used in the
HTML document, there is no way-short of viewing the Java code-to
know what parameters are set. To demonstrate this, look again
at the <TT><FONT FACE="Courier">ScrollText</FONT></TT> applet's
HTML markup without some of the parameters listed:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;HTML&gt;<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt; Scrolling Text &lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
&lt;BODY&gt;<BR>
&lt;APPLET CODE=&quot;ScrollText&quot; WIDTH=800 HEIGHT=400&gt;
<BR>
&lt;PARAM NAME=text VALUE= &quot;Introducing the Java ScrollText
Applet!&quot;&gt;<BR>
&lt;/APPLET&gt;<BR>
&lt;/BODY&gt;<BR>
&lt;/HTML&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
In the previous example, the applet would default to the height
and width listed in the Java code. Anyone attempting to use this
applet would find it confusing when the attributes he set in the
<TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT> tag were overridden.
Therefore, HTML authors should list all unused parameters for
an applet in comments in the HTML document. A comment can be added
to an HTML document by placing it between the begin comment tag
(<TT><FONT FACE="Courier">&lt;!-</FONT></TT>) and the end comment
tag (<TT><FONT FACE="Courier">-&gt;</FONT></TT>).
<P>
You could create comments for the <TT><FONT FACE="Courier">ScrollText</FONT></TT>
applet as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;!- Java applet ScrollText takes TEXT,
WIDTH, and HEIGHT as parameters. -&gt;<BR>
&lt;APPLET CODE=&quot;ScrollText&quot; WIDTH=800 HEIGHT=400&gt;
<BR>
&lt;PARAM NAME=text VALUE= &quot;Introducing the Java ScrollText
Applet!&quot;&gt;<BR>
&lt;/APPLET&gt;</FONT></TT>
</BLOCKQUOTE>
<H2><A NAME="AddingAnimationtoWebDocuments"><B><FONT SIZE=5 COLOR=#Ff0000>Adding
Animation to Web Documents</FONT></B></A></H2>
<P>
Java-based animation is everywhere on the Web, and it might surprise
you to learn that the source of most of it is a single applet
called <TT><FONT FACE="Courier">Animator</FONT></TT>. <TT><FONT FACE="Courier">Animator</FONT></TT>
is useful for creating powerful animation sequences. But best
of all, the <TT><FONT FACE="Courier">Animator</FONT></TT> applet
is included as a demo in the JDK.
<H3><A NAME="OverviewoftheAnimatorApplet"><B>Overview of the </B><TT><B><FONT SIZE=4 FACE="Courier">Animator</FONT></B></TT><B><FONT SIZE=4>
Applet</FONT></B></A></H3>
<P>
As the name implies, the <TT><FONT FACE="Courier">Animator</FONT></TT>
applet can be used to create animation sequences. You will find
the source code in the <TT><FONT FACE="Courier">demo/Animator</FONT></TT>
directory under your base installation directory for Java. This
directory contains the following files and directories:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;Directory of C:\java\demo\Animator
<BR>
IMAGES&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
images<BR>
ANIMAT~1 JAV&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;21,410&nbsp;&nbsp;10-13-95
10:23a Animator.java<BR>
ANIMAT~1 CLA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;14,873&nbsp;&nbsp;10-13-95&nbsp;&nbsp;1:54a
Animator.class<BR>
IMAGEN~1 CLA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;706&nbsp;&nbsp;10-13-95&nbsp;&nbsp;1:54a
ImageNotFoundException.class<BR>
PARSEE~1 CLA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
410&nbsp;&nbsp;10-13-95&nbsp;&nbsp;1:54a ParseException.class
<BR>
INDEX~1&nbsp;&nbsp;HTM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3,411&nbsp;&nbsp;10-13-95&nbsp;&nbsp;1:54a
index.html<BR>
AUDIO&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
audio<BR>
EXAMPL~1 HTM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;428&nbsp;&nbsp;10-13-95&nbsp;&nbsp;1:54a
example2.html<BR>
EXAMPL~2 HTM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;477&nbsp;&nbsp;03-07-96&nbsp;&nbsp;8:32p
example3.html<BR>
EXAMPL~3 HTM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;419&nbsp;&nbsp;10-13-95&nbsp;&nbsp;1:54a
example1.html</FONT></TT>
</BLOCKQUOTE>
<P>
<TT><FONT FACE="Courier">Animator</FONT></TT> is one of the most
complex demos in the Java API. As you can see from the directory
listing, the source code for the applet is in a file called <TT><FONT FACE="Courier">Animator.java</FONT></TT>.
When this file is compiled, three class files are created: <TT><FONT FACE="Courier">Animator.class</FONT></TT>,
<TT><FONT FACE="Courier">ImageNotFoundException.class</FONT></TT>,
and <TT><FONT FACE="Courier">ParseException.class</FONT></TT>.
<P>
Look at the sample HTML documents in this directory. The file
<TT><FONT FACE="Courier">index.html</FONT></TT> provides a brief
overview of using the <TT><FONT FACE="Courier">Animator</FONT></TT>
applet. The example documents-<TT><FONT FACE="Courier">example1.html</FONT></TT>,
<TT><FONT FACE="Courier">example2.html</FONT></TT>, and <TT><FONT FACE="Courier">example3.html</FONT></TT>-contain
three different demos.
<P>
The audio files used in the examples are in the <TT><FONT FACE="Courier">audio</FONT></TT>
directory:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Directory of C:\java\demo\Animator\audio
<BR>
SPACEM~1 AU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;48,072&nbsp;&nbsp;10-13-95&nbsp;&nbsp;1:54a
spacemusic.au<BR>
1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;946&nbsp;&nbsp;10-13-95&nbsp;&nbsp;1:54a
1.au<BR>
2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1,039&nbsp;&nbsp;10-13-95&nbsp;&nbsp;1:54a
2.au<BR>
3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;993&nbsp;&nbsp;10-13-95&nbsp;&nbsp;1:54a
3.au<BR>
4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1,006&nbsp;&nbsp;10-13-95&nbsp;&nbsp;1:54a
4.au<BR>
5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1,016&nbsp;&nbsp;10-13-95&nbsp;&nbsp;1:54a
5.au<BR>
6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1,048&nbsp;&nbsp;10-13-95&nbsp;&nbsp;1:54a
6.au<BR>
7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;980&nbsp;&nbsp;10-13-95&nbsp;&nbsp;1:54a
7.au<BR>
8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1,064&nbsp;&nbsp;10-13-95&nbsp;&nbsp;1:54a
8.au<BR>
9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;989&nbsp;&nbsp;10-13-95&nbsp;&nbsp;1:54a
9.au<BR>
0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1,010&nbsp;&nbsp;10-13-95&nbsp;&nbsp;1:54a
0.au</FONT></TT>
</BLOCKQUOTE>
<P>
The file <TT><FONT FACE="Courier">spacemusic.au</FONT></TT> provides
a soundtrack example. The other files are sound sequences used
with corresponding images you will find in the <TT><FONT FACE="Courier">images</FONT></TT>
directory. The <TT><FONT FACE="Courier">images</FONT></TT> directory
contains two directories:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Directory of C:\java\demo\Animator\images
<BR>
LOADIN~1 GIF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1,518&nbsp;&nbsp;10-13-95&nbsp;&nbsp;1:54a
loading-msg.gif<BR>
SIMPLE~1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
SimpleAnimation<BR>
DUKE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02-23-96&nbsp;&nbsp;2:32p
Duke</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">loading-msg.gif</FONT></TT> image
is used in the <TT><FONT FACE="Courier">example3.html</FONT></TT>
demonstration document and provides an example of <TT><FONT FACE="Courier">startup
image</FONT></TT>. The directories <TT><FONT FACE="Courier">SimpleAnimation</FONT></TT>
and <TT><FONT FACE="Courier">Duke</FONT></TT> contain the images
used to create the demonstration animation sequences.
<H3><A NAME="UsingParametersintheAnimatorApplet"><B>Using Parameters
in the </B><TT><B><FONT SIZE=4 FACE="Courier">Animator</FONT></B></TT><B><FONT SIZE=4>
Applet</FONT></B></A></H3>
<P>
The <TT><FONT FACE="Courier">Animator</FONT></TT> applet presents
an interesting use of the <TT><FONT FACE="Courier">&lt;PARAM&gt;</FONT></TT>
tag to pass many types of values. Parameters the applet accepts
include the following:
<UL>
<LI><TT><FONT FACE="Courier">background</FONT></TT>-Name of background
image to display, such as <TT><FONT FACE="Courier">&lt;PARAM NAME=background
VALUE=&quot;wallpaper.gif&quot;&gt;</FONT></TT>.
<LI>endimage-Index number to end the animation sequence on, such
as &lt;PARAM NAME=endimage VALUE=&quot;10&quot;&gt;.
<LI>images-The images to display in succession with each image
number separated by the pipe symbol, such as &lt;PARAM NAME=images
VALUE=&quot;1|2|3|4&quot;&gt;.
<LI>imagesource-The URL path to the image files, such as &lt;PARAM
NAME=imagesource VALUE=&quot;http://tvp.com/java/apps/images&quot;&gt;.
<LI>pause-The delay time in milliseconds between images, such
as &lt;PARAM NAME=pause VALUE=&quot;100&quot;&gt;.
<LI>pauses-The delay time in milliseconds for each frame separated
by the pipe symbol, such as &lt;PARAM NAME=pauses VALUE=&quot;100|50||100|||100&quot;&gt;.
<LI>positions-The coordinate of each image frame, with the x coordinate
separated from the y coordinate by @, such as &lt;PARAM NAME=positions
VALUE=&quot;10@50|10@60|10@70&quot;&gt;.
<LI>repeat-A boolean value set to true to repeat the animation
sequence, such as &lt;PARAM NAME=repeat VALUE=&quot;true&quot;&gt;U.
<LI>sounds-The sound files to play in succession with each filename
separated by the pipe symbol, such as &lt;PARAM NAME=sounds VALUE=&quot;s1.au|s2.au|s3.au|s4.au&quot;&gt;.
<LI>soundsource-The URL path to the image files, such as &lt;PARAM
NAME=soundsource VALUE=&quot;http://tvp.com/java/apps/sounds&quot;&gt;.
<LI>soundtrack-The sound file to play in the background during
the animation, such as &lt;PARAM NAME=pauses VALUE=&quot;soundtrack.au&quot;&gt;.
<LI>startimage-Index number to start the animation sequence on,
such as &lt;PARAM NAME=startimage VALUE=&quot;2&quot;&gt;.
<LI><TT><FONT FACE="Courier">startup</FONT></TT>-Image to display
at startup while the other images are loading, such as <TT><FONT FACE="Courier">&lt;PARAM
NAME=startup VALUE=&quot;startup.gif&quot;&gt;</FONT></TT>.
</UL>
<P>
As you can see from the list of parameters and their uses, the
<TT><FONT FACE="Courier">Animator</FONT></TT> applet is quite
versatile. Because most of the animation sequences you'll see
on the Web use the <TT><FONT FACE="Courier">Animator</FONT></TT>
applet or a derivative of it, I highly recommend you look at the
source code for this applet.
<H3><A NAME="CreatingaJavaBasedAnimationwithAni"><B>Creating a
Java-Based Animation with </B><TT><B><FONT SIZE=4 FACE="Courier">Animator</FONT></B></TT></A>
</H3>
<P>
Creating an animation with the <TT><FONT FACE="Courier">Animator</FONT></TT>
applet is easy. Just create a series of images and an HTML document,
and add sound if you want to.
<P>
For your first animation, start small. If you want to create an
original animation, use a series of only three or four images.
You can also base your first animation on an existing one, such
as the animation of JavaSoft's mascot, Duke, which is included
in the demo. In this way, your first attempt at animation is sure
to be a success.
<P>
Listing 15.3 shows a sample HTML document that uses the <TT><FONT FACE="Courier">Animator</FONT></TT>
applet and the <TT><FONT FACE="Courier">Duke</FONT></TT> animation.
Recall that because the <TT><FONT FACE="Courier">CODEBASE</FONT></TT>
attribute points to the Java <TT><FONT FACE="Courier">demo</FONT></TT>
directory, the compiled source code for the applet is actually
obtained from this directory.
<HR>
<BLOCKQUOTE>
<B>Listing 15.3. A sample document using the </B><TT><B><FONT FACE="Courier">Animator</FONT></B></TT><B>
applet.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;HTML&gt;<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt; The Animator Applet &lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
&lt;BODY&gt;<BR>
&lt;APPLET CODEBASE=&quot;file:///c:java\demo\Animator&quot;<BR>
CODE=&quot;Animator&quot; width=66 height=100 VSPACE=5 HSPACE=5
ALIGN=middle &gt;<BR>
&lt;PARAM NAME=&quot;imagesource&quot; VALUE=&quot;file:///c:\java\demo\Animator\images\Duke&quot;&gt;
<BR>
&lt;PARAM NAME=&quot;pause&quot; VALUE=&quot;100&quot;&gt;<BR>
&lt;PARAM NAME=&quot;repeat&quot; VALUE=&quot;true&quot;&gt;<BR>
&lt;PARAM NAME=&quot;endimage&quot; VALUE=&quot;10&quot;&gt;<BR>
&lt;/APPLET&gt;<BR>
&lt;/BODY&gt;<BR>
&lt;/HTML&gt;</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
Because the file paths in the <TT><FONT FACE="Courier">CODEBASE</FONT></TT> and <TT><FONT FACE="Courier">VALUE</FONT></TT> attributes reference the C drive, you may need to change the paths for use on your system. For example, if the JDK is installed on 
the D: drive, you would replace references to <TT><FONT FACE="Courier">c:</FONT></TT> with <TT><FONT FACE="Courier">d:</FONT></TT>. On a UNIX system, you would remove the references to <TT><FONT FACE="Courier">c:</FONT></TT> entirely. You must change these 
references because the <TT><FONT FACE="Courier">CODEBASE</FONT></TT> and <TT><FONT FACE="Courier">VALUE</FONT></TT> attributes are used to point to the file's exact location on your file system.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="ReducingAnimationFlicker"><B><FONT SIZE=5 COLOR=#Ff0000>Reducing
Animation Flicker</FONT></B></A></H2>
<P>
A problem you will encounter whenever you use animation is <I>flicker</I>-that
annoying wavering of the image or text as the applet redraws the
screen. If you tested the <TT><FONT FACE="Courier">ScrollText</FONT></TT>
applet, you saw that the animated text flickered, and it probably
annoyed you.
<P>
To fix the flickering of the <TT><FONT FACE="Courier">ScrollText</FONT></TT>
applet you need to draw the text first to a canvas that is off
the screen. When that canvas has been drawn, it can be redisplayed
on the screen in such a short period of time that no flicker is
noticed. You will also need to modify the <TT><FONT FACE="Courier">update()</FONT></TT>
method so that it does not clear the screen between each drawing.
<P>
To create a canvas off the screen, you will need two containers.
The first container is for the image or text you will draw to
the screen. The second container is for the off-screen canvas.
Here is the code you will need to add to the variable initialization
section of the <TT><FONT FACE="Courier">ScrollText</FONT></TT>
applet:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Image offscreenImage;<BR>
Graphics offscreenGraphics;</FONT></TT>
</BLOCKQUOTE>
<P>
Next, draw to the off-screen canvas and then move the animated
text or graphics to the real canvas. To do this in the <TT><FONT FACE="Courier">ScrollText</FONT></TT>
applet, you will override the <TT><FONT FACE="Courier">paint()</FONT></TT>
method as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void paint(Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;Rectangle r = bounds();<BR>
<BR>
&nbsp;&nbsp;&nbsp;offscreenGraphics.clearRect(0,0,r.width,r.height);
<BR>
&nbsp;&nbsp;&nbsp;offscreenGraphics.drawChars(separated, 0, s.length(),
dist, 4*h/5);<BR>
&nbsp;&nbsp;&nbsp;g.drawImage(offscreenImage, 0, 0, this);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The final step is to override the <TT><FONT FACE="Courier">update()</FONT></TT>
method so that it does not clear the screen between each drawing.
This is done as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void update(Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;paint(g);<BR>
} </FONT></TT>
</BLOCKQUOTE>
<P>
The complete source code for the <TT><FONT FACE="Courier">ScrollText</FONT></TT>
applet with the flicker fix is shown in Listing 15.4.
<HR>
<BLOCKQUOTE>
<B>Listing 15.4. The </B><TT><B><FONT FACE="Courier">ScrollText</FONT></B></TT><B>
applet with flicker fix.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.Graphics;<BR>
import java.awt.Font;<BR>
import java.awt.Image;<BR>
import java.awt.Rectangle;<BR>
<BR>
/**<BR>
&nbsp;* Peter Norton's Guide to Java Programming<BR>
&nbsp;* The Java ScrollText Applet With Flicker Fix<BR>
&nbsp;* This applet is used to scroll a text banner across the
screen<BR>
&nbsp;* The applet takes TEXT, WIDTH, and HEIGHT as parameters.
<BR>
&nbsp;*/<BR>
<BR>
public class ScrollText extends java.applet.Applet implements
Runnable {<BR>
<BR>
&nbsp;&nbsp;&nbsp;int h;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Height of applet in pixels<BR>
&nbsp;&nbsp;&nbsp;int w;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Width of applet in pixels<BR>
&nbsp;&nbsp;&nbsp;char separated[];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Output string in array form<BR>
&nbsp;&nbsp;&nbsp;String s = null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Input string containing display text<BR>
&nbsp;&nbsp;&nbsp;String hs = null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Input string containing height<BR>
&nbsp;&nbsp;&nbsp;String ws = null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Input string containing width<BR>
&nbsp;&nbsp;&nbsp;Thread killme = null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Thread to control processing<BR>
&nbsp;&nbsp;&nbsp;int speed=35;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Length of delay between positions in milliseconds<BR>
&nbsp;&nbsp;&nbsp;boolean threadSuspended = false;<BR>
&nbsp;&nbsp;&nbsp;int dist;<BR>
&nbsp;&nbsp;&nbsp;Image offscreenImage;<BR>
&nbsp;&nbsp;&nbsp;Graphics offscreenGraphics;<BR>
<BR>
/* Setup width, height, and display text */<BR>
public void init() {<BR>
&nbsp;&nbsp;&nbsp;ws = getParameter (&quot;width&quot;);<BR>
&nbsp;&nbsp;&nbsp;hs = getParameter (&quot;height&quot;);<BR>
&nbsp;&nbsp;&nbsp;if (ws == null){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*
Read width as input, if not found use default */<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w = 150;<BR>
&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w = Integer.parseInt(ws);
// Convert input string to integer<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;if (hs == null){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*
Read height as input, if not found use default */<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h = 50;<BR>
&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h = Integer.parseInt (hs);
// Convert input string to integer<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;resize(w,h);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*
Set font based on height */<BR>
&nbsp;&nbsp;&nbsp;s = getParameter(&quot;text&quot;);&nbsp;&nbsp;&nbsp;/*
Read input text, if null use default */<BR>
&nbsp;&nbsp;&nbsp;if (s == null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s = &quot; The Java ScrollText
Applet at work.&quot;;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;separated =&nbsp;&nbsp;new char [s.length()];
<BR>
&nbsp;&nbsp;&nbsp;s.getChars(0,s.length(),separated,0);<BR>
&nbsp;&nbsp;&nbsp;offscreenImage = createImage(w,h);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offscreenGraphics = offscreenImage.getGraphics();
<BR>
&nbsp;&nbsp;&nbsp;offscreenGraphics.setFont(new Font(&quot;TimesRoman&quot;,Font.BOLD,h
- 2));<BR>
&nbsp;}<BR>
<BR>
/* Start new thread to run applet */<BR>
public void start() {<BR>
&nbsp;&nbsp;&nbsp;if(killme == null) <BR>
&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;killme = new Thread(this);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;killme.start();
<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
<BR>
/* End thread containing applet */<BR>
public void stop() {<BR>
&nbsp;&nbsp;&nbsp;killme = null;<BR>
&nbsp;}<BR>
<BR>
/* While applet is running pause then scroll text */<BR>
public void run() {<BR>
&nbsp;&nbsp;&nbsp;while (killme != null) {<BR>
&nbsp;&nbsp;&nbsp;try {Thread.sleep(speed);} catch (InterruptedException
e){}<BR>
&nbsp;&nbsp;&nbsp;scroll();<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;killme = null;<BR>
&nbsp;}<BR>
<BR>
/* Scroll text by determining new location to draw text and redrawing
*/<BR>
synchronized void scroll () {<BR>
&nbsp;&nbsp;&nbsp;dist-;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Move string to left<BR>
&nbsp;&nbsp;&nbsp;if (dist + ((s.length()+1)*(h *5 / 11)) == 0){&nbsp;&nbsp;&nbsp;//
If string has disappeared<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//to
the left, move back <BR>
&nbsp;&nbsp;&nbsp;dist=w;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//to
right edge<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;repaint();<BR>
}<BR>
<BR>
/* Redraw string at given location */<BR>
public void paint(Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;Rectangle r = bounds();<BR>
<BR>
&nbsp;&nbsp;&nbsp;offscreenGraphics.clearRect(0,0,r.width,r.height);
<BR>
&nbsp;&nbsp;&nbsp;offscreenGraphics.drawChars(separated, 0, s.length(),
dist, 4*h/5);<BR>
&nbsp;&nbsp;&nbsp;g.drawImage(offscreenImage, 0, 0, this);<BR>
&nbsp;}<BR>
public void update(Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;paint(g);<BR>
} <BR>
<BR>
/* Suspend thread when mouse is pushed, resume when pushed again
*/<BR>
public boolean mouseDown(java.awt.Event evt, int x, int y) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (threadSuspended)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;killme.resume();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;killme.suspend();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;threadSuspended
= !threadSuspended;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H2><A NAME="PublishingaJavaPresentationontheWe"><B><FONT SIZE=5 COLOR=#Ff0000>Publishing
a Java Presentation on the Web</FONT></B></A></H2>
<P>
Now that you are familiar with the Java extensions to HTML, you
can put together your first Java-powered Web presentation and
publish it on the Web. But before you begin, there are some things
you should consider as to when and where to use applets.
<H3><A NAME="UsingLiveApplets"><B>Using Live Applets</B></A></H3>
<P>
Determining when and where applets should be used in Web pages
is not always easy. Prior to making the decision to fill your
Web pages with applets, ask yourself if they are truly useful
and if they enhance the page. If they do not, and only add to
the load time of the page, perhaps it would be better not to use
them. Sure, it's great to show off and display a visually exciting
page, but consider how often someone will return to your page
if it takes 10 minutes to load into the Web browser.
<P>
Journalists always talk about the five Ws. It should be no different
in electronic publishing, except that instead of applying them
to a story they are applied to the construction of a Web presentation.
<P>
The first W is Who-in this case, your target audience. There has
been much ado in the press about the short attention span of today's
youth, especially that segment often referred to as Generation
X. If this is your target audience, what are the odds of them
waiting through an extremely long page load when other places
are just a click away? On the other hand, an extremely exciting
visual display can be worth the wait. There is a trade-off.
<P>
The content of your page, the What, comes next. Think about what
you are displaying. If it is a fan page that could be enhanced
by the visual display of animation or use of sound, using Java
applets left and right may be appropriate. If you are trying to
sell something, scrolling messages will attract the eye. Perhaps
using Java applets to demonstrate a sample of a software product
would help sell more copies. Whatever the case, a few Java applets
will more than likely make it all the more appealing, but overuse
can kill the best of things.
<P>
The third W, When, is easy. Start using Java applets as soon as
you are comfortable with your ability to create and incorporate
a useful applet into your presentations. Java is experiencing
tremendous growth right now. Internet users continually expect
more interaction with the sites they visit. They expect sites
to employ new technology as soon as it is available, and they
are waiting to visit more Java-powered Web sites.
<P>
Where do you place the applets? Where they will achieve the effect
you desire. If the applet is central to the design of the page,
place it centrally on the page. Placing a small animation at the
bottom of a page is usually a bad idea. If the applet is on the
page just to serve as notification that you can use applets, then
consider not using it at all. Remember that what is at the topmost
center of a Web presentation will be the first thing users see.
Do your best to use this space to grab their attention, because
other Web presentations are always just a click of a mouse button
away.
<P>
The last W, Why, is the hard part. I have pointed out several
good reasons both for and against using Java applets. The best
incentive I can think of for using Java applets is their capability
to draw people in. A well-written applet will be noticed. Friends
will tell friends about it, and some people will visit your Web
presentation just to view the applet. However, a set of &quot;been
there, done that&quot; applets will likewise keep people away
unless your Web presentation provides something of value to them.
A good rule of thumb is to use an applet if it provides additional
value to your presentation.
<P>
The use of Java applets in and of itself will not guarantee a
successful Web presentation. Using Java applets to enhance a good
presentation will only make it better. Successful presentations
come from organization, planning, and hard work. Plan your site
before you develop and publish it. If an applet is not part of
the original plan, design the modification to your site as carefully
as you would plan a change to your software. This will save you
a lot of time trying to fix the site later.
<H3><A NAME="PuttingTogetherthePresentation"><B>Putting Together
the Presentation</B></A></H3>
<P>
After you consider when and where to use applets in your Web pages,
you can start putting together your presentations. Your first
Java-powered Web presentation incorporates everything I have discussed
to this point in the chapter. Along with the <TT><FONT FACE="Courier">RGB2Hex</FONT></TT>
converter and the <TT><FONT FACE="Courier">ScrollText</FONT></TT>
applet, the presentation includes an animation featuring Duke
that comes to life with the <TT><FONT FACE="Courier">Animator</FONT></TT>
applet. As you look over the markup in Listing 15.5, pay special
attention to the <TT><FONT FACE="Courier">CODEBASE</FONT></TT>
locations.
<P>
Using <TT><FONT FACE="Courier">CODEBASE</FONT></TT>, it is not
necessary to physically locate the applets in the same directory
as the HTML document. In fact, in this example, all the applets
are in separate locations: <TT><FONT FACE="Courier">RGB2Hex</FONT></TT>
is in <TT><FONT FACE="Courier">rgbconvert</FONT></TT> under the
<TT><FONT FACE="Courier">base</FONT></TT> directory; <TT><FONT FACE="Courier">ScrollText</FONT></TT>
is in <TT><FONT FACE="Courier">scrolltext</FONT></TT> under the
<TT><FONT FACE="Courier">base</FONT></TT> directory; and <TT><FONT FACE="Courier">Animator</FONT></TT>
is in the <TT><FONT FACE="Courier">animator</FONT></TT> directory.
<HR>
<BLOCKQUOTE>
<B>Listing 15.5. A Java-powered Web presentation.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;HTML&gt;<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt; Java-powered Web presentation &lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
&lt;BODY&gt;<BR>
&lt;CENTER&gt;<BR>
&lt;H2&gt; The RGB to Hex Converter &lt;/H2&gt;<BR>
&lt;HR&gt;<BR>
&lt;P&gt;<BR>
&lt;APPLET CODEBASE=&quot;rgbconvert&quot; CODE=&quot;RGB2Hex&quot;
WIDTH=300 HEIGHT=300 &gt;<BR>
&lt;IMG SRC=&quot;RGB2Hex.gif&quot;&gt;<BR>
&lt;BLOCKQUOTE&gt;<BR>
The screenshot shows the RGB2Hex applet programmed in the Java
<BR>
programming language. This applet lets you convert RGB color<BR>
values to hexadecimal values and see the corresponding color output.
<BR>
Other applets on the page display scrolling text and an animated
image.<BR>
To see all this, you should get a Java-capable Web browser<BR>
such as the Netscape Navigator 2.0.<BR>
&lt;/BLOCKQUOTE&gt;<BR>
&lt;/APPLET&gt;<BR>
&lt;HR&gt;<BR>
&lt;!- Java applet ScrollText takes TEXT, WIDTH, and HEIGHT as
parameters. -&gt;<BR>
&lt;APPLET CODEBASE=&quot;scrolltext&quot; CODE=&quot;ScrollText&quot;
WIDTH=800 HEIGHT=50&gt;<BR>
&lt;PARAM NAME=text VALUE=&quot; The Java ScrollText Applet at
work. &quot;&gt;<BR>
&lt;PARAM NAME=width VALUE=&quot;800&quot;&gt;<BR>
&lt;PARAM NAME=height VALUE=&quot;50&quot;&gt;<BR>
&lt;/APPLET&gt;<BR>
&lt;HR&gt;<BR>
&lt;/CENTER&gt;<BR>
&lt;/P&gt;<BR>
&lt;P ALIGN=right&gt;<BR>
&lt;STRONG&gt;Powered by JAVA&lt;/STRONG&gt;<BR>
&lt;APPLET CODEBASE=&quot;animator&quot;<BR>
CODE=&quot;Animator&quot; width=66 height=100 VSPACE=5 HSPACE=5
ALIGN=middle &gt;<BR>
&lt;PARAM NAME=&quot;imagesource&quot; value=&quot;images/Duke&quot;&gt;
<BR>
&lt;PARAM NAME=&quot;pause&quot; VALUE=&quot;100&quot;&gt;<BR>
&lt;PARAM NAME=&quot;repeat&quot; VALUE=&quot;true&quot;&gt;<BR>
&lt;PARAM NAME=&quot;endimage&quot; VALUE=&quot;10&quot;&gt;<BR>
&lt;/APPLET&gt;<BR>
&lt;/P&gt;<BR>
&lt;/BODY&gt;<BR>
&lt;/HTML&gt;</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
This example assumes that you've published all the necessary files for the presentation as outlined in the next section of this chapter. If you want to use the presentation on your local system, you will need to check and possibly update the file paths to 
the applets and image files.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The Web presentation is almost finished; but before we publish
it, there are a few more things you should add. The first thing
relates to the <TT><FONT FACE="Courier">Duke</FONT></TT> animation.
The caption above it says <TT><FONT FACE="Courier">&quot;Powered
by Java&quot;</FONT></TT>, and, as unlikely as it may seem, there
may be a few people browsing the Web who have not heard of Java.
So, why not provide a link to the Java home page?
<P>
The best place to provide a link to the Java home page is on the
word <TT><FONT FACE="Courier">JAVA.</FONT></TT> The HTML code
to provide this link uses the anchor tag (<TT><FONT FACE="Courier">&lt;A&gt;</FONT></TT>)
and is simple to add. The modified line in our Web document now
looks like this:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;STRONG&gt;Powered by &lt;A HREF=&quot;http://java.sun.com&quot;&gt;JAVA&lt;/A&gt;&lt;/STRONG&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
Now the word <TT><FONT FACE="Courier">JAVA</FONT></TT> will show
up as a highlighted link to the JavaSoft home page. But if we
can do that, why not modify the code like this:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;A HREF=&quot;http://java.sun.com&quot;&gt;
<BR>
&lt;APPLET CODEBASE=&quot;animator&quot;<BR>
CODE=&quot;Animator&quot; width=66 height=100 VSPACE=5 HSPACE=5
ALIGN=middle &gt;<BR>
&lt;PARAM NAME=&quot;imagesource&quot; value=&quot;images&quot;&gt;
<BR>
&lt;PARAM NAME=&quot;pause&quot; VALUE=&quot;100&quot;&gt;<BR>
&lt;PARAM NAME=&quot;repeat&quot; VALUE=&quot;true&quot;&gt;<BR>
&lt;PARAM NAME=&quot;endimage&quot; VALUE=&quot;10&quot;&gt;<BR>
&lt;/APPLET&gt;<BR>
&lt;/A&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
After all, why not just make the applet itself the link to the
home page? You cannot do this because it does not have the expected
result of linking to the Java home page when the user clicks the
applet. The applet traps the mouse-click event itself as opposed
to allowing the HTML code to handle it. So, although applets may
contain links or provide links, they cannot themselves be links.
<P>
The last thing I recommend adding to a Web presentation is another
<TT><FONT FACE="Courier">&lt;A&gt;</FONT></TT> tag, but this time
it should include a <TT><FONT FACE="Courier">mailto</FONT></TT>
reference. This reference tells the reader's browser to open a
<TT><FONT FACE="Courier">create mail</FONT></TT> session that
will be sent to the named user and provides a method for getting
feedback on your Web presentation. The following <TT><FONT FACE="Courier">mailto</FONT></TT>
reference lets the reader send mail to the address for reporting
bugs and making feature requests for Java:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;A HREF=&quot;mailto:java@java.sun.com&quot;&gt;java@java.sun.com&lt;/A&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
The finished presentation is shown in Figure 15.2. This sample
presentation is quite basic, 
<P>
<A HREF="f15-2.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f15-2.gif" ><B>Figure 15.2 :</B> <I>The finished presentation.</I></A>
<P>
but it should help you envision how wonderful Java-powered presentations
can be.
<P>
After all this, the Web publication looks pretty good. You have
defined <TT><FONT FACE="Courier">APPLET</FONT></TT> elements with
their associated attributes and have incorporated them into an
HTML document. The next step is to publish the presentation as
a page on the World Wide Web. The page can be created to be viewed
alone or as part of a group of related pages. Regardless of the
number of pages, a display of information on the Web is considered
a Web publication.
<H3><A NAME="PublishingthePresentationontheWeb"><B>Publishing
the Presentation on the Web</B></A></H3>
<P>
To publish your Java-powered presentation, you need access to
a Web server through an Internet service provider, a commercial
service provider, or another entity. Now you are ready to publish
your presentation.
<H4><B>Step 1: Determine Where to Place Your Documents</B></H4>
<P>
The first step in publishing a Web document is to decide where
it and all its supporting material will be stored. On many of
the servers connected to the Internet, all materials set for publication
on the Web must be stored in a specific subdirectory in the user's
home directory. This subdirectory typically is named <TT><FONT FACE="Courier">public_html</FONT></TT>
on UNIX-based Web servers, but the best way to determine the directory
for your HTML documents is to ask the Web server administrator.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
Always turn to the server administrator if you have questions about directories or storage. The server administrator should understand the proper structure of the system you will be working with and can help prevent many mistakes.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Usually, Web servers map URL paths to the <TT><FONT FACE="Courier">public_html</FONT></TT>
subdirectory, and you can point to it using the tilde (<TT><FONT FACE="Courier">~</FONT></TT>)
followed by your system name. Thus, requests to <TT>http://www.<I>your_provider</I>.com/~<I>you</I></TT>
would be mapped to the subdirectory called <TT><FONT FACE="Courier">public_html</FONT></TT>
in your account, and a Web document called <TT><FONT FACE="Courier">present.html</FONT></TT>
could be accessed with the following URL:
<BLOCKQUOTE>
<TT>http://www.your_provider.com/~you/present.html</TT>
</BLOCKQUOTE>
<H4><B>Step 2: Create the Necessary Directory Structure</B></H4>
<P>
You should prepare your home directory for Web publishing by creating
the appropriately named Web directory and any necessary subdirectories.
From the command prompt in your home directory on a UNIX or Windows-based
server, you can create a directory called <TT><FONT FACE="Courier">public_html</FONT></TT>
by typing the following command:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">mkdir public_html</FONT></TT>
</BLOCKQUOTE>
<P>
Make sure that the directory has the appropriately restricted
mode for Web access, such as <TT><FONT FACE="Courier">705</FONT></TT>
on a UNIX system. The mode <TT><FONT FACE="Courier">705</FONT></TT>
means that the directory is readable, writeable, and executable
by you, but only readable and executable by others. To change
the mode of the <TT><FONT FACE="Courier">public_html</FONT></TT>
directory, type the following command:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">chmod 705 public_html</FONT></TT>
</BLOCKQUOTE>
<P>
Afterward, change to the <TT><FONT FACE="Courier">public_html</FONT></TT>
directory and create subdirectories as necessary. The use of subdirectories
helps to keep everything clear and organized inside the <TT><FONT FACE="Courier">public_html</FONT></TT>
directory. As mentioned earlier, using <TT><FONT FACE="Courier">CODEBASE</FONT></TT>
frees you from having to keep the <TT><FONT FACE="Courier">.html</FONT></TT>
files with the <TT><FONT FACE="Courier">.java</FONT></TT> or <TT><FONT FACE="Courier">.class</FONT></TT>
files. Create subdirectories for the <TT><FONT FACE="Courier">ScrollText</FONT></TT>,
<TT><FONT FACE="Courier">RGB2Hex</FONT></TT>, and <TT><FONT FACE="Courier">Animator</FONT></TT>
applets by typing the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">cd public_html<BR>
mkdir rgbconvert<BR>
mkdir scrolltext<BR>
mkdir animator<BR>
cd animator<BR>
mkdir images<BR>
</FONT></TT>
</BLOCKQUOTE>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=558>
<BLOCKQUOTE>
Be sure the <TT><FONT FACE="Courier">CODEBASE</FONT></TT> attribute for the <TT><FONT FACE="Courier">RGB2Hex</FONT></TT> applet points to the subdirectory <TT><FONT FACE="Courier">rgbconvert</FONT></TT>. Similarly, the <TT><FONT 
FACE="Courier">CODEBASE</FONT></TT> attribute for the <TT><FONT FACE="Courier">ScrollText</FONT></TT> applet should point to the subdirectory <TT><FONT FACE="Courier">scrolltext</FONT></TT>.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H4><B>Step 3: Move Your Documents</B></H4>
<P>
Next, use FTP or whatever protocol you are comfortable with to
upload all files necessary for the presentation to the appropriate
directories. The <TT><FONT FACE="Courier">RGB2Hex.java</FONT></TT>,
<TT><FONT FACE="Courier">ScrollText.java</FONT></TT>, and <TT><FONT FACE="Courier">Animator.java</FONT></TT>
files are not necessary to run the Java applets. Therefore, they
are not uploaded.
<P>
Upload the following files to the <TT><FONT FACE="Courier">rgbconvert</FONT></TT>
directory: <TT><FONT FACE="Courier">RGB2Hex.class</FONT></TT>,
<TT><FONT FACE="Courier">RGBcanvas.class</FONT></TT>, <TT><FONT FACE="Courier">RGBcontrols.class</FONT></TT>,
and <TT><FONT FACE="Courier">HexInt.class</FONT></TT>. Upload
<TT><FONT FACE="Courier">ScrollText.class</FONT></TT> to the <TT><FONT FACE="Courier">scrolltext</FONT></TT>
directory.
<P>
If you installed the JDK, you can find the <TT><FONT FACE="Courier">Animator</FONT></TT>
applet in the Java <TT><FONT FACE="Courier">demo</FONT></TT> directory
on your computer. Under this directory are subdirectories for
the images. You will find the images for the <TT><FONT FACE="Courier">Duke</FONT></TT>
animation in the <TT><FONT FACE="Courier">images/Duke</FONT></TT>
directory. Upload the following files to the <TT><FONT FACE="Courier">animator</FONT></TT>
directory: <TT><FONT FACE="Courier">Animator.class</FONT></TT>,
<TT><FONT FACE="Courier">ImageNotFoundException.class</FONT></TT>,
and <TT><FONT FACE="Courier">ParseException.class</FONT></TT>.
<P>
Now upload the following files to the <TT><FONT FACE="Courier">animator/images</FONT></TT>
directory: <TT><FONT FACE="Courier">T1.gif</FONT></TT>, <TT><FONT FACE="Courier">T2.gif</FONT></TT>,
<TT><FONT FACE="Courier">T3.gif</FONT></TT>, <TT><FONT FACE="Courier">T4.gif</FONT></TT>,
<TT><FONT FACE="Courier">T5.gif</FONT></TT>, <TT><FONT FACE="Courier">T6.gif</FONT></TT>,
<TT><FONT FACE="Courier">T7.gif</FONT></TT>, <TT><FONT FACE="Courier">T8.gif</FONT></TT>,
<TT><FONT FACE="Courier">T9.gif</FONT></TT>, and <TT><FONT FACE="Courier">T10.gif</FONT></TT>.
<P>
Next, save the HTML document for the presentation as <TT><FONT FACE="Courier">present.html</FONT></TT>
and upload it to the <TT><FONT FACE="Courier">public_html</FONT></TT>
directory. Some computer systems do not allow for file extensions
beyond three characters. If this is the case on your system, save
the document as <TT><FONT FACE="Courier">present.htm</FONT></TT>
and change the filename when it is on the Web server.
<P>
After uploading the files, ensure that the correct permissions
are set on the files. File modes are similar to directory modes.
On UNIX systems, the mode <TT><FONT FACE="Courier">705</FONT></TT>
is generally the appropriate access mode for your files. On other
systems, you will want to ensure that the files are readable but
not writeable.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=558>
<BLOCKQUOTE>
If you are interested in publishing on the Web, I highly recommend <I>Web Publishing Unleashed</I>, published by Sams.net. The book goes into great detail on every aspect of Web publishing and includes chapters on HTML, SGML, VRML, and much more. In 
particular, you may want to refer to Chapter 25, &quot;Designing and Publishing a Web Document,&quot; which provides a complete walk-through of publishing a Web document, and Chapter 26, &quot;Designing and Publishing a Web Site,&quot; which provides a 
complete walk-through of publishing a Web site.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="ViewingthePresentation"><B>Viewing the Presentation</B></A>
</H3>
<P>
To view your Java-powered presentation, you'll need to use a Java-enabled
Web browser. These will automatically run any applets on a page
when that page is first accessed. If you don't have a Java-enabled
browser, refer to <A HREF="ch3.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch3.htm" >Chapter 3</A> to learn how
to obtain and install a browser for your system.
<P>
As of this writing, browsers capable of running Java 1.0 applets
include the following:
<UL>
<LI>Netscape Navigator version 2.0 and later
<LI>HotJava browser Beta and later versions
<LI>Oracle PowerBrowser version 1.5 and later releases
<LI>Internet Explorer versions 3.0 Beta and later
</UL>
<P>
When you have a Java-enabled browser, you can view your Web presentation.
To do this, point your browser at the appropriate URL, such as
the following:
<BLOCKQUOTE>
<TT>http://www.yourprovider.com/~yourid/present.html</TT>
</BLOCKQUOTE>
<P>
After downloading the document called <TT><FONT FACE="Courier">present.html</FONT></TT>,
your browser will download the necessary files to run the applets
in the presentation. Therefore, you will notice a slight delay
before the applets display. Now, all that's left is to wait for
some feedback on your presentation.
<H2><A NAME="HowDoesJavaComparetoOtherAvailable"><B><FONT SIZE=5 COLOR=#Ff0000>How
Does Java Compare to Other Available Products? </FONT></B></A>
</H2>
<P>
Java is a wonderful language and, for what it was designed to
do, no other language comes close to it. However, this does not
mean that it is a cure-all that does everything. Java as a programming
language can be compared with other general-purpose programming
languages, including the advantages of the different languages
and the different ways they are used on the World Wide Web. The
following sections perform this comparison. Although HTML is not
considered a programming language, the boundaries between Java
and HTML are also explored here.
<H3><A NAME="JavaVersusPerl"><B>Java Versus Perl</B></A></H3>
<P>
Perl has long been the preferred language of CGI programming.
For server-based programs, few languages offer the power combined
with ease of programmability to match Perl. Perl's true strength
lies in its capability to perform rapid text parsing and its excellent
string-manipulation features. When strictly dealing with text,
Perl is often much faster than Java. However, Perl does not have
Java's strong graphics capabilities.
<P>
Java is a <I>distributed language</I>, which means that it does
not have to run on the server as Perl generally does. In addition
to saving processing power on the server, Java applets can be
moved from site to site more easily. Having Java run on the client
means that Java can be stored on and run off any type of server
without any change to the source or class files. Perl files can
be moved from site to site, but they often require slight modifications
after the move.
<P>
The biggest limitation of Java applets compared with Perl is that
Java cannot write information to the server. However, this is
a security issue, not a lack of programming power on Java's part.
Look for problems such as this to be addressed within the next
year.
<H3><A NAME="JavaVersusOtherProgrammingLanguages"><B>Java Versus
Other Programming Languages</B></A></H3>
<P>
Java can be compared with other languages besides Perl. Scripts
can be written in the UNIX shell, C, or C++, which have the advantages
of being well known and popular. They provide many low-level routines
that Java does not supply. They enable the programmer to customize
the application for a particular operating system or hardware.
They also have been in use for many years, so there is a large
quantity of existing routines for each. Therefore, don't expect
Java to replace them in every area.
<P>
Java is a robust and powerful distributed language. Java's security
also far surpasses the other languages discussed. However, this
security is not needed in all applications. Java supports code
reuse, but if large portions of the code already exist in another
language, that may be the most appropriate language to use. Java's
system independence is an advantage, but there is still an associated
overhead. For areas that require a lot of numeric calculations,
C may provide much faster response time. (<A HREF="ch18.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch18.htm" >See Chapter 18</A>,
&quot;Using Java Applications in the Real World,&quot; for the
inside scoop on using C and C++ routines with Java.)
<P>
Often, discussions about programming involve drawing analogies
to carpentry or mechanics. These analogies are correct in stating
that a programmer, like a carpenter, should use the right tool
for the job at hand. A new nail gun will never be a reason to
replace a trusty hammer, and a hot new programming language is
no reason to abandon one with which you are comfortable.
<P>
Use the programming language that is appropriate for the job.
If your project requires writing to a server, perhaps Perl or
C++ would be your best choice. But for creating distributed applets
or applications to run on the Internet, Java has no rival. Let
the job dictate the proper tool. This is true for distributed
software as well as for custom applications.
<H3><A NAME="JavaVersusOfftheShelfSoftware"><B>Java Versus Off-the-Shelf
Software</B></A></H3>
<P>
Will distributed programs written in Java replace much of the
off-the-shelf software of today? Although this might sound like
a good selling point for Java, several technological advances
will be required before this comes to fruition. Security and connection
speeds, for example, must continue to improve.
<P>
Although Java is more secure than most general-purpose software-development
languages, this security is not yet generally accepted. As the
language becomes more widely used, there will be an increase in
attempts to breach the security. Security will probably improve
as the language develops, however, and the wider use of Java will
help eliminate these concerns for many people.
<P>
Many of the speed concerns regarding transfer time for Java applets
will be eliminated if ISDN or cable modems become the next standard
for Internet connections. Using ISDN, you can connect at 64Kbps,
128Kbps, or more. Using cable modems, you can connect at speeds
exceeding one megabit per second. However, to expect transfer
rates for data across the Internet to approach the transfer rates
of typical hard drives sounds a bit far-fetched at this time.
Until these problems can be addressed, software manufacturers
can remain confident that users will want to purchase and install
local copies of most of their software.
<P>
Can Java produce software comparable in quality to what is seen
on retailer's shelves? Yes. As an application-programming language,
Java is quite competitive. In the upcoming chapters you will see
how Java can be used for creating stand-alone programs as well
as how it can support development by combining with other languages
to produce robust programs. To complete this section, let's look
at how Java works with HTML to meet user needs over the Internet.
<H3><A NAME="JavaVersusHTML"><B>Java Versus HTML</B></A></H3>
<P>
For several years, HTML has been the de facto language of the
World Wide Web. Expecting Java to replace it is out of the question;
all Web browsers make use of the markup tags inside HTML to display
a Web publication. Java is an extension of this capability, not
a replacement for it.
<P>
Some programmers believe that Java may assist in replacing the
ever-expanding set of HTML tags. Instead of relying on HTML to
format a Web document, they believe that Java can handle the formatting.
However, because Java applets take significantly longer to transfer
and run, I doubt that this will be put to use in the near future.
For most sites, users would prefer to get rapid access to information.
Because HTML files are transferred as plain text, they can be
downloaded in very little time.
<P>
When HTML documents include images and sound clips, the transfer
time is increased. In this case, Java might not significantly
increase the time to load the page. However, if the images are
static and can be successfully displayed using HTML tags, there
might not be any reason to use Java. When the images would be
more interesting if viewed one at a time, it might be advantageous
to create an applet to display them. If the user would benefit
by being able to start and stop the sound clip, a Java applet
could enhance the page as well.
<P>
Java is best working with HTML, not trying to replace it. Java
provides more capability for user interaction, but requires more
patience on the part of the users. Java is an extension to HTML
similar to the CGI scripts that first allowed users to enter data
in response to HTML forms. Applets that allow storage of multiple
URLs are actually a replacement of the CGI programs that do the
same thing. Both CGI and Java still rely on HTML for display and
distribution across the World Wide Web.
<P>
The future may well see faster data-transfer speeds across the
Internet and thus make the viewing of multiple applets a less
time-consuming event. If this happens, expect to see even more
applets than are in use today, perhaps even Web presentations
that are in fact an applet in and of themselves. In the meantime
and for the foreseeable future, Java and HTML are partners.
<H2><A NAME="Summary"><B><FONT SIZE=5 COLOR=#Ff0000>Summary</FONT></B></A>
</H2>
<P>
In this chapter, the discussion has moved from placing Java applets
on the World Wide Web to HTML tags to selecting the proper language
for programming. Some of this might seem confusing until you have
the experience of putting it into practice. When you begin to
move applets from your computer to a server for display on the
Internet, however, most of it will become clear. Just as with
programming, the best way to learn is to practice.
<P>
The Internet is changing daily, but most of the change is merely
growth and extension of protocols and methods that were already
in place. What you have learned in this chapter is not final;
it is only a jumping-off point into the Internet. Expect Java
to continue to grow and expand alongside the Internet and, most
of all, just have some fun with it as you go along.
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch14.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch14.htm"><IMG SRC="pc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/index.htm"><IMG SRC="hb.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch16.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch16.htm"><IMG 
SRC="nc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>
<HR WIDTH="100%"></P>
<P>


</BODY>
</HTML>
