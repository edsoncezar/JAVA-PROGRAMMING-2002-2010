<HTML>

<HEAD>
   <TITLE>Chapter 9 -- Introducing the Java API</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<!--Begin JavaScript roadmap code.  If editing downloaded HTML source, delete
 this portion.-->

<script language="JavaScript">
<!--

function TripodShowPopup()
{
   var bName=navigator.appName;
   var bVer=parseInt(navigator.appVersion);
   var now = new Date();
   var popupURL = "/adm/popup/roadmap.shtml?"+"member_name=er4ebus&path=peternortonjavaprograming&client_ip=200.190.100.218&ts=1015336767&ad_type=POPUP&category=net&id=9bc205b731a6255788455f60a48a9bb3";
   var popupName = "TripodPopup";

   if (bName=="Netscape" && bVer<=3)
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=614,height=150');
   }
   else
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=604,height=135');
   }
   popup.location = popupURL;
}

if(window.parent==window)
{
   TripodShowPopup();
}

// -->
</script>

<script language="JavaScript1.2">
<!--

function changeOpenFunction()
{
   var original_window_open = window.open;
   function new_open_function(url, name, features, replace)
   {
      if(name != "TripodPopup")
         return original_window_open(url, name, features, replace);
   }
   window.open = new_open_function;
}
var bName = navigator.appName;

if(bName != "Netscape")
   changeOpenFunction();

// -->
</script>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#Ff0000>Chapter 9</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#Ff0000>Introducing the Java API</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>

<UL>
<LI><A HREF="#TheJavaAPIPackages" >The Java API Packages</A>
<LI><A HREF="#TheStructureoftheAPIPackages" >The Structure of the API Packages</A>
<UL>
<LI><A HREF="#javalang" >java.lang</A>
<LI><A HREF="#javautil" >java.util</A>
<LI><A HREF="#javaio" >java.io</A>
<LI><A HREF="#javanet" >java.net</A>
<LI><A HREF="#javaawtimage" >java.awt.image</A>
<LI><A HREF="#javaawtpeer" >java.awt.peer</A>
<LI><A HREF="#javaapplet" >java.applet</A>
<LI><A HREF="#suntoolsdebug" >sun.tools.debug</A>
</UL>
<LI><A HREF="#UsingtheJavaAPI" >Using the Java API</A>
<LI><A HREF="#APIWebReferenceStructure" >API Web Reference Structure</A>
<UL>
<LI><A HREF="#PackageDocumentation" >Package Documentation</A>
<LI><A HREF="#InterfaceDocumentation" >Interface Documentation</A>
<LI><A HREF="#ClassDocumentation" >Class Documentation</A>
<LI><A HREF="#ExceptionDocumentation" >Exception Documentation</A>
</UL>
<LI><A HREF="#ConstructingCodewithDocumentationInf" >Constructing Code with Documentation Information</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
For those of you impatiently waiting to put Java to use, this
chapter will probably help with the frustration level a great
deal. Java structure is presented in Part III, &quot;Anatomy of
the Java Language.&quot; Part IV, &quot;The Java Application Programming
Interface,&quot; begins the fun part. Now it is time to fill in
the structure with some pretty fancy stuff, such as mouse clicks
and graphics. This chapter and the next four explore in detail
the capabilities of the prebuilt objects available in Java.
<P>
The <I>Application Programming Interface</I> (API) packages contain
classes and interfaces for building applets and applications.
This chapter provides an overview of all the packages available
at this writing.
<P>
Another key skill presented here is how to read the Java API documentation
online and know what to do with it. This chapter discusses how
to create a library call using the documentation and how to interpret
what the library call will do.
<H2><A NAME="TheJavaAPIPackages"><FONT SIZE=5 COLOR=#Ff0000>The
Java API Packages</FONT></A></H2>
<P>
Java <I>libraries</I> are groups of prewritten classes available
for programming. In other languages these procedures are called
system service calls, system calls, or library calls and are used
to access system time or date or to query the input device as
to its type. Java libraries function as a rich resource of functionality
for the programmer.
<P>
These libraries are gathered in <I>packages</I>-collections of
class libraries or, sometimes, of other packages. (<A HREF="ch7.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch7.htm" >See Chapter 7</A>,
&quot;Building Objects,&quot; for a discussion of packages and
class libraries.)
<P>
This chapter presents the overall concept of the Java libraries
and gives some idea of their use. Read on to get the details of
each library in the next four chapters.
<P>
Think of this aspect of Java as a pyramid. The pyramid itself
is the package, and the blocks that build it are libraries and
classes.
<P>
The top block of the pyramid package is the <TT>Object</TT><I>
</I>class. This class is the superclass to all other classes.
So we have a pyramid with the <TT>Object</TT>
class at the top, and beneath it, side by side, are the class
libraries that support the functionality of Java.
<P>
Java is designed to have great flexibility and to produce results
quickly. Someone else has gone to the work of coding classes and
interfaces to perform many feats of functionality, so why reinvent
the wheel? In fact, you can create applications in which all the
programmer needs to do is create variables and program logic through
control flow. All other aspects of the application are performed
by library calls, including painting the screen, performing input
and output, manipulating data, and closing links.
<P>
Use library calls as much as possible to guarantee results across
platforms. These classes and interfaces have been tested and,
if not completely bulletproof, are close to it.
<H2><A NAME="TheStructureoftheAPIPackages"><FONT SIZE=5 COLOR=#Ff0000>The
Structure of the API Packages</FONT></A></H2>
<P>
Java packages are made up of class libraries. Java is made up
of the following packages:
<P>
<TT>java.applet<BR>
java.lang<BR>
java.io<BR>
java.net<BR>
java.awt<BR>
java.awt.image<BR>
java.awt.peer<BR>
java.util</TT>
<P>
Recently, a new API has been added: The Java Database Connectivity
API. This API can be used to connect to databases using SQL queries.
It is not included in the base Java Developer's Kit (JDK) but
can be downloaded from Sun's Web site. At the time of this writing
this API was located at <TT><A HREF="tppmsgs\msgs0.htm#38" tppabs="http://www.javasoft.com/jdbc/">http://www.javasoft.com/jdbc/</A></TT>.
<P>
Packages are imported into program code using the following command:
<BLOCKQUOTE>
<TT>import java.awt.*;&nbsp;&nbsp;&nbsp;//imports
the.package java.awt and all of its sub-packages</TT>
</BLOCKQUOTE>
<P>
Java evaluates the <TT>import</TT>
statements and the code. Only the libraries, classes, and interfaces
used in the code are imported. Therefore, it is no waste of overhead
if more classes are imported than are used. However, it is confusing
to the programmer who must maintain the code later. Importing
more packages or libraries than are needed also slows down the
compile.
<P>
A brief description of the packages of Java and lists of the interfaces
and classes from each package are in the following sections. The
lists are included to give you a better understanding of the contents
of the package. The rest of Part IV gives specifics of each package,
including many examples of class usage.
<H3><A NAME="javalang"><TT><FONT SIZE=4 FACE="Courier">java.lang</TT></A>
</H3>
<P>
The <TT>java.lang</TT> package is
imported by default into each class at compile time. There is
no need to import it explicitly.
<P>
<TT>java.lang</TT> contains the classes
that define the fundamental elements of Java. (These elements
are covered in <A HREF="ch6.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch6.htm" >Chapter 6</A>, &quot;Fundamentals
of the Java Language.&quot;) The lists of interfaces and classes
shown in Tables 9.1 and 9.2 may look familiar after learning about
primitive data types in <A HREF="ch6.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch6.htm" >Chapter 6</A>.<BR>
<P>
<CENTER><B>Table 9.1. </B><TT><B><FONT FACE="Courier">java.lang</FONT></B></TT><B>
interfaces.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><CENTER><I>Interface</I></CENTER></TD><TD WIDTH=277><CENTER><I>Usage</I></CENTER>
</TD></TR>
<TR><TD WIDTH=100><TT>Clonable</TT>
</TD><TD WIDTH=277>Indicates object can be copied or cloned</TD>
</TR>
<TR><TD WIDTH=100><TT>Runnable</TT>
</TD><TD WIDTH=277>Indicates object can implement threads</TD>
</TR>
</TABLE></CENTER>
<P>
<P>
<CENTER><B>Table 9.2. </B><TT><B><FONT FACE="Courier">java.lang</FONT></B></TT><B>
classes.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><CENTER><I>Class Name</I></CENTER></TD><TD WIDTH=400><CENTER><I>Description</I></CENTER>
</TD></TR>
<TR><TD WIDTH=167><TT>Boolean</TT>
</TD><TD WIDTH=400>Object wrapper for the primitive type <TT>boolean</TT>
</TD></TR>
<TR><TD WIDTH=167><TT>Character</TT>
</TD><TD WIDTH=400>Object wrapper for the primitive type <TT>character</TT>
</TD></TR>
<TR><TD WIDTH=167><TT>Class</TT></TD>
<TD WIDTH=400>Contains runtime representations of all class types
</TD></TR>
<TR><TD WIDTH=167><TT>ClassLoader</TT>
</TD><TD WIDTH=400>Abstract class specifying how classes are loaded at runtime
</TD></TR>
<TR><TD WIDTH=167><TT>Double</TT>
</TD><TD WIDTH=400>Object wrapper for the primitive type <TT>double</TT>
</TD></TR>
<TR><TD WIDTH=167><TT>Float</TT></TD>
<TD WIDTH=400>Object wrapper for the primitive type <TT>float</TT>
</TD></TR>
<TR><TD WIDTH=167><TT>Integer</TT>
</TD><TD WIDTH=400>Object wrapper for the primitive type <TT>integer</TT>
</TD></TR>
<TR><TD WIDTH=167><TT>Long</TT></TD>
<TD WIDTH=400>Object wrapper for the primitive type <TT>long</TT>
</TD></TR>
<TR><TD WIDTH=167><TT>Math</TT></TD>
<TD WIDTH=400>Library of standard mathematical functions</TD>
</TR>
<TR><TD WIDTH=167><TT>Number</TT>
</TD><TD WIDTH=400>Abstract superclass to all number types</TD>
</TR>
<TR><TD WIDTH=167><TT>Object</TT>
</TD><TD WIDTH=400>Superclass to all other class types</TD></TR>
<TR><TD WIDTH=167><TT>Process</TT>
</TD><TD WIDTH=400>Library of process control methods</TD></TR>
<TR><TD WIDTH=167><TT>Runtime</TT>
</TD><TD WIDTH=400>Library of runtime access methods</TD></TR>
<TR><TD WIDTH=167><TT>SecurityManager</TT>
</TD><TD WIDTH=400>Abstract class containing security policy method templates
</TD></TR>
<TR><TD WIDTH=167><TT>String</TT>
</TD><TD WIDTH=400>Superclass for all string objects</TD></TR>
<TR><TD WIDTH=167><TT>StringBuffer</TT>
</TD><TD WIDTH=400>Superclass for all growable string objects
</TD></TR>
<TR><TD WIDTH=167><TT>System</TT>
</TD><TD WIDTH=400>Library of system interface methods</TD></TR>
<TR><TD WIDTH=167><TT>Thread</TT>
</TD><TD WIDTH=400>Superclass for all thread objects and methods
</TD></TR>
<TR><TD WIDTH=167><TT>ThreadGroup</TT>
</TD><TD WIDTH=400>Superclass for grouping multiple threads together
</TD></TR>
<TR><TD WIDTH=167><TT>Throwable</TT>
</TD><TD WIDTH=400>Superclass for all exception-handling objects and methods
</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="javautil"><TT><FONT SIZE=4 FACE="Courier">java.util</TT></A>
</H3>
<P>
<TT>java.util</TT> is the library
that contains objects used for system utilities. The <TT>Date</TT>
class with its many methods is found here, as well as <TT>Random</TT><I>,
</I>a random number generator, and <TT>Vector</TT><I>,</I>
used to provide a growable array of objects. Tables 9.3 and 9.4
present a list of interfaces and classes found in <TT>java.util</TT>.
<BR>
<P>
<CENTER><B>Table 9.3. </B><TT><B><FONT FACE="Courier">java.util</FONT></B></TT><B>
interfaces.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><CENTER><I>Interface</I></CENTER></TD><TD WIDTH=461><CENTER><I>Usage</I></CENTER>
</TD></TR>
<TR><TD WIDTH=129><TT>Enumeration</TT>
</TD><TD WIDTH=461>Indicates object can implement methods to count through a set of values
</TD></TR>
<TR><TD WIDTH=129><TT>Observer</TT>
</TD><TD WIDTH=461>Indicates object can be tracked with class <TT>Observer</TT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
<CENTER><B>Table 9.4. </B><TT><B><FONT FACE="Courier">java.util</FONT></B></TT><B>
classes.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><CENTER><I>Class Name</I></CENTER></TD><TD WIDTH=267><CENTER><I>Description</I></CENTER>
</TD></TR>
<TR><TD WIDTH=167><TT>BitSet</TT>
</TD><TD WIDTH=267>Bit-manipulation library</TD></TR>
<TR><TD WIDTH=167><TT>Date</TT></TD>
<TD WIDTH=267>Date-manipulation library</TD></TR>
<TR><TD WIDTH=167><TT>Dictionary</TT>
</TD><TD WIDTH=267>Abstract parent to class hash table</TD></TR>
<TR><TD WIDTH=167><TT>Hashtable</TT>
</TD><TD WIDTH=267>Hash table-manipulation library</TD></TR>
<TR><TD WIDTH=167><TT>Observable</TT>
</TD><TD WIDTH=267>Observer-manipulation library</TD></TR>
<TR><TD WIDTH=167><TT>Properties</TT>
</TD><TD WIDTH=267>Persistent properties class</TD></TR>
<TR><TD WIDTH=167><TT>Random</TT>
</TD><TD WIDTH=267>Random number-manipulation library</TD></TR>
<TR><TD WIDTH=167><TT>Stack</TT></TD>
<TD WIDTH=267>Stack-manipulation library</TD></TR>
<TR><TD WIDTH=167><TT>StringTokenizer</TT>
</TD><TD WIDTH=267>String token-manipulation library</TD></TR>
<TR><TD WIDTH=167><TT>Vector</TT>
</TD><TD WIDTH=267>Vector-manipulation library</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="javaio"><TT><FONT SIZE=4 FACE="Courier">java.io</TT></A>
</H3>
<P>
<TT>java.io</TT> is the library that
contains objects useful in handling the input/output between Java
and the keyboard, screen, printer, disk files, or network. It
also provides interfaces for streams and files. Tables 9.5 and
9.6 present a list of <TT>java.io</TT>
interfaces and classes.<BR>
<P>
<CENTER><B>Table 9.5. </B><TT><B><FONT FACE="Courier">java.io</FONT></B></TT><B>
interfaces.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><CENTER><I>Interface</I></CENTER></TD><TD WIDTH=420><CENTER><I>Usage</I></CENTER>
</TD></TR>
<TR><TD WIDTH=157><TT>DataInput</TT>
</TD><TD WIDTH=420>Template for classes implementing input stream methods
</TD></TR>
<TR><TD WIDTH=157><TT>DataOutput</TT>
</TD><TD WIDTH=420>Template for classes implementing output stream methods
</TD></TR>
<TR><TD WIDTH=157><TT>FilenameFilter</TT>
</TD><TD WIDTH=420>Template for classes implementing filename-filtering methods
</TD></TR>
</TABLE></CENTER>
<P>
<P>
<CENTER><B>Table 9.6. </B><TT><B><FONT FACE="Courier">java.io</FONT></B></TT><B>
classes.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><CENTER><I>Class Name</I></CENTER></TD><TD WIDTH=259><CENTER><I>Description</I></CENTER>
</TD></TR>
<TR><TD WIDTH=244><TT>BufferedInputStream</TT>
</TD><TD WIDTH=259>Buffered input stream allowing faster reads
</TD></TR>
<TR><TD WIDTH=244><TT>BufferedOutputStream</TT>
</TD><TD WIDTH=259>Buffered output stream allowing faster writes
</TD></TR>
<TR><TD WIDTH=244><TT>ByteArrayInputStream</TT>
</TD><TD WIDTH=259>Stream read from an array of bytes</TD></TR>
<TR><TD WIDTH=244><TT>ByteArrayOutputStream</TT>
</TD><TD WIDTH=259>Stream written to an array of bytes</TD></TR>
<TR><TD WIDTH=244><TT>DataInputStream</TT>
</TD><TD WIDTH=259>Generic byte-input stream</TD></TR>
<TR><TD WIDTH=244><TT>DataOutputStream</TT>
</TD><TD WIDTH=259>Generic byte-output stream</TD></TR>
<TR><TD WIDTH=244><TT>File</TT></TD>
<TD WIDTH=259>Platform-independent representations of filenames
</TD></TR>
<TR><TD WIDTH=244><TT>FileDescriptor</TT>
</TD><TD WIDTH=259>Stream read from a file descriptor</TD></TR>
<TR><TD WIDTH=244><TT>FileInputStream</TT>
</TD><TD WIDTH=259>Stream read from a file</TD></TR>
<TR><TD WIDTH=244><TT>FileOutputStream</TT>
</TD><TD WIDTH=259>Stream written to a file</TD></TR>
<TR><TD WIDTH=244><TT>FilterInputStream</TT>
</TD><TD WIDTH=259>Abstract class for filtered input streams</TD>
</TR>
<TR><TD WIDTH=244><TT>FilterOutputStream</TT>
</TD><TD WIDTH=259>Abstract class for filtered output streams
</TD></TR>
<TR><TD WIDTH=244><TT>InputStream</TT>
</TD><TD WIDTH=259>Superclass to all input stream classes</TD>
</TR>
<TR><TD WIDTH=244><TT>LineNumberInputStream</TT>
</TD><TD WIDTH=259>Input stream that is aware of line numbers
</TD></TR>
<TR><TD WIDTH=244><TT>OutputStream</TT>
</TD><TD WIDTH=259>Superclass to all output stream classes</TD>
</TR>
<TR><TD WIDTH=244><TT>PipedInputStream</TT>
</TD><TD WIDTH=259>Stream for reading data from another process
</TD></TR>
<TR><TD WIDTH=244><TT>PipedOutputStream</TT>
</TD><TD WIDTH=259>Stream for writing data to another process
</TD></TR>
<TR><TD WIDTH=244><TT>PrintStream</TT>
</TD><TD WIDTH=259>Output stream for sending formatted data to output devices
</TD></TR>
<TR><TD WIDTH=244><TT>PushbackInputStream</TT>
</TD><TD WIDTH=259>Input stream allowing a single byte to be pushed back onto the stream
</TD></TR>
<TR><TD WIDTH=244><TT>RandomAccessFile</TT>
</TD><TD WIDTH=259>Input stream allowing random access to a file
</TD></TR>
<TR><TD WIDTH=244><TT>SequenceInputStream</TT>
</TD><TD WIDTH=259>Input stream allowing multiple input streams to read in sequence
</TD></TR>
<TR><TD WIDTH=244><TT>StreamTokenizer</TT>
</TD><TD WIDTH=259>Methods for converting an input stream into tokens
</TD></TR>
<TR><TD WIDTH=244><TT>StringBufferInputStream</TT>
</TD><TD WIDTH=259>Stream read from a <TT>StringBuffer</TT>
</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="javanet"><TT><FONT SIZE=4 FACE="Courier">java.net</TT></A>
</H3>
<P>
<TT>java.net</TT> libraries contain
routines that interact with network protocols. These objects interface
with such protocols as sockets, Telnet, FTP, NNTP, and HTTP. Tables
9.7 and 9.8 present a list of <TT>java.net</TT>
interfaces and classes.<BR>
<P>
<CENTER><B>Table 9.7. </B><TT><B><FONT FACE="Courier">java.net</FONT></B></TT><B>
interfaces.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><CENTER><I>Interface</I></CENTER></TD><TD WIDTH=346><CENTER><I>Usage</I></CENTER>
</TD></TR>
<TR><TD WIDTH=244><TT>ContentHandlerFactory</TT>
</TD><TD WIDTH=346>Template for classes implementing content handlers
</TD></TR>
<TR><TD WIDTH=244><TT>SocketImplFactory</TT>
</TD><TD WIDTH=346>Template for classes implementing socket handlers
</TD></TR>
<TR><TD WIDTH=244><TT>URLStreamHandlerFactory</TT>
</TD><TD WIDTH=346>Template for classes implementing URL handlers
</TD></TR>
</TABLE></CENTER>
<P>
<P>
<CENTER><B>Table 9.8. </B><TT><B><FONT FACE="Courier">java.net</FONT></B></TT><B>
classes.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><CENTER><I>Class Name</I></CENTER></TD><TD WIDTH=351><CENTER><I>Description</I></CENTER>
</TD></TR>
<TR><TD WIDTH=177><TT>ContentHandler</TT>
</TD><TD WIDTH=351>Class for creating objects from URLs</TD></TR>
<TR><TD WIDTH=177><TT>DatagramPacket</TT>
</TD><TD WIDTH=351>Class for representing network packets</TD>
</TR>
<TR><TD WIDTH=177><TT>DatagramSocket</TT>
</TD><TD WIDTH=351>Class for representing network sockets</TD>
</TR>
<TR><TD WIDTH=177><TT>InetAddress</TT>
</TD><TD WIDTH=351>Internet address-manipulation library</TD>
</TR>
<TR><TD WIDTH=177><TT>ServerSocket</TT>
</TD><TD WIDTH=351>Server socket-implementation library</TD></TR>
<TR><TD WIDTH=177><TT>Socket</TT>
</TD><TD WIDTH=351>Client socket-implementation library</TD></TR>
<TR><TD WIDTH=177><TT>SocketImpl</TT>
</TD><TD WIDTH=351>Abstract superclass for all socket classes
</TD></TR>
<TR><TD WIDTH=177><TT>URL</TT></TD>
<TD WIDTH=351>URL-manipulation library</TD></TR>
<TR><TD WIDTH=177><TT>URLConnection</TT>
</TD><TD WIDTH=351>Abstract class for manipulating URL connections
</TD></TR>
<TR><TD WIDTH=177><TT>URLEncoder</TT>
</TD><TD WIDTH=351>Methods for tokenizing URL strings</TD></TR>
<TR><TD WIDTH=177><TT>URLStreamHandler</TT>
</TD><TD WIDTH=351>Abstract class for opening URL connection streams
</TD></TR>
</TABLE></CENTER>
<P>
<H3><TT><FONT SIZE=4 FACE="Courier">java.awt</TT></H3>
<P>
AWT stands for <I>Abstract Windowing Toolkit</I>. As its name
suggests, AWT libraries involve the GUI (graphical user interface)
parts of Java, including such elements as boxes, buttons, borders,
and menus. Tables 9.9 and 9.10 present a list of <TT>java.awt</TT>
interfaces and classes.<BR>
<P>
<CENTER><B>Table 9.9. </B><TT><B><FONT FACE="Courier">java.awt</FONT></B></TT><B>
interfaces.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><CENTER><I>Interface</I></CENTER></TD><TD WIDTH=359><CENTER><I>Usage</I></CENTER>
</TD></TR>
<TR><TD WIDTH=148><TT>LayoutManager</TT>
</TD><TD WIDTH=359>Template for classes implementing layout containers
</TD></TR>
<TR><TD WIDTH=148><TT>MenuContainer</TT>
</TD><TD WIDTH=359>Template for classes implementing menu containers
</TD></TR>
</TABLE></CENTER>
<P>
<P>
<CENTER><B>Table 9.10. </B><TT><B><FONT FACE="Courier">java.awt</FONT></B></TT><B>
classes.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><CENTER><I>Class Name</I></CENTER></TD><TD WIDTH=394><CENTER><I>Description</I></CENTER>
</TD></TR>
<TR><TD WIDTH=196><TT>BorderLayout</TT>
</TD><TD WIDTH=394>Methods for handling border layouts</TD></TR>
<TR><TD WIDTH=196><TT>Button</TT>
</TD><TD WIDTH=394>Methods for manipulating <TT>Button</TT> objects
</TD></TR>
<TR><TD WIDTH=196><TT>Canvas</TT>
</TD><TD WIDTH=394>Generic template for implementing canvases
</TD></TR>
<TR><TD WIDTH=196><TT>CardLayout</TT>
</TD><TD WIDTH=394>Methods for manipulating Rolodex-style card objects
</TD></TR>
<TR><TD WIDTH=196><TT>Checkbox</TT>
</TD><TD WIDTH=394>Methods for manipulating <TT>Checkbox</TT> objects
</TD></TR>
<TR><TD WIDTH=196><TT>CheckboxGroup</TT>
</TD><TD WIDTH=394>Methods for manipulating groups of <TT>Checkbox</TT> objects
</TD></TR>
<TR><TD WIDTH=196><TT>CheckboxMenuItem</TT>
</TD><TD WIDTH=394>Methods for manipulating <TT>Checkbox</TT>-style menus
</TD></TR>
<TR><TD WIDTH=196><TT>Choice</TT>
</TD><TD WIDTH=394>Methods for manipulating pop-up choice options
</TD></TR>
<TR><TD WIDTH=196><TT>Color</TT></TD>
<TD WIDTH=394>Methods for manipulating colors</TD></TR>
<TR><TD WIDTH=196><TT>Component</TT>
</TD><TD WIDTH=394>Generic class for implementing AWT components
</TD></TR>
<TR><TD WIDTH=196><TT>Container</TT>
</TD><TD WIDTH=394>Generic class for implementing AWT containers
</TD></TR>
<TR><TD WIDTH=196><TT>Dialog</TT>
</TD><TD WIDTH=394>Methods for manipulating a pop-up dialog box
</TD></TR>
<TR><TD WIDTH=196><TT>Dimension</TT>
</TD><TD WIDTH=394>Wrapper for representing width and height</TD>
</TR>
<TR><TD WIDTH=196><TT>Event</TT></TD>
<TD WIDTH=394>Methods for manipulating user input events</TD>
</TR>
<TR><TD WIDTH=196><TT>FileDialog</TT>
</TD><TD WIDTH=394>Methods for manipulating a file dialog box
</TD></TR>
<TR><TD WIDTH=196><TT>FlowLayout</TT>
</TD><TD WIDTH=394>Methods for manipulating flow of <TT>Window</TT> objects
</TD></TR>
<TR><TD WIDTH=196><TT>Font</TT></TD>
<TD WIDTH=394>Methods for manipulating fonts</TD></TR>
<TR><TD WIDTH=196><TT>FontMetrics</TT>
</TD><TD WIDTH=394>Methods for manipulating font characteristics
</TD></TR>
<TR><TD WIDTH=196><TT>Frame</TT></TD>
<TD WIDTH=394>Methods for handling frames</TD></TR>
<TR><TD WIDTH=196><TT>Graphics</TT>
</TD><TD WIDTH=394>Abstract superclass to all <TT>Graphics</TT> objects
</TD></TR>
<TR><TD WIDTH=196><TT>GridBagConstraints</TT>
</TD><TD WIDTH=394>Methods for placing restraints on <TT>GridBag</TT> layouts
</TD></TR>
<TR><TD WIDTH=196><TT>GridBagLayout</TT>
</TD><TD WIDTH=394>Methods for placing objects in a window in a specified way
</TD></TR>
<TR><TD WIDTH=196><TT>GridLayout</TT>
</TD><TD WIDTH=394>Methods for manipulating grid layout containers
</TD></TR>
<TR><TD WIDTH=196><TT>Image</TT></TD>
<TD WIDTH=394>Abstract class for implementing platform-specific images
</TD></TR>
<TR><TD WIDTH=196><TT>Insets</TT>
</TD><TD WIDTH=394>Methods for manipulating insets in containers
</TD></TR>
<TR><TD WIDTH=196><TT>Label</TT></TD>
<TD WIDTH=394>Methods for manipulating labels</TD></TR>
<TR><TD WIDTH=196><TT>List</TT></TD>
<TD WIDTH=394>Methods for manipulating lists</TD></TR>
<TR><TD WIDTH=196><TT>MediaTracker</TT>
</TD><TD WIDTH=394>Methods for tracking media objects</TD></TR>
<TR><TD WIDTH=196><TT>Menu</TT></TD>
<TD WIDTH=394>Methods for manipulating menus</TD></TR>
<TR><TD WIDTH=196><TT>MenuBar</TT>
</TD><TD WIDTH=394>Methods for manipulating menu bars</TD></TR>
<TR><TD WIDTH=196><TT>MenuComponent</TT>
</TD><TD WIDTH=394>Superclass to all menu objects</TD></TR>
<TR><TD WIDTH=196><TT>MenuItem</TT>
</TD><TD WIDTH=394>Methods for manipulating menu items</TD></TR>
<TR><TD WIDTH=196><TT>Panel</TT></TD>
<TD WIDTH=394>Generic class for implementing panel containers
</TD></TR>
<TR><TD WIDTH=196><TT>Point</TT></TD>
<TD WIDTH=394>Wrapper for representing points</TD></TR>
<TR><TD WIDTH=196><TT>Polygon</TT>
</TD><TD WIDTH=394>Wrapper for representing polygons</TD></TR>
<TR><TD WIDTH=196><TT>Rectangle</TT>
</TD><TD WIDTH=394>Wrapper for representing rectangles</TD></TR>
<TR><TD WIDTH=196><TT>Scrollbar</TT>
</TD><TD WIDTH=394>Methods for manipulating scrollbars</TD></TR>
<TR><TD WIDTH=196><TT>TextArea</TT>
</TD><TD WIDTH=394>Methods for manipulating text areas</TD></TR>
<TR><TD WIDTH=196><TT>TextComponent</TT>
</TD><TD WIDTH=394>Superclass to all text objects</TD></TR>
<TR><TD WIDTH=196><TT>TextField</TT>
</TD><TD WIDTH=394>Methods for manipulating single lines of text
</TD></TR>
<TR><TD WIDTH=196><TT>Toolkit</TT>
</TD><TD WIDTH=394>Class used to bind the AWT to a specific implementation
</TD></TR>
<TR><TD WIDTH=196><TT>Window</TT>
</TD><TD WIDTH=394>Methods for manipulating a <TT>Window</TT> object
</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="javaawtimage"><TT><FONT SIZE=4 FACE="Courier">java.awt.image</TT></A>
</H3>
<P>
As is evident from the package title, <TT>java.awt.image</TT>
is a subpackage of <TT>java.awt</TT>.
<TT>java.awt.image</TT>'s classes
primarily involve the screen image as a whole, in contrast to
<TT>java.awt</TT>, which involves
the individual elements of a screen image. Tables 9.11 and 9.12
present the interfaces and classes found in <TT>java.awt.image</TT>.
<BR>
<P>
<CENTER><B>Table 9.11. </B><TT><B><FONT FACE="Courier">java.awt.image</FONT></B></TT><B>
interfaces.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><CENTER><I>Interface</I></CENTER></TD><TD WIDTH=374><CENTER><I>Usage</I></CENTER>
</TD></TR>
<TR><TD WIDTH=148><TT>ImageConsumer</TT>
</TD><TD WIDTH=374>Template for receiving images from an image producer
</TD></TR>
<TR><TD WIDTH=148><TT>ImageObserver</TT>
</TD><TD WIDTH=374>Template for receiving image-update information
</TD></TR>
<TR><TD WIDTH=148><TT>ImageProducer</TT>
</TD><TD WIDTH=374>Template for producing images for an image consumer
</TD></TR>
</TABLE></CENTER>
<P>
<P>
<CENTER><B>Table 9.12. </B><TT><B><FONT FACE="Courier">java.awt.image</FONT></B></TT><B>
classes.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><CENTER><I>Class Name</I></CENTER></TD><TD WIDTH=345><CENTER><I>Description</I></CENTER>
</TD></TR>
<TR><TD WIDTH=205><TT>ColorModel</TT>
</TD><TD WIDTH=345>Abstract class for converting among color models
</TD></TR>
<TR><TD WIDTH=205><TT>CropImageFilter</TT>
</TD><TD WIDTH=345>Methods for cropping images</TD></TR>
<TR><TD WIDTH=205><TT>DirectColorModel</TT>
</TD><TD WIDTH=345>Methods for translating color models</TD></TR>
<TR><TD WIDTH=205><TT>FilteredImageSource</TT>
</TD><TD WIDTH=345>Methods for applying filters to an image</TD>
</TR>
<TR><TD WIDTH=205><TT>ImageFilter</TT>
</TD><TD WIDTH=345>Methods for implementing an image filter</TD>
</TR>
<TR><TD WIDTH=205><TT>IndexColorModel</TT>
</TD><TD WIDTH=345>Methods for translating color models</TD></TR>
<TR><TD WIDTH=205><TT>MemoryImageSource</TT>
</TD><TD WIDTH=345>Methods for creating images using arrays of pixels
</TD></TR>
<TR><TD WIDTH=205><TT>PixelGrabber</TT>
</TD><TD WIDTH=345>Methods to extract a subset of an image</TD>
</TR>
<TR><TD WIDTH=205><TT>RGBImageFilter</TT>
</TD><TD WIDTH=345>Methods for implementing an RGB filter</TD>
</TR>
</TABLE></CENTER>
<P>
<H3><A NAME="javaawtpeer"><TT><FONT SIZE=4 FACE="Courier">java.awt.peer</TT></A>
</H3>
<P>
<TT>java.awt.peer</TT> is also a subpackage
of <TT>java.awt</TT>. <TT>java.awt.peer</TT>
consists only of interfaces. (See Table 9.13.) It is used in conjunction
with <TT>java.awt</TT> to provide
platform-dependent graphics for the window. The Java interpreter
handles the call on a platform-specific basis.
<P>
<CENTER><B>Table 9.13. </B><TT><B><FONT FACE="Courier">java.awt.peer</FONT></B></TT><B>
interfaces.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><CENTER><I>Interface</I></CENTER></TD><TD WIDTH=375><CENTER><I>Usage</I></CENTER>
</TD></TR>
<TR><TD WIDTH=215><TT>ButtonPeer</TT>
</TD><TD WIDTH=375>Native template for manipulating <TT>Button</TT> objects
</TD></TR>
<TR><TD WIDTH=215><TT>CanvasPeer</TT>
</TD><TD WIDTH=375>Native template for implementing canvases</TD>
</TR>
<TR><TD WIDTH=215><TT>CheckboxPeer</TT>
</TD><TD WIDTH=375>Native template for manipulating <TT>Checkbox</TT> objects
</TD></TR>
<TR><TD WIDTH=215><TT>CheckboxMenuItemPeer</TT>
</TD><TD WIDTH=375>Native template for manipulating <TT>Checkbox</TT>-style menus
</TD></TR>
<TR><TD WIDTH=215><TT>ChoicePeer</TT>
</TD><TD WIDTH=375>Native template for manipulating pop-up choice options
</TD></TR>
<TR><TD WIDTH=215><TT>ComponentPeer</TT>
</TD><TD WIDTH=375>Native template for implementing AWT components
</TD></TR>
<TR><TD WIDTH=215><TT>ContainerPeer</TT>
</TD><TD WIDTH=375>Native template for implementing AWT containers
</TD></TR>
<TR><TD WIDTH=215><TT>DialogPeer</TT>
</TD><TD WIDTH=375>Native template for manipulating a pop-up dialog box
</TD></TR>
<TR><TD WIDTH=215><TT>FileDialogPeer</TT>
</TD><TD WIDTH=375>Native template for manipulating a file dialog box
</TD></TR>
<TR><TD WIDTH=215><TT>FramePeer</TT>
</TD><TD WIDTH=375>Native template for handling frames</TD></TR>
<TR><TD WIDTH=215><TT>LabelPeer</TT>
</TD><TD WIDTH=375>Native template for manipulating labels</TD>
</TR>
<TR><TD WIDTH=215><TT>ListPeer</TT>
</TD><TD WIDTH=375>Native template for manipulating lists</TD>
</TR>
<TR><TD WIDTH=215><TT>MenuBarPeer</TT>
</TD><TD WIDTH=375>Native template for manipulating menu bars
</TD></TR>
<TR><TD WIDTH=215><TT>MenuComponentPeer</TT>
</TD><TD WIDTH=375>Superclass to all menu objects</TD></TR>
<TR><TD WIDTH=215><TT>MenuPeer</TT>
</TD><TD WIDTH=375>Native template for manipulating menus</TD>
</TR>
<TR><TD WIDTH=215><TT>MenuItemPeer</TT>
</TD><TD WIDTH=375>Native template for manipulating menu items
</TD></TR>
<TR><TD WIDTH=215><TT>PanelPeer</TT>
</TD><TD WIDTH=375>Native template for implementing panel containers
</TD></TR>
<TR><TD WIDTH=215><TT>ScrollbarPeer</TT>
</TD><TD WIDTH=375>Native template for manipulating scrollbars
</TD></TR>
<TR><TD WIDTH=215><TT>TextAreaPeer</TT>
</TD><TD WIDTH=375>Native template for manipulating text areas
</TD></TR>
<TR><TD WIDTH=215><TT>TextComponentPeer</TT>
</TD><TD WIDTH=375>Superclass to all text objects</TD></TR>
<TR><TD WIDTH=215><TT>TextFieldPeer</TT>
</TD><TD WIDTH=375>Native template for manipulating single lines of text
</TD></TR>
<TR><TD WIDTH=215><TT>WindowPeer</TT>
</TD><TD WIDTH=375>Native template for manipulating a <TT>Window</TT> object
</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="javaapplet"><TT><FONT SIZE=4 FACE="Courier">java.applet</TT></A>
</H3>
<P>
The <TT>java.applet</TT> package contains
an applet-specific class-<TT>Applet</TT>-and
several interfaces. The <TT>Applet</TT>
class contains the methods <TT>init</TT><I>,
</I><TT>start</TT><I>, </I><TT>stop</TT>,
and <TT>destroy</TT> (covered in <A HREF="ch7.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch7.htm" >Chapter 7</A>).
In other words, the <TT>java.applet</TT>
package is used to control the structure and use of applets. Table
9.14 lists the interfaces for this package.<BR>
<P>
<CENTER><B>Table 9.14. </B><TT><B><FONT FACE="Courier">java.applet</FONT></B></TT><B>
interfaces.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><CENTER><I>Interface</I></CENTER></TD><TD WIDTH=442><CENTER><I>Usage</I></CENTER>
</TD></TR>
<TR><TD WIDTH=148><TT>AppletContext</TT>
</TD><TD WIDTH=442>Template for obtaining information about an applet's environment
</TD></TR>
<TR><TD WIDTH=148><TT>AppletStub</TT>
</TD><TD WIDTH=442>Template used to implement an applet viewer
</TD></TR>
<TR><TD WIDTH=148><TT>AudioClip</TT>
</TD><TD WIDTH=442>Template for implementing audio objects</TD>
</TR>
</TABLE></CENTER>
<P>
<H3><A NAME="suntoolsdebug"><TT><FONT SIZE=4 FACE="Courier">sun.tools.debug</TT></A>
</H3>
<P>
The <TT>sun.tools.debug</TT> libraries
are used in conjunction with the debug-enabled Java binaries such
as <TT>javac_g</TT>. These are used
for debugging Java programs with tools such as the Java Debugger
(<TT>jdb</TT>). The <TT>sun.tools.debug</TT>
interface, <TT>DebuggerCallback</TT>,
is a template for implementing communications between an application
and a debugger. The classes in this package are listed in Table
9.15 for your reference.<BR>
<P>
<CENTER><B>Table 9.15. </B><TT><B><FONT FACE="Courier">sun.tools.debug</FONT></B></TT><B>
classes.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><CENTER><I>Class Name</I></CENTER></TD><TD WIDTH=385><CENTER><I>Description</I></CENTER>
</TD></TR>
<TR><TD WIDTH=205><TT>RemoteArray</TT>
</TD><TD WIDTH=385>Methods for debugging <TT>array</TT>s
</TD></TR>
<TR><TD WIDTH=205><TT>RemoteBoolean</TT>
</TD><TD WIDTH=385>Methods for debugging <TT>boolean</TT>s
</TD></TR>
<TR><TD WIDTH=205><TT>RemoteByte</TT>
</TD><TD WIDTH=385>Methods for debugging <TT>byte</TT>s
</TD></TR>
<TR><TD WIDTH=205><TT>RemoteChar</TT>
</TD><TD WIDTH=385>Methods for debugging <TT>char</TT>s
</TD></TR>
<TR><TD WIDTH=205><TT>RemoteClass</TT>
</TD><TD WIDTH=385>Methods for accessing a class from a debugger
</TD></TR>
<TR><TD WIDTH=205><TT>RemoteDebugger</TT>
</TD><TD WIDTH=385>Methods for instantiating a debugger</TD></TR>
<TR><TD WIDTH=205><TT>RemoteDouble</TT>
</TD><TD WIDTH=385>Methods for debugging <TT>double</TT>s
</TD></TR>
<TR><TD WIDTH=205><TT>RemoteField</TT>
</TD><TD WIDTH=385>Methods for accessing variables or methods via a debugger
</TD></TR>
<TR><TD WIDTH=205><TT>RemoteFloat</TT>
</TD><TD WIDTH=385>Methods for debugging <TT>float</TT>s
</TD></TR>
<TR><TD WIDTH=205><TT>RemoteInt</TT>
</TD><TD WIDTH=385>Methods for debugging <TT>int</TT>s
</TD></TR>
<TR><TD WIDTH=205><TT>RemoteLong</TT>
</TD><TD WIDTH=385>Methods for debugging <TT>long</TT>s
</TD></TR>
<TR><TD WIDTH=205><TT>RemoteObject</TT>
</TD><TD WIDTH=385>Methods for accessing objects via a debugger
</TD></TR>
<TR><TD WIDTH=205><TT>RemoteShort</TT>
</TD><TD WIDTH=385>Methods for debugging <TT>short</TT>s
</TD></TR>
<TR><TD WIDTH=205><TT>RemoteStackFrame</TT>
</TD><TD WIDTH=385>Methods for accessing the stack frame of a suspended thread
</TD></TR>
<TR><TD WIDTH=205><TT>RemoteStackVariable</TT>
</TD><TD WIDTH=385>Methods for accessing stack variables via a debugger
</TD></TR>
<TR><TD WIDTH=205><TT>RemoteString</TT>
</TD><TD WIDTH=385>Methods for debugging strings</TD></TR>
<TR><TD WIDTH=205><TT>RemoteThread</TT>
</TD><TD WIDTH=385>Methods for debugging threads</TD></TR>
<TR><TD WIDTH=205><TT>RemoteThreadGroup</TT>
</TD><TD WIDTH=385>Methods for debugging <TT>threadgroup</TT>s
</TD></TR>
<TR><TD WIDTH=205><TT>RemoteValue</TT>
</TD><TD WIDTH=385>Methods for accessing variable values via a debugger
</TD></TR>
<TR><TD WIDTH=205><TT>StackFrame</TT>
</TD><TD WIDTH=385>Wrapper for the stack frame of a suspended thread
</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="UsingtheJavaAPI"><FONT SIZE=5 COLOR=#Ff0000>Using
the Java API</FONT></A></H2>
<P>
Now that we have flown over the packages at 30,000 feet, let's
talk about ways these packages are useful to programmers. The
Java class libraries provide a basis for most of the work that
needs to be accomplished in an application. This includes painting
a screen, getting information from the user, displaying it, allowing
corrections, manipulating the input data, perhaps storing the
data, and so on. It is up to the programmer to decide which class
to use to get the job done.
<P>
It may appear to the Java beginner that it is easier to do all
the coding, or to learn a few of the classes and ignore the rest,
than to become familiar with the huge number of classes available
in Java. This would be a very self-limiting course of action-part
of learning Java classes is learning about constructors, methods,
and variables.
<P>
Sun Microsystems's Web sites have a complete set of documentation
covering Java's API. They are located at
<BLOCKQUOTE>
<TT><A HREF="tppmsgs\msgs0.htm#39" tppabs="http://java.sun.com/">http://java.sun.com</A></TT>
</BLOCKQUOTE>
<P>
and
<BLOCKQUOTE>
<TT><A HREF="tppmsgs\msgs0.htm#2" tppabs="http://www.javasoft.com/">http://www.javasoft.com</A></TT>
</BLOCKQUOTE>
<P>
The documentation is available as either browsable Web pages or
PostScript files, which are simply screen shots of the Web pages.
The browsable API documentation provides a fast way to look up
specific information. (This section makes a lot more sense if
you are looking at the appropriate online documentation at the
same time you are reading the description.) The documentation
is also available for downloading in a variety of formats, including
PostScript, HTML, and PDF. At the time of this writing, this documentation
could be found at
<BLOCKQUOTE>
<TT><A HREF="tppmsgs\msgs0.htm#40" tppabs="http://www.javasoft.com/java.sun.com/newdocs.html">http://www.javasoft.com/java.sun.com/newdocs.html</A></TT>
</BLOCKQUOTE>
<H2><A NAME="APIWebReferenceStructure"><FONT SIZE=5 COLOR=#Ff0000>API
Web Reference Structure</FONT></A></H2>
<P>
This section is a short tutorial on how to use the Sun Web page
based on Sun's Web site at this writing. Web sites change constantly,
so do not be surprised if these instructions are less than correct
when you read this. As always, your mileage may vary.
<P>
The first part of this section covers the structure of the package
documentation. Just looking at the structure of the documentation
can be very confusing the first few times. Still, it is important
to understand where to look for information in the API documentation.
<P>
The second part of this section is a step-by-step instruction
on getting information from Web pages and what to do with it.
Code constructed from the examples demonstrates the implementation
of this information.
<P>
The documentation is divided into packages:
<BLOCKQUOTE>
<TT>java.lang<BR>
java.util<BR>
java.io<BR>
java.net<BR>
java.applet<BR>
java.awt<BR>
java.awt.image<BR>
java.awt.peer<BR>
sun.tools.debug</TT>
</BLOCKQUOTE>
<H3><A NAME="PackageDocumentation">Package Documentation</A></H3>
<P>
The <I>package page</I> contains the interface index, the variable
index, and the class index (see Figure 9.1). Some packages also
have an exception index or an error index.
<P>
<A HREF="f9-1.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f9-1.gif" ><B>Figure 9.1 : </B><I>The java.awt packagereference page.</I></A>
<P>
The <I>interface index</I> is a list of the interface names contained
in the package. The <I>class index</I> is a list of class names
contained in the package. The <I>exception index</I> is a list
of exception names accessed by the classes in the package; the
exceptions themselves are contained in the <TT>java.lang</TT>
package. The <I>error index</I> is a list of error names accessed
by the classes in the package.
<H3><A NAME="InterfaceDocumentation">Interface Documentation</A>
</H3>
<P>
The <I>interface section</I> contains the actual reference information
for each interface in the package. Multiple interfaces are broken
out separately into an interface definition, a method index, and
method definitions. Interfaces can also have a variable index.
Remember, interfaces do not contain code (<A HREF="ch7.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch7.htm" >see Chapter 7</A>);
they are the structure of what must be implemented in either Sun-
or programmer-written methods.
<P>
The <I>interface definition</I> contains basic information about
the interface. It shows the interface declaration and a description
of the interface's purpose. The declaration can include an <TT>extends</TT>
keyword that shows other interfaces on which this interface is
based. The interface definition also includes, in the <I>declaration
section</I>, the declaration used to define the interface and
a description of the possible uses of the interface.
<P>
There is usually a <I>method index</I>, which gives a brief index
of all methods contained in the interface. (See Figure 9.2.) This
includes the name of the method, the method parameter list, and
a brief description of the method. The sections <I>method name</I>
and <I>parameter list</I> list the method name and the parameter
types the method accepts. It also includes a short description
of the method's purpose.
<P>
<A HREF="f9-2.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f9-2.gif" ><B>Figure 9.2 : </B><I>The method index from Java.applet.AppletContext.</I></A>
<P>
The <I>methods definition</I> section of the interface is a more
detailed description of each method in the interface. It includes
a section on <I>method name</I>, which contains the name of the
method and the <I>declaration</I> used in the interface to declare
the method. This is the declaration that must be used when implementing
the interface. Finally, it includes a description of the use of
the interface.
<P>
The interface documentation also can contain a <I>variable index.</I>
The variable index is a list of variables defined in the interface
as well as a short definition of the variable. (See <TT>java.awt.image.ImageConsumer</TT>
for an interface that uses several variables.)
<P>
The <I>variables section</I> gives more detail on the variables
defined in the interface. Figure 9.3 is an example from interface
<TT>java.awt.image.ImageConsumer</TT>.
<P>
<A HREF="f9-3.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f9-3.gif" ><B>Figure 9.3 : </B><I>The variable index from java.awt.image.ImageConsumer.</I></A>
<H3><A NAME="ClassDocumentation">Class Documentation</A></H3>
<P>
The <I>classes section</I> contains the reference information
for each class in the package. If a package contains multiple
classes, each is broken out separately into inheritance, structure
of class, class definition, the variable index, the constructor
index, the method index, variables, constructors, and methods.
(Some of these sections may be missing if the class does not use
them.)
<P>
The inheritance class structure appears at the top of the page
in classes. It is a visual and textual explanation of the inheritance
structure of the class. An example of this structure is shown
in Fig-ure 9.4.
<P>
<A HREF="f9-4.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f9-4.gif" ><B>Figure 9.4 : </B><I>Class documentation from java.applet.Applet.</I></A>
<P>
The visual reference shows the class and each of its superclasses
until the top of the hierarchy is reached. Directly beneath this
is a section that gives a brief definition of the class and possibly
additional information such as cross-references. An example of
the definition is
<BLOCKQUOTE>
<TT>public class Button<BR>
</TT>&nbsp;&nbsp;&nbsp;extends Component.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>&nbsp;&nbsp;&nbsp;A class that produces
a labeled button component.</TT>
</BLOCKQUOTE>
<P>
This is basic information showing how the class is declared and
a description of its purpose. The declaration also can include
an <TT>extends</TT> keyword that shows
other classes on which this class may be based.
<P>
The <I>variable index </I>is list of appropriate variables for
the class. For example, in the <TT>java.awt.image.ColorModel</TT>
class, you will find this:
<BLOCKQUOTE>
<TT>Variable Index<BR>
<BR>
pixel bits</TT>
</BLOCKQUOTE>
<P>
The <I>constructor index</I> is a list of the constructors for
the method. It also contains a brief description of the constructor,
as in the following example from <TT>java.awt.Button</TT>:
<BLOCKQUOTE>
<TT>Button()<BR>
</TT>&nbsp;&nbsp;&nbsp; Constructs a Button with no label.
<BR>
Button(String)<BR>
<TT>&nbsp;&nbsp;&nbsp;Constructs a Button
with a string label.</TT>
</BLOCKQUOTE>
<P>
Remember, constructors are used to create new objects.
<P>
The <I>method index</I> is a list of methods in the class. It
also contains a brief description of the method, as in the following
example from the <TT>java.awt.Button</TT>
class:
<BLOCKQUOTE>
<TT>addNotify()<BR>
</TT>&nbsp;&nbsp;&nbsp;Creates the peer of the button.
<BR>
getLabel()<BR>
&nbsp;&nbsp;&nbsp;Gets the label of the button.<BR>
paramString()<BR>
&nbsp;&nbsp;&nbsp;Returns the parameter String of this button.
<BR>
setLabel(String)<BR>
<TT>&nbsp;&nbsp;&nbsp;Sets the button with
the specified label.</TT>
</BLOCKQUOTE>
<P>
The <I>variable section</I> contains more detailed information
about variables declared in the class. The following code fragment
is from the <TT>java.awt.image.ColorModel</TT>
class:
<BLOCKQUOTE>
<TT>Variables<BR>
</TT>pixel_bits<BR>
<TT>protected int pixel_bits</TT>
</BLOCKQUOTE>
<P>
<TT>pixel_bits</TT><I> </I>is a variable
that has access security of <TT>protected</TT>,
is of primitive data type <TT>int</TT>,
and is named <TT>pixel_bits</TT>.
Therefore, any time this class is imported in a Java program,
the <TT>pixel_bits</TT> variable is
available.
<P>
The <I>constructors</I> section of the class lists the constructors
contained in the library. This is shown in the following code
fragment from <TT>java.awt.Button</TT>:
<BLOCKQUOTE>
<TT>Button<BR>
</TT>&nbsp;&nbsp;&nbsp;public Button()<BR>
&nbsp;&nbsp;&nbsp;Constructs a Button with no label.<BR>
Button<BR>
&nbsp;&nbsp;&nbsp;public Button(String label)<BR>
&nbsp;&nbsp;&nbsp;Constructs a Button with a string label.<BR>
&nbsp;&nbsp;&nbsp;Parameter:<BR>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;label -
the button label.</TT>
</BLOCKQUOTE>
<P>
The <I>methods definition</I> section lists the methods contained
in the class and contains detailed information about their use.
It lists the methods alphabetically and gives declaration syntax.
The methods section also gives a detailed definition of the method,
lists parameter information, lists overrides, and includes a &quot;See
Also&quot; section. Each method may have a part or all of these
elements, depending on applicability. Following is the <TT>addNotify</TT>
method from <TT>java.awt.Button</TT>:
<BLOCKQUOTE>
<TT>addNotify<BR>
</TT>&nbsp;&nbsp;&nbsp;public synchronzed void addNotify()
<BR>
&nbsp;&nbsp;&nbsp;Creates the peer of the button.  This peer allows
us to change the look of the<BR>
&nbsp;&nbsp;&nbsp;button without changing its functionality.<BR>
&nbsp;&nbsp;&nbsp;Overrides:<BR>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addNotify
is class Component</TT>
</BLOCKQUOTE>
<P>
This method definition contains information about overrides. The
following is the <TT>getLabel</TT>
method from <TT>java.awt.Button</TT>:
<BLOCKQUOTE>
<TT>getLabel<BR>
</TT>&nbsp;&nbsp;&nbsp;public String getLabel()<BR>
&nbsp;&nbsp;&nbsp;Gets the label of the button.<BR>
&nbsp;&nbsp;&nbsp;See Also:<BR>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLabel</TT>
</BLOCKQUOTE>
<P>
This definition has information about other methods in the class
to cross-reference, in this case <TT>setLabel</TT>.
The <TT>setLabel</TT> definition includes
information on parameters, like this:
<BLOCKQUOTE>
<TT>setLabel<BR>
</TT>&nbsp;&nbsp;&nbsp;public void setLabel(String label)
<BR>
&nbsp;&nbsp;&nbsp;Set the button with the specified label.<BR>
&nbsp;&nbsp;&nbsp;Parameters:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Label - the label to set the
button with<BR>
&nbsp;&nbsp;&nbsp;See Also:<BR>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getLabel</TT>
</BLOCKQUOTE>
<H3><A NAME="ExceptionDocumentation">Exception Documentation</A>
</H3>
<P>
The <I>exception index</I> contains a list of exceptions used
in a package. These exceptions are usually part of package <TT>java.lang</TT>,
which is part of every Java program by default.
<P>
The <I>exception</I> <I>definition</I> shows the access security,
the exact declaration of the exception, and other information
such as cross references. The following example is from <TT>AWTException</TT>,
which is called in <TT>java.awt</TT>:
<BLOCKQUOTE>
<TT>AWTException<BR>
</TT>&nbsp;&nbsp;&nbsp;public class AWTException<BR>
&nbsp;&nbsp;&nbsp;extends Exception<BR>
<TT>&nbsp;&nbsp;&nbsp;Signals that an Abstract
Window Toolkit exception has occurred.</TT>
</BLOCKQUOTE>
<P>
Exceptions are part of <TT>java.lang</TT>
and are explicitly called as <TT>java.lang.Exception</TT>.
<H2><A NAME="ConstructingCodewithDocumentationInf"><FONT SIZE=5 COLOR=#Ff0000>Constructing
Code with Documentation Information</FONT></A></H2>
<P>
The previous section has given you an overview of the parts of
the Java API documentation and what they mean. That is all well
and good, but the larger issue is what to do with the information.
This section constructs code using the information provided in
the documentation.
<P>
Suppose you had a question about the method necessary to destroy
an applet after its use.
<P>
Access to the Java API documentation is available at <TT><A HREF="tppmsgs\msgs0.htm#2" tppabs="http://www.javasoft.com/">http://www.javasoft.com</A></TT>.
This will bring up the home page for Sun's Java language. See
Figure 9.5 for an example of this page as of this writing. Next,
click <TT>API documentation</TT>.
<P>
<A HREF="f9-5.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f9-5.gif" ><B>Figure 9.5 : </B><I>The www.javasoft.com home page.</I></A>
<P>
Now click <TT>Documentation</TT><I>.</I>
Now click <TT>Documentation for the n.n Release</TT><I>.
</I>
<P>
In <TT>Package information</TT>, click
<TT>java.applet</TT><I>.</I> This
is the proper place to look for methods that control applets.
In <TT>Class information</TT>, click
<TT>Applet</TT>. Class information
is displayed. See Figure 9.6 for an example of this page.
<P>
<A HREF="f9-6.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f9-6.gif" ><B>Figure 9.6 : </B><I>The reference page for java.applet.Applet.</I></A>
<P>
In the <TT>Method Index</TT>, click
<TT>destroy</TT>. This will bring
up the reference page for the <TT>destroy</TT>
method.
<P>
The following information is displayed:
<BLOCKQUOTE>
<TT>destroy<BR>
</TT>&nbsp;&nbsp;&nbsp;public void destroy()<BR>
&nbsp;&nbsp;&nbsp;Cleans up whatever resources are being held.
 If the applet is active it is<BR>
&nbsp;&nbsp;&nbsp;stopped.<BR>
&nbsp;&nbsp;&nbsp;See Also:<BR>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init,
start, stop</TT>
</BLOCKQUOTE>
<P>
This is all the information you need to code the command. Following
is a code fragment that creates and destroys an instance of an
applet:
<BLOCKQUOTE>
<TT>import java.applet.*;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//imports
the java.applet library<BR>
</TT>public class MyApplet extends Applet {<BR>
&nbsp;&nbsp;&nbsp;Applet anApplet;<BR>
&nbsp;&nbsp;&nbsp;public void start() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;anApplet = new Applet();&nbsp;&nbsp;&nbsp;
//create a new instance of MyApplet<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;anApplet.destroy();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//stops
the applet from executing<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<TT>}</TT>
</BLOCKQUOTE>
<P>
The command that suits our purposes here is <TT>anApplet.destroy();</TT>.
The method <TT>destroy</TT> is called
from class <TT>Applet</TT> by the
syntax
<BLOCKQUOTE>
<TT>objectname.methodname;</TT>
</BLOCKQUOTE>
<P>
Do not declare the <TT>destroy</TT>
method, as in <TT>public void destroy</TT><I>.</I>
This part of the documentation just shows how the method is declared
internally to class <TT>Applet</TT>
and is provided for informational purposes only. In this case,
the documentation shows that the method is void; therefore no
information is returned from the <TT>method</TT>
call. All the information about the methods in class <TT>Applet</TT>
is imported with the <TT>import</TT>
statement.
<P>
The next example is a bit more complex. This example is also from
class <TT>java.applet.Applet</TT>,
so get back into that online documentation. The method to look
at this time is <TT>getAppletInfo</TT><I>.</I>
The online documentation looks like this:
<BLOCKQUOTE>
<TT>getAppletInfo<BR>
</TT>&nbsp;&nbsp;&nbsp;public String getAppletInfo()<BR>
&nbsp;&nbsp;&nbsp;Returns a string containing information about
the author, version and <BR>
<TT>&nbsp;&nbsp;&nbsp;copyright of the applet.</TT>
</BLOCKQUOTE>
<P>
This method should be defined in programs. The default applet
returns <TT>null</TT>.
<P>
A code fragment using <TT>getAppletInfo</TT>
follows:
<BLOCKQUOTE>
<TT>import java.applet.*;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//imports
the java.applet library<BR>
</TT>public class MyApplet extends Applet {<BR>
&nbsp;&nbsp;&nbsp;String owner;<BR>
&nbsp;&nbsp;&nbsp;Applet anApplet;<BR>
&nbsp;&nbsp;&nbsp;public void start() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;anApplet = new Applet();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//create
a new instance of MyClass<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;owner = anApplet.getAppletInfo();&nbsp;&nbsp;&nbsp;&nbsp;//returns
applet information<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<TT>}</TT>
</BLOCKQUOTE>
<P>
The information returned from the call to <TT>getAppletInfo</TT>
is placed in variable <TT>owner</TT><I>.</I>
This information can now be displayed or manipulated in other
ways.
<P>
This following example passes information to a method: <TT>resize</TT><I>,</I>
once again from <TT>java.applet.Applet</TT>.
The online documentation is
<BLOCKQUOTE>
<TT>resize<BR>
</TT>&nbsp;&nbsp;&nbsp;public void resize(int width, int
height)<BR>
&nbsp;&nbsp;&nbsp;Requests that the applet be resized.<BR>
&nbsp;&nbsp;&nbsp;Overrides:<BR>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resize
in class Component</TT>
</BLOCKQUOTE>
<P>
<TT>resize</TT> is type <TT>void</TT>,
so no information is returned from the method. It is necessary
to supply the information <TT>width</TT>
and <TT>height</TT> to the method
to get it to do anything. This is how it could look:
<BLOCKQUOTE>
<TT>String owner;<BR>
</TT>int howTall = 3, howWide = 7;<BR>
anApplet.resize(howTall, howWide);&nbsp;&nbsp;&nbsp;&nbsp;//resizes
the applet window<BR>
owner = anApplet.getAppletInfo();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//returns
applet information<BR>
<TT>System.out.println(&quot;Applet information
is &quot;+owner);</TT>
</BLOCKQUOTE>
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#Ff0000>Summary</FONT></A>
</H2>
<P>
This chapter introduces the Java API packages and demonstrates
the process of retrieving API information from Sun's Web pages.
When you know where to look for information and what to do with
it, many, many things become possible with Java. The next four
chapters go over the packages in more detail and give more examples
on how to use the Java API.
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch8.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch8.htm"><IMG SRC="pc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/index.htm"><IMG SRC="hb.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch10.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch10.htm"><IMG 
SRC="nc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>
<HR WIDTH="100%"></P>
<P>


</BODY>
</HTML>
