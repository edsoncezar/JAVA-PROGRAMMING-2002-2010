<HTML>

<HEAD>
   <TITLE>Chapter 11 -- The AWT Class Library</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<!--Begin JavaScript roadmap code.  If editing downloaded HTML source, delete
 this portion.-->

<script language="JavaScript">
<!--

function TripodShowPopup()
{
   var bName=navigator.appName;
   var bVer=parseInt(navigator.appVersion);
   var now = new Date();
   var popupURL = "/adm/popup/roadmap.shtml?"+"member_name=er4ebus&path=peternortonjavaprograming&client_ip=200.190.100.218&ts=1015336826&ad_type=POPUP&category=net&id=79ca2cbebe37a7d5a7596a48457b7f75";
   var popupName = "TripodPopup";

   if (bName=="Netscape" && bVer<=3)
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=614,height=150');
   }
   else
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=604,height=135');
   }
   popup.location = popupURL;
}

if(window.parent==window)
{
   TripodShowPopup();
}

// -->
</script>

<script language="JavaScript1.2">
<!--

function changeOpenFunction()
{
   var original_window_open = window.open;
   function new_open_function(url, name, features, replace)
   {
      if(name != "TripodPopup")
         return original_window_open(url, name, features, replace);
   }
   window.open = new_open_function;
}
var bName = navigator.appName;

if(bName != "Netscape")
   changeOpenFunction();

// -->
</script>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#Ff0000>Chapter 11</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#Ff0000>The AWT Class Library</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>

<UL>

<LI><A HREF="#IntroductiontotheAWT" >Introduction to the AWT</A>
<LI><A HREF="#UsingtheFrameClasstoImplementAppli" >Using the Frame Class to Implement Application Windows</A>
<LI><A HREF="#ImplementingDialogBoxeswiththeDialo" >Implementing Dialog Boxes with the Dialog Class</A>
<UL>
<LI><A HREF="#UsingtheFileDialogClasstoAccessthe" >Using the FileDialog Class to Access the Local File System</A>
</UL>
<LI><A HREF="#OrganizingComponentsUsingthePanelan" >Organizing Components Using the Panel and Layout Classes</A>
<LI><A HREF="#UsingCommonGUIControls" >Using Common GUI Controls</A>
<UL>
<LI><A HREF="#LabelsandButtons" >Labels and Buttons</A>
<LI><A HREF="#CheckBoxesandRadioButtons" >Check Boxes and Radio Buttons</A>
<LI><A HREF="#ChoicesandLists" >Choices and Lists</A>
<LI><A HREF="#TextFieldsandTextAreas" >Text Fields and Text Areas</A>
</UL>
<LI><A HREF="#DrawingwiththeCanvasandGraphicsCla" >Drawing with the Canvas and Graphics Classes</A>
<LI><A HREF="#GeometricalClasses" >Geometrical Classes</A>
<LI><A HREF="#UsingFonts" >Using Fonts</A>
<LI><A HREF="#ImagerelatedClasses" >Image-related Classes</A>
<LI><A HREF="#UsingScrollbars" >Using Scrollbars</A>
<LI><A HREF="#TheToolkitClassandtheNativePlatfor" >The Toolkit Class and the Native Platform Window Implementation</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
This chapter covers the classes and interfaces of the Abstract
Windowing Toolkit (AWT). Here you'll learn how the AWT classes
and interfaces are used to create the graphical user interface
(GUI) of applets and stand-alone applications. The listings in
this chapter are sample programs that illustrate the use of these
GUI components. When you are finished with this chapter, you will
be able to use the AWT classes and interfaces in your own Java
applets and applications.
<H2><A NAME="IntroductiontotheAWT"><FONT SIZE=5 COLOR=#Ff0000>Introduction
to the AWT</FONT></A></H2>
<P>
The classes and interfaces of the <I>Abstract Windowing Toolkit</I>
(AWT) are used to develop stand-alone applications and to implement
the GUI controls used by applets. These classes support all aspects
of GUI development, including event handling.
<P>
The <TT><FONT FACE="Courier">Component</FONT></TT> and <TT><FONT FACE="Courier">Container</FONT></TT>
classes are two of the most important classes in the <TT><FONT FACE="Courier">java.awt</FONT></TT>
package. The <TT><FONT FACE="Courier">Component</FONT></TT> class
provides a common superclass for all classes that implement GUI
controls. The <TT><FONT FACE="Courier">Container</FONT></TT> class
is a subclass of the <TT><FONT FACE="Courier">Component</FONT></TT>
class and can contain other AWT components. It is well worth your
while to familiarize yourself with the API description of these
two classes.
<P>
The <TT><FONT FACE="Courier">Window</FONT></TT> class is a subclass
of the <TT><FONT FACE="Courier">Container</FONT></TT> class that
provides a common set of methods for implementing windows. The
<TT><FONT FACE="Courier">Window</FONT></TT> class has two subclasses,
<TT><FONT FACE="Courier">Frame</FONT></TT> and <TT><FONT FACE="Courier">Dialog</FONT></TT>,
that are used to create <TT><FONT FACE="Courier">Window</FONT></TT>
objects. The <TT><FONT FACE="Courier">Frame</FONT></TT> class
is used to create a main application window, and the <TT><FONT FACE="Courier">Dialog</FONT></TT>
class is used to implement dialog boxes. Let's explore the <TT><FONT FACE="Courier">Frame</FONT></TT>
class first and then look at the <TT><FONT FACE="Courier">Dialog</FONT></TT>
class.
<H2><A NAME="UsingtheFrameClasstoImplementAppli"><FONT SIZE=5 COLOR=#Ff0000>Using
the </FONT><TT><FONT SIZE=5 COLOR=#Ff0000 FACE="Courier">Frame</FONT></TT><FONT SIZE=5 COLOR=#Ff0000>
Class to Implement Application Windows</FONT></A></H2>
<P>
The <TT><FONT FACE="Courier">Frame</FONT></TT> class is a subclass
of <TT><FONT FACE="Courier">Window</FONT></TT> that encapsulates
an application window. A <TT><FONT FACE="Courier">Frame</FONT></TT>
object is capable of containing a menu bar and displaying a title.
Listing 11.1 shows how a <TT><FONT FACE="Courier">Frame</FONT></TT>
object is used to implement a simple window program.
<HR>
<BLOCKQUOTE>
<B>Listing 11.1. The </B><TT><B><FONT FACE="Courier">FrameExample</FONT></B></TT><B>
program.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
<BR>
</FONT></TT>public class FrameExample extends Frame {<BR>
 public static void main(String args[]){<BR>
&nbsp;&nbsp;FrameExample win = new FrameExample();<BR>
 }<BR>
 public FrameExample() {<BR>
&nbsp;&nbsp;super(&quot;FrameExample&quot;);<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(400,400);<BR>
&nbsp;&nbsp;show();<BR>
 }<BR>
 public void paint(Graphics g) {<BR>
&nbsp;&nbsp;g.drawString(&quot;A Basic Window Program&quot;,100,100);
<BR>
 }<BR>
 public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else return false;<BR>
 }<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
After you create a <TT><FONT FACE="Courier">Frame</FONT></TT>
object within an application, you use the <TT><FONT FACE="Courier">show()</FONT></TT>
method to display the frame. The <TT><FONT FACE="Courier">show()</FONT></TT>
method is inherited from the <TT><FONT FACE="Courier">Window</FONT></TT>
class. Other methods used in the initial display of a <TT><FONT FACE="Courier">Frame</FONT></TT>
object are the <TT><FONT FACE="Courier">pack()</FONT></TT> and
<TT><FONT FACE="Courier">resize()</FONT></TT> methods. The <TT><FONT FACE="Courier">pack()</FONT></TT>
method, like the <TT><FONT FACE="Courier">show()</FONT></TT> method,
is inherited from the <TT><FONT FACE="Courier">Window</FONT></TT>
class. It organizes the components contained in a <TT><FONT FACE="Courier">Window</FONT></TT>
object and determines the <TT><FONT FACE="Courier">Window</FONT></TT>
object's size. The <TT><FONT FACE="Courier">resize()</FONT></TT>
method is inherited from the <TT><FONT FACE="Courier">Component</FONT></TT>
class. It is used to resize a <TT><FONT FACE="Courier">Window</FONT></TT>
object to a particular dimension.
<P>
This small program introduces the basic structure of stand-alone
applications. The main class of the program subclasses the <TT><FONT FACE="Courier">Frame</FONT></TT>
class and creates a single <TT><FONT FACE="Courier">main()</FONT></TT>
method like those used in console programs. The <TT><FONT FACE="Courier">main()</FONT></TT>
method uses the <TT><FONT FACE="Courier">FrameExample()</FONT></TT>
constructor to create a window for an application.
<P>
The <TT><FONT FACE="Courier">FrameExample()</FONT></TT> constructor
uses the superclass constructor to set the title of the window
to <TT><FONT FACE="Courier">FrameExample</FONT></TT>. The <TT><FONT FACE="Courier">pack()</FONT></TT>
method is typically used to pack the components of the window,
which allows Java to organize the component objects on the window.
The <TT><FONT FACE="Courier">resize()</FONT></TT> method is invoked
to resize the window to 400 pixels by 400 pixels. Finally, the
<TT><FONT FACE="Courier">show()</FONT></TT> method is invoked
to cause the window to be displayed.
<P>
The <TT><FONT FACE="Courier">paint()</FONT></TT> method is invoked
by the runtime system to initially paint the contents of the application
window and to repaint the window if it is moved, resized, or covered.
The <TT><FONT FACE="Courier">paint()</FONT></TT> method is passed
an object of the <TT><FONT FACE="Courier">Graphics</FONT></TT>
class as a parameter. This object is used to update the window's
display by drawing on its default canvas. The <TT><FONT FACE="Courier">paint()</FONT></TT>
method of <TT><FONT FACE="Courier">FrameExample</FONT></TT> draws
the text <TT><FONT FACE="Courier">A Basic Window Program</FONT></TT>
at the coordinates (100,100).
<P>
The <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
usually provides the primary event handling for AWT components.
A <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method is
typically provided with a program's <TT><FONT FACE="Courier">Frame</FONT></TT>
subclass. The <TT><FONT FACE="Courier">handleEvent()</FONT></TT>
method of <TT><FONT FACE="Courier">FrameExample</FONT></TT> looks
for a <TT><FONT FACE="Courier">WINDOW_DESTROY</FONT></TT> event
and shuts down the program using the <TT><FONT FACE="Courier">exit()</FONT></TT>
method of the <TT><FONT FACE="Courier">System</FONT></TT> class.
The <TT><FONT FACE="Courier">Event</FONT></TT> class is covered
in the section titled &quot;Handling Events in Programs That Use
Windows.&quot;
<P>
Figure 11.1 shows the window initially displayed by the <TT><FONT FACE="Courier">FrameExample</FONT></TT>
program.
<P>
<A HREF="f11-1.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f11-1.gif" ><B>Figure 11.1 : </B><I>The FrameExample program's initial display.</I></A>
<H3>Using Menus and Menu Bars</H3>
<P>
The <TT><FONT FACE="Courier">MenuBar</FONT></TT> class provides
an implementation of the menu bar commonly attached to stand-alone
applications. It is a subclass of the <TT><FONT FACE="Courier">MenuComponent</FONT></TT>
class, which provides a common set of methods for all menu-related
classes. You attach a <TT><FONT FACE="Courier">MenuBar</FONT></TT>
object to a <TT><FONT FACE="Courier">Frame</FONT></TT> object
using the <TT><FONT FACE="Courier">setMenuBar()</FONT></TT> method
of the <TT><FONT FACE="Courier">Frame</FONT></TT> class.
<P>
A <TT><FONT FACE="Courier">MenuBar</FONT></TT> object contains
one or more <TT><FONT FACE="Courier">Menu</FONT></TT> objects
that implement pull-down menus. The <TT><FONT FACE="Courier">Menu</FONT></TT>
class provides methods for adding <TT><FONT FACE="Courier">MenuItem</FONT></TT>
objects and separators to the pull-down menu implemented by a
<TT><FONT FACE="Courier">Menu</FONT></TT> object. It also provides
methods for accessing the <TT><FONT FACE="Courier">MenuItem</FONT></TT>
objects contained in a <TT><FONT FACE="Courier">Menu</FONT></TT>
object. Because the <TT><FONT FACE="Courier">Menu</FONT></TT>
class is a subclass of the <TT><FONT FACE="Courier">MenuItem</FONT></TT>
class, a <TT><FONT FACE="Courier">Menu</FONT></TT> object can
contain another <TT><FONT FACE="Courier">Menu</FONT></TT> object,
thus allowing multiple levels of cascading menus to be created.
The program shown in Listing 11.2 illustrates this concept.
<HR>
<BLOCKQUOTE>
<B>Listing 11.2. The </B><TT><B><FONT FACE="Courier">MenuExample</FONT></B></TT><B>
program.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
<BR>
</FONT></TT>public class MenuExample extends Frame {<BR>
&nbsp;String menuSelection = &quot;Select a menu item.&quot;;
<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;MenuExample win = new MenuExample();<BR>
&nbsp;}<BR>
&nbsp;public MenuExample() {<BR>
&nbsp;&nbsp;super(&quot;MenuExample&quot;);<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(400,400);<BR>
&nbsp;&nbsp;addMenus();<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void addMenus() {<BR>
&nbsp;&nbsp;MenuBar menubar = new MenuBar();<BR>
&nbsp;&nbsp;Menu file = new Menu(&quot;File&quot;);<BR>
&nbsp;&nbsp;Menu edit = new Menu(&quot;Edit&quot;);<BR>
&nbsp;&nbsp;Menu view = new Menu(&quot;View&quot;);<BR>
&nbsp;&nbsp;file.add(&quot;Open&quot;);<BR>
&nbsp;&nbsp;file.add(&quot;Save&quot;);<BR>
&nbsp;&nbsp;file.add(&quot;Close&quot;);<BR>
&nbsp;&nbsp;file.add(&quot;Quit&quot;);<BR>
&nbsp;&nbsp;edit.add(&quot;Copy&quot;);<BR>
&nbsp;&nbsp;edit.add(&quot;Cut&quot;);<BR>
&nbsp;&nbsp;edit.add(&quot;Paste&quot;);<BR>
&nbsp;&nbsp;view.add(&quot;Zoom&quot;);<BR>
&nbsp;&nbsp;menubar.add(file);<BR>
&nbsp;&nbsp;menubar.add(edit);<BR>
&nbsp;&nbsp;menubar.add(view);<BR>
&nbsp;&nbsp;setMenuBar(menubar);<BR>
&nbsp;}<BR>
&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;g.drawString(menuSelection,100,100);<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id == Event.ACTION_EVENT &amp;&amp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;if(&quot;Quit&quot;.equals(event.arg)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;menuSelection = &quot;You selected &quot;+event.arg.toString()+&quot;.&quot;;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}else return false;<BR>
&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">MenuItem</FONT></TT> class is a subclass
of the <TT><FONT FACE="Courier">MenuComponent</FONT></TT> class
that is used to implement an item contained in a pull-down menu.
It provides methods for enabling and disabling (graying out) the
label associated with a <TT><FONT FACE="Courier">MenuItem</FONT></TT>
object and for setting and retrieving the label. The <TT><FONT FACE="Courier">MenuItem</FONT></TT>
class has two subclasses-<TT><FONT FACE="Courier">Menu</FONT></TT>
and <TT><FONT FACE="Courier">CheckboxMenuItem</FONT></TT>. You
have already been introduced to the <TT><FONT FACE="Courier">Menu</FONT></TT>
class; the <TT><FONT FACE="Courier">CheckboxMenuItem</FONT></TT>
class implements a menu item that can be checked or unchecked
and provides methods that can be used to set and retrieve its
checked status. To learn more about check boxes, see the section
&quot;Check Boxes and Radio Buttons.&quot;
<P>
The <TT><FONT FACE="Courier">MenuComponent</FONT></TT> class is
the superclass of these menu classes. Its methods are used to
perform general menu-related operations, such as those used to
create menu items.
<P>
The <TT><FONT FACE="Courier">MenuContainer</FONT></TT> interface
defines those methods that must be implemented by any class that
contains a menu-related object. The <TT><FONT FACE="Courier">MenuContainer</FONT></TT>
interface is implemented by the <TT><FONT FACE="Courier">Frame</FONT></TT>,
<TT><FONT FACE="Courier">Menu</FONT></TT>, and <TT><FONT FACE="Courier">MenuBar</FONT></TT>
classes.
<P>
The <TT><FONT FACE="Courier">MenuExample</FONT></TT> program follows
the same general structure as the <TT><FONT FACE="Courier">FrameExample</FONT></TT>
program shown in Listing 11.1. It invokes the <TT><FONT FACE="Courier">addMenus()</FONT></TT>
method in the <TT><FONT FACE="Courier">MenuExample()</FONT></TT>
constructor to set up the window's menus. Notice that the <TT><FONT FACE="Courier">menuSelection</FONT></TT>
variable is a <TT><FONT FACE="Courier">String</FONT></TT> object
and is declared as a field variable of the <TT><FONT FACE="Courier">MenuExample</FONT></TT>
class.
<P>
The <TT><FONT FACE="Courier">addMenus()</FONT></TT> method creates
a <TT><FONT FACE="Courier">MenuBar</FONT></TT> object and some
<TT><FONT FACE="Courier">Menu</FONT></TT> objects and then adds
menu items to the <TT><FONT FACE="Courier">Menu</FONT></TT> objects.
The <TT><FONT FACE="Courier">Menu</FONT></TT> objects are then
added to the <TT><FONT FACE="Courier">MenuBar</FONT></TT> object,
and the <TT><FONT FACE="Courier">MenuBar</FONT></TT> object is
set on the application window using the <TT><FONT FACE="Courier">setMenuBar()</FONT></TT>
method.
<P>
The <TT><FONT FACE="Courier">paint()</FONT></TT> method is overridden
to draw the menu item selected by the user on the window's default
canvas. Note that you generally don't call the <TT><FONT FACE="Courier">paint()</FONT></TT>
method directly. The <TT><FONT FACE="Courier">paint()</FONT></TT>
method is invoked automatically when you use these methods: <TT><FONT FACE="Courier">show()</FONT></TT>,
<TT><FONT FACE="Courier">repaint()</FONT></TT>, or <TT><FONT FACE="Courier">update()</FONT></TT>.
<P>
The <TT><FONT FACE="Courier">handleEvent()</FONT></TT>method of
the <TT><FONT FACE="Courier">FrameExample</FONT></TT> program
is expanded to check for an <TT><FONT FACE="Courier">ACTION_EVENT</FONT></TT>
object with a <TT><FONT FACE="Courier">MenuItem</FONT></TT> as
its target in order to handle the action of a user selecting an
item from a menu. It updates the <TT><FONT FACE="Courier">menuSelection</FONT></TT>
object to identify the menu item selected by the user. The <TT><FONT FACE="Courier">repaint()</FONT></TT>
method is used to cause the window to be redrawn, which, as discussed,
invokes the <TT><FONT FACE="Courier">paint()</FONT></TT> method
for you.
<P>
Figure 11.2 shows the window initially displayed by the <TT><FONT FACE="Courier">MenuExample</FONT></TT>
program.
<P>
<A HREF="f11-2.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f11-2.gif" ><B>Figure 11.2 : </B><I>The MenuExample program's initial display.</I></A>
<H3>Handling Events in Programs That Use Windows</H3>
<P>
The <TT><FONT FACE="Courier">Event</FONT></TT> class is central
to the Java window event-generation and -handling mechanism. <TT><FONT FACE="Courier">Event</FONT></TT>
objects are generated by a user who interacts with a Java window
program or applet and by the Java runtime system. User-generated
events occur when users make selections on a menu or press a key.
Events generated by the runtime system include errors and exceptions.
They are handled by a set of predefined event-handling methods
that are defined by the <TT><FONT FACE="Courier">Component</FONT></TT>
class and its subclasses. These methods are overridden to perform
custom event processing.
<P>
The <TT><FONT FACE="Courier">Event</FONT></TT> class defines numerous
constants to identify the events that are defined for the AWT
classes. It is important that you review these constants to become
familiar with the types of events that may need to be handled
by your programs. You'll become aware of the common event handling
performed for the various window components by working through
the example programs in this chapter.
<H2><A NAME="ImplementingDialogBoxeswiththeDialo"><FONT SIZE=5 COLOR=#Ff0000>Implementing
Dialog Boxes with the </FONT><TT><FONT SIZE=5 COLOR=#Ff0000 FACE="Courier">Dialog</FONT></TT><FONT SIZE=5 COLOR=#Ff0000>
Class</FONT></A></H2>
<P>
The <TT><FONT FACE="Courier">Dialog</FONT></TT> class, like the
<TT><FONT FACE="Courier">Frame</FONT></TT> class, is a subclass
of the <TT><FONT FACE="Courier">Window</FONT></TT> class. Whereas
the <TT><FONT FACE="Courier">Frame</FONT></TT> class is used to
implement a main application window, the <TT><FONT FACE="Courier">Dialog</FONT></TT>
class is used to implement dialog boxes that pop up to present
information and interact with the user of a window program or
applet. Two types of <TT><FONT FACE="Courier">Dialog</FONT></TT>
objects can be created. A <I>modal dialog box</I> is a <TT><FONT FACE="Courier">Dialog</FONT></TT>
object that must be acted on and closed before a user is able
to access other application windows. A <I>non-modal dialog box</I>
does not have this restriction.
<P>
The program shown in Listing 11.3 illustrates the use of the <TT><FONT FACE="Courier">Dialog</FONT></TT>
class.
<HR>
<BLOCKQUOTE>
<B>Listing 11.3. The </B><TT><B><FONT FACE="Courier">DialogExample</FONT></B></TT><B>
program.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
<BR>
</FONT></TT>public class DialogExample extends Frame {<BR>
&nbsp;Dialog dialog;<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;DialogExample win = new DialogExample();<BR>
&nbsp;}<BR>
&nbsp;public DialogExample() {<BR>
&nbsp;&nbsp;super(&quot;DialogExample&quot;);<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(400,400);<BR>
&nbsp;&nbsp;addMenus();<BR>
&nbsp;&nbsp;createDialog();<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void addMenus() {<BR>
&nbsp;&nbsp;MenuBar menubar = new MenuBar();<BR>
&nbsp;&nbsp;Menu file = new Menu(&quot;File&quot;);<BR>
&nbsp;&nbsp;Menu dialog = new Menu(&quot;Dialog&quot;);<BR>
&nbsp;&nbsp;file.add(&quot;Quit&quot;);<BR>
&nbsp;&nbsp;dialog.add(&quot;Show&quot;);<BR>
&nbsp;&nbsp;dialog.add(&quot;Hide&quot;);<BR>
&nbsp;&nbsp;menubar.add(file);<BR>
&nbsp;&nbsp;menubar.add(dialog);<BR>
&nbsp;&nbsp;setMenuBar(menubar);<BR>
&nbsp;}<BR>
&nbsp;void createDialog() {<BR>
&nbsp;&nbsp;dialog = new Dialog(this,&quot;Dialog Box&quot;,false);
<BR>
&nbsp;&nbsp;dialog.resize(200,200);<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id == Event.ACTION_EVENT &amp;&amp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;if(&quot;Quit&quot;.equals(event.arg)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}else if(&quot;Show&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;dialog.show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;dialog.hide();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}else return false;<BR>
&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">DialogExample</FONT></TT> program
follows the same structure as the <TT><FONT FACE="Courier">FrameExample</FONT></TT>
and <TT><FONT FACE="Courier">MenuExample</FONT></TT> programs.
It creates the <TT><FONT FACE="Courier">dialog</FONT></TT> variable
to refer to a dialog box that it creates and displays. The <TT><FONT FACE="Courier">createDialog()</FONT></TT>
method is invoked from the <TT><FONT FACE="Courier">DialogExample</FONT></TT>
constructor to create this dialog box.
<P>
The <TT><FONT FACE="Courier">addMenus()</FONT></TT> method has
been updated to support menu items for showing and hiding the
dialog box.
<P>
The <TT><FONT FACE="Courier">createDialog()</FONT></TT> method
creates a non-modal dialog box and resizes it to a 200 pixel <FONT FACE="Symbol">&#165;</FONT>
200 pixel size. The dialog box is not displayed until the Show
menu item is selected and handled by the <TT><FONT FACE="Courier">handleEvent()</FONT></TT>
method.
<P>
The <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
handles the Show menu item by causing the dialog box to be displayed
via the <TT><FONT FACE="Courier">show()</FONT></TT> method of
the <TT><FONT FACE="Courier">Window</FONT></TT> class. It handles
the Hide menu item by invoking the <TT><FONT FACE="Courier">hide()</FONT></TT>
method of the <TT><FONT FACE="Courier">Component</FONT></TT> class.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
The <TT><FONT FACE="Courier">show()</FONT></TT> method of the <TT><FONT FACE="Courier">Window</FONT></TT> class overrides the <TT><FONT FACE="Courier">show()</FONT></TT> method of the <TT><FONT FACE="Courier">Component</FONT></TT> class and is used to 
display <TT><FONT FACE="Courier">Window</FONT></TT> objects. Unlike the <TT><FONT FACE="Courier">show()</FONT></TT> method of the <TT><FONT FACE="Courier">Component</FONT></TT> class, the <TT><FONT FACE="Courier">show()</FONT></TT> method of the <TT><FONT 
FACE="Courier">Window</FONT></TT> class does more than merely display the window; it will also bring the window to the front if the window is already visible.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Figure 11.3 shows the window initially displayed by the <TT><FONT FACE="Courier">DialogExample</FONT></TT>
program.
<P>
<A HREF="f11-3.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f11-3.gif" ><B>Figure 11.3 : </B><I>The DialogExample porgram's initial display.</I></A>
<H3><A NAME="UsingtheFileDialogClasstoAccessthe">Using the <TT><FONT SIZE=4 FACE="Courier">FileDialog</FONT></TT><FONT SIZE=4>
Class to Access the Local File System</FONT></A></H3>
<P>
The <TT><FONT FACE="Courier">FileDialog</FONT></TT> class is a
subclass of the <TT><FONT FACE="Courier">Dialog</FONT></TT> class
and is used to provide the capability to select a file from a
directory listing. The <TT><FONT FACE="Courier">FileDialog</FONT></TT>
class provides the capability to use separate dialog boxes for
loading and saving files.
<P>
The program shown in Listing 11.4 illustrates the use of the <TT><FONT FACE="Courier">FileDialog</FONT></TT>
class.
<HR>
<BLOCKQUOTE>
<B>Listing 11.4. The </B><TT><B><FONT FACE="Courier">FileDialogExample</FONT></B></TT><B>
program.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
<BR>
</FONT></TT>public class FileDialogExample extends Frame {<BR>
&nbsp;FileDialog dialog;<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;FileDialogExample win = new FileDialogExample();<BR>
&nbsp;}<BR>
&nbsp;public FileDialogExample() {<BR>
&nbsp;&nbsp;super(&quot;FileDialogExample&quot;);<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(400,400);<BR>
&nbsp;&nbsp;addMenus();<BR>
&nbsp;&nbsp;createDialog();<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void addMenus() {<BR>
&nbsp;&nbsp;MenuBar menubar = new MenuBar();<BR>
&nbsp;&nbsp;Menu file = new Menu(&quot;File&quot;);<BR>
&nbsp;&nbsp;Menu dialog = new Menu(&quot;Dialog&quot;);<BR>
&nbsp;&nbsp;file.add(&quot;Quit&quot;);<BR>
&nbsp;&nbsp;dialog.add(&quot;Show&quot;);<BR>
&nbsp;&nbsp;menubar.add(file);<BR>
&nbsp;&nbsp;menubar.add(dialog);<BR>
&nbsp;&nbsp;setMenuBar(menubar);<BR>
&nbsp;}<BR>
&nbsp;void createDialog() {<BR>
&nbsp;&nbsp;dialog = new FileDialog(this,&quot;File Dialog Box&quot;);
<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id == Event.ACTION_EVENT &amp;&amp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;if(&quot;Quit&quot;.equals(event.arg)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}else if(&quot;Show&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;dialog.show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}else return false;<BR>
&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">FileDialogExample</FONT></TT> program
is very similar to the <TT><FONT FACE="Courier">DialogExample</FONT></TT>
program except that instead of creating and displaying a <TT><FONT FACE="Courier">Dialog</FONT></TT>
object, it displays a <TT><FONT FACE="Courier">FileDialog</FONT></TT>
object. Notice that the Hide menu item has been removed. This
is because the File dialog box is modal and cannot be hidden after
it is displayed.
<P>
The <TT><FONT FACE="Courier">createDialog()</FONT></TT> method
creates the <TT><FONT FACE="Courier">FileDialog</FONT></TT> object
and titles it with the text <TT><FONT FACE="Courier">File Dialog
Box</FONT></TT>.
<P>
Figure 11.4 shows the window initially displayed by the <TT><FONT FACE="Courier">FileDialogExample</FONT></TT>
program.
<P>
<A HREF="f11-4.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f11-4.gif" ><B>Figure 11.4 : </B><I>The FileDialogExample program's initial display.</I></A>
<H2><A NAME="OrganizingComponentsUsingthePanelan"><FONT SIZE=5 COLOR=#Ff0000>Organizing
Components Using the </FONT><TT><FONT SIZE=5 COLOR=#Ff0000 FACE="Courier">Panel</FONT></TT><FONT SIZE=5 COLOR=#Ff0000>
and </FONT><TT><FONT SIZE=5 COLOR=#Ff0000 FACE="Courier">Layout</FONT></TT><FONT SIZE=5 COLOR=#Ff0000>
Classes</FONT></A></H2>
<P>
This section discusses the AWT classes that are used to organize
components within applications and applets.
<P>
The <TT><FONT FACE="Courier">Panel</FONT></TT> class is the most
common class for organizing components within stand-alone applications.
It is a subclass of the <TT><FONT FACE="Courier">Container</FONT></TT>
class and is displayed as a panel within a window. It inherits
almost all of its methods from its <TT><FONT FACE="Courier">Container</FONT></TT>
and <TT><FONT FACE="Courier">Component</FONT></TT> superclasses.
The program shown in Listing 11.5 illustrates the use of the <TT><FONT FACE="Courier">Panel</FONT></TT>
class.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
The <TT><FONT FACE="Courier">Applet</FONT></TT> class is a subclass of the <TT><FONT FACE="Courier">Panel</FONT></TT> class that is used to implement a panel within a Web browser's display window. It adds many useful methods that provide access to the 
capabilities of the browser.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 11.5. The </B><TT><B><FONT FACE="Courier">PanelExample</FONT></B></TT><B>
program.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
<BR>
</FONT></TT>public class PanelExample extends Frame {<BR>
 public static void main(String args[]){<BR>
&nbsp;&nbsp;PanelExample win = new PanelExample();<BR>
 }<BR>
 public PanelExample() {<BR>
&nbsp;&nbsp;super(&quot;PanelExample&quot;);<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(400,400);<BR>
&nbsp;&nbsp;addMenus();<BR>
&nbsp;&nbsp;addPanel();<BR>
&nbsp;&nbsp;show();<BR>
 }<BR>
 void addMenus() {<BR>
&nbsp;&nbsp;MenuBar menubar = new MenuBar();<BR>
&nbsp;&nbsp;Menu file = new Menu(&quot;File&quot;);<BR>
&nbsp;&nbsp;file.add(&quot;Quit&quot;);<BR>
&nbsp;&nbsp;menubar.add(file);<BR>
&nbsp;&nbsp;setMenuBar(menubar);<BR>
 }<BR>
 void addPanel() {<BR>
&nbsp;&nbsp;Panel panel = new Panel();<BR>
&nbsp;&nbsp;panel.add(new Button(&quot;one&quot;));<BR>
&nbsp;&nbsp;panel.add(new Button(&quot;two&quot;));<BR>
&nbsp;&nbsp;panel.add(new Button(&quot;three&quot;));<BR>
&nbsp;&nbsp;panel.add(new Button(&quot;four&quot;));<BR>
&nbsp;&nbsp;panel.add(new Button(&quot;five&quot;));<BR>
&nbsp;&nbsp;add(&quot;South&quot;,panel);<BR>
 }<BR>
 public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id == Event.ACTION_EVENT &amp;&amp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;if(&quot;Quit&quot;.equals(event.arg)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}else return false;<BR>
 }<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">PanelExample</FONT></TT> program
follows the same structure of the programs you've studied so far
in this chapter. It invokes the <TT><FONT FACE="Courier">addPanel()</FONT></TT>
method from its constructor to add a <TT><FONT FACE="Courier">Panel</FONT></TT>
object that contains <TT><FONT FACE="Courier">Button</FONT></TT>
objects. No event handling is provided for the buttons, so when
you click on them, nothing happens. Buttons and button-related
event handling is covered in the section &quot;Labels and Buttons.&quot;
It is included here to show how components can be added to a panel
and then added to the main application window.
<P>
Figure 11.5 shows the window initially displayed by the <TT><FONT FACE="Courier">PanelExample</FONT></TT>
program.
<P>
<A HREF="f11-5.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f11-5.gif" ><B>Figure 11.5 : </B><I>The PanelExample program's initial display.</I></A>
<P>
The <TT><FONT FACE="Courier">LayoutManager</FONT></TT> interface
defines methods that must be implemented by classes that are used
to organize the way <TT><FONT FACE="Courier">Component</FONT></TT>
objects are laid out in a <TT><FONT FACE="Courier">Container</FONT></TT>
object. Five AWT classes implement this interface: <TT><FONT FACE="Courier">BorderLayout</FONT></TT>,
<TT><FONT FACE="Courier">CardLayout</FONT></TT>, <TT><FONT FACE="Courier">FlowLayout</FONT></TT>,
<TT><FONT FACE="Courier">GridBagLayout</FONT></TT>, and <TT><FONT FACE="Courier">GridLayout</FONT></TT>.
These classes are used to lay out objects that are instances of
the <TT><FONT FACE="Courier">Container</FONT></TT> class and its
subclasses in the following manner:
<UL>
<LI>The <TT><FONT FACE="Courier">BorderLayout</FONT></TT> class
provides the capability to lay out a <TT><FONT FACE="Courier">Container</FONT></TT>
object along the border and in the center of the container.
<LI>The <TT><FONT FACE="Courier">CardLayout</FONT></TT> class
provides the capability to lay out a <TT><FONT FACE="Courier">Container</FONT></TT>
object as a deck of cards.
<LI>The <TT><FONT FACE="Courier">FlowLayout</FONT></TT> class
provides the capability to lay out a <TT><FONT FACE="Courier">Container</FONT></TT>
from left to right in a series of rows.
<LI>The <TT><FONT FACE="Courier">GridBagLayout</FONT></TT> class
provides the capability to lay out a <TT><FONT FACE="Courier">Container</FONT></TT>
object according to a set of <TT><FONT FACE="Courier">GridBagConstraints</FONT></TT>
objects.
<LI>The <TT><FONT FACE="Courier">GridLayout</FONT></TT> class
provides the capability to lay out a <TT><FONT FACE="Courier">Container</FONT></TT>
object in a grid.
</UL>
<P>
The <TT><FONT FACE="Courier">GridBagConstraints</FONT></TT> class
is used to create objects that specify the size and positioning
of an object that is controlled by a <TT><FONT FACE="Courier">GridBagLayout</FONT></TT>
object. 
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
The <TT><FONT FACE="Courier">Insets</FONT></TT> class provides the capability to add margins to the layout and can be used with the <TT><FONT FACE="Courier">GridBagConstraints</FONT></TT> class.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The program shown in Listing 11.6 illustrates the use of the five
layout classes.
<HR>
<BLOCKQUOTE>
<B>Listing 11.6. The </B><TT><B><FONT FACE="Courier">LayoutExample</FONT></B></TT><B>
program.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
<BR>
</FONT></TT>public class LayoutExample extends Frame {<BR>
 public static void main(String args[]){<BR>
&nbsp;&nbsp;LayoutExample win = new LayoutExample();<BR>
 }<BR>
 public LayoutExample() {<BR>
&nbsp;&nbsp;super(&quot;LayoutExample&quot;);<BR>
&nbsp;&nbsp;addMenus();<BR>
&nbsp;&nbsp;addPanels();<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(600,600);<BR>
&nbsp;&nbsp;show();<BR>
 }<BR>
 void addMenus() {<BR>
&nbsp;&nbsp;MenuBar menubar = new MenuBar();<BR>
&nbsp;&nbsp;Menu file = new Menu(&quot;File&quot;);<BR>
&nbsp;&nbsp;file.add(&quot;Quit&quot;);<BR>
&nbsp;&nbsp;menubar.add(file);<BR>
&nbsp;&nbsp;setMenuBar(menubar);<BR>
 }<BR>
 void addPanels() {<BR>
&nbsp;&nbsp;setLayout(new GridLayout(3,2));<BR>
&nbsp;&nbsp;Panel flow = new Panel();<BR>
&nbsp;&nbsp;Panel border = new Panel();<BR>
&nbsp;&nbsp;Panel card = new Panel();<BR>
&nbsp;&nbsp;Panel grid = new Panel();<BR>
&nbsp;&nbsp;Panel gridbag = new Panel();<BR>
&nbsp;&nbsp;border.setLayout(new BorderLayout());<BR>
&nbsp;&nbsp;card.setLayout(new CardLayout());<BR>
&nbsp;&nbsp;grid.setLayout(new GridLayout(2,2));<BR>
&nbsp;&nbsp;gridbag.setLayout(new GridBagLayout());<BR>
&nbsp;&nbsp;addButtons(flow);<BR>
&nbsp;&nbsp;addButtons(card);<BR>
&nbsp;&nbsp;addButtons(border);<BR>
&nbsp;&nbsp;addButtons(grid);<BR>
&nbsp;&nbsp;addButtons(gridbag);<BR>
&nbsp;&nbsp;add(flow);<BR>
&nbsp;&nbsp;add(card);<BR>
&nbsp;&nbsp;add(border);<BR>
&nbsp;&nbsp;add(grid);<BR>
&nbsp;&nbsp;add(gridbag);<BR>
}<BR>
void addButtons(Panel panel){<BR>
&nbsp;&nbsp;if(panel.getLayout() instanceof BorderLayout) {<BR>
&nbsp;&nbsp;&nbsp;panel.add(&quot;North&quot;,new Button(&quot;one&quot;));
<BR>
&nbsp;&nbsp;&nbsp;panel.add(&quot;East&quot;,new Button(&quot;two&quot;));
<BR>
&nbsp;&nbsp;&nbsp;panel.add(&quot;South&quot;,new Button(&quot;three&quot;));
<BR>
&nbsp;&nbsp;&nbsp;panel.add(&quot;West&quot;,new Button(&quot;four&quot;));
<BR>
&nbsp;&nbsp;}else if(panel.getLayout() instanceof GridBagLayout)
{<BR>
&nbsp;&nbsp;&nbsp;GridBagLayout layout = (GridBagLayout) panel.getLayout();
<BR>
&nbsp;&nbsp;&nbsp;GridBagConstraints constraint1 = new GridBagConstraints();
<BR>
&nbsp;&nbsp;&nbsp;constraint1.fill = GridBagConstraints.BOTH;
<BR>
&nbsp;&nbsp;&nbsp;constraint1.gridwidth = 1;<BR>
&nbsp;&nbsp;&nbsp;constraint1.gridheight = 1;<BR>
&nbsp;&nbsp;&nbsp;constraint1.gridx = 0;<BR>
&nbsp;&nbsp;&nbsp;constraint1.gridy = 0;<BR>
&nbsp;&nbsp;&nbsp;GridBagConstraints constraint2 = new GridBagConstraints();
<BR>
&nbsp;&nbsp;&nbsp;constraint2.fill = GridBagConstraints.BOTH;
<BR>
&nbsp;&nbsp;&nbsp;constraint2.gridwidth = 2;<BR>
&nbsp;&nbsp;&nbsp;constraint2.gridheight = 1;<BR>
&nbsp;&nbsp;&nbsp;constraint2.gridx = 1;<BR>
&nbsp;&nbsp;&nbsp;constraint2.gridy = 0;<BR>
&nbsp;&nbsp;&nbsp;GridBagConstraints constraint3 = new GridBagConstraints();
<BR>
&nbsp;&nbsp;&nbsp;constraint3.fill = GridBagConstraints.BOTH;
<BR>
&nbsp;&nbsp;&nbsp;constraint3.gridwidth = 2;<BR>
&nbsp;&nbsp;&nbsp;constraint3.gridheight = 1;<BR>
&nbsp;&nbsp;&nbsp;constraint3.gridx = 0;<BR>
&nbsp;&nbsp;&nbsp;constraint3.gridy = 1;<BR>
&nbsp;&nbsp;&nbsp;GridBagConstraints constraint4 = new GridBagConstraints();
<BR>
&nbsp;&nbsp;&nbsp;constraint4.fill = GridBagConstraints.BOTH;
<BR>
&nbsp;&nbsp;&nbsp;constraint4.gridwidth = 1;<BR>
&nbsp;&nbsp;&nbsp;constraint4.gridheight = 1;<BR>
&nbsp;&nbsp;&nbsp;constraint4.gridx = 2;<BR>
&nbsp;&nbsp;&nbsp;constraint4.gridy = 1;<BR>
&nbsp;&nbsp;&nbsp;Button button1 = new Button(&quot;one&quot;);
<BR>
&nbsp;&nbsp;&nbsp;Button button2 = new Button(&quot;two&quot;);
<BR>
&nbsp;&nbsp;&nbsp;Button button3 = new Button(&quot;three&quot;);
<BR>
&nbsp;&nbsp;&nbsp;Button button4 = new Button(&quot;four&quot;);
<BR>
&nbsp;&nbsp;&nbsp;layout.setConstraints(button1,constraint1);
<BR>
&nbsp;&nbsp;&nbsp;panel.add(button1);<BR>
&nbsp;&nbsp;&nbsp;layout.setConstraints(button2,constraint2);
<BR>
&nbsp;&nbsp;&nbsp;panel.add(button2);<BR>
&nbsp;&nbsp;&nbsp;layout.setConstraints(button3,constraint3);
<BR>
&nbsp;&nbsp;&nbsp;panel.add(button3);<BR>
&nbsp;&nbsp;&nbsp;layout.setConstraints(button4,constraint4);
<BR>
&nbsp;&nbsp;&nbsp;panel.add(button4);<BR>
&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;panel.add(new Button(&quot;one&quot;));<BR>
&nbsp;&nbsp;&nbsp;panel.add(new Button(&quot;two&quot;));<BR>
&nbsp;&nbsp;&nbsp;panel.add(new Button(&quot;three&quot;));<BR>
&nbsp;&nbsp;&nbsp;panel.add(new Button(&quot;four&quot;));<BR>
&nbsp;&nbsp;}<BR>
}<BR>
 public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id == Event.ACTION_EVENT &amp;&amp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;if(&quot;Quit&quot;.equals(event.arg)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}else return false;<BR>
&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">LayoutExample</FONT></TT> program
is twice as long as the programs you've looked at so far in this
chapter because it performs quite a bit more setup in order to
display panels that illustrate each of the five layout classes.
<P>
In this program, the <TT><FONT FACE="Courier">addPanels()</FONT></TT>
method sets the layout of the application window to a three-row
by two-column grid. Five panels illustrating the five layout classes
are added to this grid.
<P>
The <TT><FONT FACE="Courier">addButtons()</FONT></TT> method is
used to add buttons to the panels to show how each of the five
different layouts causes the buttons to be displayed. Buttons
are laid out along the edges and center of a <TT><FONT FACE="Courier">BorderLayout</FONT></TT>
object. A <TT><FONT FACE="Courier">GridBagLayout</FONT></TT> object
is laid out using <TT><FONT FACE="Courier">GridBagConstraints</FONT></TT>
objects. The field variables of these objects are updated to specify
the position, size, and fill mode of the buttons that are added
to the <TT><FONT FACE="Courier">GridBagLayout</FONT></TT> object.
The buttons added to <TT><FONT FACE="Courier">Panel</FONT></TT>
objects using the other layouts do not require any special setup.
<P>
Figure 11.6 shows the window initially displayed by the <TT><FONT FACE="Courier">LayoutExample</FONT></TT>
program.
<P>
<A HREF="f11-6.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f11-6.gif" ><B>Figure 11.6 : </B><I>The </I><TT><I><FONT FACE="Courier">LayoutExample</FONT></I></TT><I>
program's initial display.</I></A>
<H2><A NAME="UsingCommonGUIControls"><FONT SIZE=5 COLOR=#Ff0000>Using
Common GUI Controls</FONT></A></H2>
<P>
This section introduces the common GUI controls provided by the
AWT and shows how to handle the events associated with these controls.
The controls covered are provided by the <TT><FONT FACE="Courier">Label</FONT></TT>,
<TT><FONT FACE="Courier">Button</FONT></TT>, <TT><FONT FACE="Courier">Checkbox</FONT></TT>,
<TT><FONT FACE="Courier">Choice</FONT></TT>, <TT><FONT FACE="Courier">List</FONT></TT>,
<TT><FONT FACE="Courier">TextField</FONT></TT>, and <TT><FONT FACE="Courier">TextArea</FONT></TT>
classes. Other GUI controls are discussed later in this chapter.
<H3><A NAME="LabelsandButtons">Labels and Buttons</A></H3>
<P>
The <TT><FONT FACE="Courier">Label</FONT></TT> class is used to
display a line of read-only text. It provides methods to set and
retrieve the text of a <TT><FONT FACE="Courier">Label</FONT></TT>
object and to align the text within the object's display.
<P>
The <TT><FONT FACE="Courier">Button</FONT></TT> class provides
the capability to use buttons within Java applications and applets.
<TT><FONT FACE="Courier">Button</FONT></TT> objects are labeled
with a text string; using images with buttons is not currently
supported by Java. The clicking of a button results in an <TT><FONT FACE="Courier">Event</FONT></TT>
object that is identified as an <TT><FONT FACE="Courier">ACTION_EVENT</FONT></TT>
object. The program shown in Listing 11.7 illustrates the use
of the <TT><FONT FACE="Courier">Label</FONT></TT> and <TT><FONT FACE="Courier">Button</FONT></TT>
classes.
<HR>
<BLOCKQUOTE>
<B>Listing 11.7. The </B><TT><B><FONT FACE="Courier">ButtonExample</FONT></B></TT><B>
program.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
<BR>
</FONT></TT>public class ButtonExample extends Frame {<BR>
&nbsp;Label label = new Label(&quot;Default Text&quot;);<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;ButtonExample win = new ButtonExample();<BR>
&nbsp;}<BR>
&nbsp;public ButtonExample() {<BR>
&nbsp;&nbsp;super(&quot;ButtonExample&quot;);<BR>
&nbsp;&nbsp;addMenus();<BR>
&nbsp;&nbsp;addButtons();<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(400,400);<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void addMenus() {<BR>
&nbsp;&nbsp;MenuBar menubar = new MenuBar();<BR>
&nbsp;&nbsp;Menu file = new Menu(&quot;File&quot;);<BR>
&nbsp;&nbsp;file.add(&quot;Quit&quot;);<BR>
&nbsp;&nbsp;menubar.add(file);<BR>
&nbsp;&nbsp;setMenuBar(menubar);<BR>
&nbsp;}<BR>
&nbsp;void addButtons() {<BR>
&nbsp;&nbsp;add(&quot;North&quot;,label);<BR>
&nbsp;&nbsp;label.setAlignment(Label.CENTER);<BR>
&nbsp;&nbsp;Panel panel = new Panel();<BR>
&nbsp;&nbsp;panel.add(new Button(&quot;one&quot;));<BR>
&nbsp;&nbsp;panel.add(new Button(&quot;two&quot;));<BR>
&nbsp;&nbsp;panel.add(new Button(&quot;three&quot;));<BR>
&nbsp;&nbsp;panel.add(new Button(&quot;four&quot;));<BR>
&nbsp;&nbsp;add(&quot;Center&quot;,panel);<BR>
}<BR>
public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id == Event.ACTION_EVENT &amp;&amp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;if(&quot;Quit&quot;.equals(event.arg)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}else if(event.id == Event.ACTION_EVENT &amp;&amp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;event.target instanceof Button){<BR>
&nbsp;&nbsp;&nbsp;label.setText((String) event.arg);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else return false;<BR>
&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">ButtonExample</FONT></TT> program
illustrates the use of the <TT><FONT FACE="Courier">Button</FONT></TT>
and <TT><FONT FACE="Courier">Label</FONT></TT> classes by displaying
the label of the last button clicked by a user using a <TT><FONT FACE="Courier">Label</FONT></TT>
object. The <TT><FONT FACE="Courier">Label</FONT></TT> object
is initially labeled with the string <TT><FONT FACE="Courier">Default</FONT></TT>
<TT><FONT FACE="Courier">Text</FONT></TT> upon program startup.
The <TT><FONT FACE="Courier">addButtons()</FONT></TT> method is
invoked from within the <TT><FONT FACE="Courier">ButtonExample</FONT></TT>
constructor to set up the <TT><FONT FACE="Courier">Label</FONT></TT>
and <TT><FONT FACE="Courier">Button</FONT></TT> objects.
<P>
The <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
checks for <TT><FONT FACE="Courier">ACTION_EVENT</FONT></TT> events
with a <TT><FONT FACE="Courier">Button</FONT></TT> target to handle
the user's button clicks. It handles the event by setting the
<TT><FONT FACE="Courier">Label</FONT></TT> object to the label
of the button that was clicked.
<P>
Figure 11.7 shows the window initially displayed by the <TT><FONT FACE="Courier">ButtonExample</FONT></TT>
program.
<P>
<A HREF="f11-7.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f11-7.gif" ><B>Figure 11.7 : </B><I>The ButtonExample program's initial display.</I></A>
<H3><A NAME="CheckBoxesandRadioButtons">Check Boxes and Radio
Buttons</A></H3>
<P>
The <TT><FONT FACE="Courier">Checkbox</FONT></TT> class provides
the capability to implement radio buttons as well as check boxes.
The <TT><FONT FACE="Courier">CheckboxGroup</FONT></TT> class is
used to group <TT><FONT FACE="Courier">Checkbox</FONT></TT> objects
and identify that they should be treated as radio buttons instead
of as check boxes.
<P>
The <TT><FONT FACE="Courier">Checkbox</FONT></TT> class provides
methods for retrieving and modifying its checked state and label.
The checking and unchecking of a check box or radio button causes
an <TT><FONT FACE="Courier">ACTION_EVENT</FONT></TT> <TT><FONT FACE="Courier">Event</FONT></TT>
object to be generated.
<P>
The program shown in Listing 11.8 illustrates the use of check
boxes and radio buttons.
<HR>
<BLOCKQUOTE>
<B>Listing 11.8. The </B><TT><B><FONT FACE="Courier">CheckboxExample</FONT></B></TT><B>
program.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
<BR>
</FONT></TT>public class CheckboxExample extends Frame {<BR>
&nbsp;Label label = new Label(&quot;Default Text&quot;);<BR>
&nbsp;Checkbox checkbox[] = new Checkbox[6];<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;CheckboxExample win = new CheckboxExample();<BR>
&nbsp;}<BR>
&nbsp;public CheckboxExample() {<BR>
&nbsp;&nbsp;super(&quot;CheckboxExample&quot;);<BR>
&nbsp;&nbsp;addMenus();<BR>
&nbsp;&nbsp;addComponents();<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(400,400);<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void addMenus() {<BR>
&nbsp;&nbsp;MenuBar menubar = new MenuBar();<BR>
&nbsp;&nbsp;Menu file = new Menu(&quot;File&quot;);<BR>
&nbsp;&nbsp;file.add(&quot;Quit&quot;);<BR>
&nbsp;&nbsp;menubar.add(file);<BR>
&nbsp;&nbsp;setMenuBar(menubar);<BR>
&nbsp;}<BR>
&nbsp;void addComponents() {<BR>
&nbsp;&nbsp;add(&quot;North&quot;,label);<BR>
&nbsp;&nbsp;label.setAlignment(Label.CENTER);<BR>
&nbsp;&nbsp;Panel panel = new Panel();<BR>
&nbsp;&nbsp;Panel panel1 = new Panel();<BR>
&nbsp;&nbsp;panel1.setLayout(new GridLayout(3,1));<BR>
&nbsp;&nbsp;Panel panel2 = new Panel();<BR>
&nbsp;&nbsp;panel2.setLayout(new GridLayout(3,1));<BR>
&nbsp;&nbsp;checkbox[0] = new Checkbox(&quot;one&quot;);<BR>
&nbsp;&nbsp;checkbox[1] = new Checkbox(&quot;two&quot;);<BR>
&nbsp;&nbsp;checkbox[2] = new Checkbox(&quot;three&quot;);<BR>
&nbsp;&nbsp;CheckboxGroup group = new CheckboxGroup();<BR>
&nbsp;&nbsp;checkbox[3] = new Checkbox(&quot;four&quot;,group,false);
<BR>
&nbsp;&nbsp;checkbox[4] = new Checkbox(&quot;five&quot;,group,false);
<BR>
&nbsp;&nbsp;checkbox[5] = new Checkbox(&quot;six&quot;,group,false);
<BR>
&nbsp;&nbsp;for(int i=0;i&lt;3;++i) panel1.add(checkbox[i]);<BR>
&nbsp;&nbsp;for(int i=3;i&lt;6;++i) panel2.add(checkbox[i]);<BR>
&nbsp;&nbsp;panel.add(panel1);<BR>
&nbsp;&nbsp;panel.add(panel2);<BR>
&nbsp;&nbsp;add(&quot;Center&quot;,panel);<BR>
}<BR>
public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id == Event.ACTION_EVENT &amp;&amp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;if(&quot;Quit&quot;.equals(event.arg)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}else if(event.id == Event.ACTION_EVENT &amp;&amp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;event.target instanceof Checkbox){<BR>
&nbsp;&nbsp;&nbsp;String text = &quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;for(int i=0;i&lt;6;++i) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(checkbox[i].getState()) text += checkbox[i].getLabel()
+ &quot; &quot;;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;label.setText(text);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else return false;<BR>
&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">CheckboxExample</FONT></TT> program
displays the results of user check box and radio button clicks
by updating the text displayed by a <TT><FONT FACE="Courier">Label</FONT></TT>
object.
<P>
The <TT><FONT FACE="Courier">checkbox[]</FONT></TT> array is used
to store both check boxes and radio buttons. The <TT><FONT FACE="Courier">addComponents()</FONT></TT>
method is invoked by the <TT><FONT FACE="Courier">CheckboxExample()</FONT></TT>
constructor to add the check boxes and radio buttons to the application
window.
<P>
The <TT><FONT FACE="Courier">addComponents()</FONT></TT> method
places the <TT><FONT FACE="Courier">Label</FONT></TT> object to
be updated in the top center of the application window. It then
creates three <TT><FONT FACE="Courier">Panel</FONT></TT> objects,
two of which are placed on the third <TT><FONT FACE="Courier">Panel</FONT></TT>
object. Both of the second-level panels are set up using the grid-style
layout with one column and three rows. The three check boxes are
placed in one panel, and the three radio buttons are placed in
the other. A <TT><FONT FACE="Courier">CheckboxGroup</FONT></TT>
object is used to organize the radio buttons into a common <TT><FONT FACE="Courier">CheckboxGroup</FONT></TT>
object.
<P>
The <TT><FONT FACE="Courier">ACTION_EVENT</FONT></TT> event associated
with a user checking on a check box is handled by determining
which check boxes and radio buttons are checked and displaying
their labels using the <TT><FONT FACE="Courier">Label</FONT></TT>
object at the top of the window. Play around with the program
to see how check boxes are treated differently than radio buttons.
<P>
Figure 11.8 shows the window initially displayed by the <TT><FONT FACE="Courier">CheckboxExample</FONT></TT>
program.
<P>
<A HREF="f11-8.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f11-8.gif" ><B>Figure 11.8 : </B><I>The CheckboxExample program's initial display.</I></A>
<H3><A NAME="ChoicesandLists">Choices and Lists</A></H3>
<P>
The <TT><FONT FACE="Courier">Choice</FONT></TT> class implements
a list of choices from which a single choice may be selected.
Its methods provide the capability to update the list and query
its status.
<P>
The <TT><FONT FACE="Courier">List</FONT></TT> class implements
lists from which a single or multiple selections may be made.
Its methods provide the capability to update the elements of a
list and query their selection status. The program shown in Listing
11.9 illustrates the use of the <TT><FONT FACE="Courier">Choice</FONT></TT>
and <TT><FONT FACE="Courier">List</FONT></TT> classes.
<HR>
<BLOCKQUOTE>
<B>Listing 11.9. The </B><TT><B><FONT FACE="Courier">ListExample</FONT></B></TT><B>
program.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
<BR>
</FONT></TT>public class ListExample extends Frame {<BR>
&nbsp;Label label = new Label(&quot;Default Text&quot;);<BR>
&nbsp;Choice choice = new Choice();<BR>
&nbsp;List list = new List(3,true);<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;ListExample win = new ListExample();<BR>
&nbsp;}<BR>
&nbsp;public ListExample() {<BR>
&nbsp;&nbsp;super(&quot;ListExample&quot;);<BR>
&nbsp;&nbsp;addMenus();<BR>
&nbsp;&nbsp;addComponents();<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(400,400);<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void addMenus() {<BR>
&nbsp;&nbsp;MenuBar menubar = new MenuBar();<BR>
&nbsp;&nbsp;Menu file = new Menu(&quot;File&quot;);<BR>
&nbsp;&nbsp;file.add(&quot;Quit&quot;);<BR>
&nbsp;&nbsp;menubar.add(file);<BR>
&nbsp;&nbsp;setMenuBar(menubar);<BR>
&nbsp;}<BR>
&nbsp;void addComponents() {<BR>
&nbsp;&nbsp;add(&quot;North&quot;,label);<BR>
&nbsp;&nbsp;label.setAlignment(Label.CENTER);<BR>
&nbsp;&nbsp;Panel panel = new Panel();<BR>
&nbsp;&nbsp;Panel panel1 = new Panel();<BR>
&nbsp;&nbsp;Panel panel2 = new Panel();<BR>
&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;choice.addItem(&quot;one&quot;);<BR>
&nbsp;&nbsp;&nbsp;choice.addItem(&quot;two&quot;);<BR>
&nbsp;&nbsp;&nbsp;choice.addItem(&quot;three&quot;);<BR>
&nbsp;&nbsp;} catch (NullPointerException ex) {<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;panel1.add(choice);<BR>
&nbsp;&nbsp;list.addItem(&quot;four&quot;);<BR>
&nbsp;&nbsp;list.addItem(&quot;five&quot;);<BR>
&nbsp;&nbsp;list.addItem(&quot;six&quot;);<BR>
&nbsp;&nbsp;list.addItem(&quot;seven&quot;);<BR>
&nbsp;&nbsp;list.addItem(&quot;eight&quot;);<BR>
&nbsp;&nbsp;panel2.add(list);<BR>
&nbsp;&nbsp;panel.add(panel1);<BR>
&nbsp;&nbsp;panel.add(panel2);<BR>
&nbsp;&nbsp;add(&quot;Center&quot;,panel);<BR>
}<BR>
public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id == Event.ACTION_EVENT &amp;&amp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;if(&quot;Quit&quot;.equals(event.arg)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}else if(event.target instanceof Choice ||<BR>
&nbsp;&nbsp;&nbsp;&nbsp; event.target instanceof List){<BR>
&nbsp;&nbsp;&nbsp;String text = choice.getSelectedItem() + &quot;
&quot;;<BR>
&nbsp;&nbsp;&nbsp;for(int i=0;i&lt;5;++i) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(list.isSelected(i)) text += list.getItem(i)
+ &quot; &quot;;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;label.setText(text);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else return false;<BR>
&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">ListExample</FONT></TT> program illustrates
the similarities and differences between the <TT><FONT FACE="Courier">Choice</FONT></TT>
and <TT><FONT FACE="Courier">List</FONT></TT> classes. The <TT><FONT FACE="Courier">label</FONT></TT>,
<TT><FONT FACE="Courier">list</FONT></TT>, and <TT><FONT FACE="Courier">choice</FONT></TT>
variables are used to provide access to their related GUI components.
These field variables are created and initialized in the beginning
of the class description.
<P>
The <TT><FONT FACE="Courier">addComponents()</FONT></TT> method
adds a <TT><FONT FACE="Courier">Label</FONT></TT> object at the
top of the window and then creates three panels. The <TT><FONT FACE="Courier">panel</FONT></TT>
variable refers to the main <TT><FONT FACE="Courier">Panel</FONT></TT>
object and is added to the center of the application window. The
<TT><FONT FACE="Courier">panel1</FONT></TT> and <TT><FONT FACE="Courier">panel2</FONT></TT>
variables refer to <TT><FONT FACE="Courier">Panel</FONT></TT>
objects that are placed on the left and right sides of the area
covered by the main panel. A <TT><FONT FACE="Courier">Choice</FONT></TT>
object is created and added to the left panel, and a <TT><FONT FACE="Courier">List</FONT></TT>
object is created and added to the right panel.
<P>
The <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
is updated to check for events related to the <TT><FONT FACE="Courier">Choice</FONT></TT>
or <TT><FONT FACE="Courier">List</FONT></TT> classes and updates
the <TT><FONT FACE="Courier">Label</FONT></TT> object with the
user's selections.
<P>
Figure 11.9 shows the window initially displayed by the <TT><FONT FACE="Courier">ListExample</FONT></TT>
program.
<P>
<A HREF="f11-9.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f11-9.gif" ><B>Figure 11.9 : </B><I>The ListExample program's initial display.</I></A>
<H3><A NAME="TextFieldsandTextAreas">Text Fields and Text Areas</A>
</H3>
<P>
The <TT><FONT FACE="Courier">TextField</FONT></TT> class provides
the capability to enter a single line of text. To allow users
to enter password information without revealing the password to
onlookers, you can use the <TT><FONT FACE="Courier">TextField</FONT></TT>
class, which allows you to set an alternate character to display
instead of the actual text. The alternate characters are used
only to mask the characters and do not affect the actual data
entered. Most programs set the echo character to an asterisk.
To set an alternate character, you use the <TT><FONT FACE="Courier">setEchoCharacter()</FONT></TT>
method.
<P>
The <TT><FONT FACE="Courier">TextArea</FONT></TT> class provides
the capability to enter multiple lines of text. It provides horizontal
and vertical scrollbars to scroll the text that is entered.
<P>
The <TT><FONT FACE="Courier">TextComponent</FONT></TT> class is
the superclass of the <TT><FONT FACE="Courier">TextField</FONT></TT>
and <TT><FONT FACE="Courier">TextArea</FONT></TT> classes and
provides several methods that are common to both of these classes.
The <TT><FONT FACE="Courier">setEditable()</FONT></TT>method allows
<TT><FONT FACE="Courier">TextField</FONT></TT> and <TT><FONT FACE="Courier">TextArea</FONT></TT>
objects to be defined as read-only.
<P>
The program shown in Listing 11.10 illustrates the use of the
<TT><FONT FACE="Courier">TextField</FONT></TT> and <TT><FONT FACE="Courier">TextArea</FONT></TT>
classes.
<HR>
<BLOCKQUOTE>
<B>Listing 11.10. The </B><TT><B><FONT FACE="Courier">TextExample</FONT></B></TT><B>
program.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
<BR>
</FONT></TT>public class TextExample extends Frame {<BR>
&nbsp;TextField textfield = new TextField(&quot;Enter text here.&quot;);
<BR>
&nbsp;TextArea textarea = new TextArea(&quot;And it will be inserted
here!&quot;);<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;TextExample win = new TextExample();<BR>
&nbsp;}<BR>
&nbsp;public TextExample() {<BR>
&nbsp;&nbsp;super(&quot;TextExample&quot;);<BR>
&nbsp;&nbsp;addMenus();<BR>
&nbsp;&nbsp;addComponents();<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(400,400);<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void addMenus() {<BR>
&nbsp;&nbsp;MenuBar menubar = new MenuBar();<BR>
&nbsp;&nbsp;Menu file = new Menu(&quot;File&quot;);<BR>
&nbsp;&nbsp;file.add(&quot;Quit&quot;);<BR>
&nbsp;&nbsp;menubar.add(file);<BR>
&nbsp;&nbsp;setMenuBar(menubar);<BR>
&nbsp;}<BR>
&nbsp;void addComponents() {<BR>
&nbsp;&nbsp;add(&quot;North&quot;,textfield);<BR>
&nbsp;&nbsp;add(&quot;Center&quot;,textarea);<BR>
}<BR>
public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id == Event.ACTION_EVENT &amp;&amp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;if(&quot;Quit&quot;.equals(event.arg)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}else if(event.id == Event.ACTION_EVENT &amp;&amp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp; event.target instanceof TextField){<BR>
&nbsp;&nbsp;&nbsp;textarea.insertText(textfield.getText()+&quot;\n&quot;,0);
<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else return false;<BR>
&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">TextExample</FONT></TT> program creates
a <TT><FONT FACE="Courier">TextField</FONT></TT> object and a
<TT><FONT FACE="Courier">TextArea</FONT></TT> object and displays
them in the  North and Center regions of the application window.
When the user enters text into the <TT><FONT FACE="Courier">TextField</FONT></TT>
object and presses the Enter key, the text is inserted at the
beginning of the <TT><FONT FACE="Courier">TextArea</FONT></TT>
object.
<P>
The <TT><FONT FACE="Courier">TextExample</FONT></TT> class creates
and initializes the <TT><FONT FACE="Courier">TextField</FONT></TT>
and <TT><FONT FACE="Courier">TextArea</FONT></TT> objects. Notice
how the initial text to be displayed in these fields is specified
in their respective constructors.
<P>
The <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
checks for an action event that is identified as a <TT><FONT FACE="Courier">TextField</FONT></TT>
object, and then updates the <TT><FONT FACE="Courier">TextArea</FONT></TT>
object with the text contained in the <TT><FONT FACE="Courier">TextField</FONT></TT>
object. The <TT><FONT FACE="Courier">getText()</FONT></TT> method
of the <TT><FONT FACE="Courier">TextComponent</FONT></TT> class
is used to retrieve the user's text from the <TT><FONT FACE="Courier">TextField</FONT></TT>
object. The <TT><FONT FACE="Courier">insertText()</FONT></TT>method
of the <TT><FONT FACE="Courier">TextArea</FONT></TT> class is
then used to insert this text at the beginning of the <TT><FONT FACE="Courier">TextArea</FONT></TT>
object.
<P>
Figure 11.10 shows the window initially displayed by the <TT><FONT FACE="Courier">TextExample</FONT></TT>
program.
<P>
<A HREF="f11-10.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f11-10.gif" ><B>Figure 11.10 : </B><I>The TextExample program's initial display.</I></A>
<H2><A NAME="DrawingwiththeCanvasandGraphicsCla"><FONT SIZE=5 COLOR=#Ff0000>Drawing
with the </FONT><TT><FONT SIZE=5 COLOR=#Ff0000 FACE="Courier">Canvas</FONT></TT><FONT SIZE=5 COLOR=#Ff0000>
and </FONT><TT><FONT SIZE=5 COLOR=#Ff0000 FACE="Courier">Graphics</FONT></TT><FONT SIZE=5 COLOR=#Ff0000>
Classes</FONT></A></H2>
<P>
The <TT><FONT FACE="Courier">Canvas</FONT></TT> class provides
the capability to display a <TT><FONT FACE="Courier">Graphics</FONT></TT>
object within a window area. The <TT><FONT FACE="Courier">paint()</FONT></TT>
method of the <TT><FONT FACE="Courier">Graphics</FONT></TT> class
is used to update the <TT><FONT FACE="Courier">Graphics</FONT></TT>
object associated with a <TT><FONT FACE="Courier">Canvas</FONT></TT>
object. The <TT><FONT FACE="Courier">Graphics</FONT></TT> class
is an abstract class that provides numerous methods for drawing
objects and displaying images. Access to a <TT><FONT FACE="Courier">Graphics</FONT></TT>
object is provided via the <TT><FONT FACE="Courier">paint()</FONT></TT>
method of the <TT><FONT FACE="Courier">Canvas</FONT></TT> and
<TT><FONT FACE="Courier">Component</FONT></TT> classes. The program
shown in Listing 11.11 illustrates the use of the <TT><FONT FACE="Courier">Canvas</FONT></TT>
and <TT><FONT FACE="Courier">Graphics</FONT></TT> classes.
<HR>
<BLOCKQUOTE>
<B>Listing 11.11. The </B><TT><B><FONT FACE="Courier">GraphicsExample</FONT></B></TT><B>
program.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
<BR>
</FONT></TT>public class GraphicsExample extends Frame {<BR>
&nbsp;LeftCanvas lcanvas = new LeftCanvas();<BR>
&nbsp;RightCanvas rcanvas = new RightCanvas();<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;GraphicsExample win = new GraphicsExample();<BR>
&nbsp;}<BR>
&nbsp;public GraphicsExample() {<BR>
&nbsp;&nbsp;super(&quot;GraphicsExample&quot;);<BR>
&nbsp;&nbsp;addMenus();<BR>
&nbsp;&nbsp;addComponents();<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(200,200);<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void addMenus() {<BR>
&nbsp;&nbsp;MenuBar menubar = new MenuBar();<BR>
&nbsp;&nbsp;Menu file = new Menu(&quot;File&quot;);<BR>
&nbsp;&nbsp;file.add(&quot;Quit&quot;);<BR>
&nbsp;&nbsp;menubar.add(file);<BR>
&nbsp;&nbsp;setMenuBar(menubar);<BR>
&nbsp;}<BR>
&nbsp;void addComponents() {<BR>
&nbsp;&nbsp;setLayout(new GridLayout(1,2));<BR>
&nbsp;&nbsp;add(lcanvas);<BR>
&nbsp;&nbsp;add(rcanvas);<BR>
&nbsp;}<BR>
&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;lcanvas.repaint();<BR>
&nbsp;&nbsp;rcanvas.repaint();<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id == Event.ACTION_EVENT &amp;&amp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;if(&quot;Quit&quot;.equals(event.arg)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}else return false;<BR>
&nbsp;}<BR>
}<BR>
<BR>
class LeftCanvas extends Canvas {<BR>
&nbsp;public LeftCanvas() {<BR>
&nbsp;&nbsp;super();<BR>
&nbsp;}<BR>
&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;g.setColor(Color.red);<BR>
&nbsp;&nbsp;g.fillOval(10,10,50,50);<BR>
&nbsp;}<BR>
}<BR>
<BR>
class RightCanvas extends Canvas {<BR>
&nbsp;public RightCanvas() {<BR>
&nbsp;&nbsp;super();<BR>
&nbsp;}<BR>
&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;g.setColor(Color.blue);<BR>
&nbsp;&nbsp;g.fillRect(10,10,50,50);<BR>
&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">GraphicsExample</FONT></TT> program
declares two subclasses of the <TT><FONT FACE="Courier">Canvas</FONT></TT>
class: <TT><FONT FACE="Courier">LeftCanvas</FONT></TT> and <TT><FONT FACE="Courier">RightCanvas</FONT></TT>.
An object from each of these classes is created and added to the
main application window. The layout of the <TT><FONT FACE="Courier">GraphicsExample</FONT></TT>
window is set to a one-row by two-column <TT><FONT FACE="Courier">GridLayout</FONT></TT>
object. This accomplishes the same results as using multiple panels
as you saw in the previous examples in this chapter. The <TT><FONT FACE="Courier">paint()</FONT></TT>
method of the <TT><FONT FACE="Courier">GraphicsExample</FONT></TT>
class is defined to invoke the <TT><FONT FACE="Courier">repaint()</FONT></TT>
methods of the <TT><FONT FACE="Courier">LeftCanvas</FONT></TT>
and <TT><FONT FACE="Courier">RightCanvas</FONT></TT> objects,
which causes these objects to update their respective screen areas.
<P>
The <TT><FONT FACE="Courier">LeftCanvas</FONT></TT> class extends
the <TT><FONT FACE="Courier">Canvas</FONT></TT> class and uses
the <TT><FONT FACE="Courier">setColor()</FONT></TT> and <TT><FONT FACE="Courier">fillOval()</FONT></TT>methods
of the <TT><FONT FACE="Courier">Graphics</FONT></TT> class to
draw a red oval in the <TT><FONT FACE="Courier">Graphics</FONT></TT>
object associated with the canvas.
<P>
The <TT><FONT FACE="Courier">RightCanvas</FONT></TT> class is
defined in a manner similar to the <TT><FONT FACE="Courier">LeftCanvas</FONT></TT>
class. It draws a blue rectangle instead of a red oval.
<P>
Figure 11.11 shows the window initially displayed by the <TT><FONT FACE="Courier">GraphicsExample</FONT></TT>
program.
<P>
<A HREF="f11-11.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f11-11.gif" ><B>Figure 11.11 : </B><I>The GraphicsExample program's initial display.</I></A>
<H2><A NAME="GeometricalClasses"><FONT SIZE=5 COLOR=#Ff0000>Geometrical
Classes</FONT></A></H2>
<P>
The AWT provides the <TT><FONT FACE="Courier">Point</FONT></TT>,
<TT><FONT FACE="Courier">Rectangle</FONT></TT>, <TT><FONT FACE="Courier">Polygon</FONT></TT>,
and <TT><FONT FACE="Courier">Dimension</FONT></TT> classes to
support geometrical operations. The <TT><FONT FACE="Courier">Point</FONT></TT>
class encapsulates a point in a two-dimensional plane. The <TT><FONT FACE="Courier">Rectangle</FONT></TT>
class represents a rectangle by its upper-left corner and its
height and width dimensions. The <TT><FONT FACE="Courier">Polygon</FONT></TT>
class represents a polygon as an array of its x coordinates and
an array of its y coordinates. The<BR>
<TT><FONT FACE="Courier">Dimension</FONT></TT> class encapsulates
the dimensions of a two-dimensional object. The program shown
in Listing 11.12 illustrates the use of these classes.
<HR>
<BLOCKQUOTE>
<B>Listing 11.12. The </B><TT><B><FONT FACE="Courier">GeometryExample</FONT></B></TT><B>
program.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
<BR>
</FONT></TT>public class GeometryExample extends Frame {<BR>
&nbsp;Point p1 = new Point(0,0);<BR>
&nbsp;Point p2 = new Point(100,100);<BR>
&nbsp;Dimension dim = new Dimension(50,50);<BR>
&nbsp;Rectangle rect = new Rectangle(p2,dim);<BR>
&nbsp;int xcoord[] = {150,275,300,350,290,250,200,150};<BR>
&nbsp;int ycoord[] = {150,125,50,150,175,250,350,150};<BR>
&nbsp;Polygon poly = new Polygon(xcoord,ycoord,xcoord.length);
<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;GeometryExample win = new GeometryExample();<BR>
&nbsp;}<BR>
&nbsp;public GeometryExample() {<BR>
&nbsp;&nbsp;super(&quot;GeometryExample&quot;);<BR>
&nbsp;&nbsp;addMenus();<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(400,400);<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void addMenus() {<BR>
&nbsp;&nbsp;MenuBar menubar = new MenuBar();<BR>
&nbsp;&nbsp;Menu file = new Menu(&quot;File&quot;);<BR>
&nbsp;&nbsp;file.add(&quot;Quit&quot;);<BR>
&nbsp;&nbsp;menubar.add(file);<BR>
&nbsp;&nbsp;setMenuBar(menubar);<BR>
&nbsp;}<BR>
&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;g.drawLine(p1.x,p1.y,p2.x,p2.y);<BR>
&nbsp;&nbsp;g.drawRect(rect.x,rect.y,rect.width,rect.height);
<BR>
&nbsp;&nbsp;g.drawPolygon(poly);<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id == Event.ACTION_EVENT &amp;&amp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;if(&quot;Quit&quot;.equals(event.arg)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}else return false;<BR>
&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">GeometryExample</FONT></TT> class
creates several geometrical objects in the class declaration.
Two <TT><FONT FACE="Courier">Point</FONT></TT> objects are created
and assigned to the <TT><FONT FACE="Courier">p1</FONT></TT> and
<TT><FONT FACE="Courier">p2</FONT></TT> variables. A 50 pixel
<FONT FACE="Symbol">&#165;</FONT> 50 pixel <TT><FONT FACE="Courier">Dimension</FONT></TT>
object is created and assigned to the <TT><FONT FACE="Courier">dim</FONT></TT>
variable. A <TT><FONT FACE="Courier">Rectangle</FONT></TT> object
is created using the <TT><FONT FACE="Courier">Point</FONT></TT>
object referenced by the <TT><FONT FACE="Courier">p2</FONT></TT>
and <TT><FONT FACE="Courier">dim</FONT></TT> variables and assigned
to the <TT><FONT FACE="Courier">rect</FONT></TT> variable. A <TT><FONT FACE="Courier">Polygon</FONT></TT>
object is then created with vertices at the points (150,150),
(275,125), (300,50), (350,150), (290,175), (250,250), and (200,350).
<P>
The <TT><FONT FACE="Courier">paint()</FONT></TT> method is overridden
to draw the geometrical objects on the <TT><FONT FACE="Courier">Graphics</FONT></TT>
object of the application window's default canvas. It draws a
line from <TT><FONT FACE="Courier">p1</FONT></TT> to <TT><FONT FACE="Courier">p2</FONT></TT>,
the <TT><FONT FACE="Courier">Rectangle</FONT></TT> object specified
by <TT><FONT FACE="Courier">rect</FONT></TT>, and the <TT><FONT FACE="Courier">Polygon</FONT></TT>
object specified by <TT><FONT FACE="Courier">poly</FONT></TT>.
<P>
Figure 11.12 shows the window initially displayed by the <TT><FONT FACE="Courier">GeometryExample</FONT></TT>
program.
<P>
<A HREF="f11-12.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f11-12.gif" ><B>Figure 11.12 : </B><I>The GeometryExample program's initial display.</I></A>
<H2><A NAME="UsingFonts"><FONT SIZE=5 COLOR=#Ff0000>Using Fonts</FONT></A>
</H2>
<P>
The <TT><FONT FACE="Courier">Font</FONT></TT> class encapsulates
fonts in a system-independent manner by defining several system-independent
fonts that are mapped to the fonts supported by the local operating
and windowing system. This class also defines constants that allow
a <TT><FONT FACE="Courier">Font</FONT></TT> object to be displayed
using a plain, bold, italic, or bold-italic style.
<P>
The <TT><FONT FACE="Courier">FontMetrics</FONT></TT> class encapsulates
the size parameters of a <TT><FONT FACE="Courier">Font</FONT></TT>
object. It provides several methods that return the pixel width
of characters and character strings, as well as methods that return
the height, ascent, descent, and leading pixel length of a <TT><FONT FACE="Courier">Font</FONT></TT>
object. The <I>ascent</I> and <I>descent</I> values measure the
number of pixels that a <TT><FONT FACE="Courier">Font</FONT></TT>
object ascends above and descends below its baseline. The <I>leading</I>
of a <TT><FONT FACE="Courier">Font</FONT></TT> object is the minimum
distance between the ascent of one line of text and ascent of
the following line of text. The <I>height</I> of a <TT><FONT FACE="Courier">Font</FONT></TT>
object is the sum of its ascent, descent, and leading.
<P>
The program shown in Listing 11.13 shows how the <TT><FONT FACE="Courier">Font</FONT></TT>
and <TT><FONT FACE="Courier">FontMetrics</FONT></TT> classes are
used.
<HR>
<BLOCKQUOTE>
<B>Listing 11.13. The </B><TT><B><FONT FACE="Courier">FontExample</FONT></B></TT><B>
program.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
<BR>
</FONT></TT>public class FontExample extends Frame {<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;FontExample win = new FontExample();<BR>
&nbsp;}<BR>
&nbsp;public FontExample() {<BR>
&nbsp;&nbsp;super(&quot;FontExample&quot;);<BR>
&nbsp;&nbsp;addMenus();<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(150,400);<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void addMenus() {<BR>
&nbsp;&nbsp;MenuBar menubar = new MenuBar();<BR>
&nbsp;&nbsp;Menu file = new Menu(&quot;File&quot;);<BR>
&nbsp;&nbsp;file.add(&quot;Quit&quot;);<BR>
&nbsp;&nbsp;menubar.add(file);<BR>
&nbsp;&nbsp;setMenuBar(menubar);<BR>
&nbsp;}<BR>
&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;Font font = new Font(&quot;Helvetica&quot;,Font.BOLD+Font.ITALIC,24);
<BR>
&nbsp;&nbsp;g.setFont(font);<BR>
&nbsp;&nbsp;FontMetrics metrics = g.getFontMetrics(font);<BR>
&nbsp;&nbsp;int ascent = metrics.getAscent();<BR>
&nbsp;&nbsp;int height = metrics.getHeight();<BR>
&nbsp;&nbsp;int leading = metrics.getLeading();<BR>
&nbsp;&nbsp;int baseline = leading + ascent;<BR>
&nbsp;&nbsp;for(int i=0;i&lt;10;++i) {<BR>
&nbsp;&nbsp;&nbsp;g.drawString(&quot;Line &quot;+String.valueOf(i),10,baseline);
<BR>
&nbsp;&nbsp;&nbsp;baseline += height;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id == Event.ACTION_EVENT &amp;&amp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;if(&quot;Quit&quot;.equals(event.arg)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}else return false;<BR>
&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">FontExample</FONT></TT> program creates
a 24-point, bold, italic, Helvetica <TT><FONT FACE="Courier">Font</FONT></TT>
object and uses the <TT><FONT FACE="Courier">FontMetrics</FONT></TT>
object associated with this font to draw text on the window's
default <TT><FONT FACE="Courier">Graphics</FONT></TT> object.
<P>
Most of the processing is performed in the overridden <TT><FONT FACE="Courier">paint()</FONT></TT>
method. It creates the <TT><FONT FACE="Courier">Font</FONT></TT>
object and uses the <TT><FONT FACE="Courier">getFontMetrics()</FONT></TT>
method of the <TT><FONT FACE="Courier">Graphics</FONT></TT> class
to get the <TT><FONT FACE="Courier">FontMetrics</FONT></TT> object
associated with the font. It then retrieves the ascent, height,
and leading parameters of the font via the <TT><FONT FACE="Courier">FontMetrics</FONT></TT>
object.
<P>
The <TT><FONT FACE="Courier">baseline</FONT></TT> variable is
used to keep track of the vertical coordinate of where a line
of text should be displayed. The distance between subsequent baselines
is the height metric of the font.
<P>
Ten lines of text are displayed to show how all of these methods
come together to draw text on a <TT><FONT FACE="Courier">Graphics</FONT></TT>
object.
<P>
Figure 11.13 shows the window initially displayed by the <TT><FONT FACE="Courier">FontExample</FONT></TT>
program.
<P>
<A HREF="f11-13.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f11-13.gif" ><B>Figure 11.13 : </B><I>The FontExample program's initial display.</I></A>
<H2><A NAME="ImagerelatedClasses"><FONT SIZE=5 COLOR=#Ff0000>Image-related
Classes</FONT></A></H2>
<P>
The <TT><FONT FACE="Courier">Image</FONT></TT> and <TT><FONT FACE="Courier">Color</FONT></TT>
classes encapsulate graphical images and colors in a format-independent
manner. The classes and interfaces of the <TT><FONT FACE="Courier">java.awt.image</FONT></TT>
package are used to implement image processing applications. The
<TT><FONT FACE="Courier">ImageProducer</FONT></TT> interface defines
the methods that are implemented by classes that produce image
data. The <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> interface
defines methods that are used by classes that use image data.
The <TT><FONT FACE="Courier">ImageObserver</FONT></TT> interface
defines constants and methods that are used to monitor the loading
of an image.
<P>
The <TT><FONT FACE="Courier">ColorModel</FONT></TT>, <TT><FONT FACE="Courier">DirectColorModel</FONT></TT>,
and <TT><FONT FACE="Courier">IndexColorModel</FONT></TT> classes
are used to implement portable color models. The <TT><FONT FACE="Courier">FilteredImageSource</FONT></TT>,
<TT><FONT FACE="Courier">ImageFilter</FONT></TT>, <TT><FONT FACE="Courier">RGBImageFilter</FONT></TT>,
and <TT><FONT FACE="Courier">CropImageFilter</FONT></TT> classes
provide the capability to implement image-filtering algorithms.
The <TT><FONT FACE="Courier">PixelGrabber</FONT></TT> and <TT><FONT FACE="Courier">MemoryImageSource</FONT></TT>
classes are used to capture an image to a memory array and to
generate an image from a memory array. The <TT><FONT FACE="Courier">MediaTracker</FONT></TT>
class provides the capability to track the loading of a list of
images.
<P>
The program shown in Listing 11.14 illustrates the use of some
of the image-related classes introduced in this section.
<HR>
<BLOCKQUOTE>
<B>Listing 11.14. The </B><TT><B><FONT FACE="Courier">ImageExample</FONT></B></TT><B>
program.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
<BR>
</FONT></TT>public class ImageExample extends Frame {<BR>
&nbsp;Image image;<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;ImageExample win = new ImageExample();<BR>
&nbsp;}<BR>
&nbsp;public ImageExample() {<BR>
&nbsp;&nbsp;super(&quot;ImageExample&quot;);<BR>
&nbsp;&nbsp;addMenus();<BR>
&nbsp;&nbsp;loadImage();<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(400,400);<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void addMenus() {<BR>
&nbsp;&nbsp;MenuBar menubar = new MenuBar();<BR>
&nbsp;&nbsp;Menu file = new Menu(&quot;File&quot;);<BR>
&nbsp;&nbsp;file.add(&quot;Quit&quot;);<BR>
&nbsp;&nbsp;menubar.add(file);<BR>
&nbsp;&nbsp;setMenuBar(menubar);<BR>
&nbsp;}<BR>
&nbsp;void loadImage() {<BR>
&nbsp;&nbsp;Toolkit toolkit = getToolkit();<BR>
&nbsp;&nbsp;image = toolkit.getImage(&quot;test.gif&quot;);<BR>
&nbsp;}<BR>
&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;g.drawImage(image,0,0,this);<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id == Event.ACTION_EVENT &amp;&amp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;if(&quot;Quit&quot;.equals(event.arg)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}else return false;<BR>
&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">ImageExample</FONT></TT> program
loads the <TT><FONT FACE="Courier">test.gif</FONT></TT> file and
displays it on the default <TT><FONT FACE="Courier">Graphics</FONT></TT>
object of the application window.
<P>
The <TT><FONT FACE="Courier">loadImage()</FONT></TT> method gets
the default <TT><FONT FACE="Courier">Toolkit</FONT></TT> object
of the application window and uses the <TT><FONT FACE="Courier">getImage()</FONT></TT>
method of the <TT><FONT FACE="Courier">Tookit</FONT></TT> class
to load the <TT><FONT FACE="Courier">test.gif</FONT></TT> file
into the <TT><FONT FACE="Courier">Image</FONT></TT> object referenced
by the <TT><FONT FACE="Courier">image</FONT></TT> variable. The
<TT><FONT FACE="Courier">Toolkit</FONT></TT> class is covered
in the section &quot;The <TT><FONT FACE="Courier">Toolkit</FONT></TT>
Class and the Native Platform Window Implementation.&quot;
<P>
The <TT><FONT FACE="Courier">paint()</FONT></TT> method performs
the actual drawing of the image on the screen. You will probably
notice some flickering of the image while it is being displayed.
This occurs because the program is trying to display the image
at the same time that it is loading it, much like the image display
of a Web browser. The example in the next section shows you how
to use the <TT><FONT FACE="Courier">MediaTracker</FONT></TT> class
to avoid this problem.
<P>
Figure 11.14 shows the window initially displayed by the <TT><FONT FACE="Courier">ImageExample</FONT></TT>
program.
<P>
<A HREF="f11-14.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f11-14.gif" ><B>Figure 11.14 : </B><I>The ImageExample program's initial display.</I></A>
<H2><A NAME="UsingScrollbars"><FONT SIZE=5 COLOR=#Ff0000>Using
Scrollbars</FONT></A></H2>
<P>
Scrollbars provide the capability to scroll an object that is
too large to fit in a window. Both vertical and horizontal scrollbars
are supported by the AWT. Vertical scrollbars scroll an object
up and down in a window, and horizontal scrollbars scroll an object
left and right. Both types of scrollbars are implemented via the
<TT><FONT FACE="Courier">Scrollbar</FONT></TT> class.
<P>
Scrollbars generate events based on user interaction. A user can
click on the end of a scrollbar to generate a <TT><FONT FACE="Courier">SCROLL_LINE_UP</FONT></TT>
or <TT><FONT FACE="Courier">SCROLL_LINE_DOWN</FONT></TT> event,
click between the scrollbar's tab and the end of the scrollbar
to generate a <TT><FONT FACE="Courier">SCROLL_PAGE_UP</FONT></TT>
or <TT><FONT FACE="Courier">SCROLL_PAGE_DOWN</FONT></TT> event,
or move the scrollbar's tab with the mouse to generate the <TT><FONT FACE="Courier">SCROLL_ABSOLUTE</FONT></TT>
event.
<P>
Scrollbars are defined by their <TT><FONT FACE="Courier">orientation</FONT></TT>,
<TT><FONT FACE="Courier">value</FONT></TT>, <TT><FONT FACE="Courier">visible</FONT></TT>,
<TT><FONT FACE="Courier">minimum</FONT></TT>, and <TT><FONT FACE="Courier">maximum</FONT></TT>
parameters. The <TT><FONT FACE="Courier">orientation</FONT></TT>
parameter specifies whether a scrollbar is horizontal or vertical.
The <TT><FONT FACE="Courier">minimum</FONT></TT> and<BR>
<TT><FONT FACE="Courier">maximum</FONT></TT> parameters specify
the minimum and maximum values associated with a scrollbar. The
<TT><FONT FACE="Courier">value</FONT></TT> parameter specifies
the current value of a scrollbar. The <TT><FONT FACE="Courier">visible</FONT></TT>
parameter specifies the visible size of the area to be scrolled.
<P>
The program shown in Listing 11.15 illustrates the use of the
<TT><FONT FACE="Courier">Scrollbar</FONT></TT> class.
<HR>
<BLOCKQUOTE>
<B>Listing 11.15. The </B><TT><B><FONT FACE="Courier">ScrollbarExample</FONT></B></TT><B>
program.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
<BR>
</FONT></TT>public class ScrollbarExample extends Frame {<BR>
&nbsp;Image image;<BR>
&nbsp;Scrollbar horiz = new Scrollbar(Scrollbar.HORIZONTAL,0,400,0,500);
<BR>
&nbsp;Scrollbar vert = new Scrollbar(Scrollbar.VERTICAL,0,400,0,500);
<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;ScrollbarExample win = new ScrollbarExample();<BR>
&nbsp;}<BR>
&nbsp;public ScrollbarExample() {<BR>
&nbsp;&nbsp;super(&quot;ScrollbarExample&quot;);<BR>
&nbsp;&nbsp;addMenus();<BR>
&nbsp;&nbsp;loadImage();<BR>
&nbsp;&nbsp;add(&quot;South&quot;,horiz);<BR>
&nbsp;&nbsp;add(&quot;East&quot;,vert);<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(400,400);<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void addMenus() {<BR>
&nbsp;&nbsp;MenuBar menubar = new MenuBar();<BR>
&nbsp;&nbsp;Menu file = new Menu(&quot;File&quot;);<BR>
&nbsp;&nbsp;file.add(&quot;Quit&quot;);<BR>
&nbsp;&nbsp;menubar.add(file);<BR>
&nbsp;&nbsp;setMenuBar(menubar);<BR>
&nbsp;}<BR>
&nbsp;void loadImage() {<BR>
&nbsp;&nbsp;Toolkit toolkit = getToolkit();<BR>
&nbsp;&nbsp;image = toolkit.getImage(&quot;bigtest.gif&quot;);
<BR>
&nbsp;&nbsp;MediaTracker tracker = new MediaTracker(this);<BR>
&nbsp;&nbsp;tracker.addImage(image,7);<BR>
&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;tracker.waitForID(7);<BR>
&nbsp;&nbsp;} catch(InterruptedException ex) {<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;g.drawImage(image,0-horiz.getValue(),0-vert.getValue(),this);
<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id == Event.ACTION_EVENT &amp;&amp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;if(&quot;Quit&quot;.equals(event.arg)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}else if(event.target instanceof Scrollbar) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else return false;<BR>
&nbsp;}<BR>
<TT><FONT FACE="Courier">}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">ScrollbarExample</FONT></TT> program
loads and displays a GIF image that is too large to fit in the
application window. It uses scrollbars to allow the user to scroll
through the image's display. The image is contained in the <TT><FONT FACE="Courier">bigtest.gif</FONT></TT>
file.
<P>
The horizontal and vertical scrollbars are created at the beginning
of the class's declaration. These scrollbars are assigned to the
<TT><FONT FACE="Courier">horiz</FONT></TT> and <TT><FONT FACE="Courier">vert</FONT></TT>
variables. The <TT><FONT FACE="Courier">handleEvent()</FONT></TT>
method is updated to look for any scrollbar-related events and
invokes the <TT><FONT FACE="Courier">repaint()</FONT></TT> method
to cause the screen to be redrawn in response to these events.
<P>
The <TT><FONT FACE="Courier">paint()</FONT></TT>method is overridden
to redisplay the loaded image based on the current values of the
scrollbars. The <TT><FONT FACE="Courier">getValue()</FONT></TT>
method of the <TT><FONT FACE="Courier">Scrollbar</FONT></TT> class
is used to retrieve these values.
<P>
The <TT><FONT FACE="Courier">loadImage()</FONT></TT>method uses
a <TT><FONT FACE="Courier">MediaTracker</FONT></TT> object to
cause the program to wait for an image to be loaded before performing
further processing.
<P>
Figure 11.15 shows the window initially displayed by the <TT><FONT FACE="Courier">ScrollbarExample</FONT></TT>
program.
<P>
<A HREF="f11-15.gif" tp