<HTML>

<HEAD>
   <TITLE>Chapter 20 -- Designing and Implementing Advanced
Applets</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<!--Begin JavaScript roadmap code.  If editing downloaded HTML source, delete
 this portion.-->

<script language="JavaScript">
<!--

function TripodShowPopup()
{
   var bName=navigator.appName;
   var bVer=parseInt(navigator.appVersion);
   var now = new Date();
   var popupURL = "/adm/popup/roadmap.shtml?"+"member_name=er4ebus&path=peternortonjavaprograming&client_ip=200.190.100.218&ts=1015337253&ad_type=POPUP&category=net&id=adb8466aba814b23b60228f35de4f65e";
   var popupName = "TripodPopup";

   if (bName=="Netscape" && bVer<=3)
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=614,height=150');
   }
   else
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=604,height=135');
   }
   popup.location = popupURL;
}

if(window.parent==window)
{
   TripodShowPopup();
}

// -->
</script>

<script language="JavaScript1.2">
<!--

function changeOpenFunction()
{
   var original_window_open = window.open;
   function new_open_function(url, name, features, replace)
   {
      if(name != "TripodPopup")
         return original_window_open(url, name, features, replace);
   }
   window.open = new_open_function;
}
var bName = navigator.appName;

if(bName != "Netscape")
   changeOpenFunction();

// -->
</script>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#Ff0000>Chapter 20</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#Ff0000>Designing and Implementing Advanced
Applets</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>

<UL>
<LI><A HREF="#ProjectDevelopmentandPlanning" >Project Development and Planning</A>
<UL>
<LI><A HREF="#TheRequirementsPhase" >The Requirements Phase</A>
<LI><A HREF="#TheSpecificationAnalysisPhase" >The Specification/Analysis Phase</A>
<LI><A HREF="#ThePlanningPhase" >The Planning Phase</A>
</UL>
<LI><A HREF="#ProjectDesign" >Project Design</A>
<LI><A HREF="#TheImplementationPhase" >The Implementation Phase</A>
<UL>
<LI><A HREF="#ContainersfortheObjectsUsedintheS" >Containers for the Objects Used in the SpreadSheet Applet</A>
<LI><A HREF="#InitializingthePrimaryFrame" >Initializing the Primary Frame</A>
<LI><A HREF="#DeterminingtheStateoftheApplet" >Determining the State of the Applet</A>
<LI><A HREF="#RunningAppletThreads" >Running Applet Threads</A>
<LI><A HREF="#PaintingtheFrame" >Painting the Frame</A>
<LI><A HREF="#UpdatingtheAppletsFrame" >Updating the Applet's Frame</A>
<LI><A HREF="#HandlingEventsintheApplet" >Handling Events in the Applet</A>
<LI><A HREF="#UpdatingtheCurrentCellsValue" >Updating the Current Cell's Value</A>
<LI><A HREF="#HandlingFormulas" >Handling Formulas</A>
<LI><A HREF="#CreatingCells" >Creating Cells</A>
<LI><A HREF="#PreparingCellsforDisplay" >Preparing Cells for Display</A>
<LI><A HREF="#UtilityMethods" >Utility Methods</A>
<LI><A HREF="#ParsingFormulas" >Parsing Formulas</A>
<LI><A HREF="#PaintingCells" >Painting Cells</A>
<LI><A HREF="#BuildingtheNodeObject" >Building the Node Object</A>
<LI><A HREF="#BuildingtheInputArea" >Building the Input Area</A>
</UL>
<LI><A HREF="#TheCompleteApplet" >The Complete Applet</A>
<LI><A HREF="#PuttingtheSpreadSheetApplettoUse" >Putting the SpreadSheet Applet to Use</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
Java is much more than a tool for animating objects. Whether you
are on a corporate intranet or the Internet, you can use Java
to solve your real-world business problems today. This chapter
takes you step by step through the development of an advanced
applet called <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>.
<P>
<TT><FONT FACE="Courier">SpreadSheet</FONT></TT> is an amazing
applet that implements a full-featured spreadsheet in less than
900 lines of code, using many of the advanced features of the
Java programming language. Whereas previous chapters focus primarily
on programming concepts, this chapter's emphasis is on design
concepts. The design of your applet is the key to its power and
reusability. Examining the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet should give you a better understanding of using text and
graphics, manipulating text strings, using mathematical formulas,
and processing user input.
<H2><A NAME="ProjectDevelopmentandPlanning"><B><FONT SIZE=5 COLOR=#Ff0000>Project
Development and Planning</FONT></B></A></H2>
<P>
Creating quick solutions for problems is what most programmers
and Web administrators do every day. However, quick solutions
usually are not the best ones. If problems occur or you must modify
the hack later, far too often you spend more time trying to rework
your quick solution than it would have taken to develop the program
the right way in the first place. As you begin to develop more
advanced applets, you should take the time to develop and plan
them carefully.
<P>
Planning involves determining the steps necessary to complete
the project. After you plot out the steps that will take you through
project completion, you can group the steps into phases. The duration
of each phase should be relevant to the size and complexity of
the applet you are developing. Although you may be able to develop
and implement an intermediate applet in a single day, more advanced
projects are developed and implemented over a period of days,
weeks, or months. Most projects include six phases: requirements,
specification/analysis, planning, design, implementation, and
testing.<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=588>
<BLOCKQUOTE>
Because some phases are dependent on others, usually you should perform each phase in order. However, you can sometimes combine phases to suit the needs of the project you are developing. For the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT> applet, I 
combined the requirements, specification, and planning phases into a general phase called development and planning.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="TheRequirementsPhase"><B>The Requirements Phase</B></A>
</H3>
<P>
The first step in the <I>requirements phase</I> is to develop
a list of project needs by examining the purpose, scope, and audience
of the project. Then you identify your reasonable expectations
for the project. Finally, you translate these needs, goals, and
purposes into project requirements.
<P>
The <I>purpose statement</I> should describe what type of applet
you are creating and why you are creating it. The <I>scope</I>
of the project relates to its size and functionality. The <I>target
user</I> is the person or group for whom you are developing the
applet. Often you will have primary and secondary target users.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Tip</B></TD></TR>
<TR><TD WIDTH=578>
<BLOCKQUOTE>
If you have not created a project folder, you should create one now. The project folder, generally kept in both paper and electronic form, will hold everything related to the project. The paper form of the folder can be a three-ring binder or notepad, and 
the electronic version can reside on your hard drive as a directory.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The purpose, scope, and target user for the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet are defined as follows:
<UL>
<LI>Purpose: A spreadsheet that can be used interactively on the
corporate intranet or the Internet.
<LI>Scope: An advanced applet with many features.
<LI>Target user: Employees in the customer service division and
customers who want to perform spreadsheet calculations prior to
making buy/sell decisions.
</UL>
<P>
Now make a list of project constraints. Key constraints for most
projects include duration, budget, and size. The project's duration
is usually constrained by deadlines or milestones you must meet;
its budget is usually constrained by the amount of time and money
you have to invest in the project; and the size is usually constrained
by user requirements, performance issues, and the budget as well.
The initial constraints for the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet are
<UL>
<LI>Project duration: 8-10 days
<LI>Project budget: 25-40 hours
<LI>Project size: Less than 1,000 lines
</UL>
<P>
Now that you know the issues that are driving the development
of the project, you can develop a list of needs for the project.
Project needs include personnel, computer hardware and software,
financial resources, and supplies. For the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet, the list of needs is small:
<UL>
<LI>A computer with the Java Developer's Kit installed on it
<LI>A Java-capable Web browser
<LI>Disk space on hard drive
<LI>A floppy disk to back up the project
<LI>Daily time investment
</UL>
<H3><A NAME="TheSpecificationAnalysisPhase"><B>The Specification/Analysis
Phase</B></A></H3>
<P>
During the <I>specification/analysis phase</I>, you determine
the inner workings of the applet. You can do this in a traditional
manner through specification diagrams such as data-flow diagrams
or state-transition diagrams, or you can simply define the necessary
objects and the flow of data among them. The methodology you use
during this phase will depend largely on the type of applet you
are developing, the modeling tools you are using, and the development
philosophy at your organization.
<P>
For the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT> applet,
I borrowed some of the concepts used in structured analysis. Preliminary
modeling in structured analysis is done in the <I>environmental
model</I>, which helps you define the interfaces between your
applet and the user. The environmental model includes three key
components:
<UL>
<LI>Statement of purpose-Provides management with a brief description
of the applet.
<LI>Context diagram-Provides an overview of the interaction between
the applet and outside entities.
<LI>Event list-Provides a complete list of events that can occur
and to which the applet must respond.
</UL>
<P>
The great thing about the environmental model is that its components
can be modified to meet the needs of just about any type of project.
The first step in using this model is to define a purpose statement
for the project. Because the statement of purpose is intended
for management, it usually is no more than one paragraph. The
brief statement of purpose defined in the &quot;The Requirements
Phase&quot; section is expanded on for management use as follows:
<UL>
<LI>Statement of Purpose: The purpose of the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet is to help customer service personnel and clients work
through complex financial matters that require spreadsheet calculations.
The spreadsheet includes advanced features that make it useful
for solving formula-based math issues, such as summing rows and
columns.
</UL>
<P>
The second step in using the environmental model is to create
a context diagram that defines the external entities with which
the applet interacts. As with most applets, a Web browser or external
viewer acts as an intermediary between the user and the applet.
The level of detail you use in the context diagram is up to you.
For complex applets, you might want to depict each class object
that the main object interacts with on this diagram as well.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Looking Ahead</B></TD></TR>
<TR><TD WIDTH=537>
<BLOCKQUOTE>
For the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT> applet, I chose not to develop a context diagram. For an example of a context diagram, see the section titled &quot;Defining the Necessary Objects&quot; in <A HREF="ch21.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch21.htm" >Chapter 21</A>, 
&quot;Designing and Implementing Advanced Applications.&quot;
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Instead of developing a  context diagram for the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet, let's take a preliminary look at the objects needed on
the applet's primary frame. Break down the applet frame into regions,
such as a title bar, menu bar, display areas, and input areas.
You can then break these objects down into their main components.
<P>
For the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT> applet,
the main regions on the frame are a title bar, an input area,
and a display area made up of the rows and columns of the spreadsheet.
These rows and columns are, in turn, made up of individual cells.
<P>
To aid the design process, you can create a diagram that depicts
the location of these objects on the applet's primary frame. Figure
20.1 shows the preliminary design of the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet's primary frame.
<P>
<A HREF="f20-1.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f20-1.gif" ><B>Figure 20.1 : </B><I>Sketching the objects for the SpreadSheet applet's primary frame.</I></A>
<P>
The final step in using the environmental model is to create an
event list, a list of events the applet should support. You will
use this list to help define objects for the applet. In general,
most events that occur in applets are user driven. However, the
type of applet you are developing ultimately determines the type
of events in your list.
<P>
Applets by their nature as Web-published programs have a common
set of events related to the core methods of the <TT><FONT FACE="Courier">Applet</FONT></TT>
class. These events are handled explicitly by the applet when
defined in the applet or implicitly by the <TT><FONT FACE="Courier">Applet</FONT></TT>
class when not defined in the applet. Common events for applets
include the following:
<UL>
<LI>Initializing the applet
<LI>Starting the applet
<LI>Running applet threads
<LI>Painting the applet
<LI>Updating the applet
<LI>Destroying the applet when finished
</UL>
<P>
Most events for a spreadsheet are initiated when a user enters
data, such as a label for a row or column, a mathematical formula,
or a value for a cell. Because applets are published on the Web,
events can also be triggered by parameters set in the HTML document
used to display the applet. Events for the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet include the following:
<OL>
<LI>Initializing the applet
<LI>Accepting and processing parameter values
<LI>Starting the applet with default values
<LI>Running applet threads
<LI>Performing calculations
<LI>Creating the spreadsheet
<LI>Painting the spreadsheet
<LI>Accepting and process user input
<LI>Updating the spreadsheet
<LI>Destroying the applet when finished.
</OL>
<P>
Now that you have completed the environmental model for your applet,
you can go on to more detailed modeling. Here's where you translate
the event list into the actual data flow between objects. The
data flow should include input and output to key objects. The
type of data models you use will depend primarily on the type
and complexity of the applet you are developing.
<H3><A NAME="ThePlanningPhase"><B>The Planning Phase</B></A></H3>
<P>
In the <I>planning phase</I>, you take the requirements and specifications
developed in the previous phases and determine the steps necessary
to complete the project and how long each step will take. Use
the resulting schedule to define the necessary milestones, goals,
and time allocations to take the project through to completion.
<P>
The plans for a small project could be basic-for example, a list
of 15 steps with deadlines for completion of each step. In advanced
projects, there could be hundreds of project steps, with multiple
steps being performed simultaneously, or a handful of steps, with
each step being performed one after the other. Some steps would
be dependent on other steps, meaning they could not be started
until certain aspects of the project were completed. Other steps
would not be dependent on any other steps and could be performed
at any time during the project's development.
<P>
The planning phase can be a reality check for project constraints
and requirements. For example, after you plan each step of the
project you discover that it will take at least five weeks to
complete the project, yet management's deadline for project completion
is 30 days. In this case, you may have to renegotiate the deadline,
hire additional team members, or eliminate certain time-intensive
parts of the project.
<H2><A NAME="ProjectDesign"><B><FONT SIZE=5 COLOR=#Ff0000>Project
Design</FONT></B></A></H2>
<P>
You design the layout of the project in detail during the <I>design
phase</I>. Because applets include a common set of objects as
well as unique objects, applet design is slightly different from
application design. In most applets, the primary frame and associated
objects are initialized in the <TT><FONT FACE="Courier">init()</FONT></TT>
method and drawn on the frame using the <TT><FONT FACE="Courier">paint()</FONT></TT>method.
Before the applet can be used, it must be started using the <TT><FONT FACE="Courier">start()</FONT></TT>
method. You can use threads if you use the <TT><FONT FACE="Courier">run()</FONT></TT>
method.
<P>
When the applet frame must be updated, the <TT><FONT FACE="Courier">update()</FONT></TT>method
is usually called. When users move to a different page or otherwise
terminate the applet, the applet must be stopped and cleaned out
of memory. The <TT><FONT FACE="Courier">stop()</FONT></TT>method
is responsible for stopping the applet, and the <TT><FONT FACE="Courier">destroy()</FONT></TT>method
is responsible for cleaning up after the applet.
<P>
Although most of these common objects can be called implicitly
by the browser that displays the applet, you still should determine
how these objects will be used and called by your applet. After
you have identified the common objects, reexamine the primary
frame components and event list developed in the specification
phase. Each frame component and event should translate into an
object you will need in the finished applet.
<P>
These objects can be grouped into object categories, such as functions
and user interfaces. The user interface enables users to manipulate
the primary frame of the applet. For applets, the primary frame
and the user interface are usually created in the <TT><FONT FACE="Courier">init()</FONT></TT>
method or by methods that the <TT><FONT FACE="Courier">init()</FONT></TT>
method calls. Both the primary frame and the user interface should
have attributes that make them easy to use, read, and understand.
<P>
As you design the primary frame and user interface in detail,
keep the following attributes in mind:
<UL>
<LI>Initial frame size
<LI>Color of the frame and borders
<LI>Color, size, and font of text on the frame
<LI>Location of the user interface
<LI>Location of the menu bar
<LI>Style of the title bar
<LI>Size of the display area
</UL>
<P>
Also keep in mind the main objects used on frame, which were identified
in the specification phase. For the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet, key objects on the primary frame include a title bar,
an input area, and a display area. Following the top-down methodology
of object-oriented design, you should now create a high-level
design for each of these objects.
<P>
The <TT><FONT FACE="Courier">SpreadSheet</FONT></TT> applet's
title bar object is quite simple. It accepts an input parameter
for the font type used to display the title text and displays
the title centered on the frame.
<P>
The input area enables the user to enter new data for the current
cell, which implies that you need a method to determine the current
cell. Although the method used to display the input area is not
complex, everything that happens after the user enters data into
the input area is. At this stage, you should determine the data
types the input area accepts and how the applet will determine
the data type.
<P>
Generally, spreadsheets accept three types of data: labels, values,
and formulas. Because the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet is made for viewing on the Web, it accepts a fourth data
type as well: URLs. The <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet determines the data type by a single character that proceeds
the input value: Values are identified with the letter v, formulas
with the letter f, labels with the letter l, and URLs with the
letter u.
<P>
You will need objects to process the input. The main object should
parse the input values and perform specific actions related to
the data type. At this point, you do not have to determine these
actions; however, you should note that you will need at least
one object to handle each data type.
<P>
The most complex objects for data types are those that process
formulas. To get a better understanding of how the applet will
work, you might want to break down the formula object or at least
determine the types of formulas the object will process. The <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet accepts formulas that use addition, subtraction, multiplication,
and division. When the applet has finished processing the formula,
you will need a method to recalculate values for cells that use
formulas.
<P>
The next object you should examine is the display area. It contains
the rows and columns of the spreadsheet, which are made up of
individual cells. You will need a method to create the cells.
To determine how many cells to create and ultimately how many
rows and columns the spreadsheet should have, either initialize
the spreadsheet to a default size or let the spreadsheet size
be updated as needed.
<P>
One way to allow the spreadsheet to be updated is to accept parameter
values. The <TT><FONT FACE="Courier">SpreadSheet</FONT></TT> applet
accepts parameters for font size, base font type, number of columns,
number of rows, and initial values for cells. Because the user
can update data on the spreadsheet, you also need a method to
update the cells. Each of these parameter values will need an
associated container that holds its values in the applet.
<P>
Now that you have identified the major objects used in the applet,
you can create a list of these objects. As you implement each
object in the next phase, you can check the object off the list
to be sure that you account for all the major functions of the
applet. Here's the list:
<UL>
<LI><TT><FONT FACE="Courier">init()</FONT></TT> method
<LI><TT><FONT FACE="Courier">paint()</FONT></TT> method
<LI><TT><FONT FACE="Courier">start()</FONT></TT> method
<LI><TT><FONT FACE="Courier">run()</FONT></TT> method
<LI><TT><FONT FACE="Courier">stop()</FONT></TT> method
<LI><TT><FONT FACE="Courier">destroy()</FONT></TT> method
<LI>Title bar
<LI>Input area
<LI>Display area
<LI>Rows and columns
<LI>Cells
<LI>Method to determine the current cell
<LI>Method to process data types
<LI>Method to process formulas
<LI>Method to recalculate values for cells
<LI>Method to create and display the cells
<LI>Method to update the cells
</UL>
<P>
After determining most of the objects for the applet, you can
go on to more detailed design. Here you should work out the interaction
between objects and determine the arguments that objects will
accept and pass. When you are comfortable with the design of the
applet and can visualize the flow of data from object to object,
you can begin the implementation phase. The next section provides
a detailed look at how the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet is transformed from a concept to a completed applet.
<H2><A NAME="TheImplementationPhase"><B><FONT SIZE=5 COLOR=#Ff0000>The
Implementation Phase</FONT></B></A></H2>
<P>
The implementation phase is when you actually create the project
you have developed. This phase is often the longest and usually
involves teams of programmers who implement and integrate the
source code. Usually, each programming team is responsible for
creating a specific set of objects with related functionality,
such as the user interface or file I/O. After these object sets
are created, they are integrated into the applet.
<P>
In implementing the applet, start with the top-level objects,
which usually relate to the user interface and the display, and
work toward the lowest-level objects, which usually perform the
key functions that the applet requires. The sections that follow
demonstrate how to build the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet.
<H3><A NAME="ContainersfortheObjectsUsedintheS"><B>Containers
for the Objects Used in the </B><TT><B><FONT SIZE=4 FACE="Courier">SpreadSheet</FONT></B></TT><B><FONT SIZE=4>
Applet</FONT></B></A></H3>
<P>
Containers create instances of the objects identified in the design
phase so the objects can be used throughout the applet. The containers
used in most applets include the low-level objects used as placeholders
for parameter values. To create a container, you use instance
variables. Most instance variable declarations follow the main
class declaration.
<P>
The containers used in the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet are shown in Listing 20.1. As you can see, there is a container
for each of the parameter values identified in the design phase.
Other containers hold values for key objects in the spreadsheet.
Some of these objects define spreadsheet attributes with initial
values.
<HR>
<BLOCKQUOTE>
<B>Listing 20.1. Initial containers for the </B><TT><B><FONT FACE="Courier">SpreadSheet</FONT></B></TT><B>
applet.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class SpreadSheet extends Applet
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container to hold the parameter value
for title text<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container to hold the parameter value
for base font<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bfont;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container to hold the parameter value
for title font<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tfont;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the inputfont object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Font&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputFont;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the title font object
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Font&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;titleFont;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the cell color object
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cellColor;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the input area's color
object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputColor;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the parameter value for
font size<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fontSize;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the cell width object
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cellWidth;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the cell height object
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cellHeight;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the title height object
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;titleHeight;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the row label width object
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rowLabelWidth;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the status object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isStopped
= false;&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the update object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fullUpdate
= true;&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the rows object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rows;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the columns object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;columns;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the current key object
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentKey
= -1;&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the selected row object
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectedRow
= -1;&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the selected column object
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectedColumn
= -1;&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the input area<BR>
&nbsp;&nbsp;&nbsp;&nbsp;SpreadSheetInput&nbsp;&nbsp;&nbsp;&nbsp;inputArea;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the individual cells<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Cell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cells[][];&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the current cell<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Cell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current
= null; </FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="InitializingthePrimaryFrame"><B>Initializing the
Primary Frame</B></A></H3>
<P>
Before you implement the primary frame of an applet, you should
carefully consider the type and style of the document with which
the applet will be used. If you do not already have an HTML document
in which you want to display the applet, you should design one.
Depending on the type and style of the HTML document, you might
want to make some changes to the design of your applet's interface.
You also might want to place additional restrictions on the size
of the applet.
<P>
For example, if your applet will be used on the corporate home
page, you might want to mesh the style of the applet with the
existing style of the home page or modify the style of both the
applet and the home page so they work well together. Most conflicts
between the home page style and the applet style relate to
<UL>
<LI>The colors used in the applet
<LI>The display size of the applet in pixels
<LI>The file size of the applet in kilobytes
<LI>The appropriateness of the applet for the page
</UL>
<P>
As you add features to the applet's frame window, keep these concepts
in mind. Key features for the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet's primary frame, identified in the design phase, are a
title bar, an input area, and a display area. Earlier, you should
have also identified key attributes for the primary frame, such
as the initial frame size, the color of the frame and borders,
and the style of the title bar.
<P>
Figure 20.2 shows how the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet looks when completed and displayed in an HTML document.
By the end of this chapter, you will be able to create this document.
<P>
<A HREF="f20-2.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f20-2.gif" ><B>Figure 20.2 : </B><I>The main screen of the SpreadSheet applet.</I></A>
<P>
The <TT><FONT FACE="Courier">SpreadSheet</FONT></TT> applet's
primary frame is initialized in the <TT><FONT FACE="Courier">init()</FONT></TT>
method. Because the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet's <TT><FONT FACE="Courier">init()</FONT></TT> method is
fairly complex, it is broken down here into a series of steps.
<H4><B>Step 1: Initializing Values</B></H4>
<P>
The first step is to initialize containers for the necessary objects.
As shown in Listing 20.2, two local containers are used for the
method. The first container, <TT><FONT FACE="Courier">rs</FONT></TT>,
is a multipurpose read string holding parameter values. The second,
<TT><FONT FACE="Courier">fs</FONT></TT>, is a string used to hold
the value for the font size parameter. The <TT><FONT FACE="Courier">init()</FONT></TT>
method is synchronized to prevent more than one thread from executing
the method at the same time. In this way, the entire method is
locked when it is being used by a thread.
<P>
After initializing the containers, initialize the color of active
cells to white and set the color of the input area to blue. You
can change this color value to anything you like. For example,
to change the color value to yellow, use the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">cellColor = Color.yellow;<BR>
</FONT></TT>
</BLOCKQUOTE>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Tip</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
Although you could use a parameter value to set the color for the active cell and the input area, keep in mind that <TT><FONT FACE="Courier">Color</FONT></TT> is an object. You would have to convert the string you obtain using the <TT><FONT 
FACE="Courier">getParameter()</FONT></TT> method to an instance of the <TT><FONT FACE="Courier">Color</FONT></TT> object.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 20.2. The first section of the </B><TT><B><FONT FACE="Courier">init()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized void init() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String rs;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String fs;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;cellColor = Color.white;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;inputColor = new Color(100, 100, 225);</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>Step 2: Using Parameter Values</B></H4>
<P>
The <TT><FONT FACE="Courier">getParameter()</FONT></TT> method
is used to read values for key attributes of the spreadsheet set
in the <TT><FONT FACE="Courier">&lt;PARAM&gt;</FONT></TT> tag
of the applet's HTML document. If no parameter value is set by
the publisher, a default value is used. Similarly, your applets
should set default values for all input parameters.
<P>
As shown in Listing 20.3, the first parameter the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet checks for is the font size. If no font size is set in
the <TT><FONT FACE="Courier">&lt;PARAM&gt;</FONT></TT> tag, it
is set to 10. If the <TT><FONT FACE="Courier">&lt;PARAM&gt;</FONT></TT>
tag contains a setting for the font size, the string read with
the <TT><FONT FACE="Courier">getParameter()</FONT></TT> method
is converted to an integer using the <TT><FONT FACE="Courier">Integer.parseInt()</FONT></TT>
method, which you will use to convert all parameter values that
you plan to manipulate as numbers.
<P>
The <TT><FONT FACE="Courier">fontSize</FONT></TT> parameter value
is used to set key spreadsheet attributes proportional to the
font size. Keeping the size of objects used in the spreadsheet
proportional to the current font size is essential to the readability
and usability of the applet. The current font size affects every
major display aspect of the spreadsheet, including the height
and width of cells in the spreadsheet, the width of row labels,
the height of the area used for titles, the font size used for
titles, the position of the title, the position of row and column
headers, the size of the input area, and the position of text
in the input area.
<P>
For this reason, throughout the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet, you will see the size of objects set proportional to the
<TT><FONT FACE="Courier">fontSize</FONT></TT> object. You can
use this technique in your applets to keep the display consistent
with the current font size.
<P>
The next parameter values the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet checks for are the base font type and the title font type.
Using these values, initialize the <TT><FONT FACE="Courier">inputFont</FONT></TT>
and <TT><FONT FACE="Courier">titleFont</FONT></TT> objects. The
default value for both font types, Courier, is used when no parameter
value is set in the <TT><FONT FACE="Courier">&lt;PARAM&gt;</FONT></TT>
tag. When selecting a default font type, you should use one that
is widely available on most systems, such as Courier, Helvetica,
Times Roman, or System.
<P>
The applet also checks for a title for the spreadsheet. If no
parameter value is set, the title is set to <TT><FONT FACE="Courier">Spreadsheet</FONT></TT>.
<P>
The final parameter values the applet checks for are the number
of rows and columns to be used in the spreadsheet. These must
be integer values, so the string read using the <TT><FONT FACE="Courier">getParameter()</FONT></TT>
method is converted to an integer using the <TT><FONT FACE="Courier">parseInt()</FONT></TT>
method.
<HR>
<BLOCKQUOTE>
<B>Listing 20.3. Getting and using parameter values.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;fs = getParameter(&quot;fontsize&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (fs == null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fontSize = 10;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fontSize = Integer.parseInt(fs);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
cellWidth = fontSize * 10;<BR>
cellHeight = fontSize * 2;<BR>
titleHeight = fontSize * 2;<BR>
rowLabelWidth = fontSize * 3;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;bfont = getParameter(&quot;basefont&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (bfont == null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bfont = &quot;Courier&quot;;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;inputFont = new Font(bfont, Font.PLAIN,
fontSize);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;tfont = getParameter(&quot;titlefont&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (tfont == null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tfont = &quot;Courier&quot;;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;titleFont = new Font(tfont, Font.BOLD,
(fontSize + 2));<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;title = getParameter(&quot;title&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (title == null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title = &quot;Spreadsheet&quot;;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;rs = getParameter(&quot;rows&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (rs == null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rows = 9;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rows = Integer.parseInt(rs);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;rs = getParameter(&quot;columns&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (rs == null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;columns = 5;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;columns = Integer.parseInt(rs);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>Step 3: Initializing the Spreadsheet</B></H4>
<P>
Initializing an object as complex as a spreadsheet requires careful
forethought, especially when its size can be dynamically updated
using parameter values. To reduce the difficulty of this task,
you could set the spreadsheet to a predetermined size, such as
nine rows and five columns. Then, after you understand the way
the spreadsheet is built, you could modify the code to allow the
size of the spreadsheet to be updated as needed.
<P>
To create the spreadsheet, determine the number of cells needed.
Then initialize the cells to default values and attributes. One
way to handle this is to build an array of an array. The first
array holds the row index. The second array holds the column index.
Together, these indexes point to a particular cell in the spreadsheet.
<P>
To make it easier to set initial values for each cell using parameter
values, the spreadsheet applet assumes each column is ordered
alphabetically and each row is ordered numerically. Thus, the
index value <TT><FONT FACE="Courier">a1</FONT></TT> points to
the cell in column 1, row 1, and the value <TT><FONT FACE="Courier">b4</FONT></TT>
points to the cell in column 2, row 4. Because Java integers begin
with 0, you might be wondering what happened to values for column
0. All cells in column 0 are used to hold values for row headers.
Similarly, all cells in row 0 are used to hold values for column
headers. This way, when you create a spreadsheet with the parameter
value for rows set to 3 and columns set to 4, you get a spreadsheet
with 3 rows and 4 columns.
<P>
As shown in Listing 20.4, reading the parameter values for cells
from the HTML document is accomplished with two conditional loops.
The first loop continues until the row count is reached, and the
second continues until the column count is reached. Within the
second loop, the index values for the row and column are used
to build an array of arrays.
<P>
Each new cell is created as an instance of the <TT><FONT FACE="Courier">Cell</FONT></TT>
object. Included in each new cell are parameters for the background
color of the cell; the color of text in the cell; the width and
height of the cell; an array containing the cell's index, such
as <TT><FONT FACE="Courier">a1</FONT></TT> or <TT><FONT FACE="Courier">b4</FONT></TT>;
and a value associated with the cell as read by the <TT><FONT FACE="Courier">getParameter()</FONT></TT>
method. Following the logic of the cell-building loops, the following
parameter values could be used:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;PARAM NAME=a1 value=&quot;lWholesale&quot;&gt;
<BR>
&lt;PARAM NAME=a2 value=&quot;v20195&quot;&gt;<BR>
&lt;PARAM NAME=a3 value=&quot;v7280&quot;&gt;<BR>
&lt;PARAM NAME=a4 value=&quot;v6127&quot;&gt;<BR>
&lt;PARAM NAME=a5 value=&quot;v9803&quot;&gt;<BR>
&lt;PARAM NAME=a6 value=&quot;v4150&quot;&gt;<BR>
&lt;PARAM NAME=a7 value=&quot;fA2+(A3/A4)&quot;&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
If you do not set a value for a particular cell in the spreadsheet,
the <TT><FONT FACE="Courier">setUnparsedValue()</FONT></TT> method
is called to build a value for the <TT><FONT FACE="Courier">Cell</FONT></TT>
object. Just as the <TT><FONT FACE="Courier">setUnparsedValue()</FONT></TT>
method is called to add default values for undefined cells, the
cell values provided to the <TT><FONT FACE="Courier">Cell</FONT></TT>
object are parsed as well. This parsing takes place in the <TT><FONT FACE="Courier">Cell</FONT></TT>
class.
<HR>
<BLOCKQUOTE>
<B>Listing 20.4. Initializing the spreadsheet.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">cells = new Cell[rows][columns];<BR>
char l[] = new char[1];<BR>
for (int i=0; i &lt; rows; i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;for (int j=0; j &lt; columns; j++) {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cells[i][j] =
new Cell(this,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color.lightGray,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color.black,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cellColor,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cellWidth
- (fontSize/4),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cellHeight
- (fontSize/4));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l[0] = (char)((int)'a'
+ j);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rs = getParameter(&quot;&quot;
+ new String(l) + (i+1));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rs != null)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cells[i][j].setUnparsedValue(rs);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>Step 4: Sizing the Spreadsheet</B></H4>
<P>
Sizing a complex structure on the applet frame is a difficult
task. You do not want your key objects to be larger than the frame
or placed off the frame and thus off the screen. However, you
do want the objects to fill the frame if possible. The best way
to build the structure within your frame is to base it on the
actual dimensions of the frame by creating a dimension object
with the current size values and then allocating this area proportionally
to each object as necessary.
<P>
Although this is the best way to size the objects, you do not
always have this luxury and may have to size objects on the basis
of some other constraint. The font size is a constraint in the
<TT><FONT FACE="Courier">SpreadSheet</FONT></TT> applet simply
because you must be able to view the data in the cells no matter
the font size.
<P>
The <TT><FONT FACE="Courier">inputArea</FONT></TT> for the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet is created as a new instance of the <TT><FONT FACE="Courier">SpreadSheetInput</FONT></TT>
object. The size of the <TT><FONT FACE="Courier">inputArea</FONT></TT>
is based on the current width minus two pixels, and its height
is based on the current height minus two pixels.
<P>
The spreadsheet is then resized on the basis of the width and
height of all component objects of the spreadsheet. As noted earlier,
these objects are sized proportional to the <TT><FONT FACE="Courier">fontSize</FONT></TT>
object. The code used to initialize the input area and size the
spreadsheet is shown in Listing 20.5.
<HR>
<BLOCKQUOTE>
<B>Listing 20.5. Sizing the spreadsheet.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;Dimension d =
size();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;inputArea = new SpreadSheetInput(null,
this, d.width - 2, cellHeight - 2,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputColor,
Color.white);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;resize(columns * cellWidth + rowLabelWidth,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((rows
+ 1) * cellHeight) + cellHeight + titleHeight);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="DeterminingtheStateoftheApplet"><B>Determining the
State of the Applet</B></A></H3>
<P>
After initializing the applet, implement the other common applet
methods if necessary. Usually, your applet does not have to explicitly
call the <TT><FONT FACE="Courier">start()</FONT></TT>, <TT><FONT FACE="Courier">stop()</FONT></TT>,
and <TT><FONT FACE="Courier">destroy()</FONT></TT> methods. You
can better determine the behavior of your applet if you define
these methods.
<P>
The <TT><FONT FACE="Courier">SpreadSheet</FONT></TT> applet uses
the <TT><FONT FACE="Courier">start()</FONT></TT> and <TT><FONT FACE="Courier">stop()</FONT></TT>
methods to determine the state of the applet. When the applet
is active, the boolean value <TT><FONT FACE="Courier">isStopped</FONT></TT>
is set to <TT><FONT FACE="Courier">false;</FONT></TT> when inactive,
the boolean value <TT><FONT FACE="Courier">isStopped</FONT></TT>
is set to <TT><FONT FACE="Courier">true</FONT></TT>. The value
<TT><FONT FACE="Courier">isStopped</FONT></TT> is used later in
the applet to stop it from repainting itself before exiting.
<P>
The <TT><FONT FACE="Courier">destroy</FONT></TT> method is used
to clean up after you halt the applet. If you have processes that
could be active even after the applet exits, terminate them in
your applet's <TT><FONT FACE="Courier">destroy()</FONT></TT> method.
Examples include any connections you made to remote hosts or documents
you were accessing.
<P>
The <TT><FONT FACE="Courier">start()</FONT></TT>, <TT><FONT FACE="Courier">stop()</FONT></TT>,
and <TT><FONT FACE="Courier">destroy()</FONT></TT> methods for
the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT> applet are
shown in Listing 20.6.
<HR>
<BLOCKQUOTE>
<B>Listing 20.6. The state of the applet.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void start() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;isStopped = false;<BR>
}<BR>
public void stop() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;isStopped = true;<BR>
}<BR>
public void destroy() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i &lt; rows; i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int j=0;
j &lt; columns; j++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(cells[i][j].type == Cell.URL) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cells[i][j].updaterThread.stop();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="RunningAppletThreads"><B>Running Applet Threads</B></A>
</H3>
<P>
The task of running applet threads is handled by the <TT><FONT FACE="Courier">run()</FONT></TT>
method. As shown in Listing 20.7, the <TT><FONT FACE="Courier">run()</FONT></TT>
method for the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet is fairly lengthy and is handled in a separate class called
<TT><FONT FACE="Courier">CellUpdater</FONT></TT> that extends
the <TT><FONT FACE="Courier">Thread</FONT></TT> class. By extending
the <TT><FONT FACE="Courier">Thread</FONT></TT> class, the applet
can use Java's multithreading capabilities to accept input from
the token stream and display the data in the spreadsheet. This
allows cells of the spreadsheet to be dynamically updated based
on data coming from an input stream. 
<P>
The function of the <TT><FONT FACE="Courier">while</FONT></TT>
loop in the <TT><FONT FACE="Courier">CellUpdater</FONT></TT> class
is to read string tokens passed from the input stream. As long
as there are tokens to read, the <TT><FONT FACE="Courier">run()</FONT></TT>
method continues through the <TT><FONT FACE="Courier">while</FONT></TT>
loop. This causes the applet to call the <TT><FONT FACE="Courier">setTransientValue</FONT></TT>
method, which in turn sets a transient value flag. Before continuing
the loop, the <TT><FONT FACE="Courier">repaint()</FONT></TT> method
is called to update the frame. When there are no more tokens to
read, the <TT><FONT FACE="Courier">dataStream</FONT></TT> object
is closed and the <TT><FONT FACE="Courier">run()</FONT></TT> method
waits for the next token to be passed.
<P>
To use this threading feature of the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet, define a cell as a URL type and specify the URL path to
the document you want to read on the input stream.
<HR>
<BLOCKQUOTE>
<B>Listing 20.7. Running and updating the applet.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">class CellUpdater extends Thread {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Cell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;InputStream dataStream = null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;StreamTokenizer tokenStream;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public CellUpdater(Cell c) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(&quot;cell
updater&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target = c;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void run() {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataStream
= new URL(target.app.getDocumentBase(),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target.getValueString()).openStream();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenStream
= new StreamTokenizer(dataStream);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenStream.eolIsSignificant(false);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while
(true) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch
(tokenStream.nextToken()) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
tokenStream.TT_EOF:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataStream.close();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
tokenStream.TT_NUMBER:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target.setTransientValue((float)tokenStream.nval);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(! target.app.isStopped &amp;&amp; ! target.paused) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target.app.repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.sleep(2000);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
catch (InterruptedException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (IOException
e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="PaintingtheFrame"><B>Painting the Frame</B></A></H3>
<P>
After you have initialized the spreadsheet, you must display it.
This is usually done by means of the <TT><FONT FACE="Courier">paint()</FONT></TT>
method, which draws all the objects added during the initialization
phase. As discussed in &quot;Step 4: Sizing the Spreadsheet,&quot;
the objects should be sized according to the dimensions of the
frame or a key constraint such as the font size. You should also
paint the objects in the order they are to be added to the frame.
<P>
The <TT><FONT FACE="Courier">SpreadSheet</FONT></TT> applet uses
many interesting techniques to place objects precisely on the
frame. As shown in Listing 20.8, centering the title horizontally
in the title area involves five steps:
<OL>
<LI>Obtaining the dimension of the frame
<LI>Determining the pixel length of the title on the basis of
the current font
<LI>Subtracting the length of the title from the width of the
frame
<LI>Adding in a factor that accounts for differences in font size
<LI>Dividing the result by 2
</OL>
<P>
The value you obtain by doing this is the x coordinate for the
beginning of the title. You also need a y coordinate for the title.
Because the height of the title area is relative to the font size
used, the font size is used to help determine this coordinate.
<P>
Next, the <TT><FONT FACE="Courier">paint()</FONT></TT> method
draws the input area by simply filling a rectangle with a color
based on the value of the <TT><FONT FACE="Courier">inputColor</FONT></TT>
object. The starting location for the upper-left corner of the
input area is determined by moving vertically down the height
of one cell. The width of the input area is set to the width of
the frame, and the height is set to the height of one cell.
<P>
Finally, the <TT><FONT FACE="Courier">paint()</FONT></TT> method
draws the individual cells. To create them, use a series of draws.
The first adds the horizontal lines for rows using the <TT><FONT FACE="Courier">draw3DRect</FONT></TT>
method of the <TT><FONT FACE="Courier">Graphics</FONT></TT> class.
As the 3D lines are drawn to the frame, blue numerals representing
the row numbers are added as appropriate. The second draw adds
the vertical lines for columns, again using the <TT><FONT FACE="Courier">draw3DRect</FONT></TT>
method. As the 3D lines are drawn to the frame, red letters representing
the column letters are added as appropriate. Finally, data is
added to the cells by painting the values associated with a cell
precisely within the rectangles created by the previous draws.
<P>
The last section of code in the <TT><FONT FACE="Courier">paint()</FONT></TT>
method, although only a few lines, is important to the spreadsheet.
The line of code using the <TT><FONT FACE="Courier">draw3DRect()</FONT></TT>
method draws a 3D line above the input area and on the left side
of the frame. The next-to-last line calls the <TT><FONT FACE="Courier">paint()</FONT></TT>
method of the <TT><FONT FACE="Courier">inputArea</FONT></TT> class,
which ensures that the data associated with the currently selected
cell is painted to the input area.
<HR>
<BLOCKQUOTE>
<B>Listing 20.8. Painting the frame.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized void paint(Graphics
g) {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int i, j;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int cx, cy;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;char l[] = new char[1];<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Dimension d = size();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//draws the title on the frame<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.setFont(titleFont);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;i = g.getFontMetrics().stringWidth(title);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString((title == null) ? &quot;Spreadsheet&quot;
: title,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(d.width
- i + (fontSize*3/2)) / 2, (fontSize*3/2));<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//draws the input area on the frame<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(inputColor);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.fillRect(0, cellHeight, d.width, cellHeight);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//draws the lines for rows using 3d effect
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//adds row numbering in blue<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.setFont(titleFont);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;for (i=0; i &lt; rows+1; i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cy = (i+2) * cellHeight;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(getBackground());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.draw3DRect(0,
cy, d.width, 2, true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i &lt; rows)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(Color.blue);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;&quot;
+ (i+1), fontSize, cy + (fontSize *3/2));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//draws the lines for columns using 3d
effect<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//adds column alphas in red<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(Color.red);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;for (i=0; i &lt; columns; i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cx = i * cellWidth;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(getBackground());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.draw3DRect(cx
+ rowLabelWidth,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2
* cellHeight, 1, d.height, true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i &lt; columns)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(Color.red);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l[0]
= (char)((int)'A' + i);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(new
String(l),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cx
+ rowLabelWidth + (cellWidth / 2),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.height
- 3);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//paints the cell data<BR>
&nbsp;&nbsp;&nbsp;&nbsp;for (i=0; i &lt; rows; i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j=0; j &lt;
columns; j++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cx
= (j * cellWidth) + 2 + rowLabelWidth;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cy
= ((i+1) * cellHeight) + 2 + titleHeight;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(cells[i][j] != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cells[i][j].paint(g,
cx, cy);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(getBackground());<BR>
&nbsp;&nbsp;&nbsp;//draws a 3d line for the input area and to
the left side of the frame<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.draw3DRect(0, titleHeight, d.width,
d.height - titleHeight, false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//paints the data of the current cell
to the input area<BR>
&nbsp;&nbsp;&nbsp;&nbsp;inputArea.paint(g, 1, titleHeight + 1);
<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="UpdatingtheAppletsFrame"><B>Updating the Applet's
Frame</B></A></H3>
<P>
When changes occur in the applet, you must repaint the applet's
frame using the <TT><FONT FACE="Courier">repaint()</FONT></TT>
method of the <TT><FONT FACE="Courier">Applet</FONT></TT> class.
If you recall earlier discussions on repainting the applet's frame,
you probably know that the <TT><FONT FACE="Courier">repaint()</FONT></TT>
method calls the <TT><FONT FACE="Courier">update()</FONT></TT>
method of the <TT><FONT FACE="Courier">Applet</FONT></TT> class,
which in turn clears the screen and calls the <TT><FONT FACE="Courier">paint()</FONT></TT>
method. The <TT><FONT FACE="Courier">paint</FONT></TT> method
then draws in the applet's frame.
<P>
Clearing and then drawing the frame produces a noticeable flicker.
To reduce it, usually it's best to override the <TT><FONT FACE="Courier">update()</FONT></TT>
method of the <TT><FONT FACE="Courier">Applet</FONT></TT> class.
You do this by defining an <TT><FONT FACE="Courier">update()</FONT></TT>
method in your applet that does not clear the frame at all before
painting it and, if possible, clears only the parts of the screen
that have changed.
<P>
Listing 20.9 shows the <TT><FONT FACE="Courier">update()</FONT></TT>
method for the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet. This method uses a boolean value called <TT><FONT FACE="Courier">full
update</FONT></TT> to determine whether to repaint the whole frame
or just a portion of it. When only a portion must be repainted,
the appropriate section is redrawn. The partial update occurs
when the user selects a cell and the applet places the data associated
with the cell in the input area and redraws the cell with a white
background. When the entire applet frame needs to be updated,
the <TT><FONT FACE="Courier">update()</FONT></TT> method calls
the <TT><FONT FACE="Courier">paint()</FONT></TT> method directly
without clearing the frame first.
<HR>
<BLOCKQUOTE>
<B>Listing 20.9. Updating the frame.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void update(Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (! fullUpdate) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int cx, cy;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setFont(titleFont);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0;
i &lt; rows; i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(int j=0; j &lt; columns; j++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(cells[i][j].needRedisplay) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cx
= (j * cellWidth) + (fontSize*2) + rowLabelWidth;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cy
= ((i+1) * cellHeight) + (fontSize*2) + titleHeight;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cells[i][j].paint(g,
cx, cy);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;paint(g);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fullUpdate = false;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="HandlingEventsintheApplet"><B>Handling Events in
the Applet</B></A></H3>
<P>
Updates to the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet are driven by the occurrence of user events, such as keypresses
and mouse button clicks. As discussed in previous chapters, events
are usually handled with either the <TT><FONT FACE="Courier">action()</FONT></TT>
method or the <TT><FONT FACE="Courier">handleEvent()</FONT></TT>
method. The <TT><FONT FACE="Courier">action()</FONT></TT> method
of the <TT><FONT FACE="Courier">Components</FONT></TT> class is
the preferred way to handle a limited number of events. The <TT><FONT FACE="Courier">handleEvent</FONT></TT>
method of the <TT><FONT FACE="Courier">Event</FONT></TT> class
is the preferred way to handle multiple or complex series of events.
<P>
When an applet has only a few possible events that deal with the
mouse or keypresses, you can call more direct methods that eliminate
the necessity of nested <TT><FONT FACE="Courier">if</FONT></TT>
or <TT><FONT FACE="Courier">case</FONT></TT> statements to check
event type. These methods, like the <TT><FONT FACE="Courier">action()</FONT></TT>
method, are members of the <TT><FONT FACE="Courier">Component</FONT></TT>
class. Table 20.1 lists these events.<BR>
<P>
<CENTER><B>Table 20.1. Direct event handling with </B><TT><B><FONT FACE="Courier">Component</FONT></B></TT><B>
class methods.</B></CENTER>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%> 
<TR><TD><I>Method</I></TD><TD WIDTH=226><I>Description</I>
</TD><TD WIDTH=226><I>Called with Values</I></TD></TR>
<TR><TD WIDTH=138><TT><FONT FACE="Courier">keyDown()</FONT></TT>
</TD><TD WIDTH=226>Called if a key is pressed</TD><TD WIDTH=226><TT><FONT FACE="Courier">keyDown(Event evt, int x)</FONT></TT>
</TD></TR>
<TR><TD WIDTH=138><TT><FONT FACE="Courier">keyUp()</FONT></TT>
</TD><TD WIDTH=226>Called if a key is released</TD><TD WIDTH=226><TT><FONT FACE="Courier">keyUp(Event evt, int x)</FONT></TT>
</TD></TR>
<TR><TD WIDTH=138><TT><FONT FACE="Courier">mouseDown()</FONT></TT>
</TD><TD WIDTH=226>Called if the mouse button is down</TD><TD WIDTH=226><TT><FONT FACE="Courier">mouseDown(Event evt, int x, int y)</FONT></TT>
</TD></TR>
<TR><TD WIDTH=138><TT><FONT FACE="Courier">mouseDrag()</FONT></TT>
</TD><TD WIDTH=226>Called if the mouse moves while a button is pressed
</TD><TD WIDTH=226><TT><FONT FACE="Courier">mouseDrag(Event evt,</FONT></TT> <TT><FONT FACE="Courier">int x, int y)</FONT></TT>
</TD></TR>
<TR><TD WIDTH=138><TT><FONT FACE="Courier">mouseEnter()</FONT></TT>
</TD><TD WIDTH=226>Called when the mouse enters the component
</TD><TD WIDTH=226><TT><FONT FACE="Courier">mouseEnter(Event evt,</FONT></TT> <TT><FONT FACE="Courier">int x, int y)</FONT></TT>
</TD></TR>
<TR><TD WIDTH=138><TT><FONT FACE="Courier">mouseExit()</FONT></TT>
</TD><TD WIDTH=226>Called when the mouse exits the component</TD>
<TD WIDTH=226><TT><FONT FACE="Courier">mouseExit(Event evt,</FONT></TT> <TT><FONT FACE="Courier">int x, int y)</FONT></TT>
</TD></TR>
<TR><TD WIDTH=138><TT><FONT FACE="Courier">mouseMove()</FONT></TT>
</TD><TD WIDTH=226>Called if the mouse moves while no buttons are pressed
</TD><TD WIDTH=226><TT><FONT FACE="Courier">mouseMove(Event evt, int x, int y)</FONT></TT>
</TD></TR>
<TR><TD WIDTH=138><TT><FONT FACE="Courier">mouseUp()</FONT></TT>
</TD><TD WIDTH=226>Called if the mouse button is up</TD><TD WIDTH=226><TT><FONT FACE="Courier">mouseUp(Event evt, int x, int y)</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
The <TT><FONT FACE="Courier">SpreadSheet</FONT></TT> applet uses
two of these direct methods to check for events: <TT><FONT FACE="Courier">mouseDown</FONT></TT>
and <TT><FONT FACE="Courier">keyDown</FONT></TT>. The handling
of these events is shown in Listing 20.10.
<P>
When a user moves the mouse pointer over a cell and selects it
by clicking the mouse button, the applet determines the exact
cell the user selected based on the position of the mouse in the
spreadsheet. As you can see from Listing 20.10, finding the selected
cell is a lot of work.
<P>
The first conditional loop ensures that the y coordinate of the
mouse pointer is in a valid section of the spreadsheet. If the
y coordinate is less than the combined height of the title and
input area, the selected row is set to <TT><FONT FACE="Courier">-1</FONT></TT>.
The nested <TT><FONT FACE="Courier">if</FONT></TT> loop sets the
value for the current cell to <TT><FONT FACE="Courier">null</FONT></TT>
when the user clicks the mouse button when the pointer is in the
title area and the <TT><FONT FACE="Courier">deselect</FONT></TT>
method is called.
<P>
The second conditional loop ensures that the x coordinate of the
mouse pointer is in a valid section of the spreadsheet. If the
x coordinate is less than the width of the row label, the selected
row is set to <TT><FONT FACE="Courier">-1</FONT></TT>. The nested
<TT><FONT FACE="Courier">if</FONT></TT> loop sets the value for
the current cell to <TT><FONT FACE="Courier">null</FONT></TT>
when the user clicks the mouse button when the pointer is in the
row label area and the <TT><FONT FACE="Courier">deselect</FONT></TT>
method is called.
<P>
Next, the method determines the column/row coordinate for the
selected cell. If the selected cell is greater than the number
of rows or columns in the spreadsheet, the value for the current
cell is set to <TT><FONT FACE="Courier">null</FONT></TT> and the
<TT><FONT FACE="Courier">deselect</FONT></TT> method is called.
If the column/row coordinate for the selected cell is valid, the
value of the selected cell is displayed in the input area and
the <TT><FONT FACE="Courier">select()</FONT></TT> method is called
to paint the current cell with a white background.
<P>
The final event checked for is a keypress. As long as a valid
cell is selected, any character key you press on the keyboard
is displayed in the input area. When you press Enter and a valid
cell is selected, the value from the input area replaces the value
of the current cell and the entire spreadsheet is updated. This
is all handled by setting <TT><FONT FACE="Courier">fullUpdate</FONT></TT>
to <TT><FONT FACE="Courier">true</FONT></TT> and calling the <TT><FONT FACE="Courier">keyDown()</FONT></TT>
method, which actually does the work of updating the spreadsheet
as necessary.
<P>
You can use similar techniques to determine the selected object
in your applets as well. The key is to narrow the valid range
by eliminating areas of the frame that cannot be selected, such
as the title bar, rows with header labels, and columns with header
labels. When you narrow the selection area, you can determine
the specific object the user selected.
<HR>
<BLOCKQUOTE>
<B>Listing 20.10. Handling applet events.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean mouseDown(Event evt, int
x, int y) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cell cell;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//ensures the
y coordinate of the mouse pointer<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//is not in the
title/input area<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (y &lt; (titleHeight
+ cellHeight)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectedRow
= -1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(y &lt;= titleHeight &amp;&amp; current != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current.deselect();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current
= null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//ensures the
x coordinate of the mouse pointer<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//is not in the
row label area<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (x &lt; rowLabelWidth)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectedRow
= -1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(current != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current.deselect();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current
= null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//determines the
row of the selected cell<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectedRow =
((y - cellHeight - titleHeight) / cellHeight);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//determines the
column of the selected cell<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectedColumn
= (x - rowLabelWidth) / cellWidth;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//ensures the
row and column coordinate is valid<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (selectedRow
&gt;= rows ||<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectedColumn
&gt;= columns) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectedRow
= -1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(current != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current.deselect();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current
= null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//if the row-column
coordinate is valid place the selected cell's value<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//in the input
area<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cell
= cells[selectedRow][selectedColumn];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputArea.setText(new
String(cell.getPrintString()));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(current != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current.deselect();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current
= cell;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current.select();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fullUpdate
= true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//determine if a key is pressed<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean keyDown(Event evt, int
key) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fullUpdate=true;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputArea.keyDown(key);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="UpdatingtheCurrentCellsValue"><B>Updating the Current
Cell's Value</B></A></H3>
<P>
User events drive changes in the spreadsheet. When a cell's value
is changed, the spreadsheet must be updated to reflect this. As
noted in the &quot;Handling Events in the Applet&quot; section
in this chapter, the <TT><FONT FACE="Courier">keyDown()</FONT></TT>
method is called to handle the update. One of the high-level objects
<TT><FONT FACE="Courier">keyDown</FONT></TT> calls is the <TT><FONT FACE="Courier">setCurrentValue()</FONT></TT>
method of the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
class, which takes the current value of the input area and assigns
it to the active cell.
<P>
Two versions of the <TT><FONT FACE="Courier">setCurrentValue()</FONT></TT>
method are defined in the applet: The first sets values for floating-point
numbers, and the second sets values for strings. This is a good
example of overloading a method to handle multiple types of input.
Listing 20.11 shows the code for updating the current cell's value.
<HR>
<BLOCKQUOTE>
<B>Listing 20.11. Updating the current cell's value.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setCurrentValue(float val)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (selectedRow == -1 || selectedColumn
== -1) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;cells[selectedRow][selectedColumn].setValue(val);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
}<BR>
<BR>
public void setCurrentValue(int type, String val) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (selectedRow == -1 || selectedColumn
== -1) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;cells[selectedRow][selectedColumn].setValue(type,
val);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="HandlingFormulas"><B>Handling Formulas</B></A></H3>
<P>
The <TT><FONT FACE="Courier">SpreadSheet</FONT></TT> class is
responsible for most of the high-level functions of the applet.
To complete this class, you need methods for calculating formulas
and evaluating formulas.
<P>
Before the spreadsheet is displayed, the <TT><FONT FACE="Courier">recalculate()</FONT></TT>
method is called to convert any formulas the spreadsheet may have
to numeric values. Without a call to this method, the spreadsheet
makes no calculations, and the formula is displayed in the cell
instead of the numeric value. To ensure that both the numeric
value and the formula are available to the user, the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet stores the formula and the value in separate buffers.
<P>
As you can see from Listing 20.12, the <TT><FONT FACE="Courier">recalculate()</FONT></TT>
method goes through each cell in the spreadsheet checking for
the cell type <TT><FONT FACE="Courier">FORMULA</FONT></TT>. If
a cell contains a formula, the formula is evaluated using the
<TT><FONT FACE="Courier">evaluateFormula()</FONT></TT> method.
The values returned from the <TT><FONT FACE="Courier">evaluateFormula()</FONT></TT>
method are passed to the <TT><FONT FACE="Courier">setRawValue()</FONT></TT>
method.
<HR>
<BLOCKQUOTE>
<B>Listing 20.12. Calculating formula values.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void recalculate() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i,j;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;SpreadSheet.recalculate&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;for (i=0; i &lt; rows; i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j=0; j &lt;
columns; j++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(cells[i][j] != null &amp;&amp; cells[i][j].type == Cell.FORMULA)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cells[i][j].setRawValue(evaluateFormula(cells[i][j].parseRoot));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cells[i][j].needRedisplay
= true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">SpreadSheet</FONT></TT> applet has
the capability to parse formulas with basic math functions like
addition, subtraction, multiplication, and division by examining
formula nodes. Nodes are defined in the applet as class-level
objects that have a left value, an operand, and a right value.
<P>
The <TT><FONT FACE="Courier">evaluateFormula()</FONT></TT> method
shown in Listing 20.13 examines formula nodes looking for operands,
values, and cell references. Many computer science majors will
recognize the simple algorithm used to evaluate spreadsheet formulas
as an <I>expression tree</I>. A simple recursive process is then
used to evaluate the nodes of the tree. Values associated with
these node components are returned to the <TT><FONT FACE="Courier">setRawValue()</FONT></TT>
method, which displays the numeric value of the cell as a string.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Tip</B></TD></TR>
<TR><TD WIDTH=573>
<BLOCKQUOTE>
Recursion on trees is one of the basic algorithms in the programmer's toolkit. If this is the first time you have encountered an expression tree algorithm, take the time to learn how this is done. Start by examining the <TT><FONT 
FACE="Courier">evaluateFormula()</FONT></TT> method and then examine the <TT><FONT FACE="Courier">parseFormula()</FONT></TT> and <TT><FONT FACE="Courier">parseValue()</FONT></TT> methods of the <TT><FONT FACE="Courier">Cell</FONT></TT> class. You may be 
surprised at the number of uses for this algorithm.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 20.13. Evaluating formulas.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public float evaluateFormula(Node n)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;float&nbsp;&nbsp; val = 0.0f;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (n == null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return val;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;switch (n.type) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Node.OP:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val = evaluateFormula(n.left);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (n.op)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'+':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val
+= evaluateFormula(n.right);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'*':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val
*= evaluateFormula(n.right);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'-':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val
-= evaluateFormula(n.right);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'/':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val
/= evaluateFormula(n.right);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Node.VALUE:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return n.value;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Node.CELL:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (n == null)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(cells[n.row][n.column] == null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
cells[n.row][n.column].value;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return val;<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="CreatingCells"><B>Creating Cells</B></A></H3>
<P>
The next class-level object in the spreadsheet is the <TT><FONT FACE="Courier">Cell</FONT></TT>
object, which is responsible for maintaining the attributes of
a cell. Listing 20.14 shows the declarations for the <TT><FONT FACE="Courier">Cell</FONT></TT>
object's containers.
<P>
When new instances of the <TT><FONT FACE="Courier">Cell</FONT></TT>
class are created during the initialization of the frame, the
<TT><FONT FACE="Courier">Cell</FONT></TT> method is called and
the initial attributes for the cell are set. These attributes
include the background color, the foreground color, the color
to use when the cell is selected, and the width and height of
the cell. Other attributes of the cell are set to default values
or are based on the value<BR>
associated with each cell as read by the <TT><FONT FACE="Courier">getParameter()</FONT></TT>
method.
<HR>
<BLOCKQUOTE>
<B>Listing 20.14. Containers for the </B><TT><B><FONT FACE="Courier">Cell</FONT></B></TT><B>
object.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">class Cell {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int VALUE = 0;&nbsp;&nbsp;&nbsp;//initializes
the VALUE container<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int LABEL = 1;&nbsp;&nbsp;&nbsp;//initializes
the LABEL container<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int URL&nbsp;&nbsp;
= 2;&nbsp;&nbsp;&nbsp;//initializes the URL container<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int FORMULA = 3;&nbsp;&nbsp;&nbsp;//initializes
the FORMULA container<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Node&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parseRoot;&nbsp;&nbsp;&nbsp;//sets
the node for the cell<BR>
&nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;needRedisplay;&nbsp;&nbsp;&nbsp;//used
to determine the need for redisplay<BR>
&nbsp;&nbsp;&nbsp;&nbsp;boolean selected = false;&nbsp;&nbsp;&nbsp;&nbsp;//used
to determine whether cell is selected<BR>
&nbsp;&nbsp;&nbsp;&nbsp;boolean transientValue = false;&nbsp;&nbsp;&nbsp;//tracks
need to set transient value<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public int&nbsp;&nbsp;type = Cell.VALUE;&nbsp;&nbsp;&nbsp;&nbsp;//sets
the cell type<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valueString
= &quot;&quot;;&nbsp;&nbsp;&nbsp;&nbsp;//initializes the value
string<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printString
= &quot;v&quot;;&nbsp;&nbsp;&nbsp;//initiliazes the print string
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;float&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value;&nbsp;&nbsp;&nbsp;//container
for a float called value<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bgColor;&nbsp;&nbsp;&nbsp;//container
for the background color<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fgColor;&nbsp;&nbsp;&nbsp;//container
for the foreground color<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;highlightColor;&nbsp;&nbsp;&nbsp;//container
for cell color when selected<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width;&nbsp;&nbsp;&nbsp;//container
for the width of the cell<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height;&nbsp;&nbsp;&nbsp;//container
for the height of the cell<BR>
&nbsp;&nbsp;&nbsp;&nbsp;SpreadSheet app;&nbsp;&nbsp;&nbsp;&nbsp;//container
for the SpreadSheet object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;CellUpdater updaterThread;&nbsp;&nbsp;&nbsp;//container
for the CellUpdater object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;paused
= false;&nbsp;&nbsp;&nbsp;&nbsp;//used to determine if paused</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="PreparingCellsforDisplay"><B>Preparing Cells for
Display</B></A></H3>
<P>
After the containers for <TT><FONT FACE="Courier">Cell</FONT></TT>
objects are initialized, a series of methods, shown in Listing
20.15, prepare the cell for display.
<P>
The <TT><FONT FACE="Courier">Cell()</FONT></TT> method is called
with values for the key attributes of the cell; it then associates
these values with the <TT><FONT FACE="Courier">Cell</FONT></TT>
object. All cells of the spreadsheet must have a type, <TT><FONT FACE="Courier">valueString</FONT></TT>,
and <TT><FONT FACE="Courier">printString</FONT></TT> associated
with them. The first character of the value read by the <TT><FONT FACE="Courier">getParameter()</FONT></TT>
method character is used to set the cell type. The <TT><FONT FACE="Courier">valueString</FONT></TT>
excludes the first character and is used in calculations. The
<TT><FONT FACE="Courier">printString</FONT></TT> contains the
value of the cell as it should be displayed to the input area
when the cell is selected.
<P>
The <TT><FONT FACE="Courier">setUnparsedValue()</FONT></TT> method
sets the cell type. If the first character is a <TT><FONT FACE="Courier">v</FONT></TT>,
the type is set to <TT><FONT FACE="Courier">VALUE</FONT></TT>;
if it is an <TT><FONT FACE="Courier">l</FONT></TT>, the type is
set to <TT><FONT FACE="Courier">LABEL</FONT></TT>; if it is a
<TT><FONT FACE="Courier">u</FONT></TT>, the type is set to URL;
and if it is an <TT><FONT FACE="Courier">f</FONT></TT>, the type
is set to FORMULA.
<P>
<TT><FONT FACE="Courier">setValue()</FONT></TT>is an overloaded
method that builds the <TT><FONT FACE="Courier">valueString</FONT></TT>
and <TT><FONT FACE="Courier">printString</FONT></TT> objects of
all cells. The first version of the method accepts string values
and, depending on cell type, calls associated methods. The second
version accepts floating-point values and is called only when
the cell type is <TT><FONT FACE="Courier">VALUE</FONT></TT>. This
overloaded method in turn calls the <TT><FONT FACE="Courier">setRawValue()</FONT></TT>
method that converts the floating-point value it is passed to
a <TT><FONT FACE="Courier">String</FONT></TT> object.
<P>
The <TT><FONT FACE="Courier">setTransientValue()</FONT></TT>method
sets a transient value associated with the cell. This value is
set only when a number is passed through the token stream.
<HR>
<BLOCKQUOTE>
<B>Listing 20.15. Preparing the cell for display.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">//sets attributes for the Cell objects
as passed<BR>
public Cell(SpreadSheet app,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color
bgColor,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color
fgColor,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color
highlightColor,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
width,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
height) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;this.app = app;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;this.bgColor = bgColor;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;this.fgColor = fgColor;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;this.highlightColor = highlightColor;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.width = width;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.height = height;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;needRedisplay = true;
<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;//sets the valueString by converting the numeric
value of the cell to a string<BR>
&nbsp;&nbsp;&nbsp;public void setRawValue(float f) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valueString = Float.toString(f);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = f;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;//sets the cell type for values, formulas, labels
and URLs<BR>
&nbsp;&nbsp;&nbsp;public void setUnparsedValue(String s) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (s.charAt(0))
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 'v':
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setValue(Cell.VALUE,
s.substring(1));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 'f':
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setValue(Cell.FORMULA,
s.substring(1));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 'l':
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setValue(Cell.LABEL,
s.substring(1));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 'u':
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setValue(Cell.URL,
s.substring(1));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}<BR>
<BR>
&nbsp;&nbsp;&nbsp;//sets the printString by prepending a type
indicator to the valueString<BR>
&nbsp;&nbsp;&nbsp;public void setValue(float f) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setRawValue(f);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printString = &quot;v&quot;
+ valueString;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type = Cell.VALUE;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;paused = false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.recalculate();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;needRedisplay = true;
<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;//sets the printString by prepending a type
indicator to the valueString<BR>
&nbsp;&nbsp;&nbsp;public void setValue(int type, String s) {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;paused = false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (this.type == Cell.URL)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updaterThread.stop();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updaterThread
= null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valueString = new String(s);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.type = type;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;needRedisplay = true;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (type) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Cell.VALUE:
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setValue(Float.valueOf(s).floatValue());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Cell.LABEL:
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printString
= &quot;l&quot; + valueString;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Cell.URL:
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printString
= &quot;u&quot; + valueString;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updaterThread
= new CellUpdater(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updaterThread.start();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Cell.FORMULA:
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parseFormula(valueString,
parseRoot = new Node());<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printString
= &quot;f&quot; + valueString;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.recalculate();<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;//sets a transient value flag<BR>
&nbsp;&nbsp;&nbsp;public void setTransientValue(float f) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transientValue = true;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = f;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;needRedisplay = true;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.recalculate();<BR>
&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="UtilityMethods"><B>Utility Methods</B></A></H3>
<P>
Four utility methods, shown in Listing 20.16, handle low-level
tasks for <TT><FONT FACE="Courier">Cell</FONT></TT> objects: The
<TT><FONT FACE="Courier">getPrintString()</FONT></TT>method returns
the value of the <TT><FONT FACE="Courier">printString</FONT></TT>
associated with the cell; the <TT><FONT FACE="Courier">getValueString()</FONT></TT>method
returns the value of the <TT><FONT FACE="Courier">valueString</FONT></TT>
associated with the cell; the <TT><FONT FACE="Courier">select()</FONT></TT>method
sets flags to highlight the cell when the frame is next painted;
and the <TT><FONT FACE="Courier">deselect()</FONT></TT> method
sets flags to reset the cell's background to its original color
when the frame is next painted.
<HR>
<BLOCKQUOTE>
<B>Listing 20.16. Utility methods of the </B><TT><B><FONT FACE="Courier">Cell</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String getPrintString() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return printString;<BR>
}<BR>
public String getValueString() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return valueString;<BR>
}<BR>
public void select() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;selected = true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;paused = true;<BR>
}<BR>
public void deselect() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;selected = false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;paused = false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;needRedisplay = true;<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="ParsingFormulas"><B>Parsing Formulas</B></A></H3>
<P>
Parsing formulas associated with a cell is a difficult task handled
by two methods: <TT><FONT FACE="Courier">parseFormula</FONT></TT>
and <TT><FONT FACE="Courier">parseValue</FONT></TT>. These two
methods take cell formulas apart piece by piece by examining formula
nodes. As you examine Listing 20.17, study the algorithm that
builds and dissects the nodes. Recall that modes are defined in
the applet as class-level objects that have a left value, an operand,
and a right value. (See the section &quot;Handling Formulas&quot;
for a listing of valid operands and how they are used.)
<P>
The values associated with a node can be either implicit or explicit.
Explicit node values are numbers that you want to add, multiply,
divide, or subtract. Implicit values are numbers associated with
a particular cell. Reference implicit values in formulas using
the column/row coordinate of the cell.
<P>
A node that has only a left value for it is still valid. Using
these concepts of nodes, the basic syntax for formulas is
<BLOCKQUOTE>
<TT><I><FONT FACE="Courier">value<BR>
value operand value</FONT></I></TT>
</BLOCKQUOTE>
<P>
where each instance of <TT><I><FONT FACE="Courier">value</FONT></I></TT>
can be an actual value or a reference to a particular cell of
the spreadsheet, such as
<BLOCKQUOTE>
<TT><FONT FACE="Courier">A2 * 4</FONT></TT>
</BLOCKQUOTE>
<P>
or
<BLOCKQUOTE>
<TT><FONT FACE="Courier">A2 + B2</FONT></TT>
</BLOCKQUOTE>
<P>
To allow for more complex formulas, the <TT><FONT FACE="Courier">parseFormula</FONT></TT>
and <TT><FONT FACE="Courier">parseValue</FONT></TT> methods allow
you to define subformulas for the right-hand value of the original
node using parentheses. Because subformulas are treated as nodes,
they also can have a left value, an operand, and a right value.
You can continue to nest subformulas as long as you follow the
concept of nodes. Using subformulas, you can create formulas with
the following syntax:
<BLOCKQUOTE>
<TT><I><FONT FACE="Courier">value operand (value operand value)
<BR>
value operand (value operand (value operand value))</FONT></I></TT>
</BLOCKQUOTE>
<P>
You can continue to nest subformulas as long as you follow the
basic node structure of <TT><I><FONT FACE="Courier">value operand
value</FONT></I></TT>. As discussed earlier, the algorithm that
makes this work is a recursive procedure on an expression tree.
<HR>
<BLOCKQUOTE>
<B>Listing 20.17. Parsing formulas.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;* Parse a spreadsheet formula. The syntax is defined as:
<BR>
&nbsp;*<BR>
&nbsp;* formula -&gt; value<BR>
&nbsp;* formula -&gt; value op value<BR>
&nbsp;* value -&gt; '(' formula ')'<BR>
&nbsp;* value -&gt; cell<BR>
&nbsp;* value -&gt; &lt;number&gt;<BR>
&nbsp;* op -&gt; '+' | '*' | '/' | '-'<BR>
&nbsp;* cell -&gt; &lt;letter&gt;&lt;number&gt;<BR>
&nbsp;*/<BR>
public String parseFormula(String formula, Node node) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String subformula;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String restFormula;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;float value;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int length = formula.length();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Node left;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Node right;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;char op;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (formula == null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;subformula = parseValue(formula, node);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (subformula == null || subformula.length()
== 0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;Parse
succeeded&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (subformula == formula) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return formula;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// parse an operator and then another
value<BR>
&nbsp;&nbsp;&nbsp;&nbsp;switch (op = subformula.charAt(0)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 0:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case ')':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return subformula;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case '+':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case '*':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case '-':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case '/':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restFormula =
subformula.substring(1);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subformula = parseValue(restFormula,
right=new Node());<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (subformula
!= restFormula) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left
= new Node(node);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.left
= left;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.right
= right;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.op
= op;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.type
= Node.OP;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
subformula;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
formula;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return formula;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}<BR>
public String parseValue(String formula, Node node) {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;char&nbsp;&nbsp;&nbsp;&nbsp;c = formula.charAt(0);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;subformula;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;restFormula;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;float&nbsp;&nbsp;&nbsp;value;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp; row;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp; column;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;restFormula = formula;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (c == '(') {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restFormula =
formula.substring(1);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subformula = parseFormula(restFormula,
node);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (subformula
== null ||<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subformula.length()
== restFormula.length()) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
formula;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (! (subformula.charAt(0)
== ')')) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
formula;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restFormula =
subformula;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;} else if (c &gt;= '0' &amp;&amp; c &lt;=
'9') {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value
= Float.valueOf(formula).floatValue();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (NumberFormatException
e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
formula;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i=0; i &lt;
formula.length(); i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c
= formula.charAt(i);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
((c &lt; '0' || c &gt; '9') &amp;&amp; c != '.') {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.type = Node.VALUE;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.value = value;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restFormula =
formula.substring(i);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;
rest = &quot; + restFormula);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return restFormula;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;} else if (c &gt;= 'A' &amp;&amp; c &lt;=
'Z') {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column = c - 'A';
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restFormula =
formula.substring(1);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row = Float.valueOf(restFormula).intValue();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i=0; i &lt;
restFormula.length(); i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c
= restFormula.charAt(i);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(c &lt; '0' || c &gt; '9') {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.row = row
- 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.column =
column;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.type = Node.CELL;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == restFormula.length())
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restFormula
= null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restFormula
= restFormula.substring(i);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(restFormula.charAt(0) == 0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return restFormula;<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="PaintingCells"><B>Painting Cells</B></A></H3>
<P>
The <TT><FONT FACE="Courier">paint()</FONT></TT> method of the
<TT><FONT FACE="Courier">Cell</FONT></TT> class sets the colors
for spreadsheet cells. If the selected flag is set, the background
color of the cell is set to the value associated with the <TT><FONT FACE="Courier">highlightColor</FONT></TT>
object-white. If it is not set, the background color of the cell
is set to the value associated with the <TT><FONT FACE="Courier">bgColor</FONT></TT>
object-gray. When the background color is set, the rectangle associated
with the cell is painted.
<P>
When new cell objects are created, the <TT><FONT FACE="Courier">fgcolor</FONT></TT>
attribute is set to black. This attribute is used to set the font
color for each cell. If the cell type is <TT><FONT FACE="Courier">VALUE</FONT></TT>
or <TT><FONT FACE="Courier">LABEL</FONT></TT>, the font color
is set to black; if the cell type is <TT><FONT FACE="Courier">FORMULA</FONT></TT>,
it is set to red; and if the cell type is <TT><FONT FACE="Courier">URL</FONT></TT>,
it is set to blue. When the color for data associated with a cell
is set, the data is drawn to the frame using the <TT><FONT FACE="Courier">drawString()</FONT></TT>
method. Listing 20.18 shows the <TT><FONT FACE="Courier">paint()</FONT></TT>
method of the <TT><FONT FACE="Courier">Cell</FONT></TT> class.
<HR>
<BLOCKQUOTE>
<B>Listing 20.18. Painting cells.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;public void paint(Graphics
g, int x, int y) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (selected)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(highlightColor);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(bgColor);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.fillRect(x,
y, width - 1, height);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (valueString
!= null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch
(type) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
Cell.VALUE:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
Cell.LABEL:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(fgColor);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
Cell.FORMULA:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(Color.red);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
Cell.URL:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(Color.blue);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(transientValue){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;&quot;
+ value, x, y + (height / 2) + 5);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(valueString.length() &gt; 14) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(valueString.substring(0,
14),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x,
y + (height / 2) + 5);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(valueString,
x, y + (height / 2) + 5);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;needRedisplay
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="BuildingtheNodeObject"><B>Building the Node Object</B></A>
</H3>
<P>
You use the <TT><FONT FACE="Courier">Node</FONT></TT> class of
the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT> applet to
build the nodes used in formulas. As you can see in Listing 20.19,
nodes are not complex objects, and building a node is rather easy
when you understand that all nodes have a left value, an operand,
and a right value associated with them.
<P>
To track the types of values associated with nodes, three static
variables are used: The <TT><FONT FACE="Courier">OP</FONT></TT>
variable is set for operands, the <TT><FONT FACE="Courier">VALUE</FONT></TT>
variable is set for numeric values, and the <TT><FONT FACE="Courier">CELL</FONT></TT>
variable is set for references to cell objects.
<P>
The <TT><FONT FACE="Courier">Node</FONT></TT> class includes an
overloaded method called <TT><FONT FACE="Courier">Node()</FONT></TT>.
The first version of the <TT><FONT FACE="Courier">Node()</FONT></TT>
method builds a generic node that is used when parsing subformulas.
The second version is used when parsing formulas.
<HR>
<BLOCKQUOTE>
<B>Listing 20.19. Building nodes.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">class Node {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//set for node components that are operands
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int OP = 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//set for node components that are values
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int VALUE = 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//set for node components that are cell
references<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int CELL = 2;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Node&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left;&nbsp;&nbsp;&nbsp;//the
lefthand value for the node<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Node&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;right;&nbsp;&nbsp;&nbsp;//the
righthand value for the node<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row;&nbsp;&nbsp;&nbsp;//the
row coordinate of the selected cell<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column;&nbsp;&nbsp;&nbsp;//the
column coordinate of the selected cell<BR>
&nbsp;&nbsp;&nbsp;&nbsp;float&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
value;&nbsp;&nbsp;&nbsp;//the current value<BR>
&nbsp;&nbsp;&nbsp;&nbsp;char&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;op;&nbsp;&nbsp;&nbsp;//the
operand +, -, /, *<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Node() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left = null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;right = null;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row = -1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column = -1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;op = 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type = Node.VALUE;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Node(Node n) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left = n.left;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;right = n.right;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = n.value;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row = n.row;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column = n.column;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;op = n.op;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type = n.type;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="BuildingtheInputArea"><B>Building the Input Area</B></A>
</H3>
<P>
The input area is the final object needed in the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet. Although it could have been built using a simple <TT><FONT FACE="Courier">textField</FONT></TT>
object, a more advanced approach is to build an input area that
behaves and looks exactly as you want it to.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=579>
<BLOCKQUOTE>
You will find that there are many times when control over the behavior and style of the input area is needed in an advanced applet. To do this, you must build your own input area.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
When building your own input area, there are many things you should
consider. Most are obvious and relate to why you wanted to create
your own input area in the first place. Style considerations include
the following:
<UL>
<LI>The size of the input area
<LI>The color of the background
<LI>The font type, size, and color of text input
</UL>
<P>
Behavior considerations include the following:
<UL>
<LI>How the input area is activated
<LI>What the accepted key values are
<LI>Whether any input must be parsed
<LI>What the maximum length of the input is
<LI>Whether the Enter key causes the applet to update its display
</UL>
<P>
Two class-level objects are used to build the input area for the
<TT><FONT FACE="Courier">SpreadSheet</FONT></TT> applet: <TT><FONT FACE="Courier">SpreadSheetInput</FONT></TT>
and <TT><FONT FACE="Courier">InputField</FONT></TT>.
<H4><B>The </B><TT><B><FONT FACE="Courier">SpreadSheetInput</FONT></B></TT><B>
Class</B></H4>
<P>
The <TT><FONT FACE="Courier">SpreadSheetInput</FONT></TT> class,
shown in Listing 20.20, extends the <TT><FONT FACE="Courier">InputField</FONT></TT>
class, which is defined next. The class includes two fairly basic
methods.
<P>
The <TT><FONT FACE="Courier">SpreadSheetInput()</FONT></TT> method
passes the values with which it was called to the <TT><FONT FACE="Courier">InputField</FONT></TT>
class. The <TT><FONT FACE="Courier">selected()</FONT></TT> method
calls the <TT><FONT FACE="Courier">setCurrentValue</FONT></TT>
method with the appropriate parameters so the value of the input
area can be passed back to the currently selected cell. Thus,
the cell is updated when the user makes a change and presses Enter.
<HR>
<BLOCKQUOTE>
<B>Listing 20.20. The </B><TT><B><FONT FACE="Courier">SpreadSheetInput</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">class SpreadSheetInput extends InputField
{<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public SpreadSheetInput(String initValue,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpreadSheet
app,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
width,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
height,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color
bgColor,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color
fgColor) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(initValue,
app, width, height, bgColor, fgColor);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void selected() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float f;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (sval.charAt(0))
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'v':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f
= Float.valueOf(sval.substring(1)).floatValue();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((SpreadSheet)app).setCurrentValue(f);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
catch (NumberFormatException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Not
a float...&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'l':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((SpreadSheet)app).setCurrentValue(Cell.LABEL,
sval.substring(1));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'u':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((SpreadSheet)app).setCurrentValue(Cell.URL,
sval.substring(1));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'f':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((SpreadSheet)app).setCurrentValue(Cell.FORMULA,
sval.substring(1));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H4><B>The </B><TT><B><FONT FACE="Courier">InputField</FONT></B></TT><B>
Class</B></H4>
<P>
As you can see in Listing 20.21, the <TT><FONT FACE="Courier">InputField</FONT></TT>
class is more complex than the <TT><FONT FACE="Courier">SpreadSheetInput</FONT></TT>
class, primarily because the <TT><FONT FACE="Courier">InputField</FONT></TT>
object defines the style and behavior of the input area.
<P>
The first section of the <TT><FONT FACE="Courier">InputField</FONT></TT>
class initializes containers that determine the style of the input
area and limit its behavior. The maximum number of characters
the input area accepts is 50. Each character entered into the
input area is stored in an array. When the user adds characters
to the input area by either selecting a cell or entering data,
the array grows. When the user deletes characters, the array shrinks.
<P>
The <TT><FONT FACE="Courier">InputField()</FONT></TT> method is
called to set the attributes for the input area. In the unlikely
case that the method is called with an initial value set, the
string buffer is set to this value.
<P>
The <TT><FONT FACE="Courier">setText()</FONT></TT> method updates
the input area when a cell is selected or when text is entered
or deleted by reading the string buffer character by character.
The <TT><FONT FACE="Courier">paint()</FONT></TT> method overrides
the <TT><FONT FACE="Courier">paint()</FONT></TT> method of the
applet class and draws values to the input area.
<P>
The heart of this class is the event handler. As with other event
handlers in the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet, this one checks for events directly using methods of the
<TT><FONT FACE="Courier">Component</FONT></TT> class. Here, the
<TT><FONT FACE="Courier">keyDown</FONT></TT> event is checked
to determine when a key is pressed.
<P>
The <TT><FONT FACE="Courier">keyDown()</FONT></TT> method converts
the value of the pressed key to an integer and then checks for
three specific key types using their integer values. The integer
value of the delete key is <TT><FONT FACE="Courier">8</FONT></TT>.
When the Delete key is pressed, one character is deleted from
the <TT><FONT FACE="Courier">buffer[]</FONT></TT> array. The integer
value of the Enter key is <TT><FONT FACE="Courier">10</FONT></TT>.
When the Enter key is pressed, the current value of the <TT><FONT FACE="Courier">buffer[]</FONT></TT>
array is passed back to the cell. This happens behind the scenes
after the empty <TT><FONT FACE="Courier">selected()</FONT></TT>
method of the <TT><FONT FACE="Courier">InputField</FONT></TT>
class is called. By default, the <TT><FONT FACE="Courier">keyDown()</FONT></TT>
method stores the value of any keypress other than Delete or Enter
to the <TT><FONT FACE="Courier">buffer[]</FONT></TT> array.
<HR>
<BLOCKQUOTE>
<B>Listing 20.21. The </B><TT><B><FONT FACE="Courier">InputField</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">class InputField {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxchars
= 50;&nbsp;&nbsp;&nbsp;//the maximum characters for the input
field<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursorPos
= 0;&nbsp;&nbsp;&nbsp;//index to the current cursor position<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Applet&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app;&nbsp;&nbsp;&nbsp;//instance
of the applet object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sval;&nbsp;&nbsp;&nbsp;&nbsp;//container
for string values<BR>
&nbsp;&nbsp;&nbsp;&nbsp;char&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buffer[];&nbsp;&nbsp;&nbsp;//an
array of characters up to maxchars in length<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nChars;&nbsp;&nbsp;&nbsp;&nbsp;//the
number of characters in the input area<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width;&nbsp;&nbsp;&nbsp;//width
of the input area<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height;&nbsp;&nbsp;&nbsp;//height
of the input area<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bgColor;&nbsp;&nbsp;&nbsp;//background
color of the input area<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fgColor;&nbsp;&nbsp;&nbsp;//font
color for text in the input area<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public InputField(String initValue, Applet
app, int width, int height,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color
bgColor, Color fgColor) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.width = width;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.height =
height;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.bgColor =
bgColor;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.fgColor =
fgColor;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.app = app;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buffer = new char[maxchars];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nChars = 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (initValue
!= null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initValue.getChars(0,
initValue.length(), this.buffer, 0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nChars
= initValue.length();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sval = initValue;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setText(String val) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i=0; i &lt;
maxchars; i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buffer[i]
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sval = new String(val);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (val == null)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sval
= &quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nChars
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buffer[0]
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sval.getChars(0,
sval.length(), buffer, 0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nChars
= val.length();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sval
= new String(buffer);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void paint(Graphics g, int x, int
y) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(bgColor);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.fillRect(x,
y, width, height);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sval != null)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(fgColor);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(sval,
x, y + (height / 2) + 3);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void keyDown(int key) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (nChars &lt;
maxchars) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch
(key) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
8: // delete<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--nChars;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(nChars &lt; 0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nChars
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buffer[nChars]
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sval
= new String(new String(buffer));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
10: // return<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selected();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buffer[nChars++]
= (char)key;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sval
= new String(new String(buffer));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void selected() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H2><A NAME="TheCompleteApplet"><B><FONT SIZE=5 COLOR=#Ff0000>The
Complete Applet</FONT></B></A></H2>
<P>
Listing 21.22 shows the complete code for the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet. Although you can go straight to the CD-ROM and access
the complete source code, typing it in line by line forces you
to study each line of code.
<HR>
<BLOCKQUOTE>
<B>Listing 20.22. The </B><TT><B><FONT FACE="Courier">SpreadSheet</FONT></B></TT><B>
applet.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/*<BR>
&nbsp;* @(#)SpreadSheet.java 1.17 95/03/09 Sami Shaio<BR>
&nbsp;*<BR>
&nbsp;* Copyright (c) 1994-1995 Sun Microsystems, Inc. All Rights
Reserved.<BR>
&nbsp;*<BR>
&nbsp;* Permission to use, copy, modify, and distribute this software
<BR>
&nbsp;* and its documentation for NON-COMMERCIAL or COMMERCIAL
purposes and<BR>
&nbsp;* without fee is hereby granted.<BR>
&nbsp;* Please refer to the file http://java.sun.com/copy_trademarks.html
<BR>
&nbsp;* for further important copyright and trademark information
and to<BR>
&nbsp;* http://java.sun.com/licensing.html for further important
licensing<BR>
&nbsp;* information for the Java (tm) Technology.<BR>
&nbsp;*<BR>
&nbsp;* Modified for Peter Norton's Guide to Programming Java
by William R. Stanek<BR>
&nbsp;* 21 March 1996<BR>
&nbsp;* @version 2.02<BR>
&nbsp;*<BR>
&nbsp;* These modifications include:<BR>
&nbsp;*<BR>
&nbsp;* Added parameter support for publisher defined title fonts,
base fonts<BR>
&nbsp;* for columns and rows, and font sizes.<BR>
&nbsp;* Updated the title, column and row positions/sizes to make
them dynamic and<BR>
&nbsp;* thus support publisher defined font types and sizes.<BR>
&nbsp;* Changed display characteristics.<BR>
&nbsp;* Eliminates a display bug.<BR>
&nbsp;* Adds comment descriptions to methods<BR>
&nbsp;* Streamlined some class objects<BR>
&nbsp;*<BR>
&nbsp;* SUN MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY
OF<BR>
&nbsp;* THE SOFTWARE, EITHER EXPRESS OR IMPLIED, IncLUDING BUT
NOT LIMITED<BR>
&nbsp;* TO THE IMPLIED WARRANTIES OF MERchANTABILITY, FITNESS
FOR A<BR>
&nbsp;* PARTICULAR PURPOSE, OR NON-INFRINGEMENT. SUN SHALL NOT
BE LIABLE FOR<BR>
&nbsp;* ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING,
MODIFYING OR<BR>
&nbsp;* DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.<BR>
&nbsp;*<BR>
&nbsp;* THIS SOFTWARE IS NOT DESIGNED OR INTENDED FOR USE OR RESALE
AS ON-LINE<BR>
&nbsp;* CONTROL EQUIPMENT IN HAZARDOUS ENVIRONMENTS REQUIRING
FAIL-SAFE<BR>
&nbsp;* PERFORMAncE, SUch AS IN THE OPERATION OF NUCLEAR FACILITIES,
AIRCRAFT<BR>
&nbsp;* NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL,
DIRECT LIFE<BR>
&nbsp;* SUPPORT MAchINES, OR WEAPONS SYSTEMS, IN WHIch THE FAILURE
OF THE<BR>
&nbsp;* SOFTWARE COULD LEAD DIRECTLY TO DEATH, PERSONAL INJURY,
OR SEVERE<BR>
&nbsp;* PHYSICAL OR ENVIRONMENTAL DAMAGE (&quot;HIGH RISK ACTIVITIES&quot;).&nbsp;&nbsp;SUN
<BR>
&nbsp;* SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTY
OF FITNESS FOR<BR>
&nbsp;* HIGH RISK ACTIVITIES.<BR>
&nbsp;*/<BR>
<BR>
import java.applet.Applet;<BR>
import java.awt.*;<BR>
import java.io.*;<BR>
import java.lang.*;<BR>
import java.net.*;<BR>
<BR>
public class SpreadSheet extends Applet {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container to hold the parameter value
for title text<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container to hold the parameter value
for base font<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bfont;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container to hold the parameter value
for title font<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tfont;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the inputfont object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Font&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputFont;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the title font object
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Font&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;titleFont;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the cell color object
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cellColor;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the input area's color
object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputColor;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the parameter value for
font size<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fontSize;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the cell width object
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cellWidth;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the cell height object
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cellHeight;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the title height object
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;titleHeight;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the row label width object
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rowLabelWidth;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the status object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isStopped
= false;&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the update object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fullUpdate
= true;&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the rows object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rows;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the columns object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;columns;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the current key object
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentKey
= -1;&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the selected row object
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectedRow
= -1;&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the selected column object
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectedColumn
= -1;&nbsp;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the input area<BR>
&nbsp;&nbsp;&nbsp;&nbsp;SpreadSheetInput&nbsp;&nbsp;&nbsp;&nbsp;inputArea;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the individual cells<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Cell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cells[][];&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//container for the current cell<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Cell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current
= null;&nbsp;&nbsp;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public synchronized void init() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String rs;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String fs;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cellColor = Color.white;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputColor = new
Color(100, 100, 225);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fs = getParameter(&quot;fontsize&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (fs == null)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fontSize
= 10;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fontSize
= Integer.parseInt(fs);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;cellWidth = fontSize * 10;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;cellHeight = fontSize * 2;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;titleHeight = fontSize * 2;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;rowLabelWidth = fontSize * 3;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bfont = getParameter(&quot;basefont&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (bfont == null)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bfont
= &quot;Courier&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputFont = new
Font(bfont, Font.PLAIN, fontSize);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tfont = getParameter(&quot;titlefont&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tfont == null)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tfont
= &quot;Courier&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;titleFont = new
Font(tfont, Font.BOLD, (fontSize + 2));<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title = getParameter(&quot;title&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (title == null)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title
= &quot;Spreadsheet&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rs = getParameter(&quot;rows&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rs == null)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rows
= 9;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rows
= Integer.parseInt(rs);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rs = getParameter(&quot;columns&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rs == null)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;columns
= 5;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;columns
= Integer.parseInt(rs);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cells = new Cell[rows][columns];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char l[] = new
char[1];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0;
i &lt; rows; i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(int j=0; j &lt; columns; j++) {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cells[i][j]
= new Cell(this,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color.lightGray,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color.black,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cellColor,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cellWidth
- (fontSize/4),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cellHeight
- (fontSize/4));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l[0]
= (char)((int)'a' + j);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rs
= getParameter(&quot;&quot; + new String(l) + (i+1));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(rs != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cells[i][j].setUnparsedValue(rs);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dimension d =
size();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputArea = new
SpreadSheetInput(null, this, d.width - 2, <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cellHeight
- 2, inputColor, Color.white);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resize(columns
* cellWidth + rowLabelWidth,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((rows
+ 1) * cellHeight) + cellHeight + titleHeight);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setCurrentValue(float val)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (selectedRow
== -1 || selectedColumn == -1) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cells[selectedRow][selectedColumn].setValue(val);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void stop() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isStopped = true;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void start() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isStopped = false;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void destroy() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0;
i &lt; rows; i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(int j=0; j &lt; columns; j++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(cells[i][j].type == Cell.URL) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cells[i][j].updaterThread.stop();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setCurrentValue(int type,
String val) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (selectedRow
== -1 || selectedColumn == -1) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cells[selectedRow][selectedColumn].setValue(type,
val);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void update(Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (! fullUpdate)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
cx, cy;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setFont(titleFont);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(int i=0; i &lt; rows; i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(int j=0; j &lt; columns; j++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(cells[i][j].needRedisplay) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cx
= (j * cellWidth) + (fontSize*2) + rowLabelWidth;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cy
= ((i+1) * cellHeight) + (fontSize*2) + titleHeight;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cells[i][j].paint(g,
cx, cy);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;paint(g);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fullUpdate
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void recalculate() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i,j;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;SpreadSheet.recalculate&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i=0; i &lt;
rows; i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(j=0; j &lt; columns; j++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(cells[i][j] != null &amp;&amp; cells[i][j].type == Cell.FORMULA)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cells[i][j].setRawValue(evaluateFormula
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&Acirc;(cells[i][j].parseRoot));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cells[i][j].needRedisplay
= true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public float evaluateFormula(Node n) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float&nbsp;&nbsp;&nbsp;val
= 0.0f;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;evaluateFormula:&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//n.print(3);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (n == null)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;Null
node&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
val;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (n.type)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
Node.OP:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val
= evaluateFormula(n.left);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch
(n.op) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'+':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val
+= evaluateFormula(n.right);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'*':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val
*= evaluateFormula(n.right);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'-':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val
-= evaluateFormula(n.right);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'/':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val
/= evaluateFormula(n.right);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
Node.VALUE:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;=&gt;&quot;
+ n.value);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
n.value;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
Node.CELL:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(n == null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;NULL
at 192&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(cells[n.row][n.column] == null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;NULL
at 193&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;=&gt;&quot;
+ cells[n.row][n.column].value);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
cells[n.row][n.column].value;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;=&gt;&quot;
+ val);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return val;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public synchronized void paint(Graphics
g) {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i, j;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int cx, cy;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char l[] = new
char[1];<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dimension d =
size();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//draws the title
on the frame<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setFont(titleFont);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = g.getFontMetrics().stringWidth(title);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString((title
== null) ? &quot;Spreadsheet&quot; : title,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(d.width
- i + (fontSize*3/2)) / 2, (fontSize*3/2));<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//draws the input
area on the frame<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(inputColor);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.fillRect(0,
cellHeight, d.width, cellHeight);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//draws the lines
for rows using 3d effect<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//adds row numbering
in blue<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setFont(titleFont);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i=0; i &lt;
rows+1; i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cy
= (i+2) * cellHeight;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(getBackground());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.draw3DRect(0,
cy, d.width, 2, true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(i &lt; rows) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(Color.blue);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;&quot;
+ (i+1), fontSize, cy + (fontSize *3/2));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//draws the lines
for columns using 3d effect<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//adds column
alphas in red<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(Color.red);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i=0; i &lt;
columns; i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cx
= i * cellWidth;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(getBackground());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.draw3DRect(cx
+ rowLabelWidth,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2
* cellHeight, 1, d.height, true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(i &lt; columns) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(Color.red);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l[0]
= (char)((int)'A' + i);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(new
String(l),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cx
+ rowLabelWidth + (cellWidth / 2),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.height
- 3);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//paints the cell
data<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i=0; i &lt;
rows; i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(j=0; j &lt; columns; j++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cx
= (j * cellWidth) + 2 + rowLabelWidth;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cy
= ((i+1) * cellHeight) + 2 + titleHeight;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(cells[i][j] != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cells[i][j].paint(g,
cx, cy);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(getBackground());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//draws a 3d line for
the input area and to the left side of the frame<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.draw3DRect(0,
titleHeight, d.width, d.height - titleHeight, false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//paints the data
of the current cell to the input area<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputArea.paint(g,
1, titleHeight + 1);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean mouseDown(Event evt, int
x, int y) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cell cell;<BR>
//ensures the y coordinate of the mouse pointer <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//is not in the
title/input area<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (y &lt; (titleHeight
+ cellHeight)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectedRow
= -1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(y &lt;= titleHeight &amp;&amp; current != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current.deselect();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current
= null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
//ensures the x coordinate of the mouse pointer <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//is not in the
row label area<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (x &lt; rowLabelWidth)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectedRow
= -1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(current != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current.deselect();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current
= null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//determines the
row of the selected cell<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectedRow =
((y - cellHeight - titleHeight) / cellHeight);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//determines the
column of the selected cell<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectedColumn
= (x - rowLabelWidth) / cellWidth;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//ensures the
row and column coordinate is valid<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (selectedRow
&gt;= rows ||<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectedColumn
&gt;= columns) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectedRow
= -1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(current != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current.deselect();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current
= null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//if the row-column
coordinate is valid place the selected cells value<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//in the input
area<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cell
= cells[selectedRow][selectedColumn];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputArea.setText(new
String(cell.getPrintString()));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(current != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current.deselect();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current
= cell;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current.select();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;requestFocus();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fullUpdate
= true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//determine if a key is pressed<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean keyDown(Event evt, int
key) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fullUpdate=true;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputArea.keyDown(key);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}<BR>
<BR>
class CellUpdater extends Thread {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Cell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;InputStream dataStream = null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;StreamTokenizer tokenStream;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public CellUpdater(Cell c) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(&quot;cell
updater&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target = c;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void run() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataStream
= new URL(target.app.getDocumentBase(),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target.getValueString()).openStream();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenStream
= new StreamTokenizer(dataStream);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenStream.eolIsSignificant(false);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while
(true) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch
(tokenStream.nextToken()) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
tokenStream.TT_EOF:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataStream.close();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
tokenStream.TT_NUMBER:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target.setTransientValue((float)tokenStream.nval);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(! target.app.isStopped &amp;&amp; ! target.paused) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target.app.repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.sleep(2000);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
catch (InterruptedException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (IOException
e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}<BR>
<BR>
class Cell {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int VALUE = 0;&nbsp;&nbsp;&nbsp;//initializes
the VALUE container<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int LABEL = 1;&nbsp;&nbsp;&nbsp;//initializes
the LABEL container<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int URL&nbsp;&nbsp;&nbsp;=
2;&nbsp;&nbsp;&nbsp;//initializes the URL container<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int FORMULA = 3;&nbsp;&nbsp;&nbsp;//initializes
the FORMULA container<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Node&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parseRoot;&nbsp;&nbsp;&nbsp;//sets
the node for the cell<BR>
&nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;needRedisplay;&nbsp;&nbsp;&nbsp;//used
to determine the need for redisplay<BR>
&nbsp;&nbsp;&nbsp;&nbsp;boolean selected = false;&nbsp;&nbsp;&nbsp;&nbsp;//used
to determine whether cell is selected<BR>
&nbsp;&nbsp;&nbsp;&nbsp;boolean transientValue = false;&nbsp;&nbsp;&nbsp;//tracks
need to set transient value<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public int&nbsp;&nbsp;type = Cell.VALUE;&nbsp;&nbsp;&nbsp;&nbsp;//sets
the cell type<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valueString
= &quot;&quot;;&nbsp;&nbsp;&nbsp;&nbsp;//initializes the value
string<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printString
= &quot;v&quot;;&nbsp;&nbsp;&nbsp;//initiliazes the print string
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;float&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value;&nbsp;&nbsp;&nbsp;//container
for a float called value<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bgColor;&nbsp;&nbsp;&nbsp;//container
for the background color<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fgColor;&nbsp;&nbsp;&nbsp;//container
for the foreground color<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;highlightColor;&nbsp;&nbsp;&nbsp;//container
for cell color when selected<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width;&nbsp;&nbsp;&nbsp;//container
for the width of the cell<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height;&nbsp;&nbsp;&nbsp;//container
for the height of the cell<BR>
&nbsp;&nbsp;&nbsp;&nbsp;SpreadSheet app;&nbsp;&nbsp;&nbsp;&nbsp;//container
for the SpreadSheet object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;CellUpdater updaterThread;&nbsp;&nbsp;&nbsp;//container
for the CellUpdater object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;paused
= false;&nbsp;&nbsp;&nbsp;&nbsp;//used to determine if paused
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Cell(SpreadSheet app,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color
bgColor,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color
fgColor,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color
highlightColor,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
width,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
height) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.app = app;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.bgColor =
bgColor;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.fgColor =
fgColor;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.highlightColor
= highlightColor;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.width = width;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.height =
height;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;needRedisplay
= true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setRawValue(float f) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valueString =
Float.toString(f);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = f;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setValue(float f) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setRawValue(f);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printString =
&quot;v&quot; + valueString;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type = Cell.VALUE;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;paused = false;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.recalculate();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;needRedisplay
= true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setTransientValue(float f)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transientValue
= true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = f;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;needRedisplay
= true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.recalculate();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setUnparsedValue(String s)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (s.charAt(0))
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'v':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setValue(Cell.VALUE,
s.substring(1));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'f':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setValue(Cell.FORMULA,
s.substring(1));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'l':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setValue(Cell.LABEL,
s.substring(1));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'u':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setValue(Cell.URL,
s.substring(1));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/**<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Parse a spreadsheet formula. The
syntax is defined as:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* formula -&gt; value<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* formula -&gt; value op value<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* value -&gt; '(' formula ')'<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* value -&gt; cell<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* value -&gt; &lt;number&gt;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* op -&gt; '+' | '*' | '/' | '-'
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* cell -&gt; &lt;letter&gt;&lt;number&gt;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String parseFormula(String formula,
Node node) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String subformula;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String restFormula;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float value;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int length = formula.length();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node left;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node right;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char op;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (formula ==
null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subformula = parseValue(formula,
node);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;subformula
= &quot; + subformula);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (subformula
== null || subformula.length() == 0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;Parse
succeeded&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (subformula
== formula) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;Parse
failed&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
formula;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// parse an operator
and then another value<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (op = subformula.charAt(0))
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
0:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;Parse
succeeded&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
')':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;Returning
subformula=&quot; + subformula);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
subformula;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'+':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'*':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'-':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'/':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restFormula
= subformula.substring(1);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subformula
= parseValue(restFormula, right=new Node());<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;subformula(2)
= &quot; + subformula);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(subformula != restFormula) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;Parse
succeeded&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left
= new Node(node);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.left
= left;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.right
= right;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.op
= op;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.type
= Node.OP;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//node.print(3);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
subformula;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;Parse
failed&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
formula;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;Parse
failed (bad operator): &quot; + subformula);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
formula;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String parseValue(String formula,
Node node) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char&nbsp;&nbsp;&nbsp;&nbsp;c
= formula.charAt(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;subformula;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;restFormula;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float&nbsp;&nbsp;&nbsp;value;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;parseValue:
&quot; + formula);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restFormula =
formula;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (c == '(')
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;parseValue(&quot;
+ formula + &quot;)&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restFormula
= formula.substring(1);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subformula
= parseFormula(restFormula, node);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;rest=(&quot;
+ subformula + &quot;)&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(subformula == null ||<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subformula.length()
== restFormula.length()) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;Failed&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
formula;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else if (! (subformula.charAt(0) == ')')) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;Failed
(missing parentheses)&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
formula;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restFormula
= subformula;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (c &gt;=
'0' &amp;&amp; c &lt;= '9') {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
i;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;formula=&quot;
+ formula);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value
= Float.valueOf(formula).floatValue();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
catch (NumberFormatException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;Failed
(number format error)&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
formula;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(i=0; i &lt; formula.length(); i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c
= formula.charAt(i);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
((c &lt; '0' || c &gt; '9') &amp;&amp; c != '.') {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.type
= Node.VALUE;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.value
= value;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//node.print(3);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restFormula
= formula.substring(i);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;value=
&quot; + value + &quot; i=&quot; + i +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;
rest = &quot; + restFormula);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
restFormula;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (c &gt;=
'A' &amp;&amp; c &lt;= 'Z') {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
i;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column
= c - 'A';<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restFormula
= formula.substring(1);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row
= Float.valueOf(restFormula).intValue();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//System.out.println(&quot;row
= &quot; + row + &quot; column = &quot; + column);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(i=0; i &lt; restFormula.length(); i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c
= restFormula.charAt(i);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(c &lt; '0' || c &gt; '9') {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.row
= row - 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.column
= column;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.type
= Node.CELL;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//node.print(3);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(i == restFormula.length()) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restFormula
= null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restFormula
= restFormula.substring(i);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(restFormula.charAt(0) == 0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return restFormula;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setValue(int type, String
s) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;paused = false;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (this.type
== Cell.URL) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updaterThread.stop();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updaterThread
= null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valueString =
new String(s);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.type = type;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;needRedisplay
= true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (type)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
Cell.VALUE:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setValue(Float.valueOf(s).floatValue());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
Cell.LABEL:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printString
= &quot;l&quot; + valueString;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
Cell.URL:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printString
= &quot;u&quot; + valueString;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updaterThread
= new CellUpdater(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updaterThread.start();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
Cell.FORMULA:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parseFormula(valueString,
parseRoot = new Node());<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printString
= &quot;f&quot; + valueString;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.recalculate();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String getValueString() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return valueString;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String getPrintString() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return printString;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void select() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selected = true;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;paused = true;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void deselect() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selected = false;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;paused = false;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;needRedisplay
= true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void paint(Graphics g, int x, int
y) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (selected)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(highlightColor);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(bgColor);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.fillRect(x,
y, width - 1, height);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (valueString
!= null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch
(type) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
Cell.VALUE:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
Cell.LABEL:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(fgColor);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
Cell.FORMULA:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(Color.red);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
Cell.URL:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(Color.blue);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(transientValue){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;&quot;
+ value, x, y + (height / 2) + 5);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(valueString.length() &gt; 14) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(valueString.substring(0,
14),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x,
y + (height / 2) + 5);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(valueString,
x, y + (height / 2) + 5);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;needRedisplay
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}<BR>
<BR>
class Node {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//set for node components that are operands
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int OP = 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//set for node components that are values
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int VALUE = 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//set for node components that are cell
references<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int CELL = 2;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Node&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left;&nbsp;&nbsp;&nbsp;//the
lefthand value for the node<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Node&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;right;&nbsp;&nbsp;&nbsp;//the
righthand value for the node<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row;&nbsp;&nbsp;&nbsp;//the
row coordinate of the selected cell<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column;&nbsp;&nbsp;&nbsp;//the
column coordinate of the selected cell<BR>
&nbsp;&nbsp;&nbsp;&nbsp;float&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
value;&nbsp;&nbsp;&nbsp;//the current value<BR>
&nbsp;&nbsp;&nbsp;&nbsp;char&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;op;&nbsp;&nbsp;&nbsp;//the
operand +, -, /, *<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Node() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left = null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;right = null;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row = -1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column = -1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;op = 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type = Node.VALUE;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Node(Node n) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left = n.left;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;right = n.right;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = n.value;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row = n.row;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column = n.column;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;op = n.op;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type = n.type;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void indent(int ind) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i = 0;
i &lt; ind; i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(&quot;
&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void print(int indentLevel) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char l[] = new
char[1];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;indent(indentLevel);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;NODE
type=&quot; + type);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;indent(indentLevel);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (type)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
Node.VALUE:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;
value=&quot; + value);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
Node.CELL:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l[0]
= (char)((int)'A' + column);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;
cell=&quot; + new String(l) + (row+1));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
Node.OP:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;
op=&quot; + op);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left.print(indentLevel
+ 3);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;right.print(indentLevel
+ 3);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}<BR>
<BR>
class InputField {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxchars
= 50;&nbsp;&nbsp;&nbsp;//the maximum characters for the input
field<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursorPos
= 0;&nbsp;&nbsp;&nbsp;//index to the current cursor position<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Applet&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app;&nbsp;&nbsp;&nbsp;//instance
of the applet object<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sval;&nbsp;&nbsp;&nbsp;&nbsp;//container
for string values<BR>
&nbsp;&nbsp;&nbsp;&nbsp;char&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buffer[];&nbsp;&nbsp;&nbsp;//an
array of characters up to maxchars in length<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nChars;&nbsp;&nbsp;&nbsp;&nbsp;//the
number of characters in the input area<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width;&nbsp;&nbsp;&nbsp;//width
of the input area<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height;&nbsp;&nbsp;&nbsp;//height
of the input area<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bgColor;&nbsp;&nbsp;&nbsp;//background
color of the input area<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fgColor;&nbsp;&nbsp;&nbsp;//font
color for text in the input area<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public InputField(String initValue, Applet
app, int width, int height,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color
bgColor, Color fgColor) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.width = width;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.height =
height;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.bgColor =
bgColor;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.fgColor =
fgColor;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.app = app;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buffer = new char[maxchars];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nChars = 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (initValue
!= null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initValue.getChars(0,
initValue.length(), this.buffer, 0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nChars
= initValue.length();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sval = initValue;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setText(String val) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i=0; i &lt;
maxchars; i++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buffer[i]
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sval = new String(val);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (val == null)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sval
= &quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nChars
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buffer[0]
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sval.getChars(0,
sval.length(), buffer, 0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nChars
= val.length();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sval
= new String(buffer);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void paint(Graphics g, int x, int
y) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(bgColor);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.fillRect(x,
y, width, height);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sval != null)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(fgColor);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(sval,
x, y + (height / 2) + 3);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void keyDown(int key) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (nChars &lt;
maxchars) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch
(key) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
8: // delete<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--nChars;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(nChars &lt; 0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nChars
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buffer[nChars]
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sval
= new String(new String(buffer));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
10: // return<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selected();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buffer[nChars++]
= (char)key;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sval
= new String(new String(buffer));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.repaint();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void selected() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}<BR>
<BR>
class SpreadSheetInput extends InputField {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public SpreadSheetInput(String initValue,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpreadSheet
app,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
width,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
height,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color
bgColor,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color
fgColor) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(initValue,
app, width, height, bgColor, fgColor);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void selected() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float f;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (sval.charAt(0))
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'v':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f
= Float.valueOf(sval.substring(1)).floatValue();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((SpreadSheet)app).setCurrentValue(f);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
catch (NumberFormatException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Not
a float...&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'l':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((SpreadSheet)app).setCurrentValue(Cell.LABEL,
sval.substring(1));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'u':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((SpreadSheet)app).setCurrentValue(Cell.URL,
sval.substring(1));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'f':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((SpreadSheet)app).setCurrentValue(Cell.FORMULA,
sval.substring(1));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H2><A NAME="PuttingtheSpreadSheetApplettoUse"><B><FONT SIZE=5 COLOR=#Ff0000>Putting
the </FONT></B><TT><B><FONT SIZE=5 COLOR=#Ff0000 FACE="Courier">SpreadSheet</FONT></B></TT><B><FONT SIZE=5 COLOR=#Ff0000>
Applet to Use</FONT></B></A></H2>
<P>
To use the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT> applet,
you need to create an HTML document that calls the applet. The
document can be as simple or as complex as you want it to be.
The code for a simple HTML document that causes the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet to use default values is shown in Listing 20.23. This document
is shown in Figure 20.3.
<P>
<A HREF="f20-3.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f20-3.gif" ><B>Figure 20.3 : </B><I>A document using the SpreadSheet applet's defaultsettings.</I></A>
<HR>
<BLOCKQUOTE>
<B>Listing 20.23. A simple HTML document using the </B><TT><B><FONT FACE="Courier">SpreadSheet</FONT></B></TT><B>
applet.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;HTML&gt;<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt;Default SpreadSheet&lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
&lt;BODY&gt;<BR>
&lt;APPLET CODE=&quot;SpreadSheet.class&quot; WIDTH=400 HEIGHT=250&gt;
<BR>
&lt;/APPLET&gt;<BR>
&lt;/BODY&gt;<BR>
&lt;/HTML&gt;</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Although your HTML document does not have to set parameter values
for the spreadsheet, the best way to see how the applet behaves
is to experiment with parameter values. Listing 20.24 shows how
an advanced spreadsheet was built using the <TT><FONT FACE="Courier">SpreadSheet</FONT></TT>
applet. This document is shown earlier in this chapter as Figure
20.2.
<HR>
<BLOCKQUOTE>
<B>Listing 20.24. A more advanced example using the </B><TT><B><FONT FACE="Courier">SpreadSheet</FONT></B></TT><B>
applet.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;HTML&gt;<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt;SpreadSheet&lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
&lt;BODY&gt;<BR>
&lt;HR&gt;<BR>
&lt;APPLET CODE=&quot;SpreadSheet.class&quot; WIDTH=750 HEIGHT=400&gt;
<BR>
&lt;PARAM NAME=title value=&quot;Java Powered Spreadsheet&quot;&gt;
<BR>
&lt;PARAM NAME=columns value=&quot;5&quot;&gt;<BR>
&lt;PARAM NAME=rows value=&quot;7&quot;&gt;<BR>
&lt;PARAM NAME=fontsize value=&quot;14&quot;&gt;<BR>
&lt;PARAM NAME=basefont value=&quot;TimesRoman&quot;&gt;<BR>
&lt;PARAM NAME=titlefont value=&quot;Helvetica&quot;&gt;<BR>
&lt;PARAM NAME=a1 value=&quot;lWholesale&quot;&gt;<BR>
&lt;PARAM NAME=a2 value=&quot;v20195&quot;&gt;<BR>
&lt;PARAM NAME=a3 value=&quot;v7280&quot;&gt;<BR>
&lt;PARAM NAME=a4 value=&quot;v6127&quot;&gt;<BR>
&lt;PARAM NAME=a5 value=&quot;v9803&quot;&gt;<BR>
&lt;PARAM NAME=a6 value=&quot;v4150&quot;&gt;<BR>
&lt;PARAM NAME=a7 value=&quot;fA2+(A3+(A4+(A5+A6)))&quot;&gt;
<BR>
&lt;PARAM NAME=b1 value=&quot;lShipping&quot;&gt;<BR>
&lt;PARAM NAME=b2 value=&quot;v1500&quot;&gt;<BR>
&lt;PARAM NAME=b3 value=&quot;v350&quot;&gt;<BR>
&lt;PARAM NAME=b4 value=&quot;v729&quot;&gt;<BR>
&lt;PARAM NAME=b5 value=&quot;v830&quot;&gt;<BR>
&lt;PARAM NAME=b6 value=&quot;v125&quot;&gt;<BR>
&lt;PARAM NAME=b7 value=&quot;fB2+(B3+(B4+(B5+B6)))&quot;&gt;
<BR>
&lt;PARAM NAME=c1 value=&quot;lPackaging&quot;&gt;<BR>
&lt;PARAM NAME=c2 value=&quot;v120&quot;&gt;<BR>
&lt;PARAM NAME=c3 value=&quot;v35&quot;&gt;<BR>
&lt;PARAM NAME=c4 value=&quot;v48&quot;&gt;<BR>
&lt;PARAM NAME=c5 value=&quot;v52&quot;&gt;<BR>
&lt;PARAM NAME=c6 value=&quot;v12&quot;&gt;<BR>
&lt;PARAM NAME=c7 value=&quot;fC2+(C3+(C4+(C5+C6)))&quot;&gt;
<BR>
&lt;PARAM NAME=d1 value=&quot;lTotal Cost&quot;&gt;<BR>
&lt;PARAM NAME=d2 value=&quot;fA2+(B2+C2)&quot;&gt;<BR>
&lt;PARAM NAME=d3 value=&quot;fA3+(B3+C3)&quot;&gt;<BR>
&lt;PARAM NAME=d4 value=&quot;fA4+(B4+C4)&quot;&gt;<BR>
&lt;PARAM NAME=d5 value=&quot;fA5+(B5+C5)&quot;&gt;<BR>
&lt;PARAM NAME=d6 value=&quot;fA6+(B6+C6)&quot;&gt;<BR>
&lt;PARAM NAME=d7 value=&quot;fD2+(D3+(D4+(D5+D6)))&quot;&gt;
<BR>
&lt;PARAM NAME=e1 value=&quot;lCost/Expense&quot;&gt;<BR>
&lt;PARAM NAME=e2 value=&quot;fA2/(B2+C2)&quot;&gt;<BR>
&lt;PARAM NAME=e3 value=&quot;fA3/(B3+C3)&quot;&gt;<BR>
&lt;PARAM NAME=e4 value=&quot;fA4/(B4+C4)&quot;&gt;<BR>
&lt;PARAM NAME=e5 value=&quot;fA5/(B5+C5)&quot;&gt;<BR>
&lt;PARAM NAME=e6 value=&quot;fA6/(B6+C6)&quot;&gt;<BR>
&lt;/APPLET&gt;<BR>
&lt;HR&gt;<BR>
&lt;A HREF=&quot;SpreadSheet.java&quot;&gt;The source.&lt;/A&gt;
<BR>
&lt;/BODY&gt;<BR>
&lt;/HTML&gt;</FONT></TT>
</BLOCKQUOTE>
<HR>
<H2><A NAME="Summary"><B><FONT SIZE=5 COLOR=#Ff0000>Summary</FONT></B></A>
</H2>
<P>
After completing this chapter, you should have a good understanding
of how to develop advanced applets using the Java programming
language. Although you may be able to develop and implement some
applets in a single day, more advanced projects are developed
and implemented over a period of days, weeks, or months. Most
advanced projects include six phases: requirements, specification/analysis,
planning, design, implementation, and testing.
<P>
The <TT><FONT FACE="Courier">SpreadSheet</FONT></TT> applet developed
in this chapter has many characteristics of advanced applets.
Now that you have examined it, you should have a better understanding
of using text and graphics, manipulating text strings, using mathematical
formulas, and processing user input.
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch19.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch19.htm"><IMG SRC="pc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/index.htm"><IMG SRC="hb.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch21.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch21.htm"><IMG 
SRC="nc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>
<HR WIDTH="100%"></P>
<P>


</BODY>
</HTML>