<HTML>

<HEAD>
   <TITLE>Chapter 14 -- Creating a Java Applet</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<!--Begin JavaScript roadmap code.  If editing downloaded HTML source, delete
 this portion.-->

<script language="JavaScript">
<!--

function TripodShowPopup()
{
   var bName=navigator.appName;
   var bVer=parseInt(navigator.appVersion);
   var now = new Date();
   var popupURL = "/adm/popup/roadmap.shtml?"+"member_name=er4ebus&path=peternortonjavaprograming&client_ip=200.190.100.218&ts=1015337033&ad_type=POPUP&category=net&id=3be3ddb58ec6f84d3d40a919c6e3d8e4";
   var popupName = "TripodPopup";

   if (bName=="Netscape" && bVer<=3)
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=614,height=150');
   }
   else
   {
      var popup = window.open("", popupName,'toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=0,resizable=0,width=604,height=135');
   }
   popup.location = popupURL;
}

if(window.parent==window)
{
   TripodShowPopup();
}

// -->
</script>

<script language="JavaScript1.2">
<!--

function changeOpenFunction()
{
   var original_window_open = window.open;
   function new_open_function(url, name, features, replace)
   {
      if(name != "TripodPopup")
         return original_window_open(url, name, features, replace);
   }
   window.open = new_open_function;
}
var bName = navigator.appName;

if(bName != "Netscape")
   changeOpenFunction();

// -->
</script>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#Ff0000>Chapter 14</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#Ff0000>Creating a Java Applet</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>

<UL>
<LI><A HREF="#ConceptualizationandDesignoftheQuiz" >Conceptualization and Design of the QuizMaker Applet</A>
<LI><A HREF="#DefiningtheAppletStructure1" >Defining the Applet Structure</A>
<LI><A HREF="#BuildingtheApplet" >Building the Applet</A>
<UL>
<LI><A HREF="#Step1CreateanHTMLDocumenttoTest" >Step 1: Create an HTML Document to Test the Applet</A>
<LI><A HREF="#Step2CreateaFileContainingInclude" >Step 2: Create a File Containing Included Classes</A>
<LI><A HREF="#Step3DeclaringtheQuizMakerClass" >Step 3: Declaring the QuizMaker Class</A>
<LI><A HREF="#Step4AddingClassVariables" >Step 4: Adding Class Variables</A>
<LI><A HREF="#Step5DefinetheMethods" >Step 5: Define the Methods</A>
<LI><A HREF="#Step6CompiletheApplet" >Step 6: Compile the Applet</A>
<LI><A HREF="#TheFinishedApplet" >The Finished Applet</A>
</UL>
<LI><A HREF="#CreatingaSecondApplet" >Creating a Second Applet</A>
<UL>
<LI><A HREF="#ConceptualizationandDesignoftheAppl" >Conceptualization and Design of the Applet</A>
<LI><A HREF="#DefiningtheAppletStructure" >Defining the Applet Structure</A>
<LI><A HREF="#BuildingtheApplt" >Building the Applet</A>
<LI><A HREF="#TheFinishedApplt" >The Finished Applet</A>
</UL>
<LI><A HREF="#ComparingtheQuizMakerAppletwiththe" >Comparing the QuizMaker Applet with the RGB2Hex Applet</A>
<LI><A HREF="#TestingandDebugging" >Testing and Debugging</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
Java is a powerful language that is just now coming into its own.
If you've browsed the Web lately, you have probably seen applets
in action. Stop by Sun Microsystems's home page, the Gamelan Web
site, or thousands of other sites, and you will see applets come
to life right before your eyes. Although applets using Java-based
animation are great for their novelty and their capability to
call attention to something, they do not fully demonstrate Java's
power as a programming tool.
<P>
Beyond these beginning applets is the intermediate level of programming,
which has multiple connotations. Some believe it begins when a
programmer can write a program from scratch, while others contend
that it begins with the ability to understand code and modify
it to fit the circumstance.
<P>
For our purposes, the intermediate level begins when the programmer
can allow interaction with the reader. This interaction is the
key to distributed languages and the reason Java is getting so
much attention. Formerly, the only way to allow for any degree
of interaction across the Internet involved using CGI scripts
written in languages native to the computer that stored them.
Java is helping to change this while offering more power to a
wider audience.
<P>
To create a CGI script, you must be able to write code in a language
that the host computer can run. You also have to get permission
to place the program on the host computer. Many Internet service
providers (ISPs) have stopped giving this permission due to the
computer resources these scripts require and security concerns.
Java circumnavigates this issue by running its applets on the
client computer instead of on the host, which reduces demands
on the ISP's resources.
<P>
In this chapter you will construct two intermediate applets. These
applets display features that can be found in larger applets without
being overly lengthy or complex. The first applet, called <TT><FONT FACE="Courier">QuizMaker</FONT></TT>,
provides for a three-minute timer. Each step in building and testing
the applet is described in detail. The second applet converts
a color entered as three integers into a single number displayed
in hexadecimal. The applet called <TT><FONT FACE="Courier">RGB2Hex</FONT></TT>
lets you preview the associated color. The end of this chapter
gives some tips for debugging and provides a comparison of the
two applets. 
<H2><A NAME="ConceptualizationandDesignoftheQuiz"><FONT SIZE=5 COLOR=#Ff0000>Conceptualization
and Design of the </FONT><TT><FONT SIZE=5 COLOR=#Ff0000 FACE="Courier">QuizMaker</FONT></TT><FONT SIZE=5 COLOR=#Ff0000>
Applet</FONT></A></H2>
<P>
The first step in designing an applet in Java or any other language
is to have a good overall understanding of the tasks the applet
will perform and for what purpose the applet will be used. Your
goal is to create a detailed description of every object you will
need to build the applet. This detailed description should specify
the task or tasks the applet must perform without detailing how
those tasks are to be accomplished.
<P>
When you complete the specification, it is easier to visualize
how the applet will be presented to the user, what the applet
will be used for, and what the user will be required to do to
have the applet perform key tasks. Your specification may include
a specific screen layout. Making a pencil drawing can help in
determining all the pieces of information that need to be presented
and deciding on an attractive layout.
<P>
After sketching the layout of the applet, describe each object
in the applet in terms of its function. Many of these objects
appear on the screen and can be defined from the screen layout.
Other objects perform background tasks and are used to support
the objects that appear in front of the user. These objects can
be defined in terms of the tasks they perform. Don't worry if
you do not recognize all the objects required while designing
the applet. One of the advantages of an object-oriented language
is the simplicity with which new objects can be added to provide
functionality that was not considered during initial design.
<P>
The first applet you will build is called <TT><FONT FACE="Courier">QuizMaker</FONT></TT>.
The initial specification for <TT><FONT FACE="Courier">QuizMaker</FONT></TT>
follows:
<BLOCKQUOTE>
The <TT><FONT FACE="Courier">QuizMaker</FONT></TT> applet implements
a simple timer to notify the user when three minutes are up. The
user will press a button to start the timer. After the user starts
the timer, the applet will provide a text display and a sound
bite to indicate that the user should start the quiz. A different
text and another sound bite will indicate that the user should
stop. A picture will be included to enhance the visual appeal
of the applet. The applet is simple to create and yet gives you
experience working with the existing Java classes.
</BLOCKQUOTE>
<P>
You can use the <TT><FONT FACE="Courier">QuizMaker</FONT></TT>
applet for the following:
<UL>
<LI>Letting readers take a timed quiz in one of your documents
<LI>Letting readers track how far they can read in a certain time
interval
<LI>Letting readers stop and practice a task for a particular
length of time before they continue reading
<LI>Letting readers determine how long they have been working
on something
</UL>
<P>
Having described the tasks the applet will perform, you should
now describe the layout of the applet. The layout doesn't have
to be extravagant-a simple one drawn by hand is usually just fine.
To lay out the <TT><FONT FACE="Courier">QuizMaker</FONT></TT>
applet, draw the key objects the user would see on a piece of
paper:
<UL>
<LI>A picture of an hourglass
<LI>A button the user can click on to start the timer
<LI>An informational text label used to display messages, including
<TT><FONT FACE="Courier">Start</FONT></TT> and <TT><FONT FACE="Courier">Stop</FONT></TT>,
to the user
</UL>
<P>
Figure 14.1 shows the initial layout for the applet. The picture
of the hourglass is represented by the large rectangle on the
right side of the figure. The start button is represented by the
small rectangle in the lower left. Finally, the informational
text is placed just above the start button.
<P>
<A HREF="f14-1.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f14-1.gif" ><B>Figure 14.1 :</B> <I>Layout of the QuizMaker applet.</I></A>
<P>
The next step is to describe the applet in terms of objects. For
this example you will implement the applet using classes as they
exist in the Java API. This will keep the code short and easy
to follow. You implement the picture by creating an <TT><FONT FACE="Courier">Image</FONT></TT>
class object. The audio is provided using the <TT><FONT FACE="Courier">play()</FONT></TT>
method and supplying an appropriate audio file. The Java API also
includes <TT><FONT FACE="Courier">Button</FONT></TT> and <TT><FONT FACE="Courier">Label</FONT></TT>
classes, which are used for the button and the display, respectively.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Tip</B></TD></TR>
<TR><TD WIDTH=575>
<BLOCKQUOTE>
Finding the appropriate class for a given function can be a matter of searching the API, your memory, and larger projects' libraries of objects created by others. Which class is appropriate for which function becomes more apparent as you work with the API 
and existing classes.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H2><FONT SIZE=5 COLOR=#Ff0000><A NAME="DefiningtheAppletStructure1">Defining the Applet Structure</A></FONT>
</H2>
<P>
Defining a class for each object is only part of determining the
structure of the applet. Defining the applet structure also includes
determining what objects are present when the applet starts, when
new objects can be created, and how objects will communicate with
each other. The <TT><FONT FACE="Courier">Object</FONT></TT> superclass
can be used to create new classes; however, for many programs
there is a subclass already defined in Java that provides some
or all of the functionality required.
<P>
The easiest way to create an applet is to extend the <TT><FONT FACE="Courier">Applet</FONT></TT>
class, which, as defined in the Java API, includes all the methods
necessary for a working applet. The <TT><FONT FACE="Courier">QuizMaker</FONT></TT>
applet extends the <TT><FONT FACE="Courier">Applet</FONT></TT>
class to add the features described in the design. When the applet
is started, it creates the objects such as the button, label,
and picture. Because these objects are already defined by the
Java API, you will not have to reinvent the wheel and can completely
code the applet in only a few steps.
<P>
You still must define the communication between the objects. All
communication is between these objects and the <TT><FONT FACE="Courier">QuizMaker</FONT></TT>
object. The event handler in the <TT><FONT FACE="Courier">Applet</FONT></TT>
class will be modified in the <TT><FONT FACE="Courier">QuizMaker</FONT></TT>
class to start tracking time when the button is pressed. Two new
methods will be added to the <TT><FONT FACE="Courier">Applet</FONT></TT>
class: One will start the timer, and the other will stop it. When
the timer expires, the <TT><FONT FACE="Courier">QuizMaker</FONT></TT>
object will direct the label to change its text.
<P>
The design of the <TT><FONT FACE="Courier">QuizMaker</FONT></TT>
applet is kept simple to provide experience in working with the
<TT><FONT FACE="Courier">Applet</FONT></TT> class. <A HREF="ch16.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch16.htm" >Chapter 16</A>,
&quot;Applet Reuse,&quot; covers the redesign of the applet to
take advantage of multiple threads.
<H2><A NAME="BuildingtheApplet"><FONT SIZE=5 COLOR=#Ff0000>Building
the Applet</FONT></A></H2>
<P>
This section describes each step for building the <TT><FONT FACE="Courier">QuizMaker</FONT></TT>
applet. The comments before and after each section of code describe
what the code does and important aspects of the syntax. 
<H3><A NAME="Step1CreateanHTMLDocumenttoTest">Step 1: Create an
HTML Document to Test the Applet</A></H3>
<P>
The HTML document used to test the applet does not need to be
extensive. However, it should include all the required HTML structure
tags and display your applet prominently. Listing 14.1 is an example
of an HTML document for the <TT><FONT FACE="Courier">QuizMaker</FONT></TT>
applet.
<HR>
<BLOCKQUOTE>
<B>Listing 14.1. A sample HTML document.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;HTML&gt;<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt; Quiz Maker&lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
&lt;BODY&gt;<BR>
&lt;CENTER&gt;<BR>
&lt;H2&gt; The QuizMaker Applet &lt;/H2&gt;<BR>
&lt;H3&gt; Written with JAVA &lt;H3&gt;<BR>
&lt;HR&gt;<BR>
&lt;APPLET CODE=&quot;QuizMaker&quot; WIDTH=400 HEIGHT=300&gt;
<BR>
&lt;/APPLET&gt;<BR>
&lt;/CENTER&gt;<BR>
&lt;/BODY&gt;<BR>
&lt;/HTML&gt; </FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
With this document available for testing, you can begin to define
the classes in the <TT><FONT FACE="Courier">QuizMaker</FONT></TT>
applet. (<A HREF="ch15.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch15.htm" >See Chapter 15</A>, &quot;Creating
Java-Powered Web Presentations with Applets,&quot; for complete
details on creating HTML documents that use the <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT>
tag.)
<H3><A NAME="Step2CreateaFileContainingInclude">Step 2: Create
a File Containing Included Classes</A></H3>
<P>
Java source files must be named with the <TT><FONT FACE="Courier">.java</FONT></TT>
extension and in a source file named for its class. For this reason,
you should name the source code file for the new class <TT><FONT FACE="Courier">QuizMaker.java</FONT></TT>.
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=579>
<BLOCKQUOTE>
The Java compiler expects the source code to be in a file named with the <TT><FONT FACE="Courier">.java</FONT></TT> extension. When the source file contains multiple class declarations, the source file must be named after the primary class declaration. For 
applications, the primary class is the class that contains the <TT><FONT FACE="Courier">main()</FONT></TT> method. For applets, the primary class is the class that contains the <TT><FONT FACE="Courier">init()</FONT></TT> and <TT><FONT 
FACE="Courier">run()</FONT></TT> methods.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Because the <TT><FONT FACE="Courier">QuizMaker</FONT></TT> applet
uses existing Java classes, you must let the Java runtime environment
know it must include these classes. This is done with the <TT><FONT FACE="Courier">import</FONT></TT>
statement. In all, the <TT><FONT FACE="Courier">QuizMaker</FONT></TT>
applet makes use of four packages: <TT><FONT FACE="Courier">java.applet</FONT></TT>,
<TT><FONT FACE="Courier">java.util</FONT></TT>, <TT><FONT FACE="Courier">java.net</FONT></TT>,
and <TT><FONT FACE="Courier">java.awt</FONT></TT>.<TT><FONT FACE="Courier">
</FONT></TT>The code to include these four packages follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.applet.*;<BR>
import java.util.*;<BR>
import java.net.*;<BR>
import java.awt.*;<BR>
</FONT></TT>
</BLOCKQUOTE>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Technical Note</B></TD></TR>
<TR><TD WIDTH=585>
<BLOCKQUOTE>
Although you could be more specific and include only the classes you will actually be referencing, most applets make extensive use of the packages they import. For this reason, most programmers make the entire class available for importing on demand to 
prevent an extensive listing of classes. It is important to remember that the asterisk indicates that all classes in the package are to be made available and can be imported on demand. If you don't use the asterisk, the runtime environment will return an 
error indicating that the class to import could not be found. It is likewise important to include the semicolon at the end of each statement, or the compiler will generate an error.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="Step3DeclaringtheQuizMakerClass">Step 3: Declaring
the <TT><FONT SIZE=4 FACE="Courier">QuizMaker</FONT></TT><FONT SIZE=4>
Class</FONT></A></H3>
<P>
Now that all the existing classes you need are available, you
can begin to create new classes. The following line of code creates
the new class <TT><FONT FACE="Courier">QuizMaker</FONT></TT> as
an extension of the <TT><FONT FACE="Courier">Applet</FONT></TT>
class. The <TT><FONT FACE="Courier">Applet</FONT></TT> class is
public; the <TT><FONT FACE="Courier">QuizMaker</FONT></TT> class
will be as well. This means that other classes can create an instance
of the <TT><FONT FACE="Courier">QuizMaker</FONT></TT> class. It
also allows the runtime environment to create an instance of the
class. The code is as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class QuizMaker extends Applet
{</FONT></TT>
</BLOCKQUOTE>
<P>
The brace at the end of the line is significant. All the extensions
to the <TT><FONT FACE="Courier">Applet</FONT></TT> class must
fall between the brace at the end of this line and its corresponding
closing brace. In this case, the closing brace will be at the
end of the applet code. In fact, you could put a brace on the
following line, compile this code, and test it in your HTML file.
It will appear as an empty box in the HTML document.
<H3><A NAME="Step4AddingClassVariables">Step 4: Adding Class Variables</A>
</H3>
<P>
After declaring a new class, add code to the class so that it
has some functionality beyond displaying an empty box. The applet
should specify instance variables for each object you are adding
to the class. Although instance variables must be declared outside
the methods of the class and are usually placed at the beginning
of the class, they can be placed anywhere before the method where
they are used. The instance variable declaration lines for <TT><FONT FACE="Courier">QuizMaker</FONT></TT>
look like the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Image HglassImage; // Displays a picture
of an hour glass<BR>
Button&nbsp;&nbsp;RunButton; // Lets the user start the timer
<BR>
Label&nbsp;&nbsp; StatusLabel; // Displays the status to the user
<BR>
URL HglassURL;&nbsp;&nbsp;// URL of the applet</FONT></TT>
</BLOCKQUOTE>
<P>
The first line declares an <TT><FONT FACE="Courier">Image</FONT></TT>
object to hold the picture to be displayed to the user. The second
line declares a <TT><FONT FACE="Courier">Button</FONT></TT> object,
which enables the user to start the timer. The third declaration
provides a read-only text area to display messages to the user.
The final declaration provides a location for storing the URL
of the applet.
<P>
The code can now be recompiled to test the syntax of these declarations.
If you run the code again, note that there is no apparent change
to the display. In the next step you will create methods that
will modify the display.
<H3><A NAME="Step5DefinetheMethods">Step 5: Define the Methods</A>
</H3>
<P>
All methods for a class must be included in the file prior to
the closing brace that ends the class. This section details each
method and recommends an order for coding and testing the methods
used in the <TT><FONT FACE="Courier">QuizMaker</FONT></TT> class.
Several of the existing <TT><FONT FACE="Courier">Applet</FONT></TT>
class methods are overridden in the <TT><FONT FACE="Courier">QuizMaker</FONT></TT>
class. Two new methods, <TT><FONT FACE="Courier">runTimer</FONT></TT>
and <TT><FONT FACE="Courier">stopTimer</FONT></TT>, are also added.
<H4>Step 5a: Define the <TT><FONT FACE="Courier">init()</FONT></TT>
Method</H4>
<P>
When the runtime environment loads the applet, it will run the
<TT><FONT FACE="Courier">init()</FONT></TT> method before executing
the applet. This method is used to set up the screen size and
create objects that are needed throughout the life of the applet.
The <TT><FONT FACE="Courier">init()</FONT></TT> method must be
coded so that the other methods have objects with which to work.
After the <TT><FONT FACE="Courier">init()</FONT></TT> method is
created, you can recompile and see the resulting changes when
you run the applet. The code for the <TT><FONT FACE="Courier">init()</FONT></TT>
method is shown in Listing 14.2.
<HR>
<BLOCKQUOTE>
<B>Listing 14.2. The </B><TT><B><FONT FACE="Courier">QuizMaker</FONT></B></TT><B>
class </B><TT><B><FONT FACE="Courier">init()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void init() {<BR>
&nbsp;HglassURL = getCodeBase();&nbsp;&nbsp;&nbsp;// Gets the
URL for the applet<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Get the picture to add to the screen<BR>
 HglassImage = getImage(HglassURL,&quot;Hglass.gif&quot;);<BR>
<BR>
&nbsp;//&nbsp;Add a label to display text which can not be altered
by the user<BR>
 add(StatusLabel = new Label(&quot;Press Run to start timer&quot;));
<BR>
<BR>
&nbsp;//&nbsp;Add a button to start the timer<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(RunButton = new Button(&quot;Run&quot;));
<BR>
<BR>
&nbsp;&nbsp;resize(400,300);&nbsp;&nbsp;&nbsp;// Resizes the applet
<BR>
&nbsp;paint(getGraphics());&nbsp;&nbsp;&nbsp;// Display applet
with the objects on the screen<BR>
<BR>
&nbsp;play(HglassURL,&quot;intro.au&quot;);&nbsp;&nbsp;// Play
an intro<BR>
&nbsp;play(HglassURL,&quot;startTimer.au&quot;);&nbsp;&nbsp;//
Play the start message<BR>
&nbsp;play(HglassURL,&quot;endTimer.au&quot;);&nbsp;&nbsp;// Play
the end message<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
This <TT><FONT FACE="Courier">init()</FONT></TT> method overrides
the <TT><FONT FACE="Courier">init()</FONT></TT> method that was
originally defined for the <TT><FONT FACE="Courier">Applet</FONT></TT>
class and is public, so it can be called by other objects. Creating
a public method is necessary so that the runtime environment can
call it. <TT><FONT FACE="Courier">void</FONT></TT> indicates that
the method does not return a value.
<P>
The first action in this method is to get the base URL, or location
on the file system, for the applet. The URL is stored because
it is a required value for many of the methods used in <TT><FONT FACE="Courier">init()</FONT></TT>
and the other methods in this class. Using the URL, the <TT><FONT FACE="Courier">getImage()</FONT></TT>
method is invoked to create an <TT><FONT FACE="Courier">Image</FONT></TT>
object from the picture stored in the file <TT><FONT FACE="Courier">Hglass.gif</FONT></TT>.
The identifier for this <TT><FONT FACE="Courier">Image</FONT></TT>
object is <TT><FONT FACE="Courier">HglassImage</FONT></TT>, which
was declared as part of the class because the identifier will
be needed when the class is drawn on the screen.
<P>
The next two lines of code use the <TT><FONT FACE="Courier">add()</FONT></TT>
method to add objects to the applet. This method is part of the
API for the <TT><FONT FACE="Courier">Applet</FONT></TT> class
and makes it easy to add a new object to the applet. The first
use of <TT><FONT FACE="Courier">add()</FONT></TT> inserts a label
object and sets the initial display to the string <TT><FONT FACE="Courier">&quot;Press
Run to start timer&quot;</FONT></TT>. The second use of <TT><FONT FACE="Courier">add()</FONT></TT>
inserts the button with the title Run. These objects are added
at initialization so that they are presented to the user when
the applet first appears. The objects will remain in existence
for the life of the applet.
<P>
Because <TT><FONT FACE="Courier">QuizMaker</FONT></TT> is an extension
of the <TT><FONT FACE="Courier">Applet</FONT></TT> class, the
<TT><FONT FACE="Courier">resize</FONT></TT> method of the <TT><FONT FACE="Courier">Applet</FONT></TT>
class is used in the next line to set the size of the applet to
400<FONT FACE="Symbol">&#165;</FONT>300. This will have an effect
only if the size is not set by the browser. The screen is then
drawn using the <TT><FONT FACE="Courier">paint()</FONT></TT> method.
The <TT><FONT FACE="Courier">paint()</FONT></TT> method will be
overridden to draw the objects and images associated with the
<TT><FONT FACE="Courier">QuizMaker</FONT></TT> class, but it still
must be passed the graphic on which to draw them. This is done
by invoking the <TT><FONT FACE="Courier">getGraphic()</FONT></TT>
method. Notice that the methods can be combined.
<P>
The last three lines play an introductory audio clip and the two
audio clips that will be used at the beginning and end of the
timer. The <TT><FONT FACE="Courier">play()</FONT></TT> method
is available as part of the <TT><FONT FACE="Courier">Applet</FONT></TT>
class. It requires a URL and a filename. It looks for the file
specified in the directory obtained from the URL. Playing all
three audio clips is not really necessary, but the first time
the audio clips are played there is a time delay that is inappropriate
for use with the timer. Therefore, if you play them once in the
introduction, they will sound appropriate when they are played
later in the applet.
<H4>Step 5b: Define the <TT><FONT FACE="Courier">paint</FONT></TT>
Method</H4>
<P>
Like the <TT><FONT FACE="Courier">init() </FONT></TT>method, the
<TT><FONT FACE="Courier">paint()</FONT></TT> method from the <TT><FONT FACE="Courier">Applet</FONT></TT>
class is overridden to provide different functionality for the
<TT><FONT FACE="Courier">QuizMaker</FONT></TT> class. The <TT><FONT FACE="Courier">paint()</FONT></TT>
method that you are creating is called in place of the one originally
defined for the <TT><FONT FACE="Courier">Applet</FONT></TT> class.
Specifically, the <TT><FONT FACE="Courier">paint()</FONT></TT>
method is called when the program starts so that it can draw all
the objects added during the initialization phase. In the <TT><FONT FACE="Courier">QuizMaker</FONT></TT>
class the <TT><FONT FACE="Courier">paint</FONT></TT> method draws
the <TT><FONT FACE="Courier">HglassImage</FONT></TT> on the screen,
as well as the button and the label. The code for this method
is shown in Listing 14.3.
<HR>
<BLOCKQUOTE>
<B>Listing 14.3. The </B><TT><B><FONT FACE="Courier">QuizMaker</FONT></B></TT><B>
class </B><TT><B><FONT FACE="Courier">paint()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void paint(Graphics g) {<BR>
&nbsp;g.drawImage(HglassImage,250,10,this); // Draw the hour glass
<BR>
<BR>
&nbsp;StatusLabel.resize(150,20);&nbsp;&nbsp;// Resizes the label
<BR>
&nbsp;StatusLabel.move(10,10);&nbsp;&nbsp;// Moves the label<BR>
<BR>
&nbsp;RunButton.resize(100,20);&nbsp;&nbsp;// Resizes the button
<BR>
&nbsp;RunButton.move(20,40);&nbsp;&nbsp;&nbsp;// Moves the button
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The methods used to draw the image and manipulate the button and
label are all part of the Java API. Using the <TT><FONT FACE="Courier">drawImage()</FONT></TT>
method makes it easy to place the GIF image exactly where you
want it on the applet. The other objects can be resized and moved
to precise locations as well. So now you have completed the methods
that affect the screen layout, but you need to create methods
to run the timer.
<H4>Step 5c: Define the <TT><FONT FACE="Courier">runTimer()</FONT></TT>
Method</H4>
<P>
The timer itself is run from the <TT><FONT FACE="Courier">runTimer()</FONT></TT>
method. The <TT><FONT FACE="Courier">runTimer()</FONT></TT> method
is invoked when the user presses the button on the screen. When
the button is pressed, a message indicating that the user should
get ready is displayed and an audio clip telling the user to get
ready and to start is played. When the audio clip stops, the displayed
message is changed to indicate that the user should start.
<P>
The <TT><FONT FACE="Courier">runTimer()</FONT></TT> method is
responsible for storing the start time, which is created as a
<TT><FONT FACE="Courier">date</FONT></TT> object. The method converts
the hours, minutes, and seconds of the start time to seconds.
The value in seconds of the start time is stored in a local variable.
This value is passed to the method that checks for the timer being
expired. For more robustness, the day could be included in this
value. The code for these activities is displayed in Listing 14.4.
<HR>
<BLOCKQUOTE>
<B>Listing 14.4. The </B><TT><B><FONT FACE="Courier">QuizMaker</FONT></B></TT><B>
class </B><TT><B><FONT FACE="Courier">runTimer()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/* Lets the user know to start,<BR>
&nbsp;saves the start time and checks for time up */<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected void runTimer() {<BR>
&nbsp;Date&nbsp;&nbsp;StartTime;&nbsp;&nbsp;&nbsp;&nbsp;// Holds
the time the timer started<BR>
&nbsp;int&nbsp;&nbsp;startSec;&nbsp;&nbsp;&nbsp;&nbsp;// Start
time in seconds<BR>
<BR>
&nbsp;// Let the user know to get ready<BR>
&nbsp;StatusLabel.setText(&quot;Get the hour glass ready.&quot;);
<BR>
&nbsp;play(HglassURL,&quot;startTimer.au&quot;);&nbsp;&nbsp;//
Play the start message<BR>
&nbsp;StartTime = new Date();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Get the starting time<BR>
<BR>
&nbsp;// Let the user know to start<BR>
&nbsp;StatusLabel.setText(&quot;Time is slipping away.&quot;);
<BR>
<BR>
&nbsp;// Calculate the start time in seconds<BR>
// Get the number of seconds<BR>
&nbsp;startSec = StartTime.getSeconds();<BR>
// Convert minutes to seconds and add<BR>
&nbsp;startSec += (StartTime.getMinutes() * 60);<BR>
//&nbsp;Convert hours to seconds and add<BR>
startSec += (StartTime.getHours() * 60 * 60);<BR>
<BR>
&nbsp;while (!stopTimer(startSec)) {}// Loop looking for the time
up<BR>
<BR>
&nbsp;// Inform the user time is up<BR>
&nbsp;StatusLabel.setText(&quot;The hour glass is empty!&quot;);
<BR>
&nbsp;play(HglassURL,&quot;endTimer.au&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The first line of the <TT><FONT FACE="Courier">runTimer()</FONT></TT>
method is protected so that it cannot be run by an arbitrary object;
only the <TT><FONT FACE="Courier">QuizMaker</FONT></TT> class
and its subclasses have access to the <TT><FONT FACE="Courier">runTimer()</FONT></TT>
method. Currently, there are no other classes in the applet that
use this method. However, if the applet is included as part of
a larger project, creating the method as protected maintains the
encapsulation expected in object-oriented programming. <TT><FONT FACE="Courier">void</FONT></TT>
following <TT><FONT FACE="Courier">protected</FONT></TT> indicates
that the method does not return any values. The next word, <TT><FONT FACE="Courier">runTimer</FONT></TT>,
is the name of the method.
<P>
The next two lines declare the instance variables <TT><FONT FACE="Courier">StartTime</FONT></TT>
and <TT><FONT FACE="Courier">startSec</FONT></TT>. <TT><FONT FACE="Courier">StartTime</FONT></TT>
is a local instance of the <TT><FONT FACE="Courier">Date</FONT></TT>
object. It is declared locally because none of the other methods
need to access these values, so there is no reason to share them.
It is an object because that is what is returned by the <TT><FONT FACE="Courier">Date()</FONT></TT>
constructor. The variable <TT><FONT FACE="Courier">startSec</FONT></TT>
is declared as an integer value. This variable stores the time
value of the <TT><FONT FACE="Courier">StartTime</FONT></TT> object
converted to seconds. This variable is created locally and then
passed to the <TT><FONT FACE="Courier">EndTimer</FONT></TT> method.
The advantage of passing the variable as opposed to making it
available to the entire class is that it prevents accidental manipulation
of this important value.
<P>
The next line displays new text to the user using the <TT><FONT FACE="Courier">StatusLabel</FONT></TT>
object. The text of the label can be changed while the program
is running using the <TT><FONT FACE="Courier">setText()</FONT></TT>
method of the <TT><FONT FACE="Courier">Label</FONT></TT> class
so that it can be used for displaying the computed value. To call
this method for the correct object, the applet must have a name
to reference the object.
<P>
The audio clip is played in the same manner as it was in the <TT><FONT FACE="Courier">init()</FONT></TT>
method. The URL object is defined at the class level, so it is
available in this method. The audio clip instructs the user to
get ready for the timer to start and then says Go.
<P>
The constructor <TT><FONT FACE="Courier">Date()</FONT></TT> is
used to create a new <TT><FONT FACE="Courier">Date</FONT></TT>
object. Used without parameters as it is here, constructor returns
a <TT><FONT FACE="Courier">Date</FONT></TT> object containing
the current time and date. This object is then designated as <TT><FONT FACE="Courier">StartTime</FONT></TT>.
<P>
Next, the text <TT><FONT FACE="Courier">Time is slipping away.</FONT></TT>
is displayed to the user on the <TT><FONT FACE="Courier">Label</FONT></TT>
object. The label displayed to the user is modified by the same
means in several places. The text is modified using the <TT><FONT FACE="Courier">SetText(text)</FONT></TT>
method of the <TT><FONT FACE="Courier">Label</FONT></TT> class.
This method takes the new text as a parameter and causes the <TT><FONT FACE="Courier">StatusLabel</FONT></TT>
object to display it. Note that this does not create a new object,
nor does it modify the text directly. <TT><FONT FACE="Courier">SetText(text)</FONT></TT>
instructs the <TT><FONT FACE="Courier">Label</FONT></TT> object,
in this case, <TT><FONT FACE="Courier">StatusLabel</FONT></TT>,
to change its own text.
<P>
The starting time in seconds is then calculated. First, the <TT><FONT FACE="Courier">getSeconds()</FONT></TT>
method of the <TT><FONT FACE="Courier">Date</FONT></TT> class
is used to get the seconds value in the starting time. This value
is stored in the <TT><FONT FACE="Courier">startSec</FONT></TT>
variable. Second, the <TT><FONT FACE="Courier">getMinutes()</FONT></TT>
method returns the minutes value from the starting time. The number
of minutes is multiplied by 60 to get the number of seconds, which
is added to the value in <TT><FONT FACE="Courier">startSec</FONT></TT>
using the <TT><FONT FACE="Courier">+=</FONT></TT> operator. This
operator is used again to add the number of seconds to the starting
time.
<P>
The method then loops, calling the <TT><FONT FACE="Courier">stopTimer(int)</FONT></TT>
method. This method returns <TT><FONT FACE="Courier">false</FONT></TT>
when the current time is less than three minutes after the time
passed to it. It returns <TT><FONT FACE="Courier">true</FONT></TT>
if the current time is more than three minutes after the time
passed to it. The loop continues until the <TT><FONT FACE="Courier">stopTimer(int)</FONT></TT>
method returns <TT><FONT FACE="Courier">true</FONT></TT>. In <A HREF="ch16.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch16.htm" >Chapter 16</A>
you will modify the <TT><FONT FACE="Courier">QuizMaker</FONT></TT>
applet so that it will pause and wait for time to pass, but this
loop will suffice for the present example.
<P>
When the <TT><FONT FACE="Courier">stopTimer(int)</FONT></TT> method
returns <TT><FONT FACE="Courier">true</FONT></TT>, the remainder
of the <TT><FONT FACE="Courier">runTimer()</FONT></TT> method
is executed. It changes the label to indicate to the user that
the hourglass is empty. It also plays an audio clip to the user
to indicate that the timer has expired.
<H4>Step 5d: Define the <TT><FONT FACE="Courier">stopTimer()</FONT></TT>
Method</H4>
<P>
As described previously, the <TT><FONT FACE="Courier">stopTimer()</FONT></TT>
method checks to see if the current time is more than 180 seconds
after the time passed in as a parameter. If this condition is
true, the method returns <TT><FONT FACE="Courier">true</FONT></TT>;
otherwise, it returns <TT><FONT FACE="Courier">false</FONT></TT>.
The code for the <TT><FONT FACE="Courier">stopTimer()</FONT></TT>
method is shown in Listing 14.5.
<HR>
<BLOCKQUOTE>
<B>Listing 14.5. The </B><TT><B><FONT FACE="Courier">QuizMaker</FONT></B></TT><B>
class </B><TT><B><FONT FACE="Courier">stopTimer()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/* Checks the current system time to
determine if 180 seconds has<BR>
&nbsp;elapsed since start */<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean stopTimer(int startSec)
{<BR>
&nbsp;int stopSec;<BR>
<BR>
&nbsp;Date StopTime = new Date();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Get the new time<BR>
&nbsp;stopSec = StopTime.getSeconds(); // Get the number of seconds
<BR>
// Convert minutes to seconds and add<BR>
&nbsp;stopSec += (StopTime.getMinutes() * 60);<BR>
// Convert hours to seconds and add<BR>
&nbsp;stopSec += (StopTime.getHours() * 60 * 60);<BR>
&nbsp;if ((stopSec - startSec) &gt; 180) {<BR>
&nbsp;&nbsp;return true;&nbsp;&nbsp; // True means time has elapsed
<BR>
&nbsp;} else {<BR>
&nbsp;&nbsp;return false;&nbsp;&nbsp; // False means time has
not elapsed<BR>
&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">stopTimer()</FONT></TT> method is
protected because it would not make sense for another object to
find out that the timer had expired. Only this object knows the
start time, so only this object can do a valid comparison. The
method returns a boolean value, so <TT><FONT FACE="Courier">boolean</FONT></TT>
is placed between <TT><FONT FACE="Courier">protected</FONT></TT>
and the method name.
<P>
After the method name, the type of the input variable is listed
in parentheses. The integer input is expected to be the time,
in seconds, when the timer was started. This could have been made
a class variable of the <TT><FONT FACE="Courier">QuizMaker</FONT></TT>
class. However, that would have made it available to change by
any method in the class, and only <TT><FONT FACE="Courier">runTimer()</FONT></TT>
really needs to change the value. Because only <TT><FONT FACE="Courier">stopTimer()</FONT></TT>
needs to read it, the value is passed in as a parameter.
<P>
In the lines after the declaration, <TT><FONT FACE="Courier">stopTimer()</FONT></TT>
gets the current time and converts it to seconds in the same manner
as <TT><FONT FACE="Courier">runTimer()</FONT></TT>. It then uses
an <TT><FONT FACE="Courier">if</FONT></TT> statement to determine
when the difference in the number of seconds is greater than 180,
meaning that more than three minutes have elapsed. Depending on
the results of the <TT><FONT FACE="Courier">if</FONT></TT> statement,
the boolean value <TT><FONT FACE="Courier">true</FONT></TT> or
<TT><FONT FACE="Courier">false</FONT></TT> is returned. Note that
each must be stated explicitly and must follow the word <TT><FONT FACE="Courier">return</FONT></TT>.
<P>
You have now finished all the methods that control the screen
display and the timer. You still need to create a method that
calls the <TT><FONT FACE="Courier">runTimer()</FONT></TT> method.
Keep in mind that the timer is started when the button is pressed.
Pressing the button is a user event, so the next method you will
define is the event handler.
<H4>Step 5e: Define the <TT><FONT FACE="Courier">handleEvent()</FONT></TT>
Method</H4>
<P>
The <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
is triggered by the runtime environment when a user, or other
outside force, triggers an event. <I>Events </I>include activities
such as a button being pressed or a window being resized. Events
that are not handled by the method defined here will be handled
by the <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
in one of the superclasses, such as the <TT><FONT FACE="Courier">Applet</FONT></TT>
class. In this sense the <TT><FONT FACE="Courier">handleEvent()</FONT></TT>
method is being extended, not overridden. The code for the method
is shown in Listing 14.6.
<HR>
<BLOCKQUOTE>
<B>Listing 14.6. The </B><TT><B><FONT FACE="Courier">QuizMaker</FONT></B></TT><B>
class </B><TT><B><FONT FACE="Courier">handleEvent()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/* Event handler to detect when the button
on the window is pressed */<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleEvent(Event e) {
<BR>
// If the window is closed end the program<BR>
&nbsp;if (e.id == Event.WINDOW_DESTROY) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);<BR>
&nbsp;}<BR>
// If the button is pressed start timer<BR>
&nbsp;if (e.target instanceof Button) {<BR>
&nbsp;&nbsp;runTimer();&nbsp;&nbsp;&nbsp;&nbsp;// Start the timer
<BR>
&nbsp;&nbsp;return true;&nbsp;&nbsp;&nbsp;// Return true so super
does not act on event<BR>
&nbsp;}<BR>
&nbsp;return false;&nbsp;&nbsp;&nbsp;&nbsp;// Return false so
super can act on event<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;//The final brace ends the QuizMaker class<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
is public because this method will be invoked from the runtime
environment. The method will return <TT><FONT FACE="Courier">true</FONT></TT>
if it successfully handles the event and <TT><FONT FACE="Courier">false</FONT></TT>
otherwise; therefore, a boolean return value is specified. The
name <TT><FONT FACE="Courier">handleEvent</FONT></TT> is followed
by the input declaration. The event is passed an <TT><FONT FACE="Courier">Event</FONT></TT>
object named <TT><FONT FACE="Courier">e</FONT></TT>.
<P>
In the first <TT><FONT FACE="Courier">if</FONT></TT> statement,
the event handler checks to see if <TT><FONT FACE="Courier">e</FONT></TT>
is caused by the window being closed by checking the <TT><FONT FACE="Courier">id</FONT></TT>
property of the <TT><FONT FACE="Courier">Event</FONT></TT> object.
If the window is being closed, this property will be equal to
<TT><FONT FACE="Courier">WINDOW_DESTROY</FONT></TT>, and the class
exits using the <TT><FONT FACE="Courier">System.exit(0)</FONT></TT>
method. Otherwise, the <TT><FONT FACE="Courier">handleEvent()</FONT></TT>
method checks for the button being pressed.
<P>
The <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
determines that a button is being pressed by checking the target
property of the <TT><FONT FACE="Courier">Event</FONT></TT> object.
If this property is a button, it means a button is being pressed.
There is only one button in the <TT><FONT FACE="Courier">QuizMaker</FONT></TT>
applet, so the <TT><FONT FACE="Courier">runTimer()</FONT></TT>
method is triggered to run the timer. When it can handle the event,
the <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
returns <TT><FONT FACE="Courier">true</FONT></TT>. If an event
other than the two events handled here should occur, the method
will return <TT><FONT FACE="Courier">false</FONT></TT> and allow
the <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
in a superclass to respond to the event.
<H3><A NAME="Step6CompiletheApplet">Step 6: Compile the Applet</A>
</H3>
<P>
Now that all the methods have been created, you can compile the
completed applet. But before doing so, be sure that your path
includes the directory containing the Java compiler, as specified
in <A HREF="ch2.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch2.htm" >Chapter 2</A>, &quot;Getting Started with
the JDK.&quot; When you compile the <TT><FONT FACE="Courier">QuizMaker.java</FONT></TT>
file, the Java compiler will create the <TT><FONT FACE="Courier">QuizMaker.class</FONT></TT>
file, which the runtime environment can load. When your applet
has successfully compiled, you can view it using your World Wide
Web browser or the Java applet viewer.
<P>
To compile <TT><FONT FACE="Courier">QuizMaker</FONT></TT> using
a graphical compiler, follow these steps:
<OL>
<LI>Drop the <TT><FONT FACE="Courier">QuizMaker.java</FONT></TT>
file onto the compiler or select Open from the compiler's File
menu.
<LI>Place the compiled output file called <TT><FONT FACE="Courier">QuizMaker.class</FONT></TT>
in the same directory as the source.
</OL>
<P>
To compile <TT><FONT FACE="Courier">QuizMaker</FONT></TT> using
a command-line compiler, follow these steps:
<OL>
<LI>Change to the directory containing the source code and type
the following at the command prompt:
<BR><TT><FONT FACE="Courier">javac QuizMaker.java</FONT></TT>
<LI>Place the compiled output file, called <TT><FONT FACE="Courier">QuizMaker.class</FONT></TT>,
in the same directory as the source.
</OL>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=581>
<BLOCKQUOTE>
The <TT><FONT FACE="Courier">javac</FONT></TT> command invokes the Java compiler. Note that you must pass the compiler the entire filename, including the <TT><FONT FACE="Courier">.java</FONT></TT> extension. Also note that the name is case sensitive. If 
you do not pass the full filename with the correct extension in the correct case, the compiler will return an error saying it could not find your file.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="TheFinishedApplet">The Finished Applet</A></H3>
<P>
Figure 14.2 shows the finished applet. Although this applet is
a somewhat contrived example that extends only one class, it should
give you practice in creating an applet and using some of the
Java classes. The next applet example is more complex and will
give you experience working with multiple objects in an applet.
<P>
<A HREF="f14-2.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f14-2.gif" ><B>Figure 14.2 :</B> <I>The QuizMaker applet.</I></A>
<P>
The full text of the completed applet is shown in Listing 14.7.
After successfully compiling and running the <TT><FONT FACE="Courier">QuizMaker</FONT></TT>
applet, as shown earlier, try modifying some of the parameters
to see the results. For example, lengthen or shorten the wait
time, change the sizes of the objects, and move the objects to
other locations. You might also try adding pictures, text, or
buttons. This will give you practice in working with objects in
Java before you move on to the next applet.
<HR>
<BLOCKQUOTE>
<B>Listing 14.7. The </B><TT><B><FONT FACE="Courier">QuizMaker</FONT></B></TT><B>
applet.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
import java.applet.*;<BR>
import java.util.*;<BR>
import java.net.*;<BR>
<BR>
/**<BR>
&nbsp;* Peter Norton's&nbsp;&nbsp;Guide to Programming Java *
The QuizMaker Applet<BR>
&nbsp;* Acts as a three minute timer. Plays an audio message to
start and<BR>
&nbsp;* displays a start message. Plays an audio message at the
end with<BR>
&nbsp;* another display message.<BR>
&nbsp;*/<BR>
<BR>
public class QuizMaker extends Applet {<BR>
Image&nbsp;&nbsp;HglassImage; // Displays a picture of an hour
glass<BR>
Button&nbsp;&nbsp;RunButton; // Lets the user start the timer
<BR>
Label&nbsp;&nbsp;&nbsp;StatusLabel; // Displays the status to
the user<BR>
URL&nbsp;&nbsp;HglassURL; // URL of the applet<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void init() {<BR>
&nbsp;&nbsp;&nbsp;// Get the picture to add to the screen<BR>
&nbsp;HglassImage = getImage(getCodeBase(),&quot;Hglass.gif&quot;);
<BR>
<BR>
&nbsp;// Add a label to display text which can not be altered
by the user<BR>
&nbsp;add(StatusLabel = new Label(&quot;Press Run to start timer&quot;));
<BR>
<BR>
&nbsp;// Add a button to start the timer<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(RunButton = new Button(&quot;Run&quot;));
<BR>
<BR>
&nbsp;&nbsp;resize(400,300);&nbsp;&nbsp;&nbsp;&nbsp;// Resizes
the applet<BR>
&nbsp;paint(getGraphics());&nbsp;&nbsp;&nbsp;// Display applet
with the objects on the screen<BR>
<BR>
&nbsp;HglassURL = getCodeBase();&nbsp;&nbsp;&nbsp;// Gets the
URL for the applet<BR>
&nbsp;play(HglassURL,&quot;intro.au&quot;);&nbsp;&nbsp;// Play
an intro<BR>
&nbsp;play(HglassURL,&quot;startTimer.au&quot;);&nbsp;&nbsp;//
Play the start message<BR>
&nbsp;play(HglassURL,&quot;endTimer.au&quot;);&nbsp;&nbsp;// Play
the end message<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void paint(Graphics g) {<BR>
&nbsp;g.drawImage(HglassImage,250,10,this); // Draw the hour glass
<BR>
<BR>
&nbsp;StatusLabel.resize(150,20);&nbsp;&nbsp;// Resizes the label
<BR>
&nbsp;StatusLabel.move(10,10);&nbsp;&nbsp;// Moves the label<BR>
<BR>
&nbsp;RunButton.resize(100,20);&nbsp;&nbsp;// Resizes the button
<BR>
&nbsp;RunButton.move(20,40);&nbsp;&nbsp; // Moves the button<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/* Lets the user know to start, saves
the start time<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and checks for time
up */<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected void runTimer() {<BR>
&nbsp;Date&nbsp;&nbsp;StartTime;&nbsp;&nbsp;&nbsp;&nbsp;// Holds
the time the timer started<BR>
&nbsp;int&nbsp;&nbsp;startSec;&nbsp;&nbsp;&nbsp;&nbsp;// Start
time in seconds<BR>
<BR>
&nbsp;// Let the user know to get ready<BR>
&nbsp;StatusLabel.setText(&quot;Get the hour glass ready.&quot;);
<BR>
&nbsp;play(HglassURL,&quot;startTimer.au&quot;);&nbsp;&nbsp;//
Play the start message<BR>
&nbsp;StartTime = new Date();&nbsp;&nbsp; // Get the starting
time<BR>
<BR>
&nbsp;// Let the user know to start<BR>
&nbsp;StatusLabel.setText(&quot;Time is slipping away.&quot;);
<BR>
<BR>
&nbsp;// Calculate the start time in seconds<BR>
&nbsp;startSec = StartTime.getSeconds(); // Get the number of
seconds<BR>
&nbsp;startSec += (StartTime.getMinutes() * 60); // Add # of minutes
times 60<BR>
<BR>
&nbsp;while (!stopTimer(startSec)) {} // Loop looking for the
time up<BR>
<BR>
&nbsp;// Inform the user the hour glass is empty<BR>
&nbsp;StatusLabel.setText(&quot;The hour glass is empty!&quot;);
<BR>
&nbsp;play(HglassURL,&quot;endTimer.au&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/* Checks the current system time to determine
if 180 seconds<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;has elapsed since start
*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean stopTimer(int startSec)
{<BR>
&nbsp;int stopSec;<BR>
<BR>
&nbsp;Date StopTime = new Date();&nbsp;&nbsp;// Get the new time
<BR>
&nbsp;stopSec = StopTime.getSeconds(); // Get the number of seconds
<BR>
&nbsp;stopSec += (StopTime.getMinutes() * 60); // Add # of minutes
times 60<BR>
&nbsp;if ((stopSec - startSec) &gt; 180) {<BR>
&nbsp;&nbsp;return true;&nbsp;&nbsp;&nbsp;// True means time has
elapsed<BR>
&nbsp;} else {<BR>
&nbsp;&nbsp;return false;&nbsp;&nbsp;&nbsp;// False means time
has not elapsed<BR>
&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/* Event handler to detect when the button
on the window is pressed */<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleEvent(Event e) {
<BR>
&nbsp;int myint;<BR>
// If the window is closed end the program<BR>
&nbsp;if (e.id == Event.WINDOW_DESTROY) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;}<BR>
// If the button is pressed start timer<BR>
&nbsp;if (e.target instanceof Button) {<BR>
&nbsp;&nbsp;runTimer();&nbsp;&nbsp;&nbsp;&nbsp;// Start the timer
<BR>
&nbsp;&nbsp;return true;&nbsp;&nbsp; // Return true so super does
not act on event<BR>
&nbsp;}<BR>
&nbsp;return false;&nbsp;&nbsp;&nbsp;&nbsp;// Return false so
super can act on event<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H2><A NAME="CreatingaSecondApplet"><FONT SIZE=5 COLOR=#Ff0000>Creating
a Second Applet</FONT></A></H2>
<P>
The second applet you create in this chapter is actually a new
version of a CGI script that has been used on the Internet for
some time. It converts a set of red, green, and blue (RGB) integer
values into a single hex number. The conversion of RGB values
to hex numbers is important on the World Wide Web because solid-color
backgrounds are entered into HTML documents in hex. An added twist
here is enabling readers to see the color displayed as a result
of the RGB values they enter; this shows just some of what is
possible with Java.
<P>
This applet, <TT><FONT FACE="Courier">RGB2Hex</FONT></TT>, introduces
several complexities not found in the <TT><FONT FACE="Courier">QuizMaker</FONT></TT>
applet. <TT><FONT FACE="Courier">RGB2Hex</FONT></TT> shows how
multiple classes can be extended in the same Java file and how
multiple objects in the same applet can communicate with one another.
<TT><FONT FACE="Courier">RGB2Hex</FONT></TT> also shows how some
of the objects you used in the previous example can be used in
different ways. As you go along, feel free to add to or modify
the <TT><FONT FACE="Courier">RGB2Hex</FONT></TT> applet to suit
your taste.
<H3><A NAME="ConceptualizationandDesignoftheAppl">Conceptualization
and Design of the Applet</A></H3>
<P>
As with the first applet, this section describes how to progress
from an initial description of the applet to a complete design.
The specification for the <TT><FONT FACE="Courier">RGB2Hex</FONT></TT>
applet is rather simple:
<BLOCKQUOTE>
The applet allows the user to enter values for the red, green,
and blue components of a color. When the user finishes entering
these values, the applet displays the corresponding color and
the hexadecimal value for the color.
</BLOCKQUOTE>
<P>
By expanding this definition, you will see that the applet has
three fields for entering numbers, each with an appropriate label.
The applet needs a place to display the hexadecimal result, and
a portion of the screen must be available to display the color.
The user must have a means to indicate that new numbers have been
entered and that the applet should display the new color and hexadecimal
value by using a button labeled Display. Given this information,
you can construct a screen layout.
<P>
Figure 14.3 shows the initial layout for the applet. To keep the
applet short, the screen layout is a simple rectangle with the
top used for data entry and the bottom used to display the color.
There is a button to indicate that the user has finished entering
data in the middle with the display field for the hexadecimal
value to the right of it.
<P>
<A HREF="f14-3.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f14-3.gif" ><B>Figure 14.3 :</B> <I>Screen layout for the RGB2Hex applet.</I></A>
<P>
The layout shown here could be divided into objects in many ways.
In fact, you could create the entire applet as an instance of
one object again. However, the code is easier to understand if
you group the objects on the screen into an object containing
controls and an object for the color display.
<P>
The field to display the results could be considered a separate
object, but for simplicity it is created as part of the controls.
This object also contains the labels, text entry fields, and display
button, all of which are themselves objects. This completes the
design of the applet, and you can move on to define the structure.
<H3><A NAME="DefiningtheAppletStructure">Defining the Applet Structure</A>
</H3>
<P>
As with the previous example, you must define which objects are
present when the applet starts, when new objects are created,
and how objects will communicate with each other. For the <TT><FONT FACE="Courier">RGB2Hex</FONT></TT>
applet, multiple existing Java classes are extended to provide
the classes needed. Unlike the previous example, the <TT><FONT FACE="Courier">RGB2Hex</FONT></TT>
applet extends multiple classes, and the objects created must
interface with one another.
<P>
The existing <TT><FONT FACE="Courier">Canvas</FONT></TT> class
is extended and used to display the color desired. <TT><FONT FACE="Courier">Canvas</FONT></TT>
supplies a constructor to create the object and a <TT><FONT FACE="Courier">paint</FONT></TT>
method to paint the background with the default background color.
<TT><FONT FACE="Courier">Canvas</FONT></TT> is generic and can
be subclassed to provide a place to display the color the user
has entered. It is extended so that the values entered by the
user are stored as part of the object.
<P>
The <TT><FONT FACE="Courier">paint</FONT></TT> method from the
<TT><FONT FACE="Courier">Canvas</FONT></TT> class is overridden.
The new <TT><FONT FACE="Courier">paint()</FONT></TT> method colors
the object using the three internal values. A <TT><FONT FACE="Courier">redraw</FONT></TT>
method is added to update the internal values and call the <TT><FONT FACE="Courier">paint</FONT></TT>
method. The <TT><FONT FACE="Courier">redraw</FONT></TT> method
also returns the hexadecimal value for the color displayed.
<P>
The object for the controls is created by extending the <TT><FONT FACE="Courier">Panel</FONT></TT>
class, a generic container that can be used to hold other objects
and display them in various ways on the screen. For the purpose
of this applet, the object must hold three labels, three text
entry fields, one button, and one display field. Each of these
items is an object that will be created using existing classes.
The objects are displayed in a standard grid layout. (The <TT><FONT FACE="Courier">GridLayout</FONT></TT>
is also an object defined in Java.)
<P>
Now that each object has been described, you must determine how
they are created. The <TT><FONT FACE="Courier">RGB2Hex</FONT></TT>
applet is an extension of the <TT><FONT FACE="Courier">Applet</FONT></TT>
class. This class includes an <TT><FONT FACE="Courier">init()</FONT></TT>
method, which is called when the applet is created, as well as
the <TT><FONT FACE="Courier">canvas</FONT></TT> and the <TT><FONT FACE="Courier">panel</FONT></TT>,
which are created as part of the <TT><FONT FACE="Courier">init()</FONT></TT>
method for the applet. There is no need to create more than one
instance of these objects as part of this applet.
<P>
The interactions between the objects are straightforward. When
the button is pushed, the new color is displayed and the new hexadecimal
value appears. To do this, the values entered in the text entry
fields are passed to the <TT><FONT FACE="Courier">canvas</FONT></TT>
object. Either the <TT><FONT FACE="Courier">canvas</FONT></TT>
object or the <TT><FONT FACE="Courier">control</FONT></TT> object
could calculate the hexadecimal value; in this case, it is the
<TT><FONT FACE="Courier">canvas</FONT></TT> object. This value
must be returned to the controls for display.
<H3><A NAME="BuildingtheApplt">Building the Applet</A></H3>
<P>
Now that you have completed the structure of the applet, you can
begin to actually build it. Although the construction of the code
is not broken into separate steps as the first example, this section
does provide a detailed description of each portion of the code.
The <TT><FONT FACE="Courier">RGB2Hex</FONT></TT> applet extends
the <TT><FONT FACE="Courier">Applet</FONT></TT> class and creates
several accompanying classes. The code for each class is presented
and a brief description of how the class works is given.
<H4>Creating the <TT><FONT FACE="Courier">RGB2Hex</FONT></TT>
Class</H4>
<P>
The <TT><FONT FACE="Courier">Applet</FONT></TT> class is extended
to create the <TT><FONT FACE="Courier">RGB2Hex</FONT></TT> class,
as shown in Listing 14.8. This class is responsible for creating
additional objects and enabling the controls. The overall layout
is the Java standard <TT><FONT FACE="Courier">BorderLayout</FONT></TT>.
This allows for placement of objects in North, South, East, West,
and Center locations. The two objects you are creating for this
applet will be in the North and Center locations. As part of initialization,
the <TT><FONT FACE="Courier">add()</FONT></TT> method is used
to add the canvas and the controls to the frame. When the applet
starts, it goes through initialization and then enables the controls.
Then it adds itself to the frame and resizes the frame to 300<FONT FACE="Symbol">&#165;</FONT>300.
<HR>
<BLOCKQUOTE>
<B>Listing 14.8. The </B><TT><B><FONT FACE="Courier">RGB2Hex</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class RGB2Hex extends Applet {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;RGBcontrols controls;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void init() {<BR>
&nbsp;setLayout(new BorderLayout());<BR>
&nbsp;RGBcanvas c = new RGBcanvas();<BR>
&nbsp;add(&quot;Center&quot;, c);<BR>
&nbsp;add(&quot;North&quot;, controls = new RGBcontrols(c));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void doColor() {<BR>
&nbsp;controls.enable();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void stop() {<BR>
&nbsp;controls.disable();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleEvent(Event e) {
<BR>
&nbsp;if (e.id == Event.WINDOW_DESTROY) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);<BR>
&nbsp;}<BR>
&nbsp;return false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
This completes the <TT><FONT FACE="Courier">RGB2Hex</FONT></TT>
class. However, this applet has been designed to use multiple
classes. These classes can all be created in the same <TT><FONT FACE="Courier">.java</FONT></TT>
file. The remainder of this section describes the other classes.
<H4>Creating the <TT><FONT FACE="Courier">RGBcanvas</FONT></TT>
Class</H4>
<P>
The second class to create is the <TT><FONT FACE="Courier">RGBcanvas</FONT></TT>
class, as shown in Listing 14.9. This class is called in the second
line of the <TT><FONT FACE="Courier">init()</FONT></TT> method
in the <TT><FONT FACE="Courier">RGB2Hex</FONT></TT> class to create
the object <TT><FONT FACE="Courier">c</FONT></TT>. This object
displays the color on the basis of the values entered by the user.
The class is created by extending the <TT><FONT FACE="Courier">Canvas</FONT></TT>
class, which is part of the Java API.
<P>
The <TT><FONT FACE="Courier">RGBcanvas</FONT></TT> class stores
the three values the color is created from and the color value.
The three RGB values are stored as integers. The color is stored
as a <TT><FONT FACE="Courier">Color</FONT></TT> object that is
returned by the Java method <TT><FONT FACE="Courier">Color(int,
int, int)</FONT></TT> in the <TT><FONT FACE="Courier">Color</FONT></TT>
class, which encapsulates the RGB colors.
<P>
Three <TT><FONT FACE="Courier">Color</FONT></TT> constructors
can be used to create a <TT><FONT FACE="Courier">Color</FONT></TT>
object. The constructor used here takes the red, green, and blue
values as separate integer parameters. The other constructors
allow the red, green, and blue values to be specified as portions
of a single integer or a floating-point value.
<P>
Two methods of the original <TT><FONT FACE="Courier">Canvas</FONT></TT>
are replaced. A new <TT><FONT FACE="Courier">paint()</FONT></TT>
method overrides the <TT><FONT FACE="Courier">paint()</FONT></TT>
method defined in the <TT><FONT FACE="Courier">Canvas</FONT></TT>
class. A new <TT><FONT FACE="Courier">redraw()</FONT></TT> method
replaces the existing <TT><FONT FACE="Courier">Canvas</FONT></TT>
class <TT><FONT FACE="Courier">redraw()</FONT></TT> method.
<P>
The new <TT><FONT FACE="Courier">paint()</FONT></TT> method colors
the canvas using the three values, which are internal to the <TT><FONT FACE="Courier">RGBcanvas</FONT></TT>
class. It uses the <TT><FONT FACE="Courier">bounds</FONT></TT>
method for the <TT><FONT FACE="Courier">Rectangle</FONT></TT>
class to determine the size of the rectangle to color. The method
creates a new color using the three values stored internally and
then stores this value in the internal variable <TT><FONT FACE="Courier">createColor</FONT></TT>.
Then <TT><FONT FACE="Courier">paint()</FONT></TT> sets the default
color for the <TT><FONT FACE="Courier">RGBcanvas</FONT></TT> to
the newly created color and paints a rectangle the size of the
<TT><FONT FACE="Courier">RGBcanvas</FONT></TT>.
<P>
The <TT><FONT FACE="Courier">redraw()</FONT></TT> method is created
to load the numbers it receives as inputs into the internal values
of the object. It then calls the <TT><FONT FACE="Courier">repaint()</FONT></TT>
method to color the object. <TT><FONT FACE="Courier">repaint()</FONT></TT>
is defined in the <TT><FONT FACE="Courier">Component</FONT></TT>
class and inherited by the <TT><FONT FACE="Courier">Canvas</FONT></TT>
class. It calls <TT><FONT FACE="Courier">paint</FONT></TT> to
repaint the <TT><FONT FACE="Courier">Canvas</FONT></TT>. After
calling the <TT><FONT FACE="Courier">repaint()</FONT></TT> method,
<TT><FONT FACE="Courier">redraw()</FONT></TT> creates a hexadecimal
value based on the values entered by the user and returns it to
the calling method.
<HR>
<BLOCKQUOTE>
<B>Listing 14.9. The </B><TT><B><FONT FACE="Courier">RGBcanvas</FONT></B></TT><B>
class first draft.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">class RGBcanvas extends Canvas {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;RedValue = 12;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;GreenValue = 156;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;blueValue = 88;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Color&nbsp;&nbsp;createColor;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;HexString;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;HexFinal;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void paint(Graphics g) {<BR>
&nbsp;Rectangle r = bounds();<BR>
<BR>
&nbsp;createColor = new Color(RedValue, GreenValue, blueValue);
<BR>
&nbsp;g.setColor(createColor);<BR>
&nbsp;g.fillRect(0,0,r.width,r.height);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String redraw(int red, int green,
int blue) {<BR>
&nbsp;String HexString;<BR>
<BR>
&nbsp;this.RedValue = red;<BR>
&nbsp;this.GreenValue = green;<BR>
&nbsp;this.blueValue = blue;<BR>
&nbsp;repaint();<BR>
&nbsp;HexString = Integer.toString(red,16);<BR>
&nbsp;while (HexString.length() &lt; 2)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HexString = &quot;0&quot; + HexString;
<BR>
&nbsp;HexFinal = HexString.toUpperCase();<BR>
<BR>
&nbsp;HexString = Integer.toString(green,16);<BR>
&nbsp;while (HexString.length() &lt; 2)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HexString = &quot;0&quot; + HexString;
<BR>
&nbsp;HexFinal = HexFinal + HexString.toUpperCase();<BR>
<BR>
&nbsp;HexString = Integer.toString(blue,16);<BR>
&nbsp;while (HexString.length() &lt; 2)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HexString = &quot;0&quot; + HexString;
<BR>
&nbsp;HexFinal = HexFinal + HexString.toUpperCase();<BR>
<BR>
&nbsp;return HexFinal;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
This code will work but is difficult to read because of the complicated
conversion used to create the hexadecimal string. To simplify
this code, the <TT><FONT FACE="Courier">redraw</FONT></TT> method
needs an easy way to convert from an integer in base 10 to hex.
You could use the <TT><FONT FACE="Courier">toString</FONT></TT>
method of the <TT><FONT FACE="Courier">Integer</FONT></TT> class
to do the conversion, but this does not give the exact format
desired. The <TT><FONT FACE="Courier">redraw</FONT></TT> method
must be sure the string returned has two characters and that the
letters are uppercase.
<H4>Creating the <TT><FONT FACE="Courier">HexInt</FONT></TT> Class
</H4>
<P>
The simplest way to provide the conversion needed is to create
a new class called <TT><FONT FACE="Courier">HexInt</FONT></TT>,
as shown in Listing 14.10. This class stores an integer and returns
its value as a hexadecimal. The method <TT><FONT FACE="Courier">toHexString(int)</FONT></TT>
will return a string with the number of characters specified in
the input parameter. The method uses the <TT><FONT FACE="Courier">while</FONT></TT>
statement to check that the string has fewer characters than the
input.
<HR>
<BLOCKQUOTE>
<B>Listing 14.10. The </B><TT><B><FONT FACE="Courier">HexInt</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">class HexInt {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int HInt;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public HexInt(int AnInteger){<BR>
&nbsp;HInt = AnInteger;<BR>
}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String toHexString(int StrLen)
{<BR>
&nbsp;String HexString;<BR>
<BR>
&nbsp;HexString = Integer.toString(HInt,16);<BR>
&nbsp;while (HexString.length() &lt; StrLen)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HexString = &quot;0&quot; + HexString;
<BR>
&nbsp;return HexString.toUpperCase();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
This class simplifies the <TT><FONT FACE="Courier">redraw</FONT></TT>
method in the <TT><FONT FACE="Courier">RGBcanvas</FONT></TT> class.
The <TT><FONT FACE="Courier">HexInt</FONT></TT> class also allows
the hexadecimal result to be calculated with a single assignment
statement.
<H4>Error Handling for <TT><FONT FACE="Courier">RGBcanvas</FONT></TT>
</H4>
<P>
You can further enhance the <TT><FONT FACE="Courier">RGBcanvas</FONT></TT>
class by adding error handling. Despite the label giving the valid
range, there is always the possibility that a user will enter
values outside the valid range. If the values entered exceed the
acceptable limits, the applet should return an error message.
<P>
Error checking could be added to the controls to prevent the applet
from invoking the <TT><FONT FACE="Courier">redraw()</FONT></TT>
method when the user enters invalid values. However, the <TT><FONT FACE="Courier">redraw()</FONT></TT>
method could be invoked from some other location that could also
supply an incorrect value. Therefore, error checking is added
to the <TT><FONT FACE="Courier">Canvas</FONT></TT> class in the
<TT><FONT FACE="Courier">redraw()</FONT></TT> method.
<P>
The <TT><FONT FACE="Courier">redraw()</FONT></TT> method must
check that each of its inputs is valid. In this case, valid inputs
are numbers between 0 and 255. If <TT><FONT FACE="Courier">redraw()</FONT></TT>
receives an input outside this range, it must return an error
string instead of the hexadecimal string and leave the color of
the canvas unchanged. The error string used here is <TT><FONT FACE="Courier">&quot;Learn
to count&quot;</FONT></TT>, but you can use any string. The method
uses an <TT><FONT FACE="Courier">if</FONT></TT> statement to check
for integers outside the range. The double pipe symbols <TT><FONT FACE="Courier">||</FONT></TT>
represent the logical <TT><FONT FACE="Courier">OR</FONT></TT>
operator. Here's the code for error checking the red color value:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">if ((red &lt; 0) || (red &gt; 255)) {
<BR>
&nbsp;&nbsp;return &quot;Learn to count&quot;;<BR>
 }</FONT></TT>
</BLOCKQUOTE>
<P>
All three error checks could be combined into one <TT><FONT FACE="Courier">if</FONT></TT>
statement. However, they are separated for clarity's sake. When
the caller receives the message back from the <TT><FONT FACE="Courier">Canvas</FONT></TT>
object, it does not know whether the color changed. The caller
simply displays the text string in the block provided and allows
the user to decide what to do next. It is up to the user to determine
that the input values were outside the specified range and to
enter new values. However, incorrect values do not cause the program
to abort, nor do they affect any other part of the program.
<P>
This method of error checking does not handle the possibility
that the user may enter text instead of a number. If text is entered,
the <TT><FONT FACE="Courier">parseInt()</FONT></TT> method will
generate an error. This will not be returned to the user, but
because of the object-oriented nature of Java, this type of error
will not cause a problem for the running applet. Although it is
not needed for the users of this applet, code could be added to
check each entry prior to converting it to an integer.
<P>
The final <TT><FONT FACE="Courier">RGBcanvas</FONT></TT> class
using the <TT><FONT FACE="Courier">HexInt</FONT></TT> class and
including error handling is shown in Listing 14.11.
<HR>
<BLOCKQUOTE>
<B>Listing 14.11. The revised </B><TT><B><FONT FACE="Courier">RGBcanvas</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">class RGBcanvas extends Canvas {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;RedValue = 12;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;GreenValue = 156;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp; blueValue = 88;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Color&nbsp;&nbsp;createColor;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void paint(Graphics g) {<BR>
&nbsp;Rectangle r = bounds();<BR>
<BR>
&nbsp;createColor = new Color(RedValue, GreenValue, blueValue);
<BR>
&nbsp;g.setColor(createColor);<BR>
&nbsp;g.fillRect(0,0,r.width,r.height);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String redraw(int red, int green,
int blue) {<BR>
&nbsp;String HexString;<BR>
<BR>
&nbsp;this.RedValue = red;<BR>
&nbsp;this.GreenValue = green;<BR>
&nbsp;this.blueValue = blue;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((red &lt; 0) || (red &gt; 255)){
<BR>
&nbsp;&nbsp;return &quot;Learn to count&quot;;<BR>
&nbsp;}<BR>
&nbsp;if ((green &lt; 0) || (green &gt; 255)){<BR>
&nbsp;&nbsp;return &quot;Learn to count&quot;;<BR>
&nbsp;}<BR>
&nbsp;if ((blue &lt; 0) || (blue &gt; 255)){<BR>
&nbsp;&nbsp;return &quot;Learn to count&quot;;<BR>
&nbsp;}<BR>
&nbsp;repaint();<BR>
&nbsp;HexString = new HexInt(red).toHexString(2) + new HexInt(green).toHexString(2)
<BR>
&Acirc;+ new HexInt(blue).toHexString(2);<BR>
&nbsp;return HexString;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Now that the display on the canvas looks good, you must create
a class to operate the controls you provide for the user. 
<H4>Creating the <TT><FONT FACE="Courier">RGBcontrols</FONT></TT>
Class</H4>
<P>
The <TT><FONT FACE="Courier">RGBcontrols</FONT></TT> class shown
in Listing 14.12 provides a place for data entry and display.
The control extends the existing <TT><FONT FACE="Courier">Panel</FONT></TT>
class. The class contains eight objects arranged in a grid pattern.
<TT><FONT FACE="Courier">GridLayout</FONT></TT> allows the developer
to specify a certain number of rows and columns. In this case,
there are four rows and two columns. The grid is filled from left
to right and from top to bottom. Each of the objects it contains
are instances of defined Java objects.
<P>
<TT><FONT FACE="Courier">TextField</FONT></TT> enables the user
to edit a single line of text. The class has four possible constructors.
The constructor used here takes a single string parameter and
uses it as the initialization string for the new field. The <TT><FONT FACE="Courier">TextField</FONT></TT>
class is a subclass of <TT><FONT FACE="Courier">TextComponent</FONT></TT>,
which supplies a <TT><FONT FACE="Courier">getText()</FONT></TT>
method that returns text in the <TT><FONT FACE="Courier">TextComponent</FONT></TT>.
Because each field must be referenced individually to retrieve
the values the user enters, the objects are given identifiers
that are internal to the <TT><FONT FACE="Courier">Panel</FONT></TT>
class: <TT><FONT FACE="Courier">redField</FONT></TT>, <TT><FONT FACE="Courier">greenField</FONT></TT>,
and <TT><FONT FACE="Courier">blueField</FONT></TT>.
<P>
The labels for the data entry fields are created using the <TT><FONT FACE="Courier">Label</FONT></TT>
class from the Java API. The <TT><FONT FACE="Courier">Label</FONT></TT>
class displays a single line of read-only text. The class allows
for the alignment to be specified as <TT><FONT FACE="Courier">LEFT</FONT></TT>,
<TT><FONT FACE="Courier">RIGHT</FONT></TT>, or <TT><FONT FACE="Courier">CENTER</FONT></TT>.
In this case, the default alignment, <TT><FONT FACE="Courier">LEFT</FONT></TT>,
is used. The labels for the text entry fields are placed to the
left of the fields themselves. The applet does not need to update
these objects, so they are not explicitly named. They are created
using the <TT><FONT FACE="Courier">new</FONT></TT> command when
they are added to the <TT><FONT FACE="Courier">RGBcontrols</FONT></TT>
object.
<P>
The object used to display the hexadecimal code is called <TT><FONT FACE="Courier">HexValue</FONT></TT>
and is declared as part of the <TT><FONT FACE="Courier">RGBcontrols</FONT></TT>
class. It must be explicitly named so that it can be referred
to and its <TT><FONT FACE="Courier">setText()</FONT></TT> method
invoked to change the display value. The value returned from the
<TT><FONT FACE="Courier">RGBcanvas</FONT></TT> class <TT><FONT FACE="Courier">redraw()</FONT></TT>
method is used as input to the <TT><FONT FACE="Courier">setText()</FONT></TT>
method.
<P>
The button used to signal that the user has finished entering
new values and would like to see the results is created using
the <TT><FONT FACE="Courier">Button</FONT></TT> class from the
Java API. This is another object that the applet does not need
to update. Therefore, the object does not need a name and is created
when it is added to the layout. Here, the button is created as
an instance of the class <TT><FONT FACE="Courier">Button</FONT></TT>.
This class supplies a constructor, which takes a string parameter
and uses it as the label for the button.
<P>
Only one method in the <TT><FONT FACE="Courier">Canvas</FONT></TT>
class must be overridden: the <TT><FONT FACE="Courier">action()</FONT></TT>
method, which is defined in the <TT><FONT FACE="Courier">Component</FONT></TT>
class and triggered any time an action occurs in a component.
There is only one action to which the applet responds in this
class-pressing the button. If there were multiple actions, you
could use a <TT><FONT FACE="Courier">switch</FONT></TT> statement
to determine which action had occurred.
<P>
In this case, an <TT><FONT FACE="Courier">if</FONT></TT> statement
at the beginning of the method checks for the triggering event
(pressing a button). There is only one button in the object, so
there is no need to determine which button was pressed. If additional
buttons were added, the method could use a <TT><FONT FACE="Courier">switch</FONT></TT>
statement to determine which button was pressed by checking the
label of the button that triggered the event.
<P>
When the button is pressed, the <TT><FONT FACE="Courier">action()</FONT></TT>
method uses the <TT><FONT FACE="Courier">getText()</FONT></TT>
method to get the strings in the text fields. <TT><FONT FACE="Courier">action()</FONT></TT>
then uses the <TT><FONT FACE="Courier">trim()</FONT></TT> method,
defined as part of the <TT><FONT FACE="Courier">String</FONT></TT>
class, to remove any whitespace from around the text. Next, <TT><FONT FACE="Courier">action()</FONT></TT>
creates integers from the strings using the <TT><FONT FACE="Courier">parseInt()</FONT></TT>
method. To do this, it must create an instance of the <TT><FONT FACE="Courier">Integer</FONT></TT>
object for each string.
<P>
When the conversion is complete, <TT><FONT FACE="Courier">action()</FONT></TT>
passes the resulting integers to the <TT><FONT FACE="Courier">redraw()</FONT></TT>
method of the <TT><FONT FACE="Courier">Canvas</FONT></TT> object.
The string returned from <TT><FONT FACE="Courier">redraw()</FONT></TT>
is displayed by the <TT><FONT FACE="Courier">HexValue</FONT></TT>
object using the <TT><FONT FACE="Courier">setText()</FONT></TT>
method, defined as part of the <TT><FONT FACE="Courier">TextComponent</FONT></TT>
class, of which <TT><FONT FACE="Courier">TextField</FONT></TT>
is a subclass.
<HR>
<BLOCKQUOTE>
<B>Listing 14.12. The </B><TT><B><FONT FACE="Courier">RGBcontrols</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">class RGBcontrols extends Panel {<BR>
&nbsp;&nbsp;&nbsp;TextField redField; /* Field to enter the value
for red */<BR>
&nbsp;&nbsp;&nbsp;TextField greenField; /* Field to enter the
value for green */<BR>
&nbsp;&nbsp;&nbsp;TextField blueField; /* Field to enter the value
for blue */<BR>
&nbsp;&nbsp;&nbsp;Label HexValue; /* Location to display the hex
value */<BR>
&nbsp;&nbsp;&nbsp;&nbsp;RGBcanvas canvas;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public RGBcontrols(RGBcanvas canvas) {
/* primary method declaration */<BR>
&nbsp;setLayout(new GridLayout(4,2));<BR>
&nbsp;this.canvas = canvas;<BR>
&nbsp;add(new Label(&quot;RED&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enter
0 to 255&quot;));<BR>
&nbsp;add(redField = new TextField(&quot;12&quot;));<BR>
&nbsp;add(new Label(&quot;GREEN&nbsp;&nbsp;&nbsp;Enter 0 to 255&quot;));
<BR>
&nbsp;add(greenField&nbsp;&nbsp;= new TextField(&quot;156&quot;));
<BR>
&nbsp;add(new Label(&quot;BLUE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enter
0 to 255&quot;));<BR>
&nbsp;add(blueField = new TextField(&quot;88&quot;));<BR>
&nbsp;add(new Button(&quot;Display&quot;));<BR>
&nbsp;add(HexValue = new Label(&quot;&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean action(Event ev, Object
arg) {<BR>
&nbsp;if (ev.target instanceof Button) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HexValue.setText(canvas.redraw(
<BR>
&nbsp;&nbsp;Integer.parseInt(redField.getText().trim()),<BR>
&nbsp;&nbsp;Integer.parseInt(greenField.getText().trim()),<BR>
&nbsp;&nbsp;Integer.parseInt(blueField.getText().trim())));<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;}<BR>
<BR>
&nbsp;return false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
This completes the creation of the classes needed for the <TT><FONT FACE="Courier">RGB2Hex</FONT></TT>
applet. The next section provides all the code needed to create
the applet in its final form.
<H3><A NAME="TheFinishedApplt">The Finished Applet</A></H3>
<P>
Figure 14.4 shows how the <TT><FONT FACE="Courier">RGB2Hex</FONT></TT>
applet looks in the Netscape Navigator. For additional practice
in modifying Java objects, you might move the display box for
the hex number from the <TT><FONT FACE="Courier">RGBcontrols</FONT></TT>
object to the <TT><FONT FACE="Courier">RGBcanvas</FONT></TT> object.
Be sure to modify the paint of the canvas so the rectangle that
changes color does not cover the text field displaying the hexadecimal
number.
<P>
<A HREF="f14-4.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/f14-4.gif" ><B>Figure 14.4 :</B> <I>The RGB2Hex applet in Netscape.</I></A>
<P>
The complete text for the <TT><FONT FACE="Courier">RGB2Hex</FONT></TT>
applet is shown in Listing 14.13. When you compile the source
code for the applet, one class file will be created for each declared
class. To run the applet, name the <TT><FONT FACE="Courier">RGB2Hex</FONT></TT>
class in the <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT>
tag of an HTML document. The <TT><FONT FACE="Courier">RGB2Hex</FONT></TT>
class calls the other class files when they are needed.
<HR>
<BLOCKQUOTE>
<B>Listing 14.13. The </B><TT><B><FONT FACE="Courier">RGB2Hex</FONT></B></TT><B>
applet.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
import java.applet.*;<BR>
<BR>
/**<BR>
&nbsp;* Peter Norton's&nbsp;&nbsp;Guide to Java Programming *
The RGB2Hex Applet<BR>
&nbsp;* Converts Red, Green, and Blue values entered by the user
to a<BR>
&nbsp;* hexidecimal color code and displays the color. Can be
run either<BR>
&nbsp;* as a standalone application by typing &quot;java RGB2Hex&quot;
or as an applet.<BR>
&nbsp;*/<BR>
<BR>
public class RGB2Hex extends Applet {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;RGBcontrols controls;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;TextField test1;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void init() {<BR>
&nbsp;setLayout(new BorderLayout());<BR>
&nbsp;RGBcanvas c = new RGBcanvas();<BR>
&nbsp;add(&quot;Center&quot;, c);<BR>
&nbsp;add(&quot;North&quot;, controls = new RGBcontrols(c));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void doColor() {<BR>
&nbsp;controls.enable();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void stop() {<BR>
&nbsp;controls.disable();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleEvent(Event e) {
<BR>
&nbsp;if (e.id == Event.WINDOW_DESTROY) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;}<BR>
&nbsp;return false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String args[])
{<BR>
&nbsp;Frame f = new Frame(&quot;RGB2Hex&quot;);<BR>
&nbsp;RGB2Hex RGB2Hex = new RGB2Hex();<BR>
<BR>
&nbsp;RGB2Hex.init();<BR>
&nbsp;RGB2Hex.doColor();<BR>
<BR>
&nbsp;f.add(&quot;Center&quot;, RGB2Hex);<BR>
&nbsp;f.resize(300, 300);<BR>
&nbsp;f.show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}<BR>
<BR>
/* Provides a hexidecimal representation of an integer */<BR>
class HexInt {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int HInt;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public HexInt(int AnInteger){<BR>
&nbsp;HInt = AnInteger;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String toHexString(int StrLen)
{<BR>
&nbsp;String HexString;<BR>
<BR>
&nbsp;HexString = Integer.toString(HInt,16);<BR>
&nbsp;while (HexString.length() &lt; StrLen)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HexString = &quot;0&quot; + HexString;
<BR>
&nbsp;return HexString.toUpperCase();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}<BR>
<BR>
/* Provides an object to display a color */<BR>
class RGBcanvas extends Canvas {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;RedValue = 12;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;GreenValue = 156;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;blueValue = 88;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Color&nbsp;&nbsp;createColor;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void paint(Graphics g) {<BR>
&nbsp;Rectangle r = bounds();<BR>
<BR>
&nbsp;createColor = new Color(RedValue, GreenValue, blueValue);
<BR>
&nbsp;g.setColor(createColor);<BR>
&nbsp;g.fillRect(0,0,r.width,r.height);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String redraw(int red, int green,
int blue) {<BR>
&nbsp;String HexString;<BR>
<BR>
&nbsp;this.RedValue = red;<BR>
&nbsp;this.GreenValue = green;<BR>
&nbsp;this.blueValue = blue;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((red &lt; 0) || (red &gt; 255)){
<BR>
&nbsp;&nbsp;return &quot;Learn to count&quot;;<BR>
&nbsp;}<BR>
&nbsp;if ((green &lt; 0) || (green &gt; 255)){<BR>
&nbsp;&nbsp;return &quot;Learn to count&quot;;<BR>
&nbsp;}<BR>
&nbsp;if ((blue &lt; 0) || (blue &gt; 255)){<BR>
&nbsp;&nbsp;return &quot;Learn to count&quot;;<BR>
&nbsp;}<BR>
&nbsp;repaint();<BR>
&nbsp;HexString = new HexInt(red).toHexString(2) + new HexInt(green).toHexString(2)
<BR>
&nbsp;&Acirc;+ new HexInt(blue).toHexString(2);<BR>
&nbsp;return HexString;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}<BR>
<BR>
/* Provides for user entry of RGB values and displays hexidecimal
*/<BR>
class RGBcontrols extends Panel {<BR>
&nbsp;&nbsp;&nbsp;TextField redField; /* Field to enter the value
for red */<BR>
&nbsp;&nbsp;&nbsp;TextField greenField;/* Field to enter the value
for green */<BR>
&nbsp;&nbsp;&nbsp;TextField blueField; /* Field to enter the value
for blue */<BR>
&nbsp;&nbsp;&nbsp;Label HexValue; /* Location to display the hex
value */<BR>
&nbsp;&nbsp;&nbsp;&nbsp;RGBcanvas canvas;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public RGBcontrols(RGBcanvas canvas) {
/* primary method declaration */<BR>
&nbsp;setLayout(new GridLayout(4,2));<BR>
&nbsp;this.canvas = canvas;<BR>
&nbsp;add(new Label(&quot;RED&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enter
0 to 255&quot;));<BR>
&nbsp;add(redField = new TextField(&quot;12&quot;, 4));<BR>
&nbsp;add(new Label(&quot;GREEN&nbsp;&nbsp;&nbsp;Enter 0 to 255&quot;));
<BR>
&nbsp;add(greenField&nbsp;&nbsp;= new TextField(&quot;156&quot;,
4));<BR>
&nbsp;add(new Label(&quot;BLUE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enter
0 to 255&quot;));<BR>
&nbsp;add(blueField = new TextField(&quot;88&quot;,4));<BR>
&nbsp;add(new Button(&quot;Display&quot;));<BR>
&nbsp;add(HexValue = new Label(&quot;&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean action(Event ev, Object
arg) {<BR>
&nbsp;if (ev.target instanceof Button) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HexValue.setText(canvas.redraw(
<BR>
&nbsp;&nbsp;Integer.parseInt(redField.getText().trim()),<BR>
&nbsp;&nbsp;Integer.parseInt(greenField.getText().trim()),<BR>
&nbsp;&nbsp;Integer.parseInt(blueField.getText().trim())));<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;}<BR>
<BR>
&nbsp;return false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H2><A NAME="ComparingtheQuizMakerAppletwiththe"><FONT SIZE=5 COLOR=#Ff0000>Comparing
the </FONT><TT><FONT SIZE=5 COLOR=#Ff0000 FACE="Courier">QuizMaker</FONT></TT><FONT SIZE=5 COLOR=#Ff0000>
Applet with the </FONT><TT><FONT SIZE=5 COLOR=#Ff0000 FACE="Courier">RGB2Hex</FONT></TT><FONT SIZE=5 COLOR=#Ff0000>
Applet</FONT></A></H2>
<P>
The <TT><FONT FACE="Courier">RGB2Hex</FONT></TT> applet has some
similarities to the <TT><FONT FACE="Courier">QuizMaker</FONT></TT>
applet. Both are created by extending the Java <TT><FONT FACE="Courier">Applet</FONT></TT>
class. Some of the same classes, buttons, and labels are used
in both applets, although they appear different on the display.
Both applets depend on the <TT><FONT FACE="Courier">init()</FONT></TT>
method to create additional objects. Both applets trap and handle
user events.
<P>
The applets each demonstrate different points. The first example
illustrates that applets do not have to define multiple new classes.
The second example shows that objects can be created, used, and
displayed without being explicitly named. It also demonstrates
how multiple objects in an applet can work together without one
having to create the other.
<P>
The overall organization in each applet is different as well.
The <TT><FONT FACE="Courier">QuizMaker</FONT></TT> applet, containing
a single class, leaves the handling of events up to that class.
The <TT><FONT FACE="Courier">RGB2Hex</FONT></TT> applet divides
the work better because it has three classes. The controls can
handle responding to user events while the <TT><FONT FACE="Courier">Canvas</FONT></TT>
handles the display. The <TT><FONT FACE="Courier">RGB2Hex</FONT></TT>
class is responsible for creating instances of the other two classes
and handles the starting and stopping of the applet.
<P>
The only remaining challenge in creating the applets in this chapter
is testing and debugging the code. Testing is important in creating
software because errors can be costly in terms of performance
and user confidence. The next section provides some suggestions
for testing and debugging Java applets.
<H2><A NAME="TestingandDebugging"><FONT SIZE=5 COLOR=#Ff0000>Testing
and Debugging</FONT></A></H2>
<P>
A well-designed applet is easy to test and debug; the best check
against logic problems is a well-thought-out design. Object-oriented
languages, such as Java, assist with this by encapsulating information
and preventing the programmer from making modifications that can
have unexpected effects on other portions of the code. This does
not mean that all code written in Java will be bug free. It is
still possible to expect an object to behave in one manner and
for its actual behavior be different.
<P>
The easiest type of problem to fix is a compiler error. Some of
the basic problems that will cause the compiler to complain include
the following:
<UL>
<LI>Lines missing the ending <TT><FONT FACE="Courier">;</FONT></TT>
<LI>Mismatched braces-for example, a <TT><FONT FACE="Courier">{</FONT></TT>
without a matching <TT><FONT FACE="Courier">}</FONT></TT>, or
a <TT><FONT FACE="Courier">}</FONT></TT> without a matching <TT><FONT FACE="Courier">{</FONT></TT>
<LI>Instance variables that are not declared
<LI>Typos 
<LI><TT><FONT FACE="Courier">if</FONT></TT> statements missing
<TT><FONT FACE="Courier">()</FONT></TT>s
</UL>
<P>
The errors generated by the Java compiler often pinpoint the problems
exactly, yet it is also common for one of the listed mistakes
to generate several unrelated compiler errors. For example, not
declaring an instance variable that is passed to a method could
result in a compiler error saying the method is not defined for
the type of parameters specified. Missing braces can result in
other errors, including undefined variables.
<P>
Java is case sensitive: <TT><FONT FACE="Courier">TextField</FONT></TT>
and <TT><FONT FACE="Courier">textfield</FONT></TT> are considered
two different objects; therefore, verify the case of each letter
of identifiers that are not recognized by the compiler.
<P>
There are several steps you can take to minimize both compiler
and runtime errors:
<UL>
<LI>Keep methods short; this makes it easier to remember what
the method is trying to accomplish and to create the code for
it.
<LI>Add one portion of code at a time; this increases your ability
to determine where a particular problem is introduced.
<LI>Compile after every change and run after any change that will
be apparent to make it easier to see problems.
<LI>Test as many possible combinations of scenarios as you can
imagine, especially where user input is concerned.
</UL>
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#Ff0000>Summary</FONT></A>
</H2>
<P>
In this chapter you have created two intermediate Java applets.
You have gained experience in working with a variety of the objects
supplied in the Java API and with extending classes. You have
practiced designing applets and determining how a specification
can be expanded into a complete object-oriented design. You have
gained some experience in a step-by-step construction of applets
and learned some techniques for debugging applets. You should
now feel comfortable creating your own intermediate Java applets.
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch13.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch13.htm"><IMG SRC="pc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/index.htm"><IMG SRC="hb.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch15.htm" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/ch15.htm"><IMG 
SRC="nc.gif" tppabs="http://www.mcp.com/835574400/1-57521/1-57521-088-6/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>
<HR WIDTH="100%"></P>
<P>


</BODY>
</HTML>
