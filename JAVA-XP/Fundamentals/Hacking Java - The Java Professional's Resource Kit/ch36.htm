<HTML>
<HEAD>
<TITLE>Chapter 36 -- Adding New MIME Types to HotJava </TITLE>

<META>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT SIZE=6 COLOR=#FF0000>Chapter 36</FONT></H1>
<H1><FONT SIZE=6 COLOR=#FF0000>Adding New MIME Types to HotJava
</FONT></H1>
<P>
<I><B>by David Baker</B></I>
<HR>
<H3><CENTER><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></CENTER></H3>
<UL>
<LI><A HREF="#WritingContentHandlers">
Writing Content Handlers</A>
<UL>
<LI><A HREF="#StepOneDecideuponaPackageName">
Step One: Decide upon a Package Name</A>
<LI><A HREF="#StepTwoCreatetheDirectoriesBR">
Step Two: Create the Directories<BR>
</A>
<LI><A HREF="#StepThreeSetYourCLASSPATH">
Step Three: Set Your CLASSPATH</A>
<LI><A HREF="#StepFourWritetheContentHandler">
Step Four: Write the Content Handler</A>
<LI><A HREF="#StepFiveCompiletheSource">
Step Five: Compile the Source</A>
</UL>
<LI><A HREF="#UsingContentHandlerswithHotJava">
Using Content Handlers with HotJava</A>
<UL>
<LI><A HREF="#StepOneDisableSpecialMIMEHandling">
Step One: Disable Special MIME Handling</A>
<LI><A HREF="#StepTwoUpdatethePROPERTIESFile">
Step Two: Update the PROPERTIES File</A>
<LI><A HREF="#StepThreeRunHotJava">
Step Three: Run HotJava</A>
</UL>
<LI><A HREF="#UsingContentHandlerswithYourOwnApplications">
Using Content Handlers with Your Own Applications</A>
<UL>
<LI><A HREF="#StartFetchFuddify">
Start FetchFuddify</A>
<LI><A HREF="#TheContentHandlerFactoryImplementation">
The ContentHandlerFactory Implementation</A>
<LI><A HREF="#RunningtheApplication">
Running the Application</A>
</UL>
</UL>
<HR>
<P>
Files on the Internet come in various formats, each of which is
used to convey specific information. Thereare different image
file formats, sound clips, video information, and HTML pages.
When these documents are transmitted on the Web with the HTTP
protocol, a particular MIME content type is used in order to identify
how that file should be interpreted.
<P>
New document formats are constantly being introduced to the World
Wide Web. However, before you can use these new formats, your
browser or other applications must understand how to interpret
them. Extensibility is part of the nature of the Java execution
environment and the HotJava browser. To manage new MIME types,
Java and HotJava can be extended through content handlers.
<P>
Content handlers are Java's way of dealing with various data formats,
such as text files, images, and sounds. By creating new content
handlers, additional data types can be processed and rendered.
They empower you to add new functionality to your Web browser
and quickly develop applications to utilize new file formats.
<H2><A NAME="WritingContentHandlers"><FONT SIZE=5 COLOR=#FF0000>
Writing Content Handlers</FONT></A></H2>
<P>
Documents on the Web are transmitted with a MIME content type
identifier indicating to the receiving agent how the data is formatted.
The client must understand how to decode and render that data.
A content handler is a Java class that is called by either an
URL or <TT>URLConnection</TT> object.
The content handler obtains an input stream from the calling object
and then receives data from that stream. It then processes the
data and returns an object that contains that data.
<P>
Java and HotJava provide a core set of content handlers to manage
commonly used types. You can write your own handlers to deal with
new content types. This empowers you to extend your Java applications
or your HotJava browser to understand new document formats.
<P>
The process of creating new content handlers is quite similar
to creating protocol handlers. If you have read the previous chapter,
some of these instructions will seem quite familiar. As an example,
this chapter demonstrates a content handler that processes plain
text documents, overriding the existing handling.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
The example in this chapter provides the somewhat frivolous task of making incoming text files appear as though spoken by a famous bald cartoon character inclined towards hunting rabbits.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
The process of creating protocol handlers is very similar to that
of content handlers, and is described in the section &quot;Writing
a Procotol Handler,&quot; in <A HREF="ch35.htm" >Chapter 35</A>, &quot;Adding Additional
Protocols to HotJava.&quot;
<H3><A NAME="StepOneDecideuponaPackageName">
Step One: Decide upon a Package Name</A></H3>
<P>
Like protocol handlers, content handlers must reside within a
specific package. This package must end with <TT><I>content.type</I></TT>
where <TT>type</TT> is the MIME type
of the data. For instance, the type of <TT>text/plain</TT>
documents is text, while for <TT>image/gif,</TT>
it is <TT>image</TT>. As with the
previous chapter, I append <TT>ORG.netspace.dwb</TT>
to indicate the distribution source and author to obtain the following:
<BLOCKQUOTE>
<PRE>
ORG.netspace.dwb.content.text</FONT>
</PRE>
</BLOCKQUOTE>
<P>
See &quot;Step One: Decide on a Package Name&quot; in Chapter
35, &quot;Adding Additional Protocols to HotJava,&quot; to see
the corresponding process for protocol handlers.
<H3><A NAME="StepTwoCreatetheDirectoriesBR">
Step Two: Create the Directories<BR>
</A></H3>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Caution</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Java is case-sensitive. Even if your system doesn't treat upper- and lowercase characters within directory names differently, use the case of the letters as shown within these instructions.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
The content handler class must be placed into a directory that
corresponds to the package name. Such directories usually reside
within a directory called classes in your home directory. For
Windows NT and Windows 95 users, the following sequence of commands
accomplishes this at the command prompt:<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
If you have previously installed other content handlers, protocol handlers, or personal Java classes, you may have already created some of the following directories.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<BLOCKQUOTE>
<PRE>
%HOMEDRIVE%
cd %HOMEPATH%
mkdir classes
mkdir classes\ORG
mkdir classes\ORG\netspace
mkdir classes\ORG\netspace\dwb
mkdir classes\ORG\netspace\dwb\content
mkdir classes\ORG\netspace\dwb\content\text
</PRE>
</BLOCKQUOTE>
<P>
For UNIX users, the analogous commands are:
<BLOCKQUOTE>
<PRE>
cd~
mkdir classes
mkdir classes/ORG
mkdir classes/ORG/netspace
mkdir classes/ORG/netspace/dwb
mkdir classes/ORG/netspace/dwb/content
mkdir classes/ORG/netspace/dwb/content/text
</PRE>
</BLOCKQUOTE>
<H3><A NAME="StepThreeSetYourCLASSPATH">
Step Three: Set Your CLASSPATH</A></H3>
<P>
The <TT>CLASSPATH</TT> environment
variable tells the Java compiler and interpreter where to find
Java classes, enabling the dynamic linking feature of the Java
execution environment. When installing the JDK, HotJava, or a
Java-aware browser, you might have set the <TT>CLASSPATH</TT>
environment variable. If so, it is critical that you avoid overwriting
that data. Follow these steps:
<OL>
<LI>Find out what your <TT>CLASSPATH</TT>
current setting is. Under Windows NT/95, just type the following
command from the command prompt:
<BLOCKQUOTE>
<PRE>
<B>SET</B>
</PRE>
</BLOCKQUOTE>
<LI>Look for the <TT>CLASSPATH</TT>
value. Under UNIX systems, you can display the <TT>CLASSPATH</TT>
value with this command:<BR>
<TT>ECHO $CLASSPATH</TT>
<LI>Reset your <TT>CLASSPATH</TT>,
including the previous data, if any. Under Windows 95, if your
<TT>CLASSPATH</TT> was <BR>
<TT>.;C:\JAVA\LIB\CLASSES.ZIP </TT>
<LI>you can add the following line to your AUTOEXEC.BAT and reboot
<BR>
<TT>SET CLASSPATH=.;%HOMEDRIVE%%HOMEPATH%\CLASSES
;C:\JAVA\LIB\CLASSES.ZIP</TT>
<LI>Under Windows NT, presuming that the <TT>CLASSPATH</TT>
value was the same as under the Windows 95 example, you would
use the System Control Panel to add a <TT>CLASSPATH</TT>
environment variable with the value: <BR>
<TT>.;%HOMEDRIVE%%HOMEPATH%C:\JAVA\LIB\CLASSES.ZIP</TT>
<LI>Under UNIX, assume that your old <TT>CLASSPATH</TT>
was <TT>.:/usr/java/lib</TT>. If you
are using the C shell, place the following into your CSHRC file:
<BR>
<TT>setenv CLASSPATH .:/home/myid/classes:/usr/java/lib</TT>
<LI>If you are on a UNIX system using the Korn or a POSIX-compliant
shell, add this line to whatever file your <TT>ENV</TT>
environment variable points. If <TT>ENV</TT>
is unset, then you could add the following line to your ~/.PROFILE
file:<BR>
<TT>CLASSPATH=.:/home/myid/classes:/usr/java/lib</TT>
</OL>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
The <TT>CLASSPATH</TT> can indicate as many Java libraries as you have installed. The base directory of each library should be contained within the <TT>CLASSPATH</TT>, each separated by a ':' under UNIX systems or a ';' under Windows 95 and Windows NT 
systems. The part of the <TT>CLASSPATH</TT> which is only a period indicates that the current working directory should be searched for appropriate class files, making developing new Java classes more convenient.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<p>
<H3><A NAME="StepFourWritetheContentHandler">
Step Four: Write the Content Handler</A></H3>
<P>
The content handler must be a class that extends <TT>java.net.ContentHandler</TT>.
It must also have the same name as the subtype of the MIME content-type
it processes. That is, for <TT>image/gif</TT>,
the class should be called <TT>gif</TT>,
while my example that overrides the normal <TT>plain/text</TT>
handler should be named <TT>text</TT>.
<P>
The class must have a <TT>getContent()</TT>
method that takes a <TT>URLConnection</TT>
as an argument and returns a generic <TT>Object</TT>.
For now, HotJava supports the following returned <TT>Object</TT>
instances:
<UL>
<LI>A <TT>String</TT> object that
appears as plain text within the HotJava window
<LI>An instance of <TT>sun.awt.image.InputStreamImageSource</TT>,
allowing HotJava to load the image
<LI>An <TT>InputStream</TT> object
that opens the Save to Disk dialog box
<LI>A <TT>Thread</TT> instance that
launches an external helper application
</UL>
<P>
The code for the example used in this chapter is shown in listing
36.1. This content handler has only one method-<TT>getContent()</TT>.
It obtains an <TT>InputStream</TT>
from the <TT>URLConnection</TT> object
and then enters an infinite loop. Within the loop, it reads the
incoming characters and makes a number of substitutions, altering
the text to appear as though spoken by our cartoon friend.
<P>
The filtered characters are placed into a <TT>StringBuffer()</TT>
object. Once the last character is read, the <TT>read()</TT>
method returns <TT>-1</TT>, and the
content handler breaks from the loop. It closes the <TT>InputStream</TT>
and then returns a <TT>String</TT>
object.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
If there is an exception, the method returns a <TT>String</TT> providing information about the problem.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 36.1&nbsp;&nbsp;</B><TT><B>plain.java
<BR>
</B></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
// This is the package identified for this content handler.
package ORG.netspace.dwb.content.text;

import java.lang.*;  // Import the package names used.
import java.net.*;
import java.io.*;

/**
 * This is a text/plain content handler which &quot;fuddifies&quot;
 * the text it receives.
 * @author David W. Baker
 * @version 1.1
 * @see sun.net.ContentHandler
 */
public class plain extends ContentHandler {
     // Stream to receive text/plain file from.
     private InputStream input;
     // Some standard replacement strings.
     private static final String QUIET = &quot;(be vewy quiet, &quot;;
     private static final String HEH = &quot;, eheheheh.&quot;;
     private static final String SCREWY = &quot;? Awe you scwewy?&quot;;
     private static final String RASCAL = &quot;, you wascal!&quot;;
     private static final String MISCREANT = 
                                                                 &quot;, you miscweant:&quot;;
     /**
     * This method returns an Object containing the
     * processed content from the given URLConnection.
     * @param contentConn Connection used to obtain the content.
     * @return The content.
     * @see sun.net.ContentHandler#getContent
     */
     public Object getContent(URLConnection contentConn) {
          // Create a buffer to store the filtered data.
          StringBuffer fuddBuff = new StringBuffer();
          int intChar;     // A int representation of a char.
          char nextChar; // A char.

          try {
               // Get the input.
               input  = contentConn.getInputStream();
               // Loop infinitely.
               filter: while(true) {
                    // Read in next character.
                    intChar = input.read();
                    // Make sure we aren't at the end.
                    if (intChar == -1) {
                         break filter;  // Break if end.
                    }
                    // Convert it to a char.
                    nextChar = (char)intChar;
                    // Substitute &quot;(&quot; for QUIET
                    if (nextChar == '(') fuddBuff.append(QUIET);
                    // Substitute &quot;W&quot; for &quot;L&quot;
                    else if (nextChar == 'L') fuddBuff.append('W');
                    // Substitute &quot;w&quot; for &quot;l&quot;
                    else if (nextChar == 'l') fuddBuff.append('w');
                    // Substitute &quot;R&quot; for &quot;W&quot;
                    else if (nextChar == 'R') fuddBuff.append('W');
                    // Substitute &quot;r&quot; for &quot;w&quot;
                    else if (nextChar == 'r') fuddBuff.append('w');
                    // For periods at the end of the file or periods
                    // followed by whitspace, substitute HEH.
                    else if (nextChar == '.') {
                         intChar = input.read();
                         if (intChar == -1) {
                              fuddBuff.append(HEH);
                              break filter;  // Break if end.
                         }
                         nextChar = (char)intChar;
                         if (nextChar == ' ') 
                              fuddBuff.append(HEH + &quot; &quot;);
                         else fuddBuff.append(&quot;.&quot; + nextChar);
                    }
                    // For ? the end of the file or ?
                    // followed by whitspace, substitute SCREWY.
                    else if (nextChar == '?') {
                         intChar = input.read();
                         if (intChar == -1) {
                              fuddBuff.append(SCREWY);
                              break filter;  // Break if end.
                         }
                         nextChar = (char)intChar;
                         if (nextChar == ' ') 
                              fuddBuff.append(SCREWY + &quot; &quot;);
                         else fuddBuff.append(&quot;?&quot; + nextChar);
                    }
                    // For ! at the end of the file or !
                    // followed by whitspace, substitute RASCAL.
                    else if (nextChar == '!') {
                         intChar = input.read();
                         if (intChar == -1) {
                              fuddBuff.append(RASCAL);
                              break filter;  // Break if end.
                         }
                         nextChar = (char)intChar;
                         if (nextChar == ' ') 
                              fuddBuff.append(RASCAL + &quot; &quot;);
                         else fuddBuff.append(&quot;!&quot; + nextChar);
                    }
                    // For : at the end of the file or :
                    // followed by whitspace, substitute MISCREANT.
                    else if (nextChar == ':') {
                         intChar = input.read();
                         if (intChar == -1) {
                              fuddBuff.append(MISCREANT);
                              break filter;  // Break if end.
                         }
                         nextChar = (char)intChar;
                         if (nextChar == ' ') 
                              fuddBuff.append(MISCREANT + &quot; &quot;);
                         else fuddBuff.append(&quot;:&quot; + nextChar);
                    }
                    else fuddBuff.append(nextChar);
               }
               input.close();
          } catch(IOException excpt) {
               return &quot;Unable to load document: &quot; 
                                   + contentConn.getURL();
          }
          return fuddBuff.toString();
     }
}
</PRE>
</BLOCKQUOTE>
<HR>
<H3><A NAME="StepFiveCompiletheSource">
Step Five: Compile the Source</A></H3>
<P>
Use <TT>javac</TT> to compile the
content handler, and leave the compiled class within the directory
created in Step Two (i.e., &quot;<TT>classes\ORG\netspace\dwb\content\text</TT>&quot;
for NT/95 or &quot;<TT>classes/ORG/netspace/dwb/content/text</TT>&quot;
for UNIX). Thus, if you created the <TT>plain.java</TT>
program within that directory, you would merely issue change to
that directory and then issue this command:
<BLOCKQUOTE>
<PRE>
javac plain.java</FONT>
</PRE>
</BLOCKQUOTE>
<P>
Be sure to leave the <TT>.class</TT>
file within the bottom &quot;<TT>text</TT>&quot;
directory.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
If you choose to create the plain.java file somewhere else, you use the <TT>-d</TT> option to the Java compiler in order to automatically place the .class file into the proper place. For example:
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>javac -d classes/ORG/netspace/dwb/content/text plain.java</TT>
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H2><A NAME="UsingContentHandlerswithHotJava"><FONT SIZE=5 COLOR=#FF0000>
Using Content Handlers with HotJava</FONT></A></H2>
<P>
As with protocol handlers, HotJava's goal is to eventually support
dynamically downloaded content handlers. For now, only manually
installed handlers are supported, created as described in the
earlier section &quot;Writing Content Handlers.&quot; In addition,
at the time of this writing, HotJava supports only content handlers
that extend existing MIME types. That is, the example can override
the handling of <TT>text/plain</TT>,
but HotJava does not support one that handles a new content-type
like <TT>text/fuddify</TT>.
<P>
HotJava also needs to deal with the conflict between MIME type
names and Java class names. MIME content-types can, and under
certain circumstances should, contain hyphens. However, hyphens
are not allowed in Java class identifiers. Because the class of
the content handler must be the same as the MIME content subtype,
this presents an obvious problem.
<P>
The following steps illustrate how to use the new content handler,
as created in the previous section, with the HotJava browser.
<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
JavaSoft makes the HotJava browser and instructions for its installation available at &lt;URL:<TT><B><A 
HREF="http://www.javasoft.com/java.sun.com/HotJava/CurrentRelease/installation.html">http://www.javasoft.com/java.sun.com/HotJava/<br>CurrentRelease/installation.html</A>&gt;.</B></TT>
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H3><A NAME="StepOneDisableSpecialMIMEHandling">
Step One: Disable Special MIME Handling</A></H3>
<P>
On certain systems, a file called <TT>mailcap</TT>
may have been created to indicate that a special helper application
should be used for an incoming MIME type, regardless of which
browser is loading the data. If such a file exists, ensure that
any line indicating special processing is removed for the content-type
you want your handler to process. Thus, remove any entry for <TT>text/plain</TT>
for this example.
<H3><A NAME="StepTwoUpdatethePROPERTIESFile">
Step Two: Update the PROPERTIES File</A></H3>
<P>
HotJava stores per-user customizations in a file called PROPERTIES.
This file is located within a directory named &quot;.hotjava&quot;
that resides within your home directory. Edit this file to set
the <TT>java.content.handler.pkgs</TT>
property. You want to add everything up to the <TT>content</TT>
token in the content handler's package. When HotJava is searching
for a content handler appropriate to a specific MIME type, it
will append the MIME type to this value and look for a Java package
of that name; then, it looks for a Java class within that package
that has the same name as the MIME subtype. If this property has
not been set, add the following line to use the example handler:
<BLOCKQUOTE>
<PRE>
java.content.handler.pkgs=ORG.netspace.dwb.content</FONT>
</PRE>
</BLOCKQUOTE>
<P>
If that property has already been set, append a pipe character
(|) and <TT>ORG.netspace.dwb.content</TT>.
For example:
<BLOCKQUOTE>
<PRE>
java.content.handler.pkgs=COM.company.content|ORG.netspace.dwb.content
<BR>

</PRE>
</BLOCKQUOTE>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
When editing the HotJava properties file, be sure to use a text editor or, if you are using a word processor, save the file as text.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H3><A NAME="StepThreeRunHotJava">
Step Three: Run HotJava</A></H3>
<P>
Execute HotJava and load up a text file to see the &quot;fuddified&quot;
information. Figure 36.1 demonstrates this effect upon the HTML
RFC. To view this page yourself, go under the File menu, select
Open Page, and then enter the following:
<BLOCKQUOTE>
<PRE>
<B><FONT FACE="Courier">ftp://ds.internic.net/rfc/rfc1866.txt</FONT></B>
</PRE>
</BLOCKQUOTE>
<P>
<A HREF="f36-1.html"><B>Figure 36.1 : </B><I>When HotJava uses the Fuddify content handler, the
HTML spec looks slightly more interesting</I>.</A>
<H2><A NAME="UsingContentHandlerswithYourOwnApplications"><FONT SIZE=5 COLOR=#FF0000>
Using Content Handlers with Your Own Applications</FONT></A></H2>
<P>
Content handlers can be used by your own applications, in addition
to their usefulness with HotJava. Content handlers use a concept
similar to protocol handlers for registering a new handler, that
of a <I>factory</I>. The <TT>FetchFuddify</TT>
application, shown in Listing 36.2, demonstrates this functionality.
<HR>
<BLOCKQUOTE>
<B>Listing 36.2&nbsp;&nbsp;FetchFuddify.java<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
import java.net.*;     // Import package names used.
import java.io.*;

/**
 * This is an application which utilizes the new
 * text/plain content handler which &quot;fuddifies&quot;
 * the text.
 * @author David W. Baker
 * @version 1.1
 */
public class FetchFuddify {
     /**
      * This method starts the application.
      * @param args The program arguments - should be URL.
      */
     public static void main (String args[]) {
          // Check the arguments.
          if (args.length != 1) {
               System.err.println(&quot;usage: &quot; +
                    &quot;java FetchFuddify &lt;url of Fudd document&gt;&quot;);
               System.exit(1);
          }
          // Create an instance of FetchFuddify to do its stuff.
          FetchFuddify app = new FetchFuddify(args[0]);
     }

     /**
      * This constructor does all of the work of obtaining
      * the data with the appropriate content handler and
      * sending it to standard output.
      * @param url The URL to obtain.
      */
     public FetchFuddify(String url) {
          URL fuddURL;                    // URL object to resource.
          URLConnection fuddConn; // Connection to resource.
          Object fuddObject;          // Object returned.

          // Register the content handler with our ow
          // factory.
          URLConnection.setContentHandlerFactory(
               new fuddifyCHFactory());
          try {
               // Create the URL object with the command line
               // argument used.
               fuddURL = new URL(url);
               // Open the connection.
               fuddConn = fuddURL.openConnection();
               // Get the content.
               fuddObject = fuddConn.getContent();
               // Convert the content to a String and print it.
               System.out.println(fuddObject.toString());
          } catch(MalformedURLException excpt) {
               System.err.println(&quot;Mailformed URL: &quot; + excpt);
          } catch(IOException excpt) {
               System.err.println(&quot;Failed I/O: &quot; + excpt);
          }
     }
}

/**
 * This class implements the ContentHandlerFactory
 * interface to register our own content handler.
 * @see java.net.ContentHandlerFactory
 */
class fuddifyCHFactory implements ContentHandlerFactory {
     /**
      * This method returns our own customer content
      * handler when given a &quot;text/plain&quot; content type.
      * @param contenttype MIME type - should be &quot;text/plain&quot;.
      * @return The content handler to use.
      * @see java.net.ContentHandlerFactory#createContentHandler
      */
     public ContentHandler 
          createContentHandler(String contenttype) {
          // Ensure the content type is &quot;text/plain&quot;.
          if (contenttype.equalsIgnoreCase(&quot;text/plain&quot;)) {
               // Create an instance of our content handler.
               return new ORG.netspace.dwb.content.text.plain();
          }
          // Otherwise, print an error message and return null.
          System.err.println(&quot;Unknown data type: &quot; 
               + contenttype);
          return null;
     }
}
</PRE>
</BLOCKQUOTE>
<HR>
<H3><A NAME="StartFetchFuddify">
Start FetchFuddify</A></H3>
<P>
The <TT>main()</TT> method checks
to see that the program was invoked with a single argument, which
corresponds to the URL of a text file to filter. Then it creates
a <TT>FetchFuddify</TT> object, passing
it the <TT>String</TT> command line
argument.
<P>
The constructor performs the essential task in using a new content
handler: invoking the <TT>static</TT>
method of the <TT>URLConnection</TT>
class, <TT>setContentHandlerFactory()</TT>.
Factories should be a familiar concept, this time allowing the
<TT>URLConnection</TT> class to choose
an appropriate content handler. The <TT>setContentHandlerFactory</TT>
takes an object that implements the <TT>java.net.ContentHandlerFactory</TT>
interface. This example's implementation, <TT>fuddifyCHFactory</TT>,
is described next in &quot;The <TT>ContentHandlerFactory</TT>
Implementation.&quot;
<P>
The constructor then creates an <TT>URL</TT>
object and opens a connection to the resource. It calls the <TT>getContent()</TT>
method of the <TT>URLConnection</TT>
class, which causes the code of the content handler to be invoked.
<TT>getContent()</TT> returns an <TT>Object</TT>,
which the constructor converts to a <TT>String</TT>
with the <TT>toString()</TT> method
and prints to standard output.
<H3><A NAME="TheContentHandlerFactoryImplementation">
The ContentHandlerFactory Implementation</A></H3>
<P>
This interface enables you to register new content handlers with
the <TT>URLConnection</TT> class.
A class that implements this interface must have a <TT>createContentHandler()</TT>
method. This method takes a <TT>String</TT>
instance containing the value of the MIME content-type of the
resource being accessed. This method returns a <TT>ContentHandler</TT>
object.
<P>
The example first checks to see that the <TT>contenttype</TT>
argument is <TT>text/plain</TT>. It
then creates an instance of the content handler and returns it.
If the method is called with a <TT>contenttype</TT>
other than <TT>text/plain</TT>, it
returns <TT>null</TT>.
<H3><A NAME="RunningtheApplication">
Running the Application</A></H3>
<P>
First, make sure you've already installed the appropriate content
handler, as described in &quot;Writing Content Handlers.&quot;
Compile the FetchFuddify application and then invoke it with the
URL of a text file available somewhere on the Web. For instance,
the following will &quot;fuddify&quot; a release notes document
from JavaSoft:
<BLOCKQUOTE>
<PRE>
java FetchFuddify http://chatsubo.javasoft.com/current/doc/rmi/release-notes.txt</FONT>
</PRE>
</BLOCKQUOTE>
<P>
Which will generate:
<BLOCKQUOTE>
<PRE>
Wemote Method Invocation (be vewy quiet, WMI) notes fow wewease Awpha2.

- WMI is suppowted fow Java appwications and in the AppwetViewew.

- WMI wequiwes wocaw instawwation of the wmi package appwopwiate fow
  Sowawis ow Win95/NT.

- Any appwication that expowts wemote objects must be awwowed
  by the SecuwityManagew to use SewvewSockets to wisten fow and accept
  incoming socket connections, eheheheh.

- Appwets may not expowt wemote objects since theSecuwityManagew
  pwevents using SewvewSocket, eheheheh.  This wiww be suppowted in a futuwe
  update.
</PRE>
</BLOCKQUOTE>
<P>
It is promised that with the 1.0 release version of HotJava, dynamically
downloaded content handlers will be supported. Once realized,
this will allow HotJava to be extended on demand with little effort
from the enduser. When you encounter a new document type, HotJava
will automatically download and install the new content handler
necessary to render the data.
<HR>

<CENTER><P><A HREF="ch35.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch37.htm"><IMG SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
