<HTML>

<HEAD>
   <TITLE>Chapter 21 -- Event Handling</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">










<H1><FONT COLOR=#FF0000>Chapter 21</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Event Handling</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#EventDrivenProgramming" >Event-Driven Programming</A>
<LI><A HREF="#AWTEventHandling" >AWT Event Handling</A>
<LI><A HREF="#TheEventClass" >The Event Class</A>
<UL>
<LI><A HREF="#MemberVariables" >Member Variables</A>
<LI><A HREF="#Types" >Types</A>
<LI><A HREF="#Usage" >Usage</A>
</UL>
<LI><A HREF="#JavaInputEvents" >Java Input Events</A>
<UL>
<LI><A HREF="#KeyboardEvents" >Keyboard Events</A>
<LI><A HREF="#MouseEvents" >Mouse Events</A>
</UL>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
<FONT COLOR=#000000>Many of the actions that</FONT> take place
in the Java environment occur as events that can be handled programmatically.
This chapter focuses on the types of events supported by Java,
along with how to write code that responds to them. In this chapter,
you learn how to handle events such as key presses on the keyboard,
mouse movements and button clicks, and some more abstract events
that aren't directly related to user input. You also learn about
the internal makeup of the Java system that enables event processing.
<H2><A NAME="EventDrivenProgramming"><FONT SIZE=5 COLOR=#FF0000>Event-Driven
Programming</FONT></A></H2>
<P>
Java is an event-driven environment, meaning that most actions
that take place in Java generate an event that can be handled
and responded to. In Java, an <I>event</I> is defined quite literally
as something that happens that you might want to know about. For
example, when a Java component gains the input focus, an event
occurs because it might be important for your applet to know about
the focus change.
<P>
In the event-driven world of Java, the flow of your program follows
events external to your applet, as opposed to following an internally
linear program flow. This is an important point, because it means
that a Java applet is in a constant state of responding to events.
The most visible events are things like mouse clicks and key presses,
which are known as <I>input events</I>. You provide methods that
respond to these events, which are called <I>event handlers</I>.
Figure 21.1 shows how program flow is altered by external events.
<P>
<A HREF="http://docs.rinet.ru/JavDev/f21-1.gif" ><B>Figure 21.1: </B><I>How external events impact program flow.</I></A>
<P>
Because of the inherent graphical nature of Java applets, it will
eventually become obvious to you why the event-driven programming
model is not only more convenient, but downright necessary. With
the potential of having multiple applets on a single Web page,
along with on-the-fly system configuration changes and a multitude
of other things going on, a procedural programming model would
be much more difficult to manage. The event-based model provides
a more sound solution to the problems inherent in a system with
a graphical interface, such as Java.
<P>
All events in Java are processed within the <TT><FONT FACE="Courier">java.awt</FONT></TT>
(Advanced Windowing Toolkit) package, and are tightly linked to
AWT components. A <I>component</I> is basically a generic abstraction
for a Java window. If you recall, Java applets are themselves
a specific type of component. This means that they inherit the
same event-processing features built in to the <TT><FONT FACE="Courier">Component</FONT></TT>
superclass. For more juicy details on the <TT><FONT FACE="Courier">Component</FONT></TT>
class and the AWT package, refer to <A HREF="ch28.htm" >Chapter 28</A>,
&quot;Package <TT><FONT FACE="Courier">java.awt</FONT></TT>.&quot;
<H2><A NAME="AWTEventHandling"><FONT SIZE=5 COLOR=#FF0000>AWT
Event Handling</FONT></A></H2>
<P>
The Java AWT is responsible for generating events in response
to user actions. For example, when the user selects a button,
an event of type <TT><FONT FACE="Courier">ACTION_EVENT</FONT></TT>
is generated. These events are in turn processed by applications
or applets, who use the AWT to respond to the events in an <I>event-driven</I>
manner.
<P>
Somewhere deep inside the AWT is an event-processing loop, which
handles the dirty job of routing events to their appropriate targets.
This process of routing an event to a target object is known as
<I>posting an event</I>. It should come as no surprise that the
method used to post events to target objects is the <TT><FONT FACE="Courier">postEvent</FONT></TT>
method, which is defined for all target objects. For target objects
derived from <TT><FONT FACE="Courier">Component</FONT></TT>, <TT><FONT FACE="Courier">postEvent</FONT></TT>
will in turn call the <TT><FONT FACE="Courier">handleEvent</FONT></TT>
method. <TT><FONT FACE="Courier">handleEvent</FONT></TT> serves
as the default handler for all events, and it has the option of
responding to an event or letting it pass through. If <TT><FONT FACE="Courier">handleEvent</FONT></TT>
doesn't handle an event, it returns <TT><FONT FACE="Courier">false</FONT></TT>,
in which case the parent object's <TT><FONT FACE="Courier">handleEvent</FONT></TT>
method is called. This process continues until an event is handled
or the top of the object tree is reached. Figure 21.2 shows how
this event-handling process takes place.
<P>
<A HREF="http://docs.rinet.ru/JavDev/f21-2.gif" ><B>Figure 21.2:</B> <I>The Java AWT eventhandling process.</I></A>
<P>
The Java AWT provides a class for encapsulating all types of events
that can occur within the system: <TT><FONT FACE="Courier">Event</FONT></TT>.
The <TT><FONT FACE="Courier">Event</FONT></TT> class models a
generic event and has constants defined within it to represent
specific events. You learn more details about the <TT><FONT FACE="Courier">Event</FONT></TT>
class a little later in this chapter. The <TT><FONT FACE="Courier">Event</FONT></TT>
class is used primarily by the <TT><FONT FACE="Courier">handleEvent</FONT></TT>
method, which is defined as:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean handleEvent(Event evt)</FONT></TT>
</BLOCKQUOTE>
<P>
Notice that <TT><FONT FACE="Courier">handleEvent</FONT></TT> takes
an <TT><FONT FACE="Courier">Event</FONT></TT> object as its only
parameter. <TT><FONT FACE="Courier">handleEvent</FONT></TT> uses
this <TT><FONT FACE="Courier">Event</FONT></TT> object to determine
what type of event has occurred. It then calls a more specific
event-handler method to deal with the specific event. For example,
if a key is pressed, the <TT><FONT FACE="Courier">Event</FONT></TT>
object's <TT><FONT FACE="Courier">id</FONT></TT> member variable
is set to <TT><FONT FACE="Courier">KEY_PRESS</FONT></TT>, which
is a constant defining the key press event. <TT><FONT FACE="Courier">handleEvent</FONT></TT>
checks the value of <TT><FONT FACE="Courier">id</FONT></TT> and
upon finding it equal to <TT><FONT FACE="Courier">KEY_PRESS</FONT></TT>,
calls the <TT><FONT FACE="Courier">keyDown</FONT></TT> handler
method. Following is a section of code showing the keypress-handling
portion of the <TT><FONT FACE="Courier">handleEvent</FONT></TT>
method in the 1.02 release of Java:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean handleEvent(Event evt)
{<BR>
&nbsp;&nbsp;switch (evt.id) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;...<BR>
&nbsp;&nbsp;case Event.KEY_PRESS:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return keyDown(evt, evt.key);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;...<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return false;<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The handling of other system events is very similar to that of
the <TT><FONT FACE="Courier">KEY_PRESS</FONT></TT> event. You
could easily override <TT><FONT FACE="Courier">handleEvent</FONT></TT>
to provide custom routing of event handlers, but it is rarely
necessary. Although you may not ever need to intervene with the
default event-handling provided by <TT><FONT FACE="Courier">handleEvent</FONT></TT>,
it is nevertheless important to understand how it works.
<H2><A NAME="TheEventClass"><FONT SIZE=5 COLOR=#FF0000>The </FONT><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">Event</FONT></TT><FONT SIZE=5 COLOR=#FF0000>
Class</FONT></A></H2>
<P>
The <TT><FONT FACE="Courier">Event</FONT></TT> class is a critical
component of the Java AWT. <TT><FONT FACE="Courier">Event</FONT></TT>
objects are constructed and passed into methods such as <TT><FONT FACE="Courier">postEvent</FONT></TT>
when an event occurs. They then are used in <TT><FONT FACE="Courier">handleEvent</FONT></TT>
and other methods to encapsulate the specifics regarding a particular
event. A thorough understanding of the <TT><FONT FACE="Courier">Event</FONT></TT>
class is important for the successful handling of events generated
by the AWT.
<H3><A NAME="MemberVariables">Member Variables</A></H3>
<P>
The <TT><FONT FACE="Courier">Event</FONT></TT> class defines a
lot of member constants that represent a variety of event types
and states, which you learn about in the next section. Beyond
these constants, there are also member variables defined in <TT><FONT FACE="Courier">Event</FONT></TT>
that are used to store the state of a particular event. These
member variables follow:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Object&nbsp;&nbsp;target;<BR>
long&nbsp;&nbsp;&nbsp;&nbsp;when;<BR>
int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id;<BR>
int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x;<BR>
int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y;<BR>
int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key;<BR>
int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modifiers;<BR>
int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clickCount;<BR>
Object&nbsp;&nbsp;arg;<BR>
Event&nbsp;&nbsp;&nbsp;evt;</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">target</FONT></TT> variable specifies
the object in which the event occurred; for example, in the case
of a button press event, the <TT><FONT FACE="Courier">target</FONT></TT>
variable would contain the associated <TT><FONT FACE="Courier">Button</FONT></TT>
object. The <TT><FONT FACE="Courier">when</FONT></TT> variable
is a timestamp for the event, which specifies exactly when the
event occurred. The <TT><FONT FACE="Courier">id</FONT></TT> variable
is used to store the type of event that occurred; you learn more
about event types in the next section. The <TT><FONT FACE="Courier">x</FONT></TT>
and <TT><FONT FACE="Courier">y</FONT></TT> variables are the coordinates
of the event within the target graphical object. A typical usage
of <TT><FONT FACE="Courier">x</FONT></TT> and <TT><FONT FACE="Courier">y</FONT></TT>
is keeping up with the mouse position when an event occurs.
<P>
The <TT><FONT FACE="Courier">key</FONT></TT> and <TT><FONT FACE="Courier">modifiers</FONT></TT>
variables are used for storing extra information related to keyboard
 input events. The <TT><FONT FACE="Courier">clickCount</FONT></TT>
variable keeps up with the number of consecutive mouse clicks,
and it is only applicable to mouse events. The <TT><FONT FACE="Courier">arg</FONT></TT>
variable is a generic storage member for associating arbitrary
information with an event. Finally, the <TT><FONT FACE="Courier">evt</FONT></TT>
variable is used to store the next <TT><FONT FACE="Courier">Event</FONT></TT>
object when building a linked list of events.
<H3><A NAME="Types">Types</A></H3>
<P>
The <TT><FONT FACE="Courier">Event</FONT></TT> class defines a
set of constants, which specify the different types of possible
events (see Table 21.1). These event constants are pretty self-explanatory
in that their name sufficiently describes the type of event they
represent.<BR>
<P>
<CENTER><B>Table 21.1. Constant event types defined in the </B><TT><B><FONT FACE="Courier">Event</FONT></B></TT><B>
class.</B></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=190><TT><FONT FACE="Courier">ACTION_EVENT</FONT></TT>
</TD><TD WIDTH=200><FONT FACE="Courier">&nbsp;</FONT></TD><TD WIDTH=159><FONT FACE="Courier">&nbsp;</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=190><TT><FONT FACE="Courier">&nbsp;</FONT></TT>
</TD><TD WIDTH=200><FONT FACE="Courier">&nbsp;</FONT></TD><TD WIDTH=159><FONT FACE="Courier">&nbsp;</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=190><TT><FONT FACE="Courier">GOT_FOCUS</FONT></TT>
</TD><TD WIDTH=200><FONT FACE="Courier">LOST_FOCUS</FONT></TD>
<TD WIDTH=159><FONT FACE="Courier">&nbsp;</FONT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=190><TT><FONT FACE="Courier">&nbsp;</FONT></TT>
</TD><TD WIDTH=200><FONT FACE="Courier">&nbsp;</FONT></TD><TD WIDTH=159><FONT FACE="Courier">&nbsp;</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=190><TT><FONT FACE="Courier">KEY_ACTION</FONT></TT>
</TD><TD WIDTH=200><FONT FACE="Courier">KEY_ACTION_RELEASE</FONT>
</TD><TD WIDTH=159><FONT FACE="Courier">KEY_PRESS</FONT></TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=190><TT><FONT FACE="Courier">KEY_RELEASE</FONT></TT>
</TD><TD WIDTH=200><FONT FACE="Courier">&nbsp;</FONT></TD><TD WIDTH=159><FONT FACE="Courier">&nbsp;</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=190><TT><FONT FACE="Courier">&nbsp;</FONT></TT>
</TD><TD WIDTH=200><FONT FACE="Courier">&nbsp;</FONT></TD><TD WIDTH=159><FONT FACE="Courier">&nbsp;</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=190><TT><FONT FACE="Courier">LIST_DESELECT</FONT></TT>
</TD><TD WIDTH=200><FONT FACE="Courier">LIST_SELECT</FONT></TD>
<TD WIDTH=159><FONT FACE="Courier">&nbsp;</FONT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=190><TT><FONT FACE="Courier">&nbsp;</FONT></TT>
</TD><TD WIDTH=200><FONT FACE="Courier">&nbsp;</FONT></TD><TD WIDTH=159><FONT FACE="Courier">&nbsp;</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=190><TT><FONT FACE="Courier">LOAD_FILE</FONT></TT>
</TD><TD WIDTH=200><FONT FACE="Courier">SAVE_FILE</FONT></TD>
<TD WIDTH=159><FONT FACE="Courier">&nbsp;</FONT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=190><TT><FONT FACE="Courier">&nbsp;</FONT></TT>
</TD><TD WIDTH=200><FONT FACE="Courier">&nbsp;</FONT></TD><TD WIDTH=159><FONT FACE="Courier">&nbsp;</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=190><TT><FONT FACE="Courier">MOUSE_DOWN</FONT></TT>
</TD><TD WIDTH=200><FONT FACE="Courier">MOUSE_DRAG</FONT></TD>
<TD WIDTH=159><FONT FACE="Courier">MOUSE_ENTER</FONT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=190><TT><FONT FACE="Courier">MOUSE_EXIT</FONT></TT>
</TD><TD WIDTH=200><FONT FACE="Courier">MOUSE_MOVE</FONT></TD>
<TD WIDTH=159><FONT FACE="Courier">MOUSE_UP</FONT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=190><TT><FONT FACE="Courier">&nbsp;</FONT></TT>
</TD><TD WIDTH=200><FONT FACE="Courier">&nbsp;</FONT></TD><TD WIDTH=159><FONT FACE="Courier">&nbsp;</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=190><TT><FONT FACE="Courier">SCROLL_ABSOLUTE</FONT></TT>
</TD><TD WIDTH=200><FONT FACE="Courier">SCROLL_LINE_DOWN</FONT>
</TD><TD WIDTH=159><FONT FACE="Courier">SCROLL_LINE_UP</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=190><TT><FONT FACE="Courier">SCROLL_PAGE_DOWN</FONT></TT>
</TD><TD WIDTH=200><FONT FACE="Courier">SCROLL_PAGE_UP</FONT>
</TD><TD WIDTH=159><FONT FACE="Courier">&nbsp;</FONT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=190><TT><FONT FACE="Courier">&nbsp;</FONT></TT>
</TD><TD WIDTH=200><FONT FACE="Courier">&nbsp;</FONT></TD><TD WIDTH=159><FONT FACE="Courier">&nbsp;</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=190><TT><FONT FACE="Courier">WINDOW_DEICONIFY</FONT></TT>
</TD><TD WIDTH=200><FONT FACE="Courier">WINDOW_DESTROY</FONT>
</TD><TD WIDTH=159><FONT FACE="Courier">WINDOW_EXPOSE</FONT></TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=190><TT><FONT FACE="Courier">WINDOW_ICONIFY</FONT></TT>
</TD><TD WIDTH=200><FONT FACE="Courier">WINDOW_MOVED</FONT></TD>
<TD WIDTH=159><FONT FACE="Courier">&nbsp;</FONT></TD></TR>
</TABLE></CENTER>
<H3><A NAME="Usage">Usage</A></H3>
<P>
The <TT><FONT FACE="Courier">id</FONT></TT> field is used by the
AWT (and possibly your own Java code) to distinguish between event
types. The information associated with an event varies depending
on the type of event. For example, the <TT><FONT FACE="Courier">MOUSE_DOWN</FONT></TT>
event type is generated when a mouse button is pressed. Because
the coordinates of the mouse often are used when handling a mouse
button-click event, the <TT><FONT FACE="Courier">x</FONT></TT>
and <TT><FONT FACE="Courier">y</FONT></TT> member variables of
<TT><FONT FACE="Courier">Event</FONT></TT> are filled in with
the current mouse coordinates.
<P>
Some event information is meaningless in the context of other
types of events, so it's important to understand which member
variables of the <TT><FONT FACE="Courier">Event</FONT></TT> class
are valid in particular circumstances. Table 21.2 lists the member
variables of the <TT><FONT FACE="Courier">Event</FONT></TT> class
that are valid for each different type of event. Keep in mind
that the <TT><FONT FACE="Courier">target</FONT></TT> and <TT><FONT FACE="Courier">id</FONT></TT>
variables are valid for every type. Also, some event types are
never generated by the AWT, so their valid variables are all unknown.
<BR>
<P>
<CENTER><B>Table 21.2. Valid member variables for different events.</B></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=295><I>Event</I></TD><TD WIDTH=295><I>Valid Fields</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">ACTION_EVENT</FONT></TT>
</TD><TD WIDTH=295><TT><FONT FACE="Courier">arg</FONT></TT>*</TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">LIST_DESELECT</FONT></TT>
</TD><TD WIDTH=295><TT><FONT FACE="Courier">arg</FONT></TT></TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">LIST_SELECT</FONT></TT>
</TD><TD WIDTH=295><TT><FONT FACE="Courier">arg</FONT></TT></TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">GOT_FOCUS</FONT></TT>
</TD><TD WIDTH=295>none</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">LOST_FOCUS</FONT></TT>
</TD><TD WIDTH=295>none</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">LOAD_FILE</FONT></TT>
</TD><TD WIDTH=295>never generated</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">SAVE_FILE</FONT></TT>
</TD><TD WIDTH=295>never generated</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">MOUSE_DOWN</FONT></TT>
</TD><TD WIDTH=295><TT><FONT FACE="Courier">when</FONT></TT>, <TT><FONT FACE="Courier">x</FONT></TT>, <TT><FONT FACE="Courier">y</FONT></TT>, <TT><FONT FACE="Courier">modifiers</FONT></TT>, <TT><FONT FACE="Courier">clickCount</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">MOUSE_DRAG</FONT></TT>
</TD><TD WIDTH=295><TT><FONT FACE="Courier">when</FONT></TT>, <TT><FONT FACE="Courier">x</FONT></TT>, <TT><FONT FACE="Courier">y</FONT></TT>, <TT><FONT FACE="Courier">modifiers</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">MOUSE_ENTER</FONT></TT>
</TD><TD WIDTH=295><TT><FONT FACE="Courier">when</FONT></TT>, <TT><FONT FACE="Courier">x</FONT></TT>, <TT><FONT FACE="Courier">y</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">MOUSE_EXIT</FONT></TT>
</TD><TD WIDTH=295><TT><FONT FACE="Courier">when</FONT></TT>, <TT><FONT FACE="Courier">x</FONT></TT>, <TT><FONT FACE="Courier">y</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">MOUSE_MOVE</FONT></TT>
</TD><TD WIDTH=295><TT><FONT FACE="Courier">when</FONT></TT>, <TT><FONT FACE="Courier">x</FONT></TT>, <TT><FONT FACE="Courier">y</FONT></TT>, <TT><FONT FACE="Courier">modifiers</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">MOUSE_UP</FONT></TT>
</TD><TD WIDTH=295><TT><FONT FACE="Courier">when</FONT></TT>, <TT><FONT FACE="Courier">x</FONT></TT>, <TT><FONT FACE="Courier">y</FONT></TT>, <TT><FONT FACE="Courier">modifiers</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">SCROLL_ABSOLUTE</FONT></TT>
</TD><TD WIDTH=295><TT><FONT FACE="Courier">arg</FONT></TT></TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">SCROLL_LINE_DOWN</FONT></TT>
</TD><TD WIDTH=295><TT><FONT FACE="Courier">arg</FONT></TT></TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">SCROLL_LINE_UP</FONT></TT>
</TD><TD WIDTH=295><TT><FONT FACE="Courier">arg</FONT></TT></TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">SCROLL_PAGE_DOWN</FONT></TT>
</TD><TD WIDTH=295><TT><FONT FACE="Courier">arg</FONT></TT></TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">SCROLL_PAGE_UP</FONT></TT>
</TD><TD WIDTH=295><TT><FONT FACE="Courier">arg</FONT></TT></TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">KEY_ACTION</FONT></TT>
</TD><TD WIDTH=295><TT><FONT FACE="Courier">when</FONT></TT>, <TT><FONT FACE="Courier">x</FONT></TT>, <TT><FONT FACE="Courier">y</FONT></TT>, <TT><FONT FACE="Courier">key</FONT></TT>, <TT><FONT FACE="Courier">modifiers</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">KEY_ACTION_RELEASE</FONT></TT>
</TD><TD WIDTH=295><TT><FONT FACE="Courier">when</FONT></TT>, <TT><FONT FACE="Courier">x</FONT></TT>, <TT><FONT FACE="Courier">y</FONT></TT>, <TT><FONT FACE="Courier">key</FONT></TT>, <TT><FONT FACE="Courier">modifiers</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">KEY_PRESS</FONT></TT>
</TD><TD WIDTH=295><TT><FONT FACE="Courier">when</FONT></TT>, <TT><FONT FACE="Courier">x</FONT></TT>, <TT><FONT FACE="Courier">y</FONT></TT>, <TT><FONT FACE="Courier">key</FONT></TT>, <TT><FONT FACE="Courier">modifiers</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">KEY_RELEASE</FONT></TT>
</TD><TD WIDTH=295><TT><FONT FACE="Courier">when</FONT></TT>, <TT><FONT FACE="Courier">x</FONT></TT>, <TT><FONT FACE="Courier">y</FONT></TT>, <TT><FONT FACE="Courier">key</FONT></TT>, <TT><FONT FACE="Courier">modifiers</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">WINDOW_DEICONIFY</FONT></TT>
</TD><TD WIDTH=295>none</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">WINDOW_DESTROY</FONT></TT>
</TD><TD WIDTH=295>none</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">WINDOW_EXPOSE</FONT></TT>
</TD><TD WIDTH=295>never generated</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">WINDOW_ICONIFY</FONT></TT>
</TD><TD WIDTH=295>none</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">WINDOW_MOVED</FONT></TT>
</TD><TD WIDTH=295><TT><FONT FACE="Courier">x</FONT></TT>, <TT><FONT FACE="Courier">y</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=590>(* For <TT><FONT FACE="Courier">MenuItem</FONT></TT> and <TT><FONT FACE="Courier">CheckboxMenuItem</FONT></TT> objects, the fields <TT><FONT FACE="Courier">when</FONT></TT> and <TT><FONT 
FACE="Courier">modifiers</FONT></TT> are also valid. Also keep in mind that the <TT><FONT FACE="Courier">target</FONT></TT> and <TT><FONT FACE="Courier">id</FONT></TT> variables are valid for all events.)
</TD></TR>
</TABLE></CENTER>
<H2><A NAME="JavaInputEvents"><FONT SIZE=5 COLOR=#FF0000>Java
Input Events</FONT></A></H2>
<P>
As you've learned throughout the chapter, user input in Java is
handled through an event-driven architecture. When the user interacts
with an input device, it results in an input event being dispatched
to the component with the input focus. In most cases, this component
is the applet window. An input event is a special type of event
that notifies an applet that something has occurred on an input
device. An example of an input event is a movement of the mouse.
<P>
Input events are crucial in Java programs because they provide
a means of handling user responses. If Java applets could not
monitor user responses, they wouldn't be very interactive, which
is one of the primary benefits of Java applets. Java user event
responses come in two varieties, which correspond to the input
devices supported by Java. The two types of input events supported
in the current release of Java follow:
<UL>
<LI><FONT COLOR=#000000>Keyboard events</FONT>
<LI><FONT COLOR=#000000>Mouse events</FONT>
</UL>
<P>
Keyboard events are events generated by a key press on the keyboard.
Whenever the user presses a key, a keyboard event is generated
that can be trapped and handled by the applet with the input focus.
Actually, a key press generates two events, a key down event and
a key up event. You'll learn more about these two types in a moment.
<P>
Mouse events are generated by mouse clicks and movements. Every
mouse click and mouse movement generates a corresponding mouse
input event. Like key presses, mouse clicks actually come as a
series of events; a mouse-click down event and a mouse-click up
event. There is also a mouse event specifically targeted at mouse
dragging. Mouse dragging occurs when the mouse is moved with the
button down. Applets wanting to respond to mouse clicks and movement
simply have to process these events and take action accordingly.
You learn more about processing mouse events a little later in
this chapter.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
You may have noticed in the discussion of mouse events the mention of the mouse <I>button</I>, as opposed to the mouse <I>buttons</I>. This is intentional because Java only supports a single mouse button. This may seem limiting to users on some platforms, 
such as Windows, but keep in mind that Java is designed to support as many platforms as possible. Considering the fact that some platforms have mice with a single button, such as Macintosh, it makes sense for Java to support only a single button.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<H3><A NAME="KeyboardEvents">Keyboard Events</A></H3>
<P>
Java keyboard events are generated when the user presses or releases
a key. There are two standard keyboard event-handler methods supported
by the <TT><FONT FACE="Courier">Component</FONT></TT> class: <TT><FONT FACE="Courier">keyDown</FONT></TT>
and <TT><FONT FACE="Courier">keyUp</FONT></TT>. These two methods
are defined as:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean keyDown(Event evt, int
key)<BR>
public boolean keyUp(Event evt, int key)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">keyDown</FONT></TT> method is called
in response to the user pressing a key, and the <TT><FONT FACE="Courier">keyUp</FONT></TT>
method is called in response to the user releasing a key. Both
methods are passed an <TT><FONT FACE="Courier">Event</FONT></TT>
object and an integer key value parameter. The key value parameter,
<TT><FONT FACE="Courier">key</FONT></TT>, specifies which key
was pressed or released. The <TT><FONT FACE="Courier">Event</FONT></TT>
object parameter contains extra information relating to the keyboard
event, such as whether the Shift key was held down when the key
was pressed.
<P>
The <TT><FONT FACE="Courier">Event</FONT></TT> object contains
constants representing the different keys that can be specified
in the <TT><FONT FACE="Courier">key</FONT></TT> parameter. Table
21.3 shows a list of some of the more useful key constants.<BR>
<P>
<CENTER><B>Table 21.3. Useful key constants.</B></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=78><I>Constant</I></TD><TD WIDTH=101><I>Key</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=78><TT><FONT FACE="Courier">UP</FONT></TT></TD>
<TD WIDTH=101>Up arrow</TD></TR>
<TR VALIGN=TOP><TD WIDTH=78><TT><FONT FACE="Courier">DOWN</FONT></TT></TD>
<TD WIDTH=101>Down arrow</TD></TR>
<TR VALIGN=TOP><TD WIDTH=78><TT><FONT FACE="Courier">LEFT</FONT></TT></TD>
<TD WIDTH=101>Left arrow</TD></TR>
<TR VALIGN=TOP><TD WIDTH=78><TT><FONT FACE="Courier">RIGHT</FONT></TT></TD>
<TD WIDTH=101>Right arrow</TD></TR>
<TR VALIGN=TOP><TD WIDTH=78><TT><FONT FACE="Courier">HOME</FONT></TT></TD>
<TD WIDTH=101>Home</TD></TR>
<TR VALIGN=TOP><TD WIDTH=78><TT><FONT FACE="Courier">END</FONT></TT></TD>
<TD WIDTH=101>End</TD></TR>
<TR VALIGN=TOP><TD WIDTH=78><TT><FONT FACE="Courier">PGUP</FONT></TT></TD>
<TD WIDTH=101>Page Up</TD></TR>
<TR VALIGN=TOP><TD WIDTH=78><TT><FONT FACE="Courier">PGDN</FONT></TT></TD>
<TD WIDTH=101>Page Down</TD></TR>
</TABLE></CENTER>
<P>
<P>
To check if the key pressed or released is one of these keys,
you override <TT><FONT FACE="Courier">keyDown</FONT></TT> or <TT><FONT FACE="Courier">keyUp</FONT></TT>
and compare the value of <TT><FONT FACE="Courier">key</FONT></TT>
to one of the constants. Following is an example of overriding
<TT><FONT FACE="Courier">keyDown</FONT></TT> to check for the
user pressing one of the arrow keys:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean keyDown(Event evt, int
key) {<BR>
&nbsp;&nbsp;switch (key) {<BR>
&nbsp;&nbsp;case Event.LEFT:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// left arrow key pressed<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;case Event.RIGHT:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// right arrow key pressed<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;case Event.UP:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// up arrow key pressed<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;case Event.DOWN:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// down arrow key pressed<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return true;<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
This code shows that handling different key presses is as easy
as providing a <TT><FONT FACE="Courier">switch</FONT></TT> statement
with <TT><FONT FACE="Courier">case</FONT></TT> clauses for each
key. Although the example here used the <TT><FONT FACE="Courier">keyDown</FONT></TT>
method for handling key presses, the <TT><FONT FACE="Courier">keyUp</FONT></TT>
method works in the same fashion.
<P>
If you need more details about the key that was pressed or released,
you can use the <TT><FONT FACE="Courier">Event</FONT></TT> object
passed into the <TT><FONT FACE="Courier">keyDown</FONT></TT> and
<TT><FONT FACE="Courier">keyUp</FONT></TT> methods. The typical
usage of the <TT><FONT FACE="Courier">Event</FONT></TT> object
in regard to key processing is to check for <I>modifier keys</I>.
Modifier keys are keys that can be pressed in conjunction with
other input events, such as the Shift and Control keys. The three
methods in <TT><FONT FACE="Courier">Event</FONT></TT> used to
check the status of modifier keys follow:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean shiftDown()<BR>
public boolean controlDown()<BR>
public boolean metaDown()</FONT></TT>
</BLOCKQUOTE>
<P>
All these methods return Boolean values specifying whether or
not the key in question is being held down. Checking the status
of the modifier keys is necessary sometimes in applets that make
heavy use of the mouse. For example, you may have a drawing applet
that performs a different function if the Shift key is held down
and the mouse is moved.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
The <TT><FONT FACE="Courier">shiftDown</FONT></TT>, <TT><FONT FACE="Courier">controlDown</FONT></TT>, and <TT><FONT FACE="Courier">metaDown</FONT></TT> methods actually check for the flags <TT><FONT FACE="Courier">SHIFT_MASK</FONT></TT>, <TT><FONT 
FACE="Courier">CTRL_MASK</FONT></TT>, and <TT><FONT FACE="Courier">META_MASK</FONT></TT>, which are defined in the <TT><FONT FACE="Courier">Event</FONT></TT> class. You can check for any of these flags yourself in lieu of using the comparable methods. 
There is also an <TT><FONT FACE="Courier">ALT_MASK</FONT></TT> flag which specifies that the Alt key was pressed.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<H3><A NAME="MouseEvents">Mouse Events</A></H3>
<P>
Mouse events occur when the user moves the mouse or clicks the
mouse button. There are a handful of methods for handling mouse
events. These methods follow:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean mouseUp(Event evt, int
x, int y)<BR>
public boolean mouseDown(Event evt, int x, int y)<BR>
public boolean mouseMove(Event evt, int x, int y)<BR>
public boolean mouseDrag(Event evt, int x, int y)<BR>
public boolean mouseEnter(Event evt, int x, int y)<BR>
public boolean mouseExit(Event evt, int x, int y)</FONT></TT>
</BLOCKQUOTE>
<P>
All these methods are passed an <TT><FONT FACE="Courier">Event</FONT></TT>
object and two integer parameters representing the X and Y position
of the mouse pointer. The <TT><FONT FACE="Courier">mouseUp</FONT></TT>
and <TT><FONT FACE="Courier">mouseDown</FONT></TT> methods are
called when the user presses and releases the mouse button. The
<TT><FONT FACE="Courier">mouseMove</FONT></TT> method is called
when the mouse is moved. The <TT><FONT FACE="Courier">mouseDrag</FONT></TT>
method is very similar to the <TT><FONT FACE="Courier">mouseMove</FONT></TT>
method; the only difference is that <TT><FONT FACE="Courier">mouseDrag</FONT></TT>
is called when the mouse is moved with the button held down. The
<TT><FONT FACE="Courier">mouseEnter</FONT></TT> and <TT><FONT FACE="Courier">mouseExit</FONT></TT>
methods are used to track when the mouse enters and exits the
applet window.
<P>
You can use the <TT><FONT FACE="Courier">x</FONT></TT> and <TT><FONT FACE="Courier">y</FONT></TT>
parameters passed into the mouse event handler methods to perform
any processing based on the position of the mouse. The following
code snippet contains an example of overriding the <TT><FONT FACE="Courier">mouseMove</FONT></TT>
method to output the mouse position to standard output:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean mouseMove(Event evt, int
x, int y) {<BR>
&nbsp;&nbsp;System.out.println(&quot;Mouse position = (&quot;
+ x + &quot;, &quot; + y + &quot;)&quot;);<BR>
&nbsp;&nbsp;return true;<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
Similar to the keyboard event handlers, you can use the <TT><FONT FACE="Courier">Event</FONT></TT>
object passed in the mouse event handlers to find out additional
information such as the status of modifier keys.
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
In this chapter, you learned about Java events and the event-driven
architecture necessary to support them. More specifically, you
learned about Java input events, including the input devices capable
of generating them and how they are handled by the Java AWT library.
You saw examples of using the input event-handler methods to capture
and respond to keyboard and mouse events.
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch20.htm"><IMG SRC="http://docs.rinet.ru/JavDev/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="http://docs.rinet.ru/JavDev/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/JavDev/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch22.htm"><IMG 
SRC="http://docs.rinet.ru/JavDev/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>

