
<HTML>

<HEAD>
   <TITLE>Chapter 29 -- Packages java.awt
image</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">










<H1><FONT COLOR=#FF0000>Chapter 29</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Packages </FONT><TT><FONT SIZE=6 COLOR=#FF0000 FACE="Courier">java.awt
image</FONT></FONT></TT>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>

<UL>
<LI><A HREF="#ColorModel" >ColorModel</A>
<LI><A HREF="#CropImageFilter" >CropImageFilter</A>
<LI><A HREF="#DirectColorModel" >DirectColorModel</A>
<LI><A HREF="#FilteredImageSource" >FilteredImageSource</A>
<LI><A HREF="#ImageFilter" >ImageFilter</A>
<LI><A HREF="#IndexColorModel" >IndexColorModel</A>
<LI><A HREF="#MemoryImageSource" >MemoryImageSource</A>
<LI><A HREF="#PixelGrabber" >PixelGrabber</A>
<LI><A HREF="#RGBImageFilter" >RGBImageFilter</A>
<LI><A HREF="#ImageConsumer" >ImageConsumer</A>
<LI><A HREF="#ImageObserver" >ImageObserver</A>
<LI><A HREF="#ImageProducer" >ImageProducer</A>
</UL>
<HR>
<P>
Although nearly all of the <TT><FONT FACE="Courier">java.awt</FONT></TT>
package consisted of graphical user interface components to be
used for screen layout, the <TT><FONT FACE="Courier">java.awt.image</FONT></TT>
package contains classes that provide functionality for various
image transformations and operations. The key interfaces within
this package are the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
and <TT><FONT FACE="Courier">ImageProducer</FONT></TT> interfaces
because they define the behavior for  consumers and producers
of images. Table 29.1 shows the contents of the <TT><FONT FACE="Courier">java.awt.image</FONT></TT>
package and Figure 29.1 shows its contents graphically.
<P>
<A HREF="http://docs.rinet.ru/JavDev/f29-1.gif" ><B>Figure 29.1:</B> <I>The contents of package</I> java.awt.image.</A>
<BR>
<P>
<CENTER><B>Table 29.1. Contents of package </B><TT><B><FONT FACE="Courier">java.awt.image.</FONT></B></TT></CENTER>

<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=4%><I>Class Index</I></TD><TD WIDTH=147><I>Interface Index</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier">ColorModel</FONT></TT>
</TD><TD WIDTH=147><TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier">CropImageFilter</FONT></TT>
</TD><TD WIDTH=147><TT><FONT FACE="Courier">ImageObserver</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier">DirectColorModel</FONT></TT>
</TD><TD WIDTH=147><TT><FONT FACE="Courier">ImageProducer</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier">FilteredImageSource</FONT></TT>
</TD><TD WIDTH=147>&nbsp;</TD></TR>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier">ImageFilter</FONT></TT>
</TD><TD WIDTH=147><FONT FACE="Courier">&nbsp;</FONT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier">IndexColorModel</FONT></TT>
</TD><TD WIDTH=147><FONT FACE="Courier">&nbsp;</FONT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier">MemoryImageSource</FONT></TT>
</TD><TD WIDTH=147><FONT FACE="Courier">&nbsp;</FONT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier">PixelGrabber</FONT></TT>
</TD><TD WIDTH=147><FONT FACE="Courier">&nbsp;</FONT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier">RGBImageFilter</FONT></TT>
</TD><TD WIDTH=147>&nbsp;</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="ColorModel"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></A></TD><TD WIDTH=499>
<H2><FONT SIZE=5 COLOR=#FF0000>ColorModel</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Extends.gif"></FONT></TT></TD>
<TD><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
The class hierarchy for the <TT><FONT FACE="Courier">ColorModel</FONT></TT>
class derives from class <TT><FONT FACE="Courier">java.lang.Object</FONT></TT>.
The <TT><FONT FACE="Courier">ColorModel</FONT></TT> class is an
abstract class that provides functions for translating pixel values
into RGB color values. <TT><FONT FACE="Courier">ColorModel</FONT></TT>'s
overall derivation can be seen in Figure 29.1.
<P>
Listing 29.1 shows the declarations for all of the public methods
included in the <TT><FONT FACE="Courier">java.awt.image.ColorModel</FONT></TT>
class.
<HR>
<BLOCKQUOTE>
<B>Listing 29.1. Public members of </B><TT><B><FONT FACE="Courier">java.awt.image.ColorModel</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract class ColorModel {<BR>
&nbsp;&nbsp;public static ColorModel getRGBdefault()<BR>
&nbsp;&nbsp;public ColorModel(int bits)<BR>
&nbsp;&nbsp;public int getPixelSize()<BR>
&nbsp;&nbsp;public abstract int getRed(int pixel)<BR>
&nbsp;&nbsp;public abstract int getGreen(int pixel)<BR>
&nbsp;&nbsp;public abstract int getBlue(int pixel)<BR>
&nbsp;&nbsp;public abstract int getAlpha(int pixel)<BR>
&nbsp;&nbsp;public int getRGB(int pixel)<BR>
&nbsp;&nbsp;public void finalize()<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public ColorModel(int bits)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">ColorModel()</FONT></TT> constructor
constructs a color model that describes a pixel of the specified
number of bits.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">bits</FONT> is an integer value containing the number of bits that will describe a pixel using this <TT><FONT FACE="Courier">ColorModel</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetRGBdefault</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static ColorModel getRGBdefault()</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getRGBdefault()</FONT></TT> method
returns the default <TT><FONT FACE="Courier">ColorModel</FONT></TT>
that is used throughout all AWT image interfaces. This default
<TT><FONT FACE="Courier">ColorModel</FONT></TT> uses a pixel format
that encapsulates alpha, red, green, and blue color values (eight
bits each), using the following methodology: <TT><FONT FACE="Courier">0xAARRGGBB</FONT></TT>.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD>A <TT><FONT FACE="Courier">ColorModel</FONT></TT> object representing the default color model for all AWT image interfaces.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetPixelSize</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int getPixelSize()</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getPixelSize()</FONT></TT> method
returns the size of the <TT><FONT FACE="Courier">ColorModel</FONT></TT>'s
pixel.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD>An integer value representing the number of bits that make up a pixel in this <TT><FONT FACE="Courier">ColorModel</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetRed</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract int getRed(int pixel)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getRed()</FONT></TT> method returns
the red component of the specified pixel.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">pixel</FONT></TT> is an integer containing the pixel representation for this color model.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD>An integer value representing the red component of the pixel.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetGreen</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract int getGreen(int pixel)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getGreen()</FONT></TT> method returns
the green component of the specified pixel.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">pixel</FONT></TT> is an integer containing the pixel representation for this color model.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD>An integer value representing the green component of the pixel.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetBlue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract int getBlue(int pixel)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getBlue()</FONT></TT> method returns
the blue component of the specified pixel.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">pixel</FONT></TT> is an integer containing the pixel representation for this color model.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD>An integer value representing the blue component of the pixel.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetAlpha</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract int getAlpha(int pixel)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getAlpha()</FONT></TT> method returns
the alpha component of the specified pixel.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">pixel</FONT></TT> is an integer containing the pixel representation for this color model.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD >An integer value representing the alpha component of the pixel.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetRGB</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int getRGB(int pixel)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getRGB()</FONT></TT> method returns
the RGB value of the pixel using the default color model.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">pixel</FONT></TT> is an integer containing the pixel representation for this color model.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD >An integer value representing the RGB value of the pixel using the default color model.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Finalize</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void finalize()</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">finalize()</FONT></TT> method is
used to clean up internal data allocated by the <TT><FONT FACE="Courier">ColorModel</FONT></TT>.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD><TT><FONT FACE="Courier">The finalize()</FONT></TT> method does not return a value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="CropImageFilter"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></A></TD><TD WIDTH=499>
<H2><FONT SIZE=5 COLOR=#FF0000>CropImageFilter</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Extends.gif"></FONT></TT></TD>
<TD><FONT FACE="Courier">ImageFilter</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
The class hierarchy for the <TT><FONT FACE="Courier">CropImageFilter</FONT></TT>
class derives from class <TT><FONT FACE="Courier">java.awt.image.ImageFilter</FONT></TT>.
The <TT><FONT FACE="Courier">CropImageFilter</FONT></TT> class
provides the ability to extract a rectangular subset of a given
image (cropping it). This class is used in conjunction with a
<TT><FONT FACE="Courier">FilteredImageSource</FONT></TT> class
to provide a source for the cropped image. <TT><FONT FACE="Courier">CropImageFilter</FONT></TT>'s
overall derivation can be seen in Figure 29.1.
<P>
Listing 29.2 shows the declarations for all of the public methods
included in the <TT><FONT FACE="Courier">java.awt.image.CropImageFilter</FONT></TT>
class.
<HR>
<BLOCKQUOTE>
<B>Listing 29.2. Public members of </B><TT><B><FONT FACE="Courier">java.awt.image.CropImageFilter</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class CropImageFilter extends
ImageFilter {<BR>
&nbsp;&nbsp;public CropImageFilter(int x, int y, int w, int h)
<BR>
public void setProperties(Hashtable props)<BR>
&nbsp;&nbsp;public void setDimensions(int w, int h)<BR>
public void setPixels(int x, int y, int w, int h,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ColorModel
model, byte pixels[], int off,<BR>
int scansize)<BR>
&nbsp;&nbsp;public void setPixels(int x, int y, int w, int h,
<BR>
ColorModel model, int pixels[], int off,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
scansize)<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">CropImageFilter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">CropImageFilter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public CropImageFilter(int x, int y,
int w, int h)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">CropImageFilter()</FONT></TT> constructor
constructs a <TT><FONT FACE="Courier">CropImageFilter</FONT></TT>
to crop an image using a cropping rectangle. The dimensions of
this rectangle are specified using the following parameters.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">x</FONT></TT> is the top x coordinate of the cropping rectangle containing the image.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">y</FONT></TT> is the top y coordinate of the cropping rectangle containing the image.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">w</FONT></TT> is the width of the rectangular cropping area.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">h</FONT></TT> is the height of the rectangular cropping area.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetProperties</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">CropImageFilter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setProperties(Hashtable props)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">setProperties()</FONT></TT> method
takes the <TT><FONT FACE="Courier">props</FONT></TT> parameter
from a source object and adds the <TT><FONT FACE="Courier">croprect</FONT></TT>
property to it to identify the region being cropped.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">props</FONT></TT> is a <TT><FONT FACE="Courier">Hashtable</FONT></TT> object containing properties from the source object.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Overr.gif"></TD><TD >setProperties() in class ImageFilter.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetDimensions</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">CropImageFilter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setDimensions(int w, int
h)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">setDimensions()</FONT></TT> method
overrides the source's dimensions and passes the dimensions of
the cropped region to the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
interface.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">w</FONT></TT> is the width value in pixels.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">h</FONT></TT> is the height value in pixels.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Overr.gif"></TD><TD>setDimensions() in class ImageFilter.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4>SetPixels</H4>
</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">CropImageFilter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setPixels(int x, int y, int
w, int h, ColorModel model,<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
byte pixels[], int off, int scansize)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">setPixels()</FONT></TT> method filters
the <TT><FONT FACE="Courier">pixels</FONT></TT> array by determining
which pixels lie in the cropped region. Those that do are passed
on to the <TT><FONT FACE="Courier">Consumer</FONT></TT> interface.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">x</FONT></TT> is the x coordinate of the image.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">y</FONT></TT> is the y coordinate of the image.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">w</FONT></TT> is the width of the image.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">h</FONT></TT> is the height of the image.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">model</FONT></TT> is the <TT><FONT FACE="Courier">ColorModel</FONT></TT> that the <TT><FONT FACE="Courier">pixels</FONT></TT> array conforms to.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">pixels</FONT></TT> is a byte array containing pixels to be examined.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">off</FONT></TT> is a variable that is passed on to the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>'s <TT><FONT FACE="Courier">setPixels()</FONT></TT> method. For 
more information, see the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> interface documentation later in this chapter.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">scansize</FONT></TT> is an integer value representing the scansize of the operation.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Overr.gif"></TD><TD >setPixels() in class ImageFilter.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetPixels</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">CropImageFilter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setPixels(int x, int y, int
w, int h, ColorModel model,<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int pixels[], int off, int scansize)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">setPixels()</FONT></TT> method filters
the <TT><FONT FACE="Courier">pixels</FONT></TT> array by determining
which pixels lie in the cropped region. Those that do are passed
on to the <TT><FONT FACE="Courier">Consumer</FONT></TT> interface.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">x</FONT></TT> is the x coordinate of the image.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">y</FONT></TT> is the y coordinate of the image.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">w</FONT></TT> is the width of the image.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">h</FONT></TT> is the height of the image.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">model</FONT></TT> is the <TT><FONT FACE="Courier">ColorModel</FONT></TT> that the <TT><FONT FACE="Courier">pixels</FONT></TT> array conforms to.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">pixels</FONT></TT> is an array of integers containing pixels to be examined.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">off</FONT></TT> is a variable that is passed on to the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>'s <TT><FONT FACE="Courier">setPixels()</FONT></TT> method. For more information, see the 
<TT><FONT FACE="Courier">ImageConsumer</FONT></TT> interface documentation later in this chapter.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">scansize</FONT></TT> is an integer value representing the scansize of the operation.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Overr.gif"></TD><TD >setPixels() in class ImageFilter.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="DirectColorModel"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></A></TD><TD WIDTH=499>
<H2><FONT SIZE=5 COLOR=#FF0000>DirectColorModel</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Extends.gif"></FONT></TT></TD>
<TD><FONT FACE="Courier">ColorModel</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
The class hierarchy for the <TT><FONT FACE="Courier">DirectColorModel</FONT></TT>
class derives from class <TT><FONT FACE="Courier">java.awt.image.ColorModel</FONT></TT>.
The <TT><FONT FACE="Courier">DirectColorModel</FONT></TT> class
specifies translations from pixel values to RGB color values for
pixels that have the colors embedded directly in the pixel bits.
The <TT><FONT FACE="Courier">DirectColorModel</FONT></TT>'s overall
derivation can be seen in Figure 29.1.
<P>
Listing 29.3 shows the declarations for all of the public methods
included in the <TT><FONT FACE="Courier">java.awt.image.DirectColorModel</FONT></TT>
class.
<HR>
<BLOCKQUOTE>
<B>Listing 29.3. Public members of </B><TT><B><FONT FACE="Courier">java.awt.image.DirectColorModel</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class DirectColorModel extends
ColorModel {<BR>
&nbsp;&nbsp;public DirectColorModel(int bits, int rmask, int gmask,
int bmask)<BR>
&nbsp;&nbsp;public DirectColorModel(int bits, int rmask, int gmask,
int bmask, int amask)<BR>
&nbsp;&nbsp;final public int getRedMask()<BR>
&nbsp;&nbsp;final public int getGreenMask()<BR>
&nbsp;&nbsp;final public int getBlueMask()<BR>
&nbsp;&nbsp;final public int getAlphaMask()<BR>
&nbsp;&nbsp;final public int getRed(int pixel)<BR>
&nbsp;&nbsp;final public int getGreen(int pixel)<BR>
&nbsp;&nbsp;final public int getBlue(int pixel)<BR>
&nbsp;&nbsp;final public int getAlpha(int pixel)<BR>
&nbsp;&nbsp;final public int getRGB(int pixel)<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">DirectColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DirectColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public DirectColorModel(int bits, int
rmask, int gmask, int bmask)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">DirectColorModel()</FONT></TT> constructor
constructs a <TT><FONT FACE="Courier">DirectColorModel</FONT></TT>
using the specified parameters. <TT><FONT FACE="Courier">DirectColorModel</FONT></TT>s
built using this constructor have a default alpha mask value of
255. An alpha mask is a value used to interpolate between the
each color value when two figures are overlaid.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">Bits</FONT></TT> is the number of bits used to represent a pixel.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">rmask</FONT></TT> is the number of bits required to represent the red component.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">gmask</FONT></TT> is the number of bits required to represent the green component.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">bmask</FONT></TT> is the number of bits required to represent the blue component.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">DirectColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DirectColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public DirectColorModel(int bits, int
rmask, int gmask, int bmask, int amask)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">DirectColorModel()</FONT></TT> constructor
constructs a <TT><FONT FACE="Courier">DirectColorModel</FONT></TT>
using the specified  parameters.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">bits</FONT></TT> is the number of bits used to represent a pixel.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">rmask</FONT></TT> is the number of bits required to represent the red component.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">gmask</FONT></TT> is the number of bits required to represent the green component.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">bmask</FONT></TT> is the number of bits required to represent the blue component.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">amask</FONT></TT> is the number of bits required to represent the alpha component.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetRedMask</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DirectColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">final public int getRedMask()</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getRedMask()</FONT></TT> method returns
the current red mask value.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD>An integer value representing the red mask value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetGreenMask</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DirectColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">final public int getGreenMask()</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getGreenMask()</FONT></TT> method
returns the current green mask value.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD>An integer value representing the green mask value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetBlueMask</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DirectColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">final public int getBlueMask()</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getBlueMask()</FONT></TT> method
returns the current blue mask value.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD>An integer value representing the blue mask value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetAlphaMask</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DirectColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">final public int getAlphaMask()</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getAlphaMask()</FONT></TT> method
returns the current alpha mask value.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD>An integer value representing the alpha mask value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetRed</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DirectColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">final public int getRed(int pixel)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getRed()</FONT></TT> method returns
the red component for the specified pixel in the range 0-255.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">pixel</FONT></TT> is an integer value representing a pixel under the <TT><FONT FACE="Courier">DirectColorModel</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD>An integer value representing the red component of the pixel.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetGreen</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DirectColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">final public int getGreen(int pixel)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getGreen()</FONT></TT> method returns
the green component for the specified pixel in the range  0-255.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">pixel</FONT></TT> is an integer value representing a pixel under the <TT><FONT FACE="Courier">DirectColorModel</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD>An integer value representing the green component of the pixel.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetBlue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DirectColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">final public int getBlue(int pixel)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getBlue()</FONT></TT> method returns
the blue component for the specified pixel in the range 0-255.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">pixel</FONT></TT> is an integer value representing a pixel under the <TT><FONT FACE="Courier">DirectColorModel</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD>An integer value representing the blue component of the pixel.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetAlpha</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DirectColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">final public int getAlpha(int pixel)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getAlpha()</FONT></TT> method returns
the alpha component for the specified pixel in the range  0-255.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">pixel</FONT></TT> is an integer value representing a pixel under the <TT><FONT FACE="Courier">DirectColorModel</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD>An integer value representing the alpha component of the pixel.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetRGB</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DirectColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">final public int getRGB(int pixel)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getRGB()</FONT></TT> method returns
the RGB color value for the specified pixel in the range 0-255.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">pixel</FONT></TT> is an integer value representing a pixel under the <TT><FONT FACE="Courier">DirectColorModel</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD>An integer value representing the RGB color value of the pixel using the default RGB color model.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="FilteredImageSource"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></A></TD>
<TD WIDTH=499>
<H2><FONT SIZE=5 COLOR=#FF0000>FilteredImageSource</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Extends.gif"></TD><TD><TT><FONT FACE="Courier">Object</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Implem.gif"></TD><TD ><TT><FONT FACE="Courier">ImageProducer</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
The class hierarchy for the <TT><FONT FACE="Courier">FilteredImageSource</FONT></TT>
class derives from class <TT><FONT FACE="Courier">java.lang.Object</FONT></TT>.
The <TT><FONT FACE="Courier">FilteredImageSource</FONT></TT> takes
as input an existing image and a filter object. It applies the
filter to the image to produce a new version of the original image.
The <TT><FONT FACE="Courier">FilteredImageSource</FONT></TT> class
implements the <TT><FONT FACE="Courier">ImageProducer</FONT></TT>
interface. <TT><FONT FACE="Courier">FilteredImageSource</FONT></TT>'s
overall derivation can be seen in Fig- ure 29.1.
<P>
Listing 29.4 shows the declarations for all of the public methods
included in the <TT><FONT FACE="Courier">java.awt.image.FilteredImageSource</FONT></TT>
class.
<HR>
<BLOCKQUOTE>
<B>Listing 29.4. Public members of </B><TT><B><FONT FACE="Courier">java.awt.image.FilteredImageSource</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class FilteredImageSource implements
ImageProducer {<BR>
&nbsp;&nbsp;public FilteredImageSource(ImageProducer orig, ImageFilter
imgf)<BR>
&nbsp;&nbsp;public synchronized void addConsumer(ImageConsumer
ic)<BR>
&nbsp;&nbsp;public synchronized boolean isConsumer(ImageConsumer
ic)<BR>
&nbsp;&nbsp;public synchronized void removeConsumer(ImageConsumer
ic)<BR>
&nbsp;&nbsp;public void startProduction(ImageConsumer ic)<BR>
&nbsp;&nbsp;public void requestTopDownLeftRightResend(ImageConsumer
ic)<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">FilteredImageSource</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FilteredImageSource</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public FilteredImageSource(ImageProducer
orig, ImageFilter imgf)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">FilteredImageSource()</FONT></TT>
constructor constructs a <TT><FONT FACE="Courier">FilteredImageSource</FONT></TT>
object, which takes a producer source and an <TT><FONT FACE="Courier">ImageFilter</FONT></TT>
to produce a filtered version of the image.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">Orig</FONT></TT> is an <TT><FONT FACE="Courier">ImageProducer</FONT></TT> interface that supplies the image source.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">Imgf</FONT></TT> is an <TT><FONT FACE="Courier">ImageFilter</FONT></TT> that filters the image to produce a new image.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">AddConsumer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FilteredImageSource</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized void addConsumer(ImageConsumer
ic)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">addConsumer()</FONT></TT> method
adds an <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> interface
to a list of consumers interested in image data.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">ic</FONT></TT> is an <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> interface to be added to a listof <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>s.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">IsConsumer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FilteredImageSource</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized boolean isConsumer(ImageConsumer
ic)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">isConsumer()</FONT></TT> method determines
whether the specified <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
is currently on the list of <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>s
for the image data.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">ic</FONT></TT> is an <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> interface to be used for the check.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD >A Boolean value that is <TT><FONT FACE="Courier">true</FONT></TT> if the specified <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> is on the list, <TT><FONT FACE="Courier">false</FONT></TT> if not.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">RemoveConsumer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FilteredImageSource</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized void removeConsumer(ImageConsumer
ic)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">removeConsumer()</FONT></TT> method
removes the specified <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
from the list of <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>s.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">ic</FONT></TT> is the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> interface to be removed from the list.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">StartProduction</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FilteredImageSource</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void startProduction(ImageConsumer
ic)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">startProduction()</FONT></TT> method
adds the specified <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
to the list of <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>s
and immediately starts delivery of the image data to the interface.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">ic</FONT></TT> is the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> that will be used to produce new image data.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">RequestTopDownLeftRightResend</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FilteredImageSource</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void requestTopDownLeftRightResend(ImageConsumer
ic)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">requestTopDownLeftRightResend()</FONT></TT>
method is used to deliver the image data to the specified <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
in top-down, left-right order.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">ic</FONT></TT> is the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> that will be the recipient of the image data when it is present.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="ImageFilter"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></A></TD><TD WIDTH=499>
<H2><FONT SIZE=5 COLOR=#FF0000>ImageFilter</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Extends.gif"></FONT></TT></TD>
<TD><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Implem.gif"></FONT></TT>
</TD><TD><FONT FACE="Courier">ImageConsumer</FONT>, <TT><FONT FACE="Courier">Cloneable</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>
The class hierarchy for the <TT><FONT FACE="Courier">ImageFilter</FONT></TT>
class derives from class <TT><FONT FACE="Courier">java.lang.Object</FONT></TT>.
The <TT><FONT FACE="Courier">ImageFilter</FONT></TT> class acts
as a base class for all image filtering classes. It implements
the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> and <TT><FONT FACE="Courier">Cloneable</FONT></TT>
interfaces. <TT><FONT FACE="Courier">ImageFilter</FONT></TT>'s
overall derivation can be seen in Figure 29.1.
<P>
Listing 29.5 shows the declarations for all of the public methods
included in the <TT><FONT FACE="Courier">java.awt.image.ImageFilter</FONT></TT>
class.
<HR>
<BLOCKQUOTE>
<B>Listing 29.5. Public members of </B><TT><B><FONT FACE="Courier">java.awt.image.ImageFilter</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class ImageFilter implements ImageConsumer,
Cloneable {<BR>
&nbsp;&nbsp;public ImageFilter getFilterInstance(ImageConsumer
ic)<BR>
&nbsp;&nbsp;public void setDimensions(int width, int height}<BR>
&nbsp;&nbsp;public void setProperties(Hashtable props)<BR>
&nbsp;&nbsp;public void setColorModel(ColorModel model)<BR>
&nbsp;&nbsp;public void setHints(int hints)<BR>
&nbsp;&nbsp;public void setPixels(int x, int y, int w, int h,
ColorModel model,<BR>
&nbsp;&nbsp;</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">byte
pixels[], int off, int scansize)<BR>
&nbsp;&nbsp;Public void setPixels(int x, int y, int w, int h,
ColorModel model,<BR>
&nbsp;&nbsp;</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">int
pixels[], int off,&nbsp;&nbsp;int scansize)<BR>
public void imageComplete(int status)<BR>
&nbsp;&nbsp;public void resendTopDownLeftRight(ImageProducer ip)
<BR>
&nbsp;&nbsp;public Object clone()<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">getFilterInstance</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ImageFilter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public ImageFilter getFilterInstance(ImageConsumer
ic)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getFilterInstance()</FONT></TT> method
returns an <TT><FONT FACE="Courier">ImageFilter</FONT></TT> object
that will be used to perform the filtering for the specified <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">ic</FONT></TT> is the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> that requires the image filtering.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD >An <TT><FONT FACE="Courier">ImageFilter</FONT></TT> object to be used to perform the image filtering.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetDimensions</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ImageFilter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setDimensions(int width,
int height}</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">setDimensions()</FONT></TT> method
filters the information provided in the <TT><FONT FACE="Courier">setDimensions()</FONT></TT>
method of the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
interface.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">width</FONT></TT> is the filter width.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">height</FONT></TT> is the filter height.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetProperties</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ImageFilter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setProperties(Hashtable props)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">setProperties()</FONT></TT> method
passes the <TT><FONT FACE="Courier">props</FONT></TT> value along
after a property is added that identifies which filters have been
applied to the image.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">props</FONT></TT> is a <TT><FONT FACE="Courier">Hashtable</FONT></TT> object containing a set of properties. For more information on the <TT><FONT 
FACE="Courier">Hashtable</FONT></TT> object, see the <TT><FONT FACE="Courier">java.util</FONT></TT> package documentation in <A HREF="ch34.htm" >Chapter 34</A>, &quot;Package <TT><FONT FACE="Courier">java.util</FONT></TT>.&quot;
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">setColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ImageFilter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setColorModel(ColorModel
model)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">setColorModel()</FONT></TT> method
filters the information provided in the <TT><FONT FACE="Courier">setColorModel()</FONT></TT>
method of the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
interface. For more information on the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
interface, see the documentation later in this chapter.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD >model is a ColorModel object.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetHints</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ImageFilter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setHints(int hints)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">setHints()</FONT></TT> method filters
the information provided in the <TT><FONT FACE="Courier">setHints()</FONT></TT>
method of the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
interface. For more information on the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
interface, see the documentation later in this chapter.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">hints</FONT></TT> is an integer value containing hints.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetPixels</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ImageFilter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setPixels(int x, int y, int
w, int h, ColorModel model,<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
byte pixels[], int off, int scansize)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">setPixels()</FONT></TT> method filters
the <TT><FONT FACE="Courier">pixels</FONT></TT> array. The pixels
that pass through the filter are passed onto the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
interface.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">x</FONT></TT> is the x coordinate of the image.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">y</FONT></TT> is the y coordinate of the image.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">w</FONT></TT> is the width of the image.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">h</FONT></TT> is the height of the image.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">model</FONT></TT> is the <TT><FONT FACE="Courier">ColorModel</FONT></TT> that the <TT><FONT FACE="Courier">pixels</FONT></TT> array conforms to.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">pixels</FONT></TT> is a byte array containing pixels to be examined.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">off</FONT></TT> is a variable that is passed on to the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>'s <TT><FONT FACE="Courier">setPixels()</FONT></TT> method. For more information, see the 
<TT><FONT FACE="Courier">ImageConsumer</FONT></TT> interface documentation later in this chapter.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">scansize</FONT></TT> is an integer value representing the scansize of the operation.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetPixels</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ImageFilter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setPixels(int x, int y, int
w, int h, ColorModel model,<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int pixels[], int off, int scansize</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">setPixels()</FONT></TT> method filters
the <TT><FONT FACE="Courier">pixels</FONT></TT> array. The pixels
that pass through the filter are passed onto the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
interface.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">x</FONT></TT> is the x coordinate of the image.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">y</FONT></TT> is the y coordinate of the image.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">w</FONT></TT> is the width of the image.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">h</FONT></TT> is the height of the image.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">model</FONT></TT> is the <TT><FONT FACE="Courier">ColorModel</FONT></TT> that the <TT><FONT FACE="Courier">pixels</FONT></TT> array conforms to.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">pixels</FONT></TT> is an integer array containing pixels to be examined.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">off</FONT></TT> is a variable that is passed onto the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>'s <TT><FONT FACE="Courier">setPixels()</FONT></TT> method. For more information, see the 
<TT><FONT FACE="Courier">ImageConsumer</FONT></TT> interface documentation later in this chapter.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">scansize</FONT></TT> is an integer value representing the scansize of the operation.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ImageComplete</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ImageFilter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void imageComplete(int status)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">imageComplete()</FONT></TT> method
filters the information provided by the <TT><FONT FACE="Courier">imageComplete()</FONT></TT>
method in the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
interface. For more information on the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
interface, see the documentation later in this chapter.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">status</FONT></TT> is an integer value representing the status of the filter operation.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ResendTopDownLeftRight</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ImageFilter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void resendTopDownLeftRight(ImageProducer
ip)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">resendTopDownLeftRight()</FONT></TT>
method is used to deliver the image data to the specified <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
in top-down, left-right order.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">ip</FONT></TT> is the <TT><FONT FACE="Courier">ImageProducer</FONT></TT> that is responsible for production of the image data.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Clone</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ImageFilter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Object clone()</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">clone()</FONT></TT> method returns
a clone of the <TT><FONT FACE="Courier">ImageFilter</FONT></TT>.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD >An object that is identical to the <TT><FONT FACE="Courier">ImageFilter</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="IndexColorModel"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></A></TD><TD WIDTH=499>
<H2><FONT SIZE=5 COLOR=#FF0000>IndexColorModel</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Extends.gif"></FONT></TT></TD>
<TD><FONT FACE="Courier">ColorModel</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
The class hierarchy for the <TT><FONT FACE="Courier">IndexColorModel</FONT></TT>
class derives from class <TT><FONT FACE="Courier">java.awt.image.ColorModel</FONT></TT>.
This class translates from pixel values to RGB color values for
pixels that represent indexes into a color map. The <TT><FONT FACE="Courier">IndexColorModel</FONT></TT>
class's overall derivation can be seen in Figure 29.1.
<P>
Listing 29.6 shows the declarations for all of the public methods
included in the <TT><FONT FACE="Courier">java.awt.image.IndexColorModel</FONT></TT>
class.
<HR>
<BLOCKQUOTE>
<B>Listing 29.6. Public members of </B><TT><B><FONT FACE="Courier">java.awt.image.IndexColorModel</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class IndexColorModel extends
ColorModel {<BR>
&nbsp;&nbsp;public IndexColorModel(int bits, int size, byte r[],
byte g[], byte b[])<BR>
&nbsp;&nbsp;public IndexColorModel(int bits, int size, byte r[],
byte g[],<BR>
&nbsp;&nbsp;</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
byte b[], int trans)<BR>
public IndexColorModel(int bits, int size, byte r[], byte g[],
<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
byte b[], byte a[])<BR>
public IndexColorModel(int bits, int size, byte cmap[],<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int start, boolean hasalpha)<BR>
&nbsp;&nbsp;public IndexColorModel(int bits, int size, byte cmap[],
<BR>
&nbsp;&nbsp;</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int start, boolean hasalpha, int trans)<BR>
final public int getMapSize()<BR>
&nbsp;&nbsp;final public int getTransparentPixel()<BR>
&nbsp;&nbsp;final public void getReds(byte r[])<BR>
&nbsp;&nbsp;final public void getGreens(byte g[])<BR>
&nbsp;&nbsp;final public void getBlues(byte b[])<BR>
&nbsp;&nbsp;final public void getAlphas(byte a[])<BR>
&nbsp;&nbsp;final public int getRed(int pixel)<BR>
&nbsp;&nbsp;final public int getGreen(int pixel)<BR>
&nbsp;&nbsp;final public int getBlue(int pixel)<BR>
&nbsp;&nbsp;final public int getAlpha(int pixel)<BR>
&nbsp;&nbsp;final public int getRGB(int pixel)<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">IndexColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IndexColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public IndexColorModel(int bits, int
size, byte r[], byte g[], byte b[])</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">IndexColorModel()</FONT></TT> constructor
constructs a color model from the specified information.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">bits</FONT></TT> is the number of bits required to represent a pixel.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">size</FONT></TT> is the size of the color arrays.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">r</FONT></TT> is the red color array.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">g</FONT></TT> is the green color array.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">b</FONT></TT> is the blue color array.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">IndexColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IndexColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public IndexColorModel(int bits, int
size, byte r[], byte g[],<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
byte b[], int trans)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">IndexColorModel()</FONT></TT> constructor
constructs a color model from the specified information.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">bits</FONT></TT> is the number of bits required to represent a pixel.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">size</FONT></TT> is the size of the color arrays.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">r</FONT></TT> is the red color array.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">g</FONT></TT> is the green color array.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">b</FONT></TT> is the blue color array.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">trans</FONT></TT> is an integer value representing the index that identifies the transparent pixel.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">IndexColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IndexColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public IndexColorModel(int bits, int
size, byte r[], byte g[],<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
byte b[], byte a[])</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">IndexColorModel()</FONT></TT> constructor
constructs a color model from the specified information.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">bits</FONT></TT> is the number of bits required to represent a pixel.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">size</FONT></TT> is the size of the color arrays.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">r</FONT></TT> is the red color array.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">g</FONT></TT> is the green color array.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">b</FONT></TT> is the blue color array.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">a</FONT></TT> is the alpha color array.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">IndexColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IndexColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public IndexColorModel(int bits, int
size, byte cmap[],<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int start, boolean hasalpha)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">IndexColorModel()</FONT></TT> constructor
constructs a color model from the specified information.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">bits</FONT></TT> is the number of bits required to represent a pixel.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">size</FONT></TT> is the size of the color arrays.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">cmap</FONT></TT> is a byte array representing the color map array.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">start</FONT></TT> is the index representing the first color component within the color array.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">hasalpha</FONT></TT> is a Boolean value indicating whether alpha values are contained within the color map. This Boolean value will be <TT><FONT FACE="Courier">true</FONT></TT> if alpha values are 
contained.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">IndexColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IndexColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public IndexColorModel(int bits, int
size, byte cmap[],<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int start, boolean hasalpha, int trans)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">IndexColorModel()</FONT></TT> constructor
constructs a color model from the specified information.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">bits</FONT></TT> is the number of bits required to represent a pixel.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">size</FONT></TT> is the size of the color arrays.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">cmap</FONT></TT> is a byte array representing the color map array.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">start</FONT></TT> is the index representing the first color component within the color array.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">hasalpha</FONT></TT> is a Boolean value indicating whether alpha values are contained within the color map. This Boolean value will be <TT><FONT FACE="Courier">true</FONT></TT> if alpha values are 
contained.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">trans</FONT></TT> is an integer value representing the index of the transparent pixel.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetMapSize</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IndexColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">final public int getMapSize()</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getMapSize()</FONT></TT> method returns
the size of the color map used by the <TT><FONT FACE="Courier">IndexColorModel</FONT></TT>.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD>An integer value representing the size of the color map used by the <TT><FONT FACE="Courier">IndexColorModel</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetTransparentPixel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IndexColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">final public int getTransparentPixel()</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getTransparentPixel()</FONT></TT>
method returns the index into the color map of the transparent
pixel.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD>An integer value representing the index into the color map of the transparent pixel. If there is no transparent pixel, this method returns <TT><FONT FACE="Courier">-1</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetReds</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IndexColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">final public void getReds(byte r[])</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getReds()</FONT></TT> method fills
the byte array with the red color components.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">r</FONT></TT> is a byte array that is filled by the <TT><FONT FACE="Courier">getReds()</FONT></TT> method with the red color components.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetGreens</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IndexColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">final public void getGreens(byte g[])</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getGreens()</FONT></TT> method fills
the byte array with the green color components.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">r</FONT></TT> is a byte array that is filled by the <TT><FONT FACE="Courier">getGreens()</FONT></TT> method with the green color components.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetBlues</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IndexColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">final public void getBlues(byte b[])</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getBlues()</FONT></TT> method fills
the byte array with the blue color components.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">r</FONT></TT> is a byte array that is filled by the <TT><FONT FACE="Courier">getBlues()</FONT></TT> method with the blue color components.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetAlphas</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IndexColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">final public void getAlphas(byte a[])</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getAlphas()</FONT></TT> method fills
the byte array with the alpha components.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">r</FONT></TT> is a byte array that is filled by the <TT><FONT FACE="Courier">getAlphas()</FONT></TT> method with the alpha components.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetRed</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IndexColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">final public int getRed(int pixel)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getRed()</FONT></TT> method returns
the red color component for the specified pixel using the <TT><FONT FACE="Courier">IndexColorModel</FONT></TT>.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">pixel</FONT></TT> is an integer value representing a pixel.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD >An integer value in the range 0-255 representing the red component for the specified pixel.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetGreen</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IndexColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">final public int getGreen(int pixel)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getGreen()</FONT></TT> method returns
the green color component for the specified pixel using the <TT><FONT FACE="Courier">IndexColorModel</FONT></TT>.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">pixel</FONT></TT> is an integer value representing a pixel.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD >An integer value in the range 0-255 representing the green component for the specified pixel.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetBlue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IndexColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">final public int getBlue(int pixel)</FONT></TT>
</BLOCKQUOTE>
<P>
The getBlue() method returns the blue color component for the
specified pixel using the IndexColorModel.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD>pixel is an integer value representing a pixel.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD >An integer value in the range 0-255 representing the blue component for the specified pixel.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetAlpha</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IndexColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">final public int getAlpha(int pixel)</FONT></TT>
</BLOCKQUOTE>
<P>
The getAlpha() method returns the alpha color component for the
specified pixel using the IndexColorModel.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD>pixel is an integer value representing a pixel.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD >An integer value in the range 0-255 representing the alpha component for the specified pixel.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetRGB</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IndexColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">final public int getRGB(int pixel)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">getRGB()</FONT></TT> method returns
the RGB color value for the specified pixel using the default
RGB color model.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">pixel</FONT></TT> is an integer value representing a pixel.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD >An integer value in the range 0-255 representing the RGB color value for the specified pixel.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="MemoryImageSource"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></A></TD><TD WIDTH=499>
<H2><FONT SIZE=5 COLOR=#FF0000>MemoryImageSource</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Extends.gif"></FONT></TT></TD>
<TD><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Implem.gif"></FONT></TT>
</TD><TD><FONT FACE="Courier">ImageProducer</FONT></TD>
</TR>
</TABLE></CENTER>
<P>
The class hierarchy for the <TT><FONT FACE="Courier">MemoryImageSource</FONT></TT>
class derives from class <TT><FONT FACE="Courier">java.lang.Object</FONT></TT>.
This class uses an array to produce image pixel values. <TT><FONT FACE="Courier">MemoryImageSource</FONT></TT>'s
overall derivation can be seen in Figure 29.1.
<P>
Listing 29.7 shows the declarations for all of the public methods
included in the <TT><FONT FACE="Courier">java.awt.image.MemoryImageSource</FONT></TT>
class.
<HR>
<BLOCKQUOTE>
<B>Listing 29.7. Public members of </B><TT><B><FONT FACE="Courier">java.awt.image.MemoryImageSource</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class MemoryImageSource implements
ImageProducer {<BR>
&nbsp;&nbsp;public MemoryImageSource(int w, int h, ColorModel
cm, byte[] pix,<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int off, int scan)<BR>
public MemoryImageSource(int w, int h, ColorModel cm, byte[] pix,
<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int off, int scan, Hashtable props)<BR>
public MemoryImageSource(int w, int h, ColorModel cm, int[] pix,
<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int off, int scan)<BR>
public MemoryImageSource(int w, int h, ColorModel cm, int[] pix,
<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int off, int scan, Hashtable props)<BR>
public MemoryImageSource(int w, int h, int pix[], int off, int
scan)<BR>
public MemoryImageSource(int w, int h, int pix[], int off,<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int scan, Hashtable props)<BR>
public synchronized void addConsumer(ImageConsumer ic)<BR>
&nbsp;&nbsp;public synchronized boolean isConsumer(ImageConsumer
ic)<BR>
&nbsp;&nbsp;public synchronized void removeConsumer(ImageConsumer
ic)<BR>
&nbsp;&nbsp;public void startProduction(ImageConsumer ic)<BR>
&nbsp;&nbsp;public void requestTopDownLeftRightResend(ImageConsumer
ic)<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">MemoryImageSource</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">MemoryImageSource</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public MemoryImageSource(int w, int h,
ColorModel cm, byte[] pix,<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int off, int scan)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">MemoryImageSource()</FONT></TT> constructor
uses an array of bytes to produce image data for an  image object.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">w</FONT></TT> is the width of the image to be created in pixels.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">h</FONT></TT> is the height of the image to be created in pixels.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">Cm</FONT></TT> is the color model used to translate the pixel values.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">Pix</FONT></TT> is a byte array containing the image data.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">Off</FONT></TT> is the offset into the array to begin reading.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">scan</FONT></TT> is the scan value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">MemoryImageSource</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">MemoryImageSource</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public MemoryImageSource(int w, int h,
ColorModel cm, byte[] pix,<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int off, int scan, Hashtable props)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">MemoryImageSource()</FONT></TT> constructor
uses an array of bytes to produce image data for an  image object.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">w</FONT></TT> is the width of the image to be created in pixels.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">h</FONT></TT> is the height of the image to be created in pixels.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">cm</FONT></TT> is the color model used to translate the pixel values.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">pix</FONT></TT> is a byte array containing the image data.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">off</FONT></TT> is the offset into the array to begin reading.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">scan</FONT></TT> is the scan value.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">props</FONT></TT> is a <TT><FONT FACE="Courier">Hashtable</FONT></TT> object containing properties to be used by the <TT><FONT FACE="Courier">ImageProducer</FONT></TT>. For more information on the 
<TT><FONT FACE="Courier">Hashtable</FONT></TT> class, see the <TT><FONT FACE="Courier">java.util</FONT></TT> package documentation in <A HREF="ch34.htm" >Chapter 34</A>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">MemoryImageSource</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">MemoryImageSource</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public MemoryImageSource(int w, int h,
ColorModel cm, int[] pix,<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int off, int scan)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">MemoryImageSource()</FONT></TT> constructor
uses an array of bytes to produce image data for an  image object.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">w</FONT></TT> is the width of the image to be created in pixels.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">h</FONT></TT> is the height of the image to be created in pixels.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">cm</FONT></TT> is the color model used to translate the pixel values.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">pix</FONT></TT> is an integer array containing the image data.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">off</FONT></TT> is the offset into the array to begin reading.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">scan</FONT></TT> is the scan value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">MemoryImageSource</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">MemoryImageSource</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public MemoryImageSource(int w, int h,
ColorModel cm, int[] pix,<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int off, int scan, Hashtable props)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">MemoryImageSource()</FONT></TT> constructor
uses an array of bytes to produce image data for an  image object.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">w</FONT></TT> is the width of the image to be created in pixels.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">h</FONT></TT> is the height of the image to be created in pixels.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">cm</FONT></TT> is the color model used to translate the pixel values.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">pix</FONT></TT> is an integer array containing the image data.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">off</FONT></TT> is the offset into the array to begin reading.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">scan</FONT></TT> is the scan value.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">props</FONT></TT> is a <TT><FONT FACE="Courier">Hashtable</FONT></TT> object containing properties to be used by the <TT><FONT FACE="Courier">ImageProducer</FONT></TT>. For more information on the 
<TT><FONT FACE="Courier">Hashtable</FONT></TT> class, see the <TT><FONT FACE="Courier">java.util</FONT></TT> package documentation in <A HREF="ch34.htm" >Chapter 34</A>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">MemoryImageSource</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">MemoryImageSource</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public MemoryImageSource(int w, int h,
int pix[], int off, int scan)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">MemoryImageSource()</FONT></TT> constructor
uses an array of bytes to produce image data for an  image object.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">w</FONT></TT> is the width of the image to be created in pixels.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">h</FONT></TT> is the height of the image to be created in pixels.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">pix</FONT></TT> is an integer array containing the image data.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">off</FONT></TT> is the offset into the array to begin reading.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">scan</FONT></TT> is the scan value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">MemoryImageSource</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">MemoryImageSource</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public MemoryImageSource(int w, int h,
int pix[],<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int off, int scan, Hashtable props)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">MemoryImageSource()</FONT></TT> constructor
uses an array of bytes to produce image data for an  image object.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">w</FONT></TT> is the width of the image to be created in pixels.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">h</FONT></TT> is the height of the image to be created in pixels.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">pix</FONT></TT> is an integer array containing the image data.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">off</FONT></TT> is the offset into the array to begin reading.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">scan</FONT></TT> is the scan value.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">props</FONT></TT> is a <TT><FONT FACE="Courier">Hashtable</FONT></TT> object containing properties to be used by the <TT><FONT FACE="Courier">ImageProducer</FONT></TT>. For more information on the 
<TT><FONT FACE="Courier">Hashtable</FONT></TT> class, see the <TT><FONT FACE="Courier">java.util</FONT></TT> package documentation in <A HREF="ch34.htm" >Chapter 34</A>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">AddConsumer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">MemoryImageSource</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized void addConsumer(ImageConsumer
ic)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">addConsumer()</FONT></TT> method
adds an <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> interface
to a list of image consumers who are interested in data for the
image.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">ic</FONT></TT> is an <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> interface. For more information on the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> 
interface, see the documentation later in this chapter.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">IsConsumer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">MemoryImageSource</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized boolean isConsumer(ImageConsumer
ic)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">isConsumer()</FONT></TT> method determines
if the specified <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
is currently in the list.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">ic</FONT></TT> is an <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> interface. For more information on the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> 
interface, see the documentation later in this chapter.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD >A Boolean value that is <TT><FONT FACE="Courier">true</FONT></TT> if the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> is already in the list, <TT><FONT FACE="Courier">false</FONT></TT> if not.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">RemoveConsumer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">MemoryImageSource</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized void removeConsumer(ImageConsumer
ic)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">removeConsumer()</FONT></TT> method
removes the specified <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
from the list of image consumers interested in receiving image
data.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">ic</FONT></TT> is an <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> interface. For more information on the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> 
interface, see the documentation later in this chapter.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">StartProduction</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">MemoryImageSource</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void startProduction(ImageConsumer
ic)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">startProduction()</FONT></TT> method
adds the specified <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
to a list of image consumers interested in receiving image data.
This method also immediately starts production of image data to
be sent to the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
interfaces.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">ic</FONT></TT> is an <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> interface. For more information on the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> 
interface, see the documentation later in this chapter.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">RequestTopDownLeftRightResend</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">MemoryImageSource</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void requestTopDownLeftRightResend(ImageConsumer
ic)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">requestTopDownLeftRightResend()</FONT></TT>
method is used to deliver the image data to the specified <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
in top-down, left-right order.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">ic</FONT></TT> is an <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> interface. For more information on the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> 
interface, see the documentation later in this chapter.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="PixelGrabber"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></A></TD><TD WIDTH=499>
<H2><FONT SIZE=5 COLOR=#FF0000>PixelGrabber</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Extends.gif"></FONT></TT></TD>
<TD><TT><FONT FACE="Courier">Object</FONT></TT></TD>
</TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/implem.gif"></FONT></TT>
</TD><TD><TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
The class hierarchy for the <TT><FONT FACE="Courier">PixelGrabber</FONT></TT>
class derives from class <TT><FONT FACE="Courier">java.lang.Object</FONT></TT>.
The <TT><FONT FACE="Courier">PixelGrabber</FONT></TT> class implements
the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> interface
to retrieve a subset of pixels from an <TT><FONT FACE="Courier">Image</FONT></TT>.
<TT><FONT FACE="Courier">PixelGrabber</FONT></TT>'s overall derivation
can be seen in Figure 29.1.
<P>
Listing 29.8 shows the declarations for all of the public methods
included in the <TT><FONT FACE="Courier">java.awt.image.PixelGrabber</FONT></TT>
class.
<HR>
<BLOCKQUOTE>
<B>Listing 29.8. Public members of </B><TT><B><FONT FACE="Courier">java.awt.image.PixelGrabber</FONT></B></TT>.
<BR>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class PixelGrabber implements
ImageConsumer {<BR>
&nbsp;&nbsp;public PixelGrabber(Image img, int x, int y, int w,
int h, int[] pix,<BR>
&nbsp;&nbsp;</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int off, int scansize)<BR>
public PixelGrabber(ImageProducer ip, int x, int y, int w, int
h, int[] pix,<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int off, int scansize)<BR>
public boolean grabPixels() throws InterruptedException<BR>
&nbsp;&nbsp;public synchronized boolean grabPixels(long ms) throws
InterruptedException<BR>
&nbsp;&nbsp;public synchronized int status()<BR>
&nbsp;&nbsp;public void setDimensions(int width, int height)<BR>
&nbsp;&nbsp;public void setHints(int hints)<BR>
&nbsp;&nbsp;public void setProperties(Hashtable props)<BR>
&nbsp;&nbsp;public void setColorModel(ColorModel model)<BR>
&nbsp;&nbsp;public void setPixels(int srcX, int srcY, int srcW,
int srcH,<BR>
&nbsp;&nbsp;</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
ColorModel model, byte pixels[], int srcOff, int srcScan)<BR>
&nbsp;&nbsp;public void setPixels(int srcX, int srcY, int srcW,
int srcH,<BR>
&nbsp;&nbsp;</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
ColorModel model, int pixels[], int srcOff, int srcScan)<BR>
&nbsp;&nbsp;public synchronized void imageComplete(int status)
<BR>
&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">PixelGrabber</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PixelGrabber</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public PixelGrabber(Image img, int x,
int y, int w, int h, int[] pix,<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int off, int scansize)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">PixelGrabber()</FONT></TT> constructor
constructs a <TT><FONT FACE="Courier">PixelGrabber</FONT></TT>
object to retrieve a subset of pixels from the <TT><FONT FACE="Courier">Image</FONT></TT>.
In this case, the <TT><FONT FACE="Courier">PixelGrabber</FONT></TT>
will grab a rectangular section of pixels.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">img</FONT></TT> is an <TT><FONT FACE="Courier">Image</FONT></TT> object to be &quot;grabbed.&quot; For more information on the <TT><FONT FACE="Courier">Image</FONT></TT> 
class, see the documentation earlier in this chapter.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">x</FONT></TT> is the x coordinate at which to begin grabbing pixels.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">y</FONT></TT> is the y coordinate at which to begin grabbing pixels.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">w</FONT></TT> is the width of the <TT><FONT FACE="Courier">PixelGrabber</FONT></TT> bounding rectangle.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">h</FONT></TT> is the height of the <TT><FONT FACE="Courier">PixelGrabber</FONT></TT> bounding rectangle.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">pix</FONT></TT> is an array of integers used to store the grabbed pixels.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">off</FONT></TT> is the offset into the <TT><FONT FACE="Courier">Image</FONT></TT> to begin calculations.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">scan</FONT></TT> is an integer value used to represent the scan size.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">PixelGrabber</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PixelGrabber</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public PixelGrabber(ImageProducer ip,
int x, int y, int w, int h, int[] pix,<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int off, int scansize)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">PixelGrabber()</FONT></TT> constructor
constructs a <TT><FONT FACE="Courier">PixelGrabber</FONT></TT>
object to retrieve a subset of pixels from the <TT><FONT FACE="Courier">Image</FONT></TT>.
In this case, the <TT><FONT FACE="Courier">PixelGrabber</FONT></TT>
will grab a rectangular section of pixels.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">ip</FONT></TT> is an <TT><FONT FACE="Courier">ImageProducer</FONT></TT> object to be &quot;grabbed.&quot; For more information on the <TT><FONT 
FACE="Courier">ImageProducer</FONT></TT> interface, see the documentation later in this chapter.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">x</FONT></TT> is the x coordinate at which to begin grabbing pixels.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">y</FONT></TT> is the y coordinate at which to begin grabbing pixels.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">w</FONT></TT> is the width of the <TT><FONT FACE="Courier">PixelGrabber</FONT></TT> bounding rectangle.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">h</FONT></TT> is the height of the <TT><FONT FACE="Courier">PixelGrabber</FONT></TT> bounding rectangle.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">pix</FONT></TT> is an array of integers used to store the grabbed pixels.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">off</FONT></TT> is the offset into the <TT><FONT FACE="Courier">Image</FONT></TT> to begin calculations.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">scan</FONT></TT> is an integer value used to represent the scan size.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GrabPixels</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PixelGrabber</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean grabPixels() throws InterruptedException</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">grabPixels()</FONT></TT> method notifies
the <TT><FONT FACE="Courier">PixelGrabber</FONT></TT> to begin
grabbing pixels and wait until all of the pixels to be grabbed
have been delivered.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD >A Boolean value that is <TT><FONT FACE="Courier">true</FONT></TT> if the operation was successful, <TT><FONT FACE="Courier">false</FONT></TT> if not.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Throws.gif"></TD><TD >An <TT><FONT FACE="Courier">InterruptedException</FONT></TT> if the process was interrupted.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GrabPixels</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PixelGrabber</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized boolean grabPixels(long
ms) throws InterruptedException</FONT></TT>
</BLOCKQUOTE>
<P>
This <TT><FONT FACE="Courier">grabPixels()</FONT></TT> method
notifies the <TT><FONT FACE="Courier">PixelGrabber</FONT></TT>
to begin grabbing pixels at some specified time in the future
and wait until all of the pixels to be grabbed have been delivered.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">ms</FONT></TT> is a long integer value representing the start time in milliseconds.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD >A Boolean value that is <TT><FONT FACE="Courier">true</FONT></TT> if the operation was successful, <TT><FONT FACE="Courier">false</FONT></TT> if not.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Throws.gif"></TD><TD >An <TT><FONT FACE="Courier">InterruptedException</FONT></TT> if the process was interrupted.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Status</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PixelGrabber</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized int status()</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">status()</FONT></TT> method returns
a value representing the status of the grab operation.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD>An integer value representing the operation's status. This value will be a bitwise <TT><FONT FACE="Courier">OR</FONT></TT> of all relevant <TT><FONT FACE="Courier">ImageObserver</FONT></TT> flags.

</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetDimensions</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PixelGrabber</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setDimensions(int width,
int height)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">setDimensions()</FONT></TT> method
must be implemented by this class to fulfill its interface with
the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> interface.
For more information on the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
interface, see the documentation later in this chapter.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">width</FONT></TT> is the width parameter.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">height</FONT></TT> is the height parameter.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetHints</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PixelGrabber</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setHints(int hints)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">setHints()</FONT></TT> method must
be implemented by this class to fulfill its interface with the
<TT><FONT FACE="Courier">ImageConsumer</FONT></TT> interface.
For more information on the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
interface, see the documentation later in this chapter.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">hints</FONT></TT> is the hints parameter.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetProperties</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PixelGrabber</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setProperties(Hashtable props)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">setProperties()</FONT></TT> method
must be implemented by this class to fulfill its interface with
the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> interface.
For more information on the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
interface, see the documentation later in this chapter.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">props</FONT></TT> is a <TT><FONT FACE="Courier">Hashtable</FONT></TT> object. For more information on the <TT><FONT FACE="Courier">Hashtable</FONT></TT> class, see the 
<TT><FONT FACE="Courier">java.util</FONT></TT> package documentation in <A HREF="ch34.htm" >Chapter 34</A>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PixelGrabber</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setColorModel(ColorModel
model)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">setColorModel()</FONT></TT> method
must be implemented by this class to fulfill the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
interface. This interface is implemented by the <TT><FONT FACE="Courier">PixelGrabber</FONT></TT>
class to retrieve pixels. For more information on the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
interface, see the documentation later in this chapter.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">model</FONT></TT> is a <TT><FONT FACE="Courier">ColorModel</FONT></TT> object. For more information on the <TT><FONT FACE="Courier">ColorModel</FONT></TT> class, see the 
documentation earlier in this chapter.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetPixels</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PixelGrabber</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setPixels(int srcX, int srcY,
int srcW, int srcH,<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
ColorModel model, byte pixels[], int srcOff, int srcScan)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">setPixels()</FONT></TT> method must
be implemented by this class to fulfill the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
interface. This interface must be implemented by the <TT><FONT FACE="Courier">PixelGrabber</FONT></TT>
class to retrieve its pixels. For more information on the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
interface, see the documentation later in this chapter.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">srcX</FONT></TT> is an integer value representing the source x coordinate.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">srcY</FONT></TT> is an integer value representing the source y coordinate.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">srcW</FONT></TT> is an integer value representing the source width.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">srcH</FONT></TT> is an integer value representing the source height.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">model</FONT></TT> is the <TT><FONT FACE="Courier">ColorModel</FONT></TT> to be used.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">pixels</FONT></TT> is a byte array of pixel values.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">srcOff</FONT></TT> is the offset into the source array.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">srcScan</FONT></TT> is the source scan value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetPixels</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PixelGrabber</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setPixels(int srcX, int srcY,
int srcW, int srcH,<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
ColorModel model, int pixels[], int srcOff, int srcScan)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">setPixels()</FONT></TT> method must
be implemented by this class to fulfill <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
interface. This interface must be implemented by the <TT><FONT FACE="Courier">PixelGrabber</FONT></TT>
class to retrieve its pixels. For more information on the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
interface, see the documentation later in this chapter.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">srcX</FONT></TT> is an integer value representing the source x coordinate.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">srcY</FONT></TT> is an integer value representing the source y coordinate.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">srcW</FONT></TT> is an integer value representing the source width.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">srcH</FONT></TT> is an integer value representing the source height.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">model</FONT></TT> is the <TT><FONT FACE="Courier">ColorModel</FONT></TT> to be used.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">pixels</FONT></TT> is an integer array of pixel values.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">srcOff</FONT></TT> is the offset into the source array.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">srcScan</FONT></TT> is the source scan value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ImageComplete</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PixelGrabber</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized void imageComplete(int
status)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">imageComplete()</FONT></TT> method
must be implemented by this class to fulfill its interface with
the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> interface.
For more information on the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
interface, see the documentation later in this chapter.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD><TT><FONT FACE="Courier">status</FONT></TT> is an integer value representing the status of the pixel grab operation.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="RGBImageFilter"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></A></TD><TD WIDTH=499>
<H2><FONT SIZE=5 COLOR=#FF0000>RGBImageFilter</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Extends.gif"></FONT></TT></TD>
<TD><TT><FONT FACE="Courier">ImageFilter</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
The class hierarchy for the <TT><FONT FACE="Courier">RGBImageFilter</FONT></TT>
class derives from class <TT><FONT FACE="Courier">java.awt.image.ImageFilter</FONT></TT>.
The <TT><FONT FACE="Courier">RGBImageFilter</FONT></TT> abstract
class provides the functionality to process image data within
a single method that converts pixels in the default RGB <TT><FONT FACE="Courier">ColorModel</FONT></TT>.
<TT><FONT FACE="Courier">RGBImageFilter</FONT></TT>'s overall
derivation can be seen in Figure 29.1.
<P>
Listing 29.9 shows the declarations for all of the public methods
included in the <TT><FONT FACE="Courier">java.awt.image.RGBImageFilter</FONT></TT>
class.
<HR>
<BLOCKQUOTE>
<B>Listing 29.9. Public members of </B><TT><B><FONT FACE="Courier">java.awt.image.RGBImageFilter</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract class RGBImageFilter
extends ImageFilter {<BR>
&nbsp;&nbsp;public void setColorModel(ColorModel model)<BR>
&nbsp;&nbsp;public void substituteColorModel(ColorModel oldcm,
ColorModel newcm)<BR>
&nbsp;&nbsp;public IndexColorModel filterIndexColorModel(IndexColorModel
icm)<BR>
&nbsp;&nbsp;public void filterRGBPixels(int x, int y, int w, int
h, int pixels[],<BR>
&nbsp;&nbsp;</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int off, int scansize)<BR>
public void setPixels(int x, int y, int w, int h, ColorModel model,
<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
byte pixels[], int off, int scansize)<BR>
public void setPixels(int x, int y, int w, int h, ColorModel model,
<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int pixels[], int off, int scansize)<BR>
public abstract int filterRGB(int x, int y, int rgb)<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Setcolormodel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RGBImageFilter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setColorModel(ColorModel
model)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">setColorModel()</FONT></TT> method
checks the type of the specified <TT><FONT FACE="Courier">ColorModel</FONT></TT>.
If it is an <TT><FONT FACE="Courier">IndexColorModel</FONT></TT>
and the protected <TT><FONT FACE="Courier">canFilterIndexColorModel</FONT></TT>
variable is <TT><FONT FACE="Courier">true</FONT></TT>, then the
color model will be set to the <TT><FONT FACE="Courier">IndexColorModel</FONT></TT>.
Otherwise, the default RGB color model will be used for all filtering
operations.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">Model</FONT></TT> is the color model to be used for filtering.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SubstituteColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RGBImageFilter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void substituteColorModel(ColorModel
oldcm, ColorModel newcm)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">substituteColorModel()</FONT></TT>
method allows color models to be interchanged on-the-fly. If the
old color model is encountered during a <TT><FONT FACE="Courier">setPixels()</FONT></TT>
method call, then the new color model will be used instead.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">oldcm</FONT></TT> is the old color model to be replaced.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">newcm</FONT></TT> is the new color model.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">FilterIndexColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RGBImageFilter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public IndexColorModel filterIndexColorModel(IndexColorModel
icm)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">filterIndexColorModel()</FONT></TT>
method runs each entry in the specified <TT><FONT FACE="Courier">IndexColorModel</FONT></TT>
through the <TT><FONT FACE="Courier">filterRGB()</FONT></TT> method
and returns a new color model.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">icm</FONT></TT> is the <TT><FONT FACE="Courier">IndexColorModel</FONT></TT> to be filtered.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD >An <TT><FONT FACE="Courier">IndexColorModel</FONT></TT> that has been filtered by the <TT><FONT FACE="Courier">RGBImageFilter</FONT></TT> class.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">FilterRGBPixels</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RGBImageFilter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void filterRGBPixels(int x, int
y, int w, int h, int pixels[],<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int off, int scansize)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">filterRGBPixels()</FONT></TT> method
filters an array of pixels through the <TT><FONT FACE="Courier">filterRGB()</FONT></TT>
method.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">x</FONT></TT> is the x coordinate at which to start the filtering.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">y</FONT></TT> is the y coordinate at which to start the filtering.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">w</FONT></TT> is the width of the image to be filtered.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">h</FONT></TT> is the height of the image to be filtered.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">pixels</FONT></TT> is an array of integers representing pixel values.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">off</FONT></TT> is the offset used.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">scansize</FONT></TT> is the scan size used.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetPixels</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RGBImageFilter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setPixels(int x, int y, int
w, int h, ColorModel model,<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
byte pixels[], int off, int scansize)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">setPixels()</FONT></TT> method converts
the pixels and color model before passing them on. If the <TT><FONT FACE="Courier">ColorModel</FONT></TT>
has already been converted, the pixels are passed through with
the converted <TT><FONT FACE="Courier">ColorModel</FONT></TT>.
If not, then the pixel array is converted to the default RGB color
model using the <TT><FONT FACE="Courier">filterRGBPixels()</FONT></TT>
method.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">x</FONT></TT> is the x coordinate at which to start the filtering.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">y</FONT></TT> is the y coordinate at which to start the filtering.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">w</FONT></TT> is the width of the image to be filtered.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">h</FONT></TT> is the height of the image to be filtered.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">model</FONT></TT> is the <TT><FONT FACE="Courier">ColorModel</FONT></TT> with which the pixels comply.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">pixels</FONT></TT> is an array of bytes representing pixel values.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">off</FONT></TT> is the offset used.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">scansize</FONT></TT> is the scan size used.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetPixels</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RGBImageFilter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setPixels(int x, int y, int
w, int h, ColorModel model,<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int pixels[], int off, int scansize)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">setPixels()</FONT></TT> method converts
the pixels and color model before passing them on. If the <TT><FONT FACE="Courier">ColorModel</FONT></TT>
has already been converted, the pixels are passed through with
the converted <TT><FONT FACE="Courier">ColorModel</FONT></TT>.
If not, then the pixel array is converted to the default RGB color
model using the <TT><FONT FACE="Courier">filterRGBPixels()</FONT></TT>
method.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">x</FONT></TT> is the x coordinate to start the filtering at.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">y</FONT></TT> is the y coordinate to start the filtering at.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">w</FONT></TT> is the width of the image to be filtered.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">h</FONT></TT> is the height of the image to be filtered.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">model</FONT></TT> is the <TT><FONT FACE="Courier">ColorModel</FONT></TT> that the pixels comply with.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">pixels</FONT></TT> is an array of integers representing pixel values.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">off</FONT></TT> is the offset used.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">scansize</FONT></TT> is the scan size used.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">FilterRGB</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RGBImageFilter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract int filterRGB(int x,
int y, int rgb)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">filterRGB()</FONT></TT> method allows
subclasses to specify a method that converts an input pixel using
the default RGB color model to an output pixel.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">x</FONT></TT> is the x coordinate of the pixel.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">y</FONT></TT> is the y coordinate of the pixel.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">rgb</FONT></TT> is the pixel value using the default RGB color model.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD>An integer value representing the filtered pixel value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="ImageConsumer"><IMG SRC="http://docs.rinet.ru/JavDev/Inter.gif"></A></TD><TD WIDTH=499>
<H2><FONT SIZE=5 COLOR=#FF0000>ImageConsumer</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Extends.gif"></FONT></TT></TD>
<TD><TT><FONT FACE="Courier">Object </FONT></TT></TD>
</TR>
</TABLE></CENTER>
<P>
<P>
The class hierarchy for the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
interface extends from class <TT><FONT FACE="Courier">java.lang.Object</FONT></TT>.
This interface is implemented by objects that are responsible
for acquiring data provided by the <TT><FONT FACE="Courier">ImageProducer</FONT></TT>
interface. <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>'s
overall derivation can be seen in Figure 29.1.
<P>
Listing 29.10 shows the declarations for all of the public methods
and variables included in the <TT><FONT FACE="Courier">java.awt.image.ImageConsumer</FONT></TT>
interface.
<HR>
<BLOCKQUOTE>
<B>Listing 29.10. Members of java.awt.image.ImageConsumer.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public interface ImageConsumer {<BR>
&nbsp;&nbsp;void setDimensions(int width, int height)<BR>
&nbsp;&nbsp;void setProperties(Hashtable props)<BR>
&nbsp;&nbsp;void setColorModel(ColorModel model)<BR>
&nbsp;&nbsp;void setHints(int hintflags)<BR>
&nbsp;&nbsp;int RANDOMPIXELORDER<BR>
&nbsp;&nbsp;int TOPDOWNLEFTRIGHT<BR>
&nbsp;&nbsp;int COMPLETESCANLINES<BR>
&nbsp;&nbsp;int SINGLEPASS<BR>
&nbsp;&nbsp;int SINGLEFRAME<BR>
&nbsp;&nbsp;int IMAGEERROR<BR>
&nbsp;&nbsp;int SINGLEFRAMEDONE<BR>
&nbsp;&nbsp;int STATICIMAGEDONE<BR>
&nbsp;&nbsp;int IMAGEABORTED<BR>
&nbsp;&nbsp;void setPixels(int x, int y, int w, int h, ColorModel
model,<BR>
&nbsp;&nbsp;</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
byte pixels[], int off, int scansize)<BR>
void setPixels(int x, int y, int w, int h, ColorModel model,<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int pixels[], int off, int scansize)<BR>
void imageComplete(int status)<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>

<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=589><TT><B><FONT FACE="Courier">Instance Variables</FONT></B></TT>
</TD></TR>
</TABLE></CENTER>
<P>
The following instance variables are all declared as public static
variables within the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
interface. These variables are used to specify options to the
<TT><FONT FACE="Courier">ImageConsumer</FONT></TT> methods:
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">int RANDOMPIXELORDER</FONT></B></TT>
</BLOCKQUOTE>
<P>
The pixels will be delivered in a random order.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">int TOPDOWNLEFTRIGHT</FONT></B></TT>
</BLOCKQUOTE>
<P>
The pixels will be delivered in top-down, left-right order.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">int COMPLETESCANLINES</FONT></B></TT>
</BLOCKQUOTE>
<P>
The pixels will be delivered in complete scan lines.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">int SINGLEPASS</FONT></B></TT>
</BLOCKQUOTE>
<P>
The pixels will be delivered in a single pass.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">int SINGLEFRAME</FONT></B></TT>
</BLOCKQUOTE>
<P>
The pixels will be delivered in a single frame.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">int IMAGEERROR</FONT></B></TT>
</BLOCKQUOTE>
<P>
An error occurred during image processing.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">int SINGLEFRAMEDONE</FONT></B></TT>
</BLOCKQUOTE>
<P>
A single frame is complete, but the overall operation has not
been completed.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">int STATICIMAGEDONE</FONT></B></TT>
</BLOCKQUOTE>
<P>
The image construction is complete.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">int IMAGEABORTED</FONT></B></TT>
</BLOCKQUOTE>
<P>
The image creation was aborted.<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetDimensions</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ImageConsumer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">void setDimensions(int width, int height)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">setDimensions()</FONT></TT> method
is used to report the dimensions of the source image to the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">width</FONT></TT> is the width of the source image.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">height</FONT></TT> is the height of the source image.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetProperties</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ImageConsumer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">void setProperties(Hashtable props)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">setProperties()</FONT></TT> method
is used to report the properties of the source image to the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">props</FONT></TT> is a <TT><FONT FACE="Courier">Hashtable</FONT></TT> object containing the image properties. For more information on the <TT><FONT 
FACE="Courier">Hashtable</FONT></TT> class, see the <TT><FONT FACE="Courier">java.util</FONT></TT> package documentation in <A HREF="ch34.htm" >Chapter 34</A>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetColorModel</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ImageConsumer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">void setColorModel(ColorModel model)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">setColorModel()</FONT></TT> method
is used to report the color model of the source image to the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">model</FONT></TT> is the color model used by the source image. For more information on the <TT><FONT FACE="Courier">ColorModel</FONT></TT> class, see the documentation 
earlier in this chapter.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetHints</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ImageConsumer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">void setHints(int hintflags)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">setHints()</FONT></TT> method is
used to report hints to the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>.
These hints are usually a bitmask of the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
variables that are used to give information about the manner in
which the pixels will be delivered. 
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">hintflags</FONT></TT> is an integer value containing hints about the manner in which the pixels will be delivered.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetPixels</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ImageConsumer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">void setPixels(int x, int y, int w, int
h, ColorModel model,<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT> byte pixels[],
int off, int scansize)
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">setPixels()</FONT></TT> method is
used to deliver the pixels to the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>.
Note: Pixel (m,n) is stored in the <TT><FONT FACE="Courier">pixels</FONT></TT>
array at index (<TT><FONT FACE="Courier">n * scansize + m + off</FONT></TT>).
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">x</FONT></TT> is the x coordinate.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">y</FONT></TT> is the y coordinate.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">w</FONT></TT> is the width of the image.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">h</FONT></TT> is the height of the image.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">model</FONT></TT> is the <TT><FONT FACE="Courier">ColorModel</FONT></TT> used.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">pixels</FONT></TT> is an array of bytes containing pixel information.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">off</FONT></TT> is the offset value.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">scansize</FONT></TT> is the scan size value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetPixels</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ImageConsumer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">void setPixels(int x, int y, int w, int
h, ColorModel model,<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT> int pixels[],
int off, int scansize)
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">setPixels()</FONT></TT> method is
used to deliver the pixels to the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>.
Note: Pixel (m,n) is stored in the <TT><FONT FACE="Courier">pixels</FONT></TT>
array at index (<TT><FONT FACE="Courier">n * scansize + m + off</FONT></TT>).
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">x</FONT></TT> is the x coordinate.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">y</FONT></TT> is the y coordinate.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">w</FONT></TT> is the width of the image.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">h</FONT></TT> is the height of the image.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">model</FONT></TT> is the <TT><FONT FACE="Courier">ColorModel</FONT></TT> used.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">pixels</FONT></TT> is an array of integers containing pixel information.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">off</FONT></TT> is the offset value.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">scansize</FONT></TT> is the scan size value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ImageComplete</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ImageConsumer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">void imageComplete(int status)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">imageComplete()</FONT></TT> method
is called when the <TT><FONT FACE="Courier">ImageProducer</FONT></TT>
is finished delivering an image frame. The <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
should remove itself from the <TT><FONT FACE="Courier">ImageProducer</FONT></TT>'s
list at this time.<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="ImageObserver"><IMG SRC="http://docs.rinet.ru/JavDev/Inter.gif"></A></TD><TD WIDTH=499>
<H2><FONT SIZE=5 COLOR=#FF0000>ImageObserver</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Extends.gif"></FONT></TT></TD>
<TD><TT><FONT FACE="Courier">Object</FONT></TT></TD>
</TR>
</TABLE></CENTER>
<P>
<P>
The class hierarchy for the ImageObserver interface extends from
class java.lang.Object. This interface is implemented by objects
that are responsible for receiving information about an image
as it is being constructed. ImageObserver's overall derivation
can be seen in Figure 29.1. 
<P>
Listing 29.11 shows the declarations for all of the public methods
included in the java.awt.image.ImageObserver interface.
<HR>
<BLOCKQUOTE>
<B>Listing 29.11. Members of java.awt.image.ImageObserver.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public interface ImageObserver {<BR>
&nbsp;&nbsp;public boolean imageUpdate(Image img, int infoflags,
int x, int y,<BR>
&nbsp;&nbsp;</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">
int width, int height)<BR>
public static final int WIDTH<BR>
&nbsp;&nbsp;public static final int HEIGHT<BR>
&nbsp;&nbsp;public static final int PROPERTIES<BR>
&nbsp;&nbsp;public static final int SOMEBITS<BR>
&nbsp;&nbsp;public static final int FRAMEBITS<BR>
&nbsp;&nbsp;public static final int ALLBITS<BR>
&nbsp;&nbsp;public static final int ERROR<BR>
&nbsp;&nbsp;public static final int ABORT<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=589><H5>Static Instance Variables</H5>
</TD></TR>
</TABLE></CENTER>
<H5></H5>
<P>
The following instance variables are all declared as public static
variables within the <TT><FONT FACE="Courier">ImageObserver</FONT></TT>
interface. These variables are used to specify options to the
<TT><FONT FACE="Courier">ImageObserver</FONT></TT> methods:
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public static final int WIDTH</FONT></B></TT>
</BLOCKQUOTE>
<P>
The width of the base image is now available.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public static final int HEIGHT</FONT></B></TT>
</BLOCKQUOTE>
<P>
The height of the base image is now available.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public static final int PROPERTIES</FONT></B></TT>
</BLOCKQUOTE>
<P>
The properties of the base image are now available.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public static final int SOMEBITS</FONT></B></TT>
</BLOCKQUOTE>
<P>
Some bits of the image for drawing are now available.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public static final int FRAMEBITS</FONT></B></TT>
</BLOCKQUOTE>
<P>
Another complete frame of a multiframe image is now available.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public static final int ALLBITS</FONT></B></TT>
</BLOCKQUOTE>
<P>
A static image that was previously drawn is now complete and can
be drawn again.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public static final int ERROR</FONT></B></TT>
</BLOCKQUOTE>
<P>
An image that was being tracked asynchronously has encountered
an error.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public static final int ABORT</FONT></B></TT>
</BLOCKQUOTE>
<P>
An image that was beingq tracked was aborted before production
completed.<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ImageUpdate</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ImageObserver</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean imageUpdate(Image img,
int infoflags, int x, int y,<BR>
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT> int width,
int height)
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">imageUpdate()</FONT></TT> method
is called every time image information becomes available. The
recipient of the update messages is an <TT><FONT FACE="Courier">ImageObserver</FONT></TT>
object that has requested information about an image.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">img</FONT></TT> is the image of interest.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">infoflags</FONT></TT> are status flags indicating the progress of the image process.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">x</FONT></TT> is the x coordinate that applies (if necessary).
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">y</FONT></TT> is the y coordinate that applies (if necessary).
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">width</FONT></TT> is the width of the image (if necessary).
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">height</FONT></TT> is the height of the image (if necessary).
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="ImageProducer"><IMG SRC="http://docs.rinet.ru/JavDev/Inter.gif"></A></TD><TD WIDTH=499>
<H2><FONT SIZE=5 COLOR=#FF0000>ImageProducer</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Extends.gif"></TD><TD ><TT><FONT FACE="Courier">Object</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
The class hierarchy for the ImageProducer interface extends from
class java.lang.Object. The ImageProducer interface is implemented
by objects that produce images. Each image contains an ImageProducer.
ImageProducer's overall derivation can be seen in Figure 29.1.
<P>
Listing 29.12 shows the declarations for all of the public methods
included in the java.awt.image.ImageProducer interface.
<HR>
<BLOCKQUOTE>
<B>Listing 29.12. Members of java.awt.image.ImageProducer.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public interface ImageProducer {<BR>
&nbsp;&nbsp;public void addConsumer(ImageConsumer ic)<BR>
&nbsp;&nbsp;public boolean isConsumer(ImageConsumer ic)<BR>
&nbsp;&nbsp;public void removeConsumer(ImageConsumer ic)<BR>
&nbsp;&nbsp;public void startProduction(ImageConsumer ic)<BR>
&nbsp;&nbsp;public void requestTopDownLeftRightResend(ImageConsumer
ic)<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">addConsumer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ImageProducer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void addConsumer(ImageConsumer
ic)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">addConsumer()</FONT></TT> method
adds the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> to
a list to receive image data during reconstruction of the image.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">ic</FONT></TT> is an <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> interface. For more information on the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> 
interface, see the documentation earlier in this chapter.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">IsConsumer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ImageProducer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean isConsumer(ImageConsumer
ic)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">isConsumer()</FONT></TT> method determines
if the specified <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
is currently on the <TT><FONT FACE="Courier">ImageProducer</FONT></TT>'s
list of recipients.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">ic</FONT></TT> is an <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> interface. For more information on the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> 
interface, see the documentation earlier in this chapter.
</TD></TR>
</TABLE></CENTER>

<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD >A Boolean value that is <TT><FONT FACE="Courier">true</FONT></TT> if the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> is registered, <TT><FONT FACE="Courier">false</FONT></TT> if 
not.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">RemoveConsumer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ImageProducer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void removeConsumer(ImageConsumer
ic)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">removeConsumer()</FONT></TT> method
removes the specified <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
from the internal list.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">ic</FONT></TT> is an <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> interface. For more information on the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> 
interface, see the documentation earlier in this chapter.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">StartProduction</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ImageProducer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void startProduction(ImageConsumer
ic)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">startProduction()</FONT></TT> method
adds the specified <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
to the list of image data recipients and immediately begins production
of the image data.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">ic</FONT></TT> is an <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> interface. For more information on the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> 
interface, see the documentation earlier in this chapter.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000  BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></FONT></TT>
</H4>

</TD><TD ><H4><TT><FONT FACE="Courier">RequestTopDownLeftRightResend</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ImageProducer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void requestTopDownLeftRightResend(ImageConsumer
ic)</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">requestTopDownLeftRightResend()</FONT></TT>
method is used to deliver the image data to the specified <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
in top-down, left-right order.
<P><CENTER><TABLE  WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD ><TT><FONT FACE="Courier">ic</FONT></TT> is an <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> interface. For more information on the <TT><FONT FACE="Courier">ImageConsumer</FONT></TT> 
interface, see the documentation earlier in this chapter.
</TD></TR>
</TABLE></CENTER>
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch28.htm"><IMG SRC="http://docs.rinet.ru/JavDev/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="http://docs.rinet.ru/JavDev/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/JavDev/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch30.htm"><IMG 
SRC="http://docs.rinet.ru/JavDev/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>



