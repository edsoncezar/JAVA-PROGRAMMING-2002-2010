<HTML>

<HEAD>
   <TITLE>Chapter 8 -- Developing Java Applications</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">










<H1><FONT COLOR=#FF0000>Chapter 8</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Developing Java Applications</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#ApplicationsversusApplets" >Applications versus Applets</A>
<LI><A HREF="#ReviewofJavaApplets" >Review of Java Applets</A>
<LI><A HREF="#IntroductiontoJavaApplications" >Introduction to Java Applications</A>
<UL>
<LI><A HREF="#JavaApplicationsAnExample" >Java Applications: An Example</A>
<LI><A HREF="#ImportingOtherPackagestoYourJavaAp" >Importing Other Packages to Your Java Applications</A>
<LI><A HREF="#UsingargvtoPassCommandLineArgume" >Using argv[] to Pass Command-Line Arguments</A>
</UL>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
The last chapter introduced you to Java applets. This chapter
is devoted to a term most programmers should already be familiar
with: the application. Applications are the more traditional type
of programs that are used in less recent programming languages
like C and Pascal. You learned in the last chapter that applets
are a new strain of Java programs designed with an Internet readiness
built into them. In this chapter, you will learn about Java applications
and how they differ from Java applets.
<P>
In general, most Java enthusiasts have seen a Java applet on the
Net in one place or another. If you are not in this category,
then point your Java-capable browser to the following site for
an example of a Java applet animation: <TT><FONT FACE="Courier">http://cafe.symantec.com</FONT></TT>.
The two coffee mugs are animated based on the animation applet
that comes with the Java Developer's Kit (see Figure 8.1).
<P>
<A HREF="http://docs.rinet.ru/JavDev/f8-1.gif" ><B>Figure 8.1 : </B><I>An example of animation on the Net (the coffee cups are animated with Java)</I></A><I>.</I>
<P>
Probably one of the most powerful (but as yet untapped features)
of the Java programming language is that applets are only half
of the entire Java language picture. Applets are the celebrated
way of creating Java programs, leaving regular Java applications
in the minority. There are probably only a few Java enthusiasts
who have hands-on experience using Java applications. This is
the result of the extreme exposure of the Internet and not of
deficiencies in the applications themselves. The Internet is not
a place from which applications are designed to be accessed. Nevertheless,
Java applications are no less powerful-and in some situations
much more versatile-than their applet counterparts. Java applications
are just like applets in that they are multiplatformed and bytecode-verified.
However, as you learn in this chapter, because Java applications
are designed to exist inside a secure environment, they are not
as restricted as applets typically are.
<P>
Java applications can be used as client/server solutions or in
an Intranet environment-pretty much in any already secure environment.
Anatomically, Java applications are based on a more traditional
program design model, very similar to that of C/C++.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
An intranet is a smaller, self-contained Internet that is mostly employed by corporations as a way of connecting people to information. The advantage of  intranets for Java applications is that they have an already secure internal environment from which 
Java applications can be used without having to impose all sorts of restrictions on your application.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Topics covered in this chapter include the following:
<UL>
<LI><FONT COLOR=#000000>Applications versus applets: Understanding
the differences and similarities between the two. Reviewing some
of what you already learned in the last chapter.</FONT>
<LI><FONT COLOR=#000000>Understanding the anatomy of Java applications.
Dealing with the </FONT><TT><FONT FACE="Courier">main()</FONT></TT>
method and the <TT><FONT FACE="Courier">argv[]</FONT></TT> array.
<LI><FONT COLOR=#000000>Learning about the </FONT><TT><FONT FACE="Courier">Date</FONT></TT>
and <TT><FONT FACE="Courier">System</FONT></TT> classes in the
Java class library.
<LI><FONT COLOR=#000000>Designing sample runnable applications,
including one example to pass parameters to applications.</FONT>
</UL>
<P>
The next section covers the similarities and differences between
applets and applications.
<H2><A NAME="ApplicationsversusApplets"><FONT SIZE=5 COLOR=#FF0000>Applications
versus Applets</FONT></A></H2>
<P>
In essence, applets and Java applications share many of the same
resources and features. As you will learn in the next section,
the major anatomical difference between an applet and an application
that makes both of them unique is that an applet extends the <TT><FONT FACE="Courier">java.applet.Applet</FONT></TT>
class, and an application utilizes the <TT><FONT FACE="Courier">main()</FONT></TT>
method. On a higher level, an application is not as restricted
as an applet in terms of what it can access. On the other hand,
applications cannot be embedded into HTML pages for any Internet
user to view with a Java-capable browser. Applets and applications
overlap in many areas, but they are specifically designed for
different environments. Figure 8.2 shows a visual interpretation
of the differences and similarities between applications and applets.
Basically, in many core respects they are the same, but they are
unique in the audiences they are trying to reach.
<P>
<A HREF="http://docs.rinet.ru/JavDev/f8-2.gif" ><B>Figure 8.2 : </B><I>Venn diagram of java applications and applets.</I></A>
<H2><A NAME="ReviewofJavaApplets"><FONT SIZE=5 COLOR=#FF0000>Review
of Java Applets</FONT></A></H2>
<P>
In the preceding chapter, you were introduced to the <TT><FONT FACE="Courier">java.applet.Applet</FONT></TT>
class. In order to tell Java that this program is going to be
an applet, all that you basically need to do is create a subclass
of the <TT><FONT FACE="Courier">Applet</FONT></TT> class. Everything
that makes up an applet is inherited from the superclass <TT><FONT FACE="Courier">java.applet.Applet</FONT></TT>.
Included in this inheritance are the basic user interface, methods
for accessing parameters from an HTML page, and several methods
known as life-cycle methods that are called directly by the system
you use to organize your program. Another method that is part
of the <TT><FONT FACE="Courier">java.awt.Component</FONT></TT>
class (which would be a super-super-super class to the class containing
your applet) is the method <TT><FONT FACE="Courier">paint()</FONT></TT>,
which is used to draw various things in your applet's pane. The
following shows an example of what the structure of a typical
applet might look like:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.awt.Graphics;<BR>
class ABClass extends java.applet.Applet {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void init() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Initialize
any variables, images, etc here.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Any initialization
that only needs to be done once should be<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;included here
because this method is called only once. */<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void start() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* This method
can also be used for initialization.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;However, the difference
for this one is that it is used for<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;components in
your applet that need to be initialized more<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;than once, or
if the reader leaves the applet and then<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;returns.
This method can be called more than once. */<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void stop() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* This life cycle method
is the counterpart to start().<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Any code to suspend execution
should be retained here. */<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void destroy() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* This method
is used to clean up the applet before it is<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; finished. This method is
called only once. */<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Any code to
draw, write, or color things on the<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;applet pane belongs
here */<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
In the preceding pseudo-applet, each method is called by the system
at a particular moment, under specific circumstances, or in a
special order. Some of the methods can be called more than once
depending on how the user engages the applet and the environment
in which the applet is being run.
<P>
To review more closely the logistics of an applet, the fact that
an applet is designed to run in the heterogeneous and possibly
unsecured environment of the Internet has imposed several restrictions
on it. Most of this is review from the last chapter, so this explanation
highlights an applet in its strictest sense, pointing out potential
differences with that of applications. Also, note that in certain
situations, there are exceptions to the following restriction,
even in applets. In some cases, these restrictions can be lowered
depending on the type of Internet browser running the applet and
its configuration.
<P>
Applets cannot read or write to the user's file system. This means
that the applet cannot access anything locally or place anything
locally either. For example, many Windows-based applications written
in C utilize an initialization file (an .INI file) in 16-bit Windows
or the Registry in 32-bit Windows to store information about the
application and any user preferences. This is not possible in
the current applet model and imposes a challenge to traditional
programming techniques. This limited access can also include just
checking to see if a file even exists on the user's system.
<P>
Applets cannot utilize native methods, load shared libraries,
or run any programs that may be on the user's system. The major
security concern here is that native methods and local shared
libraries (such as DLLs) can facilitate a loophole in the Java
security model described in the previous paragraph.
<P>
Applets cannot communicate with any server other than the one
from which they originated. In some cases, an encrypted key can
be used to verify a particular applet to a server, or a server
accessed due to a configuration with the Internet browser, but
access to any server on the Net cannot be assumed.
<P>
Overall, applets provide a different format for program execution
and a very tight security model, which is necessary in the very
open environment of the Internet.
<H2><A NAME="IntroductiontoJavaApplications"><FONT SIZE=5 COLOR=#FF0000>Introduction
to Java Applications</FONT></A></H2>
<P>
Java applications are different from Java applets in several ways.
On the inside (that is, the source code level), you do not need
to extend any class in the Java class library when creating an
application. As a result, you do not have a set of basic methods
that you override to execute your program. Instead, you create
a set of classes that contain various parts of your program, and
then you attach a <TT><FONT FACE="Courier">main()</FONT></TT>
method that will contain the code used to execute your code. The
<TT><FONT FACE="Courier">main()</FONT></TT> method is very similar
to that of the C/C++ model; it is here that Java will start the
actual execution of your application. The following shows what
the structure for a typical Java application would look like this:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class TheClass {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/* variables and methods specific to the
class TheClass<BR>
&nbsp;&nbsp;&nbsp;&nbsp;are located here. */<BR>
&nbsp;&nbsp;&nbsp;&nbsp;class ABClass {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* The body of
the class ABClass<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is located here
*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String argv[])
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/* The actual execution of the application
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;is located here. **/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
The modifiers before the <TT><FONT FACE="Courier">main()</FONT></TT> method-<TT><FONT FACE="Courier">public</FONT></TT>, <TT><FONT FACE="Courier">static</FONT></TT>, and <TT><FONT FACE="Courier">void</FONT></TT>-must be present every time you use the 
<TT><FONT FACE="Courier">main()</FONT></TT> method. <TT><FONT FACE="Courier">public</FONT></TT> lets it have maximum exposure inside the current class. <TT><FONT FACE="Courier">static</FONT></TT> causes this method to no longer need instancing in order to 
be available to all of the other methods in the current class. <TT><FONT FACE="Courier">void</FONT></TT> means that there is no returning value coming from this method.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The <TT><FONT FACE="Courier">main()</FONT></TT> method shown in
the preceding code is the system method that is used to invoke
the application. As mentioned earlier, any action code should
be located in <TT><FONT FACE="Courier">main()</FONT></TT>. The
<TT><FONT FACE="Courier">main()</FONT></TT> method is more than
just another method in a Java application. If you do not include
a <TT><FONT FACE="Courier">main()</FONT></TT> method in your application
when you attempt to run it, you will receive a message similar
to the following error message:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">In the class TheClass: void main(String
argv[]) is undefined</FONT></TT>
</BLOCKQUOTE>
<P>
Looking at a higher level in Java application topology, the major
point to note is that in a typical Java application security model,
an application can use native methods and access the user's file
system. If the application and the user's environment are configured
properly, it can also access all kinds of stuff from the Net.
Of course, the price for all of this built-in versatility is that
an application cannot be embedded in an HTML page and downloaded
from a Java-capable browser.
<P>
In most cases, a Java application should look very similar to
a typical C/C++ application. In this chapter, you are going to
create several applications to exemplify some of the features
and methods specific to a Java application. All of these will
be based solely on console-based Java applications, because at
this point you will not cover the AWT (Abstract Window Toolkit)
until Part II, &quot;Using the Java Packages,&quot; in this book.
So remember that all Java applications can be used to create Windows-based
applications complete with dialog boxes and an event handler.
<H3><A NAME="JavaApplicationsAnExample">Java Applications: An
Example</A></H3>
<P>
Start by creating an application that you can execute at the command
prompt. Using the Java Developer's Kit and a text editor, start
by creating a new file called <TT><FONT FACE="Courier">First.java</FONT></TT>
and enter the code from Listing 8.1 into it.
<HR>
<BLOCKQUOTE>
<B>Listing 8.1. The code for </B><TT><B><FONT FACE="Courier">First.java</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1:public class First {<BR>
&nbsp;2:<BR>
&nbsp;3:&nbsp;&nbsp;&nbsp;&nbsp;//variables for class First<BR>
&nbsp;4:&nbsp;&nbsp;&nbsp;&nbsp;String name;<BR>
&nbsp;5:&nbsp;&nbsp;&nbsp;&nbsp;int accountNumber;<BR>
&nbsp;6:&nbsp;&nbsp;&nbsp;&nbsp;float balance;<BR>
&nbsp;7:<BR>
&nbsp;8:&nbsp;&nbsp;&nbsp;&nbsp;//Method to print information
on the screen<BR>
&nbsp;9:&nbsp;&nbsp;&nbsp;&nbsp;void Printout() {<BR>
10:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Name:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&quot; + name);<BR>
11:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Account
Number: &quot; + accountNumber);<BR>
12:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Balance:
<BR>
</FONT></TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<TT><FONT FACE="Courier">
$XXXXXX, Sorry that is classified&quot;);<BR>
13:&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
14:<BR>
15:&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String argv[])
{<BR>
16:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Create an
instance of First<BR>
17:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;First f = new
First();<BR>
18:<BR>
19:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Add data
to the variables in class First<BR>
20:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.name = &quot;John
Smith&quot;;<BR>
21:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.accountNumber
= 235412345;<BR>
22:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.balance =
25;<BR>
23:<BR>
24:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Draw the
top border<BR>
25:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i
= 0; i &lt; 40; i++)<BR>
26:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(&quot;--&quot;);
<BR>
27:<BR>
28:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Title<BR>
29:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INFORMATION&quot;);
<BR>
30:<BR>
31:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Call method
to print the information<BR>
32:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.Printout();
<BR>
33:<BR>
34:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Draw bottom
border<BR>
35:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i
= 0; i &lt; 40; i++)<BR>
36:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(&quot;--&quot;);
<BR>
37:<BR>
38:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Ending remark
<BR>
39:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;End
of printout&quot;);<BR>
40:<BR>
41:&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
42:}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Looking at Listing 8.1, you should notice some things that are
familiar to you. Basically, the class <TT><FONT FACE="Courier">First</FONT></TT>
has three variables: <TT><FONT FACE="Courier">name</FONT></TT>,
<TT><FONT FACE="Courier">accountNumber</FONT></TT>, and <TT><FONT FACE="Courier">balance</FONT></TT>
(lines 4, 5, and 6); and one method called <TT><FONT FACE="Courier">Printout()</FONT></TT>
(lines 9 through 13). However, no action takes place until line
15, which is the first line of the <TT><FONT FACE="Courier">main()</FONT></TT>
method. On line 17, an instance of class <TT><FONT FACE="Courier">First</FONT></TT>
is constructed. Then, in lines 25 and 26, the top border is an
algorithm that scrolls through and draws dashes across the screen.
On line 32, <TT><FONT FACE="Courier">Printout()</FONT></TT> is
invoked. Method <TT><FONT FACE="Courier">Printout()</FONT></TT>
uses the method <TT><FONT FACE="Courier">System.out.println()</FONT></TT>
(lines 10, 11, and 12). Lines 35 and 36 draw a lower border, and
line 39 puts in a closing remark.
<P>
The system methods of <TT><FONT FACE="Courier">print()</FONT></TT>
and <TT><FONT FACE="Courier">println()</FONT></TT> may be something
you have seen before. However, take a closer look at <TT><FONT FACE="Courier">System.out.print()</FONT></TT>.
The class <TT><FONT FACE="Courier">System</FONT></TT> comes from
the package <TT><FONT FACE="Courier">java.lang</FONT></TT> that
is automatically imported in any Java program (be it application
or applet). Table 8.1 shows a list of variables and methods that
belong to the System class.<BR>
<P>
<CENTER><B>Table 8.1. The </B><TT><B><FONT FACE="Courier">System</FONT></B></TT><B>
class.Variable index</B></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=295><I>Variable Name</I></TD><TD WIDTH=295><I>Usage</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">public static PrintStream err</FONT></TT>
</TD><TD WIDTH=295>The output stream for error messages.</TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">Public static InputStream in</FONT></TT>
</TD><TD WIDTH=295>The standard input stream for reading data.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><FONT FACE="Courier">Public static PrintStream out</FONT></TT>
</TD><TD WIDTH=295>The standard output stream for printing messages.
</TD></TR>
</TABLE></CENTER>
<P>
<P>
<CENTER><B>Method Index</B></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=331><I>Method Name</I></TD><TD WIDTH=330><I>Usage</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=331><TT><FONT FACE="Courier">arraycopy (Object src, int src
<BR>
Position, Object dst,<BR>
dstPosition, int len) </FONT></TT>
</TD><TD WIDTH=330>Copies an array.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=331><TT><FONT FACE="Courier">currentTimeMillis()</FONT></TT>
</TD><TD WIDTH=330>Returns a <TT><FONT FACE="Courier">long</FONT></TT> that holds the value in milliseconds since January 1, 1970.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=331><TT><FONT FACE="Courier">exit(int status)</FONT></TT>
</TD><TD WIDTH=330>Exits the application with the specified status code (0 if successful).
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=331><TT><FONT FACE="Courier">gc()</FONT></TT></TD>
<TD WIDTH=330>Manually invokes the garbage collector. Note that unless garbage collection is manually enabled or disabled, it is done automatically by the Java virtual machine.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=331><TT><FONT FACE="Courier">getProperties()</FONT></TT>
</TD><TD WIDTH=330>Returns a <TT><FONT FACE="Courier">Properties</FONT></TT> class with the system properties.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=331><TT><FONT FACE="Courier">getProperty (String key, String</FONT></TT> <TT><FONT FACE="Courier">default)</FONT></TT>
</TD><TD WIDTH=330>Returns a <TT><FONT FACE="Courier">String</FONT></TT> with a value for the  specified property. Or, returns the default if the specified property is not set.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=331><TT><FONT FACE="Courier">runFinalization ()</FONT></TT>
</TD><TD WIDTH=330>Runs the finalization methods of any object pending finalization.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=331><TT><FONT FACE="Courier">setProperties (Properties props)</FONT></TT>
</TD><TD WIDTH=330>Sets the system properties based on the specified properties.
</TD></TR>
</TABLE></CENTER>
<P>
<P>
Table 8.1 shows only a partial list of all of the methods available
for the <TT><FONT FACE="Courier">System</FONT></TT> class; for
a complete review, reference <A HREF="ch32.htm" >Chapter 32</A>,
&quot;Package <TT><FONT FACE="Courier">java.lang</FONT></TT>.&quot;
<P>
So where are the <TT><FONT FACE="Courier">println()</FONT></TT>
and <TT><FONT FACE="Courier">print()</FONT></TT> methods for the
<TT><FONT FACE="Courier">System</FONT></TT> class? If you noticed
in Listing 8.1, you are using the variable <TT><FONT FACE="Courier">out</FONT></TT>
that belongs to the <TT><FONT FACE="Courier">System</FONT></TT>
class. The variable <TT><FONT FACE="Courier">out</FONT></TT> is
an instance of the class <TT><FONT FACE="Courier">PrintStream</FONT></TT>.
<TT><FONT FACE="Courier">PrintStream</FONT></TT> is part of the
set of stream classes that are used in Java.
<P>
Now go ahead and compile the code for <TT><FONT FACE="Courier">First.java</FONT></TT>
by running the <TT><FONT FACE="Courier">javac.exe</FONT></TT>
on the file at the command prompt. If the executable is in the
same directory as the source file, or the directory where <TT><FONT FACE="Courier">javac.exe</FONT></TT>
is located is specified in the environmental path, then you can
type the following at the command prompt. Otherwise, you will
need to include the directory where the javac executable is located:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">javac First.java</FONT></TT>
</BLOCKQUOTE>
<P>
If you typed everything correctly, then you should see something
like Figure 8.3.
<P>
<A HREF="http://docs.rinet.ru/JavDev/f8-3.gif" ><B>Figure 8.3 : </B><I>Compiling the</I> First <I>application.</I></A>
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
When compiling a source code file, the executable compiled file will retain the same name as the source file but have an extension of <TT><FONT FACE="Courier">.class</FONT></TT>. The compiled file, unless otherwise specified, will be dropped in the same 
directory where the source file is located.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Now you can run the application by using the Java interpreter
(called <TT><FONT FACE="Courier">java.exe</FONT></TT>) from the
command prompt in a very similar fashion to which you compiled
it:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">java First</FONT></TT>
</BLOCKQUOTE>
<P>
When the execution is finished, you should see something similar
to Figure 8.4.
<P>
<A HREF="http://docs.rinet.ru/JavDev/f8-4.gif" ><B>Figure 8.4 :</B> <I>Running the</I> First <I>application.</I></A>
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
When interpreting files, you do not need to specify the extension of the source code file, which is always <TT><FONT FACE="Courier">.class</FONT></TT>.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Now that you have compiled your first Java application, you may be wondering what you need to distribute it. Basically, all that you need to distribute a Java application is the compiled class file (that is, the file javac creates with the <TT><FONT 
FACE="Courier">.class</FONT></TT> extension) and an interpreter.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="ImportingOtherPackagestoYourJavaAp">Importing Other
Packages to Your Java Applications</A></H3>
<P>
Looking back at Table 8.1, imagine that you wanted to create a
very simple Java application that would display the date. One
method available to you is the <TT><FONT FACE="Courier">currentTimeMillis()</FONT></TT>.
The <TT><FONT FACE="Courier">currentTimeMillis()</FONT></TT> returns
a 64-bit integer long representing the number of seconds since
January 1, 1970. In your text editor, go ahead and key in Listing
8.2 and save it as <TT><FONT FACE="Courier">DisplayDate.java</FONT></TT>.
<HR>
<BLOCKQUOTE>
<B>Listing 8.2. The code for </B><TT><B><FONT FACE="Courier">DisplayDate.java</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1:public class DisplayDate {<BR>
&nbsp;2:<BR>
&nbsp;3:&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String
argv[]) {<BR>
&nbsp;4:<BR>
&nbsp;5:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Draw
the top border<BR>
&nbsp;6:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int
i = 0; i &lt; 40; i++)<BR>
&nbsp;7:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(&quot;--&quot;);
<BR>
&nbsp;8:<BR>
&nbsp;9:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Display
the time<BR>
10:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Milliseconds
since January 1, 1970:&nbsp;&nbsp;<BR>
&nbsp;&nbsp; &quot; + System.currentTimeMillis());<BR>
11:<BR>
12:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Draw the
bottom border<BR>
13:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i
= 0; i &lt; 40; i++)<BR>
14:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(&quot;--&quot;);
<BR>
15:<BR>
16:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Closing remark
<BR>
17:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;End
of printing&quot;);<BR>
18:<BR>
19:&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
20:}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Reviewing Listing 8.2, you see that, just as in the first example,
there is a top border created in lines 6 and 7. The actual method
<TT><FONT FACE="Courier">currentTimeMillis()</FONT></TT> is located
inside <TT><FONT FACE="Courier">System.out.println()</FONT></TT>
on line 10.  A bottom border is drawn on lines 13 and 14 with
a closing remark on line 17.
<P>
Compile this example by typing the following at the command prompt
(or something similar):
<BLOCKQUOTE>
<TT><FONT FACE="Courier">javac DisplayDate.java</FONT></TT>
</BLOCKQUOTE>
<P>
Once it has successfully compiled, run it by typing the following
at the command prompt, and you should see something similar to
Figure 8.5:
<P>
<A HREF="http://docs.rinet.ru/JavDev/f8-5.gif" ><B>Figure 8.5 : </B><I>Running the</I> DisplayDate <I>application.</I></A>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">java DisplayDate</FONT></TT>
</BLOCKQUOTE>
<P>
Obviously, this is not very useful for figuring out what today's
date is. You would need to write several fairly complex algorithms
to turn that huge number into a more useful format-something not
very practical in the real world.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
The number displayed in Figure 8.5 is very large and growing at a fast rate. One might guess that it will overflow and become inaccurate. However, the integer data type that holds it is a <TT><FONT FACE="Courier">long</FONT></TT>, which is a 64-bit signed 
integer and should be accurate well past the year 200,000,000, so there is no immediate cause for worry.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
This number is used as an internal clock by the system, and it
may not be useful for giving you the date. However, it is useful
in some cases for time-driven software. For example, imagine you
had a piece of software that you wanted to expire in 30 days.
You would stamp that number inside your program with the date
it was installed on the user's system, and calculate 30 days worth
of milliseconds before shutting off your program.
<P>
Returning to a more common issue: What if you wanted to display
today's date to the user of your application? Java has a built-in
class in the package <TT><FONT FACE="Courier">java.util</FONT></TT>
called <TT><FONT FACE="Courier">Date</FONT></TT> that gives you
this functionality. However, if you tried to use the class <TT><FONT FACE="Courier">Date</FONT></TT>
now, you would immediately notice that <TT><FONT FACE="Courier">java.util</FONT></TT>
is not one of the default packages automatically imported to your
application. Hence, you will need to import it manually. The syntax
for importing a package or class is the same for applications
and applets alike and by this point should not be anything new
to you. At the very beginning of your source code class file,
you state the class, classes, or packages you want to have imported
and precede each one of them by the keyword <TT><FONT FACE="Courier">import</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.util.Date;</FONT></TT>
</BLOCKQUOTE>
<P>
Now, based on this snippet of code, your class will have access
to all the non-private members of the <TT><FONT FACE="Courier">Date</FONT></TT>
class. Once again, this should be nothing new to you, and you
will definitely have a chance to work with it more in the coming
chapters.
<P>
Listing 8.3 shows the <TT><FONT FACE="Courier">DisplayDate2.java</FONT></TT>
application that has imported the <TT><FONT FACE="Courier">java.util.Date</FONT></TT>
class and uses some of the methods contained in it. For more information
on all of the methods available to you in the <TT><FONT FACE="Courier">Date</FONT></TT>
class, <A HREF="ch34.htm" >see Chapter 34</A>, &quot;Package <TT><FONT FACE="Courier">java.util</FONT></TT>.&quot;
<HR>
<BLOCKQUOTE>
<B>Listing 8.3. The code for </B><TT><B><FONT FACE="Courier">DisplayDate2.java</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1:import java.util.Date;<BR>
&nbsp;2:<BR>
&nbsp;3:public class DisplayDate2 {<BR>
&nbsp;4:<BR>
&nbsp;5:&nbsp;&nbsp;&nbsp;&nbsp;Date todaysDate = new Date();
<BR>
&nbsp;6:<BR>
&nbsp;7:&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String
argv[]) {<BR>
&nbsp;8:<BR>
&nbsp;9:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Draw
the top border<BR>
10:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i
= 0; i &lt; 40; i++)<BR>
11:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(&quot;--&quot;);
<BR>
12:<BR>
13:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Create an
instance of DisplayDate2<BR>
14:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DisplayDate2
d = new DisplayDate2();<BR>
15:<BR>
16:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Display the
Date<BR>
17:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Today's
Date: &quot; + d.todaysDate);<BR>
18:<BR>
19:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Draw the
bottom border<BR>
20:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i
= 0; i &lt; 40; i++)<BR>
21:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(&quot;--&quot;);
<BR>
22:<BR>
23:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Closing remark
<BR>
24:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;End
of printing&quot;);<BR>
25:<BR>
26:&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
27:}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Looking at the preceding code, you can see that in line 5 you
are declaring a variable called <TT><FONT FACE="Courier">todaysDate</FONT></TT>
from <TT><FONT FACE="Courier">Date</FONT></TT>, and by using the
constructor in this format, you are in fact retrieving the date
and time. Once again in lines 10, 11, 20, and 21, you are building
the upper and lower borders for the application. Then, in line
14, you are creating an instance <TT><FONT FACE="Courier">d</FONT></TT>
of the <TT><FONT FACE="Courier">DisplayDate2</FONT></TT> class;
and on line 17 using <TT><FONT FACE="Courier">System.out.println()</FONT></TT>,
you are actually printing it out. Overall, this application is
fairly simple and the date being printed out is much easier to
understand. Compile and run the program, and you should see something
similar to Figure 8.6.
<P>
<A HREF="http://docs.rinet.ru/JavDev/f8-6.gif" ><B>Figure 8.6 :</B> <I>Running the</I> DisplayDate2 <I>application.</I></A>
<P>
Importing is an integral part of the Java experience whether it
is with applications or applets-it's something which with every
Java developer should become familiar.
<H3><A NAME="UsingargvtoPassCommandLineArgume">Using <TT><FONT SIZE=4 FACE="Courier">argv[]</FONT></TT><FONT SIZE=4>
to Pass Command-Line Arguments</FONT></A></H3>
<P>
One of the attributes of an application is the ability to pass
a command-line argument to it. For example, imagine you had a
program to which you wanted to pass a word. The following shows
what you would type when you run the application:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">java ABClass test</FONT></TT>
</BLOCKQUOTE>
<P>
Where does the argument go? It goes to the array of strings you
declared in the <TT><FONT FACE="Courier">main()</FONT></TT> method,
in this case, <TT><FONT FACE="Courier">argv[]</FONT></TT>.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=553><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=553>
<BLOCKQUOTE>
You can name the array of strings anything you want. Typically, the most common names used are <TT><FONT FACE="Courier">argv[]</FONT></TT> (which comes from C), <TT><FONT FACE="Courier">arg[]</FONT></TT>, or even <TT><FONT 
FACE="Courier">args[]</FONT></TT>.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Basically, the input parameter will put each of the arguments
passed to it in a separate index in the array. Hence, you can
have more than one argument passed in a single session:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">java ABClass test 2</FONT></TT>
</BLOCKQUOTE>
<P>
In the preceding example, there are two arguments. The first argument,
<TT><FONT FACE="Courier">test</FONT></TT>, in this case will go
into <TT><FONT FACE="Courier">argv[0]</FONT></TT>, and the second
<TT><FONT FACE="Courier">2</FONT></TT> will be placed in <TT><FONT FACE="Courier">argv[1]</FONT></TT>.
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Unlike C/C++, the name of the application is not stored as the first item in the <TT><FONT FACE="Courier">argv[]</FONT></TT> array.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The last thing to note about passing arguments is what to do if
you want to pass two or more items as one argument. This can be
accomplished by putting the entire argument into quotation marks.
In the following snippet of code, you have only two arguments,
Ford Mustang and Honda Civic:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">java ABClass &quot;Ford Mustang&quot;
&quot;Honda Civic&quot;</FONT></TT>
</BLOCKQUOTE>
<P>
Now move forward and create a runnable example of how to pass
parameters to a Java application.
<HR>
<BLOCKQUOTE>
<B>Listing 8.4. The code for </B><TT><B><FONT FACE="Courier">SayHello.java</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1:public class SayHello {<BR>
&nbsp;2:<BR>
&nbsp;3:&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String
argv[]) {<BR>
&nbsp;4:<BR>
&nbsp;5:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Draw
the top border<BR>
&nbsp;6:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int
i = 0; i &lt; 40; i++)<BR>
&nbsp;7:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(&quot;--&quot;);
<BR>
&nbsp;8:<BR>
&nbsp;9:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check
to see if no argument was passed<BR>
10:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (argv.length
== 0) {<BR>
11:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Please
enter your name!&quot;);<BR>
12:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.exit(0);
<BR>
13:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
14:<BR>
15:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Loop through
and say hello to everyone<BR>
16:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i
= 0; i &lt; argv.length; i++)<BR>
17:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Hello
&quot; + argv[i]);<BR>
18:<BR>
19:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Draw the
bottom border<BR>
20:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i
= 0; i &lt; 40; i++)<BR>
21:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(&quot;--&quot;);
<BR>
22:<BR>
23:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Closing Remark
<BR>
24:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;End
of printing&quot;);<BR>
25:&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
26:}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
When you look at Listing 8.4, nothing should be new to you except
for the <TT><FONT FACE="Courier">argv.length</FONT></TT> used
in line 10 and line 16, and <TT><FONT FACE="Courier">System.out.exit()</FONT></TT>.
The <TT><FONT FACE="Courier">argv.length</FONT></TT> variable
contains the value for the number of elements utilized in the
specified array, which in this case is <TT><FONT FACE="Courier">argv[]</FONT></TT>.
The <TT><FONT FACE="Courier">System.out.exit()</FONT></TT> is
used to end execution of the application. Other than that, lines
10 to 13 check to see if the length of the array is 0; if <TT><FONT FACE="Courier">true</FONT></TT>,
then there were no arguments passed to it. The <TT><FONT FACE="Courier">for</FONT></TT>
loop located in lines 16 through 17 loops through the length of
the array and then prints it out.
<P>
Now go ahead and compile it by typing the following at the command
prompt:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">javac SayHello.java</FONT></TT>
</BLOCKQUOTE>
<P>
Next, go ahead and run it by typing the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">java SayHello Dan Bill &quot;John Smith&quot;</FONT></TT>
</BLOCKQUOTE>
<P>
Figure 8.7 shows the command prompt displaying the output for
the preceding command. As you can see in the figure, it says hello
to each of the three arguments passed to it.
<P>
<A HREF="http://docs.rinet.ru/JavDev/f8-7.gif" ><B>Figure 8.7 : </B><I>Running the</I> SayHello <I>application.</I></A>
<P>
Now, experiment by not passing any parameters to the application
by typing the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">java SayHello</FONT></TT>
</BLOCKQUOTE>
<P>
Figure 8.8 shows what you should see as the output of the application.
<P>
<A HREF="http://docs.rinet.ru/JavDev/f8-8.gif" ><B>Figure 8.8 : </B><I>Running the</I> SayHello <I>application without arguments.</I></A>
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
In this chapter, you learned about the similarities and differences
between applets and applications and where applications reside
in the overall Java paradigm. Applications provide the advantages
of being able to link native code, as well as more flexibility
with security than their applet counterparts. Also, the anatomy
of Java applets is vastly different, with applications being designed
around the more traditional (that is, C/C++) format of utilizing
the <TT><FONT FACE="Courier">main()</FONT></TT> method. The other
half of the chapter gave several examples of passing arguments
to Java applications.
<P>
Probably the last topic to note before leaving this chapter is
the fact that all of the examples in this chapter were based strictly
on console-based applications. In <A HREF="ch17.htm" >Chapter 17</A>,
&quot;Programming the User Interface,&quot; when you are introduced
to the AWT (Abstract Window Toolkit), you will be able to create
applications that contain windows, dialogs, text fields, and all
of the other components that make up a modern GUI-based program.
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch7.htm"><IMG SRC="http://docs.rinet.ru/JavDev/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="http://docs.rinet.ru/JavDev/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/JavDev/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch9.htm"><IMG 
SRC="http://docs.rinet.ru/JavDev/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>
