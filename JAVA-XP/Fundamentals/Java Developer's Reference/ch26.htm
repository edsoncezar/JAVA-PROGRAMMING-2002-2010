<HTML>

<HEAD>
   <TITLE>Chapter 26 -- Network-Aware Programming</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">










<H1><FONT COLOR=#FF0000>Chapter 26</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Network-Aware Programming</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>

<UL>
<LI><A HREF="#TheServerDiscussion" >The Server Discussion</A>
<LI><A HREF="#TheServerWorkshop" >The Server Workshop</A>
<LI><A HREF="#TheClientDiscussion" >The Client Discussion</A>
<LI><A HREF="#TheClientWorkshop" >The Client Workshop</A>
<UL>
<LI><A HREF="#ExecutingtheClientServerApplication" >Executing the Client/Server Application</A>
</UL>
<LI><A HREF="#InterAppletCommunication" >Inter-Applet Communication</A>
<LI><A HREF="#TheFirstApplet" >The First Applet</A>
<LI><A HREF="#TheSecondApplet" >The Second Applet</A>
<UL>
<LI><A HREF="#ExecutingtheInterAppletCommunication" >Executing the Inter-Applet Communication Example</A>
</UL>
<LI><A HREF="#AppletCommunicationwiththeBrowser" >Applet Communication with the Browser</A>
<LI><A HREF="#JavaCommunicationwiththeInternetUsi" >Java Communication with the Internet Using URLConnection</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
Network-aware programming with Java is not very hard to understand.
Only a few classes and procedures need to be followed when you're
dealing with the <TT><FONT FACE="Courier">java.net</FONT></TT>
package. The tricky part is understanding exactly how communication
takes place. Once you have this understanding and you know what
methods and procedures to use in the <TT><FONT FACE="Courier">java.net</FONT></TT>
package, you should be able to develop network-enabled Java programs
with very little trouble. This chapter gives you a deeper understanding
of how communication takes place in Java and on the Internet,
and what you need to know to effectively design a Java program
to connect to the Internet, a server, or even another applet.
<P>
Much of the material in this chapter is based on <TT><FONT FACE="Courier">java.net</FONT></TT>.
Note that <A HREF="ch33.htm" >Chapter 33</A>, &quot;Package <TT><FONT FACE="Courier">java.net</FONT></TT>,&quot;
gives a complete overview of the <TT><FONT FACE="Courier">java.net</FONT></TT>
package in the Java class library and you should refer to it periodically
throughout this chapter. You can also use it if you want more
details about the classes and methods used in this chapter.
<H2><A NAME="TheServerDiscussion"><FONT SIZE=5 COLOR=#FF0000>The
Server Discussion</FONT></A></H2>
<P>
As you know, a server's job is to facilitate and house information
for clients in a network. In this section, you'll learn how to
create a basic server in Java.
<P>
What makes up a server? The following attributes contribute to
a Java program becoming a server:
<UL>
<LI><FONT COLOR=#000000>Designates a port and listens for activity.</FONT>
<LI><FONT COLOR=#000000>Responds to requests from clients on the
designated port.</FONT>
<LI><FONT COLOR=#000000>Interprets the incoming information and
responds accordingly.</FONT>
</UL>
<P>
Typically, a server isn't designed to have a spiffy user interface;
that's reserved for the client part of the application-the part
usually seen by the application's user. Server applications are
more function than form.
<P>
The first class to discuss in the <TT><FONT FACE="Courier">java.net</FONT></TT>
package is the <TT><FONT FACE="Courier">java.net.ServerSocket</FONT></TT>
class. <TT><FONT FACE="Courier">ServerSocket</FONT></TT> is responsible
for how TCP deals with retrieving a port, which is done when creating
an instance of the <TT><FONT FACE="Courier">ServerSocket</FONT></TT>
class. The following shows an example using port 1234:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;theServerSocket = new ServerSocket( 1055
);<BR>
} catch(IOException e) {}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
If the port you specified is already in use, then an <TT><FONT FACE="Courier">IOException</FONT></TT> might be raised. If that happens, try using another port. The higher the port number you choose, the less likely it is to be in use.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Once you successfully get a port for a server, you need to have
it continually listen for any activity by using the method <TT><FONT FACE="Courier">accept()</FONT></TT>
in the <TT><FONT FACE="Courier">ServerSocket</FONT></TT> class:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Socket s = theServerSocket.accept();<BR>
} catch(IOException e) {}</FONT></TT>
</BLOCKQUOTE>
<P>
This method cycles continually, listening to the designated port
until a request comes through. If a request comes through and
is successful, the method <TT><FONT FACE="Courier">accept()</FONT></TT>
returns a class <TT><FONT FACE="Courier">Socket</FONT></TT> containing
a connection to the client that initially requested a connection.
<P>
The returned class <TT><FONT FACE="Courier">java.net.Socket</FONT></TT>
represents an actual TCP connection. When a socket is created
from the method <TT><FONT FACE="Courier">accept()</FONT></TT>,
a connection has been successfully opened between the client and
the server. A <TT><FONT FACE="Courier">Socket</FONT></TT> class
can use an IP address or host name, a port, or both at the same
time to establish a connection. You will see more of this class
in subsequent sections about the client.
<P>
If everything goes smoothly, then you should be at the stage where
you can begin receiving and sending information between the client
and the server. The two methods in the <TT><FONT FACE="Courier">Socket</FONT></TT>
class responsible for that are the <TT><FONT FACE="Courier">getInputStream()</FONT></TT>
and the <TT><FONT FACE="Courier">getOutputStream()</FONT></TT>.
The <TT><FONT FACE="Courier">getInputStream()</FONT></TT> returns
an <TT><FONT FACE="Courier">InputStream</FONT></TT> from the <TT><FONT FACE="Courier">java.io</FONT></TT>
package, and <TT><FONT FACE="Courier">getOutputStream</FONT></TT>
returns an <TT><FONT FACE="Courier">OutputStream</FONT></TT> from
the <TT><FONT FACE="Courier">java.io</FONT></TT> package. You
do your communicating between the client and the server in these
returned classes. You have pretty much finished using networking
tools in Java; now you need to implement streams.
<H2><A NAME="TheServerWorkshop"><FONT SIZE=5 COLOR=#FF0000>The
Server Workshop</FONT></A></H2>
<P>
Listing 26.1 is a server for the client/server example in this
chapter. Go ahead and open a new file in your text editor, enter
the code for Listing 26.1, and then save it as <TT><FONT FACE="Courier">myServer.java</FONT></TT>.
(The code for Listing 26.1 is available from this book's CD-ROM.)
<HR>
<BLOCKQUOTE>
<B>Listing 26.1. The code for </B><TT><B><FONT FACE="Courier">myServer.java</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1:import java.io.*;<BR>
&nbsp;2:import java.net.*;<BR>
&nbsp;3:import java.awt.*;<BR>
&nbsp;4:<BR>
&nbsp;5:public class myServer extends Frame {<BR>
&nbsp;6:<BR>
&nbsp;7:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TextArea
txtPane;<BR>
&nbsp;8:<BR>
&nbsp;9:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myServer()
{<BR>
10:<BR>
11:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Create
the Interface<BR>
12:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(&quot;The
Server v 1.0&quot;);<BR>
13:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;txtPane
= new TextArea(&quot;Status Window:\n&quot;, 10, 30);<BR>
14:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;Center&quot;,
txtPane);<BR>
15:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pack();
<BR>
16:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;show();
<BR>
17:<BR>
18:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ServerSocket
theSocketServer = null;<BR>
19:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Socket
socketReturn = null;<BR>
20:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InputStream
rawDataIn = null;<BR>
21:<BR>
22:&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
23:<BR>
24:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theSocketServer
= new ServerSocket( 1055 );<BR>
25:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;txtPane.appendText(
&quot;Initializing the port... \n&quot;);<BR>
26:<BR>
27:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Listen at
the port 1055<BR>
28:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;txtPane.appendText(
&quot;Listening... \n&quot;);<BR>
29:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;socketReturn
= theSocketServer.accept();<BR>
30:<BR>
31:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Connection
has been achieved with client<BR>
32:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;txtPane.appendText(
&quot;Connected to a Client \n&quot;);<BR>
33:<BR>
34:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Get data
from the Socket<BR>
35:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rawDataIn =
socketReturn.getInputStream();<BR>
36:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataInputStream
DataIn = new DataInputStream(rawDataIn);<BR>
37:<BR>
38:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Print Data
our in the Statue Window<BR>
39:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String Value
= DataIn.readLine();<BR>
40:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;txtPane.appendText(&quot;Hello:
&quot; + Value + &quot;!&quot;);<BR>
41:<BR>
42:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
43:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch(
UnknownHostException e) {<BR>
44:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;txtPane.appendText(&quot;Unable
to find Server. Error&quot; + e);<BR>
45:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
46:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch(
IOException e ) {<BR>
47:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;txtPane.appendText(&quot;IO
Error has been raised. Error &quot; + e);<BR>
48:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
49:&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
50:<BR>
51:&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String argv[])
{<BR>
52:<BR>
53:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new
myServer();<BR>
54:&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
55:<BR>
56:&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleEvent(Event event)
{<BR>
57:<BR>
58:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(event.id
== Event.WINDOW_DESTROY) {<BR>
59:<BR>
60:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);
<BR>
61:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
62:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
63:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return super.handleEvent(event);
<BR>
64:&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
65:}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
In Listing 26.1, lines 12 to 16 should be nothing new to you;
they are simply the code that builds the user interface (UI) for
this application. Besides a frame, the only UI component created
in this code is a <TT><FONT FACE="Courier">TextArea</FONT></TT>
because it has a method called <TT><FONT FACE="Courier">appendText()</FONT></TT>
that lets you attach text to the end of text already contained
in a given <TT><FONT FACE="Courier">TextArea</FONT></TT>. In effect,
you're making a large status window where you can watch the application's
progress.
<P>
Following the UI, Lines 18 to 20 are responsible for initializing
all the network-related variables, including the streams that
will accept and retrieve the input and output from a client. Notice
that for simplicity's sake this server is only initializing an
<TT><FONT FACE="Courier">InputStream</FONT></TT> (Line 20) so
it can just receive information from the client. In most real-world,
and more complex, situations you want to have both streams to
receive and send data across the line.
<P>
Line 24 initializes the server port, and Line 29 executes the
<TT><FONT FACE="Courier">accept()</FONT></TT> method to begin
listening on that port. If a request comes in on the port, then
Lines 35 and 36 are invoked to retrieve the <TT><FONT FACE="Courier">InputStream</FONT></TT>
from the connection, and on Line 39, the <TT><FONT FACE="Courier">InputStream</FONT></TT>
is placed into the <TT><FONT FACE="Courier">String</FONT></TT>
variable <TT><FONT FACE="Courier">Value</FONT></TT>. On the next
line (Line 40), the information retrieved from the client is printed
out in <TT><FONT FACE="Courier">TextArea</FONT></TT> on the server.
<P>
The only other major piece of code that should be discussed are
Lines 56 through 63, which shouldn't be anything new to you. These
lines enable you to exit from the application without raising
any exceptions.
<P>
Your next step is to compile the application; however, you shouldn't
run it yet since the client hasn't been created. That will be
the next step to accomplish before you can see your client/server
application come to life.
<H2><A NAME="TheClientDiscussion"><FONT SIZE=5 COLOR=#FF0000>The
Client Discussion</FONT></A></H2>
<P>
The primary role of a client is to have a well-developed user
interface. Usually, it is the client that users see whenever they
execute your programs.
<P>
Once you have a user interface in place, your next step is to
use the <TT><FONT FACE="Courier">Socket</FONT></TT> class in the
<TT><FONT FACE="Courier">java.net</FONT></TT> package to request
a connection with a port on the server. The following list describes
a client's key features:
<UL>
<LI><FONT COLOR=#000000>The client should contain the front-end
of your application.</FONT>
<LI><FONT COLOR=#000000>The client requests a connection with
the server to send and receive data.</FONT>
<LI><FONT COLOR=#000000>The client application is a self-contained
program from the server.</FONT>
</UL>
<P>
In Java, a client application uses the <TT><FONT FACE="Courier">Socket</FONT></TT>
class to connect to a particular port. The following code lines
show an example of creating an instance of the <TT><FONT FACE="Courier">Socket</FONT></TT>
class on a client application; the first number is the IP address
(or you can use the host name) and the port from which it should
request a connection to.
<BLOCKQUOTE>
<TT><FONT FACE="Courier">try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp; Socket s = new Socket(&quot;123.123.123.123&quot;,
1234);<BR>
} catch(IOException e) {}</FONT></TT>
</BLOCKQUOTE>
<P>
When a connection has been successfully established, you can use
the same two methods-<TT><FONT FACE="Courier">getOutputStream()</FONT></TT>and
<TT><FONT FACE="Courier">getInputStream()</FONT></TT>-you used
in the server example. By using these streams, you can send information
to the server and get information back.
<P>
In the next section, you actually write the client side of the
sample application.
<H2><A NAME="TheClientWorkshop"><FONT SIZE=5 COLOR=#FF0000>The
Client Workshop</FONT></A></H2>
<P>
Open up your text editor and enter the code from Listing 26.2;
when you're done, go ahead and compile it. (Note that the code
for Listing 26.2 is available from this book's CD-ROM.)
<HR>
<BLOCKQUOTE>
<B>Listing 26.2. The code for </B><TT><B><FONT FACE="Courier">myClient.java</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1:import java.awt.*;<BR>
&nbsp;2:import java.net.*;<BR>
&nbsp;3:import java.io.*;<BR>
&nbsp;4:<BR>
&nbsp;5:public class myClient extends Frame {<BR>
&nbsp;6:<BR>
&nbsp;7:&nbsp;&nbsp;&nbsp;&nbsp;//Variables for UI<BR>
&nbsp;8:&nbsp;&nbsp;&nbsp;&nbsp;Button btnServer;<BR>
&nbsp;9:&nbsp;&nbsp;&nbsp;&nbsp;TextField txtInput;<BR>
10:<BR>
11:&nbsp;&nbsp;&nbsp;&nbsp;//Initialize Output Streams<BR>
12:&nbsp;&nbsp;&nbsp;&nbsp;OutputStream rawDataOut = null;<BR>
13:&nbsp;&nbsp;&nbsp;&nbsp;PrintStream DataOut = null;<BR>
14:<BR>
15:&nbsp;&nbsp;&nbsp;&nbsp;//Initialize Socket<BR>
16:&nbsp;&nbsp;&nbsp;&nbsp;Socket theClientSocket = null;<BR>
17:<BR>
18:&nbsp;&nbsp;&nbsp;&nbsp;myClient() {<BR>
19:<BR>
20:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Create the
Interface<BR>
21:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(&quot;The
Client&quot;);<BR>
22:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout(new
FlowLayout());<BR>
23:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(new Label(&quot;Enter
Your Name: &quot;));<BR>
24:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;txtInput=new
TextField(25);<BR>
25:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(txtInput);
<BR>
26:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;btnServer=new
Button(&quot;Send to Server&quot;);<BR>
27:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(btnServer);
<BR>
28:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pack();<BR>
29:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;show();<BR>
30:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.resize(400,
100);<BR>
31:<BR>
32:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
33:<BR>
34:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Instantiate
a new Socket<BR>
35:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theClientSocket
= new Socket(&quot;127.0.0.1&quot;, 1055);<BR>
36:<BR>
37:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rawDataOut
= theClientSocket.getOutputStream();<BR>
38:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataOut
= new PrintStream(rawDataOut);<BR>
39:<BR>
40:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch( UnknownHostException
e) {<BR>
41:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Unable
to find the Server. Error &quot; + e);<BR>
42:<BR>
43:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch ( IOException
e ) {<BR>
44:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;An
IO error has been raised. Error &quot; + e);<BR>
45:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
46:&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
47:<BR>
48:&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleEvent(Event event)
{<BR>
49:<BR>
50:&nbsp;&nbsp;&nbsp;&nbsp;if (event.id == Event.ACTION_EVENT
&amp;&amp; event.target == btnServer) {<BR>
51:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clickedBtnServer();
<BR>
52:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;
<BR>
53:&nbsp;&nbsp;&nbsp;&nbsp;} else if (event.id == Event.WINDOW_DESTROY)
{<BR>
54:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);
<BR>
55:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;
<BR>
56:&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
57:&nbsp;&nbsp;&nbsp;&nbsp;return super.handleEvent(event);<BR>
58:&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
59:<BR>
60:&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String argv[])
{<BR>
61:<BR>
62:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new myClient();
<BR>
63:&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
64:<BR>
65:&nbsp;&nbsp;&nbsp;&nbsp;public void clickedBtnServer() {<BR>
66:<BR>
67:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Send Data
to Server<BR>
68:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
69:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataOut.print(txtInput.getText());
<BR>
70:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Close
the Socket<BR>
71:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theClientSocket.close();
<BR>
72:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch(Exception
e) {}<BR>
73:&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
74:}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Listing 26.2 is the sample client application. Starting at the
top, notice that besides initializing two UI components (Lines
8 and 9), you are just initializing the output stream (Lines 12
and 13 ) for this application. That's because this is a simple
model, so the client application will just be sending information
to the server. In most cases, you use both input and output streams
so you can get responses from the server. Finally, the <TT><FONT FACE="Courier">Socket</FONT></TT>
is initialized on Line 16.
<P>
Lines 21 through 30 build the interface for the application. Line
35 creates an instance of the <TT><FONT FACE="Courier">Socket</FONT></TT>
class that's sent to the server requesting a connection. Notice
that you're using the local IP address because both the client
and the server reside on your system locally.
<P>
In Lines 37 through 38, you see the code for retrieving the output
stream from the <TT><FONT FACE="Courier">Socket</FONT></TT> connection;
this task is done by using the <TT><FONT FACE="Courier">getOutputStream()</FONT></TT>
method on Line 37.
<P>
The <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
on Line 48 checks for two actions: whether the button <TT><FONT FACE="Courier">btnServer</FONT></TT>
has been clicked (Line 50) or the <TT><FONT FACE="Courier">Event.WINDOW_DESTROY</FONT></TT>
has been invoked (Line 53). If the button <TT><FONT FACE="Courier">btnServer</FONT></TT>
is clicked, then the <TT><FONT FACE="Courier">clickedBtnServer()</FONT></TT>
method (Line 51) is called. This method, located on Lines 65 through
73, basically sends out the contents of the text box <TT><FONT FACE="Courier">txtInput</FONT></TT>
to the <TT><FONT FACE="Courier">Socket</FONT></TT> so it can go
to the server on Line 69. On Line 71, it closes the connection
to the <TT><FONT FACE="Courier">Socket</FONT></TT>.
<P>
The <TT><FONT FACE="Courier">main()</FONT></TT> method (Lines
60 to 63) merely creates an instance of the class <TT><FONT FACE="Courier">myClient</FONT></TT>
using the <TT><FONT FACE="Courier">myClient()</FONT></TT> constructor
method.
<H3><A NAME="ExecutingtheClientServerApplication">Executing the
Client/Server Application</A></H3>
<P>
When you execute the <TT><FONT FACE="Courier">myServer</FONT></TT>
and <TT><FONT FACE="Courier">myClient</FONT></TT> applications,
order is crucial if you want the demonstration to work properly.
The <TT><FONT FACE="Courier">myServer</FONT></TT> application
should be loaded first so it can start listening at port 1055,
then load the client application so that when it requests a connection
on that port, it will get a response.
<P>
First, run the <TT><FONT FACE="Courier">myServer</FONT></TT> application
and watch the status pane in the server application as it initializes
the port and starts to listen. When the <TT><FONT FACE="Courier">myServer</FONT></TT>
application looks like the one shown in Figure 26.1, then you
are ready to execute the client application.
<P>
<A HREF="http://docs.rinet.ru/JavDev/f26-1.gif" ><B>Figure 26.1:</B> <I>The</I> myServer <I>application listening at port 1055</I></A>.
<P>
Now run the <TT><FONT FACE="Courier">myClient</FONT></TT> application
while leaving the <TT><FONT FACE="Courier">myServer</FONT></TT>
application up. When you load the <TT><FONT FACE="Courier">myClient</FONT></TT>
application, it automatically requests a connection through that
port to the server. Once a connection has been made, the server
tells you it has connected to a client. (See Figure 26.2.)
<P>
<A HREF="http://docs.rinet.ru/JavDev/f26-2.gif" ><B>Figure 26.2:</B><I> The </I>myClient<I> application successfully connected to </I>myServer<I>.</I></A>
<P>
At this point, you have successfully initialized the port and
created a socket between these two applications. To test your
client/server application, enter your name in the <TT><FONT FACE="Courier">myClient</FONT></TT>
text field, then click the Send to Server button. You will see
the server application respond, as shown in Figure 26.3.
<P>
<A HREF="http://docs.rinet.ru/JavDev/f26-3.gif" ><B>Figure 26.3.:</B> <I>The </I>myClient<I> application retrieving information from the server.</I></A>
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Technical Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
If you are using Windows 95 and an earlier version of the JDK prior to 1.0.2, you may experience problems retrieving information from the server.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Obviously, this is a very simple client/server application, but
it does illustrate the material needed to develop more functional
programs. You should now have a general understanding of how TCP/IP
works and know how to work the methods in the <TT><FONT FACE="Courier">java.net</FONT></TT>
package to create client/server applications that can communicate
with each other.
<H2><A NAME="InterAppletCommunication"><FONT SIZE=5 COLOR=#FF0000>Inter-Applet
Communication</FONT></A></H2>
<P>
Sockets aren't the only way to make your programs network aware.
Another technique, known as <I>inter-applet communication</I>,
is much easier to understand and fairly easy to do. Unlike the
client/server model you used in the last section, inter-applet
communication is based on a peer-to-peer networking environment
in which there really is no designated server or client; each
participant merely contributes resources and communicates.
<P>
When dealing with inter-applet communication, there are no complex
procedures to follow. There are two key things you need to do
to implement inter-applet communication:
<UL>
<LI><FONT COLOR=#000000>Use the </FONT><TT><FONT FACE="Courier">getAppletContext()</FONT></TT>method
to retrieve information about the other applet you want to connect
with.
<LI><FONT COLOR=#000000>Handle events </FONT>so that when an event
is passed to one applet, it can be &quot;transported&quot; to
the other applet.
</UL>
<P>
The method <TT><FONT FACE="Courier">getAppletContext()</FONT></TT>
is a member of the <TT><FONT FACE="Courier">java.applet.Applet</FONT></TT>
class. It returns an object known as <TT><FONT FACE="Courier">AppletContext()</FONT></TT>.
This class contains information about the applet's environment.
The method <TT><FONT FACE="Courier">getAppletContext()</FONT></TT>
actually provides more information than just the  existence of
other applets in the environment; it's used in the next section
when we discuss  having an applet communicate with an Internet
browser.
<P>
Since <TT><FONT FACE="Courier">getAppletContext()</FONT></TT>
actually returns the object <TT><FONT FACE="Courier">AppletContext</FONT></TT>,
which contains information about the applet's environment, the
actual method that does the getting is a member of the <TT><FONT FACE="Courier">AppletContext</FONT></TT>
class called <TT><FONT FACE="Courier">getApplet()</FONT></TT>.
The <TT><FONT FACE="Courier">getApplet()</FONT></TT> method takes
a <TT><FONT FACE="Courier">String</FONT></TT> that should contain
the name of the applet you want to get information about.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
The <TT><FONT FACE="Courier">NAME</FONT></TT> parameter is an optional part of the <TT><FONT FACE="Courier">APPLET</FONT></TT> tag in HTML code. <TT><FONT FACE="Courier">NAME</FONT></TT> is used to identify a name for a particular applet. For example, even 
though the class of this applet is <TT><FONT FACE="Courier">myApplet</FONT></TT>, the name that it will be referred to by other applets is <TT><FONT FACE="Courier">theApplet</FONT></TT>:
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;APPLET CODE=myApplet.class NAME=theApplet WIDTH=100 HEIGHT=100&gt; &lt;/APPLET&gt;</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
When an applet is going to be referenced by another for communication purposes, you must give that applet a name.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The following is an example of using the <TT><FONT FACE="Courier">getAppletContext().getApplet()</FONT></TT>
method for an applet named <TT><FONT FACE="Courier">theApplet</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Applet a = getAppletContext().getApplet(&quot;theApplet&quot;);
<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Another method you can use is <TT><FONT FACE="Courier">getApplets()</FONT></TT>, which returns a list of all the applets it found in the environment.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Now that you have a handle on the applet you want to communicate
with, you need to see how to pass events from one applet to the
other. For example, Applet A wants to communicate with Applet
B, and it has created an <TT><FONT FACE="Courier">Applet</FONT></TT>
object referring to Applet B. Applet A gets an event from the
user (such as a button click) in the <TT><FONT FACE="Courier">handleEvent()</FONT></TT>
method, so you want to pass that event off to Applet B:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean handleEvent(Event event)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Applet a = getAppletContext().getApplet(&quot;theApplet&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return a.handleEvent(event);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
In the Applet B event handler, look for an event coming from Applet
A and respond accordingly.
<P>
With event handling, it's a matter of having one applet pass an
event to the other applet, which is the tricky part of inter-applet
communication. Once you have mastered that, the rest is easy.
<H2><A NAME="TheFirstApplet"><FONT SIZE=5 COLOR=#FF0000>The </FONT><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">First</FONT></TT><FONT SIZE=5 COLOR=#FF0000>
Applet</FONT></A></H2>
<P>
Begin by creating the applet <TT><FONT FACE="Courier">First</FONT></TT>.
Open a clean window in your text editor and enter the code for
<TT><FONT FACE="Courier">First.java</FONT></TT>, shown in Listing
26.3. (The code for Listing 26.3 is available from this book's
CD-ROM.) The <TT><FONT FACE="Courier">First</FONT></TT> applet
will be the one receiving events from the applet.
<HR>
<BLOCKQUOTE>
<B>Listing 26.3. The code for </B><TT><B><FONT FACE="Courier">First.java</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1:import java.awt.*;<BR>
&nbsp;2:<BR>
&nbsp;3:public class First extends java.applet.Applet {<BR>
&nbsp;4:<BR>
&nbsp;5:&nbsp;&nbsp;&nbsp;&nbsp;//Variables for UI<BR>
&nbsp;6:&nbsp;&nbsp;&nbsp;&nbsp;Label lblOutput;<BR>
&nbsp;7:<BR>
&nbsp;8:&nbsp;&nbsp;&nbsp;&nbsp;public void init() {<BR>
&nbsp;9:<BR>
10:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Create the
UI<BR>
11:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add(new Label(&quot;The
First applet.&quot;));<BR>
12:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lblOutput = new Label(&quot;Click
on a button in the Second applet.&quot;);<BR>
13:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add(lblOutput);<BR>
14:&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
15:<BR>
16:&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleEvent(Event event)
{<BR>
17:<BR>
18:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (&quot;One&quot;.equals(event.arg))
{<BR>
19:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lblOutput.setText(&quot;You
clicked: One&quot;);<BR>
20:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
21:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (&quot;Two&quot;.equals(event.arg))
{<BR>
22:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lblOutput.setText(&quot;You
clicked: Two&quot;);<BR>
23:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
24:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (&quot;Three&quot;.equals(event.arg))
{<BR>
25:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lblOutput.setText(&quot;You
clicked: Three&quot;);<BR>
26:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
27:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
28:&nbsp;&nbsp;&nbsp;&nbsp;return super.handleEvent(event);&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
29:<BR>
30:}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Lines 11 to 13 create the UI for the applet. The only other method
in this applet is the <TT><FONT FACE="Courier">handleEvent()</FONT></TT>
method (starting on Line 16) in the applet. The <TT><FONT FACE="Courier">handleEvent()</FONT></TT>
method includes three <TT><FONT FACE="Courier">if</FONT></TT>
expressions (Lines 18, 21, and 24); each one checks to see whether
the event being passed to it has an argument that's the label
for the command button in the applet <TT><FONT FACE="Courier">Second</FONT></TT>
(the one created in the subsequent section). In response, it will
change the label <TT><FONT FACE="Courier">lblOutput</FONT></TT>
to show the user that, indeed, a particular button from applet
<TT><FONT FACE="Courier">Second</FONT></TT> was clicked (Lines
19, 22,  and 25).
<H2><A NAME="TheSecondApplet"><FONT SIZE=5 COLOR=#FF0000>The </FONT><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">Second</FONT></TT><FONT SIZE=5 COLOR=#FF0000>
Applet</FONT></A></H2>
<P>
Here is the code for the second applet (see Listing 26.4). The
applet <TT><FONT FACE="Courier">Second</FONT></TT> is responsible
for doing the sending to the applet <TT><FONT FACE="Courier">First</FONT></TT>.
<HR>
<BLOCKQUOTE>
<B>Listing 26.4. The code for </B><TT><B><FONT FACE="Courier">Second.java</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1:import java.awt.*;<BR>
&nbsp;2:import java.applet.*;<BR>
&nbsp;3:public class Second extends java.applet.Applet {<BR>
&nbsp;4:<BR>
&nbsp;5:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Declare
the UI variables<BR>
&nbsp;6:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Button
btnOne;<BR>
&nbsp;7:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Button
btnTwo;<BR>
&nbsp;8:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Button
btnThree;<BR>
&nbsp;9:<BR>
10:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void
init() {<BR>
11:<BR>
12:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Build
the UI<BR>
13:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;btnOne
= new Button(&quot;One&quot;);<BR>
14:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(btnOne);
<BR>
15:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;btnTwo
= new Button(&quot;Two&quot;);<BR>
16:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(btnTwo);
<BR>
17:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;btnThree
= new Button(&quot;Three&quot;);<BR>
18:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(btnThree);
<BR>
19:<BR>
20:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
21:<BR>
22:public boolean handleEvent(Event event) {<BR>
23:<BR>
24:&nbsp;&nbsp;&nbsp;&nbsp;if (event.id == Event.ACTION_EVENT
&amp;&amp; event.target == btnOne) {<BR>
25:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Applet f =
getAppletContext().getApplet(&quot;theFirst&quot;);<BR>
26:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return f.handleEvent(event);
<BR>
27:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (event.id
== Event.ACTION_EVENT &amp;&amp; event.target == btnTwo) {<BR>
28:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Applet f =
getAppletContext().getApplet(&quot;theFirst&quot;);<BR>
29:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return f.handleEvent(event);
<BR>
30:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else if (event.id ==
Event.ACTION_EVENT &amp;&amp; event.target == btnThree) {<BR>
31:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Applet f =
getAppletContext().getApplet(&quot;theFirst&quot;);<BR>
32:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return f.handleEvent(event);
<BR>
33:&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
34:<BR>
35:&nbsp;&nbsp;&nbsp;&nbsp;return super.handleEvent(event);}<BR>
36:}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Starting with the life cycle method <TT><FONT FACE="Courier">init()</FONT></TT>,
Lines 13 to 18 build the interface. Notice, though, that the interface
consists of three buttons labeled &quot;One&quot; (Line 13), &quot;Two&quot;
(Line 15), and &quot;Three&quot; (Line 17). These labels help
the applet <TT><FONT FACE="Courier">First</FONT></TT> distinguish
what to display in the output label.
<P>
The method <TT><FONT FACE="Courier">handleEvent()</FONT></TT>
(beginning on Line 22) has three <TT><FONT FACE="Courier">if</FONT></TT>
expressions (Lines 24, 27, and 30). Each of the <TT><FONT FACE="Courier">if</FONT></TT>
expressions looks for each of the three command buttons to see
whether they were clicked. If one of the buttons was clicked,
then each method uses the method <TT><FONT FACE="Courier">getAppletContext()getApplet</FONT></TT>
to retrieve the applet <TT><FONT FACE="Courier">First</FONT></TT>
and instance it to variable <TT><FONT FACE="Courier">f</FONT></TT>,
using the name <TT><FONT FACE="Courier">theFirst</FONT></TT> (Lines
25, 28, and 31). Then, on the following line (Lines 26, 29, and
31), it sends the event to the applet <TT><FONT FACE="Courier">First</FONT></TT>
so that it can handle it. At that point, applet <TT><FONT FACE="Courier">Second</FONT></TT>
has done its job by finding out which button was clicked and sending
the event with the appropriate attributes to the applet <TT><FONT FACE="Courier">First</FONT></TT>.
Now it waits until one of the buttons is clicked again.
<H3><A NAME="ExecutingtheInterAppletCommunication">Executing the
Inter-Applet Communication Example</A></H3>
<P>
Now that you have created both files, it's time to compile and
execute each one. You can compile both of them using the <TT><FONT FACE="Courier">javac.exe</FONT></TT>
command. Since these are applets, you can't use the <TT><FONT FACE="Courier">java.exe</FONT></TT>
interpreter; however, you can use the applet viewer that comes
with the JDK. To use the applet viewer, though, you need to have
an HTML file referring to both of these applets. Listing 26.5
shows the code for <TT><FONT FACE="Courier">index.html</FONT></TT>.
Go ahead and create <TT><FONT FACE="Courier">index.html</FONT></TT>
in your text editor and enter the HTML code from Listing 26.5.
<HR>
<BLOCKQUOTE>
<B>Listing 26.5. The code for </B><TT><B><FONT FACE="Courier">index.html</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">1:&lt;HTML&gt;<BR>
2:&lt;BODY&gt;<BR>
3:&lt;applet code=First.class name=theFirst width=250 height=100&gt;&lt;/applet&gt;
<BR>
4:&lt;applet code=Second.class&nbsp;&nbsp;width=200 height=100&gt;&lt;/applet&gt;
<BR>
5:&lt;/BODY&gt;<BR>
6:&lt;/HTML&gt;</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Now you're ready to actually run the two applets through the applet
viewer. Make sure both applets (<TT><FONT FACE="Courier">First</FONT></TT>
and <TT><FONT FACE="Courier">Second</FONT></TT>) are in the same
directory as the <TT><FONT FACE="Courier">index.html</FONT></TT>
and that the file <TT><FONT FACE="Courier">applet viewer.exe</FONT></TT>
that comes with the JDK is accessible from that directory. Finally,
you can invoke the applet viewer by typing the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">appletviewer index.html</FONT></TT>
</BLOCKQUOTE>
<P>
You should then see two applets pop up on your desktop. (See Figure
26.4.)
<P>
<A HREF="http://docs.rinet.ru/JavDev/f26-4.gif" ><B>Figure 26.4:</B><I> Inter-applet example with both applets initialized.</I></A>
<P>
Once the applets have finished loading, you're ready to begin
by clicking any of the buttons on the <TT><FONT FACE="Courier">Second</FONT></TT>
applet pane. This creates an event inside the applet, which responds
by kicking another message to the <TT><FONT FACE="Courier">First</FONT></TT>
applet. Next, the <TT><FONT FACE="Courier">First</FONT></TT> applet
displays what button was clicked on the <TT><FONT FACE="Courier">Second</FONT></TT>
applet. (See Figure 26.5.)
<P>
<A HREF="http://docs.rinet.ru/JavDev/f26-5.gif" ><B>Figure 26.5:</B><I> Inter-applet example with the button Two clicked.</I></A>
<H2><A NAME="AppletCommunicationwiththeBrowser"><FONT SIZE=5 COLOR=#FF0000>Applet
Communication with the Browser</FONT></A></H2>
<P>
The <TT><FONT FACE="Courier">getAppletContext()</FONT></TT> method
can also be used to facilitate communicating to a browser from
inside the applet itself. There are several ways to communicate
to the browser externally (such as using HTML tags and attributes);
however, applets are somewhat limited in what they can do internally.
In this section, you'll learn about two methods directly related
to browser communication-both deal with sending information from
the applet to the host browser.
<P>
However, before you can deal with that you need to learn about
another class in the <TT><FONT FACE="Courier">java.net</FONT></TT>
package called the <TT><FONT FACE="Courier">URL</FONT></TT> class.
<I>URL</I> stands for Uniform Resource Locator; you can use this
class to house information on URLs from almost any location on
the Internet. You can also use other Internet protocols besides
HTTP, like FTP and gopher. Here's an example of creating a new
URL for access to the Web site <TT><A HREF="http://cafe.symantec.com/">http://caf&eacute;.symantec.com</A></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;URL myWebsite = new URL(&quot;http://caf&eacute;.symantec.com&quot;);
<BR>
} catch(MalformedURLException e) {}</FONT></TT>
</BLOCKQUOTE>
<P>
There are several other constructors for this class, including
one for specifying the protocol and port for a given URL reference
(<A HREF="ch33.htm" >see Chapter 33</A> for more information).
Once you have a URL, you can pass it to your browser by using
the <TT>showDocument()</TT> method
from <TT><FONT FACE="Courier">getAppletContext()</FONT></TT>.
<P>
The other method that comes from <TT><FONT FACE="Courier">getAppletContext()</FONT></TT>
is the <TT><FONT FACE="Courier">showStatus()</FONT></TT>method,
used for displaying messages in the browser's bottom status bar.
This example shows how to display the line <TT><FONT FACE="Courier">Please
wait for the applet to load...</FONT></TT> in the user's browser
status bar:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">getAppletContext().showDocument(&quot;Please
wait for the applet to load&#133;&quot;);</FONT></TT>
</BLOCKQUOTE>
<P>
Now you'll create a real-world example that sends requests to
an Internet browser (in this case Internetscape, but it should
work for any Java-capable browser) to either go to the Java home
page (<TT><A HREF="http://www.javasoft.com/">http://www.javasoft.com</A></TT>)
or FTP to the directory where the JDK is located on the Java site
(<TT><FONT FACE="Courier"><A HREF="ftp://ftp.javasoft.com/pub">ftp://ftp.javasoft.com/pub</A></FONT></TT>).
<P>
In your text editor, create a new file and enter the code in Listing
26.6; save it as <TT><FONT FACE="Courier">BrowserLink.java</FONT></TT>.
<HR>
<BLOCKQUOTE>
<B>Listing 26.6. The code for </B><TT><B><FONT FACE="Courier">BrowserLink.java</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1:import java.net.*;<BR>
&nbsp;2:import java.awt.*;<BR>
&nbsp;3:<BR>
&nbsp;4:public class BrowserLink extends java.applet.Applet {
<BR>
&nbsp;5:<BR>
&nbsp;6:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Declare
variables<BR>
&nbsp;7:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URL urlJava;
<BR>
&nbsp;8:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URL urlJDK;
<BR>
&nbsp;9:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Button
btnFirst;<BR>
10:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Button btnSecond;
<BR>
11:<BR>
12:&nbsp;&nbsp;&nbsp;&nbsp;public void init() {<BR>
13:<BR>
14:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Build UI
<BR>
15:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;btnFirst =
(new Button(&quot;Java Home Page&quot;));<BR>
16:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(btnFirst);
<BR>
17:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;btnSecond =
(new Button(&quot;The JDK download Directory&quot;));<BR>
18:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(btnSecond);
<BR>
19:&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
20:<BR>
21:&nbsp;&nbsp;&nbsp;&nbsp;public void start() {<BR>
22:<BR>
23:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check to
make sure the URL is accessible<BR>
24:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
25:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;urlJava&nbsp;&nbsp;=
new URL(&quot;http://www.javasoft.com&quot;);<BR>
26:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;urlJDK
= new URL(&quot;ftp&quot;, &quot;ftp.javasoft.com&quot;, &quot;/pub&quot;);
<BR>
27:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (MalformedURLException
e) {<BR>
28:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Unable
to retieve URL. Error: &quot; + e);<BR>
29:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
30:&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
31:<BR>
32:&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleEvent(Event event)
{<BR>
33:<BR>
34:&nbsp;&nbsp;&nbsp;&nbsp;if (event.id == Event.ACTION_EVENT
&amp;&amp; event.target == btnFirst) {<BR>
35:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getAppletContext().showDocument(urlJava);
<BR>
36:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
37:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else if (event.id
== Event.ACTION_EVENT &amp;&amp; event.target == btnSecond){<BR>
38:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getAppletContext().showDocument(urlJDK);
<BR>
39:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
40:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
41:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return super.handleEvent(event);
<BR>
42:&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
43:}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The UI is built in the <TT>init()</TT>
life-cycle method in Lines 15 through 18. Inside the life cycle
method <TT><FONT FACE="Courier">start()</FONT></TT> (beginning
with Line 21), the life cycle method is <TT>a
try</TT> block, which is used to make sure that the two
URLs, <TT><A HREF="http://www.javasoft.com/">http://www.javasoft.com</A></TT>
 (Line 25) and <TT><FONT FACE="Courier"><A HREF="ftp://ftp.javasoft.com/">ftp://ftp.javasoft.com</A></FONT></TT>
(Line 26), are valid and accessible from the current environment
(Lines 24 through 29).
<P>
The <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
(starting on Line 32) contains two <TT><FONT FACE="Courier">if</FONT></TT>
expressions: one to determine whether <TT><FONT FACE="Courier">btnFirst</FONT></TT>
is clicked (Line 34) and the other to determine whether <TT><FONT FACE="Courier">btnSecond</FONT></TT>
is clicked (Line 37).
<P>
If the first <TT><FONT FACE="Courier">if</FONT></TT> expression
(Line 34) returns <TT><FONT FACE="Courier">true</FONT></TT>, meaning
that <TT><FONT FACE="Courier">btnFirst</FONT></TT> was indeed
pressed, then the <TT><FONT FACE="Courier">showDocument()</FONT></TT>
method (Line 35) is invoked, going to the URL address <TT><A HREF="http://www.javasoft.com/">http://www.javasoft.com</A></TT>.
However, if the second <TT><FONT FACE="Courier">if</FONT></TT>
expression returns <TT><FONT FACE="Courier">true</FONT></TT>,
meaning that the button <TT><FONT FACE="Courier">btnSecond</FONT></TT>
is clicked, then on Line 38 the method <TT><FONT FACE="Courier">showDocument()</FONT></TT>
is used to take the user to the directory where the JDK is available
for downloading on the JavaSoft site <TT><FONT FACE="Courier"><A HREF="ftp://ftp.javasoft.com/pub">ftp://ftp.javasoft.com/pub</A></FONT></TT>.
<P>
Go ahead and compile Listing 26.7 in a file called <TT><FONT FACE="Courier">BrowserLink.java</FONT></TT>.
Your next step is to create an HTML file to run it out of, which
is shown in Listing 26.7. In another clean text editor, create
the file <TT><FONT FACE="Courier">BrowserLink.html</FONT></TT>
and enter the code in Listing 26.7.
<HR>
<BLOCKQUOTE>
<B>Listing 26.7. The code for </B><TT><B><FONT FACE="Courier">BrowserLink.html</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">1:&lt;HTML&gt;<BR>
2:&lt;HEAD&gt;<BR>
3:&lt;/HEAD&gt;<BR>
4:&lt;BODY&gt;<BR>
5:&lt;APPLET CODE=BrowserLink.class WIDTH=200 HEIGHT=100&gt; &lt;/APPLET&gt;
<BR>
6:&lt;/BODY&gt;<BR>
7:&lt;/HTML&gt;</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Now you're ready to execute and run the program. With both files
(<TT><FONT FACE="Courier">BrowserLink.java</FONT></TT> and <TT><FONT FACE="Courier">BrowserLink.html</FONT></TT>)
in the same directory, load the HTML page <TT><FONT FACE="Courier">BrowserLink.html</FONT></TT>
in your Internet browser. This example uses Netscape Navigator,
but any Internet browser will do.
<P>
You can see in Figure 26.6 that there are two command buttons
available. The first one, &quot;Java Home Page,&quot; is <TT><FONT FACE="Courier">btnFirst</FONT></TT>,
and the second, &quot;The JDK Download Directory,&quot; is <TT><FONT FACE="Courier">btnSecond</FONT></TT>.
Click the Java Home Page button and watch as your browser automatically
loads the URL <TT><A HREF="http://www.javasoft.com/">http://www.javasoft.com</A></TT>.
(See Figure 26.7.)
<P>
<A HREF="http://docs.rinet.ru/JavDev/f26-6.gif" ><B>Figure 26.6:</B><I> The </I>BrowserLink<I> applet loaded.</I></A>
<P>
<A HREF="http://docs.rinet.ru/JavDev/f26-7.gif" ><B>Figure 26.7:</B><I> The JavaSoft home page.</I></A>
<P>
As you can see, the applet was replaced with the JavaSoft home
page. Now, go back to the applet <TT><FONT FACE="Courier">BrowserLink</FONT></TT>
and click the JDK Download Directory button; this time, the applet
will be replaced by the directory (including Sun's disclaimer)
where you can download the JDK. (See Figure 26.8.)
<P>
<A HREF="http://docs.rinet.ru/JavDev/f26-8.gif" ><B>Figure 26.8:</B><I> The JavaSoft FTP archive in the </I>/pub<I> directory.</I></A>
<P>
There are many ways for an applet to interact with the browser.
However, always remember the trite security model for Java applets.
<H2><A NAME="JavaCommunicationwiththeInternetUsi"><FONT SIZE=5 COLOR=#FF0000>Java
Communication with the Internet Using </FONT><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">URLConnection</FONT></TT></A>
</H2>
<P>
The final topic discussed in this chapter expands on the information
in the previous section. Instead of retrieving information through
the browser, you could retrieve information directly from the
Internet to your applet. One way to do that is by using the class
<TT><FONT FACE="Courier">URLConnection</FONT></TT>, which represents
a connection to a specified URL on the Internet. <TT><FONT FACE="Courier">URLConnection</FONT></TT>
is the class used to retrieve information from a URL passed to
it. This is an example of how it's used:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;URL myURL = &quot;http://caf&eacute;.symantec.com&quot;;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;URLConnection myConnection = URLConnection.openConnection(myURL);
<BR>
} catch(MalformedException e) {}</FONT></TT>
</BLOCKQUOTE>
<P>
Once you have a valid connection, use <TT><FONT FACE="Courier">getInputStream()</FONT></TT>
and filter it through the <TT><FONT FACE="Courier">DataInputStream</FONT></TT>,
where you can successfully retrieve information directly to the
applet.
<P>
Another method you can use is the <TT><FONT FACE="Courier">openStream()</FONT></TT>
method directly from the <TT><FONT FACE="Courier">java.net.URL</FONT></TT>
class.
<P>
The following example in Listing 26.8 is a Java application. When
you click the command button, it will access the JavaSoft home
page (<TT><A HREF="http://www.javasoft.com/">http://www.javasoft.com</A></TT>)
and retrieve the information, as a browser would.
<HR>
<BLOCKQUOTE>
<B>Listing 26.8. The code for </B><TT><B><FONT FACE="Courier">Retrieve.java</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1:import java.net.*;<BR>
&nbsp;2:import java.awt.*;<BR>
&nbsp;3:import java.io.*;<BR>
&nbsp;4:<BR>
&nbsp;5:public class Retrieve extends Frame {<BR>
&nbsp;6:<BR>
&nbsp;7:&nbsp;&nbsp;&nbsp;&nbsp;//Declare variables<BR>
&nbsp;8:&nbsp;&nbsp;&nbsp;&nbsp;Button btnRetrieve;<BR>
&nbsp;9:&nbsp;&nbsp;&nbsp;&nbsp;TextArea txtPane;<BR>
10:&nbsp;&nbsp;&nbsp;&nbsp;static URL urlJava;<BR>
11:&nbsp;&nbsp;&nbsp;&nbsp;static URLConnection conJava;<BR>
12:&nbsp;&nbsp;&nbsp;&nbsp;InputStream rawInput;<BR>
13:<BR>
14:&nbsp;&nbsp;&nbsp;&nbsp;Retrieve() {<BR>
15:<BR>
16:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Build the
UI<BR>
17:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(&quot;The
Retrieve Application&quot;);<BR>
18:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout(new
FlowLayout());<BR>
19:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;btnRetrieve
= new Button(&quot;Retrieve the JavaSoft home page.&quot;);<BR>
20:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(btnRetrieve);
<BR>
21:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;txtPane = new
TextArea(30,70);<BR>
22:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(txtPane);
<BR>
23:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pack();<BR>
24:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;show();<BR>
25:<BR>
26:&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
27:<BR>
28:&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String argv[])
{<BR>
29:<BR>
30:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new Retrieve();
<BR>
31:&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
32:<BR>
33:&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleEvent(Event event)
{<BR>
34:<BR>
35:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String Value;
<BR>
36:<BR>
37:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (event.id
== Event.ACTION_EVENT &amp;&amp; event.target == btnRer&ccedil;&acirc;eve)
{<BR>
38:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clickedbtnRetrieve();
<BR>
39:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
40:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (event.id
== Event.WINDOW_DESTROY) {<BR>
41:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);
<BR>
42:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
43:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
44:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return super.handleEvent(event);
<BR>
45:&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
46:<BR>
47:&nbsp;&nbsp;&nbsp;&nbsp;public void clickedbtnRetrieve() {
<BR>
48:<BR>
49:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Check to
make sure the URL is accessible<BR>
50:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
51:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;urlJava&nbsp;&nbsp;=
new URL(&quot;http://www.javasoft.com&quot;);<BR>
52:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch(MalformedURLException
e) {<BR>
53:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Unable
to retieve URL. Error: &quot; + e);<BR>
54:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
54:<BR>
55:<BR>
56:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Retrieve
the information<BR>
57:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
58:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;conJava
= urlJava.openConnection();<BR>
59:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rawInput
= conJava.getInputStream();<BR>
60:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataInputStream
DataIn = new DataInputStream(rawInput);<BR>
61:<BR>
62:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Read
and display data.<BR>
63:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
(int i = 1; i &lt; 30; i++) {<BR>
64:<BR>
65:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
Value = DataIn.readLine();<BR>
66:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;txtPane.appendText(Value
+ &quot;\n&quot;);<BR>
67:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
68:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch(IOException
e) {<BR>
69:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;an
IO error has been raised. Error: &quot; + e);<BR>
70:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
71:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
72:}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Starting on Lines 8 to 12, you declare variables for the UI, and
Lines 17 to 24 build the UI. The <TT><FONT FACE="Courier">main()</FONT></TT>
method on Line 28 creates an instance of the class <TT><FONT FACE="Courier">Retrieve</FONT></TT>
when the application is executed.
<P>
The interesting part of this application is the <TT><FONT FACE="Courier">handleEvent()</FONT></TT>
method starting on Line 35. There are two <TT><FONT FACE="Courier">if</FONT></TT>
statements (Lines 37 and 40). The first <TT><FONT FACE="Courier">if</FONT></TT>
statement checks to see whether the button <TT><FONT FACE="Courier">btnRetrieve</FONT></TT>
is clicked. If this is true, then it will invoke the following:
<UL>
<LI><FONT COLOR=#000000>Check to see whether the URL is valid
and accessible from this application's environment (Lines 50 to
55).</FONT>
<LI><FONT COLOR=#000000>Open a connection to the URL </FONT><TT><A HREF="http://www.javasoft.com/">http://www.javasoft.com</A></TT>
(Line 59).
<LI><FONT COLOR=#000000>Invoke the method </FONT><TT><FONT FACE="Courier">getInputStream()</FONT></TT>
to retrieve the raw data from that server (Line 60).
<LI><FONT COLOR=#000000>Pass the raw </FONT><TT><FONT FACE="Courier">InputStream</FONT></TT>
to the instance variable <TT><FONT FACE="Courier">In</FONT></TT>
from the <TT><FONT FACE="Courier">DataInputStream</FONT></TT>
<BR>
(Line 61).
<LI><FONT COLOR=#000000>Scroll through and read the data into
</FONT><TT><FONT FACE="Courier">String</FONT></TT> variable <TT><FONT FACE="Courier">Value</FONT></TT>
(Line 66), then display in the <TT><FONT FACE="Courier">TextArea</FONT></TT>
using the <TT><FONT FACE="Courier">appendText()</FONT></TT> method
(Line 67).
</UL>
<P>
Compile and run the application <TT><FONT FACE="Courier">Retrieve</FONT></TT>,
and you should see something similar to Figure 26.9.
<P>
<A HREF="http://docs.rinet.ru/JavDev/f26-9.gif" ><B>Figure 26.9:</B><I> The </I>Retrieve<I> application.</I></A>
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=590><B>Warning</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=590>
<BLOCKQUOTE>
Be sure you're connected to the Internet before running the <TT><FONT FACE="Courier">Retrieve</FONT></TT> application in Listing 26.8.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Next, click the button &quot;Retrieve the JavaSoft home page,&quot;
and you'll see the first 30 lines of HTML code from the site <TT><A HREF="http://www.javasoft.com/">http://www.javasoft.com</A></TT>.
(See Figure 26.10.)
<P>
<A HREF="http://docs.rinet.ru/JavDev/f26-10.gif" ><B>Figure 26.10:</B><I> The </I>Retrieve<I> application with the </I><A HREF="http://www.javasoft.com/">http://www.javasoft.com</A><I> site downloaded.</I></A>
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
This chapter covered how the Internet communicates and included
a high-level introduction to TCP/IP and client/server architecture.
You also learned about inter-applet communication and how to bounce
events off one applet to another on a single home page. Finally,
you saw how to let Java applets and applications communicate with
the Internet. This chapter concluded with a Java example you can
actually run.
<P>
Network programming gives you several ways to do the same things.
Although this chapter tried to show several of the most common
techniques, for each potential solution in Java, there may be
alternative methods. If you're interested in learning more, a
good place to start is to become familiar with all the available
classes in the <TT><FONT FACE="Courier">java.net</FONT></TT> package,
described in <A HREF="ch33.htm" >Chapter 33</A>. No matter what
people say (myself included), network programming can be a somewhat
complex topic-but in the real world, it's a necessity that your
Java programs have the capability to communicate with each other
and the environment around them.
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch25.htm"><IMG SRC="http://docs.rinet.ru/JavDev/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="http://docs.rinet.ru/JavDev/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/JavDev/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="part3.htm"><IMG 
SRC="http://docs.rinet.ru/JavDev/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>

