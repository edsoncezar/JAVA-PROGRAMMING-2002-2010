<HTML>

<HEAD>
   <TITLE>Chapter 6 -- Java for Visual Baisc Programmers</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">










<H1><FONT COLOR=#FF0000>Chapter 6</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Java for Visual Baisc Programmers</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#VisualBasicversusJavaorObjectBase" >Visual Basic versus Java, or Object-Based versus Object-Oriented</A>
<UL>
<LI><A HREF="#Encapsulation" >Encapsulation</A>
<LI><A HREF="#Inheritance" >Inheritance</A>
<LI><A HREF="#Polymorphism" >Polymorphism</A>
</UL>
<LI><A HREF="#ComparingActiveXtoJavaClasses" >Comparing ActiveX to Java Classes</A>
<LI><A HREF="#UnderstandingJavaProgramFlow" >Understanding Java Program Flow</A>
<UL>
<LI><A HREF="#TheAppletLifeCycle" >The Applet Life Cycle</A>
</UL>
<LI><A HREF="#LanguageFeaturesandSyntax" >Language Features and Syntax</A>
<UL>
<LI><A HREF="#DataTypes" >Data Types</A>
<LI><A HREF="#DeclaringVariables" >Declaring Variables</A>
<LI><A HREF="#ProgrammingConstructs" >Programming Constructs</A>
<LI><A HREF="#LanguageFeaturesMissingfromVisualBa" >Language Features Missing from Visual Basic</A>
</UL>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
At first glance, the Java language may seem entirely foreign to
Visual Basic programmers, but both languages share a number of
features. This chapter is provided as a resource for experienced
Visual Basic programmers who are interested in learning to develop
applications using Java. After a short period of time, Visual
Basic developers will see that the language provides them with
a new wealth of information and tools that were previously unavailable
to them. However, there are tradeoffs (as there always are!).
Special attention will be paid to major differences between Java
and Visual Basic in order to provide the Visual Basic developer
with the skills needed to begin programming in Java.
<H2><A NAME="VisualBasicversusJavaorObjectBase"><FONT SIZE=5 COLOR=#FF0000>Visual
Basic versus Java, or Object-Based versus Object-Oriented</FONT></A>
</H2>
<P>
To compare these two powerful languages, we must first make a
decision: what should we look at first? Obviously, the syntax
of every programming language is completely different. However,
because these two languages implement different methodologies,
a study of syntax will be delayed until later on in the chapter.
<P>
The argument can be made that most modern programming languages
can be separated into several major groups. These range from object-oriented
to what will be called &quot;object-based&quot; to standard procedural
languages. Figure 6.1 shows some popular languages and which groups
they roughly conform to.
<P>
<A HREF="http://docs.rinet.ru/JavDev/f6-1.gif" ><B>Figure 6.1 : </B><I>Scale of modern programming languages.</I></A>
<P>
Because syntax (where to put semicolons, and so on) is a relatively
minor issue, the initial emphasis will be placed on understanding
exactly what the term &quot;object-oriented&quot; means.
<P>
Object-oriented languages enable the programmer to create programming
objects that can be reused within a single application or across
multiple applications. Java refers to these objects as a <I>class</I>.
Classes are user-defined data types that contain both data and
methods. Listing 6.1 shows a sample pseudo-class named <TT><FONT FACE="Courier">Auto</FONT></TT>.
<HR>
<BLOCKQUOTE>
<B>Listing 6.1. A sample Java class named </B><TT><B><FONT FACE="Courier">Auto</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">class Auto<BR>
{<BR>
&nbsp;&nbsp;&nbsp;int Number_Of_Doors;<BR>
&nbsp;&nbsp;&nbsp;int Number_Of_Seats;<BR>
&nbsp;&nbsp;&nbsp;boolean Radio;<BR>
&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;Year;<BR>
&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;Model;<BR>
&nbsp;&nbsp;&nbsp;float GetGasMileage();<BR>
&nbsp;&nbsp;&nbsp;void Accelerate();<BR>
&nbsp;&nbsp;&nbsp;void Stop();<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
As you can see, this class <TT><FONT FACE="Courier">Auto</FONT></TT>
contains data (<TT><FONT FACE="Courier">Number_Of_Doors</FONT></TT>,
<TT><FONT FACE="Courier">Number_Of_Seats</FONT></TT>, <TT><FONT FACE="Courier">Radio</FONT></TT>,
and <TT><FONT FACE="Courier">Year</FONT></TT>) as well as methods
(<TT><FONT FACE="Courier">GetGasMileage</FONT></TT>, <TT><FONT FACE="Courier">Accelerate</FONT></TT>,
and <TT><FONT FACE="Courier">Stop</FONT></TT>). Some people like
to think of these as &quot;nouns&quot; and &quot;verbs.&quot;
Visual Basic enables the programmer to create objects that mix
data and member functions. For example, by building a form with
a text field and a button on it, the programmer has just built
an object. This object can be referenced by other objects and
reused across multiple applications. This is why Visual Basic
is said to be object-based and not procedural. So, what does it
take to qualify as object-oriented?
<P>
For a language to be object-oriented, it is generally accepted
that it should have several primary features:
<UL>
<LI><FONT COLOR=#000000>Encapsulation</FONT>
<LI><FONT COLOR=#000000>Inheritance</FONT>
<LI><FONT COLOR=#000000>Polymorphism</FONT>
</UL>
<H3><A NAME="Encapsulation">Encapsulation</A></H3>
<P>
Encapsulation is the process of encapsulating data and operations
within a manageable interface. The class <TT><FONT FACE="Courier">Auto</FONT></TT>
meets this description fully. If a programmer wanted to instantiate
(create) a new <TT><FONT FACE="Courier">Auto</FONT></TT> for use
in his program, he would simply add a member variable of type
<TT><FONT FACE="Courier">Auto</FONT></TT>. Object-oriented languages
also allow the class creator to limit access to data and operations
within the class. Some data and operations within each class are
considered <I>private</I> or &quot;for internal use only.&quot;
This allows the interface of that class to be controlled for outside
use.
<H3><A NAME="Inheritance">Inheritance</A></H3>
<P>
Inheritance is the process of deriving new objects from existing
objects. This allows the class developer to reuse code that has
already been created for the parent (or base) class. Here object-based
and object-oriented languages begin to differ. In Visual Basic,
for example, once an &quot;object&quot; within the program is
created, the programmer is severely limited if he would like to
inherit from it. However, in Java we can extend classes as much
as necessary. Unlike C++, however, Java will only allow a class
to have one parent. This is known as &quot;single inheritance.&quot;
As an example, the class <TT><FONT FACE="Courier">Truck</FONT></TT>
shown in Listing 6.2 demonstrates inheritance in Java.
<HR>
<BLOCKQUOTE>
<B>Listing 6.2. The </B><TT><B><FONT FACE="Courier">Truck</FONT></B></TT><B>
class inherits from </B><TT><B><FONT FACE="Courier">Auto</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">class Truck extends Auto<BR>
{<BR>
&nbsp;&nbsp;&nbsp;boolean Four_Wheel_Drive;<BR>
&nbsp;&nbsp;&nbsp;Color&nbsp;&nbsp;&nbsp;color;<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
This code means that class <TT><FONT FACE="Courier">Truck</FONT></TT>
was designed to be a &quot;child&quot; of class <TT><FONT FACE="Courier">Auto</FONT></TT>.
Therefore, it will inherit all of the public data and methods
that exist in the <TT><FONT FACE="Courier">Auto</FONT></TT> class.
<H3><A NAME="Polymorphism">Polymorphism</A></H3>
<P>
Polymorphism is defined as &quot;the occurrence of different forms,
stages, or types in individual organisms or in organisms of the
same species.&quot; This essentially means that although the <TT><FONT FACE="Courier">Truck</FONT></TT>
class now inherited all of the data and methods from <TT><FONT FACE="Courier">Auto</FONT></TT>,
it is free to reimplement them as it chooses. You could extend
<TT><FONT FACE="Courier">Truck</FONT></TT> as shown in Listing
6.3.
<HR>
<BLOCKQUOTE>
<B>Listing 6.3. Adding to the </B><TT><B><FONT FACE="Courier">Truck</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">class Truck extends Auto<BR>
{<BR>
&nbsp;&nbsp;&nbsp;boolean Four_Wheel_Drive;<BR>
&nbsp;&nbsp;&nbsp;Color&nbsp;&nbsp;&nbsp;color;<BR>
&nbsp;&nbsp;&nbsp;void Accelerate();<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The purpose of the <TT><FONT FACE="Courier">Accelerate</FONT></TT>
function in the <TT><FONT FACE="Courier">Truck</FONT></TT> class
might be different (for instance, the acceleration speed might
be affected if <TT><FONT FACE="Courier">Four_Wheel_Drive</FONT></TT>
is on). Therefore, any time that any other class or method calls
the <TT><FONT FACE="Courier">Truck.Accelerate</FONT></TT> method,
the <TT><FONT FACE="Courier">Truck</FONT></TT>'s <TT><FONT FACE="Courier">Accelerate</FONT></TT>
method will be called, <I>not</I> <TT><FONT FACE="Courier">Auto</FONT></TT>'s.
(This is true even if class <TT><FONT FACE="Courier">Auto</FONT></TT>'s
method <TT><FONT FACE="Courier">GetGasMileage()</FONT></TT> called
<TT><FONT FACE="Courier">Accelerate()</FONT></TT>.)
<H2><A NAME="ComparingActiveXtoJavaClasses"><FONT SIZE=5 COLOR=#FF0000>Comparing
ActiveX to Java Classes</FONT></A></H2>
<P>
When Microsoft introduced the VBX for use within the Visual Basic
programming environment, it created an entire industry of component
manufacturers. The VBX standard was straightforward and allowed
developers to implement encapsulation of distributable programming
tools. Each VBX/OCX implements its own properties and methods
and allows the programmer to trap events. Although OCXs (now called
ActiveX controls) are implemented using Microsoft OLE, these controls
still appear to the developer as a set of properties, methods,
and events encapsulated in one single programming object.
<P>
A Java class allows developers some advantages over an ActiveX
control. Ignoring for the moment various features built into the
language such as threading and exception handling, Java classes
fully support inheritance and polymorphism. How important is this?
Currently, hundreds of Java class source files are freely available
on the World Wide Web. This list grows daily, and it is growing
quickly. Java developers envision a world where Java class clearinghouses
are available to quickly download classes that can be extended
by individual developers. In addition to this, various third-party
Java class libraries are already appearing for the support of
various operations such as multimedia, networking, and database
access. All of this code is completely reusable and extensible
(not to mention platform-independent!).
<P>
When a Java class is downloaded from a Web server, it is able
to communicate freely with the server that it was downloaded from.
This is extremely useful for database access, running CGI scripts,
or retrieving additional classes. ActiveX controls, meanwhile,
are allowed to communicate with any machine containing Distributed
Component Object Model (DCOM) objects. ActiveX controls are also
basically allowed full access to the user's system, unlike Java
applets, which are restricted.
<P>
ActiveX controls do have some distinct advantages, however. Any
ActiveX container application can communicate with and display
an ActiveX control within its window. This means that Web browsers
that are ActiveX-enabled (such as Microsoft Internet Explorer
3.0) will be able to display Excel spreadsheets directly on an
HTML page. ActiveX controls uploaded to a user's Web browser can
also communicate with any application that supports COM (Component
Object Model) interfaces.
<P>
Currently, it appears that Microsoft intends to wrap Java classes
with an ActiveX layer to allow Java developers to take advantage
of the features mentioned here. This will be done through the
magic of the Microsoft Windows Virtual Machine for Java and the
underlying Component Object Model.
<H2><A NAME="UnderstandingJavaProgramFlow"><FONT SIZE=5 COLOR=#FF0000>Understanding
Java Program Flow</FONT></A></H2>
<P>
One of the biggest hurdles for non-object-oriented developers
to clear is simply understanding exactly what is going on within
an object-oriented application. At times, it appears that methods
are being called by some invisible force within your computer.
GUI environments such as Windows, Macintosh, and Motif just add
to this apparent state of confusion because operating system events
are constantly being funneled to the application responsible for
trapping those events.
<H3><A NAME="TheAppletLifeCycle">The Applet Life Cycle</A></H3>
<P>
Think about what is actually required to create a simple Visual
Basic form. The form is first created, and any controls that need
to be added to it are done at this time. By default, this form
is automatically created and shown when the application is run.
How does this happen? As you might expect, there is a lot more
going on in the background than meets the eye.
<P>
The first thing you must understand is how applications run in
multitasking operating environments. The Windows environment continually
handles messages from a variety of hardware and software sources.
It then in turn &quot;forwards&quot; these messages on to each
application that is currently &quot;listening.&quot; Your application
actually has a single entry point that Windows first calls. The
basic operations that go on inside this entry point look something
like this (please pardon the extreme pseudo-code!):
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Entry Point HEY_WINDOWS!(int MESSAGE)
<BR>
{<BR>
/* Process all of the messages your application needs */<BR>
if MESSAGE = FORM_CREATE then...<BR>
else if MESSAGE = FORM_SHOW then...<BR>
else if MESSAGE = FORM_DESTROY then...<BR>
...<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
As you can see, Visual Basic provides an easy-to-use GUI over
the top of these low-level events. By clicking on a form's events
screen, you will see a simple column of events that the Visual
Basic designers chose for your form to handle. Experienced Visual
Basic programmers know that you can actually process any Windows
event you choose to handle, but this set of events is the most
commonly used.
<P>
C++, Delphi, and Visual Basic programs all use this message-passing
system in the exact same ways. What is interesting about all three
of these is the way that the respective languages allow designers
to hide implementation details from application developers. The
Java language is an extension of this methodology. However, instead
of the Windows operating system handling messages and passing
them directly to a Visual Basic application, programmers in Java
receive their GUI messages from something called the Advanced
Windowing Toolkit (AWT). For more detailed information on what
is contained in the AWT, <A HREF="ch7.htm" >see Chapters 7</A>,
&quot;Developing Java Applets,&quot; 8, &quot;Developing Java
Applications,&quot; and 28, &quot;Package <TT><FONT FACE="Courier">java.awt</FONT></TT>.&quot;
The AWT is a set of Java classes that use data and methods to
encapsulate common GUI functionality.
<P>
Java applets and applications inherit from the AWT directly. Each
Java applet can implement what are known as <I>lifecycle methods</I>
to control the starting, stopping, and ending of the applet's
&quot;life.&quot;
<P>
The flow of a Java application can best be understood by stepping
through one line by line. Listing 6.4 shows the entire contents
of the MouseTrack sample application provided with the JDK. Figure
6.2 shows this applet running within the Netscape Web Browser.
MouseTrack notifies the player if the mouse-click missed the square,
and plays a tune if the player was successful. As can be seen
in the following short amount of code, there is quite a bit of
work being done here, including screen drawing, mouse-click handling,
and the playing of sound files.
<P>
<A HREF="http://docs.rinet.ru/JavDev/f6-2.gif" ><B>Figure 6.2 : </B><I>The Mouse Track application.</I></A>
<HR>
<BLOCKQUOTE>
<B>Listing 6.4. The JDK sample application MouseTrack.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">1:&nbsp;&nbsp;import java.awt.Graphics;
<BR>
2:&nbsp;&nbsp;import java.lang.Math;<BR>
3:<BR>
4:&nbsp;&nbsp;public class MouseTrack extends java.applet.Applet
{<BR>
5:<BR>
6:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int mx, my;<BR>
7:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int onaroll;<BR>
8:<BR>
9:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void init() {<BR>
10:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onaroll
= 0;<BR>
11:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resize(500,
500);<BR>
12:&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
13:<BR>
14:&nbsp;&nbsp;&nbsp;&nbsp; public void paint(Graphics g) {<BR>
15:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawRect(0,
0, size().width - 1, size().height - 1);<BR>
16:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mx =
(int)(Math.random()*1000) % (size().width -<BR>
&nbsp;&nbsp;&nbsp;&nbsp; (size().width/10));<BR>
17:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;my =
(int)(Math.random()*1000) % (size().height -<BR>
&nbsp;&nbsp;&nbsp;&nbsp; (size().height/10));<BR>
18:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawRect(mx,
my, (size().width/10) - 1, (size().height/10) - 1);<BR>
19:&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
20:<BR>
21:&nbsp;&nbsp;&nbsp;&nbsp;/*<BR>
22:&nbsp;&nbsp;&nbsp;&nbsp; * Mouse methods<BR>
23:&nbsp;&nbsp;&nbsp;&nbsp; */<BR>
24:&nbsp;&nbsp;&nbsp;&nbsp; public boolean mouseDown(java.awt.Event
evt, int x, int y) {<BR>
25:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;requestFocus();
<BR>
26:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if((mx
&lt; x &amp;&amp; x &lt; mx+size().width/10-1) &amp;&amp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp; (my &lt; y &amp;&amp; y &lt; my+size().height/10-1)) {
<BR>
27:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(onaroll &gt; 0) {<BR>
28:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
switch(onaroll%4) {<BR>
29:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
case 0:<BR>
30:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;play(getCodeBase(),
&quot;sounds/tiptoe.thru.the.tulips.au&quot;);<BR>
31:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
32:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
case 1:<BR>
33:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;play(getCodeBase(),
&quot;sounds/danger,danger...!.au&quot;);<BR>
34:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
35:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
case 2:<BR>
36:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;play(getCodeBase(),
&quot;sounds/adapt-or-die.au&quot;);<BR>
37:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
38:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
case 3:<BR>
39:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;play(getCodeBase(),
&quot;sounds/cannot.be.completed.au&quot;);<BR>
40:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
41:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}<BR>
42:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
onaroll++;<BR>
43:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(onaroll &gt; 5)<BR>
44:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getAppletContext().showStatus(&quot;You're
on your way to<BR>
&nbsp;&nbsp;&nbsp;&nbsp; THE HALL OF FAME:&quot; + onaroll + &quot;Hits!&quot;);
<BR>
45:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
46:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getAppletContext().showStatus(&quot;YOU'RE
ON A ROLL:&quot;<BR>
&nbsp;&nbsp;&nbsp;&nbsp; + onaroll + &quot;Hits!&quot;);<BR>
47:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}<BR>
48:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
else {<BR>
49:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
getAppletContext().showStatus(&quot;HIT IT AGAIN! AGAIN!&quot;);
<BR>
50:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
play(getCodeBase(), &quot;sounds/that.hurts.au&quot;);<BR>
51:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
onaroll = 1;<BR>
52:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}<BR>
53:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
54:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
{<BR>
55:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
getAppletContext().showStatus<BR>
&nbsp;&nbsp;&nbsp;&nbsp; (&quot;You hit nothing at (&quot; + x + &quot;, &quot;
+ y + &quot;), exactly&quot;);<BR>
56:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
play(getCodeBase(), &quot;sounds/thin.bell.au&quot;);<BR>
57:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
onaroll = 0;<BR>
58:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
59:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
60:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
61:&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
62:<BR>
63:&nbsp;&nbsp;&nbsp;&nbsp; public boolean mouseMove(java.awt.Event
evt, int x, int y) {<BR>
64:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if((x
% 3 == 0) &amp;&amp; (y % 3 == 0))<BR>
65:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
repaint();<BR>
66:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
67:&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
68:<BR>
69:&nbsp;&nbsp;&nbsp;&nbsp; public void mouseEnter() {<BR>
70:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
71:&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
72:<BR>
73:&nbsp;&nbsp;&nbsp;&nbsp; public void mouseExit() {<BR>
74:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onaroll
= 0;<BR>
75:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();
<BR>
76:&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
77:<BR>
78:&nbsp;&nbsp;&nbsp;&nbsp; /**<BR>
79:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Focus methods<BR>
80:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
81:&nbsp;&nbsp;&nbsp;&nbsp; public void keyDown(int key) {<BR>
82:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;requestFocus();
<BR>
83:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onaroll
= 0;<BR>
84:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;play(getCodeBase(),
&quot;sounds/ip.au&quot;);<BR>
85:&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
86: }</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
As can be seen by examining the code listing for this applet,
there is quite a bit of work going on here. Events are being trapped,
multimedia work is being done, and objects are being painted on
the screen. Examining each section of code should allow the reader
to gain an appreciation for the power of the Java language.
<P>
In lines 1 and 2, MouseTrack imports the AWT's <TT><FONT FACE="Courier">Graphics</FONT></TT>
class and a <TT><FONT FACE="Courier">Math</FONT></TT> class for
calculation purposes. This operation is never done in Visual Basic
because inheritance is not allowed. In other words, when an object
is declared as type <TT><FONT FACE="Courier">Form</FONT></TT>,
the Visual Basic compiler automatically knows what code to go
grab in order to compile. In an object-oriented system, MouseTrack
could be the child of any number of classes. However, because
it is an applet, it must inherit directly, or indirectly, from
<TT><FONT FACE="Courier">Applet</FONT></TT>.
<P>
In line 4,<B> </B>MouseTrack is declared to inherit from the <TT><FONT FACE="Courier">java.applet.Applet</FONT></TT>
class. By default, this identifies this class as the main class
of this application.
<P>
In lines 6 and 7,<B> </B>member variables are declared. These
variables are visible to everything inside the class. In addition,
any other application that created a MouseTrack class within it
could have access to these variables.
<P>
In line 9, the <TT><FONT FACE="Courier">init()</FONT></TT> method
is declared. By inheriting from the <TT><FONT FACE="Courier">Applet</FONT></TT>
class, each applet inherits four &quot;life-cycle&quot; functions:
<TT><FONT FACE="Courier">init()</FONT></TT>, <TT><FONT FACE="Courier">start()</FONT></TT>,
<TT><FONT FACE="Courier">stop()</FONT></TT>, and <TT><FONT FACE="Courier">destroy()</FONT></TT>.
<TT><FONT FACE="Courier">Init()</FONT></TT> is called once after
an applet is initially loaded.
<P>
In lines 10 and 11,<B> </B>the applet is initialized. Note the
<TT><FONT FACE="Courier">resize()</FONT></TT> member call. Don't
be confused just because this method isn't declared within this
class. The <TT><FONT FACE="Courier">Resize</FONT></TT> method
is inherited from the <TT><FONT FACE="Courier">Applet</FONT></TT>
class.
<P>
In line 14,<B> </B>there is another &quot;magic&quot; method call.
Where is this coming from? Notice that nowhere in this entire
class is the <TT><FONT FACE="Courier">paint()</FONT></TT> method
actually invoked. However, the <TT><FONT FACE="Courier">repaint()</FONT></TT>
method is called in several situations. The <TT><FONT FACE="Courier">paint()</FONT></TT>
method is called whenever the AWT thinks the window needs to be
redrawn, or when a <TT><FONT FACE="Courier">repaint()</FONT></TT>
is requested.
<P>
Lines 15 through 18 are used to draw the square at random locations
on the screen. Note the use of the <TT><FONT FACE="Courier">Math.random()</FONT></TT>
method here. This is why the <TT><FONT FACE="Courier">java.lang.Math</FONT></TT>
class was imported on line 2.
<P>
In line 24, the <TT><FONT FACE="Courier">mouseDown</FONT></TT>
method is called whenever the AWT detects a mouse click over this
applet's screen area.
<P>
In line 25,<B> </B>the <TT><FONT FACE="Courier">requestFocus()</FONT></TT>
method is called. This method is equivalent to Visual Basic's
<TT><FONT FACE="Courier">SetFocus()</FONT></TT>.
<P>
In lines 26 through 42, some checks are done to determine whether
the user successfully clicked inside the square. What is especially
interesting is the <TT><FONT FACE="Courier">play()</FONT></TT>
call in lines 30, 33, 36, and 39. At first glance, this call simply
plays a sound file depending on the frequency of the user's hits.
However, note the call <TT><FONT FACE="Courier">getCodeBase()</FONT></TT>.
This instructs the play function to retrieve the sound file from
the applet's base location. In other words, if the applet was
retrieved from a Web server in Tokyo, play the sound file located
there. In one function call, you have reached across the world,
retrieved a sound file, and played it on a user's computer&#133;platform
notwithstanding. This type of functionality would have been unimaginable
a couple of years ago, but such is the pace of change.
<P>
In lines 43 through 61,<B> </B>depending on the user's hit count,
several messages are displayed. The <TT><FONT FACE="Courier">showStatus()</FONT></TT>
method will print the message in the appletContext's status window.
With most Web browsers, this message will be displayed in the
lower-left corner status window (see Figure 6.2 where the text
&quot;Applet MouseTrack running&quot; is displayed).
<P>
In line 63,<B> </B><TT><FONT FACE="Courier">mouseMove()</FONT></TT>
is called whenever a <TT><FONT FACE="Courier">MouseMove</FONT></TT>
message is generated.
<P>
In lines 64 through 66, the <TT><FONT FACE="Courier">mouseMove()</FONT></TT>
method forces a repaint every three units (probably pixels). By
examining the contents of the <TT><FONT FACE="Courier">paint()</FONT></TT>
method, you can see that this will redraw the square on the screen.
<P>
In line 69,<B> </B>the <TT><FONT FACE="Courier">mouseEnter()</FONT></TT>
method is called whenever the mouse cursor enters the screen area
of this applet. This function also forces a repaint.
<P>
In line 73,<B> </B>the <TT><FONT FACE="Courier">mouseExit()</FONT></TT>
method is called whenever the mouse leaves the screen area of
the applet. This function will force a repaint and reset the user's
score.
<P>
In lines 81 through 86,<B> </B>the <TT><FONT FACE="Courier">keyDown()</FONT></TT>
method is called whenever any key is hit. The applet will request
focus and, once again, a sound will be played to notify the user.
<P>
This applet may be much simpler than a typical Visual Basic form,
but it provides some useful illustrations. Hopefully, the Visual
Basic developer will see that the overall development goal remains
the same. GUI events still need to be handled, and many of the
user interface elements remain the same. Object-oriented programming
is a skill that Visual Basic developers will need to acquire,
but Windows application development skills do provide valuable
insight into the Java AWT.
<H2><A NAME="LanguageFeaturesandSyntax"><FONT SIZE=5 COLOR=#FF0000>Language
Features and Syntax</FONT></A></H2>
<P>
It is now time to compare basic features of the Java language
versus features of the Visual Basic language. The first item to
be examined is data types.
<H3><A NAME="DataTypes">Data Types</A></H3>
<P>
Java contains a small set of basic language types. (Ignore for
now the fact that each new object declared in Java is a new &quot;temporary&quot;
data type.) Here are the types:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">boolean</FONT></TT>-Can be <TT><FONT FACE="Courier">true</FONT></TT>
or <TT><FONT FACE="Courier">false<BR>
byte</FONT></TT>-8-bit signed quantity<BR>
<TT><FONT FACE="Courier">short</FONT></TT>-16-bit signed quantity
<BR>
<TT><FONT FACE="Courier">int</FONT></TT>-32-bit signed quantity
<BR>
<TT><FONT FACE="Courier">float</FONT></TT>-32-bit floating-point
value<BR>
<TT><FONT FACE="Courier">double</FONT></TT>-64-bit floating-point
value<BR>
<TT><FONT FACE="Courier">long</FONT></TT>-64-bit signed quantity
<BR>
<TT><FONT FACE="Courier">char</FONT></TT>-16-bit Unicode character
</BLOCKQUOTE>
<P>
Listed next are the Visual Basic basic data types. Next to each
VB data type is the equivalent (if any) Java data type:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Integer</FONT></TT>-16-bit signed quantity;
equivalent to <TT><FONT FACE="Courier">short</FONT></TT>.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Long</FONT></TT>-32-bit signed quantity;
equivalent to <TT><FONT FACE="Courier">int</FONT></TT>.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Single</FONT></TT>-32-bit floating-point
value; equivalent to <TT><FONT FACE="Courier">float</FONT></TT>.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Double</FONT></TT>-64-bit floating-point
value; equivalent to <TT><FONT FACE="Courier">double</FONT></TT>.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Currency</FONT></TT>-64-bit floating-point
value limited to four decimal places; there is no Java equivalent,
although a <TT><FONT FACE="Courier">Currency</FONT></TT> class
could be defined (and undoubtedly will be with a full set of properties
and methods).
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">String</FONT></TT>-8-bit character; although
the Java <TT><FONT FACE="Courier">char</FONT></TT> type appears
to be equivalent, caution should be used here. Note that the Java
<TT><FONT FACE="Courier">char</FONT></TT> type is actually a Unicode
character, whereas the Visual Basic <TT><FONT FACE="Courier">String</FONT></TT>
makes use of the ASCII characters. There are Java functions that
can be used to convert Unicode characters to their ASCII values,
and vice versa.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Byte</FONT></TT>-8-bit unsigned quantity;
no Java equivalent.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Boolean</FONT></TT>-16-bit value used
to store <TT><FONT FACE="Courier">True</FONT></TT> or <TT><FONT FACE="Courier">False</FONT></TT>;
equivalent to <TT><FONT FACE="Courier">boolean</FONT></TT>.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Date</FONT></TT>-64-bit value; Visual
Basic automatically converts this number to represent a date between
January 1, 100 and December 31, 9999. There is no Java basic type
equivalent, although as with <TT><FONT FACE="Courier">Currency</FONT></TT>,
it would be relatively easy to build a<B> </B>date class.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Object</FONT></TT>-32-bit <TT><FONT FACE="Courier">Object</FONT></TT>
reference value; no Java equivalent, unless the <TT><FONT FACE="Courier">class</FONT></TT>
keyword is considered.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Variant</FONT></TT>-16 bytes  (8 bits/byte)
plus 1 byte for each character; no Java equivalent.
</BLOCKQUOTE>
<H3><A NAME="DeclaringVariables">Declaring Variables</A></H3>
<P>
Variables are declared in Visual Basic using the <TT><FONT FACE="Courier">dim</FONT></TT>
keyword. To declare an <TT><FONT FACE="Courier">Integer</FONT></TT>
variable within a function, the following syntax is used:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">dim x As Integer</FONT></TT>
</BLOCKQUOTE>
<P>
Java has no keyword that designates a variable being defined.
Instead, the following syntax is used:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;<I>data type</I>&gt; &lt;<I>variable_name</I>&gt;;</FONT></TT>
</BLOCKQUOTE>
<P>
To repeat this example, an integer variable would be declared
in Java as follows (keep in mind that Java is case sensitive!):
<BLOCKQUOTE>
<TT><FONT FACE="Courier">int x;</FONT></TT>
</BLOCKQUOTE>
<P>
What is completely different about Java, however, is the fact
that there are no global variables. Every variable and method
in Java must be declared inside some class. This forces everything
to be stored and referenced as an object, thus enforcing the object-oriented
paradigm.
<P>
Any object in Java can be stored as an array of that object. This
can be done in three steps:
<OL>
<LI>Declaring the array of objects using the syntax <TT><FONT FACE="Courier">&lt;</FONT><I><FONT SIZE=1 FACE="Courier">data
type</FONT></I><FONT FACE="Courier">&gt; &lt;</FONT><I><FONT SIZE=1 FACE="Courier">variable_name</FONT></I><FONT FACE="Courier">&gt;[];</FONT></TT>
<LI>Example: <TT><FONT FACE="Courier">int group[];</FONT></TT>
<LI>Creating a new array object. Although the preceding statement
declared a new array *object, it must actually be initialized
in memory using the <TT><FONT FACE="Courier">new</FONT></TT> operator:
<LI><TT><FONT FACE="Courier">Int[] group = new int[50];</FONT></TT>
<LI>Filling the array with values. This can be done using standard
array notation:<BR>
<TT><FONT FACE="Courier">Group[15] = 304;</FONT></TT>
</OL>
<H3><A NAME="ProgrammingConstructs">Programming Constructs</A>
</H3>
<P>
All modern programming languages contain programming constructs
such as <TT><FONT FACE="Courier">for</FONT></TT> and <TT><FONT FACE="Courier">while</FONT></TT>
loops and <TT><FONT FACE="Courier">if&#133;then</FONT></TT> branches.
Visual Basic and Java are no exception. This section provides
a comparison of the primary differences between the control structures
of the two languages.
<P>
Visual Basic supports the following decision structures:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">If...Then<BR>
If...Then...Else<BR>
Select Case</FONT></TT>
</BLOCKQUOTE>
<H4>The <TT><FONT FACE="Courier">If&#133;Then</FONT></TT> Structure
</H4>
<P>
The syntax for producing a Visual Basic <TT><FONT FACE="Courier">If&#133;Then</FONT></TT>
structure is the following:
<P>
For a single-line statement:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">If condition Then statement</FONT></TT>
</BLOCKQUOTE>
<P>
For multiple statements:
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">If</FONT></B><FONT FACE="Courier">
condition <B>Then<BR>
&nbsp;&nbsp;</B>statements<BR>
End If</FONT></TT>
</BLOCKQUOTE>
<P>
To add an additional <TT><FONT FACE="Courier">Else</FONT></TT><B>
</B>block to the preceding structure, the syntax looks like this:
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">If </FONT></B><FONT FACE="Courier">condition1
<B>Then<BR>
&nbsp;&nbsp;</B>[statementblock1]<BR>
[<B>ElseIf</B> condition2<B> Then<BR>
</B>&nbsp;&nbsp;[statementblock2]]...<BR>
[<B>Else<BR>
&nbsp;&nbsp;</B>[statementblock3]]<BR>
End If</FONT></TT>
</BLOCKQUOTE>
<P>
Java greatly simplifies this construct with the following syntax:
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">if </FONT></B><FONT FACE="Courier">condition1
{<BR>
&nbsp;&nbsp;[statementblock1]<BR>
}<BR>
<B>else if </B>condition2 {<BR>
&nbsp;&nbsp;[statementblock2]<BR>
}<BR>
<B>else </B>{<BR>
&nbsp;&nbsp;[statementblock3]<BR>
}</FONT></TT>
</BLOCKQUOTE>
<H4>The <TT><FONT FACE="Courier">Select Case</FONT></TT> (or<TT><FONT FACE="Courier">
switch</FONT></TT>) Structure</H4>
<P>
To provide an alternative to many multiple <TT><FONT FACE="Courier">If&#133;Then</FONT></TT>
structures, most languages provide a mechanism of selectively
executing blocks of code depending on the value of some variable.
<P>
In Visual Basic, you can do this by creating a <TT><FONT FACE="Courier">Select
Case</FONT></TT><B> </B>structure. Here's the syntax:
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">Select Case </FONT></B><FONT FACE="Courier">testexpression
<BR>
&nbsp;&nbsp;[<B>Case </B>expressionlist1<BR>
&nbsp;&nbsp;&nbsp;&nbsp;[statementblock1]<BR>
&nbsp;&nbsp;[<B>Case </B>expressionlist2<BR>
&nbsp;&nbsp;&nbsp;&nbsp;[statementblock2]<BR>
&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;[<B>Case Else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;</B>[statementblockn]<BR>
<B>End Select</B></FONT></TT>
</BLOCKQUOTE>
<P>
In Java, this construct is known as a <TT><FONT FACE="Courier">switch</FONT></TT><B>
</B>statement (similar to C/C++). The <TT><I><FONT SIZE=1 FACE="Courier">testexpression</FONT></I></TT>
must be a <TT><FONT FACE="Courier">byte</FONT></TT>, <TT><FONT FACE="Courier">char</FONT></TT>,
<TT><FONT FACE="Courier">short</FONT></TT>, or <TT><FONT FACE="Courier">int</FONT></TT>.
Its syntax is just like C's:
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">switch </FONT></B><FONT FACE="Courier">(testexpression)
{<BR>
&nbsp;&nbsp;[<B>case </B>expressionlist1:]<BR>
&nbsp;&nbsp;&nbsp;&nbsp;[statementblock1]<BR>
&nbsp;&nbsp;&nbsp;<B>break</B>;<BR>
&nbsp;&nbsp;[<B>case </B>expressionlist2:]<BR>
&nbsp;&nbsp;&nbsp;&nbsp;[statementblock2]<BR>
&nbsp;&nbsp;&nbsp;<B>break</B>;<BR>
&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;<B>default:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;</B>[statementblockn]<BR>
&nbsp;&nbsp;<B>break;<BR>
</B>}</FONT></TT>
</BLOCKQUOTE>
<H4>The <TT><FONT FACE="Courier">for</FONT></TT> Loop</H4>
<P>
<TT><FONT FACE="Courier">For</FONT></TT> loops are used to execute
a group of statements a set number of times. Both Visual Basic
and Java provide a <TT><FONT FACE="Courier">for</FONT></TT><B>
</B>loop, but there are differences between the two. In Visual
Basic, the <TT><FONT FACE="Courier">for</FONT></TT><B> </B>loop
has the following properties:
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">For</FONT></B><FONT FACE="Courier">
counter = start <B>To</B> end [<B>Step </B>increment]<BR>
&nbsp;&nbsp;statements<BR>
<B>Next </B>[counter]</FONT></TT>
</BLOCKQUOTE>
<P>
Visual Basic allows the programmer to set the start and ending
value of the variable <TT><FONT FACE="Courier">counter</FONT></TT>
as well as set the <TT><FONT FACE="Courier">Step</FONT></TT><B>
</B>increment. Here is the Java <TT><FONT FACE="Courier">for</FONT></TT><B>
</B>loop:
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">for</FONT></B><FONT FACE="Courier">
(counter = start; booleanexpression; expression) {<BR>
&nbsp;&nbsp;statements<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
There are several subtle differences between the Java <TT><FONT FACE="Courier">for</FONT></TT>
loop and that of Visual Basic. The Java <TT><FONT FACE="Courier">for</FONT></TT>
loop allows the programmer to provide an expression as opposed
to the Visual Basic <TT><FONT FACE="Courier">increment</FONT></TT>.
This expression could be a call to a method or, as in VB, the
programmer could simply increment or decrement a value. In addition
to that, Java allows a variable to be declared in the <TT><FONT FACE="Courier">for</FONT></TT>
loop. (See Listing 6.5 for an example.)
<HR>
<BLOCKQUOTE>
<B>Listing 6.5. Example of variable initialization in a Java </B><TT><B><FONT FACE="Courier">for</FONT></B></TT><B>
loop.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">for (int counter = 1; counter &lt; 99;
counter ++) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp; /* statements */<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The variable declared in the <TT><FONT FACE="Courier">for</FONT></TT>
loop cannot be used outside of that loop, however. (This is yet
another example of a potential error-causing language feature
that the Java designers have removed!)
<H4>The <TT><FONT FACE="Courier">while</FONT></TT> and <TT><FONT FACE="Courier">do&#133;while</FONT></TT>
Loops</H4>
<P>
Visual Basic and Java provide nearly identical <TT><FONT FACE="Courier">while</FONT></TT>
and <TT><FONT FACE="Courier">do&#133;while</FONT></TT> loops.
The <TT><FONT FACE="Courier">do</FONT></TT> loop is used to execute
a group of statements an unknown amount of times (until the condition
returns true). The <TT><FONT FACE="Courier">do&#133;while</FONT></TT>
loop executes the group of statements at least once before testing
the condition. The syntactical differences will be shown here.
<P>
In Visual Basic:
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">Do While </FONT></B><FONT FACE="Courier">condition
<BR>
&nbsp;&nbsp;statements<BR>
<B>Loop<BR>
<B>Do<BR>
</B></B>&nbsp;&nbsp;statements<BR>
<B>Loop While</B> condition<BR>
In Java:<BR>
<B>while </B>(condition) {<BR>
&nbsp;&nbsp;statements<BR>
}<BR>
<B>do</B> {<BR>
&nbsp;&nbsp;statements<BR>
} <B>while</B> (condition);</FONT></TT>
</BLOCKQUOTE>
<H3><A NAME="LanguageFeaturesMissingfromVisualBa">Language Features
Missing from Visual Basic</A></H3>
<P>
There is some similarity between Visual Basic and Java (particularly
in the area of GUI programming), but there are some language features
in Java that just are not available using Visual Basic. All of
these topics will be discussed in greater detail later in this
book; however, they will be touched on now so that the Visual
Basic programmer is aware of the differences.
<H4>Threads</H4>
<P>
32-bit Windows developers are perhaps familiar with the concept
of multithreaded programming. A thread is a single self-contained
set of states of execution of a program. A multithreaded environment
(or language) allows multiple threads to run simultaneously (in
parallel). In other words, threads allow applications to execute
simultaneous operations at the same time. This is most often seen
in applications where the display is being updated with some type
of graphics while the application is performing some type of computation
in the background. (See the JDK's Animator example.) Java applets
and applications that take advantage of threading can be identified
easily because they implement the <TT><FONT FACE="Courier">Runnable</FONT></TT>
interface. Implementing the <TT><FONT FACE="Courier">Runnable</FONT></TT>
interface can be thought of as opening a window into Java's threading
capabilities.
<P>
It should be noted that on single-processor machines, both threads
are not actually executing concurrently. The execution of the
threads will switch between the two at regular intervals. Using
a machine with multiple processors, it is possible to split the
threads off and run them at the same time. This type of operation
is operating-system dependent.
<H4>Networking</H4>
<P>
The <TT><FONT FACE="Courier">java.net</FONT></TT> package (<A HREF="ch26.htm" >see Chapters 26</A>,
&quot;Network-Aware Programming,&quot; and 33, &quot;Package <TT><FONT FACE="Courier">java.net</FONT></TT>&quot;)
provides the Java programmer with a full complement of networking
capabilities using both HTTP (the World Wide Web protocol) and
sockets. Sockets were originally implemented for UNIX. They allow
the programmer to open a pipe to another machine (or to their
own machine, if so desired) for passing data back and forth. Entire
books have been written on socket programming, so we won't go
into much detail here. Suffice it to say, however, that the Java
networking classes are platform-independent and will continue
to support open, standards-based protocols. These classes also
allow Java applets to do things like call Web pages up in a browser
and stream data to and from the client computer over the Internet.
<H4>Exception Handling</H4>
<P>
The ability to handle application exceptions is a powerful feature
that is common to many languages including C++, Ada, and Object
Pascal. An exception is any type of condition that prevents a
program from continuing in its current state. Without exception
handling, the program would either crash or exit at that point.
Java allows this exception to be &quot;caught&quot; and handled
appropriately. More information on exception handling can be found
in <A HREF="ch22.htm" >Chapter 22</A>, &quot;Exception Handling.&quot;
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
Obviously, the overall programming paradigm for Java is entirely
new. A vision of a highly networked, message-handling programming
language is (even for software!) a relatively new idea. Therefore,
the idea of applets and networking built into the core language
is something new for developers of all languages, not just Visual
Basic. Visual Basic developers should not look at Java as some
new technology that is leaving them behind. Because the language
is so new (and its potential unrealized), Visual Basic developers
will undoubtedly soon find tools that allow these two languages
to interact. James Gosling, creator of Java and a Sun Microsystems
vice-president, has even mentioned the possibility of a Java Virtual
Machine that understands the Visual Basic language. Basically,
it is important that all software developers understand what Java
is and how it could affect their current day-to-day work.
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch5.htm"><IMG SRC="http://docs.rinet.ru/JavDev/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="http://docs.rinet.ru/JavDev/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/JavDev/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch7.htm"><IMG 
SRC="http://docs.rinet.ru/JavDev/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>
