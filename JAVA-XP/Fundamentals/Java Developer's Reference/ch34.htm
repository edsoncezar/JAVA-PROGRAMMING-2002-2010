
<HTML>

<HEAD>
   <TITLE>Chapter 34 -- Package java.util</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">










<H1><FONT COLOR=#FF0000>Chapter 34</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Package </FONT><TT><FONT SIZE=6 COLOR=#FF0000 FACE="Courier">java.util</FONT></FONT></TT></H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#BitSet" >BitSet</A>
<LI><A HREF="#Date" >Date</A>
<LI><A HREF="#Dictionary" >Dictionary</A>
<LI><A HREF="#Enumeration" >Enumeration</A>
<LI><A HREF="#Hashtable" >Hashtable</A>
<LI><A HREF="#Observable" >Observable</A>
<LI><A HREF="#Observer" >Observer</A>
<LI><A HREF="#Properties" >Properties</A>
<LI><A HREF="#Random" >Random</A>
<LI><A HREF="#Stack" >Stack</A>
<LI><A HREF="#StringTokenizer" >StringTokenizer</A>
<LI><A HREF="#Vector" >Vector</A>
<LI><A HREF="#EmptyStackException" >EmptyStackException</A>
<LI><A HREF="#NoSuchElementException" >NoSuchElementException</A>
</UL>
<HR>
<P>
In this chapter you learn about the <TT><FONT FACE="Courier">util</FONT></TT>
package. This package provides some of the most useful Java classes
that you will come to rely on. It introduces ten classes, two
exception classes, and two interfaces, as shown in Table 34.1.
Figure 34.1 provides a graphical representation of the hierarchy
of these contents.
<P>
<A HREF="http://docs.rinet.ru/JavDev/f34-1.gif" ><B>Figure 34.1:</B> <I>Contents of package</I> java.util</A>
<P>
<CENTER><B>Table 34.1. Contents of package </B><TT><B><FONT FACE="Courier">java.util</FONT></B></TT><B>.</B></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=169><I>Class Index</I></TD><TD WIDTH=129><I>Interface Index</I>
</TD><TD WIDTH=234><I>Exception Index</I></TD></TR>
<TR VALIGN=TOP><TD WIDTH=169><TT><FONT FACE="Courier">BitSet</FONT></TT>
</TD><TD WIDTH=129><TT><FONT FACE="Courier">Enumeration</FONT></TT>
</TD><TD WIDTH=234><TT><FONT FACE="Courier">EmptyStackException</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=169><TT><FONT FACE="Courier">Date</FONT></TT></TD>
<TD WIDTH=129><TT><FONT FACE="Courier">Observer</FONT></TT></TD>
<TD WIDTH=234><TT><FONT FACE="Courier">NoSuchElementException</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=169><TT><FONT FACE="Courier">Dictionary</FONT></TT>
</TD><TD WIDTH=129><FONT FACE="Courier">&nbsp;</FONT></TD><TD WIDTH=234><FONT FACE="Courier">&nbsp;</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=169><TT><FONT FACE="Courier">Hashtable</FONT></TT>
</TD><TD WIDTH=129><FONT FACE="Courier">&nbsp;</FONT></TD><TD WIDTH=234><FONT FACE="Courier">&nbsp;</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=169><TT><FONT FACE="Courier">Observable</FONT></TT>
</TD><TD WIDTH=129><FONT FACE="Courier">&nbsp;</FONT></TD><TD WIDTH=234><FONT FACE="Courier">&nbsp;</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=169><TT><FONT FACE="Courier">Properties</FONT></TT>
</TD><TD WIDTH=129><FONT FACE="Courier">&nbsp;</FONT></TD><TD WIDTH=234><FONT FACE="Courier">&nbsp;</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=169><TT><FONT FACE="Courier">Random</FONT></TT>
</TD><TD WIDTH=129><FONT FACE="Courier">&nbsp;</FONT></TD><TD WIDTH=234><FONT FACE="Courier">&nbsp;</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=169><TT><FONT FACE="Courier">Stack</FONT></TT></TD>
<TD WIDTH=129><FONT FACE="Courier">&nbsp;</FONT></TD><TD WIDTH=234><FONT FACE="Courier">&nbsp;</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=169><TT><FONT FACE="Courier">StringTokenizer</FONT></TT>
</TD><TD WIDTH=129><FONT FACE="Courier">&nbsp;</FONT></TD><TD WIDTH=234><FONT FACE="Courier">&nbsp;</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=169><TT><FONT FACE="Courier">Vector</FONT></TT>
</TD><TD WIDTH=129><FONT FACE="Courier">&nbsp;</FONT></TD><TD WIDTH=234><FONT FACE="Courier">&nbsp;</FONT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
The <TT><FONT FACE="Courier">BitSet</FONT></TT> class is useful
for storing and manipulating arbitrarily long sets of bits. The
<TT><FONT FACE="Courier">Date</FONT></TT> class can be used to
represent dates and times and provides methods for converting
dates to and from <TT><FONT FACE="Courier">String</FONT></TT>s.
The abstract class <TT><FONT FACE="Courier">Dictionary</FONT></TT>
is a superclass of <TT><FONT FACE="Courier">Hashtable</FONT></TT>.
The <TT><FONT FACE="Courier">Hashtable</FONT></TT> class can be
used for creating an array of keys and values and allowing elements
to be looked up by either key or value. The <TT><FONT FACE="Courier">Properties</FONT></TT>
class extends <TT><FONT FACE="Courier">Hashtable</FONT></TT> in
a couple of significant ways, most notably by allowing elements
to be streamed into or out of the class. The <TT><FONT FACE="Courier">Observable</FONT></TT>
class can be extended and allows you to create new classes that
notify other classes when they change. The <TT><FONT FACE="Courier">Random</FONT></TT>
class is a pseudo-random number generator that can return integer,
floating-point or Gaussian-distributed values. The <TT><FONT FACE="Courier">Stack</FONT></TT>
class is an extension of <TT><FONT FACE="Courier">Vector</FONT></TT>
and supplies a last-in, first-out data structure. The <TT><FONT FACE="Courier">Vector</FONT></TT>
class can be used for storing any objects and can store objects
of more than one type in the same vector. The <TT><FONT FACE="Courier">StringTokenizer</FONT></TT>
class provides a very flexible mechanism for parsing <TT><FONT FACE="Courier">String</FONT></TT>s.
<P>
In addition to these classes the <TT><FONT FACE="Courier">util</FONT></TT>
package also includes two interfaces: <TT><FONT FACE="Courier">Enumeration</FONT></TT>
and <TT><FONT FACE="Courier">Observer</FONT></TT>. The <TT><FONT FACE="Courier">Enumeration</FONT></TT>
interface provides two methods that allow for easy traversal through
a set of items. The <TT><FONT FACE="Courier">Observer</FONT></TT>
interface can be implemented by any class that needs to observe
a subclass of <TT><FONT FACE="Courier">Observable</FONT></TT>.<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></TD><TD WIDTH=499>
<H2><A NAME="BitSet"><FONT SIZE=5 COLOR=#FF0000>BitSet</FONT></A></H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/implem.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">Cloneable</FONT></TD>
</TR>
</TABLE></CENTER>
<P>
<P>
The class java.util.BitSet is derived directly from Object but
also implements the Cloneable interface, as shown in Listing 34.1.
<HR>
<BLOCKQUOTE>
<B>Listing 34.1. The </B><TT><B><FONT FACE="Courier">BitSet</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class BitSet extends Object implements
Cloneable {<BR>
&nbsp;&nbsp;//&nbsp;public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public BitSet();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public BitSet(int nbits);<BR>
&nbsp;&nbsp;//&nbsp;public instance methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void and(BitSet set);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void clear(int bit);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Object clone();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean equals(Object obj);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean get(int bit);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public int hashCode();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void or(BitSet set);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void set(int bit);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public int size();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public String toString();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void xor(BitSet set);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
This class represents a dynamically sized set of bits. Two constructors
are provided: one that creates an empty set of unspecified size
and one that creates a set of a specified size. The <TT><FONT FACE="Courier">set</FONT></TT>
method can be used to set an individual bit or <TT><FONT FACE="Courier">clear</FONT></TT>
can be used to clear an individual bit. The first bit in a <TT><FONT FACE="Courier">BitSet</FONT></TT>
is the zero bit so that <TT><FONT FACE="Courier">myBitset.set(0)</FONT></TT>
is a valid statement.
<P>
The logical functions <TT><FONT FACE="Courier">and</FONT></TT>,
<TT><FONT FACE="Courier">or</FONT></TT>, and <TT><FONT FACE="Courier">xor</FONT></TT>
are all supported and will combine the <TT><FONT FACE="Courier">BitSet</FONT></TT>
with another set. <TT><FONT FACE="Courier">BitSet</FONT></TT>s
can be compared for equality using <TT><FONT FACE="Courier">equals</FONT></TT>
and can be converted to strings using <TT><FONT FACE="Courier">toString</FONT></TT>.
For the purpose of converting a <TT><FONT FACE="Courier">BitSet</FONT></TT>
to a <TT><FONT FACE="Courier">String</FONT></TT>, a set bit is
represented by the value <TT><FONT FACE="Courier">1</FONT></TT>
and a clear bit is represented by <TT><FONT FACE="Courier">0</FONT></TT>.


<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT>
</H4></TD>

<TD><H4><TT><FONT FACE="Courier">BitSet</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BitSet</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public BitSet()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates an empty bit set.<P>
<CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">BitSet</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BitSet</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public BitSet(int nbits)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates an empty bit set with the specified number
of bits.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">nbits</FONT> is the number of bits in the set.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">and</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BitSet</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void and(BitSet set)</FONT></TT>
</BLOCKQUOTE>
<P>
This method logically <TT><FONT FACE="Courier">AND</FONT></TT>s
the <TT><FONT FACE="Courier">BitSet</FONT></TT> with another <TT><FONT FACE="Courier">BitSet</FONT></TT>.
For example, the following code results in only bit <TT><FONT FACE="Courier">4</FONT></TT>
being set in <TT><FONT FACE="Courier">bits1</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">BitSet bits1 = new BitSet(10);<BR>
bits1.set(1);<BR>
bits1.set(4);<BR>
<BR>
BitSet bits2 = new BitSet(10);<BR>
bits2.set(4);<BR>
bits2.set(5);<BR>
bits1.and(bits2);</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">set</FONT> is the bit set to <TT><FONT FACE="Courier">AND</FONT></TT> with the current set.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">clear</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BitSet</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void clear(int bit)</FONT></TT>
</BLOCKQUOTE>
<P>
Clears the specified bit.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">bit</FONT> is the bit to clear.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">clone</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BitSet</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Object clone()</FONT></TT>
</BLOCKQUOTE>
<P>
This method overrides the <TT><FONT FACE="Courier">clone</FONT></TT>
method in <TT><FONT FACE="Courier">Object</FONT></TT>. It can
be used to clone the bit set. For example, the following code
creates a duplicate copy of <TT><FONT FACE="Courier">bits</FONT></TT>
in <TT><FONT FACE="Courier">clonedBits</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">BitSet bits = new BitSet(10);<BR>
bits.set(0);<BR>
bits.set(1);<BR>
bits.set(5);<BR>
BitSet clonedBits = (BitSet)bits.clone();<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">equals</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BitSet</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></FONT></TT></H4>

</TD></TR>
</TABLE></CENTER>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean equals(Object obj)</FONT></TT>
</BLOCKQUOTE>
<P>
This method can be used to compare the contents of two <TT><FONT FACE="Courier">BitSet</FONT></TT>s.
If the same bits are set in the two <TT><FONT FACE="Courier">BitSet</FONT></TT>s,
they are considered equal. Consider the following code sample:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">BitSet bits1 = new BitSet(10);<BR>
bits1.set(0);<BR>
bits1.set(1);<BR>
bits1.set(4);<BR>
<BR>
BitSet bits2 = new BitSet(10);<BR>
bits2.set(0);<BR>
bits2.set(1);<BR>
bits2.set(4);<BR>
<BR>
BitSet bits3 = new BitSet(10);<BR>
bits3.set(0);<BR>
bits3.set(1);<BR>
bits3.set(5);<BR>
<BR>
Graphics g = getGraphics();<BR>
if (bits1.equals(bits2))<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;bits1 equals! bits2&quot;,
15, 15);<BR>
if (bits1.equals(bits3))<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;bits1 equals! bits3&quot;,
15, 30);</FONT></TT>
</BLOCKQUOTE>
<P>
In this case, <TT><FONT FACE="Courier">bits1</FONT></TT> will
equal <TT><FONT FACE="Courier">bits2</FONT></TT> because the same
bits are set; however, <TT><FONT FACE="Courier">bits1</FONT></TT>
will not equal <TT><FONT FACE="Courier">bits3</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">obj</FONT> is a bit set to compare against. 
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">true</FONT> if the set bits are the same; <TT><FONT FACE="Courier">false</FONT></TT>, otherwise.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">get</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BitSet</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean get(int bit)</FONT></TT>
</BLOCKQUOTE>
<P>
Gets the value of a specified bit in the set.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">bit</FONT> is the bit to get. 
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">true</FONT> if the bit is set; <TT><FONT FACE="Courier">false</FONT></TT> if it is clear.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">hashCode</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BitSet</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int hashCode()</FONT></TT>
</BLOCKQUOTE>
<P>
This method overrides the <TT><FONT FACE="Courier">hashCode</FONT></TT>
method in <TT><FONT FACE="Courier">Object</FONT></TT> and can
be used to get a hash code for the instance.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >A hash code for the instance.</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">or</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BitSet</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void or(BitSet set)</FONT></TT>
</BLOCKQUOTE>
<P>
This method logically <TT><FONT FACE="Courier">OR</FONT></TT>s
the <TT><FONT FACE="Courier">BitSet</FONT></TT> with another.
For example, the following code results in bits <TT><FONT FACE="Courier">1</FONT></TT>,
<TT><FONT FACE="Courier">4</FONT></TT>, and <TT><FONT FACE="Courier">5</FONT></TT>
being set in <TT><FONT FACE="Courier">bits1</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">BitSet bits1 = new BitSet(10);<BR>
bits1.set(1);</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">bits1.set(4);<BR>
</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">BitSet bits2 = new BitSet(10);<BR>
bits2.set(4);</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">bits2.set(5);<BR>
</FONT></TT>
<BR>
<TT><FONT FACE="Courier">bits1.or(bits2);</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">set</FONT> is the bit set to <TT><FONT FACE="Courier">OR</FONT></TT> with the current set.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">set</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BitSet</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void set(int bit)</FONT></TT>
</BLOCKQUOTE>
<P>
Sets the specified bit.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">bit</FONT> is the bit to set.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">size</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BitSet</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int size()</FONT></TT>
</BLOCKQUOTE>
<P>
This method returns the amount of space, in bits, used to store
the set. Space for a bit set is allocated in 64-bit increments,
so the following example will indicate that <TT><FONT FACE="Courier">len1</FONT></TT>
equals 64 and <TT><FONT FACE="Courier">len2</FONT></TT> equals
128:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">BitSet bits1 = new BitSet();<BR>
bits1.set(0);<BR>
bits1.set(1);<BR>
bits1.set(4);<BR>
<BR>
BitSet bits2 = new BitSet(65);<BR>
bits2.set(0);<BR>
bits2.set(1);<BR>
bits2.set(5);<BR>
<BR>
int len1 = bits1.size();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
will equal 64<BR>
int len2 = bits2.size();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
will equal 128</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >The amount of space, in bits, used to store the bit set. 
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BitSet</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String toString()</FONT></TT>
</BLOCKQUOTE>
<P>
This method formats the <TT><FONT FACE="Courier">BitSet</FONT></TT>
as a <TT><FONT FACE="Courier">String</FONT></TT>. The <TT><FONT FACE="Courier">String</FONT></TT>
will consist of an opening curly brace, comma-separated values
representing each set bit, and a closing curly brace. For example,
the following code places <TT><FONT FACE="Courier">{0, 1, 4}</FONT></TT>
in the variable <TT><FONT FACE="Courier">str</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">BitSet bits1 = new BitSet();<BR>
bits1.set(0);<BR>
bits1.set(1);<BR>
bits1.set(4);<BR>
String str = bits1.toString();</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >A string representing the bits in the bit set that are set.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">xor</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BitSet</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void xor(BitSet set)</FONT></TT>
</BLOCKQUOTE>
<P>
This method logically <TT><FONT FACE="Courier">XOR</FONT></TT>s
the <TT><FONT FACE="Courier">BitSet</FONT></TT> with another <TT><FONT FACE="Courier">BitSet</FONT></TT>.
For example, the following code results in bits <TT><FONT FACE="Courier">4</FONT></TT>
and <TT><FONT FACE="Courier">5</FONT></TT> being set in <TT><FONT FACE="Courier">bits1</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">BitSet bits1 = new BitSet(10);<BR>
bits1.set(0);<BR>
bits1.set(1);<BR>
bits1.set(4);<BR>
<BR>
BitSet bits2 = new BitSet(10);<BR>
bits2.set(0);<BR>
bits2.set(1);<BR>
bits2.set(5);<BR>
<BR>
bits1.xor(bits2);</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">set</FONT> is the bit set to <TT><FONT FACE="Courier">XOR</FONT></TT> with the current set.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></TD><TD WIDTH=499><H2><A NAME="Date"><FONT SIZE=5 COLOR=#FF0000>Date</FONT></A></H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
The class java.util.Date extends Object. The Date class stores
a representation of a date and time and provides methods for manipulating
the date and time components. A new Date instance may be constructed
using any of the following:
<UL>
<LI>The current date and time as expressed in the UNIX-standard
milliseconds since midnight January 1, 1970;
<LI><FONT COLOR=#000000>A </FONT><TT><FONT FACE="Courier">String</FONT></TT>;
<LI>Integers representing the year, month, day, hours, minutes,
and seconds.
</UL>
<P>
Dates can be compared with the <TT><FONT FACE="Courier">before</FONT></TT>,
<TT><FONT FACE="Courier">after</FONT></TT>, and <TT><FONT FACE="Courier">equals</FONT></TT>
methods. Methods are also provided for converting a date into
various formatted <TT><FONT FACE="Courier">String</FONT></TT>s.
The non-private interface of the <TT><FONT FACE="Courier">Date</FONT></TT>
class is shown in Listing 34.2.
<HR>
<BLOCKQUOTE>
<B>Listing 34.2. The </B><TT><B><FONT FACE="Courier">Date</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class Date extends Object {<BR>
&nbsp;&nbsp;//&nbsp;public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Date();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Date(long date);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Date (int year, int month,
int date);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Date (int year, int month,
int date,int hrs,int min);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Date (int year, int month,
int date, int hrs, <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
min, int sec);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Date (String s);<BR>
&nbsp;&nbsp;//&nbsp;static methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public static long UTC(int year,
int month, int date,&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
hrs, int min, int sec);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public static long parse(String
s);<BR>
&nbsp;&nbsp;//&nbsp;public instance methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public int getYear();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void setYear(int year);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public int getMonth();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void setMonth(int month);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public int getDate();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void setDate(int date);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public int getDay();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public int getHours();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void setHours(int hours);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public int getMinutes();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void setMinutes(int minutes);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public int getSeconds();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void setSeconds(int seconds);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public long getTime();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void setTime(long time);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean before(Date when);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean after(Date when);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean equals(Object obj);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public int hashCode();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public native String toString();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public native String toLocaleString();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public native String toGMTString();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public int getTimezoneOffset();
<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Date()</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a new <TT><FONT FACE="Courier">Date</FONT></TT>
object using today's date. For example, to display today's date
you could write the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Date today = new Date();<BR>
Graphics g = getGraphics();<BR>
g.drawString(&quot;Today is &quot; + today, 15, 15);</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Date(long date)</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a <TT><FONT FACE="Courier">Date</FONT></TT>
from a <TT><FONT FACE="Courier">long</FONT></TT> that represents
the number of milliseconds since January 1, 1970.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">date</FONT> is the number of milliseconds since January 1, 1970.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Date(int year, int month, int
date)</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a new <TT><FONT FACE="Courier">Date</FONT></TT>
object that corresponds to the year, month, and day passed to
it. The first month of the year is month zero. The day of the
month is normalized so that impossible dates become real dates.
For example, you'd think <TT><FONT FACE="Courier">badDate</FONT></TT>
in the following code would be equal to November 33, 1996.
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Date goodDate = new Date(95, 10, 14);&nbsp;&nbsp;&nbsp;//
November 14, 1995&nbsp;&nbsp;&nbsp;&nbsp;<BR>
Date badDate = new Date(96, 10, 33);&nbsp;&nbsp;&nbsp;&nbsp;//
December 3, 1996</FONT></TT>
</BLOCKQUOTE>
<P>
However, <TT><FONT FACE="Courier">badDate</FONT></TT> is adjusted
to be December 3, 1996 instead. The value in <TT><FONT FACE="Courier">goodDate</FONT></TT>
will correctly be November 14, 1995.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">year</FONT> is the number of years since 1900.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">month</FONT> is the zero-based month, from 0-11.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">date</FONT> is the day of the month.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Date(int year, int month, int
date, int hrs, int min)</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a new <TT><FONT FACE="Courier">Date</FONT></TT>
object that corresponds to the year, month, day, hours, and minutes
passed to it. As with the prior constructor, the day of the month
is normalized so that impossible dates become real dates. For
example, to create a variable named <TT><FONT FACE="Courier">birthday</FONT></TT>
that holds November 14, 1995 at 1:16 PM (13:16 in military time),
you would use the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Date birthday = new Date(95, 10, 14,
13, 16);</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">year</FONT> is the number of years since 1900.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">month</FONT> is the zero-based month, from 0-11.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">date</FONT> is the day of the month.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">hrs</FONT> is the zero-based number of hours (0-23).
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">min</FONT> is the zero-based number of minutes (0-59).
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Date(int year, int month, int
date, int hrs, int min, int sec)</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a new <TT><FONT FACE="Courier">Date</FONT></TT>
object that corresponds to the year, month, day, hour, minute,
and seconds passed to it. As with the other constructors, the
day of the month is normalized so that impossible dates become
real dates.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">year</FONT> is the number of years since 1900.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">month</FONT> is the zero-based month, from 0-11.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">date</FONT> is the day of the month.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">hrs</FONT> is the zero-based number of hours (0-23).
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">min</FONT> is the zero-based number of minutes (0-59).
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">sec</FONT> is the zero-based number of seconds (0-59).
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Date(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a new date based on the date string passed
to it. For example, to create a variable that represents August
31, 1996, you could use the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Date aDate = new Date(&quot;August 31
1996&quot;);</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s </FONT> is a time string in the format passed to <TT><FONT FACE="Courier">java.util.Date.Parse</FONT></TT>, as described later in this chapter.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">UTC</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static long UTC(int year, int
month, int date, int hrs, int min, int sec)</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates the time in UTC (Coordinated Universal
Time) format based on the specified parameters. Parameters are
expected to be given in UTC values, not the time in the local
time zone.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">year</FONT> is the number of years since 1900.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">month</FONT> is the zero-based month, from 0-11.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">date</FONT> is the day of the month.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">hrs</FONT> is the zero-based number of hours (0-23).
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">min</FONT> is the zero-based number of minutes (0-59).
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">sec</FONT> is the zero-based number of seconds (0-59).
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD >A UTC time value.</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Parse</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static long parse(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates the time in UTC format based on the string
passed to it.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is a formatted time string such as <TT><FONT FACE="Courier">&quot;Mon, 8 Apr 1996 21:32:PM PST&quot;</FONT></TT>. To specify the time zone, you can use any of the continental United States time zone abbreviations 
(<TT><FONT FACE="Courier">est</FONT></TT>, <TT><FONT FACE="Courier">edt</FONT></TT>, <TT><FONT FACE="Courier">cst</FONT></TT>, <TT><FONT FACE="Courier">cdt</FONT></TT>, <TT><FONT FACE="Courier">mst</FONT></TT>, <TT><FONT FACE="Courier">mdt</FONT></TT>, 
<TT><FONT FACE="Courier">pst</FONT></TT>, <TT><FONT FACE="Courier">pdt</FONT></TT>) or you can use <TT><FONT FACE="Courier">&quot;GMT&quot;</FONT></TT> with an offset, such as the following:
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Mon, 8 Apr 1996 21:32:PM GMT+0800</FONT></TT>
</BLOCKQUOTE>
<P>
This calculates GMT plus eight hours. This method considers GMT
and UTC to be equivalent and does not make adjustments for the
periodic &quot;leap seconds.&quot;
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD >A UTC time value.</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">After</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean after(Date when)</FONT></TT>
</BLOCKQUOTE>
<P>
Determines whether the <TT><FONT FACE="Courier">Date</FONT></TT>
occurs after the specified date. For example, to determine if
the United States Independence Day (July 4) is after the French
Bastille Day (July 14), use the following code:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Date independenceDay = new Date(96, 6,
4);<BR>
Date bastilleDay = new Date(96, 6, 14);<BR>
<BR>
Graphics g = getGraphics();<BR>
if (independenceDay.after(bastilleDay)) <BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;Independence Day is
after Bastille Day&quot;,15,15);<BR>
else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;Independence Day is
before Bastille Day&quot;,15,15);</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">when</FONT> is the date to compare against.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">true</FONT> if the object's date occurs after the specified date; <TT><FONT FACE="Courier">false</FONT></TT>, otherwise.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Before</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean before(Date when)</FONT></TT>
</BLOCKQUOTE>
<P>
Determines whether the date occurs before the specified date.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">when</FONT> is the date to compare against.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">true</FONT> if the object's date occurs before the specified date; <TT><FONT FACE="Courier">false</FONT></TT>, otherwise.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Equals</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean equals(Object obj)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether two date objects are the same by
comparing the dates represented by each object. For example, the
following code will verify that Independence Day and the Fourth
of July are the same date:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Date independenceDay = new Date(96, 6,
4);<BR>
Date fourthOfJuly = new Date(96, 6, 4);<BR>
<BR>
Graphics g = getGraphics();<BR>
if (independenceDay.equals(fourthOfJuly))<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;They're equal&quot;,
15, 15);<BR>
else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;They're not equal&quot;,
15, 15);</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">obj</FONT> is the object to compare against.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">True</FONT> if the dates are the same; <TT><FONT FACE="Courier">false</FONT></TT>, otherwise.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetDate</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int getDate()</FONT></TT>
</BLOCKQUOTE>
<P>
This method returns the day (or date) portion of a date object.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%></TD><TD >The day of the month from 1 to 31.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetDay</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int getDay()</FONT></TT>
</BLOCKQUOTE>
<P>
This method returns the day of the week. Sunday is assigned a
value of <TT><FONT FACE="Courier">0</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >The day of the week from 0 (Sunday) to 6 (Saturday).
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">getHours</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int getHours()</FONT></TT>
</BLOCKQUOTE>
<P>
This method returns the hours.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >The hours from 0 to 23.</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">getMinutes</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int getMinutes()</FONT></TT>
</BLOCKQUOTE>
<P>
This method returns the minutes.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >The minutes from 0 to 59.</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">getMonth</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int getMonth()</FONT></TT>
</BLOCKQUOTE>
<P>
This method returns the month.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >The month from 0 (January) to 11 (December).</TD>
</TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">getSeconds</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int getSeconds()</FONT></TT>
</BLOCKQUOTE>
<P>
This method returns the seconds.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >The seconds from 0 to 59.</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetTime</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public long getTime()</FONT></TT>
</BLOCKQUOTE>
<P>
This method returns the number of milliseconds since midnight
on January 1, 1970.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >The time expressed in elapsed milliseconds.</TD>
</TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetTimezoneOffset</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int getTimezoneOffset()</FONT></TT>
</BLOCKQUOTE>
<P>
This method returns the offset in minutes of the current time
zone from the UTC. For example, California is in the Pacific time
zone and during Pacific Standard Time the following will display
that it is 480 minutes (8 hours) different from UTC:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Date date1 = new Date(96, 11, 14);<BR>
<BR>
Graphics g = getGraphics();<BR>
g.drawString(&quot;Timezone Offset: &quot; + date1.getTimezoneOffset()
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;&quot;
minutes from UTC&quot;, 15, 15);</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >The number of minutes difference between the time zone of the object and UTC.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetYear</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int getYear()</FONT></TT>
</BLOCKQUOTE>
<P>
This method returns the year after 1900.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >The year after 1900.</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">HashCode</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int hashCode()</FONT></TT>
</BLOCKQUOTE>
<P>
This method overrides the <TT><FONT FACE="Courier">hashCode</FONT></TT>
method in <TT><FONT FACE="Courier">Object</FONT></TT> and can
be used to get a hash code for the instance.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >A hash code for the instance.</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">setDate</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setDate(int date)</FONT></TT>
</BLOCKQUOTE>
<P>
This method sets the day of the month portion of a <TT><FONT FACE="Courier">Date</FONT></TT>
object.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">date</FONT> is the day value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetHours</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setHours(int hours)</FONT></TT>
</BLOCKQUOTE>
<P>
This method sets the hours portion of a <TT><FONT FACE="Courier">Date</FONT></TT>
object.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">hours</FONT> is the hours from 0 (midnight) to 23.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetMinutes</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setMinutes(int minutes)</FONT></TT>
</BLOCKQUOTE>
<P>
This method sets the minutes portion of a <TT><FONT FACE="Courier">Date</FONT></TT>
object.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">minutes</FONT> is the minutes from 0 to 59.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetMonth</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setMonth(int month)</FONT></TT>
</BLOCKQUOTE>
<P>
This method sets the month portion of a <TT><FONT FACE="Courier">Date</FONT></TT>
object.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">month</FONT> is the zero-based month from 0 (January) to 11 (December).
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SetSeconds</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setSeconds(int seconds)</FONT></TT>
</BLOCKQUOTE>
<P>
This method sets the seconds portion of a <TT><FONT FACE="Courier">Date</FONT></TT>
object.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">seconds</FONT> is the seconds from 0 to 59.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>
<TD ><H4><TT><FONT FACE="Courier">SetTime</FONT></TT></H4>
</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setTime(long time)</FONT></TT>
</BLOCKQUOTE>
<P>
This method sets the time to the time represented by the number
of milliseconds in the <TT><FONT FACE="Courier">time</FONT></TT>
parameter. It is frequently used in conjunction with the <TT><FONT FACE="Courier">getTime</FONT></TT>
method, which returns a number of milliseconds. An example of
using <TT><FONT FACE="Courier">setTime</FONT></TT> in conjunction
with <TT><FONT FACE="Courier">getTime</FONT></TT> is as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Date date1 = new Date(96, 11, 14);<BR>
long milliSeconds = date1.getTime();<BR>
Date date2 = new Date();<BR>
date2.setTime(milliSeconds);<BR>
<BR>
if (date1.equals(date2)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Graphics g = getGraphics();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;Dates are equal&quot;,
15, 15);<BR>
}</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">time</FONT> is the new time in milliseconds since January 1, 1970.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>
<TD ><H4><TT><FONT FACE="Courier">SetYear</FONT></TT></H4>
</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setYear(int year)</FONT></TT>
</BLOCKQUOTE>
<P>
This method sets the year portion of a date instance. As an example,
consider the following code:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Date birthday = new Date(95, 10, 14);
<BR>
birthday.setYear(100);<BR>
int day = birthday.getDay();<BR>
switch (birthday.getDay()) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case 0: // Sunday<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;It
will be a Sunday&quot;, 15, 15);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case 1: // Monday<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;It
will be a Monday&quot;, 15, 15);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case 2: // Tuesday<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;It
will be a Tuesday&quot;, 15, 15);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case 3: // Wednesday<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;It
will be a Wednesday&quot;, 15, 15);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case 4: // Thursday<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;It
will be a Thursday&quot;, 15, 15);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case 5: // Friday<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;It
will be a Friday&quot;, 15, 15);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case 6: // Saturday<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;It
will be a Saturday&quot;, 15, 15);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
This example shows how to plan a birthday party in the year 2000.
First, the variable <TT><FONT FACE="Courier">birthday</FONT></TT>
is set to November 14, 1995. Then, <TT><FONT FACE="Courier">setYear</FONT></TT>
is used to change the year to 2000 (1900 + 100). Finally, a switch
statement on <TT><FONT FACE="Courier">getDay</FONT></TT> is used
to determine the day of the week.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Year</FONT> is the year after 1900. For 1996, use 96.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ToGMTString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String toGMTString()</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a string that contains the date and time formatted
according to GMT (Greenwich Mean Time) conventions. For example,
if run on a machine set to Pacific Standard Time, the following
code will display<TT><FONT FACE="Courier"> &quot;14 Nov 1995 08:00:00
GMT&quot;</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Date date1 = new Date(95, 10, 14);<BR>
<BR>
Graphics g = getGraphics();<BR>
if (date1.equals(date1)) <BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;GMT: &quot; + date1.toGMTString(),
15, 15);</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >A string representing the date in GMT format, such as <TT><FONT FACE="Courier">&quot;14 Nov 1995 08:00:00 GMT&quot;</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ToLocaleString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String toLocaleString()</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a string that contains the date and time in
the format of the current locale. For example, the following code
will display<TT><FONT FACE="Courier"> &quot;11/14/95 00:00:00&quot;</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Date date1 = new Date(95, 10, 14);<BR>
<BR>
Graphics g = getGraphics();<BR>
if (date1.equals(date1)) <BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;Locale: &quot; + date1.toLocaleString(),
15, 15);</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >A string representing the date as formatted for the locale of the instance, such as <TT><FONT FACE="Courier">&quot;11/14/95 00:00:00&quot;</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ToString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Date</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String toString()</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a string that contains the day of the week,
the date, and the time. For example, the following code will display
<TT><FONT FACE="Courier">&quot;Tue Nov 14 00:00:00 1995&quot;</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Date date1 = new Date(95, 10, 14);<BR>
<BR>
Graphics g = getGraphics();<BR>
if (date1.equals(date1)) <BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;String: &quot; + date1.toString(),
15, 15);</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >A string representing the day of the week, date, and time of the instance, such as <TT><FONT FACE="Courier">&quot;Tue Nov 14 00:00:00 1995&quot;</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></TD><TD WIDTH=499><H2><A NAME="Dictionary"><FONT SIZE=5 COLOR=#FF0000>Dictionary</FONT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
The abstract class java.util.Dictionary extends Object. The non-private
members of Dictionary are shown in Listing 34.3.
<HR>
<BLOCKQUOTE>
<B>Listing 34.3. The </B><TT><B><FONT FACE="Courier">Dictionary</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class Dictionary extends Object
{<BR>
&nbsp;&nbsp;//&nbsp;public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Dictionary();<BR>
&nbsp;&nbsp;//&nbsp;public instance methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public abstract Enumeration elements();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public abstract Object get(Object
key);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isEmpty();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public abstract Enumeration keys();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public abstract Object put(Object
key, Object value);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public abstract Object remove(Object
key);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public abstract int size();<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">Dictionary</FONT></TT> class is an
abstract class. <TT><FONT FACE="Courier">Hashtable</FONT></TT>
is derived directly from <TT><FONT FACE="Courier">Dictionary</FONT></TT>,
and <TT><FONT FACE="Courier">Properties</FONT></TT> is derived
from <TT><FONT FACE="Courier">Hashtable</FONT></TT>. Although
one of these classes will probably meet your needs, you could
extend <TT><FONT FACE="Courier">Dictionary</FONT></TT> in your
own new class if necessary.
<P>
Each element in a <TT><FONT FACE="Courier">Dictionary</FONT></TT>
consists of a key and value. Elements are added to a <TT><FONT FACE="Courier">Dictionary</FONT></TT>
using <TT><FONT FACE="Courier">put</FONT></TT> and are retrieved
using <TT><FONT FACE="Courier">get</FONT></TT>. Elements may be
deleted with <TT><FONT FACE="Courier">remove</FONT></TT>. The
methods <TT><FONT FACE="Courier">elements</FONT></TT> and <TT><FONT FACE="Courier">keys</FONT></TT>
each return an enumeration of the values and keys, respectively,
stored in the <TT><FONT FACE="Courier">Dictionary</FONT></TT>.<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Dictionary</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Dictionary</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Dictionary()</FONT></TT>
</BLOCKQUOTE>
<P>
This is a default constructor that will create an empty <TT><FONT FACE="Courier">Dictionary</FONT></TT>.
<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">elements</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Dictionary</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract Enumeration elements()</FONT></TT>
</BLOCKQUOTE>
<P>
This abstract method returns an <TT><FONT FACE="Courier">Enumeration</FONT></TT>
of all elements in a <TT><FONT FACE="Courier">Dictionary</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >An enumeration of each of the elements in the <TT><FONT FACE="Courier">Dictionary</FONT></TT>. The methods of <TT><FONT FACE="Courier">Enumeration</FONT></TT> can be used to iterate through the elements.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">get</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Dictionary</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract Object get(Object key)</FONT></TT>
</BLOCKQUOTE>
<P>
This abstract method retrieves an object from a <TT><FONT FACE="Courier">Dictionary</FONT></TT>
based on its key.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">key</FONT> is the key of the object to be retrieved.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD >The value associated with the key, if found; <TT><FONT FACE="Courier">null</FONT></TT>, if not.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">isEmpty</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Dictionary</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract boolean isEmpty()</FONT></TT>
</BLOCKQUOTE>
<P>
This abstract method can be used to determine if the <TT><FONT FACE="Courier">Dictionary</FONT></TT>
is empty.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">true</FONT> if the <TT><FONT FACE="Courier">Dictionary</FONT></TT> is empty; <TT><FONT FACE="Courier">false</FONT></TT>, if not.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">keys</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Dictionary</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract Enumeration keys()</FONT></TT>
</BLOCKQUOTE>
<P>
This abstract method returns an <TT><FONT FACE="Courier">Enumeration</FONT></TT>
of all keys in a <TT><FONT FACE="Courier">Dictionary</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >An enumeration of each of the keys in the <TT><FONT FACE="Courier">Dictionary</FONT></TT>. The methods of <TT><FONT FACE="Courier">Enumeration</FONT></TT> can be used to iterate through the keys.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">put</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Dictionary</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract Object put(Object key,
Object value)</FONT></TT>
</BLOCKQUOTE>
<P>
This abstract method inserts a new element into the <TT><FONT FACE="Courier">Dictionary</FONT></TT>.
To retrieve an element use the <TT><FONT FACE="Courier">get</FONT></TT>
method.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">key</FONT> is the key to be added.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">value</FONT> is the value associated with the key.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD >If the key was already in the <TT><FONT FACE="Courier">Dictionary</FONT></TT> the old value associated with it is returned. If not, <TT><FONT FACE="Courier">null</FONT></TT> is returned.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NullPointerException</FONT> is thrown if the value to be put is <TT><FONT FACE="Courier">null</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">remove</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Dictionary</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract Object remove(Object
key)</FONT></TT>
</BLOCKQUOTE>
<P>
This abstract method removes an object from a <TT><FONT FACE="Courier">Dictionary</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">key</FONT> is the key of the element to be removed.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD >If the key is found, the value associated with it is returned; if not, <TT><FONT FACE="Courier">null</FONT></TT> is returned.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">size</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Dictionary</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract int size()</FONT></TT>
</BLOCKQUOTE>
<P>
This abstract method returns the number of elements in the <TT><FONT FACE="Courier">Dictionary</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >The number of items stored in the <TT><FONT FACE="Courier">Dictionary</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></TD><TD WIDTH=499><H2><A NAME="Enumeration"><FONT SIZE=5 COLOR=#FF0000>Enumeration</FONT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></TD></TR>
</TABLE></CENTER>
<P>
<P>
The interface <TT><FONT FACE="Courier">java.util.Enumeration</FONT></TT>
defines methods that can be used to iterate through a set of objects.
The methods <TT><FONT FACE="Courier">hasMoreElements</FONT></TT>
and <TT><FONT FACE="Courier">nextElement</FONT></TT> are typically
used in a loop that visits each item in the set. For example,
the following code will iterate through each item in a <TT><FONT FACE="Courier">Vector</FONT></TT>
calling the method <TT><FONT FACE="Courier">DoSomething</FONT></TT>
for each element:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">for (Enumeration e = myVector.elements()
; e.hasMoreElements() ;) <BR>
&nbsp;&nbsp;&nbsp;&nbsp;DoSomething(e.nextElement());</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">Enumeration</FONT></TT> interface
is shown in Listing 34.4.
<HR>
<BLOCKQUOTE>
<B>Listing 34.4. The </B><TT><B><FONT FACE="Courier">Enumeration</FONT></B></TT><B>
interface.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public interface Enumeration {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// public instance methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean hasMoreElements();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public abstract Object nextElement();</FONT></TT>
</BLOCKQUOTE>
<P>
<TT><FONT FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</FONT></TT>
<HR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">hasMoreElements</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Enumeration</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract boolean hasMoreElements()</FONT></TT>
</BLOCKQUOTE>
<P>
Can be used to determine if the enumeration has more elements.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">true</FONT> if there are more elements; <TT><FONT FACE="Courier">false</FONT></TT>, if not.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">nextElement</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Enumeration</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract Object nextElement()</FONT></TT>
</BLOCKQUOTE>
<P>
This method returns the next element in the enumeration. Calling
it repeatedly will move through the enumeration.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >The next element in the enumeration.</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NoSuchElementException</FONT> is thrown if there are no more elements in the enumeration.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></TD><TD WIDTH=499><H2><A NAME="Hashtable"><FONT SIZE=5 COLOR=#FF0000>Hashtable</FONT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Dictionary</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
The class java.util.Hashtable extends Dictionary. The non-private
members of Hashtable are shown in Listing 34.5.
<HR>
<BLOCKQUOTE>
<B>Listing 34.5. The </B><TT><B><FONT FACE="Courier">Hashtable</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class Hashtable extends Dictionary
{<BR>
&nbsp;&nbsp;//&nbsp;public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Hashtable(int initialCapacity,
float loadFactor);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Hashtable(int initialCapacity);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Hashtable();<BR>
&nbsp;&nbsp;//&nbsp;public instance methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public synchronized void clear();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public synchronized Object clone();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public synchronized boolean contains(Object
value);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public synchronized boolean containsKey(Object
key);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public synchronized Enumeration
elements();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public synchronized Object get(Object
key);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean isEmpty();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public synchronized Enumeration
keys();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public synchronized Object put(Object
key, Object value);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public synchronized Object remove(Object
key);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public int size();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public synchronized String toString();
<BR>
&nbsp;&nbsp;//&nbsp;protected instance methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected void rehash();<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
A <TT><FONT FACE="Courier">Hashtable</FONT></TT> is used for mapping
keys to values. For example, it could be used to map names to
ages, programmers to projects, job titles to salaries, and so
on. The <TT><FONT FACE="Courier">Properties</FONT></TT> class
extends <TT><FONT FACE="Courier">Hashtable</FONT></TT> and adds
the ability to read and write a <TT><FONT FACE="Courier">Hashtable</FONT></TT>
to a stream.
<P>
Each element in a <TT><FONT FACE="Courier">Hashtable</FONT></TT>
consists of a key and value. Elements are added to a <TT><FONT FACE="Courier">Hashtable</FONT></TT>
using the <TT><FONT FACE="Courier">put</FONT></TT> method and
are retrieved using <TT><FONT FACE="Courier">get</FONT></TT>.
Elements may be deleted from a <TT><FONT FACE="Courier">Hashtable</FONT></TT>
with <TT><FONT FACE="Courier">remove</FONT></TT>. A <TT><FONT FACE="Courier">Hashtable</FONT></TT>
expands in size as elements are added to it. When creating a new
<TT><FONT FACE="Courier">Hashtable</FONT></TT>, you can specify
an initial capacity and a load factor. The <TT><FONT FACE="Courier">Hashtable</FONT></TT>
increases in size whenever adding a new element would move the
<TT><FONT FACE="Courier">Hashtable</FONT></TT> past its threshold.
A <TT><FONT FACE="Courier">Hashtable</FONT></TT>'s threshold is
its capacity multiplied by its load factor. For example, a <TT><FONT FACE="Courier">Hashtable</FONT></TT>
with a capacity of 100 and a load factor of 0.75 would have a
threshold of 75 items.<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Hashtable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Hashtable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Hashtable(int initialCapacity,
float loadFactor)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a new instance of a <TT><FONT FACE="Courier">Hashtable</FONT></TT>
with the specified initial capacity and load factor. Although
an initial capacity is specified, the <TT><FONT FACE="Courier">Hashtable</FONT></TT>
grows as needed when new items are added. The initial capacity
specifies how many elements could be stored in the <TT><FONT FACE="Courier">Hashtable</FONT></TT>
if the load factor is 1.0. The load factor is a number between
0.0 and 1.0 and specifies the percent of the <TT><FONT FACE="Courier">Hashtable</FONT></TT>
that must be full before the size is automatically increased.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">initialCapacity</FONT> is the initial capacity of the <TT><FONT FACE="Courier">Hashtable</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">loadFactor</FONT> is a value between 0.0 and 1.0 which specifies the percent of available hash slots that can be filled before the table is automatically rehashed into a larger <TT><FONT FACE="Courier">Hashtable</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Hashtable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Hashtable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Hashtable(int initialCapacity)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a new <TT><FONT FACE="Courier">Hashtable</FONT></TT>
with the specified initial capacity and a default load factor
of 0.75.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">initialCapacity</FONT> is the initial capacity of the <TT><FONT FACE="Courier">Hashtable</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Hashtable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Hashtable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Hashtable()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a new <TT><FONT FACE="Courier">Hashtable</FONT></TT>
using default values for the initial capacity and the load factor.
A default of 101 is used for the initial capacity, and 0.75 is
used for the load factor.<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">clear</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Hashtable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized void clear()</FONT></TT>
</BLOCKQUOTE>
<P>
This method removes all elements from a <TT><FONT FACE="Courier">Hashtable</FONT></TT>.
The following example creates a <TT><FONT FACE="Courier">Hashtable</FONT></TT>,
inserts three items into it, and then removes all of them using
<TT><FONT FACE="Courier">clear</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Hashtable ages = new Hashtable();<BR>
ages.put(&quot;Mike&quot;, new Integer(33));<BR>
ages.put(&quot;Laura&quot;, new Integer(34));<BR>
ages.put(&quot;Savannah&quot;, new Integer(0));<BR>
ages.clear();</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">clone</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Hashtable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized Object clone()</FONT></TT>
</BLOCKQUOTE>
<P>
This method clones the <TT><FONT FACE="Courier">Hashtable</FONT></TT>
into a new <TT><FONT FACE="Courier">Hashtable</FONT></TT>. The
keys and values themselves are not cloned. The following example
results in the creation of two <TT><FONT FACE="Courier">Hashtable</FONT></TT>s,
each with the same three elements:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Hashtable ages = new Hashtable();<BR>
ages.put(&quot;Mike&quot;, new Integer(33));<BR>
ages.put(&quot;Laura&quot;, new Integer(34));<BR>
ages.put(&quot;Savannah&quot;, new Integer(0));<BR>
Hashtable clonedAges = (Hashtable)ages.clone();</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >A cloned <TT><FONT FACE="Courier">Hashtable</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">contains</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Hashtable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized boolean contains(Object
value)</FONT></TT>
</BLOCKQUOTE>
<P>
This method searches the <TT><FONT FACE="Courier">Hashtable</FONT></TT>
to determine if a specific value is stored. For example, consider
the following example, which searches the <TT><FONT FACE="Courier">ages</FONT></TT>
<TT><FONT FACE="Courier">Hashtable</FONT></TT> for anyone with
an age of <TT><FONT FACE="Courier">0</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Hashtable ages = new Hashtable();<BR>
ages.put(&quot;Mike&quot;, new Integer(33));<BR>
ages.put(&quot;Laura&quot;, new Integer(34));<BR>
ages.put(&quot;Savannah&quot;, new Integer(0));<BR>
<BR>
Graphics g = getGraphics();<BR>
if (ages.contains(new Integer(0)))<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;Found a baby!&quot;,
15, 15);<BR>
else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;No babies found!&quot;,
15, 15);<BR>
</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">value</FONT> is the value to search for.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">True</FONT> if the value is found; <TT><FONT FACE="Courier">false</FONT></TT>, if not.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NullPointerException</FONT> is thrown if the value is <TT><FONT FACE="Courier">null</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">containsKey</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Hashtable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized boolean containsKey(Object
key)</FONT></TT>
</BLOCKQUOTE>
<P>
This method searches the <TT><FONT FACE="Courier">Hashtable</FONT></TT>
to determine if a specific key occurs. As an example, consider
the following code, which searches for the name Savannah:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Hashtable ages = new Hashtable();<BR>
ages.put(&quot;Mike&quot;, new Integer(33));<BR>
ages.put(&quot;Laura&quot;, new Integer(34));<BR>
ages.put(&quot;Savannah&quot;, new Integer(0));<BR>
<BR>
Graphics g = getGraphics();<BR>
if (ages.containsKey(&quot;Savannah&quot;))<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;Savannah was found!&quot;,
15, 15);<BR>
else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;Savannah not found!&quot;,
15, 15);<BR>
</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">key</FONT> is the key to search for.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">true</FONT> if the key is found; <TT><FONT FACE="Courier">false</FONT></TT>, if not.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">elements</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Hashtable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized Enumeration elements()</FONT></TT>
</BLOCKQUOTE>
<P>
This method returns an enumeration of all of the element values
in the instance. For example, the following code will display
the integers 33, 34, and 0:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Hashtable ages = new Hashtable();<BR>
ages.put(&quot;Mike&quot;, new Integer(33));<BR>
ages.put(&quot;Laura&quot;, new Integer(34));<BR>
ages.put(&quot;Savannah&quot;, new Integer(0));<BR>
<BR>
Graphics g = getGraphics();<BR>
int count = 0;<BR>
for (Enumeration enum = ages.elements() ; enum.hasMoreElements()
;) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;count++;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;Value = &quot; + (Integer)enum.nextElement(),
15, 15*count);<BR>
}</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >An enumeration of each of the keys in the <TT><FONT FACE="Courier">Hashtable</FONT></TT>. The methods of <TT><FONT FACE="Courier">Enumeration</FONT></TT> can be used to iterate through the keys.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">get</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Hashtable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized Object get(Object
key)</FONT></TT>
</BLOCKQUOTE>
<P>
This function retrieves the object associated with the specified
key. For example, the following code puts three objects into a
<TT><FONT FACE="Courier">Hashtable</FONT></TT> and then retrieves
Laura's age:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Hashtable ages = new Hashtable();<BR>
ages.put(&quot;Mike&quot;, new Integer(33));<BR>
ages.put(&quot;Laura&quot;, new Integer(34));<BR>
ages.put(&quot;Savannah&quot;, new Integer(0));<BR>
<BR>
Integer age = (Integer)ages.get(&quot;Laura&quot;);<BR>
<BR>
Graphics g = getGraphics();<BR>
if (age != null)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;Laura is &quot; + age,
15, 15);<BR>
</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">key</FONT> is the key of the object to be retrieved.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD >The value associated with the key, if found; <TT><FONT FACE="Courier">null</FONT></TT>, if not.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">isEmpty</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Hashtable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean isEmpty()</FONT></TT>
</BLOCKQUOTE>
<P>
This method can be used to determine if the <TT><FONT FACE="Courier">Hashtable</FONT></TT>
is empty.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">true</FONT> if the <TT><FONT FACE="Courier">Hashtable</FONT></TT> is empty; <TT><FONT FACE="Courier">false</FONT></TT>, if not.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">keys</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Hashtable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized Enumeration keys()</FONT></TT>
</BLOCKQUOTE>
<P>
This method returns an enumeration of all of the keys in the instance.
For example, the following code will display the names Mike, Laura,
and Savannah:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Hashtable ages = new Hashtable();<BR>
ages.put(&quot;Mike&quot;, new Integer(33));<BR>
ages.put(&quot;Laura&quot;, new Integer(34));<BR>
ages.put(&quot;Savannah&quot;, new Integer(0));<BR>
<BR>
Graphics g = getGraphics();<BR>
int count = 0;<BR>
for (Enumeration enum = ages.keys() ; enum.hasMoreElements() ;)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;count++;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString((String)enum.nextElement(),
15, 15*count);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >An enumeration of each of the keys in the <TT><FONT FACE="Courier">Hashtable</FONT></TT>. The methods of <TT><FONT FACE="Courier">Enumeration</FONT></TT> can be used to iterate through the keys.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">put</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Hashtable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized Object put(Object
key, Object value)</FONT></TT>
</BLOCKQUOTE>
<P>
This method inserts a new element into the <TT><FONT FACE="Courier">Hashtable</FONT></TT>.
To retrieve an element use the <TT><FONT FACE="Courier">get</FONT></TT>
method. The following sample code creates a new <TT><FONT FACE="Courier">Hashtable</FONT></TT>
and then puts three elements into it:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Hashtable ages = new Hashtable();<BR>
ages.put(&quot;Mike&quot;, new Integer(33));<BR>
ages.put(&quot;Laura&quot;, new Integer(34));<BR>
ages.put(&quot;Savannah&quot;, new Integer(0));</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">key</FONT> is the key to be added.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">value</FONT> is the value associated with the key.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD >If the key was already in the <TT><FONT FACE="Courier">Hashtable</FONT></TT>, the old value associated with it is returned. If not, <TT><FONT FACE="Courier">null</FONT></TT> is returned.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NullPointerException</FONT> is thrown if the value is <TT><FONT FACE="Courier">null</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">rehash</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Hashtable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">protected void rehash()</FONT></TT>
</BLOCKQUOTE>
<P>
This method rehashes the <TT><FONT FACE="Courier">Hashtable</FONT></TT>
into a larger <TT><FONT FACE="Courier">Hashtable</FONT></TT>.
It is not normally necessary to call this method directly because
it is invoked automatically based on the capacity and load factor
of the <TT><FONT FACE="Courier">Hashtable</FONT></TT>.<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">remove</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Hashtable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized Object remove(Object
key)</FONT></TT>
</BLOCKQUOTE>
<P>
This method removes an object from a <TT><FONT FACE="Courier">Hashtable</FONT></TT>.
The following code illustrates how to remove an element:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Hashtable ages = new Hashtable();<BR>
ages.put(&quot;Mike&quot;, new Integer(33));<BR>
ages.put(&quot;Laura&quot;, new Integer(34));<BR>
ages.put(&quot;Savannah&quot;, new Integer(0));<BR>
ages.remove(&quot;Laura&quot;);</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">key</FONT> is the key of the element to be removed.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD >If the key is found, the value associated with it is returned; if not, <TT><FONT FACE="Courier">null</FONT></TT> is returned.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">size</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Hashtable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int size()</FONT></TT>
</BLOCKQUOTE>
<P>
This method returns the number of elements in the <TT><FONT FACE="Courier">Hashtable</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >The number of items stored in the <TT><FONT FACE="Courier">Hashtable</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Hashtable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized String toString()</FONT></TT>
</BLOCKQUOTE>
<P>
This method overrides the <TT><FONT FACE="Courier">toString</FONT></TT>
method in <TT><FONT FACE="Courier">Object</FONT></TT> and formats
the contents of the <TT><FONT FACE="Courier">Hashtable</FONT></TT>
as a <TT><FONT FACE="Courier">String</FONT></TT>. For example,
the following code will display <TT><FONT FACE="Courier">{Savannah=0,
Laura=34, Mike=33}</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Hashtable ages = new Hashtable();<BR>
ages.put(&quot;Mike&quot;, new Integer(33));<BR>
ages.put(&quot;Laura&quot;, new Integer(34));<BR>
ages.put(&quot;Savannah&quot;, new Integer(0));<BR>
Graphics g = getGraphics();<BR>
g.drawString(ages.toString(), 15, 15);</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >A <TT><FONT FACE="Courier">String</FONT></TT> representation of the <TT><FONT FACE="Courier">Hashtable</FONT></TT>. 
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></TD><TD WIDTH=499><H2><A NAME="Observable"><FONT SIZE=5 COLOR=#FF0000>Observable</FONT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
The class java.util.Observable extends Object directly. An Observable
class is a class that may be watched or monitored by another class
that implements the Observer interface. Associated with an Observable
instance is a list of Observers. Whenever the Observable instance
changes, it can notify each of its Observers. By using Observable
and Observer classes, you can achieve a better partitioning of
your code by decreasing the reliance of one class on another.
<P>
The non-private members of Observable are shown in Listing 34.6.
<HR>
<BLOCKQUOTE>
<B>Listing 34.6. The </B><TT><B><FONT FACE="Courier">Observable</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class Observable extends Object
{<BR>
&nbsp;&nbsp;//&nbsp;public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Observable();<BR>
&nbsp;&nbsp;//&nbsp;public instance methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public synchronized void addObserver(Observer
o);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public synchronized int countObservers();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public synchronized void deleteObserver(Observer
o);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public synchronized void deleteObservers();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public synchronized boolean hasChanged();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void notifyObservers();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public synchronized void notifyObservers(Object
arg);<BR>
// protected instance methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected synchronized void clearChanged();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected synchronized void setChanged();
<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
As an example of how <TT><FONT FACE="Courier">Observable</FONT></TT>
can be used, consider the following declaration of a class that
extends <TT><FONT FACE="Courier">Observable</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">class Obsable extends Observable {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private int secretNumber;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Obsable(int x) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;secretNumber =
x;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setSecretNumber(int x) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;secretNumber =
x;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setChanged();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;notifyObservers(new
Integer(secretNumber));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">Obsable</FONT></TT> class stores
a secret number, and whenever that number changes, all <TT><FONT FACE="Courier">Observer</FONT></TT>s
are notified. No <TT><FONT FACE="Courier">Observable</FONT></TT>
class is complete without an <TT><FONT FACE="Courier">Observer</FONT></TT>,
so here is the <TT><FONT FACE="Courier">Test</FONT></TT> class
that extends <TT><FONT FACE="Courier">Applet</FONT></TT> and implements
the <TT><FONT FACE="Courier">Observer</FONT></TT> interface:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class Test extends Applet implements
Observer {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Integer secretNumber;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void update(Observable o, Object
arg) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;secretNumber =
(Integer)arg;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean mouseDown(Event e, int
x, int y)&nbsp;&nbsp; {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Obsable obs =
new Obsable(12);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obs.addObserver(this);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obs.setSecretNumber(23);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Graphics g = getGraphics();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;Secret
Number: &quot; + secretNumber, 15, 35);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean handleEvent(Event event)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return super.handleEvent(event);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void init() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.init();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout(null);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resize(230,190);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">Test</FONT></TT> class contains an
<TT><FONT FACE="Courier">update</FONT></TT> method that is part
of the <TT><FONT FACE="Courier">Observer</FONT></TT> interface.
This method is passed an <TT><FONT FACE="Courier">Observable</FONT></TT>
item and an <TT><FONT FACE="Courier">Object</FONT></TT> as parameters.
As shown in the declaration of <TT><FONT FACE="Courier">Obsable</FONT></TT>,
the <TT><FONT FACE="Courier">Object</FONT></TT> is an <TT><FONT FACE="Courier">Integer</FONT></TT>.
Therefore, <TT><FONT FACE="Courier">update</FONT></TT> casts the
<TT><FONT FACE="Courier">Object</FONT></TT> into an <TT><FONT FACE="Courier">Integer</FONT></TT>
and stores it in the instance variable <TT><FONT FACE="Courier">secretNumber</FONT></TT>.
The <TT><FONT FACE="Courier">mouseDown</FONT></TT> method is used
to test this code. When a mouse button is pressed, a new <TT><FONT FACE="Courier">Obsable</FONT></TT>
instance is created, the instance of <TT><FONT FACE="Courier">Test</FONT></TT>
is added as an <TT><FONT FACE="Courier">Observer</FONT></TT> and
the <TT><FONT FACE="Courier">setSecretNumber</FONT></TT> method
is called. This method in <TT><FONT FACE="Courier">Obsable</FONT></TT>
causes all <TT><FONT FACE="Courier">Observer</FONT></TT>s to be
notified. Because <TT><FONT FACE="Courier">Test</FONT></TT> is
an <TT><FONT FACE="Courier">Observer</FONT></TT>, its <TT><FONT FACE="Courier">update</FONT></TT>
method is invoked, and the new value for <TT><FONT FACE="Courier">secretNumber</FONT></TT>
(<TT><FONT FACE="Courier">23</FONT></TT>) is stored. It is then
displayed as evidence that <TT><FONT FACE="Courier">update</FONT></TT>
was called.<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Observable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Observable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Observable()</FONT></TT>
</BLOCKQUOTE>
<P>
This is an empty, default constructor.<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">addObserver</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Observable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized void addObserver(Observer
o)</FONT></TT>
</BLOCKQUOTE>
<P>
This method adds an <TT><FONT FACE="Courier">Observer</FONT></TT>
to the list of objects that are observing this instance. The observer
must implement the <TT><FONT FACE="Courier">Observer</FONT></TT>
interface. Frequently, the <TT><FONT FACE="Courier">Observer</FONT></TT>
parameter passed to this method is the <TT><FONT FACE="Courier">this</FONT></TT>
implicit member variable, as shown in the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Obsable obs = new Obsable(12);<BR>
obs.addObserver(this);</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">o</FONT> is the observer to add.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">clearChanged</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Observable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">protected synchronized void clearChanged()</FONT></TT>
</BLOCKQUOTE>
<P>
This method clears the internal flag that indicates an <TT><FONT FACE="Courier">Observable</FONT></TT>
instance has changed.<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">countObservers</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Observable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized int countObservers()</FONT></TT>
</BLOCKQUOTE>
<P>
This method counts the number of <TT><FONT FACE="Courier">Observer</FONT></TT>s
that are observing the instance.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >The number of <TT><FONT FACE="Courier">Observer</FONT></TT>s for the instance.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">deleteObserver</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Observable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized void deleteObserver(Observer
o)</FONT></TT>
</BLOCKQUOTE>
<P>
This method deletes an <TT><FONT FACE="Courier">Observer</FONT></TT>
from the list of <TT><FONT FACE="Courier">Observer</FONT></TT>s
that are monitoring an <TT><FONT FACE="Courier">Observable</FONT></TT>
object. The <TT><FONT FACE="Courier">Observer</FONT></TT> must
have been previously added with <TT><FONT FACE="Courier">addObserver</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">o</FONT> is the observer to delete.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">deleteObservers</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Observable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized void deleteObservers()</FONT></TT>
</BLOCKQUOTE>
<P>
This method deletes all <TT><FONT FACE="Courier">Observer</FONT></TT>s
of the <TT><FONT FACE="Courier">Observable</FONT></TT> instance.<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">hasChanged</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Observable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized boolean hasChanged()</FONT></TT>
</BLOCKQUOTE>
<P>
This method can be used to query whether an <TT><FONT FACE="Courier">Observable</FONT></TT>
has changed.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">true</FONT> if an observable change has occurred; <TT><FONT FACE="Courier">false</FONT></TT>, otherwise. 
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">notifyObservers</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Observable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void notifyObservers()</FONT></TT>
</BLOCKQUOTE>
<P>
This method notifies all <TT><FONT FACE="Courier">Observer</FONT></TT>s
that a change has occurred in the <TT><FONT FACE="Courier">Observable</FONT></TT>
object. This results in a call to the <TT><FONT FACE="Courier">update</FONT></TT>
method in each <TT><FONT FACE="Courier">Observer</FONT></TT>.<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">notifyObservers</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Observable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized void notifyObservers(Object
arg)</FONT></TT>
</BLOCKQUOTE>
<P>
This method notifies all <TT><FONT FACE="Courier">Observer</FONT></TT>s
that a change has occurred in the <TT><FONT FACE="Courier">Observable</FONT></TT>
object. This results in a call to the <TT><FONT FACE="Courier">update</FONT></TT>
method in each <TT><FONT FACE="Courier">Observer</FONT></TT> to
which <TT><FONT FACE="Courier">arg</FONT></TT> will be passed.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">arg</FONT> is any object that can be used to convey information to the <TT><FONT FACE="Courier">Observer</FONT></TT>s.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">setChanged</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Observable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">protected synchronized void setChanged()</FONT></TT>
</BLOCKQUOTE>
<P>
This method sets an internal flag to indicate that an observable
change has occurred within the instance.<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></TD><TD WIDTH=499>
<H2><A NAME="Observer"><FONT SIZE=5 COLOR=#FF0000>Observer</FONT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></TD></TR>
</TABLE></CENTER>
<P>
<P>
The interface <TT><FONT FACE="Courier">java.util.Observer</FONT></TT>
defines an <TT><FONT FACE="Courier">update</FONT></TT> method
that is invoked by an <TT><FONT FACE="Courier">Observable</FONT></TT>
object whenever the <TT><FONT FACE="Courier">Observable</FONT></TT>
object has changed and wants to notify its <TT><FONT FACE="Courier">Observer</FONT></TT>s.
The <TT><FONT FACE="Courier">Observer</FONT></TT> interface is
shown in Listing 34.7.
<HR>
<BLOCKQUOTE>
<B>Listing 34.7. The </B><TT><B><FONT FACE="Courier">Observer</FONT></B></TT><B>
interface.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public interface Observer {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// public instance methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public abstract void update(Observable
o, Object arg);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
For an example of how to use an <TT><FONT FACE="Courier">Observer</FONT></TT>
with an <TT><FONT FACE="Courier">Observable</FONT></TT> class,
see the discussion of the <TT><FONT FACE="Courier">Observable</FONT></TT>
class earlier in this chapter.<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">update</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Observer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract void update(Observable
o, Object arg)</FONT></TT>
</BLOCKQUOTE>
<P>
This method is called whenever an <TT><FONT FACE="Courier">Observable</FONT></TT>
instance that is being observed invokes either of its <TT><FONT FACE="Courier">notifyObservers</FONT></TT>
methods.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">o</FONT>-The <TT><FONT FACE="Courier">Observable</FONT></TT> object that is generating this message.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">arg</FONT>-Any additional information passed by the <TT><FONT FACE="Courier">Observable</FONT></TT> object's <TT><FONT FACE="Courier">notifyObservers</FONT></TT> method. This may be <TT><FONT FACE="Courier">null</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></TD><TD WIDTH=499><H2><A NAME="Properties"><FONT SIZE=5 COLOR=#FF0000>Properties</FONT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Hashtable</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
The class java.util.Properties extends Hashtable, which extends
Dictionary. The non-private members of Properties are shown in
Listing 34.8.
<HR>
<BLOCKQUOTE>
<B>Listing 34.8. The </B><TT><B><FONT FACE="Courier">Properties</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class Properties extends Hashtable
{<BR>
&nbsp;&nbsp;//&nbsp;public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Properties();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Properties(Properties defaults);
<BR>
&nbsp;&nbsp;//&nbsp;public instance methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public String getProperty(String
key);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public String getProperty(String
key, String defaultValue);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void list(PrintStream out);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public synchronized void load(InputStream
in);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Enumeration propertyNames();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public synchronized void save(OutputStream
out, String header);<BR>
&nbsp;&nbsp;//&nbsp;protected variables<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected Properties defaults;<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
This class can be used to store keys and associated values. Through
its <TT><FONT FACE="Courier">save</FONT></TT> and <TT><FONT FACE="Courier">load</FONT></TT>
methods, <TT><FONT FACE="Courier">Properties</FONT></TT> can be
written to disk. This makes this class an excellent mechanism
for storing configuration information between runs of a program.
An example of a <TT><FONT FACE="Courier">Properties</FONT></TT>
file written by the <TT><FONT FACE="Courier">save</FONT></TT>
method is as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">#This is a header comment<BR>
#Sun Jun 02 15:01:48  1996<BR>
prop3=put three<BR>
prop2=put two<BR>
prop1=put one</FONT></TT>
</BLOCKQUOTE>
<P>
Because <TT><FONT FACE="Courier">Properties</FONT></TT> is a subclass
of <TT><FONT FACE="Courier">Hashtable</FONT></TT>, new key/value
pairs are added by using the <TT><FONT FACE="Courier">put</FONT></TT>
method of <TT><FONT FACE="Courier">Hashtable</FONT></TT>. The
following example shows how to create an instance, put three properties
into it, save it, and then reload the keys and values into a different
instance:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">// create a new instance<BR>
Properties props1 = new Properties();<BR>
<BR>
// put three properties into it<BR>
props1.put(&quot;prop1&quot;, &quot;put one&quot;);<BR>
props1.put(&quot;prop2&quot;, &quot;put two&quot;);<BR>
props1.put(&quot;prop3&quot;, &quot;put three&quot;);<BR>
<BR>
// retrieve each of the three properties<BR>
String prop1 = props1.getProperty(&quot;prop1&quot;, &quot;one&quot;);
<BR>
String prop2 = props1.getProperty(&quot;prop2&quot;, &quot;two&quot;);
<BR>
String prop3 = props1.getProperty(&quot;prop3&quot;);<BR>
<BR>
// save the properties to a file<BR>
props1.save(new FileOutputStream(&quot;test.ini&quot;), &quot;My
header&quot;);<BR>
<BR>
// create a new instance and read the file in from the file<BR>
Properties props2 = new Properties();<BR>
FileInputStream inStr = new FileInputStream(&quot;test.ini&quot;);
<BR>
props2.load(inStr);<BR>
<BR>
// retrieve a property from the second instance<BR>
String prop = props2.getProperty(&quot;prop2&quot;, &quot;two&quot;);</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=583><H4>Variable</H4>
</TD></TR>
</TABLE></CENTER>
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">protected Properties defaults</FONT></B></TT>
</BLOCKQUOTE>
<P>
This member stores the default property values.<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Properties</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Properties</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Properties()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor is used to create an empty, new instance of <TT><FONT FACE="Courier">Properties</FONT></TT>
as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Properties myProps = new Properties();</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Properties</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Properties</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Properties(Properties defaults)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a new instance of <TT><FONT FACE="Courier">Properties</FONT></TT>
and will establish a set of default properties.<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetProperty</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Properties</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String getProperty(String key)</FONT></TT>
</BLOCKQUOTE>
<P>
This method is used to retrieve a property based on its key. If
no matching key is found, the defaults are searched. If no match
is found there either, <TT><FONT FACE="Courier">null</FONT></TT>
is returned. It can be used as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">String prop1 = myProps.getProperty(&quot;prop1&quot;);</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">key</FONT> is the key of the property to retrieve.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD >The property associated with the key or <TT><FONT FACE="Courier">null</FONT></TT> if there is no matching key.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">GetProperty</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Properties</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String getProperty(String key,
String defaultValue)</FONT></TT>
</BLOCKQUOTE>
<P>
This method is used to retrieve a property based on its key. If
no match is found, the <TT><FONT FACE="Courier">defaultValue</FONT></TT>
is returned. It can be used as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">String prop1 = myProps.getProperty(&quot;prop1&quot;,
&quot;default&quot;);</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">key</FONT> is the key of the property to retrieve.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">defaultValue</FONT> is the value to use if no matching key is found.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD >The property associated with the key or the <TT><FONT FACE="Courier">defaultValue</FONT></TT> if there is no matching key.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">list</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Properties</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void list(PrintStream out)</FONT></TT>
</BLOCKQUOTE>
<P>
This method lists all of the properties to the specified <TT><FONT FACE="Courier">PrintStream</FONT></TT>.
It is useful mainly while debugging.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">out</FONT> is the <TT><FONT FACE="Courier">PrintStream</FONT></TT> where the properties are to be printed. 
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">load</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Properties</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized void load(InputStream
in) throws IOException </FONT></TT>
</BLOCKQUOTE>
<P>
This method reads a set of properties from the specified <TT><FONT FACE="Courier">InputStream</FONT></TT>.
Used in conjunction with the <TT><FONT FACE="Courier">save</FONT></TT>
method, <TT><FONT FACE="Courier">Properties</FONT></TT> can be
written to disk at the end of a program run and then reloaded
at the start of the next run. The following example illustrates
how to load a <TT><FONT FACE="Courier">Properties</FONT></TT>
instance from a file named <TT><FONT FACE="Courier">TEST.INI</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Properties props = new Properties();
<BR>
FileInputStream inStr = new FileInputStream(&quot;test.ini&quot;);
<BR>
props.load(inStr);</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">in</FONT> is the <TT><FONT FACE="Courier">InputStream</FONT></TT> from which the <TT><FONT FACE="Courier">Properties</FONT></TT> are to be read. 
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> is if the specified file is not found or cannot be read.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">propertyNames</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Properties</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Enumeration propertyNames()</FONT></TT>
</BLOCKQUOTE>
<P>
This method returns an enumeration of all the property names in
the instance. For example, the following code displays the names
of each of the three properties:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Properties props1 = new Properties();
<BR>
props1.put(&quot;prop1&quot;, &quot;put one&quot;);<BR>
props1.put(&quot;prop2&quot;, &quot;put two&quot;);<BR>
props1.put(&quot;prop3&quot;, &quot;put three&quot;);<BR>
<BR>
int count = 0;<BR>
Graphics g = getGraphics();<BR>
for (Enumeration enum = props1.propertyNames() ; enum.hasMoreElements()
;) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;count++;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString((String)enum.nextElement(),
15, 15*count);<BR>
}</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >An enumeration of each of the property names. The methods of <TT><FONT FACE="Courier">Enumeration</FONT></TT> can be used to iterate through the property names.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">save</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Properties</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized void save(OutputStream
out, String header)  </FONT></TT>
</BLOCKQUOTE>
<P>
This method saves the <TT><FONT FACE="Courier">Properties</FONT></TT>
to an <TT><FONT FACE="Courier">OutputStream</FONT></TT>. Because
<TT><FONT FACE="Courier">FileOutputStream</FONT></TT> is a subclass
of <TT><FONT FACE="Courier">OutputStream</FONT></TT>, this method
can be used to write to a file. As an example of writing <TT><FONT FACE="Courier">Properties</FONT></TT>
to a file, consider the following code:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Properties props1 = new Properties();
<BR>
props1.put(&quot;prop1&quot;, &quot;put one&quot;);<BR>
props1.put(&quot;prop2&quot;, &quot;put two&quot;);<BR>
props1.put(&quot;prop3&quot;, &quot;put three&quot;);<BR>
props1.save(new FileOutputStream(&quot;test.ini&quot;), &quot;My
header&quot;);</FONT></TT>
</BLOCKQUOTE>
<P>
This example creates a <TT><FONT FACE="Courier">Properties</FONT></TT>
set with three values and then writes them to a file named <TT><FONT FACE="Courier">TEST.INI</FONT></TT>.
The file is written with the header text <TT><FONT FACE="Courier">My
header</FONT></TT>. In this case, <TT><FONT FACE="Courier">TEST.INI</FONT></TT>
appears as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">#My header<BR>
#Sun Jun 02 15:01:48  1996<BR>
prop3=put three<BR>
prop2=put two<BR>
prop1=put one</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">out</FONT> is the <TT><FONT FACE="Courier">OutputStream</FONT></TT> to which the <TT><FONT FACE="Courier">Properties</FONT></TT> are to be written. 
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">header</FONT> is a header that will be sent to the <TT><FONT FACE="Courier">OutputStream</FONT></TT> before the properties.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></TD><TD WIDTH=499><H2><A NAME="Random"><FONT SIZE=5 COLOR=#FF0000>Random</FONT></A></H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
The class java.util.Random is derived directly from Object, as
shown in Listing 34.9.
<HR>
<BLOCKQUOTE>
<B>Listing. 34.9. The </B><TT><B><FONT FACE="Courier">Random</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class Random extends Object {
<BR>
&nbsp;&nbsp;//&nbsp;public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Random();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Random(long seed);<BR>
&nbsp;&nbsp;//&nbsp;public instance methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public double nextDouble();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public float nextFloat();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public synchronized double nextGaussian();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public int nextInt();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public long nextLong();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public synchronized void setSeed(long
seed);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
This class represents a pseudo-random number generator. Two constructors
are provided: One takes a seed value as a parameter, and the other
takes no parameters and uses the current time as a seed. Values
can be retrieved from the generator using the following methods:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">nextDouble</FONT></TT>
<P>
<TT><FONT FACE="Courier">nextFloat</FONT></TT>
<P>
<TT><FONT FACE="Courier">nextGaussian</FONT></TT>
<P>
<TT><FONT FACE="Courier">nextInt</FONT></TT>
<P>

<TT><FONT FACE="Courier">nextLong</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">random</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Random</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public random()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a new random number generator that is
seeded based on the current time.<P>
<CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">random</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Random</FONT></TT></H4>
</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>

</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public random(long seed) </FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a new random number generator based on
the specified seed value. You should use this constructor rather
than <TT><FONT FACE="Courier">random()</FONT></TT> if a repeatable
sequence of pseudo-random numbers is necessary. Even if a repeatable
sequence of numbers is not necessary once a program is complete,
it can frequently be useful during the debugging stages. A program
that uses random numbers can be particularly difficult to debug.
Because of this, you may want to consider providing a configuration
setting that enables you to force a random number generator to
a known seed.
<P>
A program can reset the seed of an already created instance by
using the member method <TT><FONT FACE="Courier">setSeed</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">seed</FONT> is the seed value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">nextDouble</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Random</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public double nextDouble()</FONT></TT>
</BLOCKQUOTE>
<P>
This method retrieves the next number from the random number generator.
The number will be a pseudo-random, uniformly distributed double
between <TT><FONT FACE="Courier">0.0D</FONT></TT> and <TT><FONT FACE="Courier">1.0D</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >A randomly distributed double between <TT><FONT FACE="Courier">0.0D</FONT></TT> and <TT><FONT FACE="Courier">1.0D</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">nextFloat</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Random</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public float nextFloat()</FONT></TT>
</BLOCKQUOTE>
<P>
This method retrieves the next number from the random number generator.
The number will be a pseudo-random, uniformly distributed float
between <TT><FONT FACE="Courier">0.0F</FONT></TT> and <TT><FONT FACE="Courier">1.0F</FONT></TT>.
<P>
A randomly distributed float between <TT><FONT FACE="Courier">0.0F</FONT></TT>
and <TT><FONT FACE="Courier">1.0F</FONT></TT>.
<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">nextGaussian</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Random</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized double nextGaussian()</FONT></TT>
</BLOCKQUOTE>
<P>
This method retrieves the next value from the pseudo-random number
generator. The value will be returned as a Gaussian-distributed
double that has a mean of <TT><FONT FACE="Courier">0</FONT></TT>
and a standard deviation of <TT><FONT FACE="Courier">1</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >A Gaussian-distributed double.</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">nextInt</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Random</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int nextInt() </FONT></TT>
</BLOCKQUOTE>
<P>
This method retrieves the next number from the random number generator.
The number will be a pseudo-random <TT><FONT FACE="Courier">int</FONT></TT>
with a value that is uniformly distributed among all possible
<TT><FONT FACE="Courier">int</FONT></TT> values.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >A randomly distributed <TT><FONT FACE="Courier">int</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">nextLong</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Random</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public long nextLong()</FONT></TT>
</BLOCKQUOTE>
<P>
This method retrieves the next number from the random number generator.
The number will be a pseudo-random <TT><FONT FACE="Courier">long</FONT></TT>
with a value that is uniformly distributed among all possible
<TT><FONT FACE="Courier">long</FONT></TT> values.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >A randomly distributed <TT><FONT FACE="Courier">long</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">setSeed</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Random</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized void setSeed(long
seed)</FONT></TT>
</BLOCKQUOTE>
<P>
This method sets a seed value for the pseudo-random number generator.
The seed value is used to determine the values that are generated.
By setting a specific seed value, the random number generator
can be coerced into generating a specific sequence of values.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">seed</FONT> is the seed value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></TD><TD WIDTH=499><H2><A NAME="Stack"><FONT SIZE=5 COLOR=#FF0000>Stack</FONT></A></H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Vector</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
The class java.util.Stack extends the class java.util.Vector,
which is described later in this chapter. This class implements
a simple last-in, first-out stack. An item is stored on a stack
by &quot;pushing&quot; it onto the stack. An item may subsequently
be &quot;popped&quot; off the stack and used. The item popped
off a stack will always be the most recently pushed item. The
non-private interface of the class is shown in Listing 34.10.
<HR>
<BLOCKQUOTE>
<B>Listing 34.10. The </B><TT><B><FONT FACE="Courier">Stack</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class Stack extends Vector {<BR>
&nbsp;&nbsp;//&nbsp;public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Stack();<BR>
&nbsp;&nbsp;//&nbsp;public instance methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public empty();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public peek();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public pop();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public push(Object item);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public search(Object o);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Because <TT><FONT FACE="Courier">Stack</FONT></TT> extends the
<TT><FONT FACE="Courier">Vector</FONT></TT> class, no size is
associated with a <TT><FONT FACE="Courier">Stack</FONT></TT> instance.
The <TT><FONT FACE="Courier">Stack</FONT></TT> continues to grow
in size as new items are pushed onto it. In addition to methods
to push and pop items, a <TT><FONT FACE="Courier">peek</FONT></TT>
method is provided for looking at the next item, a <TT><FONT FACE="Courier">search</FONT></TT>
method is provided for scanning the <TT><FONT FACE="Courier">Stack</FONT></TT>
for a specific item, and an <TT><FONT FACE="Courier">empty</FONT></TT>
method is provided for determining whether more items are stored
in the <TT><FONT FACE="Courier">Stack</FONT></TT>.<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Stack</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Stack</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Stack()</FONT></TT>
</BLOCKQUOTE>
<P>
There is no explicit constructor provided. To create a new <TT><FONT FACE="Courier">Stack</FONT></TT>,
use the default constructor as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Stack myStack = new Stack();</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">empty</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Stack</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean empty()</FONT></TT>
</BLOCKQUOTE>
<P>
This method can be used to determine whether the <TT><FONT FACE="Courier">Stack</FONT></TT>
contains items.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">true</FONT> if the <TT><FONT FACE="Courier">Stack</FONT></TT> is empty; <TT><FONT FACE="Courier">false</FONT></TT>, otherwise.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">peek</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Stack</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Object peek()</FONT></TT>
</BLOCKQUOTE>
<P>
This method can be used to peek at the top item on the <TT><FONT FACE="Courier">Stack</FONT></TT>.
It is similar to <TT><FONT FACE="Courier">pop</FONT></TT> but
does not remove the item from the <TT><FONT FACE="Courier">Stack</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD >The item at the top of the <TT><FONT FACE="Courier">Stack</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EmptyStackException</FONT> is thrown if the <TT><FONT FACE="Courier">Stack</FONT></TT> is empty.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">pop</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Stack</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Object pop()</FONT></TT>
</BLOCKQUOTE>
<P>
This method retrieves the last item added to the <TT><FONT FACE="Courier">Stack</FONT></TT>.
To examine, but not remove, the top item in the <TT><FONT FACE="Courier">Stack</FONT></TT>
use the <TT><FONT FACE="Courier">peek</FONT></TT> method.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >The item at the top of the <TT><FONT FACE="Courier">Stack</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EmptyStackException</FONT> is thrown if the <TT><FONT FACE="Courier">Stack</FONT></TT> is empty.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">push</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Stack</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Object push(Object item)</FONT></TT>
</BLOCKQUOTE>
<P>
This method adds a new item to the <TT><FONT FACE="Courier">Stack</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">item</FONT> is the item to push onto the <TT><FONT FACE="Courier">Stack</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD >The item that was pushed onto the <TT><FONT FACE="Courier">Stack</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">search</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Stack</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int search(Object o)</FONT></TT>
</BLOCKQUOTE>
<P>
This method examines the <TT><FONT FACE="Courier">Stack</FONT></TT>
to see whether the specified object is in the <TT><FONT FACE="Courier">Stack</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">o</FONT> is the object of the search.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD >The distance from the top of the <TT><FONT FACE="Courier">Stack</FONT></TT>, or <TT><FONT FACE="Courier">-1</FONT></TT> if the item is not in the <TT><FONT FACE="Courier">Stack</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></TD><TD WIDTH=499><H2><A NAME="StringTokenizer"><FONT SIZE=5 COLOR=#FF0000>StringTokenizer</FONT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="http://docs.rinet.ru/JavDev/implem.gif"></TD><TD ><TT><FONT FACE="Courier">Enumeration</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
The class java.util.StringTokenizer extends Object and implements
the Enumeration interface. A StringTokenizer can be used to parse
a String into its constituent tokens. For example, each word in
a sentence could be considered a token. However, the StringTokenizer
class goes beyond the parsing of sentences. You can create a fully
customized tokenizer by specifying the set of token delimiters
when the StringTokenizer is created. For parsing text, the default
whitespace delimiters are usually sufficient. However, you could
use the set of arithmetic operators (+, *, /, and -) if parsing
an expression.
<P>
Because StringTokenizer implements the Enumeration interface,
it includes the hasMoreElements and nextElement methods. Additionally,
the methods hasMoreTokens and nextToken are provided. The hasMoreTokens
method is identical to hasMoreElements, except that you may prefer
the method name. The same is true of nextToken and nextElement.
The non-private interface of the class is shown in Listing 34.11.
<HR>
<BLOCKQUOTE>
<B>Listing 34.11. The </B><TT><B><FONT FACE="Courier">StringTokenizer</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class StringTokenizer extends
Object implements Enumeration {<BR>
&nbsp;&nbsp;//&nbsp;public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public StringTokenizer(String str,
String delim, boolean returnTokens);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public StringTokenizer(String str,
String delim);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public StringTokenizer(String str);
<BR>
&nbsp;&nbsp;//&nbsp;public instance methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public int countTokens();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean hasMoreElements();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean hasMoreTokens();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Object nextElement();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public String nextToken();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String nextToken(String delim);
<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">StringTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringTokenizer(String str, String
delim, boolean returnTokens)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a new instance based on the <TT><FONT FACE="Courier">String</FONT></TT>
to be tokenized, the set of delimiters, and a flag indicating
whether delimiters should be returned as tokens. The following
example shows how to create a <TT><FONT FACE="Courier">StringTokenizer</FONT></TT>
for parsing simple math expressions:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">String s = &quot;4*3+2/4&quot;;<BR>
StringTokenizer st = new StringTokenizer(s, &quot;*+/-&quot;,
true);<BR>
</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Graphics g = getGraphics();<BR>
int tokenCount = 0;<BR>
while (st.hasMoreTokens()) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;tokenCount++;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(st.nextToken(), 15, 15*tokenCount);
<BR>
}</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">str</FONT> is the <TT><FONT FACE="Courier">String</FONT></TT> to be tokenized.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">Delim</FONT> is a <TT><FONT FACE="Courier">String</FONT></TT> containing the delimiters to use when tokenizing the <TT><FONT FACE="Courier">String</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">ReturnTokens</FONT> is t<TT><FONT FACE="Courier">rue</FONT></TT> if the <TT><FONT FACE="Courier">StringTokenizer</FONT></TT> should return delimiters as tokens; <TT><FONT FACE="Courier">false</FONT></TT>, if not.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">StringTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringTokenizer(String str, String
delim)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a new instance based on the <TT><FONT FACE="Courier">String</FONT></TT>
to be tokenized and a set of delimiters. The following example
shows how to create a <TT><FONT FACE="Courier">StringTokenizer</FONT></TT>,
which can be used on a comma-delimited <TT><FONT FACE="Courier">String</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">String s = &quot;field1,field2,field3,and
field 4&quot;;<BR>
StringTokenizer st = new StringTokenizer(s,&quot;,&quot;,false);
<BR>
int tokenCount = 0;<BR>
<BR>
Graphics g = getGraphics();<BR>
while (st.hasMoreTokens()) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;tokenCount++;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(st.nextToken(), 15, 15*tokenCount);
<BR>
}</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">str</FONT> is the <TT><FONT FACE="Courier">String</FONT></TT> to be tokenized.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">delim</FONT> is a <TT><FONT FACE="Courier">String</FONT></TT> containing the delimiters to use when tokenizing the <TT><FONT FACE="Courier">String</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">StringTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringTokenizer(String str)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a new instance based on the <TT><FONT FACE="Courier">String</FONT></TT>
to be tokenized and the default set of delimiters. The default
delimiters are the space, tab, newline, and carriage return characters.
<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">countTokens</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int countTokens()</FONT></TT>
</BLOCKQUOTE>
<P>
This method returns the number of remaining tokens.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >The quantity of tokens remaining in the <TT><FONT FACE="Courier">String</FONT></TT> being tokenized.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">hasMoreElements</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean hasMoreElements()</FONT></TT>
</BLOCKQUOTE>
<P>
This method can be used to determine whether the <TT><FONT FACE="Courier">StringTokenizer</FONT></TT>
contains more elements (tokens). This method is identical to <TT><FONT FACE="Courier">hasMoreTokens</FONT></TT>
and is a member of <TT><FONT FACE="Courier">StringTokenizer</FONT></TT>
because <TT><FONT FACE="Courier">StringTokenizer</FONT></TT> implements
the <TT><FONT FACE="Courier">Enumeration</FONT></TT> interface.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">true</FONT> if there are more elements; <TT><FONT FACE="Courier">false</FONT></TT>, otherwise.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">hasMoreTokens</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean hasMoreTokens()</FONT></TT>
</BLOCKQUOTE>
<P>
This method can be used to determine whether the <TT><FONT FACE="Courier">StringTokenizer</FONT></TT>
contains more tokens. It is identical to <TT><FONT FACE="Courier">hasMoreElements</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">true</FONT> if there are more tokens; <TT><FONT FACE="Courier">false</FONT></TT>, otherwise.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">nextElement</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Object nextElement()</FONT></TT>
</BLOCKQUOTE>
<P>
This method overrides <TT><FONT FACE="Courier">nextElement</FONT></TT>
in the <TT><FONT FACE="Courier">Enumeration</FONT></TT> interface
and exists because <TT><FONT FACE="Courier">StringTokenizer</FONT></TT>
implements that interface. It is identical to <TT><FONT FACE="Courier">nextToken</FONT></TT>
and returns the next token in the enumeration.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >The next token in the enumeration.</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NoSuchElementException</FONT> is thrown if there are no more elements.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">nextToken</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String nextToken()</FONT></TT>
</BLOCKQUOTE>
<P>
This method returns the next token in the <TT><FONT FACE="Courier">String</FONT></TT>
that is being tokenized. Typically, it is used inside a loop that
processes each token. For example, the following code uses whitespace
delimiters to tokenize the string <TT><FONT FACE="Courier">&quot;This
has four tokens&quot;</FONT></TT> and displays each of the tokens:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">String s = &quot;This has four tokens&quot;;
<BR>
StringTokenizer st = new StringTokenizer(s);<BR>
<BR>
int tokenCount = 0;<BR>
Graphics g = getGraphics();<BR>
while (st.hasMoreTokens()) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;tokenCount++;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(st.nextToken(), 15, 15*tokenCount);
<BR>
}</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >The next token in the string being tokenized.</TD>
</TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NoSuchElementException</FONT> is thrown if there are no more tokens.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">nextToken</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String nextToken(String delim)</FONT></TT>
</BLOCKQUOTE>
<P>
This method changes the set of delimiter characters and then returns
the next token. The new delimiter set remains in effect after
this method completes.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">delim</FONT> is a <TT><FONT FACE="Courier">String</FONT></TT> containing the new set of delimiters.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD >The next token in the string being tokenized.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NoSuchElementException</FONT> is thrown if there are no more tokens.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></TD><TD WIDTH=499><H2><A NAME="Vector"><FONT SIZE=5 COLOR=#FF0000>Vector</FONT></A></H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/implem.gif"></FONT></TT>
</TD><TD ><TT><FONT FACE="Courier">Cloneable</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
The class java.util.Vector extends the class java.util.Object
and implements the Cloneable interface. A Vector is analogous
to a linked list in other languages or class libraries. A Vector
stores items of type Object, so it can be used to store instances
of any Java class. A single Vector may store different elements
that are instances of different classes. The non-private interface
of the class is shown in Listing 34.12.
<HR>
<BLOCKQUOTE>
<B>Listing 34.12. The </B><TT><B><FONT FACE="Courier">Vector</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class Vector extends Object {
<BR>
&nbsp;&nbsp;//&nbsp;public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Vector(int initialCapacity,
int capacityIncrement);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Vector(int initialCapacity);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Vector();<BR>
&nbsp;&nbsp;//&nbsp;public instance methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final synchronized void addElement(Object
obj);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final int capacity();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public synchronized Object clone();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final boolean contains(Object
elem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final synchronized void copyInto(Object
anArray[]);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final synchronized Object
elementAt(int index);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final synchronized Enumeration
elements();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final synchronized void ensureCapacity(int
minCapacity);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final synchronized Object
firstElement();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final int indexOf(Object
elem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final synchronized int indexOf(Object
elem, int index);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final synchronized void insertElementAt(Object
obj, int index);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final boolean isEmpty();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final synchronized Object
lastElement();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final int lastIndexOf(Object
elem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final synchronized int lastIndexOf(Object
elem, int index);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final synchronized void removeAllElements();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final synchronized boolean
removeElement(Object obj);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final synchronized void removeElementAt(int
index);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final synchronized void setElementAt(Object
obj, int index);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final synchronized void setSize(int
newSize);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final int size();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final synchronized String
toString();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final synchronized void trimToSize();
<BR>
&nbsp;&nbsp;// protected variables<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected int capacityIncrement;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected int elementCount;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected Object elementData[];
<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Vector(int initialCapacity, int
capacityIncrement)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a new instance of a <TT><FONT FACE="Courier">Vector</FONT></TT>
with space for <TT><FONT FACE="Courier">initialCapacity</FONT></TT>
elements initially. Memory for additional elements is allocated
in blocks that each hold <TT><FONT FACE="Courier">capacityIncrement</FONT></TT>
elements. For example, to allocate a <TT><FONT FACE="Courier">Vector</FONT></TT>
that will hold 100 elements initially and will allocate space
for ten more at a time, use the following code:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Vector myVector = new Vector(100, 10);</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">initialCapacity</FONT> is the number of elements for which to allocate space when the object is created.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">capacityIncrement</FONT> is the number of additional elements for which to allocate space whenever additional space is needed.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Vector(int initialCapacity)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a new instance of a <TT><FONT FACE="Courier">Vector</FONT></TT>
with space for <TT><FONT FACE="Courier">initialCapacity</FONT></TT>
elements. Whenever a new element that would exceed this capacity
is added, the size of the vector is doubled.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">initialCapacity</FONT> is the number of elements for which to allocate space when the object is created.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Vector()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a new instance of a <TT><FONT FACE="Courier">Vector</FONT></TT>.
Initially, the <TT><FONT FACE="Courier">Vector</FONT></TT> has
room for storing ten elements, but this increases automatically
to accommodate new elements. Whenever a new element is added that
exceeds this capacity, the size of the vector is doubled.<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=589>
<H4>Variables</H4>
</TD></TR>
</TABLE></CENTER>
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">protected int capacityIncrement</FONT></B></TT>
</BLOCKQUOTE>
<P>
This member stores the amount by which the <TT><FONT FACE="Courier">Vector</FONT></TT>
will be incremented each time it needs to grow. If <TT><FONT FACE="Courier">capacityIncrement</FONT></TT>
is <TT><FONT FACE="Courier">0</FONT></TT>, then the buffer does
not grow by a fixed amount but instead, doubles whenever it needs
to grow.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">protected int elementCount</FONT></B></TT>
</BLOCKQUOTE>
<P>
This member stores the number of elements in the <TT><FONT FACE="Courier">Vector</FONT></TT>.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">protected Object elementData[]</FONT></B></TT>
</BLOCKQUOTE>
<P>
This member is the array where the <TT><FONT FACE="Courier">Vector</FONT></TT>
elements are stored.<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">addElement</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final synchronized void addElement(Object
obj)</FONT></TT>
</BLOCKQUOTE>
<P>
This method is used to insert new elements into the <TT><FONT FACE="Courier">Vector</FONT></TT>.
A <TT><FONT FACE="Courier">Vector</FONT></TT> can store objects
of different types. For example, to create a <TT><FONT FACE="Courier">Vector</FONT></TT>
holding three <TT><FONT FACE="Courier">Date</FONT></TT>s and a
<TT><FONT FACE="Courier">Stack</FONT></TT> with three items pushed
onto it, use the following code:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Vector myVector = new Vector();<BR>
<BR>
myVector.addElement(new Date(95, 10, 14));<BR>
myVector.addElement(new Date(96, 10, 14));<BR>
myVector.addElement(new Date(97, 10, 14));<BR>
<BR>
Stack s = new Stack();<BR>
s.push(new Integer(0));<BR>
s.push(new Integer(10));<BR>
s.push(new Integer(20));<BR>
<BR>
myVector.addElement(s);<BR>
</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">obj</FONT> is the object to add to the vector. 
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">capacity</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final int capacity()</FONT></TT>
</BLOCKQUOTE>
<P>
The method returns the number of elements that will fit in the
<TT><FONT FACE="Courier">Vector</FONT></TT> before more space
is allocated. For example, the variable <TT><FONT FACE="Courier">qty</FONT></TT>
in the following code will equal 15:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Vector myVector = new Vector(10, 5);
<BR>
myVector.addElement(new Integer(1));<BR>
myVector.addElement(new Integer(2));<BR>
myVector.addElement(new Integer(3));<BR>
myVector.addElement(new Integer(4));<BR>
myVector.addElement(new Integer(5));<BR>
myVector.addElement(new Integer(6));<BR>
myVector.addElement(new Integer(7));<BR>
myVector.addElement(new Integer(8));<BR>
myVector.addElement(new Integer(9));<BR>
myVector.addElement(new Integer(10));<BR>
myVector.addElement(new Integer(11));<BR>
int qty = myVector.capacity();</FONT></TT>
</BLOCKQUOTE>
<P>
In this example, <TT><FONT FACE="Courier">qty</FONT></TT> equals
15 because of the 10 allocated by the constructor and the additional
5 allocated when the size of the <TT><FONT FACE="Courier">Vector</FONT></TT>
exceeded its initial capacity.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >The number of elements that will fit in the currently allocated portion of the <TT><FONT FACE="Courier">Vector</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">clone</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public synchronized Object clone()</FONT></TT>
</BLOCKQUOTE>
<P>
This method overrides <TT><FONT FACE="Courier">clone</FONT></TT>
in <TT><FONT FACE="Courier">Object</FONT></TT> and will clone
the <TT><FONT FACE="Courier">Vector</FONT></TT>. Only the <TT><FONT FACE="Courier">Vector</FONT></TT>
itself is cloned; the elements of the <TT><FONT FACE="Courier">Vector</FONT></TT>
are not cloned. The following example creates two duplicate <TT><FONT FACE="Courier">Vector</FONT></TT>s,
each containing the same three strings:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Vector vector1 = new Vector();<BR>
vector1.addElement(new String(&quot;first string&quot;));<BR>
vector1.addElement(new String(&quot;second string&quot;));<BR>
vector1.addElement(new String(&quot;third string&quot;));<BR>
<BR>
Vector vector2 = (Vector)vector1.clone();</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >A cloned copy of the <TT><FONT FACE="Courier">Vector</FONT></TT>. 
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Contains</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final boolean contains(Object
elem)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether an object is stored in a <TT><FONT FACE="Courier">Vector</FONT></TT>.
In the following example, <TT><FONT FACE="Courier">2</FONT></TT>
is contained in the vector but <TT><FONT FACE="Courier">12</FONT></TT>
is not:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Vector myVector = new Vector();<BR>
myVector.addElement(new Integer(1));<BR>
myVector.addElement(new Integer(2));<BR>
myVector.addElement(new Integer(3));<BR>
<BR>
Graphics g = getGraphics();<BR>
if (myVector.contains(new Integer(2)))<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;it contains 2&quot;,
15, 15);<BR>
if (myVector.contains(new Integer(12)))<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;it contains 12&quot;,
15, 30);</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">true</FONT> if the object is stored in the <TT><FONT FACE="Courier">Vector</FONT></TT>; <TT><FONT FACE="Courier">false</FONT></TT>, otherwise.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">copyInto</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final synchronized void copyInto(Object
anArray[])</FONT></TT>
</BLOCKQUOTE>
<P>
This method copies the elements of the <TT><FONT FACE="Courier">Vector</FONT></TT>
into an array. The following example copies the <TT><FONT FACE="Courier">Vector</FONT></TT>
into the array <TT><FONT FACE="Courier">strArray</FONT></TT> and
then displays the second string (<TT><FONT FACE="Courier">&quot;second
string&quot;</FONT></TT>):
<BLOCKQUOTE>
<TT><FONT FACE="Courier">String strArray[];<BR>
<BR>
Vector vector1 = new Vector();<BR>
vector1.addElement(new String(&quot;first string&quot;));<BR>
vector1.addElement(new String(&quot;second string&quot;));<BR>
vector1.addElement(new String(&quot;third string&quot;));<BR>
<BR>
strArray = new String[vector1.size()];<BR>
vector1.copyInto(strArray);<BR>
<BR>
Graphics g = getGraphics();<BR>
g.drawString(&quot;second array element is &quot; + strArray[1],
15, 15);</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">anArray</FONT> is the array into which the <TT><FONT FACE="Courier">Vector</FONT></TT> elements will be copied.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">elementAt</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final synchronized Object elementAt(int
index)</FONT></TT>
</BLOCKQUOTE>
<P>
This method retrieves the element located at the specified index
within the <TT><FONT FACE="Courier">Vector</FONT></TT>. The index
into a <TT><FONT FACE="Courier">Vector</FONT></TT> is zero-based,
so the following example will display <TT><FONT FACE="Courier">&quot;second
string&quot;</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Vector myVector = new Vector();<BR>
myVector.addElement(new String(&quot;first string&quot;));<BR>
myVector.addElement(new String(&quot;second string&quot;));<BR>
myVector.addElement(new String(&quot;third string&quot;));<BR>
<BR>
Graphics g = getGraphics();<BR>
</FONT></TT>g.drawString((String)myVector.elementAt(1), 15, 15);
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">index</FONT> is the zero-based index number of the element to retrieve. 
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD >The element at the specified zero-based index.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">ArrayIndexOutOfBoundsException</FONT> is thrown if an invalid index is specified.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">elements</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final synchronized Enumeration
elements()</FONT></TT>
</BLOCKQUOTE>
<P>
This method returns an <TT><FONT FACE="Courier">Enumeration</FONT></TT>
of the elements in the <TT><FONT FACE="Courier">Vector</FONT></TT>,
making it easy to iterate through the elements. As an example,
consider the following code, which creates a <TT><FONT FACE="Courier">Vector</FONT></TT>
and then steps through an enumeration of the <TT><FONT FACE="Courier">Vector</FONT></TT>
displaying each item:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Vector vector1 = new Vector(5);<BR>
vector1.addElement(new String(&quot;Mike&quot;));<BR>
vector1.addElement(new String(&quot;Laura&quot;));<BR>
vector1.addElement(new String(&quot;Savannah&quot;));<BR>
<BR>
int count = 0;<BR>
Graphics g = getGraphics();<BR>
for (Enumeration enum = vector1.elements() ; enum.hasMoreElements()
;) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;count++;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString((String)enum.nextElement(),
15, 15*count);<BR>
}</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >An <TT><FONT FACE="Courier">Enumeration</FONT></TT> consisting of all the elements in the <TT><FONT FACE="Courier">Vector</FONT></TT>. 
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">EnsureCapacity</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final synchronized void ensureCapacity(int
minCapacity)</FONT></TT>
</BLOCKQUOTE>
<P>
This method ensures that the <TT><FONT FACE="Courier">Vector</FONT></TT>
has at least the specified minimum capacity. If the current capacity
of the <TT><FONT FACE="Courier">Vector</FONT></TT> is less than
<TT><FONT FACE="Courier">minCapacity</FONT></TT>, the size of
the <TT><FONT FACE="Courier">Vector</FONT></TT> is increased to
hold at least <TT><FONT FACE="Courier">minCapacity</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">MinCapacity</FONT> is the desired minimum capacity of the <TT><FONT FACE="Courier">Vector</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">FirstElement</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final synchronized Object firstElement()</FONT></TT>
</BLOCKQUOTE>
<P>
This method retrieves the first element in the <TT><FONT FACE="Courier">Vector</FONT></TT>.
If the <TT><FONT FACE="Courier">Vector</FONT></TT> is empty, an
exception is thrown. It performs the same function as <TT><FONT FACE="Courier">elementAt(0)</FONT></TT>.
As an example of its use, the following displays <TT><FONT FACE="Courier">&quot;first
string&quot;</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Vector myVector = new Vector();<BR>
myVector.addElement(new String(&quot;first string&quot;));<BR>
myVector.addElement(new String(&quot;second string&quot;));<BR>
myVector.addElement(new String(&quot;third string&quot;));<BR>
<BR>
Graphics g = getGraphics();<BR>
g.drawString((String)myVector.firstElement(), 15, 15);</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >The element at the specified zero-based index.</TD>
</TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NoSuchElementException</FONT> is thrown if the <TT><FONT FACE="Courier">Vector</FONT></TT> is empty.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">indexOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final int indexOf(Object elem)</FONT></TT>
</BLOCKQUOTE>
<P>
This method searches the <TT><FONT FACE="Courier">Vector</FONT></TT>
and returns the zero-based index number of the first matching
object. The following example creates a <TT><FONT FACE="Courier">Vector</FONT></TT>
and then finds the element number (<TT><FONT FACE="Courier">1</FONT></TT>)
that matches the <TT><FONT FACE="Courier">Integer</FONT></TT>
<TT><FONT FACE="Courier">21</FONT></TT> element:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Vector vector1 = new Vector();<BR>
vector1.addElement(new Integer(11));<BR>
vector1.addElement(new Integer(21));<BR>
vector1.addElement(new Integer(31));<BR>
vector1.addElement(new Integer(11));<BR>
<BR>
int index = vector1.indexOf(new Integer(21));<BR>
<BR>
Graphics g = getGraphics();<BR>
g.drawString(&quot;Item found at index &quot; + index, 15, 15);</FONT></TT>
</BLOCKQUOTE>
<P>
Because this method always starts searching from the first element
in the <TT><FONT FACE="Courier">Vector</FONT></TT>, it can be
used only to find the first matching index number. To find subsequent
matching index numbers, use <TT><FONT FACE="Courier">indexOf(Object
elem, int index)</FONT></TT>. Similarly, the methods <TT><FONT FACE="Courier">lastIndexOf(Object
elem)</FONT></TT> and <TT><FONT FACE="Courier">indexOf(Object
elem, int index)</FONT></TT> can be used for backward traversal
of a <TT><FONT FACE="Courier">Vector</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">elem</FONT> is the element for which you want to find the index.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD >The element number of the first element that matches <TT><FONT FACE="Courier">elem</FONT></TT>; if no match is found, <TT><FONT FACE="Courier">-1</FONT></TT> is returned. 
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">indexOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final synchronized int indexOf(Object
elem, int index) </FONT></TT>
</BLOCKQUOTE>
<P>
This method finds the first element in the <TT><FONT FACE="Courier">Vector</FONT></TT>
that matches <TT><FONT FACE="Courier">elem</FONT></TT> starting
at the element given by <TT><FONT FACE="Courier">index</FONT></TT>.
It is very useful for traversing a <TT><FONT FACE="Courier">Vector</FONT></TT>
searching for all elements matching a specific object. The following
example demonstrates this by searching for the three integer elements
with a value of <TT><FONT FACE="Courier">11</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Vector vector1 = new Vector();<BR>
vector1.addElement(new Integer(11));<BR>
vector1.addElement(new Integer(21));<BR>
vector1.addElement(new Integer(31));<BR>
vector1.addElement(new Integer(11));<BR>
vector1.addElement(new Integer(11));<BR>
vector1.addElement(new Integer(21));<BR>
<BR>
int index = 0;<BR>
int itemsFound = 0;<BR>
Integer findMe = new Integer(11);<BR>
Graphics g = getGraphics();<BR>
while (index != -1) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;index = vector1.indexOf(findMe, index);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (index != -1) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itemsFound++;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;Matched
element &quot; + index, 15, itemsFound * 15);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index++;&nbsp;&nbsp;&nbsp;&nbsp;//
move to the next element and continue search<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
<TT><FONT FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;Matching items: &quot;
+ itemsFound, 15, itemsFound*15 + 15);</FONT></TT>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">elem</FONT> is the element for which you want to find the index.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">index</FONT> is the index number at which to start the search.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD >The element number of the first element that matches <TT><FONT FACE="Courier">elem</FONT></TT>; if no match is found, <TT><FONT FACE="Courier">-1</FONT></TT> is returned. 
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">insertElementAt</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final synchronized void insertElementAt(Object
obj, int index)</FONT></TT>
</BLOCKQUOTE>
<P>
This method, like <TT><FONT FACE="Courier">addElement</FONT></TT>,
is used to add a new element to a <TT><FONT FACE="Courier">Vector</FONT></TT>.
However, this method can be used to specify where in the <TT><FONT FACE="Courier">Vector</FONT></TT>
the new element should be added. All <TT><FONT FACE="Courier">Vector</FONT></TT>
elements with index numbers greater than or equal to <TT><FONT FACE="Courier">index</FONT></TT>
are moved to make room for the new element. The following example
builds a <TT><FONT FACE="Courier">Vector</FONT></TT> of <TT><FONT FACE="Courier">Integer</FONT></TT>
values and uses <TT><FONT FACE="Courier">insertElementAt</FONT></TT>
to fill in a gap:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Vector vector1 = new Vector();<BR>
vector1.addElement(new Integer(10));<BR>
vector1.addElement(new Integer(11));<BR>
vector1.addElement(new Integer(12));<BR>
vector1.addElement(new Integer(14));<BR>
vector1.addElement(new Integer(15));<BR>
<BR>
vector1.insertElementAt(new Integer(13), 3);<BR>
<BR>
Graphics g = getGraphics();<BR></FONT></TT>
<TT><FONT FACE="Courier">g.drawString(vector1.toString(), 15,
15);</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">obj</FONT> is the object to add to the vector. 
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">index</FONT> is the zero-based index at which the object is to be inserted. 
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">ArrayIndexOutOfBoundsException</FONT> is thrown if the specified index is invalid.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">isEmpty</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final boolean isEmpty()</FONT></TT>
</BLOCKQUOTE>
<P>
This method is used to determine whether the <TT><FONT FACE="Courier">Vector</FONT></TT>
contains any elements.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">true</FONT> if the <TT><FONT FACE="Courier">Vector</FONT></TT> has no elements; <TT><FONT FACE="Courier">false</FONT></TT>, otherwise.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">lastElement</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final synchronized Object lastElement()</FONT></TT>
</BLOCKQUOTE>
<P>
This method retrieves the last element in the <TT><FONT FACE="Courier">Vector</FONT></TT>.
If the <TT><FONT FACE="Courier">Vector</FONT></TT> is empty, an
exception is thrown. As an example of <TT><FONT FACE="Courier">lastElement</FONT></TT>,
the following will display <TT><FONT FACE="Courier">&quot;third
string&quot;</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Vector myVector = new Vector();<BR>
myVector.addElement(new String(&quot;first string&quot;));<BR>
myVector.addElement(new String(&quot;second string&quot;));<BR>
myVector.addElement(new String(&quot;third string&quot;));<BR>
<BR>
Graphics g = getGraphics();<BR>
g.drawString((String)myVector.lastElement(), 15, 15);</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >The element at the specified zero-based index.</TD>
</TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NoSuchElementException</FONT> is thrown if the <TT><FONT FACE="Courier">Vector</FONT></TT> is empty.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">lastIndexOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final int lastIndexOf(Object elem)</FONT></TT>
</BLOCKQUOTE>
<P>
This method searches the <TT><FONT FACE="Courier">Vector</FONT></TT>
and returns the zero-based index number of the last matching object.
The following example creates a vector and then finds the last
element number (<TT><FONT FACE="Courier">4</FONT></TT>) that matches
the <TT><FONT FACE="Courier">Integer</FONT></TT> <TT><FONT FACE="Courier">11</FONT></TT>
element:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Vector vector1 = new Vector();<BR>
vector1.addElement(new Integer(11));<BR>
vector1.addElement(new Integer(21));<BR>
vector1.addElement(new Integer(31));<BR>
vector1.addElement(new Integer(11));<BR>
vector1.addElement(new Integer(11));<BR>
vector1.addElement(new Integer(21));<BR>
<BR>
int index = vector1.lastIndexOf(new Integer(11));<BR>
<BR>
Graphics g = getGraphics();<BR>
g.drawString(&quot;Item found at index &quot; + index, 15, 15);</FONT></TT>
</BLOCKQUOTE>
<P>
Because this method always starts searching from the last element
in the <TT><FONT FACE="Courier">Vector</FONT></TT>, it can be
used only to find the last matching index number. For other methods
that can be used to find items, see <TT><FONT FACE="Courier">indexOf(Object
elem, int index)</FONT></TT>, <TT><FONT FACE="Courier">lastIndexOf(Object
elem)</FONT></TT>, and <TT><FONT FACE="Courier">indexOf(Object
elem, int index)</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">elem</FONT> is the element for which you want to find the index.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD >The element number of the last element that matches <TT><FONT FACE="Courier">elem</FONT></TT>; if no match is found, <TT><FONT FACE="Courier">-1</FONT></TT> is returned. 
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">lastIndexOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final synchronized int lastIndexOf(Object
elem, int index)</FONT></TT>
</BLOCKQUOTE>
<P>
This method finds the last element in the <TT><FONT FACE="Courier">Vector</FONT></TT>
that matches <TT><FONT FACE="Courier">elem</FONT></TT> starting
at the element given by <TT><FONT FACE="Courier">index</FONT></TT>.
It is very useful for traversing a <TT><FONT FACE="Courier">Vector</FONT></TT>
backward, searching for all elements matching a specific object.
The following example demonstrates this by searching from the
end of the <TT><FONT FACE="Courier">Vector</FONT></TT> to the
front: 
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Vector vector1 = new Vector();<BR>
vector1.addElement(new Integer(11));<BR>
vector1.addElement(new Integer(21));<BR>
vector1.addElement(new Integer(31));<BR>
vector1.addElement(new Integer(11));<BR>
vector1.addElement(new Integer(11));<BR>
vector1.addElement(new Integer(21));<BR>
<BR>
int index = vector1.size() - 1; // start on last element<BR>
int itemsFound = 0;<BR>
Integer findMe = new Integer(11);<BR>
Graphics g = getGraphics();<BR>
while (index != -1) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;index = vector1.lastIndexOf(findMe, index);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (index != -1) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itemsFound++;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(&quot;Matched
element &quot; + index, 15, itemsFound * 15);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}<BR>
g.drawString(&quot;Matching items: &quot; + itemsFound, 15, itemsFound*15
+ 15);</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">elem</FONT> is the element for which you want to find the index.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">index</FONT> is the index number at which to start the search. 
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD >The element number of the last element that matches <TT><FONT FACE="Courier">elem</FONT></TT>; if no match is found, <TT><FONT FACE="Courier">-1</FONT></TT> is returned. 
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">RemoveAllElements</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final synchronized void removeAllElements()</FONT></TT>
</BLOCKQUOTE>
<P>
This method can be used to remove all elements from the <TT><FONT FACE="Courier">Vector</FONT></TT>.
<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">RemoveElement</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final synchronized boolean removeElement(Object
obj)</FONT></TT>
</BLOCKQUOTE>
<P>
This method can be used to remove a specific element from the
<TT><FONT FACE="Courier">Vector</FONT></TT>. Only the first element
that matches <TT><FONT FACE="Courier">obj</FONT></TT> is removed.
In order to remove all matching elements, create a loop as shown
in the following code:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Vector vector1 = new Vector();<BR>
vector1.addElement(new String(&quot;Jay&quot;));<BR>
vector1.addElement(new String(&quot;Mark&quot;));<BR>
vector1.addElement(new String(&quot;Ted&quot;));<BR>
vector1.addElement(new String(&quot;Ron&quot;));<BR>
vector1.addElement(new String(&quot;Ted&quot;));<BR>
<BR>
int removed = 0;<BR>
while (vector1.removeElement(new String(&quot;Ted&quot;)))<BR>
&nbsp;&nbsp;&nbsp;&nbsp;removed++;</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">obj</FONT> is the object to remove. 
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">True</FONT> if the element was found and deleted; <TT><FONT FACE="Courier">false</FONT></TT>, otherwise. 
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">removeElementAt</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final synchronized void removeElementAt(int
index)</FONT></TT>
</BLOCKQUOTE>
<P>
This method removes the element at the specified zero-based index.
For example, the following code inserts duplicate elements with
a value of <TT><FONT FACE="Courier">13</FONT></TT>. To remove
the one stored in index <TT><FONT FACE="Courier">3</FONT></TT>,
you would use the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Vector vector1 = new Vector();<BR>
vector1.addElement(new Integer(10));<BR>
vector1.addElement(new Integer(11));<BR>
vector1.addElement(new Integer(12));<BR>
vector1.addElement(new Integer(13));<BR>
vector1.addElement(new Integer(13));<BR>
vector1.addElement(new Integer(14));<BR>
vector1.addElement(new Integer(15));<BR>
<BR>
vector1.removeElementAt(3);<BR>
<BR>
Graphics g = getGraphics();<BR>
g.drawString(vector1.toString(), 15, 15);<BR>
</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">index </FONT>is the index number of the element to remove from the vector. 
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">ArrayIndexOutOfBoundsException</FONT> is thrown if the specified index is invalid.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">setElementAt</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final synchronized void setElementAt(Object
obj, int index)</FONT></TT>
</BLOCKQUOTE>
<P>
This method replaces an element in the <TT><FONT FACE="Courier">Vector</FONT></TT>
with another element. The following example replaces the element
at index <TT><FONT FACE="Courier">3</FONT></TT> with the <TT><FONT FACE="Courier">Integer</FONT></TT>
<TT><FONT FACE="Courier">13</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Vector vector1 = new Vector();<BR>
vector1.addElement(new Integer(10));<BR>
vector1.addElement(new Integer(11));<BR>
vector1.addElement(new Integer(12));<BR>
vector1.addElement(new Integer(23));<BR>
vector1.addElement(new Integer(14));<BR>
vector1.addElement(new Integer(15));<BR>
<BR>
vector1.setElementAt(new Integer(13), 3);<BR>
</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">obj</FONT> is the object to be placed in the <TT><FONT FACE="Courier">Vector</FONT></TT>. 
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">index</FONT> is the index number of the element to be replaced. 
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">ArrayIndexOutOfBoundsException</FONT> is thrown if the specified index is invalid.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">setSize</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final synchronized void setSize(int
newSize)</FONT></TT>
</BLOCKQUOTE>
<P>
This method sets the size of the <TT><FONT FACE="Courier">Vector</FONT></TT>.
If the specified size makes the <TT><FONT FACE="Courier">Vector</FONT></TT>
too small to hold its current elements, elements from the end
of the <TT><FONT FACE="Courier">Vector</FONT></TT> are removed.
If the new size is larger than the current size, empty elements
are added at the end of the <TT><FONT FACE="Courier">Vector</FONT></TT>.
For example, the following code sets the <TT><FONT FACE="Courier">Vector</FONT></TT>
to a size of three and removes two elements from the end of the
<TT><FONT FACE="Courier">Vector</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Vector vector1 = new Vector(5);<BR>
vector1.addElement(new Integer(10));<BR>
vector1.addElement(new Integer(11));<BR>
vector1.addElement(new Integer(12));<BR>
vector1.addElement(new Integer(13));<BR>
vector1.addElement(new Integer(14));<BR>
<BR>
// vector = [10, 11, 12, 13, 14]<BR>
vector1.setSize(3);<BR>
// vector = [10, 11, 12]<BR>
</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">newSize</FONT> is the desired size of the <TT><FONT FACE="Courier">Vector</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">size</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final int size()</FONT></TT>
</BLOCKQUOTE>
<P>
The method returns the number of elements currently in the <TT><FONT FACE="Courier">Vector</FONT></TT>.
For example, the variable <TT><FONT FACE="Courier">qty</FONT></TT>
in the following code will equal <TT><FONT FACE="Courier">3</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Vector myVector = new Vector(10);<BR>
myVector.addElement(new Integer(1));<BR>
myVector.addElement(new Integer(2));<BR>
myVector.addElement(new Integer(3));<BR>
int qty = myVector.size();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
will equal 3</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >The number of elements in the <TT><FONT FACE="Courier">Vector</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ToString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final synchronized String toString()</FONT></TT>
</BLOCKQUOTE>
<P>
This method overrides the <TT><FONT FACE="Courier">toString</FONT></TT>
method in <TT><FONT FACE="Courier">Object</FONT></TT> and formats
the contents of the <TT><FONT FACE="Courier">Vector</FONT></TT>
as a string. For example, the following code will display <TT><FONT FACE="Courier">[10,
11, 12, 13]</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Vector vector1 = new Vector(5);<BR>
vector1.addElement(new Integer(10));<BR>
vector1.addElement(new Integer(11));<BR>
vector1.addElement(new Integer(12));<BR>
vector1.addElement(new Integer(13));<BR>
<BR>
Graphics g = getGraphics();<BR>
g.drawString(&quot;Contents are &quot;+ vector1.toString(), 15,
15);</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/returns.gif"></FONT></TT></TD>
<TD >A string representation of the <TT><FONT FACE="Courier">Vector</FONT></TT>. 
</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">TrimToSize</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Vector</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final synchronized void trimToSize()</FONT></TT>
</BLOCKQUOTE>
<P>
This method removes any excess capacity from the <TT><FONT FACE="Courier">Vector</FONT></TT>
by resizing it to hold only the quantity of elements it currently
holds. If new items are added, the size of the <TT><FONT FACE="Courier">Vector</FONT></TT>
will be increased. In the following example, <TT><FONT FACE="Courier">originalCapacity</FONT></TT>
will equal <TT><FONT FACE="Courier">10</FONT></TT>, and <TT><FONT FACE="Courier">newCapacity</FONT></TT>
will equal <TT><FONT FACE="Courier">4</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Vector vector1 = new Vector(10);<BR>
vector1.addElement(new Integer(10));<BR>
vector1.addElement(new Integer(11));<BR>
vector1.addElement(new Integer(12));<BR>
vector1.addElement(new Integer(13));<BR>
<BR>
int originalCapacity = vector1.capacity();<BR>
vector1.trimToSize();<BR>
int newCapacity = vector1.capacity();<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></TD><TD WIDTH=499><H2><A NAME="EmptyStackException"><FONT SIZE=5 COLOR=#FF0000>EmptyStackException</FONT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">RuntimeException</FONT></TD>
</TR>
</TABLE></CENTER>
<P>
<P>
The class java.util.EmptyStackException is thrown to indicate
that a Stack is empty. It can be thrown by the following methods:
<UL>
<LI><TT><FONT FACE="Courier">Stack.peek</FONT></TT>
<LI><TT><FONT FACE="Courier">Stack.pop</FONT></TT>
</UL>
<P>
The non-private interface of the class is shown in Listing 34.13.
<HR>
<BLOCKQUOTE>
<B>Listing 34.13. The exception </B><TT><B><FONT FACE="Courier">EmptyStackException</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class EmptyStackException extends
RuntimeException {<BR>
&nbsp;&nbsp;// public constructors</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public
EmptyStackException();<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">EmptyStackException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">EmptyStackException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public EmptyStackException();</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a new instance of the exception without
a detail message.
<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></TD><TD WIDTH=499>
<H2><A NAME="NoSuchElementException"><FONT SIZE=5 COLOR=#FF0000>NoSuchElementException</FONT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">RuntimeException</FONT></TD>
</TR>
</TABLE></CENTER>
<P>
<P>
The class java.util.NoSuchElementException is thrown to indicate
either of the following conditions:
<UL>
<LI><FONT COLOR=#000000>A collection object (such as </FONT><TT><FONT FACE="Courier">Enumeration</FONT></TT>,
<TT><FONT FACE="Courier">StringTokenizer</FONT></TT>, or <TT><FONT FACE="Courier">Vector</FONT></TT>)
has no more elements.
<LI><FONT COLOR=#000000>There are no more elements beyond the
current one when iterating through a set, as with </FONT><TT><FONT FACE="Courier">Enumeration.nextElement</FONT></TT>.
</UL>
<P>
This exception can be thrown by the following methods:
<UL>
<LI><TT><FONT FACE="Courier">Enumeration.nextElement</FONT></TT>
<LI><TT><FONT FACE="Courier">StringTokenizer.nextElement</FONT></TT>
<LI><TT><FONT FACE="Courier">StringTokenizer.nextToken</FONT></TT>
<LI><TT><FONT FACE="Courier">Vector.firstElement</FONT></TT>
<LI><TT><FONT FACE="Courier">Vector.lastElement</FONT></TT>
</UL>
<P>
The non-private interface of the class is shown in Listing 34.14.
<HR>
<BLOCKQUOTE>
<B>Listing 34.14. The exception </B><TT><B><FONT FACE="Courier">NoSuchElementException</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class NoSuchElementException()
extends RuntimeException {<BR>
&nbsp;&nbsp;// public constructors</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public
NoSuchElementException();<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">NoSuchElementException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">NoSuchElementException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public NoSuchElementException();</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a new instance of the exception without
a detail message.<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">NoSuchElementException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">NoSuchElementException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public NoSuchElementException(String
 s);</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a new instance of the exception using
the specified detail message. To retrieve the contents of the
detail after an exception occurs, use code similar to the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">try { <BR>
&nbsp;&nbsp;&nbsp;&nbsp;// exception producing code </FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">}<BR>
catch (NoSuchElementException e) { </FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Exception:
&quot; + e.getMessage()); <BR>
}&nbsp;</FONT></TT>
</BLOCKQUOTE>
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch33.htm"><IMG SRC="http://docs.rinet.ru/JavDev/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="http://docs.rinet.ru/JavDev/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/JavDev/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch35.htm"><IMG SRC="http://docs.rinet.ru/JavDev/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>
