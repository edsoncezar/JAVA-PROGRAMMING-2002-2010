<HTML>

<HEAD>
   <TITLE>PART III -- Package, Class, and Interface Reference</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">











<P><TABLE BORDERCOLOR=#000000 BORDER=10>
<TR VALIGN=CENTER><TD WIDTH=170><H1><FONT COLOR=#FF0000 SIZE=10><CENTER>PART<BR>III</CENTER></FONT></H1></TD></TR></TABLE>
<P>
<BR>
<BR>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Package, Class, and Interface Reference</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>

<UL>
<LI><A HREF="#UnderstandingtheReference" >Understanding the Reference</A>
<LI><A HREF="#BitSet" >BitSet</A>
<LI><A HREF="#TheBestPart" >The Best Part</A>
</UL>
<HR WIDTH=100%>

<FONT COLOR=#000000>This part of the book adds efficiency to your
day-to-day Java development by providing exhaustive, quick-reference
entries to help you easily identify individual Java components.
This section has strong visual cues and complete forward and backward
references. Research has shown that judicious use of these cues
provides much quicker comprehension than the written word. Though
it's impossible to provide the same interactive capability in
a printed document as in an online computer system, we've done
the next best thing. Each entry has icons that are used to highlight
the most important elements in the reference.</FONT>
<P>
At the top of the hierarchy presented in this reference section
are the packages. For convenience, classes and interfaces having
similar purposes are grouped into a package. This same grouping
has been used in the chapters. Each chapter corresponds to a package
and its components. For easy identification, icons have been designed
to represent each of these packages, as shown here:<BR>

<P><CENTER><TABLE WIDTH=100%>
<TR><TD WIDTH=37><IMG SRC="http://docs.rinet.ru/JavDev/lang.gif"></TD><TD WIDTH=553>Package <TT><FONT SIZE=4 FACE="Courier">java.lang</FONT></TT>
</TD></TR>
<TR><TD WIDTH=37><IMG SRC="http://docs.rinet.ru/JavDev/io.gif"></TD><TD WIDTH=553>Package <TT><FONT SIZE=4 FACE="Courier">java.io</FONT></TT>
</TD></TR>
<TR><TD WIDTH=37><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></TD><TD WIDTH=553>Package <TT><FONT SIZE=4 FACE="Courier">java.util</FONT></TT>
</TD></TR>
<TR><TD WIDTH=37><IMG SRC="http://docs.rinet.ru/JavDev/net.gif"></TD><TD WIDTH=553>Package <TT><FONT SIZE=4 FACE="Courier">java.net</FONT></TT>
</TD></TR>
<TR><TD WIDTH=37><IMG SRC="http://docs.rinet.ru/JavDev/awt.gif"></TD><TD WIDTH=553>Package <TT><FONT SIZE=4 FACE="Courier">java.awt</FONT></TT>
</TD></TR>
<TR><TD WIDTH=37><IMG SRC="http://docs.rinet.ru/JavDev/awtim.gif"></TD><TD WIDTH=553>Package <TT><FONT SIZE=4 FACE="Courier">java.awt.image</FONT></TT>
</TD></TR>
<TR><TD WIDTH=37><IMG SRC="http://docs.rinet.ru/JavDev/awtpe.gif"></TD><TD WIDTH=553>Package <TT><FONT SIZE=4 FACE="Courier">java.awt.peer</FONT></TT>
</TD></TR>
<TR><TD WIDTH=37><IMG SRC="http://docs.rinet.ru/JavDev/applet.gif"></TD><TD WIDTH=553>Package <TT><FONT SIZE=4 FACE="Courier">java.applet</FONT></TT>
</TD></TR>
<TR><TD WIDTH=37><IMG SRC="http://docs.rinet.ru/JavDev/tools.gif"></TD><TD WIDTH=553>Package <TT><FONT SIZE=4 FACE="Courier">sun.tools.debug</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
Next in the hierarchy are the components of the Java packages-the
classes and interfaces. The name of each of these is preceded
by an icon representative of its type. On the right side of the
title line is an icon showing the package of which it is a part.
Here are these icons:<BR>
<P><CENTER><TABLE width=100%>
<TR><TD WIDTH=37><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></TD><TD WIDTH=553>Class</TD></TR>
<TR><TD WIDTH=37><IMG SRC="http://docs.rinet.ru/JavDev/Error.gif"></TD><TD WIDTH=553>Error class</TD></TR>
<TR><TD WIDTH=37><IMG SRC="http://docs.rinet.ru/JavDev/Except.gif"></TD><TD WIDTH=553>Exception class</TD>
</TR>
<TR><TD WIDTH=37><IMG SRC="http://docs.rinet.ru/JavDev/Inter.gif"></TD><TD WIDTH=553>Interface</TD></TR>
</TABLE></CENTER>
<P>
<P>
Delving deeper into the hierarchy, we arrive at the methods and
constructors that are exposed by the classes and interfaces. The
title line for each of these is preceded by an icon distinguishing
its type. Then, on the far right of the title line, a backwards
reference shows the class or interface of which it's a part. The
following icons show these types of entries:<BR>

<P><CENTER><TABLE WIDTH=100%>
<TR><TD WIDTH=37><IMG SRC="http://docs.rinet.ru/JavDev/Const.gif"></TD><TD WIDTH=553><B>Constructor</B>. This is a special method that is called when an object is being instantiated.
</TD></TR>
<TR><TD WIDTH=37><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></TD><TD WIDTH=553><B>Method</B>. </TD>
</TR>
</TABLE></CENTER>
<P>
<P>
The lowest point on the hierarchy is a description and cross section
of the element being described. In this description each important
point is preceded by an icon showing its identity. Here are the
icons:<BR>

<P><CENTER><TABLE WIDTH=100%>
<TR><TD WIDTH=37><IMG SRC="http://docs.rinet.ru/JavDev/Extends.gif"></TD><TD WIDTH=553><B>Extends</B>. This icon is applicable to a class or interface entry and is used to show its derivation from a superclass.
</TD></TR>
<TR><TD WIDTH=37><IMG SRC="http://docs.rinet.ru/JavDev/Implem.gif"></TD><TD WIDTH=553><B>Implements</B>. Applicable to a class, this icon points out an interface that is implemented in this class.
</TD></TR>
<TR><TD WIDTH=37><IMG SRC="http://docs.rinet.ru/JavDev/Overr.gif"></TD><TD WIDTH=553><B>Overrides</B>. This icon indicates a method that overrides a method from the superclass.
</TD></TR>
<TR><TD WIDTH=37><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></TD><TD WIDTH=553><B>Parameter</B>. This icon indicates a parameter into the method.
</TD></TR>
<TR><TD WIDTH=37><IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></TD><TD WIDTH=553><B>Returns</B>. This icon indicates the return value from a method.
</TD></TR>
<TR><TD WIDTH=37><IMG SRC="http://docs.rinet.ru/JavDev/Throws.gif"></TD><TD WIDTH=553><B>Throws</B>. This icon indicates an exception that is thrown due to abnormal conditions.
</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="UnderstandingtheReference"><FONT SIZE=5 COLOR=#FF0000>Understanding the Reference</FONT></A></H2>
<P>
This section of the book deviates a little from the Sams Publishing
norm. In order for a reference tome to succeed, there are two
very important components. The first and certainly most important
is the content of the information. Since books are similar to
any other project in that different people bring different talents,
we think that we have succeeded in this component by providing
the expertise and viewpoint of more than one author.
<P>
The second vital component to a successful reference book is the
presentation of the material. No matter how good and useful the
information is, if it is not presented well, it becomes worthless.
In the case of this part of <I>Java Developer's Reference</I>,
we think we have succeeded because we have drawn on research findings
in multimedia presentation. Each element in this section has strong
visual separation from other elements as well as strong visual
cues in the presentation of its important facets. Each entry also
has backward reference to its &quot;parent&quot; information.
If you were to let this section fall open to any page, you could
easily tell where the information falls in relation to the other
information.
<P>
To help you understand how to read this section, here's an example
from package <TT><FONT FACE="Courier">java.util</FONT></TT>:<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>

<TR><TD><B>Note</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
The next line shows that the class <TT><FONT FACE="Courier">BitSet</FONT></TT> (left in the title line) is defined in package <TT><FONT FACE="Courier">java.util</FONT></TT> (right side of line).
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>

<TR><TD WIDTH=38><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></TD><TD WIDTH=499><H2><A NAME="BitSet"><FONT SIZE=5 COLOR=#FF0000>BitSet</FONT></A></H2></TD><TD WIDTH=38><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></TD></TR>

</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>

<TR><TD><B>Note</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
The next line shows that the class <TT><FONT FACE="Courier">BitSet</FONT></TT> is a subclass derived from superclass <TT><FONT FACE="Courier">Object</FONT></TT>.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE>
<TR><TD WIDTH=24><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Extends.gif"></FONT></TT></TD>
<TD WIDTH=552><TT><FONT FACE="Courier">Object</FONT></TT></TD>
</TR>
</TABLE>

<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
The next line shows that the class <TT><FONT FACE="Courier">BitSet</FONT></TT> implements the <TT><FONT FACE="Courier">Cloneable</FONT></TT> interface.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE>
<TR><TD WIDTH=24><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Implem.gif"></FONT></TT></TD>
<TD WIDTH=552><TT><FONT FACE="Courier">Cloneable</FONT></TT></TD>
</TR>
</TABLE>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
The next part just talks about the class <TT><FONT FACE="Courier">BitSet</FONT></TT>.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The class <TT><FONT FACE="Courier">java.util.BitSet</FONT></TT>
is derived directly from <TT><FONT FACE="Courier">Object</FONT></TT>
but also implements the <TT><FONT FACE="Courier">Cloneable</FONT></TT>
interface.
<P>
This class represents a dynamically sized set of bits. Two constructors
are provided-one that creates an empty set of unspecified size
and one that creates a set of a specified size. The <TT><FONT FACE="Courier">set</FONT></TT>
method can be used to set an individual bit and <TT><FONT FACE="Courier">clear</FONT></TT>
can be used to clear an individual bit. The first bit in a <TT><FONT FACE="Courier">BitSet</FONT></TT>
is the zero bit; therefore, <TT><FONT FACE="Courier">myBitset.set(0)</FONT></TT>
is a valid statement.
<P>
The logical functions <TT><FONT FACE="Courier">and</FONT></TT>,
<TT><FONT FACE="Courier">or</FONT></TT>, and <TT><FONT FACE="Courier">xor</FONT></TT>
are all supported and will combine the <TT><FONT FACE="Courier">BitSet</FONT></TT>
with another set. <TT><FONT FACE="Courier">BitSet</FONT></TT>s
can be compared for equality using <TT><FONT FACE="Courier">equals</FONT></TT>
and can be converted to <TT><FONT FACE="Courier">String</FONT></TT>s
using <TT><FONT FACE="Courier">toString</FONT></TT>. For the purpose
of converting a <TT><FONT FACE="Courier">BitSet</FONT></TT> to
a <TT><FONT FACE="Courier">String</FONT></TT>, a set bit is represented
by the value <TT><FONT FACE="Courier">1</FONT></TT> and a clear
bit is represented by <TT><FONT FACE="Courier">0</FONT></TT>.
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
The next line shows that <TT><FONT FACE="Courier">get</FONT></TT> is one of the methods (icon on left side of the line) for the class (icon on the right side) <TT><FONT FACE="Courier">BitSet</FONT></TT>, which is defined in package <TT><FONT 
FACE="Courier">java.util</FONT></TT>.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR><TD WIDTH=24><H4><IMG SRC="http://docs.rinet.ru/JavDev/Method.gif"></H4>
</TD><TD WIDTH=422><H4>get</H4>

</TD><TD WIDTH=38><H4><IMG SRC="http://docs.rinet.ru/JavDev/Class.gif"></H4>
</TD><TD WIDTH=53><H4>BitSet</H4>

</TD><TD WIDTH=38><H4><IMG SRC="http://docs.rinet.ru/JavDev/util.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean get(int bit)</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
Gets the value of a specified bit in the set.<BR>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
The next line shows that this method has a single parameter into it called <TT><FONT FACE="Courier">bit</FONT></TT>.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE>
<TR><TD WIDTH=24><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Parame.gif"></FONT></TT></TD>
<TD WIDTH=552><TT><FONT FACE="Courier">Bit</FONT></TT> is the bit to get.
</TD></TR>
</TABLE>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
The next line shows that this method returns either <TT><FONT FACE="Courier">true</FONT></TT> or <TT><FONT FACE="Courier">false</FONT></TT>:
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE>
<TR><TD WIDTH=24><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Returns.gif"></FONT></TT></TD>
<TD WIDTH=552><TT><FONT FACE="Courier">true</FONT></TT> if the bit is set; <TT><FONT FACE="Courier">false</FONT></TT> if it is clear.
</TD></TR>
</TABLE>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
The next line shows that this method throws an exception <TT><FONT FACE="Courier">Ooops</FONT></TT> when the bit is both set and clear (&lt;g&gt;).
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE>
<TR><TD WIDTH=24><TT><FONT FACE="Courier"><IMG SRC="http://docs.rinet.ru/JavDev/Throws.gif"></FONT></TT></TD>
<TD WIDTH=552><TT><FONT FACE="Courier">Ooops</FONT></TT> if the bit is set and clear.
</TD></TR>
</TABLE>
<P>
<H2><A NAME="TheBestPart"><FONT SIZE=5 COLOR=#FF0000>The Best Part</FONT></A></H2>
<P>
As an added value, the CD-ROM supplied with this book has the
same information as this reference section. The best part is that
this information is an HTML file that you can browse. Each of
the visual elements in this file is a link to the other information.
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch26.htm"><IMG SRC="http://docs.rinet.ru/JavDev/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="http://docs.rinet.ru/JavDev/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/JavDev/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch27.htm"><IMG 
SRC="http://docs.rinet.ru/JavDev/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>



