// FOURTH ITERATION!!!
//
// Filename RadioShow.java.
// Providing a demonstration of the initial Interactive Menu.
//
// Written for SDO 1999/2000 waypoint 4
// Fintan Culwin, v 0.1, jan 2000

package radioshow; 

import menus.BasicMenu;
import radioslot.*;
import playtime.*;
import ValidatedInput;
import java.util.Vector;

public class RadioShow extends Object  { 

   public static void main( String args[]) { 

   final char LIST_SLOTS   = 'A';
   final char ADD_END      = 'B';
   final char RESEQUENCE   = 'C';
   final char REMOVE       = 'D';
   final char LIST_BY_TYPE = 'E';
   final char EXIT_CHOICE  = 'F';

   final String menuOptions[] =  { 
                          "List Radio Slot Items",  
                          "Add Radio Slot at End",   
                          "Resequence the Slots",
                          "Remove a Slot",   
                          "List by Slot Type",                     
                          "Exit"
                           };

   final BasicMenu mainMenu = new BasicMenu( 
                                      "\n\tRadio Show Main Menu",
                                       menuOptions,
                                       "");
   char menuChoice = ' ';

   final String typeOptions[] =  {
                           "Music",
                           "Advert",
                           "News",
                           "Weather"};

   final BasicMenu typeMenu = new BasicMenu( 
                                      "",
                                       typeOptions,
                                       "");


   Vector theList = new Vector();
                             
frugTheList( theList);

      System.out.println( "\n\t\t Radio Show (Fourth Iteration)");
      
      while ( menuChoice != EXIT_CHOICE) { 
         menuChoice = mainMenu.offerMenuAsChar();
         switch ( menuChoice) { 

         case LIST_SLOTS : 
               listTheSlots( theList);
               break;

         case ADD_END : 
               addAtEnd( theList);
               break;

         case RESEQUENCE: 
               resequenceSlots( theList);
               break;

         case REMOVE: 
               removeSlot( theList);
               break;

         case LIST_BY_TYPE: 
               listBySlotType( theList, typeMenu);
               break;

         } // End switch.
      } // End while.

      System.out.println( "\n\nEnd of Radio Show (Fourth Iteration)");    
   } // End main
   

   private static void listTheSlots( Vector listToShow) { 
      if ( listToShow.isEmpty()) { 
         System.out.println( "\n\tThe list is empty!");
      } else { 
         for( int index = 0; index < listToShow.size(); index++) { 
            System.out.println( "Radio Slot No. " + (index +1));
            System.out.println( listToShow.elementAt( index) + "\n");
         } // End for.
      } // End showThePumps.
   } // End listTheSlots.


   private static void addAtEnd( Vector listToAddTo) {
   RadioSlot toBeAdded = null;
      toBeAdded = RadioSlotTerminalInput.readRadioSlot( "");
      listToAddTo.addElement( toBeAdded);
   } // End addAtEnd.


   private static void resequenceSlots( Vector listToResequence) {
   RadioSlot currentSlot      = null;
   PlayTime  currentStartTime = new PlayTime( 0);

      if ( listToResequence.isEmpty()) { 
         System.out.println( "\n\tThe list is empty!");
      } else { 
         for ( int index = 0; index < listToResequence.size(); index++) { 
            currentSlot = (RadioSlot) listToResequence.elementAt( index); 
            currentSlot.setSlotStartTime( currentStartTime); 
            currentStartTime = currentStartTime.addTime( 
                                       currentSlot.getSlotDuration());
         } // End for.
      } // End if.
   } // End resequenceSlots.


   private static void removeSlot( Vector listToRemoveFrom) {

   int slotToRemove = -1; 

      if ( listToRemoveFrom.isEmpty()) { 
         System.out.println( "\n\tThe list is empty!");
      } else { 
         slotToRemove = (int) ValidatedInput.readLong( 
                               "Please enter the slot number to delete",
                               1, listToRemoveFrom.size());
         listToRemoveFrom.removeElementAt( --slotToRemove);
      } // End if. 
   } // End removeSlot


   private static void listBySlotType( Vector listToShow,
                                       BasicMenu listMenu) {
   int       typeToShow  = -1; 
   RadioSlot currentSlot = null;

      typeToShow = listMenu.offerMenuAsInt();
      for ( int index = 0; index < listToShow.size(); index++) { 
         currentSlot = (RadioSlot) listToShow.elementAt( index); 
         if ( currentSlot.getSlotType() == typeToShow) { 
            System.out.println( index + "\n" + 
                                currentSlot + "\n");
         } // End if. 
      } // End for.
   } // End listBySlotType



} // End RadioShow.
