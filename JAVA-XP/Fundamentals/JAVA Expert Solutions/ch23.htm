<HTML>
<HEAD>
<TITLE>Chapter 23 -- Creating Web Services in Java</TITLE>

<META>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">












<H1><FONT SIZE=6 COLOR=#FF0000>Chapter&nbsp; 23</FONT></H1>
<H1><FONT SIZE=6 COLOR=#FF0000>Creating Web Services in Java</FONT>
</H1>
<P>
<I><B>by Mark Wutka</B></I>
<HR>
<P>
<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>
<UL>
<LI><A HREF="#UsingJavaObjectsInsteadofCGI">
Using Java Objects Instead of CGI</A>
<LI><A HREF="#TheServletAPI">
The Servlet API</A>
<LI><A HREF="#TheWebServerasaComputingServer">
The Web Server as a Computing Server</A>
<LI><A HREF="#AddingWebAccesstoYourJavaApplications">
Adding Web Access to Your Java Applications</A>
<LI><A HREF="#MigratingofftheWebServerintheFuture">
Migrating off the Web Server in the Future</A>
</UL>

<HR>
<P>
Several Web servers now allow you to create Java applets that
use Web services. This allows you use Java instead of some of
the popular languages like C++ and Perl.
<P>
If you are developing applications in Java, you can provide Web
access to these applications without complicated, native method
calls. As the Web servers improve, they will eventually be able
to get Java programs from their clients and run them, turning
the Web server into a computing server.
<P>
Although Web servers are very popular right now, the limitations
of the HTTP protocol will become more of a hindrance than a help
as the world of distributed objects takes shape. Your application
may get away with HTML forms this year but it may need to use
CORBA or RMI to communicate with a complex applet next year.
<P>
You can design your applications right now with the possibility
of CORBA or RMI in the future.
<H2><A NAME="UsingJavaObjectsInsteadofCGI"><FONT SIZE=5 COLOR=#FF0000>
Using Java Objects Instead of CGI</FONT></A></H2>
<P>
Java objects provide some distinct advantages over CGI-based Web
programs. They have less start-up cost, they continue to run,
and they can be used on any software platform that supports Java.
<P>
Whenever the server gets a request that is handled by a CGI program,
it must start the CGI program, which has some fixed amount of
overhead. After the CGI program finishes processing a request,
it terminates.
<P>
If a CGI program needs to maintain information across requests,
it must store the information in a database or a file, and read
it in again the next time it starts up. These start-up costs can
be very high if the CGI program has to establish a session with
a database every time.
<P>
FastCGI is an improvement over CGI. Instead of running a new program
every time, FastCGI programs are always running. When a new request
comes in, the Web server passes information to a FastCGI program
via an interface protocol. Although this is certainly faster than
regular CGI, the communication between the Web server and the
FastCGI program can still be rather slow.
<P>
The most desirable option so far is to run the request handler
as part of the Web server. Some commercial Web servers have hooks
that allow you to add request handlers directly to the server.
These hooks, or plug-ins, give you the speed you need.
<P>
Of course, when you want to run the same service on a different
hardware platform or a different operating system, you have to
create another version of the plug-in.
<P>
Figure 23.1 illustrates the relationship between the Web server
and the request handling code for CGI, FastCGI, and plug-in modules.
<P>
<A HREF="http://docs.rinet.ru/JSol/f23-1.gif"><B>Figure 23.1 : </B><I>Traditional Web servers have evolved from
simple, slow CGI to high-speed plug-ins</I>.</A>
<P>
Java is an ideal platform for using Web services. It runs on multiple
platforms, it can be dynamically loaded, and it has a good security
system.
<P>
In a Java Web server, the objects that handle requests are written
entirely in Java. These request-handling objects are called <TT><I>servlets</I></TT>.
<P>
Unlike traditional CGI request handlers, servlets do not go away
when they finish processing a request. This eliminates the heavy
start-up overhead.
<P>
Unlike FastCGI, servlets run within the Web server itself, eliminating
the communications overhead incurred when the server passes a
request to the handler. And unlike plug-ins, servlets can run
on any platform that supports Java.
<P>
Servlets can also take advantage of Java's security framework,
allowing different levels of security for different servlets.
For instance, you could define a security policy that allowed
a servlet to access only certain directories on your file system.
In addition, you could limit other Java features, like network
access.
<P>
This feature is ideal for Web-space providers who have been unable
to provide CGI access to their customers for fear of a malicious
CGI program destroying the system. Now they can provide a Java
Web server and allow their customers to write servlets that can
only access the customer's files, and not those belonging to other
customers.
<P>
If you get the same old story from your Web provider about why
they can't give you CGI, suggest to them that they set up a Java
Web server. If they won't, find a provider who will.
<H2><A NAME="TheServletAPI"><FONT SIZE=5 COLOR=#FF0000>
The Servlet API</FONT></A></H2>
<P>
Sun has defined an API for writing servlets and has used the API
in the Jeeves server. The core of the API is, of course, the <TT>Servlet</TT>
class.
<P>
The two most important methods in the <TT>Servlet</TT>
class are <TT>init</TT> and <TT>service</TT>.
The <TT>init</TT> method is called
when the servlet is first created and is responsible for initializing
the servlet. It is like the <TT>init</TT>
method in the <TT>Applet</TT> class.
<P>
The <TT>service</TT> method takes
two parameters, an object using the <TT>ServletRequest</TT>
interface and an object using the <TT>ServletResponse
</TT>interface. The <TT>service</TT>
is responsible for handling an HTTP request, which is in the <TT>ServletRequest</TT>
object, and returning a response, which is transmitted in the
<TT>ServletResponse</TT> object.
<P>
The API also includes <TT>ServletStub</TT>
and <TT>ServletContext</TT> classes.
The <TT>ServletStub</TT>, like the
<TT>AppletStub</TT>, is not normally
used for <TT>Servlet</TT> programming.
<P>
The <TT>ServletContext</TT> class
has information about the server in which the servlet is running,
as well as information about other servlets on the server. The
Servlet API is discussed in greater detail in <A HREF="ch24.htm" >Chapter 24</A>, &quot;Writing
Web Services in Jeeves.&quot;
<H2><A NAME="TheWebServerasaComputingServer"><FONT SIZE=5 COLOR=#FF0000>
The Web Server as a Computing Server</FONT></A></H2>
<P>
Java Web servers open up new possibilities for Web-based services.
Since Java can dynamically load new code and execute it, what's
to stop you from downloading servlets over the network the same
way a browser downloads an applet?
<P>
You could set up a high-performance computing Web service, running
a Java Web server on a mainframe-class machine. Customers who
had to perform computations that might take hours on their own
systems could send servlets to your computing server. Your mainframe
could crunch their numbers in a shorter time and return the results.
<P>
If you have some large, numerical non-Java application, for instance,
you could provide access to the application via native methods.
A customer would send you a servlet that makes various calls to
your numerical application. This is discussed in more detail in
<A HREF="ch33.htm" >Chapter 33</A>, &quot;Web-Enabling Legacy Systems.&quot;
<H2><A NAME="AddingWebAccesstoYourJavaApplications"><FONT SIZE=5 COLOR=#FF0000>
Adding Web Access to Your Java Applications</FONT></A></H2>
<P>
As you write new Java applications, you may want to provide access
to these applications via the Web. If you design your application
well, adding new interfaces to the application should not be a
problem.
<P>
As this book has stressed from the beginning, you should strive
to separate your application logic from your user interface. Once
the interface to the application is well-defined, you can add
new ways to access your application without changing the application.
<P>
In the case of a Web server, the servlet acts as a proxy for the
user interface. In other words, the servlet acts like a user as
far as the application is concerned and then passes information
back to the Web browser, which implements the real user interface.
<P>
Figure 23.2 illustrates the relationship between the servlet,
the application, and the user, as compared to a typical user interface.
<P>
<A HREF="http://docs.rinet.ru/JSol/f23-2.gif"><B>Figure 23.2 : </B><I>A servlet can act as a user interface proxy
to an application</I>.</A>
<P>
The interface between the servlet and the application objects
can take a number of different forms. The application could run
in the same Java environment as the Web server. The servlets would
then make normal Java method calls to the application. Figure
23.3 illustrates this relationship.
<P>
<A HREF="http://docs.rinet.ru/JSol/f23-3.gif"><B>Figure 23.3 : </B><I>A Java application can run in the same
Java environment as the Java Web server</I>.</A>
<P>
The application and the Web server could also be running on the
same physical host but running in separate Java environments.
The servlet would need to use RMI, CORBA, or some other form of
interprocess communication to access the application, as illustrated
in Figure 23.4.
<P>
<A HREF="http://docs.rinet.ru/JSol/f23-4.gif"><B>Figure 23.4 : </B><I>A servlet can use RMI or CORBA to communicate
with the real application</I>.</A>
<P>
Once a servlet uses RMI or CORBA to communicate with the application,
there is no need to keep the application and the Web server on
the same physical host. Figure 23.5 illustrates a possible configuration.
<P>
<A HREF="http://docs.rinet.ru/JSol/f23-5.gif"><B>Figure 23.5 : </B><I>The server can access the application across
the network</I>.</A><BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Two of the factors for deciding whether to put the servlet and the application on two different hosts are the amount of computation performed by the application and the amount of interaction between the application and the servlet.</BLOCKQUOTE>
<BLOCKQUOTE>
If the application needs a lot of CPU time, it would be better off on a separate host. If the application and the servlet exchange large volumes of data or pass many messages between them, they would be better off on the same host.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
Suppose you want to add Web access to the banking application
from <A HREF="ch18.htm" >Chapter 18</A>, &quot;Using CORBA IDL with Java.&quot; You could
create a servlet to handle each of the four operations in the
banking interface. Each servlet would have a pointer to a banking
object, possibly even the same object, if you want to use the
banking object as a singleton object.
<P>
A banking servlet could create an instance of the banking implementation
in its <TT>init</TT> method:
<BLOCKQUOTE>
<PRE>
public void init()
{
     bank = new banking.BankingImpl();
}
</PRE>
</BLOCKQUOTE>
<P>
Then the <TT>service</TT> method,
which handles incoming requests, would translate the incoming
HTTP request to a method call to the <TT>BankingImpl</TT>
object as shown in Listing 23.1.
<HR>
<BLOCKQUOTE>
<B>Listing 23.1&nbsp;&nbsp;Method Call to BankingImpl Object<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
public void service(ServletRequest req, ServletResponse resp)
{
// Get the table of request paramaters
     Hashtable params = req.getQueryParameters();

// Get the account number, account password, and account type
     String account = params.get(&quot;account&quot;);
     String password = params.get(&quot;password&quot;);
     String accountTypeName = params.get(&quot;accountType&quot;);

// Convert the account type name into one of the allowable
// account types, or return an error if it's an illegal type
     int accountType;
     if (accountTypeName.equals(&quot;checking&quot;)) {
          accountType = banking.Account.CHECKING;
     } else if (accountTypeName.equals(&quot;savings&quot;)) {
          accountType = banking.Account.SAVINGS;
     } else {
          res.writeErrorResponse(SC_BAD_REQUEST,
&quot;Invalid account type&quot;);
          return;
     }

// Get the balance using the BankingImpl object
     try {
          int balance = bank.getBalance(
               new Account(account, password, accountType);

// Store the resulting information in the response/
          res.setStatus(SC_OK);
          res.setContentType(&quot;text/html&quot;);
          res.writeHeaders();

// Get a print stream for writing the HTML for the response
          PrintStream out = new PrintStream(
res.getOutputStream());

// Generate an HTML response containing the balance
          out.println(&quot;&lt;HTML&gt;&lt;HEAD&gt;&quot;);
          out.println(&quot;&lt;TITLE&gt;Bank Account Balance&lt;/TITLE&gt;&quot;);
          out.println(&quot;&lt;/HEAD&gt;&lt;BODY&gt;&quot;);
          out.println(&quot;&lt;H1&gt;Current Account Balance:&lt;/H1&gt;&quot;);

// The BankingImpl object stores balances in cents, we have
// to convert it to dollars manually.
          out.println(&quot;&lt;P&gt;$&quot;+balance/100+&quot;.&quot;+balance%100);
          out.println(&quot;&lt;/BODY&gt;&lt;/HTML&gt;&quot;);
          out.flush();
     } catch (banking.InvalidAccountException) {
// If there was an invalid account exception, pass this on
// to the client
          res.writeErrorResponse(SC_UNAUTHORIZED,
               &quot;Invalid account&quot;);
          return;
     } catch (Exception e) {

// If there was any other exception, something's wrong internally
          res.writeErrorResponse(SC_INTERNAL_SERVER_ERROR,
               &quot;Got error performing request&quot;);
          return;
     }
}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
As you can see, the servlet makes use of the existing <TT>BankingImpl</TT>
object without actually doing any of the banking operations itself.
In this configuration, the <TT>BankingImpl</TT>
object must be running in the same Java environment as the Web
server. You could also replace the <TT>BankingImpl</TT>
object with a CORBA or RMI stub, and make <TT>remote</TT>
method invocations to a banking object running somewhere else.
<H2><A NAME="MigratingofftheWebServerintheFuture"><FONT SIZE=5 COLOR=#FF0000>
Migrating off the Web Server in the Future</FONT></A></H2>
<P>
You may be completely focused on writing Web-server-based solutions
right now, but that doesn't mean that you will still be doing
that a year from now. Web browsers are becoming much more intelligent
and some of them are starting to use more protocols than just
HTTP.
<P>
Netscape, for instance, has announced that a future version of
their browser will include a CORBA client. You don't want to write
all these applications right now, only to turn around next year
and have to rewrite them again from scratch.
<P>
The secret to migrating your Web applications is quite simple:
<TT><I>Don't write Web applications</I></TT>.
Instead, write applications and then provide Web access to them.
<P>
That may sound like a contradiction but it is just a reiteration
of the separation of user interface from application idea. When
you write Web server applications, you tend to think of them only
in terms of the Web server.
<P>
You may take certain shortcuts that you will regret later or you
may intermingle the handling of Web documents with the real function
of your application. Don't do that.
<P>
First, think of the task your application is really trying to
do and write the application without any mention of servlets or
HTTP. Finally, when you have a working application, write the
servlet or servlets that link the application to the Web.
<P>
As always, you will find that it takes more effort to develop
a Web service by splitting it into two parts. You will save time
in the long run, however, because you can add new ways to access
your application without changing the application at all.
<HR>

<CENTER><P><A HREF="ch22.htm"><IMG SRC="http://docs.rinet.ru/JSol/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="http://docs.rinet.ru/JSol/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/JSol/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch24.htm"><IMG SRC="http://docs.rinet.ru/JSol/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
