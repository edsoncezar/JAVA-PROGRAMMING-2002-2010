<HTML>
<HEAD>
<TITLE>Chapter 38 -- Creating On-Demand Multimedia Services</TITLE>

<META>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">












<H1><FONT SIZE=6 COLOR=#FF0000>Chapter 38</FONT></H1>
<H1><FONT SIZE=6 COLOR=#FF0000>Creating On-Demand Multimedia Services</FONT>
</H1>
<P>
<I><B>by George Menyhert</B></I>
<HR>
<P>
<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>
<UL>
<LI><A HREF="#JavasSuitabilityforOnDemandApplications">
Java's Suitability for On-Demand Applications</A>
<LI><A HREF="#UsingtheOnDemandAudioApplet">
Using the On-Demand Audio Applet</A>
<UL>
<LI><A HREF="#LoggingIn">
Logging In</A>
<LI><A HREF="#PlayingAudioClips">
Playing Audio Clips</A>
</UL>
<LI><A HREF="#AddingSoundtoApplets">
Adding Sound to Applets</A>
<LI><A HREF="#OnDemandMusicAppletCodeReview">
On-Demand Music Applet Code Review</A>
<UL>
<LI><A HREF="#AppletArchitecture">
Applet Architecture</A>
<LI><A HREF="#InitializationandRegistration">
Initialization and Registration</A>
<LI><A HREF="#SongSelection">
Song Selection</A>
<LI><A HREF="#PlayingtheSongs">
Playing the Songs</A>
</UL>
<LI><A HREF="#JavaShortcomings">
Java Shortcomings</A>
<LI><A HREF="#NewFeatures">
New Features</A>
</UL>

<HR>
<P>
The World Wide Web has served as an agent of change for many industries.
Even old, stable technologies like telephone service are swaying
to the rhythm of the Net. Very shortly, the content we now call
multimedia will be available as an on-demand stream, first to
your desktop, then to your set top, and finally to your palmtop.
The promise is that you will receive the content of the exact
type you want, as much as you want, anywhere you want.
<P>
Java will probably play an important role in this media explosion.
If ever there was a right programming language in the right place
at the right time, this surely looks like it. Pay-Per-View and
Content On-Demand are terms that you are probably already familiar
with. Java holds the promise of creating high quality products
for these new application areas.
<H2><A NAME="JavasSuitabilityforOnDemandApplications"><FONT SIZE=5 COLOR=#FF0000>
Java's Suitability for On-Demand Applications</FONT></A></H2>
<P>
Why is Java particularly suited for on-demand access of multimedia
over the network? Take a look at the process of doing an on-demand
multimedia application using C++.
<P>
The following shows your list of concerns if developing a multimedia
application using C++:
<UL>
<LI>Develop a client and server that can communicate over the
Internet.
</UL>
<P>
<B>On the server Side:</B>
<UL>
<LI>Server listens for a connection on a given port.
<LI>Once a connection is made, handshaking occurs.
<LI>Client makes its request.
<LI>Server interprets the request and processes it.
<LI>Server needs to understand the digital media file format.
(If the format is unknown, you have problems.)
<LI>Server reads file and sends it over the network.
<LI>Communications are monitored for loss of connectivity, interrupts,
and socket transfer rates.
<LI>When the transaction completes, the communication line is
terminated.
</UL>
<P>
<B>On the client Side:</B>
<UL>
<LI>Client initializes itself and presents a UI to the user and
waits for input.
<LI>User selects clip; client contacts the server and establishes
a connection.
<LI>Client requests the clip and waits for data.
<LI>Data is read from the socket and is sent to the output device.
<LI>Data stream is complete; communication socket is closed and
the output device is closed.
</UL>
<P>
The server application can be fairly platform-independent; however,
it has platform-specific modules controlling the file system and
other operating system-specific aspects. It also needs basic knowledge
of the underlying media if it is to transfer the data efficiently
(can the headers be left out, what data packing is most appropriate?).
<P>
The client software is very platform-specific. At best, the user
interface uses a standard library that can be linked on different
platforms. More likely, sections of it need to be rewritten for
the various platforms. The client also needs to control the output
device and understand the translation, if any, between the file
data format and the required hardware data format. The client
needs intimate knowledge of network communications. Finally, the
client needs to be distributed to customers; this is a major marketing
problem. The customer wants the audio or video &quot;on-demand&quot;
(read <I>now</I>). Can you imagine an on-demand system where users
need to have the foresight to order an application a couple of
days before they have the desire to watch and listen?
<P>
There are some libraries available for C++ that help alleviate
some of the problems-a commercial implementation of CORBA for
the communications issues, various UI libraries for the user interface-but
none deal comprehensively with the problem areas of network multimedia.
<P>
Java addresses many of these problems. The underlying steps remain,
but the Java execution environment removes many of the implementation
details from the developer. For example, instead of developing
a server from scratch (or even modifying and reusing an existing
server), the product can be developed as an applet. The communication
issues are completely removed from the process. There is no need
to develop a server at all. Any off-the-shelf Web server works.
<P>
Any application (or applet) developed with Java is platform-independent.
Therefore, creating graphical elements, displaying images, playing
audio, and processing events are not only done with the same source
code, but the same compiled binary code.
<P>
The Java built-in media API removes many file format- and output
hardware-dependent issues. For example, audio clips can be streamed
over the network and played on any system without regard to the
various output devices or streamed data formats.
<P>
Because the majority of the underlying functionality is supplied
by the Web server/browser system, the distributed Java executable
is very small. The example developed for this chapter is approximately
9K. Due to its extremely compact size, it can be downloaded over
the Web in less time than most images. This solves the problem
of distribution and provides instant access.
<P>
To review, Java is suitable for multimedia because:
<UL>
<LI>It is portable.
<LI>It is compact.
<LI>It can handle streaming data.
<LI>It is distributed in a client/server topology.
<LI>It has built-in multimedia classes.
</UL>
<H2><A NAME="UsingtheOnDemandAudioApplet"><FONT SIZE=5 COLOR=#FF0000>
Using the On-Demand Audio Applet</FONT></A></H2>
<P>
This applet is not intended to be a commercial On-Demand audio
server. It is a simple example of how audio can be added to an
applet.
<H3><A NAME="LoggingIn">
Logging In</A></H3>
<P>
To login to the On-Demand Audio Applet:
<OL>
<LI>Start your favorite Java-capable browser.
<LI>Open the file OnDemand.html with your browser.<BR>
The text string Applet OnDemand running is displayed on your browser's
status line when the applet is fully loaded. The login dialog
appears as in Figure 38.1.
<LI>Click in the Username text field.
<LI>Enter the text string <TT><B>anonymous</B></TT>
in lowercase letters.
<LI>Click the Login button.
</OL>
<P>
<A HREF="http://docs.rinet.ru/JSol/f38-1.gif"><B>Figure 38.1 : </B><I>Enter <B>anonymous</B> in the Username
text field</I>.</A>
<H3><A NAME="PlayingAudioClips">
Playing Audio Clips</A></H3>
<P>
To play audio clips:
<OL>
<LI>Double-click the name of the Artist.<BR>
A list of the artist's songs appears in the Songs list.
<LI>Double-click the name of the song that you want to play.<BR>
Wait for a few moments. It takes a while for the audio clips to
load. Copyright and other facts appear in the Information list
when the song is loaded (see Figure 38.2). 
<LI>Use the audio controls Play, Loop, and Stop to control the
audio stream.
</OL>
<P>
<A HREF="http://docs.rinet.ru/JSol/f38-2.gif"><B>Figure 38.2 : </B><I>The OnDemand applet is ready to play an
audio stream</I>.</A>
<H2><A NAME="AddingSoundtoApplets"><FONT SIZE=5 COLOR=#FF0000>
Adding Sound to Applets</FONT></A></H2>
<P>
Adding sound to a Java applet is <I>extremely</I> simple. There
are only two steps: Identify the audio source, and play the clip.
In general, the audio functionality is only available via the
applet class. Although it is possible to run an applet as an application,
there are many limitations to applets executed in this mode (including
media streaming). However, there are some available work-arounds.
See <A HREF="ch13.htm" >Chapter 13</A>, &quot;Running Applets as Applications,&quot; for
details about the techniques and limitations of running applets
as applications and ways of overcoming these limitations.
<P>
To specify the source of the sound clip, use the applet method
<TT>getAudioClip</TT>. It requires
one or two arguments-either a base URL and a relative file path
packed as a String, or a complete URL. For example, to attach
an <TT>AudioClip</TT> object to an
audio file stored in a folder in your applet's HTML location,
try the following:
<BLOCKQUOTE>
<PRE>
AudioClip rockinTune = this.getAudioClip(getDocumentBase(), 
&quot;rocking.au&quot;);<BR>

</PRE>
</BLOCKQUOTE>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Getting the audio clip this way is usually very slow the first time it is done in an applet. This is due to dynamic class loading.</BLOCKQUOTE>
<BLOCKQUOTE>
When you are running these applets over the Internet, <FONT FACE="I Helvetica Oblique">each</FONT> instantiation of an <TT>AudioClip</TT> is extremely slow. This is because the <TT>AudioClip</TT> object does not truly stream the audio data. It downloads 
and buffers the data at the time of instantiation.
</BLOCKQUOTE>
<BLOCKQUOTE>
You need to give users some feedback so they don't cancel the operation. Try a call to <TT>showStatus</TT> that states something like, &quot;Initializing audio. Please wait&#133;&quot;. Changing the cursor to a wait state would be ideal, but is not 
possible in applets.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
<TT>getAudioClip</TT> returns a reference
to an <TT>AudioClip</TT> object. You
can then use this object to play the audio clip when you are ready.
To do this, simply call the <TT>AudioClip.play</TT>
method
<BLOCKQUOTE>
<PRE>
rockinTune.play();</FONT>
</PRE>
</BLOCKQUOTE>
<P>
You can also stop the playback using <TT>AudioClip.stop</TT>
method and play back continuously using the <TT>AudioClip.loop</TT>
method.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Caution</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
The supported list of audio file formats is limited. Currently, you can use only 8-bit, 8000Hz, single-channel (mono) Next/Sun AU files with G711 <FONT FACE="Symbol">m</FONT>-law compression. Note that files with a higher sample rate may produce hissing on 

playback.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H2><A NAME="OnDemandMusicAppletCodeReview"><FONT SIZE=5 COLOR=#FF0000>
On-Demand Music Applet Code Review</FONT></A></H2>
<P>
Playing audio in an applet over the network involves only two
method calls. It is simple to expand on this to create a fully
functional online, on-demand music applet (see the previous section,
&quot;Using the On-Demand Audio Applet&quot;). There are four
basic elements to this on-demand music applet:
<UL>
<LI>Registration screen where a user signs in (later used for
billing).
<LI>Browse the system for songs of interest.
<LI>Play a song.
<LI>Register the transaction on the server (for billing).
</UL>
<P>
The first three elements are addressed here. The fourth element
involves writing to files on the server and is addressed in Chapter
8, &quot;Reading and Writing Files from an Applet.&quot; The sample
code does have comments showing where to implement the transaction
registration.
<H3><A NAME="AppletArchitecture">
Applet Architecture</A></H3>
<P>
To keep the system as flexible as possible, all of the applet
options are controlled by configuration files and parameters in
the applet HTML. There are four parameters. Each parameter is
the name of a configuration file. They are:
<UL>
<LI><TT>userfile</TT>-contains a list
of accepted users.
<LI><TT>imagefile</TT>-the start-up
image.
<LI><TT>artistfile</TT>-the configuration
file containing a list of artists.
<LI><TT>transactionfile</TT>-the name
of the file to record the transactions to (this final parameter
is not used).
</UL>
<P>
Specifying the file names as parameters and designing the applet
to be based on configuration files allows a single, simple applet
to be used by a wide variety of users without any code modification
by the programmer. All flexible values are specified in the files-the
image file, the acceptable user names, the list of artists, the
names of the files containing the songs for each artist, the names
of the audio files associated with each song, and the detailed
information for each song. These can be easily modified and don't
even require the user to reload the applet.
<P>
Due to the simplicity of this applet, there is no need to generate
a host of new classes. The sample includes a total of two new
classes: one subclass of <TT>applet</TT>,
and a utility class that aids in file input and string parsing
(<TT>FileParser</TT>). If the applet
were expanded, separate classes would probably be desirable for
each element listed earlier.
<H3><A NAME="InitializationandRegistration">
Initialization and Registration</A></H3>
<P>
First, the applet performs initialization, and the registration
interface is prepared. During initialization, the applet reads
the required filenames from the parameter list. Also, an <TT>Image</TT>
object is created using one of the parameters as a filename. Finally,
the rest of the user interface is created and organized (see Listing
38.1). The applet then waits for events. See the <TT>OnDemand.init</TT>
method in the OnDemand.java source file on the CD.
<P>
Here, the initialization parameters are specified in the HTML.
<HR>
<BLOCKQUOTE>
<B>Listing 38.1&nbsp;&nbsp;Initialization Parameters in the HTML
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
&lt;APPLET code=&quot;OnDemand.class&quot; width=600 height=300&gt;
&lt;PARAM name=&quot;userfile&quot; value=&quot;user.txt&quot;&gt;
&lt;PARAM name=&quot;imagefile&quot; value=&quot;image.gif&quot;&gt;
&lt;PARAM name=&quot;artistsfile&quot; value=&quot;art.txt&quot;&gt;
&lt;PARAM name=&quot;transactionfile&quot; value=&quot;tran.txt&quot;&gt;
&lt;/APPLET&gt;
...
</PRE>
</BLOCKQUOTE>
<HR>
<P>
First, the initialization parameters are set, then an image is
read, as shown in Listing 38.2.
<HR>
<BLOCKQUOTE>
<B>Listing 38.2&nbsp;&nbsp;Reading the Initialization Parameters
and Creating the Image Object in the Java Applet<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
// get the input parameters
userFileName = getParameter(&quot;userfile&quot;);
imageFileName = getParameter(&quot;imagefile&quot;);
artistFileName = getParameter(&quot;artistsfile&quot;);
transactionFileName = getParameter(&quot;transactionfile&quot;);
...

// get the startup image
startUpImage = getImage(getDocumentBase(),imageFileName);

...
</PRE>
</BLOCKQUOTE>
<HR>
<P>
When the Login button is pressed, the method <TT>OnDemand.confirmLogin</TT>
is called. It retrieves the requested user name from the text
field, reads the contents of the user file (specified in the parameter
list), and compares the selected name to the retrieved list (see
Listing 38.3). If the name matches, the interface is cleared and
<TT>OnDemand.startUI</TT> is called
to begin the main program. If the name does not match one of the
names in the configuration file, the text field is cleared and
the login form remains on the screen.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
To improve performance, user configuration files could be read asynchronously at startup.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
This applet is not intended as a commercial application; a more sophisticated applet uses encryption or digital signatures to secure its communications (see Chapters 26-28 in Part VI, &quot;Java Security,&quot; for more details). It also provides a dialog 

box if the login fails, and a password is then required. To implement a <TT>password</TT> text field, see <TT>TextField.setEchoCharacter</TT>.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 38.3&nbsp;&nbsp;Confirming the Username<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
// get the specified UID
userName = userNameField.getText();
...
// read the file contents and pack the lines of text into a
// vector of strings
userFileContents = FileParser.parseFile(getDocumentBase(),
                          userFileName);

...
// loop over the acceptable usernames and compare the specified UID
int i;
int total = userFileContents.size();
for(i=0; i&lt;total; i++) {

 try {
 String tempString = (String)userFileContents.elementAt(i);

 // compare the strings
 if( userName.compareTo(tempString)
 == 0) {
     
 // the strings are the same, let them log in
 startUI();
     
 return;
 }

 }
 catch (ArrayIndexOutOfBoundsException e) {
 // do nothing since we are sure not to be out of the bounds
 }
}

...
</PRE>
</BLOCKQUOTE>
<HR>
<H3><A NAME="SongSelection">
Song Selection</A></H3>
<P>
Once the user is logged in, two text lists are displayed. The
first is a list of artists; the second is a list of songs by that
artist. The first list is read from the artist file (one of the
initialization parameters). When an artist is selected, <TT>OnDemand.selectArtist</TT>
is called and the artist's line from the configuration file is
parsed and the song list filename is retrieved. Then, the song
list is read (see Listing 38.4).
<HR>
<BLOCKQUOTE>
<B>Listing 38.4&nbsp;&nbsp;Reading the Song List in Response to
an Artist Being Selected<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
...

//
// get the selected artist
//
int index = artistList.getSelectedIndex();

...

// get the selected artist configuration line
String temp = (String)artistFileContents.elementAt(index);

//
// read the contents of the artist's song file. the name of the
// song file is the second argument in the artists file.
//
songFileContents = FileParser.parseFile(getDocumentBase(),
                          FileParser.parseField(temp,2));
...
</PRE>
</BLOCKQUOTE>
<HR>
<P>
When a song is selected, <TT>OnDemand.selectSong</TT>
is called, the song's configuration line is parsed, and the song
filename and informational message is retrieved. Then, the song
information is displayed using the song filename retrieved from
the configuration files; the <TT>AudioClip</TT>
object is created (see Listing 38.5).
<HR>
<BLOCKQUOTE>
<B>Listing 38.5&nbsp;&nbsp;Parsing the Song Configuration Line
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
//
// get the selected song from the list
//
int index = songList.getSelectedIndex();

// notify the user of wait condition
showStatus(&quot;Initializing audio. Please wait...&quot;);
...

// get the song info string the song's configuration line
String line = (String)songFileContents.elementAt(index);

//
// create the audio clip
//
sound = getAudioClip(getDocumentBase(),
           FileParser.parseField(line,2));

//
// populate the text area
//
FileParser.populateTextArea(songInfo,
                FileParser.parseField(line,3),
                songInfo.getColumns()-10);
...
</PRE>
</BLOCKQUOTE>
<HR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Caution</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Double-clicking is used in this example to select items from the list. This can be confusing since one click highlights a new item. If the user is not paying attention, there may be confusion between which clip is selected and which is highlighted. To 
alleviate this problem, subclass <TT>List</TT> and override the <TT>handleEvent</TT> operation. Look for the event IDs of <TT>Event.LIST_SELECT</TT> and <TT>Event.LIST_DESELECT</TT> with the target a list region. See the Java API documentation for details.


</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H3><A NAME="PlayingtheSongs">
Playing the Songs</A></H3>
<P>
Once a song is selected, there is little remaining to do. If the
user presses any of the audio control buttons (play, stop, loop),
the appropriate <TT>AudioClip</TT>
command is executed. If the action is play or loop, <TT>OnDemand.logTransaction</TT>
is called to log the information of the transaction. In the example,
<TT>logTransaction</TT> is a stub
with comments in it to aid in later implementation.
<H2><A NAME="JavaShortcomings"><FONT SIZE=5 COLOR=#FF0000>
Java Shortcomings</FONT></A></H2>
<P>
Although Java is a very powerful language, there are a number
of things that can be improved:
<UL>
<LI>Media streaming is available only via applets that are executed
in the environment of a robust Web browser (see <A HREF="ch13.htm" >Chapter 13</A>, &quot;Running
Applets as Applications,&quot; for details and work-arounds).
It is not possible to use the appletviewer to run or debug these
applets. The current debug method is a slow process of loading
your applet into a Web browser, checking it out, and then editing
your Java source. This in itself is not so bad, but some browsers
buffer your classes (even if you try to force a reload). You must
relaunch your browser each time you want to test another feature.
Also, it is difficult to get any debug feedback via <TT>System.out</TT>
because some Web browsers do not supply a standard out.
<LI>Currently the <TT>AudioClip</TT>
is limited to a very specific file format and even a specific
range of parameters within that format (Sun/Next audio file with
one channel, <FONT FACE="Symbol">m</FONT>-law compression, and
8KHz sample rate). This limitation should be removed.
<LI>Java needs to include video streaming.
<LI>True data streaming should be implemented to reduce initialization
delay times in the instantiation of objects. Currently, the AudioClip
objects download and buffer the audio data upon initialization.
There may be some room for compromise using built-in asynchronous
transfers.
<LI>Ultimately, the streams need to have more user feedback control.
For example, the user should be able to pause and scrub through
an audio clip.
<LI>Visual media types (images, and in the future, video) should
be subclasses of components or have containers that can accept
them as components.
<LI>The current Javasoft API documentation is fairly weak when
it comes to educating a new developer. Although it is excellent
for reference, a Programmer's Guide with detailed information
on difficult topics like the Layout Managers would be beneficial.
</UL>
<H2><A NAME="NewFeatures"><FONT SIZE=5 COLOR=#FF0000>
New Features</FONT></A></H2>
<P>
Java is evolving; look for the following changes that will affect
the development of multimedia applications:
<UL>
<LI>Video implementation<BR>
Improvements will include both latency-sensitive and -insensitive
video and will accommodate both streaming and stored video sources.
<LI>Enhanced Audio<BR>
Enhancements will include support for sampled and synthesized
audio as well as 3-D spatial audio sources. Streaming and stored
audio sources will be supported.
<LI>MIDI support<BR>
Support will include timed-event streams, loadable synthesizers,
and effects.
<LI>High performance 2-D object animation<BR>
2-D support will include sprites with transparency, programmed
sprite behaviors, scrolling background images, aggregation and
hierarchical compositing, and image- transformation effects.
<LI>Improvements to 2-D graphics and imaging<BR>
2-D graphics support will include affine transformations (translate,
rotate, skew, and so on) on points and paths; compositing, which
will allow overlays, blending, and transparency; image filters,
including features such as table lookup, convolve, and sharpen;
and paint enhancements, including gradients, and patterns.
</UL>
<HR>

<CENTER><P><A HREF="ch37.htm"><IMG SRC="http://docs.rinet.ru/JSol/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="http://docs.rinet.ru/JSol/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/JSol/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch39.htm"><IMG SRC="http://docs.rinet.ru/JSol/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
