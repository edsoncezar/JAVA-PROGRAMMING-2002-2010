<HTML>
<HEAD>
<TITLE>Chapter 9 -- Documenting Your Visual J++ Code</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.0z">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">








<H1><FONT SIZE=6 COLOR=#FF0000>Chapter&nbsp;9</FONT></H1>
<H1><FONT SIZE=6 COLOR=#FF0000>Documenting Your Visual J++ Code</FONT>
</H1>
<HR>
<P>
<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>
<UL>
<LI><A HREF="#Overview">
Overview</A>
<UL>
<LI><A HREF="#RunningJavaDoc">
Running JavaDoc</A>
</UL>
<LI><A HREF="#AddingJavaDocComments">
Adding JavaDoc Comments</A>
<UL>
<LI><A HREF="#DocumentingClasses">
Documenting Classes</A>
<LI><A HREF="#DocumentingMethods">
Documenting Methods</A>
</UL>
<LI><A HREF="#EnhancingYourDocumentationwithHTML">
Enhancing Your Documentation with HTML</A>
<LI><A HREF="#AnExample">
An Example</A>
<LI><A HREF="#Summary">
Summary</A>
</UL>
</UL>
<HR>
<P>
One of the problems that has faced maintenance programmers through
the years has been the horrible documentation left behind by the
original programmers. Usually the original programmers included
comments in the source code but probably didn't comment as thoroughly
as they should have. Then an ambitious project manager recognized
the inadequacy of the in-line comments and forced the programmers
to write a lengthy document about the software. This document
was handed over to the maintenance programmers who used it to
continue supporting and enhancing the software. Even if the maintenance
programmers kept the in-line comments current, the other documentation
fell out of date because it was just too hard to maintain. And,
besides, the maintenance programmers ask, &quot;Why should we
keep the document up to date if we're also documenting the code?&quot;
<P>
This is a very good question and one the Java developers must
have asked themselves. Imagine yourself on the Java team. You've
been working long hours writing the hundreds of classes that comprise
Java and then you wake up one morning, hands still trembling from
the previous night's caffeine excesses, and realize, &quot;Darn!
Now we've got to document all that code.&quot; The solution the
Java developers came up with actually made it possible for them
not to write a separate document describing each class, interface,
and method. Instead, they wrote a program that would extract specially
formatted source code comments and create class documentation
from the embedded comments. The tool they developed to do this
is called JavaDoc and is included in the Java Developer's Kit.
<H2><A NAME="Overview"><FONT SIZE=5 COLOR=#FF0000>
Overview</FONT></A></H2>
<P>
JavaDoc reads a <TT>.java</TT> file and creates a set of HTML
files that can be read by a Web browser. As an example, consider
the documentation for the <TT>Employee</TT> class that is shown
in Figure 9.1. At the top of the documentation shown in this figure
is an inheritance tree showing that <TT>Employee</TT> is a subclass
of <TT>Person</TT>, which is a subclass of <TT>java.lang.Object</TT>.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f9-1.gif"><B> Figure 9.1 : </B><I>A sample documentation page generated by  JavaDoc.
</I></A><P>
<P>
In addition to the class' inheritance tree, Figure 9.1 shows that
an overall class description can be provided as well as a Constructor
Index. Figure 9.1 shows only one screen of the documentation that
will be created for the <TT>Employee</TT> class in this chapter.
There are many more areas and types of documentation that can
be generated and are described in this chapter.
<P>
In addition to generating documentation for a single class, JavaDoc
can generate system-level documentation. For example, Figure 9.2
shows an <TT>AllNames.html</TT> file generated by JavaDoc. This
file lists all non-private members, both methods and variables,
processed by JavaDoc.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f9-2.gif"><B> Figure 9.2 : </B><I>Viewing the contents of AllNames.html.
</I></A><P>
<P>
Similarly, JavaDoc can create <TT>tree.html</TT>. This file depicts
the complete Java inheritance hierarchy, as shown in Figure 9.3.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f9-3.gif"><B> Figure 9.3 : </B><I>Viewing the Java class hierarchy in tree.html generated by JavaDoc.
</I></A><P>
<H3><A NAME="RunningJavaDoc">
Running JavaDoc</A></H3>
<P>
JavaDoc is a command-line program that is supplied with the Java
Developer's Kit. It can be invoked in the following manner:
<BLOCKQUOTE>
<PRE>
javadoc [options] PackageName | FileName.java
</PRE>
</BLOCKQUOTE>
<P>
For example, to use JavaDoc to create documentation on a class
named <TT>Employee</TT>, you would do the following:
<BLOCKQUOTE>
<PRE>
javadoc employee.java
</PRE>
</BLOCKQUOTE>
<H4>Command-Line Arguments and Environment Variables</H4>
<P>
The <TT>[options]</TT> parameter shown as part of the JavaDoc
command line can be included if desired. It can be used to specify
which directories should be searched for input files, the directory
in which to put the generated HTML files, whether JavaDoc should
run in a special verbose mode, and other options as summarized
in Table 9.1.<BR>
<P>
<CENTER><B>Table 9.1. The JavaDoc command-line options.</B></CENTER>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=192><I>Option</I></TD><TD WIDTH=398><I>Description</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>-authors</TT></TD><TD WIDTH=398>An undocumented option that when specified will generate HTML based on the <TT>@author</TT> tag.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>-classpath</TT> path</TD><TD WIDTH=398>Specifies the path to be searched for files ending with the <TT>.java</TT> extension. If specified, it overrides the <TT>CLASSPATH</TT> environment variable.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>-d</TT> directory</TD><TD WIDTH=398>Specifies the target directory for writing HTML files.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>-doctype</TT> [<TT>MIF</TT> | <TT>HTML</TT>]
</TD><TD WIDTH=398>An undocumented option that specifies the type of file to create. By default HTML files are created but FrameMaker MIF files can also be generated.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>-noindex</TT></TD><TD WIDTH=398>An undocumented option that suppresses creation of the <TT>AllNames.html</TT> file.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>-notree</TT></TD><TD WIDTH=398>An undocumented option that suppresses creation of the <TT>tree.html</TT> file.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>-verbose</TT></TD><TD WIDTH=398>Instructs JavaDoc to run in a special mode that displays additional information as the files are parsed. This option is most useful if you have a class for which the documentation appears 
incorrect.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>-version</TT></TD><TD WIDTH=398>An undocumented option that when specified will generate HTML based on the <TT>@version</TT> tag.
</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
The only environment variable used by JavaDoc is <TT>CLASSPATH</TT>.
This variable, if set in your environment, informs JavaDoc of
the directories in which it should search for <TT>.java</TT> files.
For example, to search the current directory, <TT>C:\VISUALJ\JAVA\SOURCE</TT>,
and <TT>C:\MYJAVA\SOURCE</TT>, you would set <TT>CLASSPATH</TT>
to the following:
<BLOCKQUOTE>
<PRE>
.;C:\visualj\java\source;C:\myjava\source<BR>
</PRE>
</BLOCKQUOTE>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>NOTE</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
JavaDoc is included as part of the Java Developer's Kit (JDK) as released by Sun Microsystems but is not included in Visual J++. To download the JDK, including JavaDoc, connect to <TT><A HREF="http://java.sun.com/">http://java.sun.com</A></TT>.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H2><A NAME="AddingJavaDocComments"><FONT SIZE=5 COLOR=#FF0000>
Adding JavaDoc Comments</FONT></A></H2>
<P>
Unfortunately, JavaDoc is only as smart as the information you
give to it. It gets its information by parsing source code files
and looking for comments enclosed within the <TT>/**</TT> and
<TT>*/</TT> delimiters. JavaDoc comments are placed immediately
above the class or member that they are meant to describe. For
example, consider the following class definition and associated
comment:
<BLOCKQUOTE>
<PRE>
/** This is a comment that describes MyClass in general. */
public class MyClass {
    /** The DoSomething method is used to do something. */
    public int DoSomething() {
        // method source goes here
    }
    // remaining class source code
}
</PRE>
</BLOCKQUOTE>
<P>
In this example, JavaDoc comments have been placed above the class
and above the <TT>DoSomething</TT> member method. Leading spaces
and asterisk (<TT>*</TT>) characters are stripped from JavaDoc
comment lines. This makes it possible for you to start each line
with an asterisk, as shown in the following example:
<BLOCKQUOTE>
<PRE>
/**
This is a comment that describes MyClass
in general. The leading * characters and
spaces will be removed. */
class Contractor extends Employee {
    // class body
}
</PRE>
</BLOCKQUOTE>
<P>
Doing so is, of course, a matter of personal preference but this
style is common among many Java programmers.
<H3><A NAME="DocumentingClasses">
Documenting Classes</A></H3>
<P>
When documenting a class (in the comment immediately preceding
the class definition), you can add class documentation tags to
enhance the usability of the documentation. Class documentation
tags each begin with an <TT>@</TT> symbol to distinguish them.
The following class documentation tags are available:<BR>

<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=60%>
<TR VALIGN=TOP><TD WIDTH=144><TT>@author</TT></TD><TD WIDTH=288>author-name
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=144><TT>@see</TT></TD><TD WIDTH=288>classname</TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=144><TT>@see</TT></TD><TD WIDTH=288>fully-qualified-classname
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=144><TT>@see</TT></TD><TD WIDTH=288>fully-qualified-classname#method-name
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=144><TT>@version</TT></TD><TD WIDTH=288>version-text
</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
As an example of how these tags work, consider the following definitions
of an <TT>Employee</TT> class and a <TT>Contractor</TT> class:
<BLOCKQUOTE>
<PRE>
/**
  * The Employee class is used to represent employees
  * of our company. It augments the Person class with
  * information about an employee's salary and job
  * title.
  * @author Mike Cohn
  * @version 1.0.0
  * @see Contractor
*/
public class Employee extends Person {
    // class body
}

/**
  * The Contractor class is used to represent
  * contract employees. Contract employees are
  * paid by the hour.
  * @author Mike Cohn
  * @version 1.0.0
  */
class Contractor extends Employee {
    // class body
}
</PRE>
</BLOCKQUOTE>
<P>
The comment preceding the <TT>Employee</TT> class describes the
class and then shows the use of three of the class documentation
tags. The author and version are only included in the generated
documentation if you specify <TT>-authors</TT> and <TT>-version</TT>
on the command line. The <TT>@see Contractor</TT> line in the
<TT>Employee</TT> comment will inform readers that they may want
to see a related class. Because the <TT>@see</TT> tag is used,
JavaDoc will generate a link to the <TT>Contractor</TT> class
documentation. This can be seen in Figure 9.4.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f9-4.gif"><B> Figure 9.4 : </B><I>Class documentation for Employee, including a link to Contractor.
</I></A><P>
<P>
As you can see in Figure 9.4, a link is provided for all superclasses
of <TT>Employee</TT> (<TT>java.lang.Object</TT> and <TT>Person</TT>)
and the <TT>@see</TT> tag has created a link to <TT>Contractor</TT>
in a &quot;See Also&quot; section. Following this link will jump
directly to the <TT>Contractor</TT> documentation, as shown in
Figure 9.5. The <TT>Contractor</TT> documentation does not need
a <TT>@see</TT> tag back to <TT>Employee</TT> because <TT>Employee</TT>
is a superclass of <TT>Contractor</TT> and already appears as
a link in the inheritance hierarchy.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f9-5.gif"><B> Figure 9.5 : </B><I>Class documentation for Contractor.
</I></A><P>
<P>
The link from <TT>Employee</TT> to <TT>Contractor</TT> positions
your Web browser at the top of the documentation for the <TT>Contractor</TT>
class. Sometimes you'd prefer to have a link jump to a specific
place within the target class. You can link directly to a method
by specifying the name of the method after the target class. For
example, the following tag would jump directly to the <TT>GetHourlyRate</TT>
method in the <TT>Contractor</TT> class:
<BLOCKQUOTE>
<PRE>
@see Contractor#GetHourlyRate
</PRE>
</BLOCKQUOTE>
<H3><A NAME="DocumentingMethods">
Documenting Methods</A></H3>
<P>
Like its class documentation tags, JavaDoc also supports method
documentation tags. Method documentation tags are optional and
can be placed in a JavaDoc comment directly above the method they
describe. Like class documentation tags, method tags begin with
the <TT>@</TT> symbol. The following method documentation tags
are available:<BR>

<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=60%>
<TR VALIGN=TOP><TD WIDTH=118><TT>@param</TT></TD><TD WIDTH=288>parameter-name description
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=118><TT>@return</TT></TD><TD WIDTH=288>description
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=118><TT>@exception</TT></TD><TD WIDTH=288>fully-qualified-class-name description
</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
To see how these tags can be used, consider the following definition
of the <TT>Contractor</TT> class:
<BLOCKQUOTE>
<PRE>
class Contractor extends Employee {
    public Contractor(float sal, String fName, String lName) {
        super(sal, fName, lName);
    }
    private float hourlyRate;
  /**
    * This method can be used to retrieve the hourly rate
    * paid to the contractor.
    * @return The contractor's hourly rate, excluding
    *         exceptional circumstances such as holidays
    *         and overtime.
    */
    public float GetHourlyRate() {
        return hourlyRate;
    }
  /**
    * This method calculates how much is due to
    * a contractor based on how much he's worked
    * and his hourly rate.
    * @param hours The number of hours worked by the
    *        contractor during this pay period.
    * @return The amount of money due the contractor.
    */
    public float CalculatePayCheck(int hours) {
        return hours * hourlyRate;
    }
}
</PRE>
</BLOCKQUOTE>
<P>
The <TT>Contractor</TT> class includes two non-constructor methods-<TT>GetHourlyRate</TT>
and <TT>CalculatePayCheck</TT>. Each of these uses the <TT>@return</TT>
tag to describe its return value. Additionally, <TT>GetHourlyRate</TT>
uses <TT>@param</TT> to describe its input parameters. The results
of this documentation can be seen in Figure 9.6.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f9-6.gif"><B> Figure 9.6 : </B><I>Using @param and @return to document Contractor.
</I></A><P>
<P>
As you can see from Figure 9.6, the <TT>@return</TT> and <TT>@param</TT>
tags nicely format the descriptions entered in the JavaDoc comments.
If a method receives more than one parameter, the <TT>@param</TT>
tag can be repeated as often as necessary. Although the <TT>@exception</TT>
tag is not shown in this example, it behaves identically to <TT>@return</TT>
and <TT>@param</TT>.
<H2><A NAME="EnhancingYourDocumentationwithHTML"><FONT SIZE=5 COLOR=#FF0000>
Enhancing Your Documentation with HTML</FONT></A></H2>
<P>
By using the class and method documentation tags that you can
embed within JavaDoc comments, you can take huge strides toward
improving the way you document your code. However, because JavaDoc
produces HTML files, you can go much further. By embedding HTML
(Hypertext Markup Language) commands within your JavaDoc comments,
you have almost infinite control over how your documentation will
appear when viewed in a browser.
<P>
By using HTML tags, you can enhance your documentation by drawing
attention to bold or italicized text, including numbered and bulleted
lists, images, preformatted text, or even links to other documentation
files or Web-based resources. Table 9.2 shows the HTML tags that
you probably find most useful in documenting your Java code.<BR>
<P>
<CENTER><B>Table 9.2. Useful HTML tags for documenting Java code.</B></CENTER>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=230><I>Tag</I></TD><TD WIDTH=384><I>Purpose</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=230><TT>&lt;A&gt;...&lt;/A&gt;</TT></TD><TD WIDTH=384>Indicates a link anchor.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=230><TT>&lt;B&gt;...&lt;/B&gt;</TT></TD><TD WIDTH=384>Format marked text with bold font.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=230><TT>&lt;BLOCKQUOTE&gt;...&lt;/BLOCKQUOTE&gt;</TT>
</TD><TD WIDTH=384>Formats marked text as a lengthy quotation.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=230><TT>&lt;CITE&gt;...&lt;/CITE&gt;</TT></TD><TD WIDTH=384>Format marked text as a citation.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=230><TT>&lt;CODE&gt;...&lt;/CODE&gt;</TT></TD><TD WIDTH=384>Format marked text as source code.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=230><TT>&lt;EM&gt;...&lt;/EM&gt;</TT></TD><TD WIDTH=384>Add emphasis to marked text.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=230><TT>&lt;I&gt;...&lt;/I&gt;</TT></TD><TD WIDTH=384>Format marked text in italics.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=230><TT>&lt;IMG&gt;</TT></TD><TD WIDTH=384>Inserts a named image file.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=230><TT>&lt;LI&gt;</TT></TD><TD WIDTH=384>Indicates a list item with an ordered or unordered list.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=230><TT>&lt;OL&gt;...&lt;/OL&gt;</TT></TD><TD WIDTH=384>Indicates an ordered (numbered) list.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=230><TT>&lt;P&gt;</TT></TD><TD WIDTH=384>Indicates the end of a paragraph.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=230><TT>&lt;PRE&gt;...&lt;/PRE&gt;</TT></TD><TD WIDTH=384>Indicates preformatted text. Spacing and layout is preserved by using a monospaced font.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=230><TT>&lt;STRONG&gt;...&lt;/STRONG&gt;</TT></TD>
<TD WIDTH=384>Adds maximum-strength emphasis to marked text.</TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=230><TT>&lt;TT&gt;...&lt;/TT&gt;</TT></TD><TD WIDTH=384>Formats marked text in a typewriter font.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=230><TT>&lt;UL&gt;...&lt;/UL&gt;</TT></TD><TD WIDTH=384>Indicates an unordered (bulleted) list.
</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>CAUTION</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Because JavaDoc makes its own assumptions about how it will format text, you cannot use HTML tags like <TT>&lt;H1&gt;</TT> that are used to define headings.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H2><A NAME="AnExample"><FONT SIZE=5 COLOR=#FF0000>
An Example</FONT></A></H2>
<P>
This section demonstrates the use of JavaDoc including class documentation
tags, method documentation tags, and embedded HTML tags. Assume
you have the following class definition that you need to document:
<BLOCKQUOTE>
<PRE>
public class Employee extends Person {
    private float salary;
    private String job;
    public Employee(float sal, String fName, String lName) {
        super(fName, lName);
        salary = sal;
    }
    public void AssignJob(String newJob) {
        job = newJob;
    }
    public String GetJobTitle() {
        return job;
    }
    public static int GetMaxWorkingAge() {
        return 64;
    }
    private float GetMaxSalary() {
        return 200000f;
    }
    public boolean ChangeSalary(float newSalary) {
        if (newSalary &lt; salary)
            return false;
        if (newSalary &gt; GetMaxSalary())
            return false;
        salary = newSalary;
        return true;
    }
}
</PRE>
</BLOCKQUOTE>
<P>
First, you need to document the class itself. You do this with
the following comment:
<BLOCKQUOTE>
<PRE>
/**
  * The &lt;tt&gt;Employee&lt;/tt&gt; class is used to represent
  * employees of our company. It augments the &lt;tt&gt;Person&lt;/tt&gt;
  * class with information about an employee's salary and
  * job title.&lt;p&gt;
  * This class was written by:
  * &lt;blockquote&gt;
  * &lt;img src=logo.gif width=300 height=100&gt;
  * &lt;/blockquote&gt;
  * @author Mike Cohn
  * @version 1.0.0
  * @see Contractor
*/
public class Employee extends Person {
</PRE>
</BLOCKQUOTE>
<P>
This will create the documentation screen shown in Figure 9.7.
You can see that the <TT>&lt;tt&gt;...&lt;/tt&gt;</TT> tags were
used to set the names of other classes in a distinctive typewriter-style
font. The <TT>&lt;p&gt;</TT> tag is used to indicate the end of
a paragraph. If this tag had not been used, the text on the following
line would have merged with the text prior to the tag. The <TT>&lt;blockquote&gt;</TT>
and <TT>&lt;img&gt;</TT> tags were used to include a graphics
image indicating the author of the class.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f9-7.gif"><B> Figure 9.7 : </B><I>Class documentation for Employee, including an embedded graphic.
</I></A><P>
<P>
Next, you need to document the constructor. This is done with
the following comment that will produce the documentation shown
in Figure 9.8:
<BLOCKQUOTE>
<PRE>
/** This constructor is used to create a new employee and
  * assign him an initial salary. &lt;EM&gt;It does not verify that
  * salary is less than the company's maximum salary.&lt;/EM&gt;
  * You could use this method as follows:
  * &lt;CODE&gt;&lt;PRE&gt;
  * Employee Emp = new Employee(35000f,&quot;Mike&quot;,&quot;Cohn&quot;);
  * &lt;/PRE&gt;&lt;/CODE&gt;
  * @param sal The starting salary of the new employee.
  * @param fName The employee's first name.
  * @param lName The employee's last name.
  */
public Employee(float sal, String fName, String lName) {
</PRE>
</BLOCKQUOTE>
<P>
In this case the <TT>&lt;CODE&gt;...&lt;/CODE&gt;</TT> and <TT>&lt;PRE&gt;...&lt;/PRE&gt;</TT>
tags were used to indicate a preformatted block of source code.
Also, the <TT>&lt;EM&gt;...&lt;/EM&gt;</TT> tags were used to
apply emphasis to the statement that the employee's salary must
be less than a company maximum. Finally, because this constructor
is passed three parameters, each parameter is documented with
the <TT>@param</TT> method tag.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f9-8.gif"><B> Figure 9.8 : </B><I>Documentation for the Employee constructor.
</I></A><P>
<P>
In addition to the full documentation shown in Figure 9.8, JavaDoc
creates a constructor index and a method index for the class.
The method index lists each of a class's nonprivate methods. These
indexes appear as separate sections in the HTML document, as shown
in Figure 9.9.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f9-9.gif"><B> Figure 9.9 : </B><I>The constructor and method indexes for the Employee class.
</I></A><P>
<P>
The <TT>AssignJob</TT> method is documented by adding the following
comment:
<BLOCKQUOTE>
<PRE>
/**
  * This method assigns the employee to the
  * specified job. This method does not verify the
  * &lt;i&gt;job title&lt;/i&gt; against the list of &lt;i&gt;approved
  * job titles&lt;/i&gt; created by &lt;b&gt;Human Resources&lt;/b&gt;.
  * Likely job titles you may want to pass include:
  * &lt;ul&gt;
  * &lt;li&gt;Programmer
  * &lt;li&gt;Analyst
  * &lt;li&gt;QA
  * &lt;li&gt;Tech Writer
  * &lt;li&gt;Project Manager
  * &lt;li&gt;Database Administrator
  * &lt;li&gt;Database Engineer
  * &lt;/ul&gt;
  * Reminder: All positions must be approved by the
  * &lt;b&gt;Manager of Human Resources&lt;/b&gt; according to
  * the company's &lt;CITE&gt;Employee Hiring Guidelines.
  * &lt;/CITE&gt;
  * @param newJob This is the new job title.
  * @see #GetJobTitle
  */
  public void AssignJob(String newJob) {
</PRE>
</BLOCKQUOTE>
<P>
The result of this documentation can be seen in Figure 9.10. This
example demonstrates the use of <TT>&lt;B&gt;...&lt;/B&gt;</TT>
and <TT>&lt;I&gt;...&lt;/I&gt;</TT> to bold and italicize text.
Additionally, the use of an unordered (bulleted) list is demonstrated.
The <TT>&lt;UL&gt;...&lt;/UL&gt;</TT> tags indicate the start
and end of the list and the &lt;LI&gt; tags indicate each of the
list items. This example also demonstrates the use of <TT>&lt;CITE&gt;...&lt;/CITE&gt;</TT>
to indicate a citation. Finally, the <TT>@see</TT> method tag
is used. In this example, no class name appears to the left of
the #. This will create a link to a method within the current
class.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f9-10.gif"><B> Figure 9.10 : </B><I>Documentation for the AssignJob method.
</I></A><P>
<P>
Next, the following comment is written for <TT>GetJobTitle</TT>:
<BLOCKQUOTE>
<PRE>
/**
  * This function returns the job title of the employee.
  * @return A string representing the job title (for
  * example, &quot;programmer&quot;).
  * @see #AssignJob
  */
  public String GetJobTitle() {
</PRE>
</BLOCKQUOTE>
<P>
The method <TT>GetMaxWorkingAge</TT> is defined as static, meaning
that it is associated with the class itself, rather than with
instances of the class. However, because it is a public method,
it can be documented as shown in the following comment:
<BLOCKQUOTE>
<PRE>
/**
  * This method returns the highest age at which
  * an employee can remain at work. &lt;STRONG&gt;
  * After this age, an employee must retire and
  * move to Florida.&lt;/STRONG&gt;
  * @return The last allowable working year before
  * mandatory retirement.
  */
  public static int GetMaxWorkingAge() {
</PRE>
</BLOCKQUOTE>
<P>
The documentation for <TT>GetJobTitle</TT> and <TT>GetMaxWorkingAge</TT>
will appear as shown in Figure 9.11. As you can see from this
figure, the use of the <TT>&lt;STRONG&gt;...&lt;/STRONG&gt;</TT>
tag places heavy emphasis on the need for retirees to move to
Florida.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f9-11.gif"><B> Figure 9.11 : </B><I>Documentation for GetJobTitle and GetMaxWorkingAge.
</I></A><P>
<P>
Next, the method <TT>GetMaxSalary</TT> is documented, as follows:
<BLOCKQUOTE>
<PRE>
/**
  * This comment will not show up in JavaDoc because
  * it is private.
  */
private float GetMaxSalary() {
</PRE>
</BLOCKQUOTE>
<P>
However, <TT>GetMaxSalary</TT> is declared as <TT>private</TT>,
so it will not be documented by JavaDoc. Because private functions
are not usable outside the class in which they are declared, there
is no need to document them for use by others in the same way
that exists for externally visible methods.
<P>
At this point, the only method left to document is <TT>ChangeSalary</TT>,
which is documented as follows:
<BLOCKQUOTE>
<PRE>
/**
  * This function changes the employees salary.
  * A salary change can occur only after the two following
  * tests have been applied:
  * &lt;ol&gt;
  * &lt;li&gt;The new salary is higher than the current salary.
  * &lt;li&gt;The new salary is less than the maximum salary.
  * &lt;/ol&gt;
  * @return &lt;B&gt;true&lt;/B&gt; if the salary change is approved,
  *         &lt;B&gt;false&lt;/B&gt; otherwise.
  * @param newSalary The proposed new salary.
  */
  public boolean ChangeSalary(float newSalary) {
</PRE>
</BLOCKQUOTE>
<P>
The documentation for <TT>ChangeSalary</TT> will appear as shown
in Figure 9.12. This example demonstrates the use of <TT>&lt;OL&gt;...&lt;/OL&gt;</TT>
and <TT>&lt;LI&gt;</TT> to introduce an ordered list and its items.
Ordered lists are like unordered lists except that instead of
bullets, they have numbers to the left of each item. Additionally,
this example shows that some HTML tags can be embedded with class
or method documentation tags. In this case, <TT>&lt;B&gt;...&lt;/B&gt;</TT>
is embedded within the <TT>@return</TT> tag.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f9-12.gif"><B> Figure 9.12 : </B><I>Documentation for the ChangeSalary method.
</I></A><P>
<P>
For clarity and completeness, Listing 9.1 shows the complete source
to the <TT>Employee</TT>, <TT>Contract</TT>, and <TT>Person</TT>
classes used throughout this example.
<HR>
<BLOCKQUOTE>
<B>Listing 9.1. The Employee, Contractor, and Person classes.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
/**
  * The &lt;tt&gt;Employee&lt;/tt&gt; class is used to represent
  * employees of our company. It augments the &lt;tt&gt;Person&lt;/tt&gt;
  * class with information about an employee's salary and
  * job title.&lt;p&gt;
  * This class was written by:
  * &lt;blockquote&gt;
  * &lt;img src=logo.gif width=300 height=100&gt;
  * &lt;/blockquote&gt;
  * @author Mike Cohn
  * @version 1.0.0
  * @see Contractor
*/
public class Employee extends Person {
    private float salary;
    private String job;

    /** This constructor is used to create a new employee and
      * assign him an initial salary. &lt;EM&gt;It does not verify that
      * salary is less than the company's maximum salary.&lt;/EM&gt;
      * You could use this method as follows:
      * &lt;CODE&gt;&lt;PRE&gt;
      * Employee Emp = new Employee(35000f,&quot;Mike&quot;,&quot;Cohn&quot;);
      * &lt;/PRE&gt;&lt;/CODE&gt;
      * @param sal The starting salary of the new employee.
      * @param fName The employee's first name.
      * @param lName The employee's last name.
      */
    public Employee(float sal, String fName, String lName) {
        super(fName, lName);
        salary = sal;
    }

  /**
    * This method assigns the employee to the
    * specified job. This method does not verify the
    * &lt;i&gt;job title&lt;/i&gt; against the list of &lt;i&gt;approved
    * job titles&lt;/i&gt; created by &lt;b&gt;Human Resources&lt;/b&gt;.
    * Likely job titles you may want to pass include:
    * &lt;ul&gt;
    * &lt;li&gt;Programmer
    * &lt;li&gt;Analyst
    * &lt;li&gt;QA
    * &lt;li&gt;Tech Writer
    * &lt;li&gt;Project Manager
    * &lt;li&gt;Database Administrator
    * &lt;li&gt;Database Engineer
    * &lt;/ul&gt;
    * Reminder: All positions must be approved by the
    * &lt;b&gt;Manager of Human Resources&lt;/b&gt; according to
    * the company's &lt;CITE&gt;Employee Hiring Guidelines.
    * &lt;/CITE&gt;
    * @param newJob This is the new job title.
    * @see #GetJobTitle
    */
    public void AssignJob(String newJob) {
        job = newJob;
    }

  /**
    * This function returns the job title of the employee.
    * @return A string representing the job title (for
    * example, &quot;programmer&quot;).
    * @see #AssignJob
    */
    public String GetJobTitle() {
        return job;
    }

  /**
    * This method returns the highest age at which
    * an employee can remain at work. &lt;STRONG&gt;
    * After this age, an employee must retire and
    * move to Florida.&lt;/STRONG&gt;
    * @return The last allowable working year before
    * mandatory retirement.
    */
    public static int GetMaxWorkingAge() {
        return 64;
    }

    /**
      * This comment will not show up in JavaDoc because
      * it is private.
      */
    private float GetMaxSalary() {
        return 200000f;
    }

  /**
    * This function changes the employees salary.
    * A salary change can occur only after the two following
    * tests have been applied:
    * &lt;ol&gt;
    * &lt;li&gt;The new salary is higher than the current salary.
    * &lt;li&gt;The new salary is less than the maximum salary.
    * &lt;/ol&gt;
    * @return &lt;B&gt;true&lt;/B&gt; if the salary change is approved,
    *         &lt;B&gt;false&lt;/B&gt; otherwise.
    * @param newSalary The proposed new salary.
    */
    public boolean ChangeSalary(float newSalary) {
        if (newSalary &lt; salary)
            return false;
        if (newSalary &gt; GetMaxSalary())
            return false;
        salary = newSalary;
        return true;
    }
}


/**
  * The Contractor class is used to represent
  * contract employees. Contract employees are
  * paid by the hour.
  * @author Mike Cohn
  * @version 1.0.0
*/
class Contractor extends Employee {
    public Contractor(float sal, String fName, String lName) {
        super(sal, fName, lName);
    }
    private float hourlyRate;
  /**
    * This method can be used to retrieve the hourly rate
    * paid to the contractor.
    * @return The contractor's hourly rate, excluding
    *         exceptional circumstances such as holidays
    *         and overtime.
    */
    public float GetHourlyRate() {
        return hourlyRate;
    }
  /**
    * This method calculates how much is due to
    * a contractor based on how much he's worked
    * and his hourly rate.
    * @param hours The number of hours worked by the
    *        contractor during this pay period.
    * @return The amount of money due the contractor.
    */
    public float CalculatePayCheck(int hours) {
        return hours * hourlyRate;
    }
}

class Person {
    protected String firstName;
    protected String lastName;
    Person() {}
    Person(String fName, String lName) {
        firstName = fName;
        lastName = lName;
    }
}
</PRE>
</BLOCKQUOTE>
<HR>
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>
Summary</FONT></A></H2>
<P>
In this chapter, you learned how JavaDoc can simplify the job
of documenting your classes. You saw how class documentation tags
can be used to link classes by providing jumps between related
classes. You also learned how to use method documentation tags
to document the parameters, return values, and exceptions of each
method. Even with this much power and flexibility, it only scratched
the surface of what can be done. By embedding HTML commands directly
into your comments, you learned how to enhance your documentation
by using formatted text, numbered and bulleted lists, and embedded
images. Finally, you saw an extensive example that put all of
these pieces together to document a single class.
<HR>

<CENTER><P><A HREF="ch8.htm"><IMG SRC="http://docs.rinet.ru/WebJPP/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="http://docs.rinet.ru/WebJPP/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="contents.htm"><IMG SRC="http://docs.rinet.ru/WebJPP/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch10.htm"><IMG SRC="http://docs.rinet.ru/WebJPP/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
