<HTML>
<HEAD>
<TITLE>Chapter 7 -- Saving Time with the Resource Wizard</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.0z">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">








<H1><FONT SIZE=6 COLOR=#FF0000>Chapter&nbsp;7</FONT></H1>
<H1><FONT SIZE=6 COLOR=#FF0000>Saving Time with the Resource Wizard</FONT>
</H1>
<HR>
<P>
<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>
<UL>
<LI><A HREF="#TheEasyWay">
The Easy Way</A>
<UL>
<LI><A HREF="#OverviewoftheResourceWizard">
Overview of the Resource Wizard</A>
</UL>
<LI><A HREF="#UsingtheResourceWizardtoCreateContainers">
Using the Resource Wizard to Create Containers</A>
<UL>
<LI><A HREF="#TheControlCreatorClass">
The Control Creator Class</A>
<LI><A HREF="#TheDialogLayoutClass">
The DialogLayout Class</A>
<LI><A HREF="#OneWayCodeGeneration">
One-Way Code Generation</A>
<LI><A HREF="#AStepbyStepExample">
A Step-by-Step Example</A>
<LI><A HREF="#UsingControlCreatorClassesonDialogs">
Using Control Creator Classes on Dialogs</A>
</UL>
<LI><A HREF="#UsingtheResourceWizardtoCreateMenus">
Using the Resource Wizard to Create Menus</A>
<UL>
<LI><A HREF="#AStepbyStepMenuExample">
A Step-by-Step Menu Example</A>
</UL>
<LI><A HREF="#Summary">
Summary</A>
</UL>
</UL>
<HR>
<P>
In the previous two chapters you learned about Java's user interface
classes and how to use them. You learned how to combine layout
managers and panels to position components at the right place
on the screen. You also learned how to write code that would create
menus. In this chapter you will take a detour. Instead of learning
how to write Java code to solve a specific problem, you will learn
how to avoid writing code by using another of the wizards built
into Visual J++. In this chapter you are introduced to the Resource
Wizard. The Resource Wizard enables you to visually design your
screens and menus, thereby avoiding some of the work you went
through in the preceding chapters.
<H2><A NAME="TheEasyWay"><FONT SIZE=5 COLOR=#FF0000>
The Easy Way</FONT></A></H2>
<P>
In college I had a math professor who would teach by filling a
blackboard with complicated formulas and rules for solving a type
of problem. He'd then work through a sample problem that took
the entire class session and involved a seemingly infinite number
of steps. If you forgot a step, you could forget getting the right
answer. Invariably, after a couple of days of this the professor
would start the next class session by announcing, &quot;We've
been doing it the hard way so far; now I'll show you the easy
way.&quot; In this chapter you will learn the easy way of designing
dialogs and menus.
<H3><A NAME="OverviewoftheResourceWizard">
Overview of the Resource Wizard</A></H3>
<P>
The Resource Wizard enables you to visually lay out and design
your dialogs, frames, panels, and menus. Rather than having to
worry about Java's layout managers and how to combine them to
place components on the screen, you use a simple drag-and-drop
editor. This enables you to see what you are creating as you create
it. For example, Figure 7.1 shows a screen that has had OK and
Cancel buttons already placed on it and a <TT>List</TT> is being
positioned over the dialog.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f7-1.gif"><B> Figure 7.1 : </B><I>Dragging a List onto  a dialog in the Dialog Editor.
</I></A><P>
<P>
To use the Resource Wizard you first create a <I>resource template</I>
file, which will hold the container and menu resources used by
your applet. You use the Visual J++ Dialog Editor to edit container
resources (for example, panels, frames, and dialogs) and the Visual
J++ Menu Editor to create and edit menus.
<P>
A resource template file (which ends with the <TT>.RCT</TT> extension)
is then processed by the Resource Wizard. The Resource Wizard
generates Java code that you can add to your project workspace,
which enables you to use the dialogs and menus you designed.
<H2><A NAME="UsingtheResourceWizardtoCreateContainers"><FONT SIZE=5 COLOR=#FF0000>
Using the Resource Wizard to Create Containers</FONT></A></H2>
<P>
Because a typical applet usually has more user interface components
(such as text fields, buttons, and lists) than menus, the most
common use of the Resource Wizard will be to assist in creating
these components. If you are coming to Visual J++ from a Windows
programming background, the way you think about dialog-like resources
will have to change. In Windows programming, a program's resources
are stored in a <I>resource file</I> that is compiled and linked
into the program. In Java, this is not the case. Java dialogs
are created at runtime using code such as the following:
<BLOCKQUOTE>
<PRE>
Button okButton = new Button(&quot;OK&quot;);
TextField firstName = new TextField(15);
</PRE>
</BLOCKQUOTE>
<P>
The Resource Wizard acts as a bridge between these two approaches.
The Resource Wizard can read a resource template file and will
generate the Java code necessary to display the components as
designed in the Dialog Editor.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>NOTE</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
The resource template files (*.<TT>RCT</TT>) created by Visual J++ are stored in the same format as the files written by Visual C++. If you are converting a program from Visual C++ to Visual J++, you can take advantage of this and not have to re-create 
existing dialogs.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H3><A NAME="TheControlCreatorClass">
The Control Creator Class</A></H3>
<P>
The Resource Wizard creates a <I>control creator</I> class for
each <TT>Dialog</TT> resource. A control creator class is used
to place controls on any Java <TT>Container</TT> class. Controls
are sometimes called components, but are always subclasses of
the Java <TT>Component</TT> class that was introduced in Chapter
5, &quot;Java's User Interface Components.&quot; A control creator
class is a very flexible idea and can be used to place controls
on any Java Container-not just <TT>Dialog</TT>. You can use a
control creator class to place controls on a <TT>Panel</TT>, <TT>Frame</TT>,
<TT>Applet</TT>, or <TT>Dialog</TT>.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>TIP</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
The naming of some of the components in Visual J++ is unfortunate. This is a legacy that results from Visual J++ sharing so much of the Developer Studio with Visual C++. Although it is called the Dialog Editor and it works on Dialog resources, the classes 
generated by the Resource Wizard based on these resources do not need to be used in Java dialogs. Remember, the control creator classes made by the Resource Wizard can be used to place Java components on any <TT>Container</TT> class, including 
<TT>Applet</TT>, <TT>Dialog</TT>, <TT>Panel</TT>, and <TT>Frame</TT>.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
Each control creator class has two public methods: a constructor
and <TT>CreateControls</TT>. The constructor is passed a <TT>Container</TT>
onto which the controls will be placed. The <TT>CreateControls</TT>
method takes care of actually placing the controls on the <TT>Container</TT>.
<H3><A NAME="TheDialogLayoutClass">
The DialogLayout Class</A></H3>
<P>
When you place controls in the Dialog Editor, you do not need
to worry about which Java layout manager to use. You simply place
the control where you want it and move on to placing the next
control. How then does Java know where to place the controls?
<P>
The answer is in the second class created by Resource Wizard,
<TT>DialogLayout</TT>. The <TT>DialogLayout</TT> class is created
whenever you run Resource Wizard and have one or more dialog resources
in the resource template file. The <TT>DialogLayout</TT> class
implements the Java <TT>LayoutManager</TT> interface. It positions
components on a container based on their size and the position
in which they were placed in the Dialog Editor.
<P>
It is possible to use more than one resource template file to
create a single Java applet. In fact, it is a common practice
to keep commonly used or shared dialog resources in a file separate
from applet-specific dialog resources. When you run Resource Wizard
to convert each resource template, you will create multiple copies
of the <TT>DialogLayout</TT> class. If this happens, don't worry
about it. You need to add only one copy of <TT>DialogLayout</TT>
to your project workspace and all copies of this class are identical.
<H3><A NAME="OneWayCodeGeneration">
One-Way Code Generation</A></H3>
<P>
The Resource Wizard is a one-way tool. Changes propagate from
the resource template file into the generated Java source code.
Changes do not flow in the opposite direction. You cannot, for
example, edit a Resource Wizard-generated Java file and expect
to see the changes appear in the Dialog Editor.
<P>
To make a change to a dialog resource, use File | Open to open
the resource template file. Make the changes, save the file, and
then re-execute the Resource Wizard. If you make changes directly
to code generated by Resource Wizard, your changes will be overwritten
the next time you run Resource Wizard.
<H3><A NAME="AStepbyStepExample">
A Step-by-Step Example</A></H3>
<P>
Enough theory, it's time for an example. This section presents
an example of using the Dialog Editor to create a dialog resource,
running the Resource Wizard to convert the resource into usable
Java class code, and then modifying an applet to make use of the
new classes. Each of the steps necessary to do this will be described
in detail but the following is an overview of the steps necessary
to use a dialog resource in an applet:
<OL>
<LI>Create a new resource template.
<LI>Insert a dialog resource.
<LI>Set the dialog properties.
<LI>Place the components.
<LI>Run the Resource Wizard.
<LI>Add files to the project.
<LI>Write code to use the classes.
</OL>
<P>
Example <TT>EX07A</TT>, described at the end of this section,
illustrates how to use Resource Wizard-generated classes to simplify
user interface development. Each of these steps will be discussed
in relation to how it was performed in creating <TT>EX07A</TT>.
To follow along through each of the steps, use the Applet Wizard
to create a new applet. Before generating the applet, turn off
comments and multithreading.
<H4>Step 1: Create a New Resource Template</H4>
<P>
First, you need to create a new resource template file. This can
be done by selecting New from the File menu and selecting Resource
Template. Your project workspace will show the new, empty resource
template.
<H4>Step 2: Insert a Dialog Resource</H4>
<P>
Next, select Resource from the Insert menu. This will display
the Insert Resource dialog as shown in Figure 7.2. Select Dialog
and press OK to continue.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f7-2.gif"><B> Figure 7.2 : </B><I>The Insert Resource dialog.
</I></A><P>
<P>
At this point the Dialog Editor will be displayed and will contain
a dialog ready for editing. Your screen should look similar to
Figure 7.3.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f7-3.gif"><B> Figure 7.3 : </B><I>A new dialog resource ready for editing.
</I></A><P>
<H4>Step 3: Set the Dialog Properties</H4>
<P>
Each dialog resource has a set of properties you can set from
within the Dialog Editor. To view the Dialog Properties dialog,
double-click on the dialog or press Alt+Enter. You should see
a Dialog Properties dialog similar to the one shown in Figure
7.4.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f7-4.gif"><B> Figure 7.4 : </B><I>The Dialog Properties dialog.
</I></A><P>
<P>
Here you need to set the ID of the dialog resource you are creating.
The ID will be used as the name of the control creator class that
Resource Wizard will generate based on this dialog resource. For
example, in Figure 7.5 the ID is set to <TT>MyControls</TT>. This
means that a class named <TT>MyControls</TT> in <TT>MyControls.java</TT>
will be created by the Resource Wizard.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f7-5.gif"><B> Figure 7.5 : </B><I>An Edit Box, Static Text, and a Button have been placed on the dialog resource.
</I></A><P>
<H4>Step 4: Place the Components</H4>
<P>
Next, place the components on the dialog resource. To do this,
select an item in the Controls toolbox and drag it over the dialog.
Release it when it is in the proper position. To create example
<TT>EX07A</TT>, drag an <TT>Edit</TT> <TT>Box</TT>, a <TT>Button</TT>,
and a <TT>List</TT> <TT>Box</TT> onto the resource as shown in
Figure 7.5.
<P>
As you place each control, set its properties by double-clicking
on it. An <TT>Edit Box</TT> control in the Dialog Editor corresponds
to a Java <TT>TextField</TT> or <TT>TextArea</TT>. When you place
the <TT>Edit Box</TT> control on the resource, set its ID to <TT>NewText</TT>,
as shown in Figure 7.6. This will be the name given to the member
variable in the control creator class.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f7-6.gif"><B> Figure 7.6 : </B><I>Setting properties for the Edit Box control.
</I></A><P>
<P>
Similarly, the <TT>Button</TT> should be given an ID of <TT>AddButton</TT>
and the <TT>List Box</TT> should be given an ID of <TT>ItemList</TT>,
as shown in Figures 7.7 and 7.8, respectively. After adding these
controls, delete the OK and Cancel buttons that were provided
by default. When done adding controls, save the resource template.
It does not need to be saved in the same directory as your other
project files but doing so is usually more convenient. After saving,
you can close the Dialog Editor.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f7-7.gif"><B> Figure 7.7 : </B><I>Setting properties for the Button control.
</I></A><P>
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f7-8.gif"><B> Figure 7.8 : </B><I>Setting properties for the List Box control.
</I></A><P>
<P>
Because the Dialog Editor has its origins in Microsoft's Visual
C++ product it contains controls that cannot be used in Visual
J++. You should be careful to use only controls that can be converted
into Visual J++ components, as shown in Table 7.1.<BR>
<P>
<CENTER><B>Table 7.1. Supported Java components and their Dialog
Editor equivalents.</B></CENTER>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=60%>
<TR VALIGN=TOP><TD WIDTH=192><I>Java Component</I></TD><TD WIDTH=292><I>Dialog Editor Control</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>Button</TT></TD><TD WIDTH=292><TT>Button</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>Checkbox</TT> (ungrouped)</TD><TD WIDTH=292><TT>Check Box</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>Checkbox</TT> (grouped)</TD><TD WIDTH=292><TT>Radio Button</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>Choice</TT></TD><TD WIDTH=292><TT>Combo Box</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>Label</TT></TD><TD WIDTH=292><TT>Static text</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>List</TT></TD><TD WIDTH=292><TT>List Box</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>Scrollbar</TT></TD><TD WIDTH=292>Horizontal or vertical scrollbars
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>TextField</TT></TD><TD WIDTH=292><TT>Edit Box</TT> (with multiline set to <TT>false</TT>)
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>TextArea</TT></TD><TD WIDTH=292><TT>Edit Box</TT> (with multiline set to <TT>true</TT>)
</TD></TR>
</TABLE>
</CENTER>
<P>
<H4>Step 5: Run the Resource Wizard</H4>
<P>
By now you have created a new resource template file, added controls
to it, and saved the file. You are ready to run the Resource Wizard
to convert your work into Java source code. Run the Resource Wizard
by selecting Java Resource Wizard from the Tools menu. You will
be presented with the first of two Resource Wizard screens, as
shown in Figure 7.9. On this screen, enter the name of the resource
file you saved in the prior step and select the Next button.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f7-9.gif"><B> Figure 7.9 : </B><I>Enter the resource template filename in the first step of the Resource Wizard.
</I></A><P>
<P>
After pressing the Next button you see the second and final page
of the Resource Wizard, as shown in Figure 7.10. This screen summarizes
the dialog and menu resources that were found in the resource
template file. Additionally, it enables you to modify the name
of each class that will be generated if you don't like the names
you gave on the properties pages in the Dialog Editor.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f7-10.gif"><B> Figure 7.10 : </B><I>You can change class names on step 2 of the Resource Wizard.
</I></A><P>
<P>
Selecting Finish will display a summary screen and then generate
the necessary classes. In this example, <TT>MyControls.java</TT>
will be generated as a control creator class for the dialog resource
you designed and the standard <TT>DialogLayout.java</TT> will
also be generated.
<H4>Step 6: Add Files to the Project</H4>
<P>
Before you can use the classes that Resource Wizard has generated,
you must add them to your project. Do so by selecting Files into
Project from the Insert menu.
<H4>Step 7: Write Code to Use the Classes</H4>
<P>
At this point you're ready to use the generated code. The complete
<TT>EX07A</TT> class is shown in Listing 7.1. The lines of code
needed to use the generated code are shown in bold. First, you
must use <TT>import</TT> to make this class aware of the new Java
class.
<HR>
<BLOCKQUOTE>
<B>Listing 7.1. EX07A.java.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
import java.applet.*;
import java.awt.*;
import MyControls;

public class EX07A extends Applet
{
<B>    MyControls ctrls;

</B>    public void init()
    {
<B>        ctrls = new MyControls(this);
        ctrls.CreateControls();
</B>    }

    public boolean action(Event evt, Object obj)
    {
        if(&quot;Add&quot;.equals(obj))
        {
            String str = ctrls.NewText.getText();
            ctrls.ItemList.addItem(str);
            return true;
        }
        return false;
    }
}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
Next, a member instance variable, <TT>MyControls ctrls</TT>, is
declared. This variable is constructed in the <TT>init</TT> method
by passing <TT>this</TT> to the <TT>MyControls</TT> constructor.
Doing so creates an instance of <TT>MyControls</TT> that will
place its components directly on the applet. This is possible
because <TT>Applet</TT> is a subclass of <TT>Container</TT>. If,
instead, you wanted to place the components on a frame, you could
have passed a <TT>Frame</TT> object to the <TT>MyControls</TT>
constructor. Finally, <TT>ctrls.CreateControls</TT> is used to
actually create the controls.
<P>
You should also notice that it was not necessary to use <TT>resize</TT>
to set the size of the applet. Because the control creator class
sizes itself to the size of the dialog resource as drawn in the
Dialog Editor, it is not necessary to explicitly resize the applet.
<P>
The <TT>action</TT> method is provided to illustrate how to access
the individual components. It checks for a push of the Add button.
If detected, it gets the text out of the text field named <TT>ctrls.NewText</TT>
and adds this text as an item in the <TT>List</TT> named <TT>ctrls.ItemList</TT>.
When run, the applet will appear as shown in Figure 7.11.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f7-11.gif"><B> Figure 7.11 : </B><I>Example EX07A after  adding five items.
</I></A><P>
<H3><A NAME="UsingControlCreatorClassesonDialogs">
Using Control Creator Classes on Dialogs</A></H3>
<P>
In example <TT>EX07A</TT> you learned how to place Resource Wizard-generated
controls onto an applet. You learned that you should add code
to the applet's <TT>init</TT> method to create an instance of
the control creator class and then call <TT>CreateControls</TT>.
This works great for placing controls on an applet; however, how
do you place controls on a <TT>Dialog</TT> or <TT>Frame</TT> because
there is no <TT>init</TT> method in these classes?
<P>
Fortunately, placing Resource Wizard-generated controls on a <TT>Dialog</TT>
or <TT>Frame</TT> is even easier than placing them on an applet.
Rather than adding code to the <TT>init</TT> method of the applet,
you can create the controls in the constructor of the class you've
derived from <TT>Dialog</TT> or <TT>Frame</TT>. This can be seen
in example <TT>EX07B</TT>, shown in Listing 7.2.
<HR>
<BLOCKQUOTE>
<B>Listing 7.2. EX07B.java.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
import java.applet.*;
import java.awt.*;

public class EX07B extends Applet
{
    public void init()
    {
        resize(320, 240);

        // create a frame for the dialog
        // the frame isn't used but is the 
        // parent of the dialog
        Frame frame = new Frame();

        // create the dialog and show it
        TestDialog dlg = new TestDialog(frame);
        dlg.show();
    }
}


class TestDialog extends Dialog
{
    MyControls ctrls;        

    public TestDialog(Frame parent)
    {
        // invoke the Dialog constructor
        super(parent, &quot;Test Dialog&quot;, false);

        // set an appropriate font
        setFont(new Font(&quot;Dialog&quot;, Font.BOLD, 12));

        // create the controls made by Resource Wizard
        ctrls = new MyControls(this);
        ctrls.CreateControls();
    }

    public boolean action(Event evt, Object arg) 
    {
        boolean result = false;

        // when the Close button is pressed, close the dialog
        if(&quot;Close&quot;.equals(evt.arg)) {
            dispose();
            result = true;
        }
        return result;
    }     
}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
In this example, the class <TT>EX07B</TT> extends <TT>Applet</TT>
and creates a <TT>Frame</TT> to serve as the dialog's parent.
Next, an instance of the <TT>TestDialog</TT> class is created
and the <TT>show</TT> method is used to display it. The <TT>TestDialog</TT>
constructor is where all the action is. This method uses <TT>super</TT>
to construct the dialog, <TT>setFont</TT> to set an appropriate
font for the dialog, and then creates the controls. An <TT>action</TT>
method is provided for the <TT>TestDialog</TT> class that disposes
of the dialog when its Close button is pressed.
<P>
It is important that you set the font the dialog will use. Normally
it isn't necessary to set the font. However, the <TT>DialogLayout</TT>
class generated by Resource Wizard uses the size of the current
font to help determine where to place controls. Because of this,
you should always use <TT>setFont</TT> when placing Resource Wizard-generated
controls on a <TT>Frame</TT> or <TT>Dialog</TT>. For more information
on fonts, see <A HREF="ch16.htm" >Chapter 16</A>, &quot;Sprucing Things Up with Colors
and Fonts.&quot;<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>TIP</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Remember, you need to use <TT>setFont</TT> on a <TT>Dialog</TT> or <TT>Frame</TT> that will use a Resource Wizard-generated control creator class. Forgetting to do so will cause the dialog to be displayed without its controls.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H2><A NAME="UsingtheResourceWizardtoCreateMenus"><FONT SIZE=5 COLOR=#FF0000>
Using the Resource Wizard to Create Menus</FONT></A></H2>
<P>
The process of visually designing menus in Visual J++ is completely
analogous to the process you just followed to visually create
and use a dialog resource. Instead of the Dialog Editor you use
the Menu Editor, but after designing and saving menu resources,
you still use the Resource Wizard to generate Java code. Because
menus do not use layout managers, you do not need to use the <TT>DialogLayout</TT>
class if you use only menus generated by Resource Wizard.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>TIP</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
In most cases, you should keep your menu and dialog resources in the same resource template file. Doing so reduces the number of times you will have to run Resource Wizard to generate code.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H3><A NAME="AStepbyStepMenuExample">
A Step-by-Step Menu Example</A></H3>
<P>
Because much of what you'll do to create a menu with the Resource
Wizard is similar to what you've already done with dialogs, let's
dive right in with an example. This section presents an example
of using the Menu Editor to create a menu resource, running the
Resource Wizard to convert the resource into usable Java code,
and then modifying an applet to make use of the generated code.
Each of the steps necessary to do this will be described in detail
but the following is an overview of the steps necessary to use
a menu resource in an applet:
<OL>
<LI>Create a new resource template.
<LI>Insert a menu resource.
<LI>Set the menu properties.
<LI>Design the menu.
<LI>Run the Resource Wizard.
<LI>Add the menu class to the project.
<LI>Write code to use the menu.
</OL>
<P>
Example <TT>EX07C</TT>, which is also included on the CD-ROM,
will be built by following these steps. Before getting started,
create a new applet with the Applet Wizard. Before generating
the applet, turn off comments and multithreading.
<H4>Step 1: Create a New Resource Template</H4>
<P>
After selecting New from the File menu, you will be presented
with a list of new file types. Select Resource Template and press
OK.
<H4>Step 2: Insert a Menu Resource</H4>
<P>
Next, select Resource from the Insert menu. This displays the
Insert Resource dialog that was shown in Figure 7.3. Select Menu
and press OK to continue. At this point, the Menu Editor will
be displayed and will contain a dialog ready for editing. Your
screen should look similar to Figure 7.12. In this example, the
Menu Editor is shown at the right of the Visual J++ desktop with
an empty menu item highlighted and ready to be edited.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f7-12.gif"><B> Figure 7.12 : </B><I>A new menu resource  ready for editing.
</I></A><P>
<H4>Step 3: Set the Menu Properties</H4>
<P>
As with dialog resources, you can set the properties of a menu
resource. To set the menu's properties, double-click over the
menu or press Alt+Enter. The Menu Properties dialog, as shown
in Figure 7.13, is displayed. The only property you can set for
a menu is its ID. The name you enter here will be the name of
the class generated by the Resource Wizard.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f7-13.gif"><B> Figure 7.13 : </B><I>The Menu Properties dialog.
</I></A><P>
<H4>Step 4: Design the Menu</H4>
<P>
In the Menu Editor you start with an empty menu with an outline
border where the first menu item should be, as shown in Figure
7.13. You can double-click the mouse in that outline and create
a menu item by settings its properties, as shown in Figure 7.15.
After you create a menu item on the menu bar, you will have an
outline border below the menu bar (indicating a true Java <TT>MenuItem</TT>)
and another outline border on the menu bar adjacent to the first
menu name. These can also be seen in Figure 7.14.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f7-14.gif"><B> Figure 7.14 : </B><I>Setting the properties of a pop-up menu item.
</I></A><P>
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f7-15.gif"><B> Figure 7.15 : </B><I>Setting the properties of a menu item.
</I></A><P>
<P>
In the Menu Editor you can create two types of menu item: a pop-up
menu item and a regular menu item. A pop-up menu item does not
necessarily pop up; this is a generic term for any menu item that
is really the top level of another menu. Therefore, the menu items
across a menu bar are pop-up menu items and the items that drop
down beneath these are not pop-up menu items. Figure 7.14 illustrated
the creation of a pop-up menu item that will appear across the
top menu bar. By comparison, Figure 7.15 shows the properties
that may be set for a normal menu item.
<P>
For all menu items you set a caption that will appear as the text
on the screen. For regular menu items you may also specify a value
for the ID field. This value will be used to assign a name to
the member variable that Resource Wizard will create based on
the menu item.
<P>
You can create a submenu by indicating that a menu item that is
dropped down from the menu bar is a pop-up menu. This is done
for the Racquet Sports menu item in Figure 7.16.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f7-16.gif"><B> Figure 7.16 : </B><I>Setting pop-up on a menu item creates a submenu.
</I></A><P>
<P>
To create example <TT>EX07C</TT> , create a Team Sports menu that
includes Football and Baseball as menu items. Also, create an
Individual Sports menu on the menu bar that includes a Swimming
menu item and a Racquet Sports pop-up menu item. Beneath the Racquet
Sports submenu create menu items for Tennis and Racquetball.
<P>
When finished, save the resource template file.
<H4>Step 5: Run the Resource Wizard</H4>
<P>
Select Java Resource Wizard from the Tools menu. Select the newly
saved resource template and press Finish to generate your menu
class file. For each menu resource in the resource template, the
Resource Wizard will create a single Java class. In this example,
the menu was named <TT>MainMenu</TT>, so <TT>MainMenu.java</TT>
will be created.
<H4>Step 6: Add the Menu Class to the Project</H4>
<P>
Select Files into Project from the Insert menu to add the menu
class to the project.
<H4>Step 7: Write Code to Use the Menu</H4>
<P>
The last step is to write code to make use of the generated classes.
Listing 7.3 shows the contents of <TT>EX07C.java</TT>, a class
that uses the menu resource that was created during the preceding
steps. The lines of code needed to use the generated code are
shown in bold. As with all external classes in Java, you must
first use <TT>import</TT> to make this class aware of the new
Java class.
<HR>
<BLOCKQUOTE>
<B>Listing 7.3. EX07C.java.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
import java.applet.*;
import java.awt.*;
import MainMenu;

public class EX07C extends Applet
{
    MainMenu mainMenu;
    MenuFrame frame;

    public void init()
    {
        resize(320, 240);

        frame = new MenuFrame();
        frame.resize(300, 200);
mainMenu = new MainMenu(frame);
        mainMenu.CreateMenu();
        frame.show();
    }
}

class MenuFrame extends Frame
{
    String text = new String(&quot;You selected: Nothing&quot;);

    MenuFrame()
    {
        super(&quot;Select a Sport&quot;);
    }

    public void paint(Graphics g)
    {
        g.drawString(text, 10, 10);
    }

    public boolean action(Event evt, Object obj)
    {
        boolean result = false;

        if(evt.target instanceof MenuItem)
        {
            text = &quot;You selected: &quot; + (String)obj;
            repaint();
            result = true;
        }

        return result;
    }
}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
In the <TT>EX07C</TT> class, two member variables are declared.
The first is an instance of the <TT>MainMenu</TT> class created
by Resource Wizard. The second is an instance of a class called
<TT>MenuFrame</TT>. This class is defined later in the file and
is necessary because menus cannot be attached directly to an applet.
In the <TT>init</TT> method, the frame is constructed and resized.
The variable <TT>mainMenu</TT> is then constructed as an instance
of the <TT>MainMenu</TT> class. The variable <TT>frame</TT> is
passed to the <TT>MainMenu</TT> constructor indicating that the
menu will be displayed within <TT>frame</TT>.
<P>
Next, <TT>mainMenu.CreateMenu</TT> is used to create the menu
and all its menu items. This method is analogous to the <TT>CreateControls</TT>
method used with dialog resources. Finally, <TT>show</TT> is used
to display the frame.
<P>
The <TT>MenuFrame</TT> class is a simple extension of <TT>Frame</TT>.
Its <TT>paint</TT> method is used to display the contents of a
string and the string is set whenever the user selects a different
menu item. The results of executing this applet can be seen in
Figure 7.17.
<P>
<A HREF="http://docs.rinet.ru/WebJPP/f7-17.gif"><B> Figure 7.17 : </B><I>Executing an applet with  a menu created by the Resource Wizard.
</I></A><P>
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>
Summary</FONT></A></H2>
<P>
In this chapter you learned about the Resource Wizard and how
it can free you from some of the difficulties of hand-coding your
user interface. You learned how the Resource Wizard is a one-way
tool that turns your visual designs into Java classes that can
be used in your projects. In this chapter you also worked through
two examples: one using Resource Wizard with dialog resources
and a second using Resource Wizard with menu resources. In the
next chapter you will turn your attention to another time-saving
feature of Visual J++, the debugger.
<HR>

<CENTER><P><A HREF="ch6.htm"><IMG SRC="http://docs.rinet.ru/WebJPP/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="http://docs.rinet.ru/WebJPP/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="contents.htm"><IMG SRC="http://docs.rinet.ru/WebJPP/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch8.htm"><IMG SRC="http://docs.rinet.ru/WebJPP/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
