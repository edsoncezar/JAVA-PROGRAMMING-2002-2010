<HTML>
<HEAD>
<TITLE>appendix J -- java.lang Package Reference</TITLE>

<META>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">










<H1><FONT SIZE=6 COLOR=#FF0000>appendix&nbsp;J</FONT></H1>
<H1><FONT COLOR=#FF0000><TT>java.lang</TT></FONT><FONT SIZE=6 COLOR=#FF0000>
Package Reference</FONT></H1>
<HR>
<P>
<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>
<UL>
<LI><A HREF="#TTFONTSIZEFACECourierCloneableFONTTT">
<TT>Cloneable</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierRunnableFONTTT">
<TT>Runnable</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierBooleanFONTTT">
<TT>Boolean</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierCharacterFONTTT">
<TT>Character</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierClassFONTTT">
<TT>Class</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierClassLoaderFONTTT">
<TT>ClassLoader</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierCompilerFONTTT">
<TT>Compiler</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierDoubleFONTTT">
<TT>Double</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierFloatFONTTT">
<TT>Float</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierIntegerFONTTT">
<TT>Integer</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierLongFONTTT">
<TT>Long</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierMathFONTTT">
<TT>Math</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierNumberFONTTT">
<TT>Number</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierObjectFONTTT">
<TT>Object</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierProcessFONTTT">
<TT>Process</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierRuntimeFONTTT">
<TT>Runtime</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierSecurityManagerFONTTT">
<TT>SecurityManager</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierStringFONTTT">
<TT>String</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierStringBufferFONTTT">
<TT>StringBuffer</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierSystemFONTTT">
<TT>System</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierThreadFONTTT">
<TT>Thread</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierThreadGroupFONTTT">
<TT>ThreadGroup</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierThrowableFONTTT">
<TT>Throwable</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierRuntimeExceptionFONTTT1">
<TT>RuntimeException</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierClassNotFoundExceptionFONTTT">
<TT>ClassNotFoundException</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierCloneNotSupportedExceptionFONTTT">
<TT>CloneNotSupportedException</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierExceptionFONTTT">
<TT>Exception</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierIllegalAccessExceptionFONTTT">
<TT>IllegalAccessException</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierIllegalArgumentExceptionFONTTT">
<TT>IllegalArgumentException</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierIllegalMonitorStateExceptionFONTTT">
<TT>IllegalMonitorStateException</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierIllegalThreadStateExceptionFONTTT">
<TT>IllegalThreadStateException</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierIndexOutOfBoundsExceptionFONTTT">
<TT>IndexOutOfBoundsException</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierInstantiationExceptionFONTTT">
<TT>InstantiationException</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierInterruptedExceptionFONTTT">
<TT>InterruptedException</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierNegativeArraySizeExceptionFONTTT">
<TT>NegativeArraySizeException</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierNullPointerExceptionFONTTT">
<TT>NullPointerException</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierNumberFormatExceptionFONTTT">
<TT>NumberFormatException</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierRuntimeExceptionFONTTT2">
<TT>RuntimeException</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierSecurityExceptionFONTTT">
<TT>SecurityException</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierStringIndexOutOfBoundsExceptionFONTTT">
<TT>StringIndexOutOfBoundsException</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierAbstractMethodErrorFONTTT">
<TT>AbstractMethodError</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierClassFormatErrorFONTTT">
<TT>ClassFormatError</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierErrorFONTTT">
<TT>Error</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierIllegalAccessErrorFONTTT">
<TT>IllegalAccessError</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierIncompatibleClassChangeErrorFONTTT">
<TT>IncompatibleClassChangeError</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierInstantiationErrorFONTTT">
<TT>InstantiationError</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierInternalErrorFONTTT">
<TT>InternalError</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierLinkageErrorFONTTT">
<TT>LinkageError</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierNoClassDefFoundErrorFONTTT">
<TT>NoClassDefFoundError</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierNoSuchFieldErrorFONTTT">
<TT>NoSuchFieldError</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierNoSuchMethodErrorFONTTT">
<TT>NoSuchMethodError</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierOutOfMemoryErrorFONTTT">
<TT>OutOfMemoryError</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierStackOverflowErrorFONTTT">
<TT>StackOverflowError</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierThreadDeathFONTTT">
<TT>ThreadDeath</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierUnknownErrorFONTTT">
<TT>UnknownError</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierUnsatisfiedLinkErrorFONTTT">
<TT>UnsatisfiedLinkError</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierVerifyErrorFONTTT">
<TT>VerifyError</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierVirtualMachineErrorFONTTT">
<TT>VirtualMachineError</TT>
</A>
</UL>

<HR>
<P>
The <TT>java.lang</TT> package provides
the core classes that make up the Java programming environment.
The language package includes classes representing numbers, strings,
and objects, as well as classes for handling compilation, the
runtime environment, security, and threaded programming. The <TT>java.lang</TT>
package is automatically imported into every Java program.
<H2><A NAME="TTFONTSIZEFACECourierCloneableFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Cloneable</TT></FONT></A></H2>
<P>
This interface indicates that an object may be cloned using the
<TT>clone</TT> method defined in <TT>Object</TT>.
The <TT>clone</TT> method clones an
object by copying each of its member variables. Attempts to clone
an object that doesn't implement the <TT>Cloneable</TT>
interface result in a <TT>CloneNotSupportedException</TT>
being thrown.
<H2><A NAME="TTFONTSIZEFACECourierRunnableFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Runnable</TT></FONT></A></H2>
<P>
This interface provides a means for an object to be executed within
a thread without having to be derived from the <TT>Thread</TT>
class. Classes implementing the <TT>Runnable</TT>
interface supply a <TT>run</TT> method
that defines the threaded execution for the class.
<H4><TT>run</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void run()<BR>
</TT>This method is executed when a thread associated with
an object implementing the <TT>Runnable</TT>
interface is started. All of the threaded execution for the object
takes place in the <TT>run</TT> method,
which means you should place all threaded code in this method.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierBooleanFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Boolean</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>This class implements an object type wrapper for boolean
values. Object type wrappers are useful because many Java classes
operate on objects rather than primitive data types.
</BLOCKQUOTE>
<H4>Member Constants</H4>
<BLOCKQUOTE>
<PRE>
public final static Boolean FALSE
</PRE>
</BLOCKQUOTE>
<P>
This is a constant <TT>Boolean</TT>
object representing the primitive boolean value <TT>false</TT>.
<BLOCKQUOTE>
<PRE>
public final static Boolean TRUE
</PRE>
</BLOCKQUOTE>
<P>
This is a constant <TT>Boolean</TT>
object representing the primitive boolean value <TT>true</TT>.
<H4><TT>Boolean</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Boolean(boolean value)<BR>
</TT>This constructor creates a boolean wrapper object
representing the specified primitive boolean value.<BR>
<I><B>Parameters: </B></I><TT>value</TT>-the
boolean value to be wrapped.
</BLOCKQUOTE>
<H4><TT>Boolean</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Boolean(String s)<BR>
</TT>This constructor creates a boolean wrapper object
representing the specified string. If the string is set to <TT>&quot;true&quot;</TT>,
the wrapper represents the primitive boolean value <TT>true</TT>;
otherwise, the wrapper represents <TT>false</TT>.
<BR>
<I><B>Parameters: </B></I><TT>s</TT>-the
string representation of a boolean value to be wrapped.
</BLOCKQUOTE>
<H4><TT>booleanValue</TT></H4>
<BLOCKQUOTE>
<TT>public boolean booleanValue()<BR>
</TT>This method determines the primitive boolean value
represented by this object.<BR>
<I><B>Returns: </B></I>The boolean value represented.
</BLOCKQUOTE>
<H4><TT>equals</TT></H4>
<BLOCKQUOTE>
<TT>public boolean equals(Object obj)<BR>
</TT>This method compares the boolean value of the specified
object to the boolean value of this object. The <TT>equals</TT>
method returns <TT>true</TT> only
if the specified object is a <TT>Boolean</TT>
object representing the same primitive boolean value as this object.
<BR>
<I><B>Parameters: </B></I><TT>obj</TT>-the
object to compare.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the specified object is a <TT>Boolean</TT>
object representing the same primitive boolean value as this object;
<TT>false</TT> otherwise.
</BLOCKQUOTE>
<H4><TT>getBoolean</TT></H4>
<BLOCKQUOTE>
<TT>public static boolean getBoolean(String
name)<BR>
</TT>This method determines the boolean value of the system
property with the specified name.<BR>
<I><B>Parameters: </B></I><TT>name</TT>-the
system property name to check the boolean value of.<BR>
<I><B>Returns: </B></I>The boolean value of the specified system
property.
</BLOCKQUOTE>
<H4><TT>hashCode</TT></H4>
<BLOCKQUOTE>
<TT>public int hashCode()<BR>
</TT>This method calculates a hash code for this object.
<BR>
<I><B>Returns: </B></I>A hash code for this object.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>This method determines a string representation of
the primitive boolean value for this object. If the boolean value
is <TT>true</TT>, the string <TT>&quot;true&quot;</TT>
is returned; otherwise, the string <TT>&quot;false&quot;</TT>
is returned.<BR>
<I><B>Returns: </B></I>A string representing the boolean value
of this object.
</BLOCKQUOTE>
<H4><TT>valueOf</TT></H4>
<BLOCKQUOTE>
<TT>public static Boolean valueOf(String
s)<BR>
</TT>This method creates a new boolean wrapper object based
on the boolean value represented by the specified string. If the
string is set to <TT>&quot;true&quot;</TT>,
the wrapper represents the primitive boolean value <TT>true</TT>;
otherwise, the wrapper represents <TT>false</TT>.
<BR>
<I><B>Parameters: </B></I><TT>s</TT>-the
string representation of a boolean value to be wrapped.<BR>
<I><B>Returns: </B></I>A boolean wrapper object representing the
specified string.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierCharacterFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Character</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>This class implements an object type wrapper for character
values. Object type wrappers are useful because many Java classes
operate on objects rather than primitive data types.
</BLOCKQUOTE>
<H4>Member Constants</H4>
<BLOCKQUOTE>
<PRE>
public final static int MAX_RADIX
</PRE>
</BLOCKQUOTE>
<P>
This is a constant representing the maximum radix value allowed
for conversion between numbers and strings. This constant is set
to <TT>36</TT>.
<BLOCKQUOTE>
<PRE>
public final static int MAX_VALUE
</PRE>
</BLOCKQUOTE>
<P>
This is a constant representing the largest character value supported.
This constant is set to <TT>'\uffff'</TT>.
<BLOCKQUOTE>
<PRE>
public final static int MIN_RADIX
</PRE>
</BLOCKQUOTE>
<P>
This is a constant representing the minimum radix value allowed
for conversion between numbers and strings. This constant is set
to <TT>2</TT>.
<BLOCKQUOTE>
<PRE>
public final static int MIN_VALUE
</PRE>
</BLOCKQUOTE>
<P>
This is a constant representing the smallest character value supported.
This constant is set to <TT>'\u0000'</TT>.
<H4><TT>Character</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public Character(char value)<BR>
</TT>This constructor creates a character wrapper object
representing the specified primitive character value.<BR>
<I><B>Parameters: </B></I><TT>value</TT>-the
character value to be wrapped.
</BLOCKQUOTE>
<H4><TT>charValue</TT></H4>
<BLOCKQUOTE>
<TT>public char charValue()<BR>
</TT>This method determines the primitive character value
represented by this object.<BR>
<I><B>Returns: </B></I>The character value represented.
</BLOCKQUOTE>
<H4><TT>digit</TT></H4>
<BLOCKQUOTE>
<TT>public static int digit(char ch, int
radix)<BR>
</TT>This method determines the numeric value of the specified
character digit using the specified radix.<BR>
<I><B>Parameters: <BR>
</B></I><TT>ch</TT>-the character
to be converted to a number.<BR>
<TT>radix</TT>-the radix to use in
the conversion.<BR>
<I><B>Returns: </B></I>The numeric value of the specified character
digit using the specified radix, or <TT>-1</TT>
if the character isn't a valid numeric digit.
</BLOCKQUOTE>
<H4><TT>equals</TT></H4>
<BLOCKQUOTE>
<TT>public boolean equals(Object obj)<BR>
</TT>This method compares the character value of the specified
object to the character value of this object. The <TT>equals</TT>
method returns <TT>true</TT> only
if the specified object is a <TT>Character</TT>
object representing the same primitive character value as this
object.<BR>
<I><B>Parameters: </B></I><TT>obj</TT>-the
object to compare.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the specified object is a <TT>Character</TT>
object representing the same primitive character value as this
object; <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H4><TT>forDigit</TT></H4>
<BLOCKQUOTE>
<TT>public static char forDigit(int digit,
int radix)<BR>
</TT>This method determines the character value of the
specified numeric digit using the specified radix.<BR>
<I><B>Parameters: <BR>
</B></I><TT>digit</TT>-the numeric
digit to be converted to a character.<BR>
<TT>radix</TT>-the radix to use in
the conversion.<BR>
<I><B>Returns: </B></I>The character value of the specified numeric
digit using the specified radix, or <TT>0</TT>
if the number isn't a valid character.
</BLOCKQUOTE>
<H4><TT>hashCode</TT></H4>
<BLOCKQUOTE>
<TT>public int hashCode()<BR>
</TT>This method calculates a hash code for this object.
<BR>
<I><B>Returns: </B></I>A hash code for this object.
</BLOCKQUOTE>
<H4><TT>isDefined</TT></H4>
<BLOCKQUOTE>
<TT>public static boolean isDefined(char
ch)<BR>
</TT>This method determines if the specified character
has a defined Unicode meaning. A character is defined if it has
an entry in the Unicode attribute table.<BR>
<I><B>Parameters: </B></I><TT>ch</TT>-the
character to be checked.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the character has a defined Unicode meaning; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>isDigit</TT></H4>
<BLOCKQUOTE>
<TT>public static boolean isDigit(char ch)
<BR>
</TT>This method determines if the specified character
is a numeric digit. A character is a numeric digit if its Unicode
name contains the word <TT>DIGIT</TT>.
<BR>
<I><B>Parameters: </B></I><TT>ch</TT>-the
character to be checked.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the character is a numeric digit; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>isJavaLetter</TT></H4>
<BLOCKQUOTE>
<TT>public static boolean isJavaLetter(char
ch)<BR>
</TT>This method determines if the specified character
is permissible as the leading character in a Java identifier.
A character is considered a Java letter if it is a letter, the
ASCII dollar sign character (<TT>$</TT>),
or the underscore character (<TT>_</TT>).
<BR>
<I><B>Parameters: </B></I><TT>ch</TT>-the
character to be checked.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the character is a Java letter; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>isJavaLetterOrDigit</TT></H4>
<BLOCKQUOTE>
<TT>public static boolean isJavaLetterOrDigit(char
ch)<BR>
</TT>This method determines if the specified character
is permissible as a non-leading character in a Java identifier.
A character is considered a Java letter or digit if it is a letter,
a digit, the ASCII dollar sign character (<TT>$</TT>),
or the underscore character (<TT>_</TT>).
<BR>
<I><B>Parameters: </B></I><TT>ch</TT>-the
character to be checked.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the character is a Java letter or digit; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>isLetter</TT></H4>
<BLOCKQUOTE>
<TT>public static boolean isLetter(char ch)
<BR>
</TT>This method determines if the specified character
is a letter.<BR>
<I><B>Parameters: </B></I><TT>ch</TT>-the
character to be checked.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the character is a letter; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>isLetterOrDigit</TT></H4>
<BLOCKQUOTE>
<TT>public static boolean isLetterOrDigit(char
ch)<BR>
</TT>This method determines if the specified character
is a letter or digit.<BR>
<I><B>Parameters: </B></I><TT>ch</TT>-the
character to be checked.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the character is a letter or digit; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>isLowerCase</TT></H4>
<BLOCKQUOTE>
<TT>public static boolean isLowerCase(char
ch)<BR>
</TT>This method determines if the specified character
is a lowercase character.<BR>
<I><B>Parameters: </B></I><TT>ch</TT>-the
character to be checked.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the character is a lowercase character; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>isSpace</TT></H4>
<BLOCKQUOTE>
<TT>public static boolean isSpace(char ch)
<BR>
</TT>This method determines if the specified character
is a whitespace character.<BR>
<I><B>Parameters: </B></I><TT>ch</TT>-the
character to be checked.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the character is a whitespace character; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>isTitleCase</TT></H4>
<BLOCKQUOTE>
<TT>public static boolean isTitleCase(char
ch)<BR>
</TT>This method determines if the specified character
is a titlecase character. Titlecase characters are those whose
printed representations look like pairs of Latin letters.<BR>
<I><B>Parameters: </B></I><TT>ch</TT>-the
character to be checked.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the character is a titlecase character; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>isUpperCase</TT></H4>
<BLOCKQUOTE>
<TT>public static boolean isUpperCase(char
ch)<BR>
</TT>This method determines if the specified character
is an uppercase character.<BR>
<I><B>Parameters: </B></I><TT>ch</TT>-the
character to be checked.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the character is an uppercase character; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>toLowerCase</TT></H4>
<BLOCKQUOTE>
<TT>public static char toLowerCase(char ch)
<BR>
</TT>This method converts the specified character to a
lowercase character, if the character isn't already lowercase
and a lowercase equivalent exists.<BR>
<I><B>Parameters: </B></I><TT>ch</TT>-the
character to be converted.<BR>
<I><B>Returns: </B></I>The lowercase equivalent of the specified
character, if one exists; otherwise, the original character.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>This method determines a string representation of
the primitive character value for this object; the resulting string
is one character in length.<BR>
<I><B>Returns: </B></I>A string representing the character value
of this object.
</BLOCKQUOTE>
<H4><TT>toTitleCase</TT></H4>
<BLOCKQUOTE>
<TT>public static char toTitleCase(char ch)
<BR>
</TT>This method converts the specified character to a
titlecase character, if the character isn't already titlecase
and a titlecase equivalent exists. Titlecase characters are those
whose printed representations look like pairs of Latin letters.
<BR>
<I><B>Parameters: </B></I><TT>ch</TT>-the
character to be converted.<BR>
<I><B>Returns: </B></I>The titlecase equivalent of the specified
character, if one exists; otherwise, the original character.
</BLOCKQUOTE>
<H4><TT>toUpperCase</TT></H4>
<BLOCKQUOTE>
<TT>public static char toUpperCase(char ch)
<BR>
</TT>This method converts the specified character to an
uppercase character, if the character isn't already uppercase
and an uppercase equivalent exists.<BR>
<I><B>Parameters: </B></I><TT>ch</TT>-the
character to be converted.<BR>
<I><B>Returns: </B></I>The uppercase equivalent of the specified
character, if one exists; otherwise, the original character.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierClassFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Class</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>This class implements a runtime descriptor for classes
and interfaces in a running Java program. Instances of <TT>Class</TT>
are automatically constructed by the Java virtual machine when
classes are loaded, which explains why there are no public constructors
for the class.
</BLOCKQUOTE>
<H4><TT>forName</TT></H4>
<BLOCKQUOTE>
<TT>public static Class forName(String className)
throws ClassNotFoundException<BR>
</TT>This method determines the runtime class descriptor
for the class with the specified name.<BR>
<I><B>Parameters: </B></I><TT>className</TT>-the
fully qualified name of the desired class.<BR>
<I><B>Returns: </B></I>The runtime class descriptor for the class
with the specified name.<BR>
<I><B>Throws: </B></I><TT>ClassNotFoundException</TT>
if the class could not be found.
</BLOCKQUOTE>
<H4><TT>getClassLoader</TT></H4>
<BLOCKQUOTE>
<TT>public ClassLoader getClassLoader()<BR>
</TT>This method determines the class loader for this object.
<BR>
<I><B>Returns: </B></I>The class loader for this object, or null
if the class wasn't created by a class loader.
</BLOCKQUOTE>
<H4><TT>getInterfaces</TT></H4>
<BLOCKQUOTE>
<TT>public Class[] getInterfaces()<BR>
</TT>This method determines the interfaces implemented
by the class or interface represented by this object.<BR>
<I><B>Returns: </B></I>An array of interfaces implemented by the
class or interface represented by this object, or an array of
length 0 if no interfaces are implemented.
</BLOCKQUOTE>
<H4><TT>getName</TT></H4>
<BLOCKQUOTE>
<TT>public String getName()<BR>
</TT>This method determines the fully qualified name of
the class or interface represented by this object.<BR>
<I><B>Returns: </B></I>The fully qualified name of the class or
interface represented by this object.
</BLOCKQUOTE>
<H4><TT>getSuperclass</TT></H4>
<BLOCKQUOTE>
<TT>public Class getSuperclass()<BR>
</TT>This method determines the superclass of the class
represented by this object.<BR>
<I><B>Returns: </B></I>The superclass of the class represented
by this object, or null if this object represents the <TT>Object</TT>
class.
</BLOCKQUOTE>
<H4><TT>isInterface</TT></H4>
<BLOCKQUOTE>
<TT>public boolean isInterface()<BR>
</TT>This method determines if the class represented by
this object is actually an interface.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the class is an interface; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>newInstance</TT></H4>
<BLOCKQUOTE>
<TT>public Object newInstance() throws InstantiationException,
IllegalAccessException<BR>
</TT>This method creates a new default instance of the
class represented by this object.<BR>
<I><B>Returns: </B></I>A new default instance of the class represented
by this object.<BR>
<I><B>Throws: </B></I><TT>InstantiationException</TT>
if you try to instantiate an abstract class or an interface, or
if the instantiation fails for some other reason.<BR>
<I><B>Throws: </B></I><TT>IllegalAccessException</TT>
if the class is not accessible.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>This method determines the name of the class or interface
represented by this object, with the string <TT>&quot;class&quot;</TT>
or the string <TT>&quot;interface&quot;</TT>
prepended appropriately.<BR>
<I><B>Returns: </B></I>The name of the class or interface represented
by this object, with a descriptive string prepended indicating
whether the object represents a class or interface.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierClassLoaderFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>ClassLoader</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>This class is an abstract class that defines a mechanism
for dynamically loading classes into the Java runtime system.
</BLOCKQUOTE>
<H4><TT>ClassLoader</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>protected ClassLoader()<BR>
</TT>This constructor creates a default class loader. If
a security manager is present, it is checked to see if the current
thread has permission to create the class loader. If not, a <TT>SecurityException</TT>
is thrown.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread doesn't have permission to create the class
loader.
</BLOCKQUOTE>
<H4><TT>defineClass</TT></H4>
<BLOCKQUOTE>
<TT>protected final Class defineClass(byte
b[], int off, int len)<BR>
</TT>This method converts an array of bytes into an instance
of class <TT>Class</TT> by reading
<TT>len</TT> bytes from the array
<TT>b</TT> beginning <TT>off</TT>
bytes into the array.<BR>
<I><B>Parameters: <BR>
</B></I><TT>b</TT>-the byte array
containing the class data.<BR>
<TT>off</TT>-the starting offset into
the array for the data.<BR>
<TT>len</TT>-the length in bytes of
the class data.<BR>
<I><B>Returns: </B></I>A <TT>Class</TT>
object created from the class data.<BR>
<I><B>Throws: </B></I><TT>ClassFormatError</TT>
if the class data does not define a valid class.
</BLOCKQUOTE>
<H4><TT>findSystemClass</TT></H4>
<BLOCKQUOTE>
<TT>protected final Class findSystemClass(String
name) throws ClassNotFoundException<BR>
</TT>This method finds the system class with the specified
name, loading it if necessary. A system class is a class loaded
from the local file system with no class loader in a platform-specific
manner.<BR>
<I><B>Parameters: </B></I><TT>name</TT>-the
name of the system class to find.<BR>
<I><B>Returns: </B></I>A <TT>Class</TT>
object representing the system class.<BR>
<I><B>Throws: </B></I><TT>ClassNotFoundException</TT>
if the class is not found.<BR>
<I><B>Throws: </B></I><TT>NoClassDefFoundError</TT>
if a definition for the class is not found.
</BLOCKQUOTE>
<H4><TT>loadClass</TT></H4>
<BLOCKQUOTE>
<TT>protected abstract Class loadClass(String
name, boolean resolve)<BR>
throws ClassNotFoundException<BR>
</TT>This method loads the class with the specified name,
resolving it if the <TT>resolve</TT>
parameter is set to <TT>true</TT>.
This method must be implemented in all derived class loaders,
because it is defined as abstract.<BR>
<I><B>Parameters: <BR>
</B></I><TT>name</TT>-the name of
the desired class.<BR>
<TT>resolve</TT>-a boolean value specifying
whether the class is to be resolved; a value of <TT>true
</TT>means the class is resolved, whereas a value of <TT>false</TT>
means the class isn't resolved.<BR>
<I><B>Returns: </B></I>The loaded <TT>Class</TT>
object, or null if the class isn't found.<BR>
<I><B>Throws: </B></I><TT>ClassNotFoundException</TT>
if the class is not found.
</BLOCKQUOTE>
<H4><TT>resolveClass</TT></H4>
<BLOCKQUOTE>
<TT>protected final void resolveClass(Class
c)<BR>
</TT>This method resolves the specified class so that instances
of it can be created or so that its methods can be called.<BR>
<I><B>Parameters: </B></I><TT>c</TT>-the
class to be resolved.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierCompilerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Compiler</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>This class provides the framework for native Java
code compilers and related services. The Java runtime system looks
for a native code compiler on startup, in which case the compiler
is called to compile Java bytecode classes into native code.
</BLOCKQUOTE>
<H4><TT>command</TT></H4>
<BLOCKQUOTE>
<TT>public static Object command(Object any)
<BR>
</TT>This method performs some compiler-specific operation
based on the type of specified object and its related state.<BR>
<I><B>Parameters: </B></I><TT>any</TT>-the
object to perform an operation based on.<BR>
<I><B>Returns: </B></I>A compiler-specific value, or <TT>null</TT>
if no compiler is available.
</BLOCKQUOTE>
<H4><TT>compileClass</TT></H4>
<BLOCKQUOTE>
<TT>public static boolean compileClass(Class
clazz)<BR>
</TT>This method compiles the specified class.<BR>
<I><B>Parameters: </B></I><TT>clazz</TT>-the
class to compile.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the compilation was successful, <TT>false</TT>
if the compilation failed or if no compiler is available.
</BLOCKQUOTE>
<H4><TT>compileClasses</TT></H4>
<BLOCKQUOTE>
<TT>public static boolean compileClasses(String
string)<BR>
</TT>This method compiles all classes whose names match
the specified string name.<BR>
<I><B>Parameters: </B></I><TT>string</TT>-a
string containing the name of the classes to compile.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the compilation was successful, <TT>false</TT>
if the compilation failed or if no compiler is available.
</BLOCKQUOTE>
<H4><TT>disable</TT></H4>
<BLOCKQUOTE>
<TT>public static void disable()<BR>
</TT>This method disables the compiler.
</BLOCKQUOTE>
<H4><TT>enable</TT></H4>
<BLOCKQUOTE>
<TT>public static void enable()<BR>
</TT>This method enables the compiler.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierDoubleFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Double</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Number<BR>
</TT>This class implements an object type wrapper for double
values. Object type wrappers are useful because many Java classes
operate on objects rather than primitive data types.
</BLOCKQUOTE>
<H4>Member Constants</H4>
<BLOCKQUOTE>
<PRE>
public final static double MAX_VALUE
</PRE>
</BLOCKQUOTE>
<P>
This is a constant representing the maximum value allowed for
a double. This constant is set to 1.79769313486231570e+308d.
<BLOCKQUOTE>
<PRE>
public final static double MIN_VALUE
</PRE>
</BLOCKQUOTE>
<P>
This is a constant representing the minimum value allowed for
a double. This constant is set to 4.94065645841246544e-324d.
<BLOCKQUOTE>
<PRE>
public final static double NaN
</PRE>
</BLOCKQUOTE>
<P>
This is a constant representing the not-a-number value for double
types, which is not equal to anything, including itself.
<BLOCKQUOTE>
<PRE>
public final static double NEGATIVE_INFINITY
</PRE>
</BLOCKQUOTE>
<P>
This is a constant representing negative infinity for double types.
<BLOCKQUOTE>
<PRE>
public final static double POSITIVE_INFINITY
</PRE>
</BLOCKQUOTE>
<P>
This is a constant representing positive infinity for double types.
<H4><TT>Double</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Double(double value)<BR>
</TT>This constructor creates a double wrapper object representing
the specified primitive double value.<BR>
<I><B>Parameters: </B></I><TT>value</TT>-the
double value to be wrapped.
</BLOCKQUOTE>
<H4><TT>Double</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Double(String s) throws NumberFormatException
<BR>
</TT>This constructor creates a double wrapper object representing
the specified string. The string is converted to a double using
a similar technique as the <TT>valueOf</TT>
method.<BR>
<I><B>Parameters: </B></I><TT>s</TT>-the
string representation of a double value to be wrapped.<BR>
<I><B>Throws: </B></I><TT>NumberFormatException</TT>
if the string does not contain a parsable double.
</BLOCKQUOTE>
<H4><TT>doubleToLongBits</TT></H4>
<BLOCKQUOTE>
<TT>public static long doubleToLongBits(double
value)<BR>
</TT>This method determines the IEEE 754 floating-point
double precision representation of the specified double value.
The IEEE 754 floating-point double precision format specifies
the following bit layout:
</BLOCKQUOTE>
<UL>
<LI>63 represents the sign of the number.
<LI>62-52 represent the exponent of the number.
<LI>51-0 represent the mantissa of the number.
</UL>
<BLOCKQUOTE>
<I><B>Parameters: </B></I><TT>value</TT>-the
double value to convert to the IEEE 754 format.<BR>
<I><B>Returns: </B></I>The IEEE 754 floating-point representation
of the specified double value.
</BLOCKQUOTE>
<H4><TT>doubleValue</TT></H4>
<BLOCKQUOTE>
<TT>public double doubleValue()<BR>
</TT>This method determines the primitive double value
represented by this object.<BR>
<I><B>Returns: </B></I>The double value represented.
</BLOCKQUOTE>
<H4><TT>equals</TT></H4>
<BLOCKQUOTE>
<TT>public boolean equals(Object obj)<BR>
</TT>This method compares the double value of the specified
object to the double value of this object. The <TT>equals</TT>
method only returns <TT>true</TT>
if the specified object is a <TT>Double</TT>
object representing the same primitive double value as this object.
Note that to be useful in hash tables, this method considers two
<TT>NaN</TT> double values to be equal,
even though <TT>NaN</TT> technically
is not equal to itself.<BR>
<I><B>Parameters: </B></I><TT>obj</TT>-the
object to compare.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the specified object is a <TT>Double</TT>
object representing the same primitive double value as this object;
<TT>false</TT> otherwise.
</BLOCKQUOTE>
<H4><TT>floatValue</TT></H4>
<BLOCKQUOTE>
<TT>public float floatValue()<BR>
</TT>This method converts the primitive double value represented
by this object to a float.<BR>
<I><B>Returns: </B></I>A float conversion of the double value
represented.
</BLOCKQUOTE>
<H4><TT>hashCode</TT></H4>
<BLOCKQUOTE>
<TT>public int hashCode()<BR>
</TT>This method calculates a hash code for this object.
<BR>
<I><B>Returns: </B></I>A hash code for this object.
</BLOCKQUOTE>
<H4><TT>intValue</TT></H4>
<BLOCKQUOTE>
<TT>public int intValue()<BR>
</TT>This method converts the primitive double value represented
by this object to an integer.<BR>
<I><B>Returns: </B></I>An integer conversion of the double value
represented.
</BLOCKQUOTE>
<H4><TT>isInfinite</TT></H4>
<BLOCKQUOTE>
<TT>public boolean isInfinite()<BR>
</TT>This method determines if the primitive double value
represented by this object is positive or negative infinity.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the double value is positive or negative infinity; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>isInfinite</TT></H4>
<BLOCKQUOTE>
<TT>public static boolean isInfinite(double
v)<BR>
</TT>This method determines if the specified double value
is positive or negative infinity.<BR>
<I><B>Parameters: </B></I><TT>v</TT>-the
double value to be checked.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the double value is positive or negative infinity; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>isNaN</TT></H4>
<BLOCKQUOTE>
<TT>public boolean isNaN()<BR>
</TT>This method determines if the primitive double value
represented by this object is not a number (<TT>NaN</TT>).
<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the double value is not a number; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>isNaN</TT></H4>
<BLOCKQUOTE>
<TT>public static boolean isNaN(double v)
<BR>
</TT>This method determines if the specified double value
is not a number (<TT>NaN</TT>).<BR>
<I><B>Parameters: </B></I><TT>v</TT>-the
double value to be checked.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the double value is not a number; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>longBitsToDouble</TT></H4>
<BLOCKQUOTE>
<TT>public static double longBitsToDouble(long
bits)<BR>
</TT>This method determines the double representation of
the specified IEEE 754 floating-point double precision value.
The IEEE 754 floating-point double precision format specifies
the following bit layout:
</BLOCKQUOTE>
<UL>
<LI>63 represents the sign of the number.
<LI>62-52 represent the exponent of the number.
<LI>51-0 represent the mantissa of the number.
</UL>
<BLOCKQUOTE>
<I><B>Parameters: </B></I><TT>bits</TT>-the
IEEE 754 floating-point value to convert to a double.<BR>
<I><B>Returns: </B></I>The double representation of the specified
IEEE 754 floating-point value.
</BLOCKQUOTE>
<H4><TT>longValue</TT></H4>
<BLOCKQUOTE>
<TT>public long longValue()<BR>
</TT>This method converts the primitive double value represented
by this object to a long.<BR>
<I><B>Returns: </B></I>A long conversion of the double value represented.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>This method determines a string representation of
the primitive double value for this object.<BR>
<I><B>Returns: </B></I>A string representing the double value
of this object.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public static String toString(double
d)<BR>
</TT>This method determines a string representation of
the specified double value.<BR>
<I><B>Parameters: </B></I><TT>d</TT>-the
double value to be converted.<BR>
<I><B>Returns: </B></I>A string representing the specified double
value.
</BLOCKQUOTE>
<H4><TT>valueOf</TT></H4>
<BLOCKQUOTE>
<TT>public static Double valueOf(String s)
throws NumberFormatException<BR>
</TT>This method creates a new double wrapper object based
on the double value represented by the specified string.<BR>
<I><B>Parameters: </B></I><TT>s</TT>-the
string representation of a double value to be wrapped.<BR>
<I><B>Returns: </B></I>A double wrapper object representing the
specified string.<BR>
<I><B>Throws: </B></I><TT>NumberFormatException</TT>
if the string does not contain a parsable double.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierFloatFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Float</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Number<BR>
</TT>This class implements an object type wrapper for float
values. Object type wrappers are useful because many Java classes
operate on objects rather than primitive data types.
</BLOCKQUOTE>
<H4>Member Constants</H4>
<BLOCKQUOTE>
<PRE>
public final static float MAX_VALUE
</PRE>
</BLOCKQUOTE>
<P>
This is a constant representing the maximum value allowed for
a float. This constant is set to <TT>3.40282346638528860e+38</TT>.
<BLOCKQUOTE>
<PRE>
public final static float MIN_VALUE
</PRE>
</BLOCKQUOTE>
<P>
This is a constant representing the minimum value allowed for
a float. This constant is set to <TT>1.40129846432481707e-45</TT>.
<BLOCKQUOTE>
<PRE>
public final static float NaN
</PRE>
</BLOCKQUOTE>
<P>
This is a constant representing the not-a-number value for float
types, which is not equal to anything, including itself.
<BLOCKQUOTE>
<PRE>
public final static float NEGATIVE_INFINITY
</PRE>
</BLOCKQUOTE>
<P>
This is a constant representing negative infinity for float types.
<BLOCKQUOTE>
<PRE>
public final static float POSITIVE_INFINITY
</PRE>
</BLOCKQUOTE>
<P>
This is a constant representing positive infinity for float types.
<H4><TT>Float</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Float(double value)<BR>
</TT>This constructor creates a float wrapper object representing
the specified primitive double value.<BR>
<I><B>Parameters: </B></I><TT>value</TT>-the
double value to be wrapped.
</BLOCKQUOTE>
<H4><TT>Float</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Float(float value)<BR>
</TT>This constructor creates a float wrapper object representing
the specified primitive float value.<BR>
<I><B>Parameters: </B></I><TT>value</TT>-the
float value to be wrapped.
</BLOCKQUOTE>
<H4><TT>Float</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Float(String s) throws NumberFormatException
<BR>
</TT>This constructor creates a float wrapper object representing
the specified string. The string is converted to a float using
a similar technique as the <TT>valueOf</TT>
method.<BR>
<I><B>Parameters: </B></I><TT>s</TT>-the
string representation of a float value to be wrapped.<BR>
<I><B>Throws: </B></I><TT>NumberFormatException</TT>
if the string does not contain a parsable float.
</BLOCKQUOTE>
<H4><TT>doubleValue</TT></H4>
<BLOCKQUOTE>
<TT>public double doubleValue()<BR>
</TT>This method converts the primitive float value represented
by this object to a double.<BR>
<I><B>Returns: </B></I>A double conversion of the float value
represented.
</BLOCKQUOTE>
<H4><TT>equals</TT></H4>
<BLOCKQUOTE>
<TT>public boolean equals(Object obj)<BR>
</TT>This method compares the float value of the specified
object to the float value of this object. The <TT>equals</TT>
method only returns <TT>true</TT>
if the specified object is a <TT>Float</TT>
object representing the same primitive float value as this object.
Note that to be useful in hash tables, this method considers two
<TT>NaN</TT> float values to be equal,
even though <TT>NaN</TT> technically
is not equal to itself.<BR>
<I><B>Parameters: </B></I><TT>obj</TT>-the
object to compare.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the specified object is a <TT>Float</TT>
object representing the same primitive float value as this object;
<TT>false</TT> otherwise.
</BLOCKQUOTE>
<H4><TT>floatToIntBits</TT></H4>
<BLOCKQUOTE>
<TT>public static int floatToIntBits(float
value)<BR>
</TT>This method determines the IEEE 754 floating-point
single precision representation of the specified float value.
The IEEE 754 floating-point single precision format specifies
the following bit layout:
</BLOCKQUOTE>
<UL>
<LI>31 represents the sign of the number.
<LI>30-23 represent the exponent of the number.
<LI>22-0 represent the mantissa of the number.
</UL>
<BLOCKQUOTE>
<I><B>Parameters: </B></I><TT>value</TT>-the
float value to convert to the IEEE 754 format.<BR>
<I><B>Returns: </B></I>The IEEE 754 floating-point representation
of the specified float value.
</BLOCKQUOTE>
<H4><TT>floatValue</TT></H4>
<BLOCKQUOTE>
<TT>public float floatValue()<BR>
</TT>This method determines the primitive float value represented
by this object.<BR>
<I><B>Returns: </B></I>The float value represented.
</BLOCKQUOTE>
<H4><TT>hashCode</TT></H4>
<BLOCKQUOTE>
<TT>public int hashCode()<BR>
</TT>This method calculates a hash code for this object.
<BR>
<I><B>Returns: </B></I>A hash code for this object.
</BLOCKQUOTE>
<H4><TT>intBitsToFloat</TT></H4>
<BLOCKQUOTE>
<TT>public static float intBitsToFloat(int
bits)<BR>
</TT>This method determines the float representation of
the specified IEEE 754 floating-point single precision value.
The IEEE 754 floating-point single precision format specifies
the following bit layout:
</BLOCKQUOTE>
<UL>
<LI>31 represents the sign of the number.
<LI>30-23 represent the exponent of the number.
<LI>22-0 represent the mantissa of the number.
</UL>
<BLOCKQUOTE>
<I><B>Parameters: </B></I><TT>bits</TT>-the
IEEE 754 floating-point value to convert to a float.<BR>
<I><B>Returns: </B></I>The float representation of the specified
IEEE 754 floating-point value.
</BLOCKQUOTE>
<H4><TT>intValue</TT></H4>
<BLOCKQUOTE>
<TT>public int intValue()<BR>
</TT>This method converts the primitive float value represented
by this object to an integer.<BR>
<I><B>Returns: </B></I>An integer conversion of the float value
represented.
</BLOCKQUOTE>
<H4><TT>isInfinite</TT></H4>
<BLOCKQUOTE>
<TT>public boolean isInfinite()<BR>
</TT>This method determines if the primitive float value
represented by this object is positive or negative infinity.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the float value is positive or negative infinity; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>isInfinite</TT></H4>
<BLOCKQUOTE>
<TT>public static boolean isInfinite(float
v)<BR>
</TT>This method determines if the specified float value
is positive or negative infinity.<BR>
<I><B>Parameters: </B></I><TT>v</TT>-the
float value to be checked.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the float value is positive or negative infinity; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>isNaN</TT></H4>
<BLOCKQUOTE>
<TT>public boolean isNaN()<BR>
</TT>This method determines if the primitive float value
represented by this object is not a number (<TT>NaN</TT>).
<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the float value is not a number; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>isNaN</TT></H4>
<BLOCKQUOTE>
<TT>public static boolean isNaN(float v)
<BR>
</TT>This method determines if the specified float value
is not a number (<TT>NaN</TT>).<BR>
<I><B>Parameters: </B></I><TT>v</TT>-the
float value to be checked.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the float value is not a number; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>longValue</TT></H4>
<BLOCKQUOTE>
<TT>public long longValue()<BR>
</TT>This method converts the primitive float value represented
by this object to a long.<BR>
<I><B>Returns: </B></I>A long conversion of the float value represented.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>This method determines a string representation of
the primitive float value for this object.<BR>
<I><B>Returns: </B></I>A string representing the float value of
this object.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public static String toString(float f)
<BR>
</TT>This method determines a string representation of
the specified float value.<BR>
<I><B>Parameters: </B></I><TT>f</TT>-the
float value to be converted.<BR>
<I><B>Returns: </B></I>A string representing the specified float
value.
</BLOCKQUOTE>
<H4><TT>valueOf</TT></H4>
<BLOCKQUOTE>
<TT>public static Float valueOf(String s)
throws NumberFormatException<BR>
</TT>This method creates a new float wrapper object based
on the float value represented by the specified string.<BR>
<I><B>Parameters: </B></I><TT>s</TT>-the
string representation of a float value to be wrapped.<BR>
<I><B>Returns: </B></I>A float wrapper object representing the
specified string.<BR>
<I><B>Throws: </B></I><TT>NumberFormatException</TT>
if the string does not contain a parsable float.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierIntegerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Integer</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Number<BR>
</TT>This class implements an object type wrapper for integer
values. Object type wrappers are useful because many Java classes
operate on objects rather than primitive data types.
</BLOCKQUOTE>
<H4>Member Constants</H4>
<BLOCKQUOTE>
<TT>public final static int MAX_VALUE<BR>
</TT>This is a constant representing the maximum value
allowed for an integer. This constant is set to <TT>0x7fffffff</TT>.
<BR>
<TT>public final static int MIN_VALUE<BR>
</TT>This is a constant representing the minimum value
allowed for an integer. This constant is set to <TT>0x80000000</TT>.
</BLOCKQUOTE>
<H4><TT>Integer</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Integer(int value)<BR>
</TT>This constructor creates an integer wrapper object
representing the specified primitive integer value.<BR>
<I><B>Parameters: </B></I><TT>value</TT>-the
integer value to be wrapped.
</BLOCKQUOTE>
<H4><TT>Integer</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Integer(String s) throws NumberFormatException
<BR>
</TT>This constructor creates an integer wrapper object
representing the specified string. The string is converted to
an integer using a similar technique as the <TT>valueOf</TT>
method.<BR>
<I><B>Parameters: </B></I><TT>s</TT>-the
string representation of an integer value to be wrapped.<BR>
<I><B>Throws: </B></I><TT>NumberFormatException</TT>
if the string does not contain a parsable integer.
</BLOCKQUOTE>
<H4><TT>doubleValue</TT></H4>
<BLOCKQUOTE>
<TT>public double doubleValue()<BR>
</TT>This method converts the primitive integer value represented
by this object to a double.<BR>
<I><B>Returns: </B></I>A double conversion of the integer value
represented.
</BLOCKQUOTE>
<H4><TT>equals</TT></H4>
<BLOCKQUOTE>
<TT>public boolean equals(Object obj)<BR>
</TT>This method compares the integer value of the specified
object to the integer value of this object. The <TT>equals</TT>
method returns <TT>true</TT> only
if the specified object is an <TT>Integer</TT>
object representing the same primitive integer value as this object.
<BR>
<I><B>Parameters: </B></I><TT>obj</TT>-the
object to compare.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the specified object is an <TT>Integer</TT>
object representing the same primitive integer value as this object;
<TT>false</TT> otherwise.
</BLOCKQUOTE>
<H4><TT>floatValue</TT></H4>
<BLOCKQUOTE>
<TT>public float floatValue()<BR>
</TT>This method converts the primitive integer value represented
by this object to a float.<BR>
<I><B>Returns: </B></I>A float conversion of the integer value
represented.
</BLOCKQUOTE>
<H4><TT>getInteger</TT></H4>
<BLOCKQUOTE>
<TT>public static Integer getInteger(String
name)<BR>
</TT>This method determines an <TT>Integer</TT>
object representing the value of the system property with the
specified name. If the system property doesn't exist, null is
returned.<BR>
<I><B>Parameters: </B></I><TT>name</TT>-the
system property name to check the integer value of.<BR>
<I><B>Returns: </B></I>An <TT>Integer</TT>
object representing the value of the specified system property,
or null if the property doesn't exist.
</BLOCKQUOTE>
<H4><TT>getInteger</TT></H4>
<BLOCKQUOTE>
<TT>public static Integer getInteger(String
name, int val)<BR>
</TT>This method determines an <TT>Integer</TT>
object representing the value of the system property with the
specified name. If the system property doesn't exist, an <TT>Integer</TT>
object representing the specified default property value is returned.
<BR>
<I><B>Parameters: </B></I><TT>name</TT>-the
system property name to check the integer value of.<BR>
<I><B>Parameters: </B></I><TT>val</TT>-the
default integer property value.<BR>
<I><B>Returns: </B></I>An <TT>Integer</TT>
 object representing the value of the specified system property,
or an <TT>Integer</TT> object representing
<TT>val</TT> if the property doesn't
exist.
</BLOCKQUOTE>
<H4><TT>getInteger</TT></H4>
<BLOCKQUOTE>
<TT>public static Integer getInteger(String
name, Integer val)<BR>
</TT>This method determines an <TT>Integer</TT>
object representing the value of the system property with the
specified name. In addition, this version of <TT>getInteger</TT>
includes support for reading hexadecimal and octal property values.
If the system property doesn't exist, the specified default property
value is returned.<BR>
<I><B>Parameters: <BR>
</B></I><TT>name</TT>-the system property
name to check the integer value of.<BR>
<TT>val</TT>-the default integer property
value object.<BR>
<I><B>Returns: </B></I>An <TT>Integer</TT>
object representing the value of the specified system property,
or <TT>val</TT> if the property doesn't
exist.
</BLOCKQUOTE>
<H4><TT>hashCode</TT></H4>
<BLOCKQUOTE>
<TT>public int hashCode()<BR>
</TT>This method calculates a hash code for this object.
<BR>
<I><B>Returns: </B></I>A hash code for this object.
</BLOCKQUOTE>
<H4><TT>intValue</TT></H4>
<BLOCKQUOTE>
<TT>public int intValue()<BR>
</TT>This method determines the primitive integer value
represented by this object.<BR>
<I><B>Returns: </B></I>The integer value represented.
</BLOCKQUOTE>
<H4><TT>longValue</TT></H4>
<BLOCKQUOTE>
<TT>public long longValue()<BR>
</TT>This method converts the primitive integer value represented
by this object to a long.<BR>
<I><B>Returns: </B></I>A long conversion of the integer value
represented.
</BLOCKQUOTE>
<H4><TT>parseInt</TT></H4>
<BLOCKQUOTE>
<TT>public static int parseInt(String s)
throws NumberFormatException<BR>
</TT>This method parses a signed decimal integer value
from the specified string. Note that all the characters in the
string must be decimal digits, with the exception that the first
character can be a minus character (<TT>-</TT>)
to denote a negative number.<BR>
<I><B>Parameters: </B></I><TT>s</TT>-the
string representation of an integer value.<BR>
<I><B>Returns: </B></I>The integer value represented by the specified
string.<BR>
<I><B>Throws: </B></I><TT>NumberFormatException</TT>
if the string does not contain a parsable integer.
</BLOCKQUOTE>
<H4><TT>parseInt</TT></H4>
<BLOCKQUOTE>
<TT>public static int parseInt(String s,
int radix) throws NumberFormatException<BR>
</TT>This method parses a signed integer value in the specified
radix from the specified string. Note that all the characters
in the string must be digits in the specified radix, with the
exception that the first character can be a minus character (<TT>-</TT>)
to denote a negative number.<BR>
<I><B>Parameters: <BR>
</B></I><TT>s</TT>-the string representation
of an integer value.<BR>
<TT>radix</TT>-the radix to use for
the integer.<BR>
<I><B>Returns: </B></I>The integer value represented by the specified
string.<BR>
<I><B>Throws: </B></I><TT>NumberFormatException</TT>
if the string does not contain a parsable integer.
</BLOCKQUOTE>
<H4><TT>toBinaryString</TT></H4>
<BLOCKQUOTE>
<TT>public static String toBinaryString(int
i)<BR>
</TT>This method determines a string representation of
the specified unsigned base 2 integer value.<BR>
<I><B>Parameters: </B></I><TT>i</TT>-the
unsigned base 2 integer value to be converted.<BR>
<I><B>Returns: </B></I>A string representing the specified unsigned
base 2 integer value.
</BLOCKQUOTE>
<H4><TT>toHexString</TT></H4>
<BLOCKQUOTE>
<TT>public static String toHexString(int
i)<BR>
</TT>This method determines a string representation of
the specified unsigned base 16 integer value.<BR>
<I><B>Parameters: </B></I><TT>i</TT>-the
unsigned base 16 integer value to be converted.<BR>
<I><B>Returns: </B></I>A string representing the specified unsigned
base 16 integer value.
</BLOCKQUOTE>
<H4><TT>toOctalString</TT></H4>
<BLOCKQUOTE>
<TT>public static String toOctalString(int
i)<BR>
</TT>This method determines a string representation of
the specified unsigned base 8 integer value.<BR>
<I><B>Parameters: </B></I><TT>i</TT>-the
unsigned base 8 integer value to be converted.<BR>
<I><B>Returns: </B></I>A string representing the specified unsigned
base 8 integer value.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>This method determines a string representation of
the primitive decimal integer value for this object.<BR>
<I><B>Returns: </B></I>A string representing the decimal integer
value of this object.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public static String toString(int i)
<BR>
</TT>This method determines a string representation of
the specified decimal integer value.<BR>
<I><B>Parameters: </B></I><TT>i</TT>-the
decimal integer value to be converted.<BR>
<I><B>Returns: </B></I>A string representing the specified decimal
integer value.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public static String toString(int i,
int radix)<BR>
</TT>This method determines a string representation of
the specified integer value in the specified radix.<BR>
<I><B>Parameters: <BR>
</B></I><TT>i</TT>-the integer value
to be converted.<BR>
<TT>radix</TT>-the radix to use for
the conversion.<BR>
<I><B>Returns: </B></I>A string representing the specified integer
value in the specified radix.
</BLOCKQUOTE>
<H4><TT>valueOf</TT></H4>
<BLOCKQUOTE>
<TT>public static Integer valueOf(String
s) throws NumberFormatException<BR>
</TT>This method creates a new integer wrapper object based
on the decimal integer value represented by the specified string.
<BR>
<I><B>Parameters: </B></I><TT>s</TT>-the
string representation of a decimal integer value to be wrapped.
<BR>
<I><B>Returns: </B></I>An integer wrapper object representing
the specified string.<BR>
<I><B>Throws: </B></I><TT>NumberFormatException</TT>
if the string does not contain a parsable integer.
</BLOCKQUOTE>
<H4><TT>valueOf</TT></H4>
<BLOCKQUOTE>
<TT>public static Integer valueOf(String
s, int radix) throws NumberFormatException<BR>
</TT>This method creates a new integer wrapper object based
on the integer value in the specified radix represented by the
specified string.<BR>
<I><B>Parameters: <BR>
</B></I><TT>s</TT>-the string representation
of an integer value to be wrapped.<BR>
<TT>radix</TT>-the radix to use for
the integer.<BR>
<I><B>Returns: </B></I>An integer wrapper object in the specified
radix representing the specified string.<BR>
<I><B>Throws: </B></I><TT>NumberFormatException</TT>
if the string does not contain a parsable integer.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierLongFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Long</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Number<BR>
</TT>This class implements an object type wrapper for long
values. Object type wrappers are useful because many Java classes
operate on objects rather than primitive data types.
</BLOCKQUOTE>
<H4>Member Constants</H4>
<BLOCKQUOTE>
<PRE>
public final static int MAX_VALUE
</PRE>
</BLOCKQUOTE>
<P>
This is a constant representing the maximum value allowed for
a long. This constant is set to <TT>0x7fffffffffffffff</TT>.
<BLOCKQUOTE>
<PRE>
public final static int MIN_VALUE
</PRE>
</BLOCKQUOTE>
<P>
This is a constant representing the minimum value allowed for
a long. This constant is set to <TT>0x8000000000000000</TT>.
<H4><TT>Long </TT>Constructor</H4>
<BLOCKQUOTE>
<TT>public Long(long value)<BR>
</TT>This constructor creates a long wrapper object representing
the specified primitive long value.<BR>
<I><B>Parameters: </B></I><TT>value</TT>-the
long value to be wrapped.
</BLOCKQUOTE>
<H4><TT>Long</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Long(String s) throws NumberFormatException
<BR>
</TT>This constructor creates a long wrapper object representing
the specified string. The string is converted to a long using
a similar technique as the <TT>valueOf</TT>
method.<BR>
<I><B>Parameters: </B></I><TT>s</TT>-the
string representation of a long value to be wrapped.<BR>
<I><B>Throws: </B></I><TT>NumberFormatException</TT>
if the string does not contain a parsable long.
</BLOCKQUOTE>
<H4><TT>doubleValue</TT></H4>
<BLOCKQUOTE>
<TT>public double doubleValue()<BR>
</TT>This method converts the primitive long value represented
by this object to a double.<BR>
<I><B>Returns: </B></I>A double conversion of the long value represented.
</BLOCKQUOTE>
<H4><TT>equals</TT></H4>
<BLOCKQUOTE>
<TT>public boolean equals(Object obj)<BR>
</TT>This method compares the long value of the specified
object to the long value of this object. The <TT>equals</TT>
method returns <TT>true</TT> only
if the specified object is a <TT>Long</TT>
object representing the same primitive long value as this object.
<BR>
<I><B>Parameters: </B></I><TT>obj</TT>-the
object to compare.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the specified object is a <TT>Long</TT>
object representing the same primitive long value as this object;
<TT>false</TT> otherwise.
</BLOCKQUOTE>
<H4><TT>floatValue</TT></H4>
<BLOCKQUOTE>
<TT>public float floatValue()<BR>
</TT>This method converts the primitive long value represented
by this object to a float.<BR>
<I><B>Returns: </B></I>A float conversion of the long value represented.
</BLOCKQUOTE>
<H4><TT>getLong</TT></H4>
<BLOCKQUOTE>
<TT>public static Long getLong(String name)
<BR>
</TT>This method determines a <TT>Long</TT>
object representing the value of the system property with the
specified name. If the system property doesn't exist, null is
returned.<BR>
<I><B>Parameters: </B></I><TT>name</TT>-the
system property name to check the long value of.<BR>
<I><B>Returns: </B></I>A <TT>Long</TT>
 object representing the value of the specified system property,
or null if the property doesn't exist.
</BLOCKQUOTE>
<H4><TT>getLong</TT></H4>
<BLOCKQUOTE>
<TT>public static Long getLong(String name,
long val)<BR>
</TT>This method determines a <TT>Long</TT>
object representing the value of the system property with the
specified name. If the system property doesn't exist, a <TT>Long</TT>
object representing the specified default property value is returned.
<BR>
<I><B>Parameters: </B></I><TT>name</TT>-the
system property name to check the long value of.<BR>
<I><B>Parameters: </B></I><TT>val</TT>-the
default long property value.<BR>
<I><B>Returns: </B></I>A <TT>Long</TT>
object representing the value of the specified system property,
or a long object representing <TT>val</TT>
if the property doesn't exist.
</BLOCKQUOTE>
<H4><TT>getLong</TT></H4>
<BLOCKQUOTE>
<TT>public static Long getLong(String name,
Long val)<BR>
</TT>This method determines a <TT>Long</TT>
object representing the value of the system property with the
specified name. In addition, this version of <TT>getLong</TT>
includes support for reading hexadecimal and octal property values.
If the system property doesn't exist, the specified default property
value is returned.<BR>
<I><B>Parameters: <BR>
</B></I><TT>name</TT>-the system property
name to check the long value of.<BR>
<TT>val</TT>-the default long property
value object.<BR>
<I><B>Returns: </B></I>A <TT>Long</TT>
object representing the value of the specified system property,
or <TT>val</TT> if the property doesn't
exist.
</BLOCKQUOTE>
<H4><TT>hashCode</TT></H4>
<BLOCKQUOTE>
<TT>public int hashCode()<BR>
</TT>This method calculates a hash code for this object.
<BR>
<I><B>Returns: </B></I>A hash code for this object.
</BLOCKQUOTE>
<H4><TT>intValue</TT></H4>
<BLOCKQUOTE>
<TT>public int intValue()<BR>
</TT>This method converts the primitive long value represented
by this object to an integer.<BR>
<I><B>Returns: </B></I>An integer conversion of the long value
represented.
</BLOCKQUOTE>
<H4><TT>longValue</TT></H4>
<BLOCKQUOTE>
<TT>public long longValue()<BR>
</TT>This method determines the primitive long value represented
by this object.<BR>
<I><B>Returns: </B></I>The long value represented.
</BLOCKQUOTE>
<H4><TT>parseLong</TT></H4>
<BLOCKQUOTE>
<TT>public static long parseLong(String s)
throws NumberFormatException<BR>
</TT>This method parses a signed decimal long value from
the specified string. Note that all the characters in the string
must be decimal digits, with the exception that the first character
can be a minus character (<TT>-</TT>)
to denote a negative number.<BR>
<I><B>Parameters: </B></I><TT>s</TT>-the
string representation of a long value.<BR>
<I><B>Returns: </B></I>The long value represented by the specified
string.<BR>
<I><B>Throws: </B></I><TT>NumberFormatException</TT>
if the string does not contain a parsable long.
</BLOCKQUOTE>
<H4><TT>parseLong</TT></H4>
<BLOCKQUOTE>
<TT>public static long parseLong(String s,
int radix) throws NumberFormatException<BR>
</TT>This method parses a signed long value in the specified
radix from the specified string. Note that all the characters
in the string must be digits in the specified radix, with the
exception that the first character can be a minus character (<TT>-</TT>)
to denote a negative number.<BR>
<I><B>Parameters: <BR>
</B></I><TT>s</TT>-the string representation
of a long value.<BR>
<TT>radix</TT>-the radix to use for
the long.<BR>
<I><B>Returns: </B></I>The long value represented by the specified
string.<BR>
<I><B>Throws: </B></I><TT>NumberFormatException</TT>
if the string does not contain a parsable long.
</BLOCKQUOTE>
<H4><TT>toBinaryString</TT></H4>
<BLOCKQUOTE>
<TT>public static String toBinaryString(long
l)<BR>
</TT>This method determines a string representation of
the specified unsigned base 2 long value.<BR>
<I><B>Parameters: </B></I><TT>l</TT>-the
unsigned base 2 long value to be converted.<BR>
<I><B>Returns: </B></I>A string representing the specified unsigned
base 2 long value.
</BLOCKQUOTE>
<H4><TT>toHexString</TT></H4>
<BLOCKQUOTE>
<TT>public static String toHexString(long
l)<BR>
</TT>This method determines a string representation of
the specified unsigned base 16 long value.<BR>
<I><B>Parameters: </B></I><TT>l</TT>-the
unsigned base 16 long value to be converted.<BR>
<I><B>Returns: </B></I>A string representing the specified unsigned
base 16 long value.
</BLOCKQUOTE>
<H4><TT>toOctalString</TT></H4>
<BLOCKQUOTE>
<TT>public static String toOctalString(long
l)<BR>
</TT>This method determines a string representation of
the specified unsigned base 8 long value.<BR>
<I><B>Parameters: </B></I><TT>l</TT>-the
unsigned base 8 long value to be converted.<BR>
<I><B>Returns: </B></I>A string representing the specified unsigned
base 8 long value.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>This method determines a string representation of
the primitive decimal long value for this object.<BR>
<I><B>Returns: </B></I>A string representing the decimal long
value of this object.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public static String toString(long l)
<BR>
</TT>This method determines a string representation of
the specified decimal long value.<BR>
<I><B>Parameters: </B></I><TT>l</TT>-the
decimal long value to be converted.<BR>
<I><B>Returns: </B></I>A string representing the specified decimal
long value.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public static String toString(long l,
int radix)<BR>
</TT>This method determines a string representation of
the specified long value in the specified radix.<BR>
<I><B>Parameters: <BR>
</B></I><TT>i</TT>-the long value
to be converted.<BR>
<TT>radix</TT>-the radix to use for
the conversion.<BR>
<I><B>Returns: </B></I>A string representing the specified long
value in the specified radix.
</BLOCKQUOTE>
<H4><TT>valueOf</TT></H4>
<BLOCKQUOTE>
<TT>public static Long valueOf(String s)
throws NumberFormatException<BR>
</TT>This method creates a new long wrapper object based
on the decimal long value represented by the specified string.
<BR>
<I><B>Parameters: </B></I><TT>s</TT>-the
string representation of a decimal long value to be wrapped.<BR>
<I><B>Returns: </B></I>A long wrapper object representing the
specified string.<BR>
<I><B>Throws: </B></I><TT>NumberFormatException</TT>
if the string does not contain a parsable long.
</BLOCKQUOTE>
<H4><TT>valueOf</TT></H4>
<BLOCKQUOTE>
<TT>public static Long valueOf(String s,
int radix) throws NumberFormatException<BR>
</TT>This method creates a new long wrapper object based
on the long value in the specified radix represented by the specified
string.<BR>
<I><B>Parameters: <BR>
</B></I><TT>s</TT>-the string representation
of a long value to be wrapped.<BR>
<TT>radix</TT>-the radix to use for
the long.<BR>
<I><B>Returns: </B></I>A long wrapper object in the specified
radix representing the specified string.<BR>
<I><B>Throws: </B></I><TT>NumberFormatException</TT>
if the string does not contain a parsable long.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierMathFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Math</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>This class implements a library of common math functions,
including methods for performing basic numerical operations such
as elementary exponential, logarithm, square root, and trigonometric
functions.
</BLOCKQUOTE>
<H4>Member Constants</H4>
<BLOCKQUOTE>
<PRE>
public final static double E
</PRE>
</BLOCKQUOTE>
<P>
This is a constant representing the double value of <TT>E</TT>,
which is the base of the natural logarithms. This constant is
set to <TT>2.7182818284590452354</TT>.
<BLOCKQUOTE>
<PRE>
public final static double PI
</PRE>
</BLOCKQUOTE>
<P>
This is a constant representing the double value of <TT>PI</TT>,
which is the ratio of the circumference of a circle to its diameter.
This constant is set to <TT>3.14159265358979323846</TT>.
<H4><TT>abs</TT></H4>
<BLOCKQUOTE>
<TT>public static double abs(double a)<BR>
</TT>This method calculates the absolute value of the specified
double value.<BR>
<I><B>Parameters: </B></I><TT>a</TT>-the
double value to calculate the absolute value of.<BR>
<I><B>Returns: </B></I>The absolute value of the double value.
</BLOCKQUOTE>
<H4><TT>abs</TT></H4>
<BLOCKQUOTE>
<TT>public static float abs(float a)<BR>
</TT>This method calculates the absolute value of the specified
float value.<BR>
<I><B>Parameters: </B></I><TT>a</TT>-the
float value to calculate the absolute value of.<BR>
<I><B>Returns: </B></I>The absolute value of the float value.
</BLOCKQUOTE>
<H4><TT>abs</TT></H4>
<BLOCKQUOTE>
<TT>public static int abs(int a)<BR>
</TT>This method calculates the absolute value of the specified
integer value.<BR>
<I><B>Parameters: </B></I><TT>a</TT>-the
integer value to calculate the absolute value of.<BR>
<I><B>Returns: </B></I>The absolute value of the integer value.
</BLOCKQUOTE>
<H4><TT>abs</TT></H4>
<BLOCKQUOTE>
<TT>public static long abs(long a)<BR>
</TT>This method calculates the absolute value of the specified
long value.<BR>
<I><B>Parameters: </B></I><TT>a</TT>-the
long value to calculate the absolute value of.<BR>
<I><B>Returns: </B></I>The absolute value of the long value.
</BLOCKQUOTE>
<H4><TT>acos</TT></H4>
<BLOCKQUOTE>
<TT>public static double acos(double a)<BR>
</TT>This method calculates the arc cosine of the specified
double value.<BR>
<I><B>Parameters: </B></I><TT>a</TT>-the
double value to calculate the arc cosine of.<BR>
<I><B>Returns: </B></I>The arc cosine of the double value.
</BLOCKQUOTE>
<H4><TT>asin</TT></H4>
<BLOCKQUOTE>
<TT>public static double asin(double a)<BR>
</TT>This method calculates the arc sine of the specified
double value.<BR>
<I><B>Parameters: </B></I><TT>a</TT>-the
double value to calculate the arc sine of.<BR>
<I><B>Returns: </B></I>The arc sine of the double value.
</BLOCKQUOTE>
<H4><TT>atan</TT></H4>
<BLOCKQUOTE>
<TT>public static double atan(double a)<BR>
</TT>This method calculates the arc tangent of the specified
double value.<BR>
<I><B>Parameters: </B></I><TT>a</TT>-the
double value to calculate the arc tangent of.<BR>
<I><B>Returns: </B></I>The arc tangent of the double value.
</BLOCKQUOTE>
<H4><TT>atan2</TT></H4>
<BLOCKQUOTE>
<TT>public static double atan2(double x,
double y)<BR>
</TT>This method calculates the theta component of the
polar coordinate (r,theta) corresponding to the rectangular coordinate
(x y) specified by the double values.<BR>
<I><B>Parameters: <BR>
</B></I><TT>x</TT>-the x component
value of the rectangular coordinate.<BR>
<TT>y</TT>-the y component value of
the rectangular coordinate.<BR>
<I><B>Returns: </B></I>The theta component of the polar coordinate
corresponding to the rectangular coordinate specified by the double
values.
</BLOCKQUOTE>
<H4><TT>ceil</TT></H4>
<BLOCKQUOTE>
<TT>public static double ceil(double a)<BR>
</TT>This method determines the smallest double whole number
that is greater than or equal to the specified double value.<BR>
<I><B>Parameters: </B></I><TT>a</TT>-the
double value to calculate the ceiling of.<BR>
<I><B>Returns: </B></I>The smallest double whole number that is
greater than or equal to the specified double value.
</BLOCKQUOTE>
<H4><TT>cos</TT></H4>
<BLOCKQUOTE>
<TT>public static double cos(double a)<BR>
</TT>This method calculates the cosine of the specified
double value, which is specified in radians.<BR>
<I><B>Parameters: </B></I><TT>a</TT>-the
double value to calculate the cosine of, in radians.<BR>
<I><B>Returns: </B></I>The cosine of the double value.
</BLOCKQUOTE>
<H4><TT>exp</TT></H4>
<BLOCKQUOTE>
<TT>public static double exp(double a)<BR>
</TT>This method calculates the exponential value of the
specified double value, which is E raised to the power of <TT>a</TT>.
<BR>
<I><B>Parameters: </B></I><TT>a</TT>-the
double value to calculate the exponential value of.<BR>
<I><B>Returns: </B></I>The exponential value of the specified
double value.
</BLOCKQUOTE>
<H4><TT>floor</TT></H4>
<BLOCKQUOTE>
<TT>public static double floor(double a)
<BR>
</TT>This method determines the largest double whole number
that is less than or equal to the specified double value.<BR>
<I><B>Parameters: </B></I><TT>a</TT>-the
double value to calculate the floor of.<BR>
<I><B>Returns: </B></I>The largest double whole number that is
less than or equal to the specified double value.
</BLOCKQUOTE>
<H4><TT>IEEEremainder</TT></H4>
<BLOCKQUOTE>
<TT>public static double IEEEremainder(double
f1, double f2)<BR>
</TT>This method calculates the remainder of <TT>f1</TT>
divided by <TT>f2</TT> as defined
by the IEEE 754 standard.<BR>
<I><B>Parameters: <BR>
</B></I><TT>f1</TT>-the dividend for
the division operation.<BR>
<TT>f2</TT>-the divisor for the division
operation.<BR>
<I><B>Returns: </B></I>The remainder of <TT>f1</TT>
divided by <TT>f2</TT> as defined
by the IEEE 754 standard.
</BLOCKQUOTE>
<H4><TT>log</TT></H4>
<BLOCKQUOTE>
<TT>public static double log(double a) throws
ArithmeticException<BR>
</TT>This method calculates the natural logarithm (base
E) of the specified double value.<BR>
<I><B>Parameters: </B></I><TT>a</TT>-the
double value, which is greater than 0.0, to calculate the natural
logarithm of.<BR>
<I><B>Returns: </B></I>The natural logarithm of the specified
double value.<BR>
<I><B>Throws: </B></I><TT>ArithmeticException</TT>
if the specified double value is less than 0.0.
</BLOCKQUOTE>
<H4><TT>max</TT></H4>
<BLOCKQUOTE>
<TT>public static double max(double a, double
b)<BR>
</TT>This method determines the larger of the two specified
double values.<BR>
<I><B>Parameters: <BR>
</B></I><TT>a</TT>-the first double
value to be compared.<BR>
<TT>b</TT>-the second double value
to be compared.<BR>
<I><B>Returns: </B></I>The larger of the two specified double
values.
</BLOCKQUOTE>
<H4><TT>max</TT></H4>
<BLOCKQUOTE>
<TT>public static float max(float a, float
b)<BR>
</TT>This method determines the larger of the two specified
float values.<BR>
<I><B>Parameters: <BR>
</B></I><TT>a</TT>-the first float
value to be compared.<BR>
<TT>b</TT>-the second float value
to be compared.<BR>
<I><B>Returns: </B></I>The larger of the two specified float values.
</BLOCKQUOTE>
<H4><TT>max</TT></H4>
<BLOCKQUOTE>
<TT>public static int max(int a, int b)<BR>
</TT>This method determines the larger of the two specified
integer values.<BR>
<I><B>Parameters: <BR>
</B></I><TT>a</TT>-the first integer
value to be compared.<BR>
<TT>b</TT>-the second integer value
to be compared.<BR>
<I><B>Returns: </B></I>The larger of the two specified integer
values.
</BLOCKQUOTE>
<H4><TT>max</TT></H4>
<BLOCKQUOTE>
<TT>public static long max(long a, long b)
<BR>
</TT>This method determines the larger of the two specified
long values.<BR>
<I><B>Parameters: <BR>
</B></I><TT>a</TT>-the first long
value to be compared.<BR>
<TT>b</TT>-the second long value to
be compared.<BR>
<I><B>Returns: </B></I>The larger of the two specified long values.
</BLOCKQUOTE>
<H4><TT>min</TT></H4>
<BLOCKQUOTE>
<TT>public static double min(double a, double
b)<BR>
</TT>This method determines the smaller of the two specified
double values.<BR>
<I><B>Parameters: <BR>
</B></I><TT>a</TT>-the first double
value to be compared.<BR>
<TT>b</TT>-the second double value
to be compared.<BR>
<I><B>Returns: </B></I>The smaller of the two specified double
values.
</BLOCKQUOTE>
<H4><TT>min</TT></H4>
<BLOCKQUOTE>
<TT>public static float min(float a, float
b)<BR>
</TT>This method determines the smaller of the two specified
float values.<BR>
<I><B>Parameters: <BR>
</B></I><TT>a</TT>-the first float
value to be compared.<BR>
<TT>b</TT>-the second float value
to be compared.<BR>
<I><B>Returns: </B></I>The smaller of the two specified float
values.
</BLOCKQUOTE>
<H4><TT>min</TT></H4>
<BLOCKQUOTE>
<TT>public static int min(int a, int b)<BR>
</TT>This method determines the smaller of the two specified
integer values.<BR>
<I><B>Parameters: <BR>
</B></I><TT>a</TT>-the first integer
value to be compared.<BR>
<TT>b</TT>-the second integer value
to be compared.<BR>
<I><B>Returns: </B></I>The smaller of the two specified integer
values.
</BLOCKQUOTE>
<H4><TT>min</TT></H4>
<BLOCKQUOTE>
<TT>public static long min(long a, long b)
<BR>
</TT>This method determines the smaller of the two specified
long values.<BR>
<I><B>Parameters: <BR>
</B></I><TT>a</TT>-the first long
value to be compared.<BR>
<TT>b</TT>-the second long value to
be compared.<BR>
<I><B>Returns: </B></I>The smaller of the two specified long values.
</BLOCKQUOTE>
<H4><TT>pow</TT></H4>
<BLOCKQUOTE>
<TT>public static double pow(double a, double
b) throws ArithmeticException<BR>
</TT>This method calculates the double value <TT>a</TT>
raised to the power of <TT>b</TT>.
<BR>
<I><B>Parameters: <BR>
</B></I><TT>a</TT>-a double value
to be raised to a power specified by <TT>b</TT>.
<BR>
<TT>b</TT>-the power to raise <TT>a</TT>
to.<BR>
<I><B>Returns: </B></I>The double value <TT>a</TT>
raised to the power of <TT>b</TT>.
<BR>
<I><B>Throws: </B></I><TT>ArithmeticException</TT>
if <TT>a</TT> equals 0.0 and <TT>b</TT>
is less than or equal to 0.0, or if <TT>a</TT>
is less than or equal to 0.0 and <TT>b</TT>
is not a whole number.
</BLOCKQUOTE>
<H4><TT>random</TT></H4>
<BLOCKQUOTE>
<TT>public static double random()<BR>
</TT>This method generates a pseudo-random double between
0.0 and 1.0.<BR>
<I><B>Returns: </B></I>A pseudo-random double between 0.0 and
1.0.
</BLOCKQUOTE>
<H4><TT>rint</TT></H4>
<BLOCKQUOTE>
<TT>public static double rint(double a)<BR>
</TT>This method determines the closest whole number to
the specified double value. If the double value is equally spaced
between two whole numbers, <TT>rint</TT>
will return the even number.<BR>
<I><B>Parameters: </B></I><TT>a</TT>-the
double value to determine the closest whole number.<BR>
<I><B>Returns: </B></I>The closest whole number to the specified
double value.
</BLOCKQUOTE>
<H4><TT>round</TT></H4>
<BLOCKQUOTE>
<TT>public static long round(double a)<BR>
</TT>This method rounds off the specified double value
by determining the closest long value.<BR>
<I><B>Parameters: </B></I><TT>a</TT>-the
double value to round off.<BR>
<I><B>Returns: </B></I>The closest long value to the specified
double value.
</BLOCKQUOTE>
<H4><TT>round</TT></H4>
<BLOCKQUOTE>
<TT>public static int round(float a)<BR>
</TT>This method rounds off the specified float value by
determining the closest integer value.<BR>
<I><B>Parameters: </B></I><TT>a</TT>-the
float value to round off.<BR>
<I><B>Returns: </B></I>The closest integer value to the specified
float value.
</BLOCKQUOTE>
<H4><TT>sin</TT></H4>
<BLOCKQUOTE>
<TT>public static double sin(double a)<BR>
</TT>This method calculates the sine of the specified double
value, which is specified in radians.<BR>
<I><B>Parameters: </B></I><TT>a</TT>-the
double value to calculate the sine of, in radians.<BR>
<I><B>Returns: </B></I>The sine of the double value.
</BLOCKQUOTE>
<H4><TT>sqrt</TT></H4>
<BLOCKQUOTE>
<TT>public static double sqrt(double a) throws
ArithmeticException<BR>
</TT>This method calculates the square root of the specified
double value.<BR>
<I><B>Parameters: </B></I><TT>a</TT>-the
double value, which is greater than 0.0, to calculate the square
root for.<BR>
<I><B>Returns: </B></I>The square root of the double value.<BR>
<I><B>Throws: </B></I><TT>ArithmeticException</TT>
if the specified double value is less than 0.0.
</BLOCKQUOTE>
<H4><TT>tan</TT></H4>
<BLOCKQUOTE>
<TT>public static double tan(double a)<BR>
</TT>This method calculates the tangent of the specified
double value, which is specified in radians.<BR>
<I><B>Parameters: </B></I><TT>a</TT>-the
double value to calculate the tangent of, in radians.<BR>
<I><B>Returns: </B></I>The tangent of the double value.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierNumberFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Number</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>This class is an abstract class that provides the
basic functionality required of a numeric object. All specific
numeric objects are derived from <TT>Number</TT>.
</BLOCKQUOTE>
<H4><TT>doubleValue</TT></H4>
<BLOCKQUOTE>
<TT>public abstract double doubleValue()
<BR>
</TT>This method determines the primitive double value
represented by this object. Note that this may involve rounding
if the number is not already a double.<BR>
<I><B>Returns: </B></I>The double value represented.
</BLOCKQUOTE>
<H4><TT>floatValue</TT></H4>
<BLOCKQUOTE>
<TT>public abstract float floatValue()<BR>
</TT>This method determines the primitive float value represented
by this object. Note that this may involve rounding if the number
is not already a float.<BR>
<I><B>Returns: </B></I>The float value represented.
</BLOCKQUOTE>
<H4><TT>intValue</TT></H4>
<BLOCKQUOTE>
<TT>public abstract int intValue()<BR>
</TT>This method determines the primitive integer value
represented by this object.<BR>
<I><B>Returns: </B></I>The integer value represented.
</BLOCKQUOTE>
<H4><TT>longValue</TT></H4>
<BLOCKQUOTE>
<TT>public abstract long longValue()<BR>
</TT>This method determines the primitive long value represented
by this object.<BR>
<I><B>Returns: </B></I>The long value represented.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierObjectFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Object</TT></FONT></A></H2>
<BLOCKQUOTE>
This class is the root of the Java class hierarchy, providing
the core functionality required of all objects. All classes have
<TT>Object</TT> as a superclass, and
all classes implement the methods defined in <TT>Object</TT>.
</BLOCKQUOTE>
<H4><TT>Object</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Object()<BR>
</TT>This constructor creates a default object.
</BLOCKQUOTE>
<H4><TT>clone</TT></H4>
<BLOCKQUOTE>
<TT>protected Object clone() throws CloneNotSupportedException
<BR>
</TT>This method creates a clone of this object by creating
a new instance of the class and copying each of the member variables
of this object to the new object. To be cloneable, derived classes
must implement the <TT>Cloneable</TT>
interface.<BR>
<I><B>Returns: </B></I>A clone of this object.<BR>
<I><B>Throws: </B></I><TT>OutOfMemoryError</TT>
if there is not enough memory.<BR>
<I><B>Throws: </B></I><TT>CloneNotSupportedException</TT>
if the object doesn't support the <TT>Cloneable</TT>
interface or if it explicitly doesn't want to be cloned.
</BLOCKQUOTE>
<H4><TT>equals</TT></H4>
<BLOCKQUOTE>
<TT>public boolean equals(Object obj)<BR>
</TT>This method compares this object with the specified
object for equality. The <TT>equals</TT>
method is used by the <TT>Hashtable</TT>
class to compare objects stored in the hash table.<BR>
<I><B>Parameters: </B></I><TT>obj</TT>-the
object to compare.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if this object is equivalent to the specified object; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>finalize</TT></H4>
<BLOCKQUOTE>
<TT>protected void finalize() throws Throwable
<BR>
</TT>This method is called by the Java garbage collector
when an object is being destroyed. The default behavior of <TT>finalize</TT>
is to do nothing. Derived classes can override <TT>finalize</TT>
to include cleanup code that is to be executed when the object
is destroyed.
</BLOCKQUOTE>
<H4><TT>getClass</TT></H4>
<BLOCKQUOTE>
<TT>public final Class getClass()<BR>
</TT>This method determines the runtime class descriptor
for this object.<BR>
<I><B>Returns: </B></I>The runtime class descriptor for this object.
</BLOCKQUOTE>
<H4><TT>hashCode</TT></H4>
<BLOCKQUOTE>
<TT>public int hashCode()<BR>
</TT>This method calculates a hash code for this object,
which is a unique integer identifying the object. Hash codes are
used by the <TT>Hashtable</TT> class.
<BR>
<I><B>Returns: </B></I>A hash code for this object.
</BLOCKQUOTE>
<H4><TT>notify</TT></H4>
<BLOCKQUOTE>
<TT>public final void notify()<BR>
</TT>This method wakes up a single thread that is waiting
on this object's monitor. A thread is set to wait on an object's
monitor when the <TT>wait</TT> method
is called. The <TT>notify</TT> method
should only be called by a thread that is the owner of this object's
monitor. Note that the <TT>notify</TT>
method can only be called from within a synchronized method.<BR>
<I><B>Throws: </B></I><TT>IllegalMonitorStateException</TT>
if the current thread is not the owner of this object's monitor.
</BLOCKQUOTE>
<H4><TT>notifyAll</TT></H4>
<BLOCKQUOTE>
<TT>public final void notifyAll()<BR>
</TT>This method wakes up all threads that are waiting
on this object's monitor. A thread is set to wait on an object's
monitor when the <TT>wait</TT> method
is called. The <TT>notifyAll</TT>
method should only be called by a thread that is the owner of
this object's monitor. Note that the <TT>notifyAll</TT>
method can only be called from within a synchronized method.<BR>
<I><B>Throws: </B></I><TT>IllegalMonitorStateException</TT>
if the current thread is not the owner of this object's monitor.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>This method determines a string representation of
this object. It is recommended that all derived classes override
<TT>toString</TT>.<BR>
<I><B>Returns: </B></I>A string representing this object.
</BLOCKQUOTE>
<H4><TT>wait</TT></H4>
<BLOCKQUOTE>
<TT>public final void wait() throws InterruptedException
<BR>
</TT>This method causes the current thread to wait forever
until it is notified via a call to the <TT>notify</TT>
or <TT>notifyAll</TT> methods. The
<TT>wait</TT> method should only be
called by a thread that is the owner of this object's monitor.
Note that the <TT>wait</TT> method
can only be called from within a synchronized method.<BR>
<I><B>Throws: </B></I><TT>IllegalMonitorStateException</TT>
if the current thread is not the owner of this object's monitor.
<BR>
<I><B>Throws: </B></I><TT>InterruptedException</TT>
if another thread has interrupted this thread.
</BLOCKQUOTE>
<H4><TT>wait</TT></H4>
<BLOCKQUOTE>
<TT>public final void wait(long timeout)
throws InterruptedException<BR>
</TT>This method causes the current thread to wait until
it is notified via a call to the <TT>notify</TT>
or <TT>notifyAll</TT> method, or until
the specified timeout period has elapsed. The <TT>wait</TT>
method should only be called by a thread that is the owner of
this object's monitor. Note that the <TT>wait</TT>
method can only be called from within a synchronized method.<BR>
<I><B>Parameters: </B></I><TT>timeout</TT>-the
maximum timeout period to wait, in milliseconds.<BR>
<I><B>Throws: </B></I><TT>IllegalMonitorStateException</TT>
if the current thread is not the owner of this object's monitor.
<BR>
<I><B>Throws: </B></I><TT>InterruptedException</TT>
if another thread has interrupted this thread.
</BLOCKQUOTE>
<H4><TT>wait</TT></H4>
<BLOCKQUOTE>
<TT>public final void wait(long timeout,
int nanos) throws InterruptedException<BR>
</TT>This method causes the current thread to wait until
it is notified via a call to the <TT>notify</TT>
or <TT>notifyAll</TT> method, or until
the specified timeout period has elapsed. The timeout period in
this case is the addition of the <TT>timeout</TT>
and <TT>nanos</TT> parameters, which
provide finer control over the timeout period. The <TT>wait</TT>
method should only be called by a thread that is the owner of
this object's monitor. Note that the <TT>wait</TT>
method can only be called from within a synchronized method.<BR>
<I><B>Parameters: <BR>
</B></I><TT>timeout</TT>-the maximum
timeout period to wait, in milliseconds.<BR>
<TT>nanos</TT>-the additional time
for the timeout period, in nanoseconds.<BR>
<I><B>Throws: </B></I><TT>IllegalMonitorStateException</TT>
if the current thread is not the owner of this object's monitor.
<BR>
<I><B>Throws: </B></I><TT>InterruptedException</TT>
if another thread has interrupted this thread.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierProcessFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Process</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>This class is an abstract class that provides the
basic functionality required of a system process. Derived <TT>Process</TT>
objects (subprocesses) are returned from the <TT>exec</TT>
methods defined in the <TT>Runtime</TT>
class.
</BLOCKQUOTE>
<H4><TT>Process</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Process()<BR>
</TT>This constructor creates a default process.
</BLOCKQUOTE>
<H4><TT>destroy</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void destroy()<BR>
</TT>This method kills the subprocess.
</BLOCKQUOTE>
<H4><TT>exitValue</TT></H4>
<BLOCKQUOTE>
<TT>public abstract int exitValue()<BR>
</TT>This method determines the exit value of the subprocess.
<BR>
<I><B>Returns: </B></I>The integer exit value for the subprocess.
<BR>
<I><B>Throws: </B></I><TT>IllegalThreadStateException</TT>
if the subprocess has not yet terminated.
</BLOCKQUOTE>
<H4><TT>getErrorStream</TT></H4>
<BLOCKQUOTE>
<TT>public abstract InputStream getErrorStream()
<BR>
</TT>This method determines the error stream associated
with the subprocess.<BR>
<I><B>Returns: </B></I>The error stream associated with the subprocess.
</BLOCKQUOTE>
<H4><TT>getInputStream</TT></H4>
<BLOCKQUOTE>
<TT>public abstract InputStream getInputStream()
<BR>
</TT>This method determines the input stream associated
with the subprocess.<BR>
<I><B>Returns: </B></I>The input stream associated with the subprocess.
</BLOCKQUOTE>
<H4><TT>getOutputStream</TT></H4>
<BLOCKQUOTE>
<TT>public abstract OutputStream getOutputStream()
<BR>
</TT>This method determines the output stream associated
with the subprocess.<BR>
<I><B>Returns: </B></I>The output stream associated with the subprocess.
</BLOCKQUOTE>
<H4><TT>waitFor</TT></H4>
<BLOCKQUOTE>
<TT>public abstract int waitFor() throws
InterruptedException<BR>
</TT>This method waits for the subprocess to finish executing.
When the subprocess finishes executing, the integer exit value
is returned.<BR>
<I><B>Returns: </B></I>The integer exit value for the subprocess.
<BR>
<I><B>Throws: </B></I><TT>InterruptedException</TT>
if another thread has interrupted this thread.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierRuntimeFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Runtime</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>This class provides a mechanism for interacting with
the Java runtime environment. Each running Java application has
access to a single instance of the Runtime class, which it can
use to query and modify the runtime environment.
</BLOCKQUOTE>
<H4><TT>exec</TT></H4>
<BLOCKQUOTE>
<TT>public Process exec(String command) throws
IOException<BR>
</TT>This method executes the system command represented
by the specified string in a separate subprocess.<BR>
<I><B>Parameters: </B></I><TT>command</TT>-a
string representing the system command to execute.<BR>
<I><B>Returns: </B></I>The subprocess that is executing the system
command.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread cannot create the subprocess.
</BLOCKQUOTE>
<H4><TT>exec</TT></H4>
<BLOCKQUOTE>
<TT>public Process exec(String command, String
envp[]) throws IOException<BR>
</TT>This method executes the system command represented
by the specified string in a separate subprocess with the specified
environment.<BR>
<I><B>Parameters: <BR>
</B></I><TT>command</TT>-a string
representing the system command to execute.<BR>
<TT>envp</TT>-an array of strings
representing the environment.<BR>
<I><B>Returns: </B></I>The subprocess that is executing the system
command.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread cannot create the subprocess.
</BLOCKQUOTE>
<H4><TT>exec</TT></H4>
<BLOCKQUOTE>
<TT>public Process exec(String cmdarray[])
throws IOException<BR>
</TT>This method executes the system command with arguments
represented by the specified string array in a separate subprocess.
<BR>
<I><B>Parameters: </B></I><TT>cmdarray</TT>-an
array of strings representing the system command to execute along
with its arguments.<BR>
<I><B>Returns: </B></I>The subprocess that is executing the system
command.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread cannot create the subprocess.
</BLOCKQUOTE>
<H4><TT>exec</TT></H4>
<BLOCKQUOTE>
<TT>public Process exec(String cmdarray[],
String envp[]) throws IOException<BR>
</TT>This method executes the system command with arguments
represented by the specified string array in a separate subprocess
with the specified environment.<BR>
<I><B>Parameters: <BR>
</B></I><TT>cmdarray</TT>-an array
of strings representing the system command to execute along with
its arguments.<BR>
<TT>envp</TT>-an array of strings
representing the environment.<BR>
<I><B>Returns: </B></I>The subprocess that is executing the system
command.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread cannot create the subprocess.
</BLOCKQUOTE>
<H4><TT>exit</TT></H4>
<BLOCKQUOTE>
<TT>public void exit(int status)<BR>
</TT>This method exits the Java runtime system (virtual
machine) with the specified integer exit status. Note that since
<TT>exit</TT> kills the runtime system,
it never returns.<BR>
<I><B>Parameters: </B></I><TT>status</TT>-the
integer exit status; this should be set to nonzero if this is
an abnormal exit.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread cannot exit with the specified exit status.
</BLOCKQUOTE>
<H4><TT>freeMemory</TT></H4>
<BLOCKQUOTE>
<TT>public long freeMemory()<BR>
</TT>This method determines the approximate amount of free
memory available in the runtime system, in bytes.<BR>
<I><B>Returns: </B></I>Approximate amount of free memory available,
in bytes.
</BLOCKQUOTE>
<H4><TT>gc</TT></H4>
<BLOCKQUOTE>
<TT>public void gc()<BR>
</TT>This method invokes the Java garbage collector to
clean up any objects that are no longer needed, usually resulting
in more free memory.
</BLOCKQUOTE>
<H4><TT>getLocalizedInputStream</TT>
</H4>
<BLOCKQUOTE>
<TT>public InputStream getLocalizedInputStream(InputStream
in)<BR>
</TT>This method creates a localized input stream based
on the specified input stream. A localized input stream is a stream
whose local characters are mapped to Unicode characters as they
are read.<BR>
<I><B>Parameters: </B></I><TT>in</TT>-the
input stream to localize.<BR>
<I><B>Returns: </B></I>A localized input stream based on the specified
input stream.
</BLOCKQUOTE>
<H4><TT>getLocalizedOutputStream</TT>
</H4>
<BLOCKQUOTE>
<TT>public OutputStream getLocalizedOutputStream(OutputStream
out)<BR>
</TT>This method creates a localized output stream based
on the specified output stream. A localized output stream is a
stream whose Unicode characters are mapped to local characters
as they are written.<BR>
<I><B>Parameters: </B></I><TT>out</TT>-the
output stream to localize.<BR>
<I><B>Returns: </B></I>A localized output stream based on the
specified output stream.
</BLOCKQUOTE>
<H4><TT>getRuntime</TT></H4>
<BLOCKQUOTE>
<TT>public static Runtime getRuntime()<BR>
</TT>This method gets the runtime environment object associated
with the current Java program.<BR>
<I><B>Returns: </B></I>The runtime environment object associated
with the current Java program.
</BLOCKQUOTE>
<H4><TT>load</TT></H4>
<BLOCKQUOTE>
<TT>public void load(String pathname)<BR>
</TT>This method loads the dynamic library with the specified
complete pathname.<BR>
<I><B>Parameters: </B></I><TT>pathname</TT>-the
path name of the library to load.<BR>
<I><B>Throws: </B></I><TT>UnsatisfiedLinkError</TT>
if the library doesn't exist.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread can't load the library.
</BLOCKQUOTE>
<H4><TT>loadLibrary</TT></H4>
<BLOCKQUOTE>
<TT>public void loadLibrary(String libname)
<BR>
</TT>This method loads the dynamic library with the specified
library name. Note that the mapping from library name to a specific
filename is performed in a platform-specific manner.<BR>
<I><B>Parameters: </B></I><TT>libname</TT>-the
name of the library to load.<BR>
<I><B>Throws: </B></I><TT>UnsatisfiedLinkError</TT>
if the library doesn't exist.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread can't load the library.
</BLOCKQUOTE>
<H4><TT>runFinalization</TT></H4>
<BLOCKQUOTE>
<TT>public void runFinalization()<BR>
</TT>This method explicitly causes the <TT>finalize</TT>
methods of any discarded objects to be called.
</BLOCKQUOTE>
<H4><TT>totalMemory</TT></H4>
<BLOCKQUOTE>
<TT>public long totalMemory()<BR>
</TT>This method determines the total amount of memory
in the runtime system, in bytes.<BR>
<I><B>Returns: </B></I>The total amount of memory, in bytes.
</BLOCKQUOTE>
<H4><TT>traceInstructions</TT></H4>
<BLOCKQUOTE>
<TT>public void traceInstructions(boolean
on)<BR>
</TT>This method is used to determine whether the Java
virtual machine prints out a detailed trace of each instruction
executed.<BR>
<I><B>Parameters: </B></I><TT>on</TT>-a
boolean value specifying whether the Java virtual machine prints
out a detailed trace of each instruction executed; a value of
<TT>true</TT> means the instruction
trace is printed, whereas a value of <TT>false</TT>
means the instruction trace isn't printed.
</BLOCKQUOTE>
<H4><TT>traceMethodCalls</TT></H4>
<BLOCKQUOTE>
<TT>public void traceMethodCalls(boolean
on)<BR>
</TT>This method is used to determine whether the Java
virtual machine prints out a detailed trace of each method that
is called.<BR>
<I><B>Parameters: </B></I><TT>on</TT>-a
boolean value specifying whether the Java virtual machine prints
out a detailed trace of each method that is called; a value of
<TT>true</TT> means the method call
trace is printed, whereas a value of <TT>false</TT>
means the method call trace isn't printed.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierSecurityManagerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>SecurityManager</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>This class is an abstract class that defines a security
policy that can be used by Java programs to check for potentially
unsafe operations.
</BLOCKQUOTE>
<H4>Member Variables</H4>
<BLOCKQUOTE>
<TT>protected boolean inCheck<BR>
</TT>This member variable specifies whether a security
check is in progress. A value of <TT>true</TT>
indicates that a security check is in progress, where a value
of <TT>false</TT> means no check is
taking place.
</BLOCKQUOTE>
<H4><TT>SecurityManager</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>protected SecurityManager()<BR>
</TT>This constructor creates a default security manager.
Note that only one security manager is allowed for each Java program.
<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the security manager cannot be created.
</BLOCKQUOTE>
<H4><TT>checkAccept</TT></H4>
<BLOCKQUOTE>
<TT>public void checkAccept(String host,
int port)<BR>
</TT>This method checks to see if the calling thread is
allowed to establish a socket connection to the specified port
on the specified host.<BR>
<I><B>Parameters: <BR>
</B></I><TT>host</TT>-the host name
to connect the socket to.<BR>
<TT>port</TT>-the number of the port
to connect the socket to.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the calling thread doesn't have permission to establish the
socket connection.
</BLOCKQUOTE>
<H4><TT>checkAccess</TT></H4>
<BLOCKQUOTE>
<TT>public void checkAccess(Thread g)<BR>
</TT>This method checks to see if the calling thread is
allowed access to the specified thread.<BR>
<I><B>Parameters: </B></I><TT>g</TT>-the
thread to check for access.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the calling thread doesn't have access to the specified thread.
</BLOCKQUOTE>
<H4><TT>checkAccess</TT></H4>
<BLOCKQUOTE>
<TT>public void checkAccess(ThreadGroup g)
<BR>
</TT>This method checks to see if the calling thread is
allowed access to the specified thread group.<BR>
<I><B>Parameters: </B></I><TT>g</TT>-the
thread group to check for access.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the calling thread doesn't have access to the specified thread
group.
</BLOCKQUOTE>
<H4><TT>checkConnect</TT></H4>
<BLOCKQUOTE>
<TT>public void checkConnect(String host,
int port)<BR>
</TT>This method checks to see if the calling thread has
established a socket connection to the specified port on the specified
host.<BR>
<I><B>Parameters: <BR>
</B></I><TT>host</TT>-the host name
to check the connection for.<BR>
<TT>port</TT>-the number of the port
to check the connection for.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the calling thread doesn't have permission to establish the
socket connection.
</BLOCKQUOTE>
<H4><TT>checkConnect</TT></H4>
<BLOCKQUOTE>
<TT>public void checkConnect(String host,
int port, Object context)<BR>
</TT>This method checks to see if the specified security
context has established a socket connection to the specified port
on the specified host.<BR>
<I><B>Parameters: <BR>
</B></I><TT>host</TT>-the host name
to check the connection for.<BR>
<TT>port</TT>-the number of the port
to check the connection for.<BR>
<I><B> </B></I><TT>context</TT>-the
security context for the check.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the specified security context doesn't have permission to establish
the socket connection.
</BLOCKQUOTE>
<H4><TT>checkCreateClassLoader</TT>
</H4>
<BLOCKQUOTE>
<TT>public void checkCreateClassLoader()
<BR>
</TT>This method checks to see if the calling thread is
allowed access to create a new class loader.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the calling thread doesn't have permission to create a new
class loader.
</BLOCKQUOTE>
<H4><TT>checkDelete</TT></H4>
<BLOCKQUOTE>
<TT>public void checkDelete(String file)
<BR>
</TT>This method checks to see if the calling thread is
allowed access to delete the file with the specified platform-specific
filename.<BR>
<I><B>Parameters: </B></I><TT>file</TT>-the
platform-specific filename for the file to be checked.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the calling thread doesn't have permission to delete the file.
</BLOCKQUOTE>
<H4><TT>checkExec</TT></H4>
<BLOCKQUOTE>
<TT>public void checkExec(String cmd)<BR>
</TT>This method checks to see if the calling thread is
allowed access to create a subprocess to execute the specified
system command.<BR>
<I><B>Parameters: </B></I><TT>cmd</TT>-a
string representing the system command to be checked.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the calling thread doesn't have permission to create a subprocess
to execute the system command.
</BLOCKQUOTE>
<H4><TT>checkExit</TT></H4>
<BLOCKQUOTE>
<TT>public void checkExit(int status)<BR>
</TT>This method checks to see if the calling thread is
allowed access to exit the Java runtime system with the specified
exit status.<BR>
<I><B>Parameters: </B></I><TT>status</TT>-the
integer exit status to be checked.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the calling thread doesn't have permission to exit with the
specified exit status.
</BLOCKQUOTE>
<H4><TT>checkLink</TT></H4>
<BLOCKQUOTE>
<TT>public void checkLink(String libname)
<BR>
</TT>This method checks to see if the calling thread is
allowed access to dynamically link the library with the specified
name.<BR>
<I><B>Parameters: </B></I><TT>libname</TT>-the
name of the library to be checked.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the calling thread doesn't have permission to dynamically link
the library.
</BLOCKQUOTE>
<H4><TT>checkListen</TT></H4>
<BLOCKQUOTE>
<TT>public void checkListen(int port)<BR>
</TT>This method checks to see if the calling thread is
allowed to wait for a connection request on the specified port.
<BR>
<I><B>Parameters: </B></I><TT>port</TT>-the
number of the port to check the connection for.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the calling thread doesn't have permission to wait for a connection
request on the specified port.
</BLOCKQUOTE>
<H4><TT>checkPackageAccess</TT></H4>
<BLOCKQUOTE>
<TT>public void checkPackageAccess(String
pkg)<BR>
</TT>This method checks to see if the calling thread is
allowed access to the package with the specified name.<BR>
<I><B>Parameters: </B></I><TT>pkg</TT>-the
name of the package to be checked.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the calling thread doesn't have permission to access the package.
</BLOCKQUOTE>
<H4><TT>checkPackageDefinition</TT>
</H4>
<BLOCKQUOTE>
<TT>public void checkPackageDefinition(String
pkg)<BR>
</TT>This method checks to see if the calling thread is
allowed to define classes in the package with the specified name.
<BR>
<I><B>Parameters: </B></I><TT>pkg</TT>-the
name of the package to be checked.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the calling thread doesn't have permission to define classes
in the package.
</BLOCKQUOTE>
<H4><TT>checkPropertiesAccess</TT>
</H4>
<BLOCKQUOTE>
<TT>public void checkPropertiesAccess()<BR>
</TT>This method checks to see if the calling thread is
allowed access to the system properties.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the calling thread doesn't have permission to access the system
properties.
</BLOCKQUOTE>
<H4><TT>checkPropertyAccess</TT></H4>
<BLOCKQUOTE>
<TT>public void checkPropertyAccess(String
key)<BR>
</TT>This method checks to see if the calling thread is
allowed access to the system property with the specified key name.
<BR>
<I><B>Parameters: </B></I><TT>key</TT>-the
key name for the system property to check.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the calling thread doesn't have permission to access the system
property with the specified key name.
</BLOCKQUOTE>
<H4><TT>checkRead</TT></H4>
<BLOCKQUOTE>
<TT>public void checkRead(FileDescriptor
fd)<BR>
</TT>This method checks to see if the calling thread is
allowed access to read from the file with the specified file descriptor.
<BR>
<I><B>Parameters: </B></I><TT>fd</TT>-the
file descriptor for the file to be checked.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the calling thread doesn't have permission to read from the
file.
</BLOCKQUOTE>
<H4><TT>checkRead</TT></H4>
<BLOCKQUOTE>
<TT>public void checkRead(String filename)
<BR>
</TT>This method checks to see if the calling thread is
allowed access to read from the file with the specified platform-specific
filename.<BR>
<I><B>Parameters: </B></I><TT>file</TT>-the
platform-specific filename for the file to be checked.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the calling thread doesn't have permission to read from the
file.
</BLOCKQUOTE>
<H4><TT>checkRead</TT></H4>
<BLOCKQUOTE>
<TT>public void checkRead(String file, Object
context)<BR>
</TT>This method checks to see if the specified security
context is allowed access to read from the file with the specified
platform-specific filename.<BR>
<I><B>Parameters: <BR>
</B></I><TT>file</TT>-the platform-specific
filename for the file to be checked.<BR>
<TT>context</TT>-the security context
for the check.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the specified security context doesn't have permission to read
from the file.
</BLOCKQUOTE>
<H4><TT>checkSetFactory</TT></H4>
<BLOCKQUOTE>
<TT>public void checkSetFactory()<BR>
</TT>This method checks to see if the calling thread is
allowed access to set the socket or stream handler factory used
by the <TT>URL</TT> class.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the calling thread doesn't have permission to set the socket
or stream handler factory.
</BLOCKQUOTE>
<H4><TT>checkTopLevelWindow</TT></H4>
<BLOCKQUOTE>
<TT>public boolean checkTopLevelWindow(Object
window)<BR>
</TT>This method checks to see if the calling thread is
trusted to show the specified top-level window.<BR>
<I><B>Parameters: </B></I><TT>window</TT>-the
top-level window to be checked.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the calling thread is trusted to show the top-level window;
<TT>false</TT> otherwise.
</BLOCKQUOTE>
<H4><TT>checkWrite</TT></H4>
<BLOCKQUOTE>
<TT>public void checkWrite(FileDescriptor
fd)<BR>
</TT>This method checks to see if the calling thread is
allowed access to write to the file with the specified file descriptor.
<BR>
<I><B>Parameters: </B></I><TT>fd</TT>-the
file descriptor for the file to be checked.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the calling thread doesn't have permission to write to the
file.
</BLOCKQUOTE>
<H4><TT>checkWrite</TT></H4>
<BLOCKQUOTE>
<TT>public void checkWrite(String file)<BR>
</TT>This method checks to see if the calling thread is
allowed access to write to the file with the specified platform-specific
filename.<BR>
<I><B>Parameters: </B></I><TT>file</TT>-the
platform-specific filename for the file to be checked.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the calling thread doesn't have permission to write to the
file.
</BLOCKQUOTE>
<H4><TT>classDepth</TT></H4>
<BLOCKQUOTE>
<TT>protected int classDepth(String name)
<BR>
</TT>This method determines the stack depth of the class
with the specified name.<BR>
<I><B>Parameters: </B></I><TT>name</TT>-the
fully qualified name of the class to determine the stack depth
of.<BR>
<I><B>Returns: </B></I>The stack depth of the class, or <TT>-1</TT>
if the class can't be found in any stack frame.
</BLOCKQUOTE>
<H4><TT>classLoaderDepth</TT></H4>
<BLOCKQUOTE>
<TT>protected int classLoaderDepth()<BR>
</TT>This method determines the stack depth of the most
recently executing method of a class defined using a class loader.
<BR>
<I><B>Returns: </B></I>The stack depth of the most recently executing
method of a class defined using a class loader, or <TT>-1</TT>
if no method is executing within a class defined by a class loader.
</BLOCKQUOTE>
<H4><TT>currentClassLoader</TT></H4>
<BLOCKQUOTE>
<TT>protected ClassLoader currentClassLoader()
<BR>
</TT>This method determines the current class loader on
the stack.<BR>
<I><B>Returns: </B></I>The current class loader on the stack,
or null if no class loader exists on the stack.
</BLOCKQUOTE>
<H4><TT>getClassContext</TT></H4>
<BLOCKQUOTE>
<TT>protected Class[] getClassContext()<BR>
</TT>This method determines the current execution stack,
which is an array of classes corresponding to each method call
on the stack.<BR>
<I><B>Returns: </B></I>An array of classes corresponding to each
method call on the stack.
</BLOCKQUOTE>
<H4><TT>getInCheck</TT></H4>
<BLOCKQUOTE>
<TT>public boolean getInCheck()<BR>
</TT>This method determines whether there is a security
check in progress.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if a security check is in progress; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>getSecurityContext</TT></H4>
<BLOCKQUOTE>
<TT>public Object getSecurityContext()<BR>
</TT>This method creates a platform-specific security context
based on the current runtime environment.<BR>
<I><B>Returns: </B></I>A platform-specific security context based
on the current runtime environment.
</BLOCKQUOTE>
<H4><TT>inClass</TT></H4>
<BLOCKQUOTE>
<TT>protected boolean inClass(String name)
<BR>
</TT>This method determines if a method in the class with
the specified name is on the execution stack.<BR>
<I><B>Parameters: </B></I><TT>name</TT>-the
name of the class to check.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if a method in the class is on the execution stack; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>inClassLoader</TT></H4>
<BLOCKQUOTE>
<TT>protected boolean inClassLoader()<BR>
</TT>This method determines if a method in a class defined
using a class loader is on the execution stack.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if a method in a class defined using a class loader is on the
execution stack; <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierStringFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>String</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>This class implements a constant string of characters.
The <TT>String</TT> class provides
a wide range of support for working with strings of characters.
Note that literal string constants are automatically converted
to <TT>String</TT> objects by the
Java compiler.
</BLOCKQUOTE>
<H4><TT>String</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public String()<BR>
</TT>This constructor creates a default string containing
no characters.
</BLOCKQUOTE>
<H4><TT>String</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public String(byte ascii[], int hibyte)
<BR>
</TT>This constructor creates a string from the specified
array of bytes, with the top 8 bits of each string character set
to <TT>hibyte</TT>.<BR>
<I><B>Parameters: <BR>
</B></I><TT>ascii</TT>-the byte array
that is to be converted to string characters.<BR>
<TT>hibyte</TT>-the high byte value
for each character.
</BLOCKQUOTE>
<H4><TT>String</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public String(byte ascii[], int hibyte,
int off, int count)<BR>
</TT>This constructor creates a string of length <TT>count</TT>
from the specified array of bytes beginning <TT>off</TT>
bytes into the array, with the top 8 bits of each string character
set to <TT>hibyte</TT>.<BR>
<I><B>Parameters: <BR>
</B></I><TT>ascii</TT>-the byte array
that is to be converted to string characters.<BR>
<TT>hibyte</TT>-the high byte value
for each character.<BR>
<TT>off</TT>-the starting offset into
the array of bytes.<BR>
<TT>count</TT>-the number of bytes
from the array to convert.<BR>
<I><B>Throws: </B></I><TT>StringIndexOutOfBoundsException</TT>
if the offset or count for the byte array is invalid.
</BLOCKQUOTE>
<H4><TT>String</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public String(char value[])<BR>
</TT>This constructor creates a string from the specified
array of characters.<BR>
<I><B>Parameters: </B></I><TT>value</TT>-the
character array to initialize the string with.
</BLOCKQUOTE>
<H4><TT>String</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public String(char value[], int off,
int count)<BR>
</TT>This constructor creates a string of length <TT>count</TT>
from the specified array of characters beginning <TT>off</TT>
bytes into the array.<BR>
<I><B>Parameters:<BR>
</B></I><TT>value</TT>-the character
array to initialize the string with.<BR>
<TT>off</TT>-the starting offset into
the array of characters.<BR>
<TT>count</TT>-the number of characters
from the array to use in initializing the string.<BR>
<I><B>Throws: </B></I><TT>StringIndexOutOfBoundsException</TT>
if the offset or count for the character array is invalid.
</BLOCKQUOTE>
<H4><TT>String</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public String(String value)<BR>
</TT>This method creates a new string that is a copy of
the specified string.<BR>
<I><B>Parameters: </B></I><TT>value</TT>-the
string to initialize this string with.
</BLOCKQUOTE>
<H4><TT>String</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public String(StringBuffer buffer)<BR>
</TT>This method creates a new string that is a copy of
the contents of the specified string buffer.<BR>
<I><B>Parameters: </B></I><TT>buffer</TT>-the
string buffer to initialize this string with.
</BLOCKQUOTE>
<H4><TT>charAt</TT></H4>
<BLOCKQUOTE>
<TT>public char charAt(int index)<BR>
</TT>This method determines the character at the specified
index. Note that string indexes are zero based, meaning that the
first character is located at index 0.<BR>
<I><B>Parameters: </B></I><TT>index</TT>-the
index of the desired character.<BR>
<I><B>Returns: </B></I>The character at the specified index.<BR>
<I><B>Throws: </B></I><TT>StringIndexOutOfBoundsException</TT>
if the index is out of range.
</BLOCKQUOTE>
<H4><TT>compareTo</TT></H4>
<BLOCKQUOTE>
<TT>public int compareTo(String anotherString)
<BR>
</TT>This method compares this string with the specified
string lexicographically.<BR>
<I><B>Parameters: </B></I><TT>anotherString</TT>-the
string to be compared with.<BR>
<I><B>Returns: </B></I>If this string is equal to the specified
string, a value less than 0 if this string is lexicographically
less than the specified string, or a value greater than 0 if this
string is lexicographically greater than the specified string.
</BLOCKQUOTE>
<H4><TT>concat</TT></H4>
<BLOCKQUOTE>
<TT>public String concat(String str)<BR>
</TT>This method concatenates the specified string onto
the end of this string.<BR>
<I><B>Parameters: </B></I><TT>str</TT>-the
string to concatenate.<BR>
<I><B>Returns: </B></I>This string, with the specified string
concatenated onto the end.
</BLOCKQUOTE>
<H4><TT>copyValueOf</TT></H4>
<BLOCKQUOTE>
<TT>public static String copyValueOf(char
data[])<BR>
</TT>This method converts a character array to an equivalent
string by creating a new string and copying the characters into
it.<BR>
<I><B>Parameters: </B></I><TT>data</TT>-the
character array to convert to a string.<BR>
<I><B>Returns: </B></I>A string representation of the specified
character array.
</BLOCKQUOTE>
<H4><TT>copyValueOf</TT></H4>
<BLOCKQUOTE>
<TT>public static String copyValueOf(char
data[], int off, int count)<BR>
</TT>This method converts a character array to an equivalent
string by creating a new string and copying <TT>count</TT>
characters into it beginning at <TT>off</TT>.
<BR>
<I><B>Parameters: <BR>
</B></I><TT>data</TT>-the character
array to convert to a string.<BR>
<TT>off</TT>-the starting offset into
the character array.<BR>
<TT>count</TT>-the number of characters
from the array to use in initializing the string.<BR>
<I><B>Returns: </B></I>A string representation of the specified
character array beginning at <TT>off</TT>
and of length <TT>count</TT>.
</BLOCKQUOTE>
<H4><TT>endsWith</TT></H4>
<BLOCKQUOTE>
<TT>public boolean endsWith(String suffix)
<BR>
</TT>This method determines whether this string ends with
the specified suffix.<BR>
<I><B>Parameters: </B></I><TT>suffix</TT>-the
suffix to check.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if this string ends with the specified suffix; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>equals</TT></H4>
<BLOCKQUOTE>
<TT>public boolean equals(Object obj)<BR>
</TT>This method compares the specified object to this
string. The <TT>equals</TT> method
returns <TT>true</TT> only if the
specified object is a <TT>String</TT>
object of the same length and contains the same characters as
this string.<BR>
<I><B>Parameters: </B></I><TT>obj</TT>-the
object to compare.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the specified object is a <TT>String</TT>
object of the same length and contains the same characters as
this string; <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H4><TT>equalsIgnoreCase</TT></H4>
<BLOCKQUOTE>
<TT>public boolean equalsIgnoreCase(String
anotherString)<BR>
</TT>This method compares the specified string to this
string, ignoring case.<BR>
<I><B>Parameters: </B></I><TT>anotherString</TT>-the
string to compare.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the specified string is of the same length and contains the
same characters as this string, ignoring case; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>getBytes</TT></H4>
<BLOCKQUOTE>
<TT>public void getBytes(int srcBegin, int
srcEnd, byte dst[], int dstBegin)<BR>
</TT>This method copies the lower 8 bits of each character
in this string beginning at <TT>srcBegin</TT>
and ending at <TT>srcEnd</TT> into
the byte array <TT>dst</TT> beginning
at <TT>dstBegin</TT>.<BR>
<I><B>Parameters: <BR>
</B></I><TT>srcBegin</TT>-index of
the first character in the string to copy.<BR>
<TT>srcEnd</TT>-index of the last
character in the string to copy.<BR>
<TT>dst</TT>-the destination byte
array.<BR>
<TT>dstBegin</TT>-the starting offset
into the byte array.
</BLOCKQUOTE>
<H4><TT>getChars</TT></H4>
<BLOCKQUOTE>
<TT>public void getChars(int srcBegin, int
srcEnd, char <BR>
dst[], int dstBegin)<BR>
</TT>This method copies each character in this string beginning
at <TT>srcBegin</TT> and ending at
<TT>srcEnd</TT> into the character
array <TT>dst</TT> beginning at <TT>dstBegin</TT>.
<BR>
<I><B>Parameters: <BR>
</B></I><TT>srcBegin</TT>-index of
the first character in the string to copy.<BR>
<TT>srcEnd</TT>-index of the last
character in the string to copy.<BR>
<TT>dst</TT>-the destination character
array.<BR>
<TT>dstBegin</TT>-the starting offset
into the character array.<BR>
<I><B>Throws: </B></I><TT>StringIndexOutOfBoundsException</TT>
if there is an invalid index into the buffer.
</BLOCKQUOTE>
<H4><TT>hashCode</TT></H4>
<BLOCKQUOTE>
<TT>public int hashCode()<BR>
</TT>This method calculates a hash code for this object.
<BR>
<I><B>Returns: </B></I>A hash code for this object.
</BLOCKQUOTE>
<H4><TT>indexOf</TT></H4>
<BLOCKQUOTE>
<TT>public int indexOf(int ch)<BR>
</TT>This method determines the index of the first occurrence
of the specified character in this string.<BR>
<I><B>Parameters: </B></I><TT>ch</TT>-the
character to search for.<BR>
<I><B>Returns: </B></I>The index of the first occurrence of the
specified character, or <TT>-1</TT>
if the character doesn't occur.
</BLOCKQUOTE>
<H4><TT>indexOf</TT></H4>
<BLOCKQUOTE>
<TT>public int indexOf(int ch, int fromIndex)
<BR>
</TT>This method determines the index of the first occurrence
of the specified character in this string beginning at <TT>fromIndex</TT>.
<BR>
<I><B>Parameters: <BR>
</B></I><TT>ch</TT>-the character
to search for.<BR>
<TT>fromIndex</TT>-the index to start
the search from.<BR>
<I><B>Returns: </B></I>The index of the first occurrence of the
specified character beginning at <TT>fromIndex</TT>,
or <TT>-1</TT> if the character doesn't
occur.
</BLOCKQUOTE>
<H4><TT>indexOf</TT></H4>
<BLOCKQUOTE>
<TT>public int indexOf(String str)<BR>
</TT>This method determines the index of the first occurrence
of the specified substring in this string.<BR>
<I><B>Parameters: </B></I><TT>str</TT>-the
substring to search for.<BR>
<I><B>Returns: </B></I>The index of the first occurrence of the
specified substring, or <TT>-1</TT>
if the substring doesn't occur.
</BLOCKQUOTE>
<H4><TT>indexOf</TT></H4>
<BLOCKQUOTE>
<TT>public int indexOf(String str, int fromIndex)
<BR>
</TT>This method determines the index of the first occurrence
of the specified substring in this string, beginning at <TT>fromIndex</TT>.
<BR>
<I><B>Parameters: <BR>
</B></I><TT>str</TT>-the substring
to search for.<BR>
<TT>fromIndex</TT>-the index to start
the search from.<BR>
<I><B>Returns: </B></I>The index of the first occurrence of the
specified substring beginning at <TT>fromIndex</TT>,
or <TT>-1</TT> if the substring doesn't
occur.
</BLOCKQUOTE>
<H4><TT>intern</TT></H4>
<BLOCKQUOTE>
<TT>public String intern()<BR>
</TT>This method determines a string that is equal to this
string, but is guaranteed to be from a pool of unique strings.
<BR>
<I><B>Returns: </B></I>A string that is equal to this string,
but is guaranteed to be from a pool of unique strings.
</BLOCKQUOTE>
<H4><TT>lastIndexOf</TT></H4>
<BLOCKQUOTE>
<TT>public int lastIndexOf(int ch)<BR>
</TT>This method determines the index of the last occurrence
of the specified character in this string.<BR>
<I><B>Parameters: </B></I><TT>ch</TT>-the
character to search for.<BR>
<I><B>Returns: </B></I>The index of the last occurrence of the
specified character, or <TT>-1</TT>
if the character doesn't occur.
</BLOCKQUOTE>
<H4><TT>lastIndexOf</TT></H4>
<BLOCKQUOTE>
<TT>public int lastIndexOf(int ch, int fromIndex)
<BR>
</TT>This method determines the index of the last occurrence
of the specified character in this string, beginning at <TT>fromIndex</TT>.
<BR>
<I><B>Parameters: <BR>
</B></I><TT>ch</TT>-the character
to search for.<BR>
<TT>fromIndex</TT>-the index to start
the search from.<BR>
<I><B>Returns: </B></I>The index of the last occurrence of the
specified character beginning at <TT>fromIndex</TT>,
or <TT>-1</TT> if the character doesn't
occur.
</BLOCKQUOTE>
<H4><TT>lastIndexOf</TT></H4>
<BLOCKQUOTE>
<TT>public int lastIndexOf(String str)<BR>
</TT>This method determines the index of the last occurrence
of the specified substring in this string.<BR>
<I><B>Parameters: </B></I><TT>str</TT>-the
substring to search for.<BR>
<I><B>Returns: </B></I>The index of the last occurrence of the
specified substring, or <TT>-1</TT>
if the substring doesn't occur.
</BLOCKQUOTE>
<H4><TT>lastIndexOf</TT></H4>
<BLOCKQUOTE>
<TT>public int lastIndexOf(String str, int
fromIndex)<BR>
</TT>This method determines the index of the last occurrence
of the specified substring in this string beginning at <TT>fromIndex</TT>.
<BR>
<I><B>Parameters: <BR>
</B></I><TT>str</TT>-the substring
to search for.<BR>
<TT>fromIndex</TT>-the index to start
the search from.<BR>
<I><B>Returns: </B></I>The index of the last occurrence of the
specified substring beginning at <TT>fromIndex</TT>,
or <TT>-1</TT> if the substring doesn't
occur.
</BLOCKQUOTE>
<H4><TT>length</TT></H4>
<BLOCKQUOTE>
<TT>public int length()<BR>
</TT>This method determines the length of this string,
which is the number of Unicode characters in the string.<BR>
<I><B>Returns: </B></I>The length of this string.
</BLOCKQUOTE>
<H4><TT>regionMatches</TT></H4>
<BLOCKQUOTE>
<TT>public boolean regionMatches(boolean
ignoreCase, int toffset, <BR>
String other,int ooffset, int len)<BR>
</TT>This method determines whether a substring of this
string matches a substring of the specified string, with an option
for ignoring case.<BR>
<I><B>Parameters: <BR>
</B></I><TT>ignoreCase</TT>-a boolean
value specifying whether case is ignored; a value of <TT>true</TT>
means case is ignored, where a value of <TT>false</TT>
means case isn't ignored.<BR>
<TT>toffset</TT>-the index to start
the substring for this string.<BR>
<TT>other</TT>-the other string to
compare.<BR>
<TT>ooffset</TT>-the index to start
the substring for the string to compare.<BR>
<TT>len</TT>-the number of characters
to compare.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the substring of this string matches the substring of the specified
string; <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H4><TT>regionMatches</TT></H4>
<BLOCKQUOTE>
<TT>public boolean regionMatches(int toffset,
String other, int ooffset, int len)<BR>
</TT>This method determines whether a substring of this
string matches a substring of the specified string.<BR>
<I><B>Parameters: <BR>
</B></I><TT>toffset</TT>-the index
to start the substring for this string.<BR>
<TT>other</TT>-the other string to
compare.<BR>
<TT>ooffset</TT>-the index to start
the substring for the string to compare.<BR>
<TT>len</TT>-the number of characters
to compare.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the substring of this string matches the substring of the specified
string; <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H4><TT>replace</TT></H4>
<BLOCKQUOTE>
<TT>public String replace(char oldChar, char
newChar)<BR>
</TT>This method replaces all occurrences of <TT>oldChar</TT>
in this string with <TT>newChar</TT>.
<BR>
<I><B>Parameters: <BR>
</B></I><TT>oldChar</TT>-the old character
to replace.<BR>
<TT>newChar</TT>-the new character
to take its place.<BR>
<I><B>Returns: </B></I>This string, with all occurrences of <TT>oldChar</TT>
replaced with <TT>newChar</TT>.
</BLOCKQUOTE>
<H4><TT>startsWith</TT></H4>
<BLOCKQUOTE>
<TT>public boolean startsWith(String prefix)
<BR>
</TT>This method determines whether this string starts
with the specified prefix.<BR>
<I><B>Parameters: </B></I><TT>prefix</TT>-the
prefix to check.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if this string starts with the specified prefix; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>startsWith</TT></H4>
<BLOCKQUOTE>
<TT>public boolean startsWith(String prefix,
int fromIndex)<BR>
</TT>This method determines whether this string starts
with the specified prefix beginning at <TT>fromIndex</TT>.
<BR>
<I><B>Parameters: <BR>
</B></I><TT>prefix</TT>-the prefix
to check.<BR>
<TT>fromIndex</TT>-the index to start
the search from.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if this string starts with the specified prefix beginning at <TT>fromIndex</TT>;
<TT>false</TT> otherwise.
</BLOCKQUOTE>
<H4><TT>substring</TT></H4>
<BLOCKQUOTE>
<TT>public String substring(int beginIndex)
<BR>
</TT>This method determines the substring of this string
beginning at <TT>beginIndex</TT>.
<BR>
<I><B>Parameters: </B></I><TT>beginIndex</TT>-the
beginning index of the substring, inclusive.<BR>
<I><B>Returns: </B></I>The substring of this string beginning
at <TT>beginIndex</TT>.<BR>
<I><B>Throws: </B></I><TT>StringIndexOutOfBoundsException</TT>
if <TT>beginIndex</TT> is out of range.
</BLOCKQUOTE>
<H4><TT>substring</TT></H4>
<BLOCKQUOTE>
<TT>public String substring(int beginIndex,
int endIndex)<BR>
</TT>This method determines the substring of this string
beginning at <TT>beginIndex</TT> and
ending at <TT>endIndex</TT>.<BR>
<I><B>Parameters: <BR>
</B></I><TT>beginIndex</TT>-the beginning
index of the substring, inclusive.<BR>
<TT>endIndex</TT>-the end index of
the substring, exclusive.<BR>
<I><B>Returns: </B></I>The substring of this string beginning
at <TT>beginIndex</TT> and ending
at <TT>endIndex</TT>.<BR>
<I><B>Throws: </B></I><TT>StringIndexOutOfBoundsException</TT>
if <TT>beginIndex</TT> or <TT>endIndex</TT>
is out of range.
</BLOCKQUOTE>
<H4><TT>toCharArray</TT></H4>
<BLOCKQUOTE>
<TT>public char[] toCharArray()<BR>
</TT>This method converts this string to a character array
by creating a new array and copying each character of the string
to it.<BR>
<I><B>Returns: </B></I>A character array representing this string.
</BLOCKQUOTE>
<H4><TT>toLowerCase</TT></H4>
<BLOCKQUOTE>
<TT>public String toLowerCase()<BR>
</TT>This method converts all the characters in this string
to lowercase.<BR>
<I><B>Returns: </B></I>This string, with all the characters converted
to lowercase.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>This method returns this string.<BR>
<I><B>Returns: </B></I>This string itself.
</BLOCKQUOTE>
<H4><TT>toUpperCase</TT></H4>
<BLOCKQUOTE>
<TT>public String toUpperCase()<BR>
</TT>This method converts all the characters in this string
to uppercase.<BR>
<I><B>Returns: </B></I>This string, with all the characters converted
to uppercase.
</BLOCKQUOTE>
<H4><TT>trim</TT></H4>
<BLOCKQUOTE>
<TT>public String trim()<BR>
</TT>This method trims leading and trailing whitespace
from this string.<BR>
<I><B>Returns: </B></I>This string, with leading and trailing
whitespace removed.
</BLOCKQUOTE>
<H4><TT>valueOf</TT></H4>
<BLOCKQUOTE>
<TT>public static String valueOf(boolean
b)<BR>
</TT>This method creates a string representation of the
specified boolean value. If the boolean value is <TT>true</TT>,
the string <TT>&quot;true&quot;</TT>
is returned; otherwise, the string <TT>&quot;false&quot;</TT>
is returned.<BR>
<I><B>Parameters: </B></I><TT>b</TT>-the
boolean value to get the string representation of.<BR>
<I><B>Returns: </B></I>A string representation of the specified
boolean value.
</BLOCKQUOTE>
<H4><TT>valueOf</TT></H4>
<BLOCKQUOTE>
<TT>public static String valueOf(char c)
<BR>
</TT>This method creates a string representation of the
specified character value.<BR>
<I><B>Parameters: </B></I><TT>c</TT>-the
character value to get the string representation of.<BR>
<I><B>Returns: </B></I>A string representation of the specified
character value.
</BLOCKQUOTE>
<H4><TT>valueOf</TT></H4>
<BLOCKQUOTE>
<TT>public static String valueOf(char data[])
<BR>
</TT>This method creates a string representation of the
specified character array.<BR>
<I><B>Parameters: </B></I><TT>data</TT>-the
character array to get the string representation of.<BR>
<I><B>Returns: </B></I>A string representation of the specified
character array.
</BLOCKQUOTE>
<H4><TT>valueOf</TT></H4>
<BLOCKQUOTE>
<TT>public static String valueOf(char data[],
int off, int count)<BR>
</TT>This constructor creates a string representation of
length <TT>count</TT> from the specified
array of characters beginning <TT>off</TT>
bytes into the array.<BR>
<I><B>Parameters: <BR>
</B></I><TT>data</TT>-the character
array to get the string representation of.<BR>
<TT>off</TT>-the starting offset into
the array of characters.<BR>
<TT>count</TT>-the number of characters
from the array to use in initializing the string.<BR>
<I><B>Returns: </B></I>A string representation of the specified
character array.
</BLOCKQUOTE>
<H4><TT>valueOf</TT></H4>
<BLOCKQUOTE>
<TT>public static String valueOf(double d)
<BR>
</TT>This method creates a string representation of the
specified double value.<BR>
<I><B>Parameters: </B></I><TT>d</TT>-the
double value to get the string representation of.<BR>
<I><B>Returns: </B></I>A string representation of the specified
double value.
</BLOCKQUOTE>
<H4><TT>valueOf</TT></H4>
<BLOCKQUOTE>
<TT>public static String valueOf(float f)
<BR>
</TT>This method creates a string representation of the
specified float value.<BR>
<I><B>Parameters: </B></I><TT>f</TT>-the
float value to get the string representation of.<BR>
<I><B>Returns: </B></I>A string representation of the specified
float value.
</BLOCKQUOTE>
<H4><TT>valueOf</TT></H4>
<BLOCKQUOTE>
<TT>public static String valueOf(int i)<BR>
</TT>This method creates a string representation of the
specified integer value.<BR>
<I><B>Parameters: </B></I><TT>i</TT>-the
integer value to get the string representation of.<BR>
<I><B>Returns: </B></I>A string representation of the specified
integer value.
</BLOCKQUOTE>
<H4><TT>valueOf</TT></H4>
<BLOCKQUOTE>
<TT>public static String valueOf(long l)
<BR>
</TT>This method creates a string representation of the
specified long value.<BR>
<I><B>Parameters: </B></I><TT>l</TT>-the
long value to get the string representation of.<BR>
<I><B>Returns: </B></I>A string representation of the specified
long value.
</BLOCKQUOTE>
<H4><TT>valueOf</TT></H4>
<BLOCKQUOTE>
<TT>public static String valueOf(Object obj)
<BR>
</TT>This method creates a string representation of the
specified object. Note that the string representation is the same
as that returned by the <TT>toString</TT>
method of the object.<BR>
<I><B>Parameters: </B></I><TT>obj</TT>-the
object to get the string representation of.<BR>
<I><B>Returns: </B></I>A string representation of the specified
object value, or the string <TT>&quot;null&quot;</TT>
if the object is null.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierStringBufferFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>StringBuffer</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>This class implements a variable string of characters.
The <TT>StringBuffer</TT> class provides
a wide range of append and insert methods, along with some other
support methods for getting information about the string buffer.
</BLOCKQUOTE>
<H4><TT>StringBuffer</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public StringBuffer()<BR>
</TT>This constructor creates a default string buffer with
no characters.
</BLOCKQUOTE>
<H4><TT>StringBuffer</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public StringBuffer(int length)<BR>
</TT>This constructor creates a string buffer with the
specified length.<BR>
<I><B>Parameters: </B></I><TT>length</TT>-the
initial length of the string buffer.
</BLOCKQUOTE>
<H4><TT>StringBuffer</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public StringBuffer(String str)<BR>
</TT>This constructor creates a string buffer with the
specified initial string value.<BR>
<I><B>Parameters: </B></I><TT>str</TT>-the
initial string value of the string buffer.
</BLOCKQUOTE>
<H4><TT>append</TT></H4>
<BLOCKQUOTE>
<TT>public StringBuffer append(boolean b)
<BR>
</TT>This method appends the string representation of the
specified boolean value to the end of this string buffer.<BR>
<I><B>Parameters: </B></I><TT>b</TT>-the
boolean value to be appended.<BR>
<I><B>Returns: </B></I>This string buffer, with the boolean appended.
</BLOCKQUOTE>
<H4><TT>append</TT></H4>
<BLOCKQUOTE>
<TT>public StringBuffer append(char c)<BR>
</TT>This method appends the string representation of the
specified character value to the end of this string buffer.<BR>
<I><B>Parameters: </B></I><TT>c</TT>-the
character value to be appended.<BR>
<I><B>Returns: </B></I>This string buffer, with the character
appended.
</BLOCKQUOTE>
<H4><TT>append</TT></H4>
<BLOCKQUOTE>
<TT>public StringBuffer append(char str[])
<BR>
</TT>This method appends the string representation of the
specified character array to the end of this string buffer.<BR>
<I><B>Parameters: </B></I><TT>str</TT>-the
character array to be appended.<BR>
<I><B>Returns: </B></I>This string buffer, with the character
array appended.
</BLOCKQUOTE>
<H4><TT>append</TT></H4>
<BLOCKQUOTE>
<TT>public StringBuffer append(char str[],
int off, int len)<BR>
</TT>This method appends the string representation of the
specified character subarray to the end of this string buffer.
<BR>
<I><B>Parameters: <BR>
</B></I><TT>str</TT>-the character
array to be appended.<BR>
<TT>off</TT>-the starting offset into
the character array to append.<BR>
<TT>len</TT>-the number of characters
to append.<BR>
<I><B>Returns: </B></I>This string buffer, with the character
subarray appended.
</BLOCKQUOTE>
<H4><TT>append</TT></H4>
<BLOCKQUOTE>
<TT>public StringBuffer append(double d)
<BR>
</TT>This method appends the string representation of the
specified double value to the end of this string buffer.<BR>
<I><B>Parameters: </B></I><TT>d</TT>-the
double value to be appended.<BR>
<I><B>Returns: </B></I>This string buffer, with the double appended.
</BLOCKQUOTE>
<H4><TT>append</TT></H4>
<BLOCKQUOTE>
<TT>public StringBuffer append(float f)<BR>
</TT>This method appends the string representation of the
specified float value to the end of this string buffer.<BR>
<I><B>Parameters: </B></I><TT>f</TT>-the
float value to be appended.<BR>
<I><B>Returns: </B></I>This string buffer, with the float appended.
</BLOCKQUOTE>
<H4><TT>append</TT></H4>
<BLOCKQUOTE>
<TT>public StringBuffer append(int i)<BR>
</TT>This method appends the string representation of the
specified integer value to the end of this string buffer.<BR>
<I><B>Parameters: </B></I><TT>i</TT>-the
integer value to be appended.<BR>
<I><B>Returns: </B></I>This string buffer, with the integer appended.
</BLOCKQUOTE>
<H4><TT>append</TT></H4>
<BLOCKQUOTE>
<TT>public StringBuffer append(long l)<BR>
</TT>This method appends the string representation of the
specified long value to the end of this string buffer.<BR>
<I><B>Parameters: </B></I><TT>l</TT>-the
long value to be appended.<BR>
<I><B>Returns: </B></I>This string buffer, with the long appended.
</BLOCKQUOTE>
<H4><TT>append</TT></H4>
<BLOCKQUOTE>
<TT>public StringBuffer append(Object obj)
<BR>
</TT>This method appends the string representation of the
specified object to the end of this string buffer.<BR>
<I><B>Parameters: </B></I><TT>obj</TT>-the
object to be appended.<BR>
<I><B>Returns: </B></I>This string buffer, with the object appended.
</BLOCKQUOTE>
<H4><TT>append</TT></H4>
<BLOCKQUOTE>
<TT>public StringBuffer append(String str)
<BR>
</TT>This method appends the specified string to the end
of this string buffer.<BR>
<I><B>Parameters: </B></I><TT>str</TT>-the
string to be appended.<BR>
<I><B>Returns: </B></I>This string buffer, with the string appended.
</BLOCKQUOTE>
<H4><TT>capacity</TT></H4>
<BLOCKQUOTE>
<TT>public int capacity()<BR>
</TT>This method determines the capacity of this string
buffer, which is the amount of character storage currently allocated
in the string buffer.<BR>
<I><B>Returns: </B></I>The capacity of this string buffer.
</BLOCKQUOTE>
<H4><TT>charAt</TT></H4>
<BLOCKQUOTE>
<TT>public char charAt(int index)<BR>
</TT>This method determines the character at the specified
index. Note that string buffer indexes are zero based, meaning
that the first character is located at index 0.<BR>
<I><B>Parameters: </B></I><TT>index</TT>-the
index of the desired character.<BR>
<I><B>Returns: </B></I>The character at the specified index.<BR>
<I><B>Throws: </B></I><TT>StringIndexOutOfBoundsException</TT>
if the index is out of range.
</BLOCKQUOTE>
<H4><TT>ensureCapacity</TT></H4>
<BLOCKQUOTE>
<TT>public void ensureCapacity(int minimumCapacity)
<BR>
</TT>This method ensures that the capacity of this string
buffer is at least equal to the specified minimum.<BR>
<I><B>Parameters: </B></I><TT>minimumCapacity</TT>-the
minimum desired capacity.
</BLOCKQUOTE>
<H4><TT>getChars</TT></H4>
<BLOCKQUOTE>
<TT>public void getChars(int srcBegin, int
srcEnd, char dst[], int dstBegin)<BR>
</TT>This method copies each character in this string buffer
beginning at <TT>srcBegin</TT> and
ending at <TT>srcEnd</TT> into the
character array <TT>dst</TT> beginning
at <TT>dstBegin</TT>.<BR>
<I><B>Parameters: <BR>
</B></I><TT>srcBegin</TT>-index of
the first character in the string buffer to copy.<BR>
<TT>srcEnd</TT>-index of the last
character in the string buffer to copy.<BR>
<TT>dst</TT>-the destination character
array.<BR>
<TT>dstBegin</TT>-the starting offset
into the character array.<BR>
<I><B>Throws: </B></I><TT>StringIndexOutOfBoundsException</TT>
if there is an invalid index into the buffer.
</BLOCKQUOTE>
<H4><TT>insert</TT></H4>
<BLOCKQUOTE>
<TT>public StringBuffer insert(int off, boolean
b)<BR>
</TT>This method inserts the string representation of the
specified boolean value at the specified offset of this string
buffer.<BR>
<I><B>Parameters: <BR>
</B></I><TT>off</TT>-the offset at
which to insert the boolean.<BR>
<TT>b</TT>-the boolean value to be
inserted.<BR>
<I><B>Returns: </B></I>This string buffer, with the boolean inserted.
<BR>
<I><B>Throws: </B></I><TT>StringIndexOutOfBoundsException</TT>
if the offset is invalid.
</BLOCKQUOTE>
<H4><TT>insert</TT></H4>
<BLOCKQUOTE>
<TT>public StringBuffer insert(int off, char
c)<BR>
</TT>This method inserts the string representation of the
specified character value at the specified offset of this string
buffer.<BR>
<I><B>Parameters: <BR>
</B></I><TT>off</TT>-the offset at
which to insert the character.<BR>
<TT>c</TT>-the character value to
be inserted.<BR>
<I><B>Returns: </B></I>This string buffer, with the character
inserted.<BR>
<I><B>Throws: </B></I><TT>StringIndexOutOfBoundsException</TT>
if the offset is invalid.
</BLOCKQUOTE>
<H4><TT>insert</TT></H4>
<BLOCKQUOTE>
<TT>public StringBuffer insert(int off, char
str[])<BR>
</TT>This method inserts the string representation of the
specified character array at the specified offset of this string
buffer.<BR>
<I><B>Parameters: <BR>
</B></I><TT>off</TT>-the offset at
which to insert the character array.<BR>
<TT>str</TT>-the character array to
be inserted.<BR>
<I><B>Returns: </B></I>This string buffer, with the character
array inserted.<BR>
<I><B>Throws: </B></I><TT>StringIndexOutOfBoundsException</TT>
if the offset is invalid.
</BLOCKQUOTE>
<H4><TT>insert</TT></H4>
<BLOCKQUOTE>
<TT>public StringBuffer insert(int off, double
d)<BR>
</TT>This method inserts the string representation of the
specified double value at the specified offset of this string
buffer.<BR>
<I><B>Parameters: <BR>
</B></I><TT>off</TT>-the offset at
which to insert the double.<BR>
<TT>d</TT>-the double value to be
inserted.<BR>
<I><B>Returns: </B></I>This string buffer, with the double inserted.
<BR>
<I><B>Throws: </B></I><TT>StringIndexOutOfBoundsException</TT>
if the offset is invalid.
</BLOCKQUOTE>
<H4><TT>insert</TT></H4>
<BLOCKQUOTE>
<TT>public StringBuffer insert(int off, float
f)<BR>
</TT>This method inserts the string representation of the
specified float value at the specified offset of this string buffer.
<BR>
<I><B>Parameters: <BR>
</B></I><TT>off</TT>-the offset at
which to insert the float.<BR>
<TT>f</TT>-the float value to be inserted.
<BR>
<I><B>Returns: </B></I>This string buffer, with the float inserted.
<BR>
<I><B>Throws: </B></I><TT>StringIndexOutOfBoundsException</TT>
if the offset is invalid.
</BLOCKQUOTE>
<H4><TT>insert</TT></H4>
<BLOCKQUOTE>
<TT>public StringBuffer insert(int off, int
i)<BR>
</TT>This method inserts the string representation of the
specified integer value at the specified offset of this string
buffer.<BR>
<I><B>Parameters: <BR>
</B></I><TT>off</TT>-the offset at
which to insert the integer.<BR>
<TT>i</TT>-the integer value to be
inserted.<BR>
<I><B>Returns: </B></I>This string buffer, with the integer inserted.
<BR>
<I><B>Throws: </B></I><TT>StringIndexOutOfBoundsException</TT>
if the offset is invalid.
</BLOCKQUOTE>
<H4><TT>insert</TT></H4>
<BLOCKQUOTE>
<TT>public StringBuffer insert(int off, long
l)<BR>
</TT>This method inserts the string representation of the
specified long value at the specified offset of this string buffer.
<BR>
<I><B>Parameters: <BR>
</B></I><TT>off</TT>-the offset at
which to insert the long.<BR>
<TT>l</TT>-the long value to be inserted.
<BR>
<I><B>Returns: </B></I>This string buffer, with the long inserted.
<BR>
<I><B>Throws: </B></I><TT>StringIndexOutOfBoundsException</TT>
if the offset is invalid.
</BLOCKQUOTE>
<H4><TT>insert</TT></H4>
<BLOCKQUOTE>
<TT>public StringBuffer insert(int off, Object
obj)<BR>
</TT>This method inserts the string representation of the
specified object at the specified offset of this string buffer.
<BR>
<I><B>Parameters: <BR>
</B></I><TT>off</TT>-the offset at
which to insert the object.<BR>
<TT>obj</TT>-the object to be inserted.
<BR>
<I><B>Returns: </B></I>This string buffer, with the object inserted.
<BR>
<I><B>Throws: </B></I><TT>StringIndexOutOfBoundsException</TT>
if the offset is invalid.
</BLOCKQUOTE>
<H4><TT>insert</TT></H4>
<BLOCKQUOTE>
<TT>public StringBuffer insert(int off, String
str)<BR>
</TT>This method inserts the specified string at the specified
offset of this string buffer.<BR>
<I><B>Parameters: <BR>
</B></I><TT>off</TT>-the offset at
which to insert the string.<BR>
<TT>str</TT>-the string to be inserted.
<BR>
<I><B>Returns: </B></I>This string buffer, with the string inserted.
<BR>
<I><B>Throws: </B></I><TT>StringIndexOutOfBoundsException</TT>
if the offset is invalid.
</BLOCKQUOTE>
<H4><TT>length</TT></H4>
<BLOCKQUOTE>
<TT>public int length()<BR>
</TT>This method determines the length of this string buffer,
which is the actual number of characters stored in the buffer.
<BR>
<I><B>Returns: </B></I>The length of this string buffer.
</BLOCKQUOTE>
<H4><TT>reverse</TT></H4>
<BLOCKQUOTE>
<TT>public StringBuffer reverse()<BR>
</TT>This method reverses the character sequence in this
string buffer.<BR>
<I><B>Returns: </B></I>This string buffer, with the characters
reversed.
</BLOCKQUOTE>
<H4><TT>setCharAt</TT></H4>
<BLOCKQUOTE>
<TT>public void setCharAt(int index, char
ch)<BR>
</TT>This method changes the character at the specified
index in this string to the specified character.<BR>
<I><B>Parameters: <BR>
</B></I><TT>index</TT>-the index of
the character to change.<BR>
<TT>ch</TT>-the new character.<BR>
<I><B>Throws: </B></I><TT>StringIndexOutOfBoundsException</TT>
if the index is invalid.
</BLOCKQUOTE>
<H4><TT>setLength</TT></H4>
<BLOCKQUOTE>
<TT>public void setLength(int newLength)
<BR>
</TT>This method explicitly sets the length of this string
buffer. If the length is reduced, characters are lost; if the
length is increased, new characters are set to 0 (null).<BR>
<I><B>Parameters: </B></I><TT>newLength</TT>-the
new length of the string buffer.<BR>
<I><B>Throws: </B></I><TT>StringIndexOutOfBoundsException</TT>
if the length is invalid.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>This method determines a constant string representation
of this string buffer.<BR>
<I><B>Returns: </B></I>The constant string representation of this
string buffer.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierSystemFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>System</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>This class provides a platform-independent means of
interacting with the Java runtime system. The <TT>System</TT>
class provides support for standard input, standard output, and
standard error streams, along with providing access to system
properties, among other things.
</BLOCKQUOTE>
<H4>Member Variables</H4>
<BLOCKQUOTE>
<PRE>
public static PrintStream err
</PRE>
</BLOCKQUOTE>
<P>
This is the standard error stream, which is used for printing
error information. Typically this stream corresponds to display
output since it is important that the user see the error information.
<BLOCKQUOTE>
<PRE>
public static InputStream in
</PRE>
</BLOCKQUOTE>
<P>
This is the standard input stream, which is used for reading character
data. Typically this stream corresponds to keyboard input or another
input source specified by the host environment or user.
<BLOCKQUOTE>
<PRE>
public static PrintStream out
</PRE>
</BLOCKQUOTE>
<P>
This is the standard output stream, which is used for printing
character data. Typically this stream corresponds to display output
or another output destination specified by the host environment
or user.
<H4><TT>arraycopy</TT></H4>
<BLOCKQUOTE>
<TT>public static void arraycopy(Object src,
int src_position, Object dst,<BR>
int dst_position, int len)<BR>
</TT>This method copies <TT>len</TT>
array elements from the <TT>src</TT>
array beginning at <TT>src_position</TT>
to the <TT>dst</TT> array beginning
at <TT>dst_position</TT>. Both <TT>src</TT>
and <TT>dst</TT> must be array objects.
Note that <TT>arraycopy</TT> does
not allocate memory for the destination array; the memory must
already be allocated.<BR>
<I><B>Parameters: <BR>
</B></I><TT>src</TT>-the source array
to copy data from.<BR>
<TT>src_position</TT>-the start position
in the source array.<BR>
<TT>dst</TT>-the destination array
to copy data to.<BR>
<TT>dst_position</TT>-the start position
in the destination array.<BR>
<TT>len</TT>-the number of array elements
to be copied.<BR>
<I><B>Throws: </B></I><TT>ArrayIndexOutOfBoundsException</TT>
if the copy would cause data to be accessed outside of array bounds.
<BR>
<I><B>Throws: </B></I><TT>ArrayStoreException</TT>
if an element in the source array could not be stored in the destination
array due to a type mismatch.
</BLOCKQUOTE>
<H4><TT>currentTimeMillis</TT></H4>
<BLOCKQUOTE>
<TT>public static long currentTimeMillis()
<BR>
</TT>This method determines the current UTC time relative
to midnight, January 1, 1970 UTC, in milliseconds.<BR>
<I><B>Returns: </B></I>The current UTC time relative to midnight,
January 1, 1970 UTC, in milliseconds.
</BLOCKQUOTE>
<H4><TT>exit</TT></H4>
<BLOCKQUOTE>
<TT>public static void exit(int status)<BR>
</TT>This method exits the Java runtime system (virtual
machine) with the specified integer exit status. Note that since
<TT>exit</TT> kills the runtime system,
it never returns.<BR>
<I><B>Parameters: </B></I><TT>status</TT>-the
integer exit status; this should be set to nonzero if this is
an abnormal exit.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread cannot exit with the specified exit status.
</BLOCKQUOTE>
<H4><TT>gc</TT></H4>
<BLOCKQUOTE>
<TT>public static void gc()<BR>
</TT>This method invokes the Java garbage collector to
clean up any objects that are no longer needed, usually resulting
in more free memory.
</BLOCKQUOTE>
<H4><TT>getProperties</TT></H4>
<BLOCKQUOTE>
<TT>public static Properties getProperties()
<BR>
</TT>This method determines the current system properties.
Following is a list of all the system properties guaranteed to
be supported:
</BLOCKQUOTE>
<UL>
<LI><TT>java.version</TT>-the Java
version number.
<LI><TT>java.vendor</TT>-the Java
vendor-specific string.
<LI><TT>java.vendor.url</TT>-the Java
vendor URL.
<LI><TT>java.home</TT>-the Java installation
directory.
<LI><TT>java.class.version</TT>-the
Java class format version number.
<LI><TT>java.class.path</TT>-the Java
<TT>CLASSPATH</TT> environment variable.
<LI><TT>os.name</TT>-the operating
system name.
<LI><TT>os.arch</TT>-the operating
system architecture.
<LI><TT>os.version</TT>-the operating
system version.
<LI><TT>file.separator</TT>-the file
separator.
<LI><TT>path.separator</TT>-the path
separator.
<LI><TT>line.separator</TT>-the line
separator.
<LI><TT>user.name</TT>-the user's
account name.
<LI><TT>user.home</TT>-the user's
home directory.
<LI><TT>user.dir</TT>-the user's current
working directory.
</UL>
<BLOCKQUOTE>
<I><B>Returns: </B></I>The current system properties.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread cannot access the system <BR>
properties.
</BLOCKQUOTE>
<H4><TT>getProperty</TT></H4>
<BLOCKQUOTE>
<TT>public static String getProperty(String
key)<BR>
</TT>This method determines the system property with the
specified key name.<BR>
<I><B>Parameters: </B></I><TT>key</TT>-the
key name of the system property.<BR>
<I><B>Returns: </B></I>The system property with the specified
key name.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread cannot access the system property.
</BLOCKQUOTE>
<H4><TT>getProperty</TT></H4>
<BLOCKQUOTE>
<TT>public static String getProperty(String
key, String def)<BR>
</TT>This method determines the system property with the
specified key name; it returns the specified default property
value if the key isn't found.<BR>
<I><B>Parameters: <BR>
</B></I><TT>key</TT>-the key name
of the system property.<BR>
<TT>def</TT>-the default property
value to use if the key isn't found.<BR>
<I><B>Returns: </B></I>The system property with the specified
key name, or the specified default property value if the key isn't
found.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread cannot access the system property.
</BLOCKQUOTE>
<H4><TT>getSecurityManager</TT></H4>
<BLOCKQUOTE>
<TT>public static SecurityManager getSecurityManager()
<BR>
</TT>This method gets the security manager for the Java
program, or null if none exists.<BR>
<I><B>Returns: </B></I>The security manager for the Java program,
or null if none exists.
</BLOCKQUOTE>
<H4><TT>load</TT></H4>
<BLOCKQUOTE>
<TT>public static void load(String pathname)
<BR>
</TT>This method loads the dynamic library with the specified
complete path name. This method simply calls the <TT>load</TT>
method in the <TT>Runtime</TT> class.
<BR>
<I><B>Parameters: </B></I><TT>pathname</TT>-the
path name of the library to load.<BR>
<I><B>Throws: </B></I><TT>UnsatisfiedLinkError</TT>
if the library doesn't exist.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread can't load the library.
</BLOCKQUOTE>
<H4><TT>loadLibrary</TT></H4>
<BLOCKQUOTE>
<TT>public static void loadLibrary(String
libname)<BR>
</TT>This method loads the dynamic library with the specified
library name. Note that the mapping from library name to a specific
filename is performed in a platform-specific manner.<BR>
<I><B>Parameters: </B></I><TT>libname</TT>-the
name of the library to load.<BR>
<I><B>Throws: </B></I><TT>UnsatisfiedLinkError</TT>
if the library doesn't exist.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread can't load the library.
</BLOCKQUOTE>
<H4><TT>runFinalization</TT></H4>
<BLOCKQUOTE>
<TT>public static void runFinalization()
<BR>
</TT>This method explicitly causes the <TT>finalize</TT>
methods of any discarded objects to be called. Typically, the
<TT>finalize</TT> methods of discarded
objects are automatically called asynchronously when the garbage
collector cleans up the objects. You can use <TT>runFinalization</TT>
to have the <TT>finalize</TT> methods
called synchronously.
</BLOCKQUOTE>
<H4><TT>setProperties</TT></H4>
<BLOCKQUOTE>
<TT>public static void setProperties(Properties
props)<BR>
</TT>This method sets the system properties to the specified
properties.<BR>
<I><B>Parameters: </B></I><TT>props</TT>-the
new properties to be set.
</BLOCKQUOTE>
<H4><TT>setSecurityManager</TT></H4>
<BLOCKQUOTE>
<TT>public static void setSecurityManager(SecurityManager
s)<BR>
</TT>This method sets the security manager to the specified
security manager. Note that the security manager can be set only
once for a Java program.<BR>
<I><B>Parameters: </B></I><TT>s</TT>-the
new security manager to be set.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the security manager has already been set.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierThreadFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Thread</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT><I><B>Implements: </B></I><TT>Runnable
<BR>
</TT>This class provides the overhead necessary to manage
a single thread of execution within a process. The <TT>Thread</TT>
class is the basis for multithreaded programming in Java.
</BLOCKQUOTE>
<H4>Member Constants</H4>
<BLOCKQUOTE>
<PRE>
public final static int MAX_PRIORITY
</PRE>
</BLOCKQUOTE>
<P>
This is a constant representing the maximum priority a thread
can have, which is set to <TT>10</TT>.
<BLOCKQUOTE>
<PRE>
public final static int MIN_PRIORITY
</PRE>
</BLOCKQUOTE>
<P>
This is a constant representing the minimum priority a thread
can have, which is set to <TT>1</TT>.
<BLOCKQUOTE>
<PRE>
public final static int NORM_PRIORITY
</PRE>
</BLOCKQUOTE>
<P>
This is a constant representing the normal (default) priority
for a thread, which is set to <TT>5</TT>.
<H4><TT>Thread</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Thread()<BR>
</TT>This constructor creates a default thread. Note that
threads created with this constructor must have overridden their
<TT>run</TT> method to actually do
anything.
</BLOCKQUOTE>
<H4><TT>Thread</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Thread(Runnable target)<BR>
</TT>This constructor creates a thread that uses the <TT>run</TT>
method of the specified runnable.<BR>
<I><B>Parameters: </B></I><TT>target</TT>-the
object whose <TT>run</TT> method is
used by the thread.
</BLOCKQUOTE>
<H4><TT>Thread</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Thread(ThreadGroup group, Runnable
target)<BR>
</TT>This constructor creates a thread belonging to the
specified thread group that uses the <TT>run</TT>
method of the specified runnable.<BR>
<I><B>Parameters: <BR>
</B></I><TT>group</TT>-the thread
group the thread is to be a member of.<BR>
<TT>target</TT>-the object whose <TT>run</TT>
method is used by the thread.
</BLOCKQUOTE>
<H4><TT>Thread</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Thread(String name)<BR>
</TT>This constructor creates a thread with the specified
name.<BR>
<I><B>Parameters: </B></I><TT>name</TT>-the
name of the new thread.
</BLOCKQUOTE>
<H4><TT>Thread</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Thread(ThreadGroup group, String
name)<BR>
</TT>This constructor creates a thread belonging to the
specified thread group with the specified name.<BR>
<I><B>Parameters: <BR>
</B></I><TT>group</TT>-the thread
group the thread is to be a member of.<BR>
<TT>name</TT>-the name of the new
thread.
</BLOCKQUOTE>
<H4><TT>Thread</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Thread(Runnable target, String
name)<BR>
</TT>This constructor creates a thread with the specified
name that uses the <TT>run</TT> method
of the specified runnable.<BR>
<I><B>Parameters: <BR>
</B></I><TT>target</TT>-the object
whose <TT>run</TT> method is used
by the thread.<BR>
<TT>name</TT>-the name of the new
thread.
</BLOCKQUOTE>
<H4><TT>Thread</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Thread(ThreadGroup group, Runnable
target, String name)<BR>
</TT>This constructor creates a thread belonging to the
specified thread group with the specified name that uses the <TT>run</TT>
method of the specified runnable.<BR>
<I><B>Parameters: <BR>
</B></I><TT>group</TT>-the thread
group the thread is to be a member of.<BR>
<TT>target</TT>-the object whose <TT>run</TT>
method is used by the thread.<BR>
<TT>name</TT>-the name of the new
thread.
</BLOCKQUOTE>
<H4><TT>activeCount</TT></H4>
<BLOCKQUOTE>
<TT>public static int activeCount()<BR>
</TT>This method determines the number of active threads
in this thread's thread group.<BR>
<I><B>Returns: </B></I>The number of active threads in this thread's
thread group.
</BLOCKQUOTE>
<H4><TT>checkAccess</TT></H4>
<BLOCKQUOTE>
<TT>public void checkAccess()<BR>
</TT>This method checks to see if the currently running
thread is allowed access to this thread.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the calling thread doesn't have access to this thread.
</BLOCKQUOTE>
<H4><TT>countStackFrames</TT></H4>
<BLOCKQUOTE>
<TT>public int countStackFrames()<BR>
</TT>This method determines the number of stack frames
in this thread. Note that the thread must be suspended to use
this method.<BR>
<I><B>Returns: </B></I>The number of stack frames in this thread.
<BR>
<I><B>Throws: </B></I><TT>IllegalThreadStateException</TT>
if the thread is not suspended.
</BLOCKQUOTE>
<H4><TT>currentThread</TT></H4>
<BLOCKQUOTE>
<TT>public static Thread currentThread()
<BR>
</TT>This method determines the currently running thread.
<BR>
<I><B>Returns: </B></I>The currently running thread.
</BLOCKQUOTE>
<H4><TT>destroy</TT></H4>
<BLOCKQUOTE>
<TT>public void destroy()<BR>
</TT>This method destroys this thread without performing
any cleanup, meaning that any monitors locked by the thread remain
locked. Note that this method should only be used as a last resort
for destroying a thread.
</BLOCKQUOTE>
<H4><TT>dumpStack</TT></H4>
<BLOCKQUOTE>
<TT>public static void dumpStack()<BR>
</TT>This method prints a stack trace for this thread.
Note that this method is useful only for debugging.
</BLOCKQUOTE>
<H4><TT>enumerate</TT></H4>
<BLOCKQUOTE>
<TT>public static int enumerate(Thread list[])
<BR>
</TT>This method fills the specified array with references
to every active thread in this thread's thread group.<BR>
<I><B>Parameters: </B></I><TT>list</TT>-an
array to hold the enumerated threads.<BR>
<I><B>Returns: </B></I>The number of threads added to the array.
</BLOCKQUOTE>
<H4><TT>getName</TT></H4>
<BLOCKQUOTE>
<TT>public final String getName()<BR>
</TT>This method determines the name of this thread.<BR>
<I><B>Returns: </B></I>The name of this thread.
</BLOCKQUOTE>
<H4><TT>getPriority</TT></H4>
<BLOCKQUOTE>
<TT>public final int getPriority()<BR>
</TT>This method determines the priority of this thread.
<BR>
<I><B>Returns: </B></I>The priority of this thread.
</BLOCKQUOTE>
<H4><TT>getThreadGroup</TT></H4>
<BLOCKQUOTE>
<TT>public final ThreadGroup getThreadGroup()
<BR>
</TT>This method determines the thread group for this thread.
<BR>
<I><B>Returns: </B></I>The thread group for this thread.
</BLOCKQUOTE>
<H4><TT>interrupt</TT></H4>
<BLOCKQUOTE>
<TT>public void interrupt()<BR>
</TT>This method interrupts this thread.
</BLOCKQUOTE>
<H4><TT>interrupted</TT></H4>
<BLOCKQUOTE>
<TT>public static boolean interrupted()<BR>
</TT>This method determines if this thread has been interrupted.
<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the thread has been interrupted; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>isAlive</TT></H4>
<BLOCKQUOTE>
<TT>public final boolean isAlive()<BR>
</TT>This method determines if this thread is active. An
active thread is a thread that has been started and has not yet
stopped.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the thread is active; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>isDaemon</TT></H4>
<BLOCKQUOTE>
<TT>public final boolean isDaemon()<BR>
</TT>This method determines if this thread is a daemon
thread. A daemon thread is a background thread that is owned by
the runtime system rather than a specific process.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the thread is a daemon thread; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>isInterrupted</TT></H4>
<BLOCKQUOTE>
<TT>public boolean isInterrupted()<BR>
</TT>This method determines if this thread has been interrupted.
<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the thread has been interrupted; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>join</TT></H4>
<BLOCKQUOTE>
<TT>public final void join() throws InterruptedException
<BR>
</TT>This method causes the current thread to wait indefinitely
until it dies.<BR>
<I><B>Throws: </B></I><TT>InterruptedException</TT>
if another thread has interrupted this thread.
</BLOCKQUOTE>
<H4><TT>join</TT></H4>
<BLOCKQUOTE>
<TT>public final void join(long timeout)
throws InterruptedException<BR>
</TT>This method causes the current thread to wait until
it dies, or until the specified timeout period has elapsed.<BR>
<I><B>Parameters: </B></I><TT>timeout</TT>-the
maximum timeout period to wait, in milliseconds.<BR>
<I><B>Throws: </B></I><TT>InterruptedException</TT>
if another thread has interrupted this thread.
</BLOCKQUOTE>
<H4><TT>join</TT></H4>
<BLOCKQUOTE>
<TT>public final void join(long timeout,
int nanos) throws InterruptedException<BR>
</TT>This method causes the current thread to wait until
it dies, or until the specified timeout period has elapsed. The
timeout period in this case is the addition of the <TT>timeout</TT>
and <TT>nanos</TT> parameters, which
provide finer control over the timeout period.<BR>
<I><B>Parameters: <BR>
</B></I><TT>timeout</TT>-the maximum
timeout period to wait, in milliseconds.<BR>
<TT>nanos</TT>-the additional time
for the timeout period, in nanoseconds.<BR>
<I><B>Throws: </B></I><TT>InterruptedException</TT>
if another thread has interrupted this thread.
</BLOCKQUOTE>
<H4><TT>resume</TT></H4>
<BLOCKQUOTE>
<TT>public final void resume()<BR>
</TT>This method resumes this thread's execution if it
has been suspended.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread doesn't have access to this thread.
</BLOCKQUOTE>
<H4><TT>run</TT></H4>
<BLOCKQUOTE>
<TT>public void run()<BR>
</TT>This method is the body of the thread, which performs
the actual work of the thread. The <TT>run</TT>
method is called when the thread is started. The <TT>run</TT>
method is either overridden in a derived <TT>Thread</TT>
class or implemented in a class implementing the <TT>Runnable</TT>
interface.
</BLOCKQUOTE>
<H4><TT>setDaemon</TT></H4>
<BLOCKQUOTE>
<TT>public final void setDaemon(boolean daemon)
<BR>
</TT>This method sets this thread as either a daemon thread
or a user thread based on the specified boolean value. Note that
the thread must be inactive to use this method.<BR>
<I><B>Parameters: </B></I><TT>daemon</TT>-a
boolean value that determines whether the thread is a daemon thread.
<BR>
<I><B>Throws: </B></I><TT>IllegalThreadStateException</TT>
if the thread is active.
</BLOCKQUOTE>
<H4><TT>setName</TT></H4>
<BLOCKQUOTE>
<TT>public final void setName(String name)
<BR>
</TT>This method sets the name of this thread.<BR>
<I><B>Parameters: </B></I><TT>name</TT>-the
new name of the thread.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread doesn't have access to this thread.
</BLOCKQUOTE>
<H4><TT>setPriority</TT></H4>
<BLOCKQUOTE>
<TT>public final void setPriority(int newPriority)
<BR>
</TT>This method sets the priority of this thread.<BR>
<I><B>Parameters: </B></I><TT>newPriority</TT>-the
new priority of the thread.<BR>
<I><B>Throws: </B></I><TT>IllegalArgumentException</TT>
if the priority is not within the range <TT>MIN_PRIORITY</TT>
to <TT>MAX_PRIORITY</TT>.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread doesn't have access to this thread.
</BLOCKQUOTE>
<H4><TT>sleep</TT></H4>
<BLOCKQUOTE>
<TT>public static void sleep(long millis)
throws InterruptedException<BR>
</TT>This method causes the current thread to sleep for
the specified length of time, in milliseconds.<BR>
<I><B>Parameters: </B></I><TT>millis</TT>-the
length of time to sleep, in milliseconds.<BR>
<I><B>Throws: </B></I><TT>InterruptedException</TT>
if another thread has interrupted this thread.
</BLOCKQUOTE>
<H4><TT>sleep</TT></H4>
<BLOCKQUOTE>
<TT>public static void sleep(long millis,
int nanos) throws InterruptedException<BR>
</TT>This method causes the current thread to sleep for
the specified length of time. The length of time in this case
is the addition of the <TT>millis</TT>
and <TT>nanos</TT> parameters, which
provide finer control over the sleep time.<BR>
<I><B>Parameters: <BR>
</B></I><TT>millis</TT>-the length
of time to sleep, in milliseconds.<BR>
<TT>nanos</TT>-the additional time
for the sleep time, in nanoseconds.<BR>
<I><B>Throws: </B></I><TT>InterruptedException</TT>
if another thread has interrupted this thread.
</BLOCKQUOTE>
<H4><TT>start</TT></H4>
<BLOCKQUOTE>
<TT>public void start()<BR>
</TT>This method starts this thread, causing the <TT>run</TT>
method to be executed.<BR>
<I><B>Throws: </B></I><TT>IllegalThreadStateException</TT>
if the thread was already running.
</BLOCKQUOTE>
<H4><TT>stop</TT></H4>
<BLOCKQUOTE>
<TT>public final void stop()<BR>
</TT>This method abnormally stops this thread, causing
it to throw a <TT>ThreadDeath</TT>
object. You can catch the <TT>ThreadDeath</TT>
object to perform cleanup, but there is rarely a need to do so.
<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread doesn't have access to this thread.
</BLOCKQUOTE>
<H4><TT>stop</TT></H4>
<BLOCKQUOTE>
<TT>public final synchronized void stop(Throwable
o)<BR>
</TT>This method abnormally stops this thread, causing
it to throw the specified object. Note that this version of <TT>stop</TT>
should be used only in very rare situations.<BR>
<I><B>Parameters: </B></I><TT>o</TT>-the
object to be thrown.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread doesn't have access to this thread.
</BLOCKQUOTE>
<H4><TT>suspend</TT></H4>
<BLOCKQUOTE>
<TT>public final void suspend()<BR>
</TT>This method suspends the execution of this thread.
<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread doesn't have access to this thread.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>This method determines a string representation of
this thread, which includes the thread's name, priority, and thread
group.<BR>
<I><B>Returns: </B></I>A string representation of this thread.
</BLOCKQUOTE>
<H4><TT>yield</TT></H4>
<BLOCKQUOTE>
<TT>public static void yield()<BR>
</TT>This method causes the currently executing thread
to yield so that other threads can execute.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierThreadGroupFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>ThreadGroup</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>This class implements a thread group, which is a set
of threads that can be manipulated as one. Thread groups can also
contain other thread groups, resulting in a thread hierarchy.
</BLOCKQUOTE>
<H4><TT>ThreadGroup</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public ThreadGroup(String name)<BR>
</TT>This constructor creates a thread group with the specified
name. The newly created thread group belongs to the thread group
of the current thread.<BR>
<I><B>Parameters: </B></I><TT>name</TT>-the
name of the new thread group.
</BLOCKQUOTE>
<H4><TT>ThreadGroup</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public ThreadGroup(ThreadGroup parent,
String name)<BR>
</TT>This constructor creates a thread group with the specified
name and belonging to the specified parent thread group.<BR>
<I><B>Parameters: <BR>
</B></I><TT>parent</TT>-the parent
thread group.<BR>
<TT>name</TT>-the name of the new
thread group.<BR>
<I><B>Throws: </B></I><TT>NullPointerException</TT>
if the specified thread group is null.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread cannot create a thread in the specified
thread group.
</BLOCKQUOTE>
<H4><TT>activeCount</TT></H4>
<BLOCKQUOTE>
<TT>public int activeCount()<BR>
</TT>This method determines the number of active threads
in this thread group or in any other thread group that has this
thread group as an ancestor.<BR>
<I><B>Returns: </B></I>The number of active threads in this thread
group or in any other thread group that has this thread group
as an ancestor.
</BLOCKQUOTE>
<H4><TT>activeGroupCount</TT></H4>
<BLOCKQUOTE>
<TT>public int activeGroupCount()<BR>
</TT>This method determines the number of active thread
groups that have this thread group as an ancestor.<BR>
<I><B>Returns: </B></I>The number of active thread groups that
have this thread group as an ancestor.
</BLOCKQUOTE>
<H4><TT>checkAccess</TT></H4>
<BLOCKQUOTE>
<TT>public final void checkAccess()<BR>
</TT>This method checks to see if the currently running
thread is allowed access to this thread group.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the calling thread doesn't have access to this thread group.
</BLOCKQUOTE>
<H4><TT>destroy</TT></H4>
<BLOCKQUOTE>
<TT>public final void destroy()<BR>
</TT>This method destroys this thread group and all of
its subgroups.<BR>
<I><B>Throws: </B></I><TT>IllegalThreadStateException</TT>
if the thread group is not empty or if it was already destroyed.
<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the calling thread doesn't have access to this thread group.
</BLOCKQUOTE>
<H4><TT>enumerate</TT></H4>
<BLOCKQUOTE>
<TT>public int enumerate(Thread list[])<BR>
</TT>This method fills the specified array with references
to every active thread in this thread group.<BR>
<I><B>Parameters: </B></I><TT>list</TT>-an
array to hold the enumerated threads.<BR>
<I><B>Returns: </B></I>The number of threads added to the array.
</BLOCKQUOTE>
<H4><TT>enumerate</TT></H4>
<BLOCKQUOTE>
<TT>public int enumerate(Thread list[], boolean
recurse)<BR>
</TT>This method fills the specified array with references
to every active thread in this thread group. If the <TT>recurse</TT>
parameter is set to <TT>true</TT>,
all the active threads belonging to subgroups of this thread are
also added to the array.<BR>
<I><B>Parameters: <BR>
</B></I><TT>list</TT>-an array to
hold the enumerated threads.<BR>
<TT>recurse</TT>-a boolean value specifying
whether to recursively enumerate active threads in subgroups.
<BR>
<I><B>Returns: </B></I>The number of threads added to the array.
</BLOCKQUOTE>
<H4><TT>enumerate</TT></H4>
<BLOCKQUOTE>
<TT>public int enumerate(ThreadGroup list[])
<BR>
</TT>This method fills the specified array with references
to every active subgroup in this thread group.<BR>
<I><B>Parameters: </B></I><TT>list</TT>-an
array to hold the enumerated thread groups.<BR>
<I><B>Returns: </B></I>The number of thread groups added to the
array.
</BLOCKQUOTE>
<H4><TT>enumerate</TT></H4>
<BLOCKQUOTE>
<TT>public int enumerate(ThreadGroup list[],
boolean recurse)<BR>
</TT>This method fills the specified array with references
to every active subgroup in this thread group. If the <TT>recurse</TT>
parameter is set to <TT>true</TT>,
all the active thread groups belonging to subgroups of this thread
are also added to the array.<BR>
<I><B>Parameters: <BR>
</B></I><TT>list</TT>-an array to
hold the enumerated thread groups.<BR>
<TT>recurse</TT>-a boolean value specifying
whether to recursively enumerate active thread groups in subgroups.
<BR>
<I><B>Returns: </B></I>The number of thread groups added to the
array.
</BLOCKQUOTE>
<H4><TT>getMaxPriority</TT></H4>
<BLOCKQUOTE>
<TT>public final int getMaxPriority()<BR>
</TT>This method determines the maximum priority of this
thread group. Note that threads in this thread group cannot have
a higher priority than the maximum priority.<BR>
<I><B>Returns: </B></I>The maximum priority of this thread group.
</BLOCKQUOTE>
<H4><TT>getName</TT></H4>
<BLOCKQUOTE>
<TT>public final String getName()<BR>
</TT>This method determines the name of this thread group.
<BR>
<I><B>Returns: </B></I>The name of this thread group.
</BLOCKQUOTE>
<H4><TT>getParent</TT></H4>
<BLOCKQUOTE>
<TT>public final ThreadGroup getParent()
<BR>
</TT>This method determines the parent of this thread group.
<BR>
<I><B>Returns: </B></I>The parent of this thread group.
</BLOCKQUOTE>
<H4><TT>isDaemon</TT></H4>
<BLOCKQUOTE>
<TT>public final boolean isDaemon()<BR>
</TT>This method determines if this thread group is a daemon
thread group. A daemon thread group is automatically destroyed
when all its threads finish executing.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the thread group is a daemon thread group; <TT>false</TT>
otherwise.
</BLOCKQUOTE>
<H4><TT>list</TT></H4>
<BLOCKQUOTE>
<TT>public void list()<BR>
</TT>This method prints information about this thread group
to standard output, including the active threads in the group.
Note that this method is useful only for debugging.
</BLOCKQUOTE>
<H4><TT>parentOf</TT></H4>
<BLOCKQUOTE>
<TT>public final boolean parentOf(ThreadGroup
g)<BR>
</TT>This method checks to see if this thread group is
a parent or ancestor of the specified thread group.<BR>
<I><B>Parameters: </B></I><TT>g</TT>-the
thread group to be checked.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if this thread group is the parent or ancestor of the specified
thread group; <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H4><TT>resume</TT></H4>
<BLOCKQUOTE>
<TT>public final void resume()<BR>
</TT>This method resumes execution of all the threads in
this thread group that have been suspended.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread doesn't have access to this thread group
or any of its threads.
</BLOCKQUOTE>
<H4><TT>setDaemon</TT></H4>
<BLOCKQUOTE>
<TT>public final void setDaemon(boolean daemon)
<BR>
</TT>This method sets this thread group as either a daemon
thread group or a user thread group based on the specified boolean
value. A daemon thread group is automatically destroyed when all
its threads finish executing.<BR>
<I><B>Parameters: </B></I><TT>daemon</TT>-a
boolean value that determines whether the thread group is a daemon
thread group.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread doesn't have access to this thread group.
</BLOCKQUOTE>
<H4><TT>setMaxPriority</TT></H4>
<BLOCKQUOTE>
<TT>public final void setMaxPriority(int
pri)<BR>
</TT>This method sets the maximum priority of this thread
group.<BR>
<I><B>Parameters: </B></I><TT>pri</TT>-the
new maximum priority of the thread group.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread doesn't have access to this thread group.
</BLOCKQUOTE>
<H4><TT>stop</TT></H4>
<BLOCKQUOTE>
<TT>public final synchronized void stop()
<BR>
</TT>This method stops all the threads in this thread group
and in all of its subgroups.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread doesn't have access to this thread group,
any of its threads, or threads in subgroups.
</BLOCKQUOTE>
<H4><TT>suspend</TT></H4>
<BLOCKQUOTE>
<TT>public final synchronized void suspend()
<BR>
</TT>This method suspends all the threads in this thread
group and in all of its subgroups.<BR>
<I><B>Throws: </B></I><TT>SecurityException</TT>
if the current thread doesn't have access to this thread group,
any of its threads, or threads in subgroups.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>This method determines a string representation of
this thread group.<BR>
<I><B>Returns: </B></I>A string representation of this thread
group.
</BLOCKQUOTE>
<H4><TT>uncaughtException</TT></H4>
<BLOCKQUOTE>
<TT>public void uncaughtException(Thread
t, Throwable e)<BR>
</TT>This method is called when a thread in this thread
group exits because of an uncaught exception. You can override
this method to provide specific handling of uncaught exceptions.
<BR>
<I><B>Parameters:<BR>
</B></I><TT>t</TT>-the thread that
is exiting.<BR>
<TT>e</TT>-the uncaught exception.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierThrowableFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Throwable</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>This class provides the core functionality for signaling
when exceptional conditions occur. All errors and exceptions in
the Java system are derived from <TT>Throwable</TT>.
The <TT>Throwable</TT> class contains
a snapshot of the execution stack for helping to track down why
exceptional conditions occur.
</BLOCKQUOTE>
<H4><TT>Throwable</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public Throwable()<BR>
</TT>This constructor creates a default throwable with
no detail message; the stack trace is automatically filled in.
</BLOCKQUOTE>
<H4><TT>Throwable</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public  constructorhrowable constructor
( constructortring  constructormessage)<BR>
</TT>This constructor creates a throwable with the specified
detail message; the stack trace is automatically filled in.<BR>
<I><B>Parameters: </B></I><TT>message</TT>-the
detail message.
</BLOCKQUOTE>
<H4><TT>fillInStackTrace</TT></H4>
<BLOCKQUOTE>
<TT>public Throwable fillInStackTrace()<BR>
</TT>This method fills in the execution stack trace. Note
that this method is only useful when rethrowing this throwable.
<BR>
<I><B>Returns: </B></I>This throwable.
</BLOCKQUOTE>
<H4><TT>getMessage</TT></H4>
<BLOCKQUOTE>
<TT>public String getMessage()<BR>
</TT>This method determines the detail message of this
throwable.<BR>
<I><B>Returns: </B></I>The detail message of this throwable.
</BLOCKQUOTE>
<H4><TT>printStackTrace</TT></H4>
<BLOCKQUOTE>
<TT>public void printStackTrace()<BR>
</TT>This method prints this throwable and its stack trace
to the standard error stream.
</BLOCKQUOTE>
<H4><TT>printStackTrace</TT></H4>
<BLOCKQUOTE>
<TT>public void printStackTrace(PrintStream
s)<BR>
</TT>This method prints this throwable and its stack trace
to the specified print stream.<BR>
<I><B>Parameters: </B></I><TT>s</TT>-the
print stream to print the stack to.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>This method determines a string representation of
this throwable.<BR>
<I><B>Returns: </B></I>A string representation of this throwable.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierRuntimeExceptionFONTTT1"><FONT SIZE=5 COLOR=#FF0000>
<TT>RuntimeException</TT>
</FONT></A></H2>
<BLOCKQUOTE>
This exception class signals that an invalid cast has occurred.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierClassNotFoundExceptionFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>ClassNotFoundException</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Exception<BR>
</TT>This exception class signals that a class could not
be found.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierCloneNotSupportedExceptionFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>CloneNotSupportedException</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Exception<BR>
</TT>This exception class signals that an attempt has been
made to clone an object that doesn't support the <TT>Cloneable</TT>
interface.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierExceptionFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Exception</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Throwable<BR>
</TT>This throwable class indicates exceptional conditions
that a Java program might want to know about.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierIllegalAccessExceptionFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>IllegalAccessException</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Exception<BR>
</TT>This exception class signals that the current thread
doesn't have access to a class.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierIllegalArgumentExceptionFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>IllegalArgumentException</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>RuntimeException
<BR>
</TT>This exception class signals that a method has been
passed an illegal argument.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierIllegalMonitorStateExceptionFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>IllegalMonitorStateException</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>RuntimeException
<BR>
</TT>This exception class signals that a thread has attempted
to access an object's monitor without owning the monitor.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierIllegalThreadStateExceptionFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>IllegalThreadStateException</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>IllegalArgumentException
<BR>
</TT>This exception class signals that a thread is not
in the proper state for the requested operation.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierIndexOutOfBoundsExceptionFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>IndexOutOfBoundsException</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>RuntimeException
<BR>
</TT>This exception class signals that an index of some
sort is out of bounds.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierInstantiationExceptionFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>InstantiationException</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Exception<BR>
</TT>This exception class signals that an attempt has been
made to instantiate an abstract class or an interface.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierInterruptedExceptionFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>InterruptedException</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Exception<BR>
</TT>This exception class signals that a thread has been
interrupted that is already waiting or sleeping.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierNegativeArraySizeExceptionFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>NegativeArraySizeException</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>RuntimeException
<BR>
</TT>This exception class signals that an attempt has been
made to create an array with a negative size.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierNullPointerExceptionFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>NullPointerException</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>RuntimeException
<BR>
</TT>This exception class signals an attempt to access
a null pointer as an object.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierNumberFormatExceptionFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>NumberFormatException</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>IllegalArgumentException
<BR>
</TT>This exception class signals an attempt to convert
a string to an invalid number format.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierRuntimeExceptionFONTTT2"><FONT SIZE=5 COLOR=#FF0000>
<TT>RuntimeException</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Exception<BR>
</TT>This exception class signals an exceptional condition
that can reasonably occur in the Java runtime system.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierSecurityExceptionFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>SecurityException</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>RuntimeException
<BR>
</TT>This exception class signals that a security violation
has occurred.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierStringIndexOutOfBoundsExceptionFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>StringIndexOutOfBoundsException</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>IndexOutOfBoundsException
<BR>
</TT>This exception class signals that an invalid string
index has been used.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierAbstractMethodErrorFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>AbstractMethodError</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>IncompatibleClassChangeError
<BR>
</TT>This error class signals an attempt to call an abstract
method.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierClassFormatErrorFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>ClassFormatError</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>LinkageError<BR>
</TT>This error class signals an attempt to read a file
in an invalid format.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierErrorFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Error</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Throwable<BR>
</TT>This throwable class indicates a serious problem beyond
the scope of what a Java program can fix.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierIllegalAccessErrorFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>IllegalAccessError</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>IncompatibleClassChangeError
<BR>
</TT>This error class signals an attempt to access a member
variable or call a method without proper access.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierIncompatibleClassChangeErrorFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>IncompatibleClassChangeError</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>LinkageError<BR>
</TT>This error class signals that an incompatible change
has been made to some class definition.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierInstantiationErrorFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>InstantiationError</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>IncompatibleClassChangeError
<BR>
</TT>This error class signals an attempt to instantiate
an abstract class or an interface.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierInternalErrorFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>InternalError</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>VirtualMachineError
<BR>
</TT>This error class signals that some unexpected internal
error has occurred.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierLinkageErrorFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>LinkageError</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Error<BR>
</TT>This error class signals that a class has some dependency
on another class, but that the latter class has incompatibly changed
after the compilation of the former class.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierNoClassDefFoundErrorFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>NoClassDefFoundError</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>LinkageError<BR>
</TT>This error class signals that a class definition could
not be found.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierNoSuchFieldErrorFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>NoSuchFieldError</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>IncompatibleClassChangeError
<BR>
</TT>This error class signals an attempt to access a member
variable that doesn't exist.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierNoSuchMethodErrorFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>NoSuchMethodError</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>IncompatibleClassChangeError
<BR>
</TT>This error class signals an attempt to call a method
that doesn't exist.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierOutOfMemoryErrorFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>OutOfMemoryError</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>VirtualMachineError
<BR>
</TT>This error class signals that the Java runtime system
is out of memory.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierStackOverflowErrorFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>StackOverflowError</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>VirtualMachineError
<BR>
</TT>This error class signals that a stack overflow has
occurred.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierThreadDeathFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>ThreadDeath</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Error<BR>
</TT>This error class signals that a thread is being abnormally
stopped via the <TT>stop</TT> method.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierUnknownErrorFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>UnknownError</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>VirtualMachineError
<BR>
</TT>This error class signals that an unknown but serious
error has occurred.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierUnsatisfiedLinkErrorFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>UnsatisfiedLinkError</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>LinkageError<BR>
</TT>This error class signals that a native implementation
of a method declared as native cannot be found.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierVerifyErrorFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>VerifyError</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>LinkageError<BR>
</TT>This error class signals that a class has failed the
runtime verification test.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierVirtualMachineErrorFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>VirtualMachineError</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Error<BR>
</TT>This error class signals that the Java virtual machine
is broken or has run out of resources necessary for it to continue
operating.
</BLOCKQUOTE>
<HR>

<CENTER><P><A HREF="ch37.htm"><IMG SRC="http://docs.rinet.ru/J21/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="http://docs.rinet.ru/J21/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/J21/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch39.htm"><IMG SRC="http://docs.rinet.ru/J21/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
