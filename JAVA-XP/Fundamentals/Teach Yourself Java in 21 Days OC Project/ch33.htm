<HTML>
<HEAD>

<META>
<TITLE>appendix E -- java.applet Package Reference</TITLE>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">










<H1><FONT SIZE=6 COLOR=#FF0000>appendix&nbsp;E</FONT></H1>
<H1><FONT COLOR=#FF0000><TT>java.applet</TT></FONT><FONT SIZE=6 COLOR=#FF0000>
Package Reference </FONT></H1>
<HR>
<P>
<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>
<UL>
<LI><A HREF="#TTFONTSIZEFACECourierAppletContextFONTTT">
<TT>AppletContext</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierAppletStubFONTTT">
<TT>AppletStub</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierAudioClipFONTTT">
<TT>AudioClip</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierAppletFONTTT">
<TT>Applet</TT></A>
</UL>

<HR>
<P>
The <TT>java.applet</TT> package contains
the necessary support for graphical Java applets that execute
within the confines of a Web page.
<H2><A NAME="TTFONTSIZEFACECourierAppletContextFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>AppletContext</TT>
</FONT></A></H2>
<P>
The <TT>AppletContext</TT> interface
is provided to give information on an applet's environment. An
<TT>AppletContext</TT> interface can
be obtained by calling the <TT>Applet</TT>
class's <TT>getAppletContext</TT>
method.
<H4><TT>getAudioClip</TT></H4>
<BLOCKQUOTE>
<TT>public abstract AudioClip getAudioClip(URL
url)<BR>
getAudioClip</TT> retrieves an <TT>AudioClip</TT>
based on the URL input parameter.<BR>
<I><B>Parameters: </B></I><TT>url</TT>-a
<TT>URL</TT> object containing location
information for the clip to be retrieved.<BR>
<I><B>Returns: </B></I>An <TT>AudioClip</TT>
object that can be played at a later time.
</BLOCKQUOTE>
<H4><TT>getImage</TT></H4>
<BLOCKQUOTE>
<TT>public abstract Image getImage(URL url)
<BR>
getImage</TT> retrieves image information based on the
URL input parameter. Note that this function returns immediately
and does not retrieve the entire image. This image will not be
retrieved until the <TT>Image</TT>
object is actually needed.<BR>
<I><B>Parameters: </B></I><TT>url</TT>-a
<TT>URL</TT> object containing location
information for the image to be retrieved.<BR>
<I><B>Returns: </B></I>An <TT>Image</TT>
object containing information about the URL passed in.
</BLOCKQUOTE>
<H4><TT>getApplet</TT></H4>
<BLOCKQUOTE>
<TT>public abstract Applet getApplet(String
name)<BR>
getApplet</TT> returns an <TT>Applet</TT>
object from the current <TT>AppletContext</TT>
based on the input name argument.<BR>
<I><B>Parameters:</B></I><TT> name</TT>-a
<TT>String</TT> object representing
an applet's name. This name should correspond to the applet's
HTML <TT>name</TT> attribute.<BR>
<I><B>Returns: </B></I>An <TT>Applet</TT>
object or <TT>null</TT> if no applet
exists with the designated name.
</BLOCKQUOTE>
<H4><TT>getApplets</TT></H4>
<BLOCKQUOTE>
<TT>public abstract Enumeration getApplets()
<BR>
getApplets</TT> returns an <TT>Enumeration</TT>
interface for all the applets on the current <TT>AppletContext</TT>.
<BR>
<I><B>Returns: </B></I>An <TT>Enumeration</TT>
interface that can be used to retrieve all the applets on the
current applet context.
</BLOCKQUOTE>
<H4><TT>showDocument</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void showDocument(URL
url)<BR>
showDocument</TT> will load the <TT>URL</TT>
argument into the current <TT>AppletContext</TT>
if it is a valid URL. This method may be ignored, depending on
the applet context.<BR>
<I><B>Parameters: </B></I><TT>url</TT>-a
<TT>URL</TT> object containing location
information for the image to be retrieved.
</BLOCKQUOTE>
<H4><TT>showDocument</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void showDocument(URL
url, String target)<BR>
</TT>This <TT>showDocument</TT>
method will load the URL argument into a target window or frame
depending on the target string. This method may be ignored, depending
on the applet context.<BR>
<I><B>Parameters:<BR>
</B></I><TT>url</TT>-a <TT>URL</TT>
object containing location information for the image to be retrieved.
<BR>
<TT>target</TT>-the target string,
which can be one of the following values:
</BLOCKQUOTE>
<UL>
<LI><TT>&quot;_self&quot;</TT>-show
in current frame.
<LI><TT>&quot;_parent&quot;</TT>-show
in parent frame.
<LI><TT>&quot;_top&quot;</TT>-show
in top-most frame.
<LI><TT>&quot;_blank&quot;</TT>-show
in new unnamed top-level window.
<LI><TT>&lt;<I>other</FONT></I>&gt;</TT>-show
in new top-level window named <TT>&lt;<I>other</FONT></I>&gt;</TT>.
</UL>
<H4><TT>showStatus</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void showStatus(String
status)<BR>
showStatus</TT> shows a status message using the applet's
context.<BR>
<I><B>Parameters: </B></I><TT>msg</TT>-a
string containing the message to be displayed.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierAppletStubFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>AppletStub</TT></FONT></A></H2>
<P>
The <TT>java.applet.AppletStub</TT>
interface is most often used as an interface to build applet viewers,
browsers, or other tools that want to display applets within them.
This interface is not normally implemented by Java applet developers.
<H4><TT>isActive</TT></H4>
<BLOCKQUOTE>
<TT>public abstract boolean isActive()<BR>
isActive</TT> is used to determine whether this applet
is currently active.<BR>
<I><B>Returns: </B></I><TT>true</TT>
if the applet is active, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>getDocumentBase</TT></H4>
<BLOCKQUOTE>
<TT>public abstract URL getDocumentBase()
<BR>
getDocumentBase</TT> returns the URL of the current page
that this applet is embedded in.<BR>
<I><B>Returns: </B></I>A <TT>URL</TT>
object containing information about the current URL.
</BLOCKQUOTE>
<H4><TT>getCodeBase</TT></H4>
<BLOCKQUOTE>
<TT>public abstract URL getCodeBase()<BR>
getCodeBase</TT> returns the URL of the applet itself.
<BR>
<I><B>Returns: </B></I>A <TT>URL</TT>
object containing information about the applet's URL.
</BLOCKQUOTE>
<H4><TT>getParameter</TT></H4>
<BLOCKQUOTE>
public abstract String getParameter(String name)<BR>
getParameter returns the String value of the parameter passed
in using the HTML <BR>
&lt;PARAM&gt; tag.
</BLOCKQUOTE>
<H4><TT>getAppletContext</TT></H4>
<BLOCKQUOTE>
<TT>public abstract AppletContext getAppletContext()
<BR>
getAppletContext</TT> returns an <TT>AppletContext</TT>
object. This object can be used to determine information about
the applet's runtime environment.<BR>
<I><B>Returns: </B></I>An <TT>AppletContext</TT>
object.
</BLOCKQUOTE>
<H4><TT>appletResize</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void appletResize(int
width, int height)<BR>
appletResize</TT> is called when the applet wants to be
resized.<BR>
<I><B>Parameters:</B> <BR>
</I><TT>width</TT>-an integer value
specifying the applet's new width.<BR>
<TT>height</TT>-an integer value specifying
the applet's new height.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierAudioClipFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>AudioClip</TT></FONT></A></H2>
<P>
The <TT>AudioClip</TT> interface is
used to provide high-level access to sound playback capabilities.
This interface, like <TT>AppletContext</TT>
and <TT>AppletStub</TT>, is usually
implemented only by applet viewers.
<H4><TT>play</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void play()<BR>
</TT>The <TT>play</TT> method
plays audio files from the beginning until the end or <TT>stop</TT>
method is called.
</BLOCKQUOTE>
<H4><TT>loop</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void loop()<BR>
</TT>The <TT>loop</TT> method
plays audio files in a loop continuously.
</BLOCKQUOTE>
<H4><TT>stop</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void stop()<BR>
</TT>The <TT>stop</TT> method
stops the playing of an audio file.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierAppletFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Applet</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends:</B></I> <TT>Panel<BR>
</TT>This implies that every applet has some visual component.
The basic visual component is a panel in an HTML page.
</BLOCKQUOTE>
<H4><TT>Applet</TT></H4>
<BLOCKQUOTE>
<TT>public Applet()<BR>
</TT>This is the default constructor for the <TT>Applet</TT>
class. This function creates a new applet. Each applet should
implement at a minimum the <TT>init</TT>
or <TT>start</TT> methods to display
themselves on the screen and for initial setup.
</BLOCKQUOTE>
<H4><TT>setStub</TT></H4>
<BLOCKQUOTE>
<TT>public final void setStub(AppletStub
stub)<BR>
setStub</TT> sets the <TT>AppletStub</TT>
to the stub passed in. This function is called automatically by
the underlying system and usually is not called directly. The
only time <TT>AppletStub</TT> methods
need to be implemented is if you are writing your own applet viewer
or browser.<BR>
<I><B>Parameters: </B></I><TT>stub</TT>-the
underlying stub used to implement an applet viewer.
</BLOCKQUOTE>
<H4><TT>isActive</TT></H4>
<BLOCKQUOTE>
<TT>public boolean isActive()<BR>
isActive</TT> is used to determine whether this applet
is currently active. An applet is set <TT>Active</TT>
just before the <TT>Start</TT> method
is called.
</BLOCKQUOTE>
<H4><TT>getDocumentBase</TT></H4>
<BLOCKQUOTE>
<TT>public URL getDocumentBase()<BR>
getDocumentBase</TT> returns the URL of the current page
that this applet is embedded in.<BR>
<I><B>Returns: </B></I>A <TT>URL</TT>
object containing information about the current URL.
</BLOCKQUOTE>
<H4><TT>getCodeBase</TT></H4>
<BLOCKQUOTE>
<TT>public URL getCodeBase()<BR>
getCodeBase</TT> returns the URL of the applet itself.
<BR>
<I><B>Returns: </B></I>A <TT>URL</TT>
object containing information about the applet's URL.
</BLOCKQUOTE>
<H4><TT>getParameter</TT></H4>
<BLOCKQUOTE>
<TT>public String getParameter(String name)
<BR>
getParameter</TT> returns the <TT>String</TT>
value of the parameter passed in using the HTML <BR>
<TT>&lt;PARAM&gt;</TT> tag.<BR>
<I><B>Parameters: </B></I><TT>name</TT>-a
case-sensitive string that matches (exactly!) the parameter name
passed in using the HTML <TT>PARAM</TT>
tag.<BR>
<I><B>Returns: </B></I>A string value representing the <TT>PARAM</TT>
tag's <TT>VALUE</TT> attribute.
</BLOCKQUOTE>
<H4><TT>getAppletContext</TT></H4>
<BLOCKQUOTE>
<TT>public AppletContext getAppletContext()
<BR>
getAppletContext</TT> returns an <TT>AppletContext</TT>
object. This object can be used to determine information about
the applet's runtime environment.<BR>
<I><B>Returns: </B></I>An <TT>AppletContext</TT>
object.
</BLOCKQUOTE>
<H4><TT>resize</TT></H4>
<BLOCKQUOTE>
<TT>public void resize(int width, int height)
<BR>
resize</TT> makes use of the <TT>Applet</TT>
class's inheritance from the <TT>Panel</TT>
class to resize the applet based on the input values.<BR>
<I><B>Parameters:</B></I> <I> <BR>
</I><TT>width</TT>-an integer value
specifying the applet's new width.<BR>
<TT>height</TT>-an integer value specifying
the applet's new height.
</BLOCKQUOTE>
<H4><TT>resize</TT></H4>
<BLOCKQUOTE>
<TT>public void resize(Dimension d)<BR>
</TT>This <TT>resize</TT> function
accepts a <TT>Dimension</TT> object
as its argument.<BR>
<I><B>Parameters: </B></I><TT>d</TT>-a
<TT>Dimension</TT> object that specifies
the new size of the applet.
</BLOCKQUOTE>
<H4><TT>showStatus</TT></H4>
<BLOCKQUOTE>
<TT>public void showStatus(String msg)<BR>
showStatus</TT> shows a status message using the applet's
context.<BR>
<I><B>Parameters: </B></I><TT>msg</TT>-a
string containing the message to be displayed.
</BLOCKQUOTE>
<H4><TT>getImage</TT></H4>
<BLOCKQUOTE>
<TT>public Image getImage(URL url)<BR>
getImage</TT> retrieves image information based on the
URL input parameter. Note that this function returns immediately
and does not retrieve the entire image. This image will not be
retrieved until the <TT>Image</TT>
object is actually needed.<BR>
<I><B>Parameters: </B></I><TT>url</TT>-a
<TT>URL</TT> object containing location
information for the image to be retrieved.<BR>
<I><B>Returns: </B></I>An <TT>Image</TT>
object containing information about the URL passed in.
</BLOCKQUOTE>
<H4><TT>getImage</TT></H4>
<BLOCKQUOTE>
<TT>public Image getImage(URL url, String
name)<BR>
</TT>This <TT>getImage</TT>
function accepts both the <TT>URL</TT>
input parameter containing base location information as well as
a String input parameter containing the filename.<BR>
<I><B>Parameters:</B> <BR>
</I><TT>url</TT>-a <TT>URL</TT>
object containing base location information for the image to be
retrieved.<BR>
<TT>name</TT>-a <TT>string</TT>
object containing a filename relative to the base URL passed using
the <TT>url</TT> argument.<BR>
<I><B>Returns: </B></I>An <TT>Image</TT>
object containing information about the URL passed in.
</BLOCKQUOTE>
<H4><TT>getAudioClip</TT></H4>
<BLOCKQUOTE>
<TT>public AudioClip getAudioClip(URL url)
<BR>
getAudioClip</TT> retrieves an <TT>AudioClip</TT>
based on the URL input parameter.<BR>
<I><B>Parameters: </B></I><TT>url</TT>-a
<TT>URL</TT> object containing location
information for the clip to be retrieved.<BR>
<I><B>Returns: </B></I>An <TT>AudioClip</TT>
object that can be played at a later time.
</BLOCKQUOTE>
<H4>getAudioClip</H4>
<BLOCKQUOTE>
<TT>public AudioClip getAudioClip(URL url,
String name)<BR>
</TT>This <TT>getAudioClip</TT>
function accepts both the <TT>URL</TT>
input parameter containing base location information as well as
a <TT>String</TT> input parameter
containing the filename.<BR>
<I><B>Parameters:</B> <BR>
</I><TT>url</TT>-a <TT>URL</TT>
object containing base location information for the <TT>AudioClip</TT>
to be retrieved.<BR>
<TT>name</TT>-a <TT>string</TT>
object containing a filename relative to the base URL passed using
the <TT>url</TT> argument.<BR>
<I><B>Returns: </B></I>An <TT>AudioClip</TT>
object that can be played at a later time.
</BLOCKQUOTE>
<H4><TT>getAppletInfo</TT></H4>
<BLOCKQUOTE>
<TT>public String getAppletInfo()<BR>
getAppletInfo</TT> is provided for applet authors to return
name, copyright, and version information for their applets. The
default implementation returns <TT>null</TT>.
<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
containing author, version, and copyright information (or anything
else) for the applet.
</BLOCKQUOTE>
<H4>getParameterInfo</H4>
<BLOCKQUOTE>
<TT>public String[][] getParameterInfo()
<BR>
getParameterInfo</TT> is provided for applet authors to
provide information on any parameters that the applet may take
as input. Conventional return values have the following information:
<TT><I>name</I></TT>, <TT><I>type</I></TT>,
and <TT><I>comments</I></TT>. The
default implementation returns a null <TT>String</TT>
array.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
array where each element contains, by Java conventions, three
values: <TT><I>name</I></TT>, <TT><I>type</I></TT>,
and <TT><I>comments</I></TT>. Each
of these elements represent a parameter that the applet takes
as input.
</BLOCKQUOTE>
<H4><TT>play</TT></H4>
<BLOCKQUOTE>
<TT>public void play(URL url)<BR>
play</TT> is used to play an <TT>AudioClip</TT>
at the location given by the URL input parameter.<BR>
<I><B>Parameters: </B></I><TT>url</TT>-a
<TT>URL</TT> object containing location
information for the clip to be retrieved.
</BLOCKQUOTE>
<H4><TT>play</TT></H4>
<BLOCKQUOTE>
<TT>public void play(URL url, String name)
<BR>
</TT>This <TT>play</TT> method
is used to play an <TT>AudioClip</TT>
given a base URL and a filename for input parameters.<BR>
<I><B>Parameters:</B> <BR>
</I><TT>url</TT>-a <TT>URL</TT>
object containing base location information for the <TT>AudioClip</TT>
to be retrieved.<BR>
<TT>name</TT>-a <TT>string</TT>
object containing a filename relative to the base URL passed using
the <TT>url</TT> argument.
</BLOCKQUOTE>
<H4><TT>init</TT></H4>
<BLOCKQUOTE>
<TT>public void init()<BR>
</TT>The <TT>init</TT> method
is called automatically after the applet is created. This function
never needs to be called directly.
</BLOCKQUOTE>
<H4><TT>start</TT></H4>
<BLOCKQUOTE>
<TT>public void start()<BR>
</TT>The <TT>start</TT> method
is called automatically to start the applet after it has been
initialized. This function never needs to be called directly.
<TT>start</TT> is called when an applet
is first displayed on a screen, or when a page is revisited within
a Web browser.
</BLOCKQUOTE>
<H4><TT>stop</TT></H4>
<BLOCKQUOTE>
<TT>public void stop()<BR>
</TT>The <TT>stop</TT> method
is called automatically to stop an applet from running. This function
never needs to be called directly unless the applet knows that
it needs to stop executing. <TT>stop</TT>
is called when the Web page containing the applet is replaced
by another Web page.
</BLOCKQUOTE>
<H4><TT>destroy</TT></H4>
<BLOCKQUOTE>
<TT>public void destroy()<BR>
</TT>The <TT>destroy</TT> method
is called automatically when the applet's system resources are
being reclaimed. This function never needs to be called directly.
<TT>destroy</TT> is called after the
<TT>stop</TT> method has finished.
</BLOCKQUOTE>
<HR>

<CENTER><P><A HREF="ch32.htm"><IMG SRC="http://docs.rinet.ru/J21/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="http://docs.rinet.ru/J21/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/J21/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch34.htm"><IMG SRC="http://docs.rinet.ru/J21/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
