<HTML>
<HEAD>
<TITLE>appendix K -- java.net Package Reference</TITLE>

<META>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">










<H1><FONT SIZE=6 COLOR=#FF0000>appendix&nbsp;K</FONT></H1>
<H1><FONT COLOR=#FF0000><TT>java.net</TT></FONT><FONT SIZE=6 COLOR=#FF0000>
Package Reference</FONT></H1>
<HR>
<P>
<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>
<UL>
<LI><A HREF="#TTFONTSIZEFACECourierContentHandlerFactoryFONTTT">
<TT>ContentHandlerFactory</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierSocketImplFactoryFONTTT">
<TT>SocketImplFactory</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierURLStreamHandlerFactoryFONTTT">
<TT>URLStreamHandlerFactory</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierContentHandlerFONTTT">
<TT>ContentHandler</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierDatagramPacketFONTTT">
<TT>DatagramPacket</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierDatagramSocketFONTTT">
<TT>DatagramSocket</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierInetAddressFONTTT">
<TT>InetAddress</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierServerSocketFONTTT">
<TT>ServerSocket</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierSocketFONTTT">
<TT>Socket</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierSocketImplFONTTT">
<TT>SocketImpl</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierURLFONTTT">
<TT>URL</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierURLConnectionFONTTT">
<TT>URLConnection</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierURLEncoderFONTTT">
<TT>URLEncoder</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierMalformedURLExceptionFONTTT">
<TT>MalformedURLException</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierProtocolExceptionFONTTT">
<TT>ProtocolException</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierSocketExceptionFONTTT">
<TT>SocketException</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierUnknownHostExceptionFONTTT">
<TT>UnknownHostException</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierUnknownServiceExceptionFONTTT">
<TT>UnknownServiceException</TT>
</A>
</UL>

<HR>
<P>
The <TT>java.net</TT> package contains
classes and interfaces used for networking. This includes classes
to create and manipulate sockets, data packets, and URLs.
<H2><A NAME="TTFONTSIZEFACECourierContentHandlerFactoryFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>ContentHandlerFactory</TT>
</FONT></A></H2>
<P>
This interface signals when an unknown service exception has occurred.
<H4><TT>createContentHandler</TT>
</H4>
<BLOCKQUOTE>
<TT>public abstract ContentHandler createContentHandler(String
mimetype)<BR>
</TT>The <TT>createContentHandler</TT>
method creates a new content handler to read the content from
a <TT>URLStreamHandler</TT> using
the specified MIME type.<BR>
<I><B>Parameters: </B></I><TT>mimetype</TT>-a
<TT>String</TT> object containing
the MIME type of the content.<BR>
<I><B>Returns: </B></I>A <TT>ContentHandler</TT>
object that will read data from a URL connection and construct
an object.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierSocketImplFactoryFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>SocketImplFactory</TT>
</FONT></A></H2>
<P>
This interface is used by the socket class to specify socket implementations.
<H4><TT>createSocketImpl</TT></H4>
<BLOCKQUOTE>
<TT>SocketImpl createSocketImpl()<BR>
</TT>The <TT>createSocketImple</TT>
method creates a <TT>SocketImpl</TT>
instance that is an implementation of a socket.<BR>
<I><B>Returns: </B></I>A <TT>SocketImpl</TT>
object that provides a socket implementation.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierURLStreamHandlerFactoryFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>URLStreamHandlerFactory</TT>
</FONT></A></H2>
<P>
This interface is used by the <TT>URL</TT>
class to create stream handlers for various stream types.
<H4><TT>createURLStreamHandler</TT>
</H4>
<BLOCKQUOTE>
<TT>URLStreamHandler createURLStreamHandler(String
protocol)<BR>
</TT>The <TT>createURLStreamHandler</TT>
method creates a <TT>URLStreamHandler</TT>
instance for use by the <TT>URL</TT>
class based on the specified protocol.<BR>
<I><B>Parameters: </B></I><TT>protocol</TT>-a
<TT>String</TT> object that specifies
the protocol to be used by the <TT>URLStreamHandler</TT>
class.<BR>
<I><B>Returns: </B></I>A <TT>URLStreamHandler</TT>
object that is created with the protocol specified in the input
parameter.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierContentHandlerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>ContentHandler</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>The <TT>ContentHandler</TT>
class is used as a base class for classes that will handle specific
MIME content types.
</BLOCKQUOTE>
<H4><TT>getContent</TT></H4>
<BLOCKQUOTE>
<TT>abstract public Object getContent(URLConnection
urlc)<BR>
</TT>The <TT>getContent</TT>
method accepts a <TT>URLConnection</TT>
argument positioned at the beginning of an input stream and constructs
an object from the input stream.<BR>
<I><B>Parameters: </B></I><TT>urlc</TT>-a
<TT>URLConnection</TT> object representing
the input stream to be read in by the content handler.<BR>
<I><B>Returns: </B></I>An object that was constructed from the
specified URL connection.<BR>
<I><B>Throws:</B></I><TT> IOException</TT>
if the input stream could not be read.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierDatagramPacketFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>DatagramPacket</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>The <TT>DatagramPacket</TT>
class is used to store packet data such as data, length, Internet
address, and port.
</BLOCKQUOTE>
<H4><TT>DatagramPacket</TT> Constructor
</H4>
<BLOCKQUOTE>
public DatagramPacket(byte ibuf[], int ilength)<BR>
This DatagramPacket constructor constructs a DatagramPacket object
to be used for receiving datagrams.<BR>
<I><B>Parameters: <BR>
</B></I><TT>ibuf</TT>-an array of
bytes that will be used to store the datagram packet.<BR>
<TT>ilength</TT>-an integer value
specifying the size of the datagram packet.
</BLOCKQUOTE>
<H4><TT>DatagramPacket</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public DatagramPacket(byte ibuf[], int
ilength, InetAddress iaddr, int iport)<BR>
</TT>This <TT>DatagramPacket</TT>
constructor constructs a <TT>DatagramPacket</TT>
object to be sent.<BR>
<I><B>Parameters: <BR>
</B></I><TT>ibuf</TT>-an array of
bytes that will be used to store the datagram packet.<BR>
<TT>ilength</TT>-an integer value
specifying the size of the datagram packet.<BR>
<TT>iaddr</TT>-the destination IP
address.<BR>
<TT>iport</TT>-the destination port.
</BLOCKQUOTE>
<H4><TT>getAddress</TT></H4>
<BLOCKQUOTE>
<TT>public InetAddress getAddress()<BR>
</TT>The <TT>getAddress</TT>
method returns the IP address value of the <TT>DatagramPacket</TT>.
<BR>
<I><B>Returns: </B></I>An <TT>InetAddress</TT>
object containing the IP address of the datagram packet.
</BLOCKQUOTE>
<H4><TT>getPort</TT></H4>
<BLOCKQUOTE>
<TT>public int getPort()<BR>
</TT>The <TT>getPort</TT> method
returns the port value of the <TT>DatagramPacket</TT>.
<BR>
<I><B>Returns: </B></I>An integer value containing the port address
of the datagram packet.
</BLOCKQUOTE>
<H4><TT>getData</TT></H4>
<BLOCKQUOTE>
<TT>public byte[] getData()<BR>
</TT>The <TT>getData</TT> method
returns the array of datagram packet values.<BR>
<I><B>Returns: </B></I>An array of bytes containing the contents
of the datagram packet.
</BLOCKQUOTE>
<H4><TT>getLength</TT></H4>
<BLOCKQUOTE>
<TT>public int getLength()<BR>
</TT>The <TT>getLength</TT>
method returns the length of the datagram packet.<BR>
<I><B>Returns: </B></I>An integer value containing the length
of the datagram packet.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierDatagramSocketFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>DatagramSocket</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>The <TT>DatagramSocket</TT>
class is used to designate a dedicated socket for implementing
unreliable datagrams.
</BLOCKQUOTE>
<H4><TT>DatagramSocket</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public DatagramSocket() throws SocketException
<BR>
</TT>The <TT>DatagramSocket</TT>
constructor is used to implement an unreliable <TT>Datagram</TT>
connection.<BR>
<I><B>Throws: </B></I><TT>SocketException</TT>
if the socket could not be created.
</BLOCKQUOTE>
<H4><TT>DatagramSocket</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public DatagramSocket(int port) throws
SocketException<BR>
</TT>This <TT>DatagramSocket</TT>
constructor implements an unreliable datagram connection using
the specified port value.<BR>
<I><B>Parameters: </B></I><TT>port</TT>-an
integer value specifying the port to be used for the socket.<BR>
<I><B>Throws: </B></I><TT>SocketException</TT>
if the socket could not be created.
</BLOCKQUOTE>
<H4><TT>send</TT></H4>
<BLOCKQUOTE>
<TT>public void send(DatagramPacket p) throws
IOException<BR>
</TT>The <TT>send</TT> method
sends a datagram packet to the destination address specified in
the datagram packet's address value.<BR>
<I><B>Parameters: </B></I><TT>p</TT>-a
<TT>DatagramPacket</TT> object containing
data to be sent through the socket.<BR>
<I><B>Throws: </B></I><TT>IOException</TT>
if an I/O exception has occurred.
</BLOCKQUOTE>
<H4><TT>receive</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void receive(DatagramPacket
p) throws IOException<BR>
</TT>The <TT>receive</TT> method
receives a datagram packet. This method will block until the datagram
packet has been received.<BR>
<I><B>Parameters: </B></I><TT>p</TT>-the
datagram packet to be received.<BR>
<I><B>Throws: </B></I><TT>IOException</TT>
if an I/O exception has occurred.
</BLOCKQUOTE>
<H4><TT>getLocalPort</TT></H4>
<BLOCKQUOTE>
<TT>public int getLocalPort()<BR>
</TT>The <TT>getLocalPort</TT>
method returns the port on the local machine that this socket
is bound to.<BR>
<I><B>Returns: </B></I>An integer value containing the port value
that this socket is bound to.
</BLOCKQUOTE>
<H4><TT>close</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void close()<BR>
</TT>The <TT>close</TT> method
closes the datagram socket.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierInetAddressFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>InetAddress</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>The <TT>InetAddress</TT>
class is used to represent Internet addresses.
</BLOCKQUOTE>
<H4><TT>getHostName</TT></H4>
<BLOCKQUOTE>
<TT>public String getHostName()<BR>
</TT>The <TT>getHostName</TT>
method returns the name of the host for this <TT>InetAddress</TT>.
If the host is null, the returned string will contain any of the
local machine's available network addresses.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
object containing the name of the host for this <TT>InetAddress</TT>.
</BLOCKQUOTE>
<H4><TT>getAddress</TT></H4>
<BLOCKQUOTE>
<TT>public byte[] getAddress()<BR>
</TT>The <TT>getAddress</TT>
method returns an array of bytes containing the raw IP address
in network byte order.<BR>
<I><B>Returns: </B></I>A byte array containing the raw IP address
of this <TT>InetAddress</TT> in network
byte order.
</BLOCKQUOTE>
<H4><TT>getHostAddress</TT></H4>
<BLOCKQUOTE>
<TT>public String getHostAddress()<BR>
</TT>The <TT>getHostAddress</TT>
method returns the IP address string <TT>%d.%d.%d.%d</TT>.
<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value containing the raw IP address using the standard IP address
format.
</BLOCKQUOTE>
<H4><TT>hashCode</TT></H4>
<BLOCKQUOTE>
<TT>public int hashCode()<BR>
</TT>The <TT>hashCode</TT>
method returns a hash code for this <TT>InetAddress</TT>.
<BR>
<I><B>Returns: </B></I>An integer value representing this <TT>InetAddress</TT>'s
hash code.
</BLOCKQUOTE>
<H4><TT>equals</TT></H4>
<BLOCKQUOTE>
<TT>public boolean equals(Object obj)<BR>
</TT>The <TT>equals</TT> method
is used to compare this <TT>InetAddress</TT>
object to the specified object.<BR>
<I><B>Parameters: </B></I><TT>obj</TT>-the
object to be compared with the address.<BR>
<I><B>Returns: </B></I>A boolean value that will be <TT>true</TT>
if the objects are equal; <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>The <TT>toString</TT>
method is used to return a string representation of the <TT>InetAddress</TT>.
<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value containing information about the <TT>InetAddress</TT>.
</BLOCKQUOTE>
<H4><TT>getByName</TT></H4>
<BLOCKQUOTE>
<TT>public static synchronized InetAddress
getByName(String host)<BR>
  throws UnknownHostException<BR>
</TT>The <TT>getByName</TT>
method returns an <TT>InetAddress</TT>
object based on the specified hostname.<BR>
<I><B>Parameters: </B></I><TT>host</TT>-a
string object specifying the name of the host.<BR>
<I><B>Returns: </B></I>An <TT>InetAddress</TT>
object containing the Internet address information for the specified
host.<BR>
<I><B>Throws:</B></I><TT> UnknownHostException</TT>
if the specified host is invalid or unknown.
</BLOCKQUOTE>
<H4><TT>getAllByName</TT></H4>
<BLOCKQUOTE>
<TT>public static synchronized InetAddress
getAllByName(String host)[]<BR>
  throws UnknownHostException<BR>
</TT>The <TT>getAllByName</TT>
method returns an array of <TT>InetAddress</TT>
objects representing all of the addresses for the specified host.
<BR>
<I><B>Parameters: </B></I><TT>host</TT>-a
<TT>String</TT> object specifying
the name of the host.<BR>
<I><B>Returns: </B></I>An array of all corresponding <TT>InetAddress</TT>es
for the specified host.<BR>
<I><B>Throws: </B></I><TT>UnknownHostException</TT>
if the specified host is invalid or unknown.
</BLOCKQUOTE>
<H4><TT>getLocalHost</TT></H4>
<BLOCKQUOTE>
<TT>public static InetAddress getLocalHost()
throws UnknownHostException<BR>
</TT>The <TT>getLocalHost()</TT>
returns an <TT>InetAddress</TT> object
representing the address of the local host.<BR>
<I><B>Returns: </B></I>An <TT>InetAddress</TT>
object containing the Internet address information for the local
host.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierServerSocketFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>ServerSocket</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>The <TT>ServerSocket</TT>
class is used to encapsulate a server socket.
</BLOCKQUOTE>
<H4><TT>ServerSocket</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public ServerSocket(int port) throws
IOException<BR>
</TT>The <TT>ServerSocket</TT>
constructor creates a server socket on the specified port.<BR>
<I><B>Parameters: </B></I><TT>port</TT>-an
integer value specifying the port to create the socket on.<BR>
<I><B>Throws: </B></I><TT>IOException</TT>
if an I/O exception has occurred.
</BLOCKQUOTE>
<H4><TT>ServerSocket</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public ServerSocket(int port, int backlog)
throws IOException<BR>
</TT>This <TT>ServerSocket</TT>
constructor creates a server socket on the specified port and
listens to it for a specified time.<BR>
<I><B>Parameters: </B></I><TT>port</TT>-an
integer value specifying the port to create the socket on.<BR>
<I><B>Throws: </B></I><TT>IOException</TT>
if an I/O exception has occurred.
</BLOCKQUOTE>
<H4><TT>getInetAddress</TT></H4>
<BLOCKQUOTE>
<TT>public InetAddress getInetAddress()<BR>
</TT>The <TT>getInetAddress</TT>
method returns an <TT>InetAddress</TT>
object specifying the address to which this socket is connected.
<BR>
<I><B>Returns: </B></I>An <TT>InetAddress</TT>
object containing the address information to which the socket
is connected.
</BLOCKQUOTE>
<H4><TT>getLocalPort</TT></H4>
<BLOCKQUOTE>
<TT>public int getLocalPort()<BR>
</TT>The <TT>getLocalPort</TT>
method returns the local port on which the socket is currently
listening.<BR>
<I><B>Returns: </B></I>An integer value representing the port
on the local machine which the server socket is listening to.
</BLOCKQUOTE>
<H4><TT>accept</TT></H4>
<BLOCKQUOTE>
<TT>public Socket accept() throws IOException
<BR>
</TT>The <TT>accept</TT> method
is used to accept a connection. This method will block all others
until a connection is made.<BR>
<I><B>Returns: </B></I>A <TT>Socket</TT>
object after the connection has been accepted.<BR>
<I><B>Throws: </B></I><TT>IOException</TT>
if an I/O error occurred when waiting for the connection.
</BLOCKQUOTE>
<H4><TT>close</TT></H4>
<BLOCKQUOTE>
<TT>public void close() throws IOException
<BR>
</TT>The <TT>close</TT> method
closes the socket's connection.<BR>
<I><B>Throws: </B></I><TT>IOException</TT>
if an I/O error occurred while closing the server socket.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>The <TT>toString</TT>
method returns a string representation of the <TT>ServerSocket</TT>.
<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
object containing the implementation address and implementation
port of the server socket.
</BLOCKQUOTE>
<H4><TT>setSocketFactory</TT></H4>
<BLOCKQUOTE>
<TT>public static synchronized void setSocketFactory(SocketImplFactory
fac)<BR>
  throws IOException, SocketException<BR>
</TT>The <TT>setSocketFactory</TT>
method sets the server <TT>SocketImplFactory</TT>
for use by this <TT>ServerSocket</TT>.
This factory can only be set once.<BR>
<I><B>Parameters: </B></I><TT>fac</TT>-a
<TT>SocketImplFactory</TT> derived
object to be used by this server socket.<BR>
<I><B>Throws: </B></I><TT>IOException</TT>
if there was an I/O error when setting the <TT>SocketImplFactory</TT>.
<BR>
A <TT>SocketException</TT> if the
<TT>SocketImplFactory</TT> has already
been set.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierSocketFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Socket</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>The <TT>Socket</TT> class
is used to implement socket functionality. The <TT>setSocketImplFactory</TT>
method is used to change the socket's implementation based on
specific firewalls.
</BLOCKQUOTE>
<H4><TT>Socket</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Socket(String host, int port)
throws UnknownHostException,<BR>
IOException<BR>
</TT>This <TT>Socket</TT> constructor
creates a stream socket to the specified port on the specified
host.<BR>
<I><B>Parameters: <BR>
</B></I><TT>host</TT>-a <TT>String</TT>
object containing the hostname to create the socket on.<BR>
<TT>port</TT>-an integer value representing
the port to create the socket on.<BR>
<I><B>Throws: </B></I><TT>UnknownHostException</TT>
if the hostname is unrecognized or invalid.<BR>
An <TT>IOException</TT> if an I/O
error occurred while creating the socket.
</BLOCKQUOTE>
<H4><TT>Socket</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Socket(String host, int port,
boolean stream) throws <BR>
IOException<BR>
</TT>This <TT>Socket</TT> constructor
creates a stream socket to the specified port on the specified
host. <BR>
The boolean stream value can be used to specify a stream socket
or a datagram socket.<BR>
<I><B>Parameters: <BR>
</B></I><TT>host</TT>-a <TT>String</TT>
object containing the hostname to create the socket on.<BR>
<TT>port</TT>-an integer value representing
the port to create the socket on.<BR>
<TT>stream</TT>-a boolean value that
is <TT>true</TT> if a stream socket
is to be created; <TT>false</TT> if
a datagram socket is to be created.<BR>
<I><B>Throws: </B></I><TT>IOException</TT>
if an I/O error occurred while creating the socket.
</BLOCKQUOTE>
<H4><TT>Socket</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Socket(InetAddress address, int
port) throws IOException<BR>
</TT>This <TT>Socket</TT> constructor
creates a stream socket to the specified port at the specified
<TT>InetAddress</TT>.<BR>
<I><B>Parameters: <BR>
</B></I><TT>address</TT>-an <TT>InetAddress</TT>
object specifying the address to create the socket at.<BR>
<TT>port</TT>-an integer value representing
the port to create the socket on.<BR>
<I><B>Throws:</B></I><TT> IOException</TT>
if an I/O error occurred while creating the socket.
</BLOCKQUOTE>
<H4><TT>Socket</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Socket(InetAddress address, int
port, boolean stream) <BR>
throws IOException<BR>
</TT>This <TT>Socket</TT> constructor
creates a stream socket to the specified port at the specified
address. The boolean stream value can be used to specify a stream
socket or a datagram socket.<BR>
<I><B>Parameters: <BR>
</B></I><TT>address</TT>-an <TT>InetAddress</TT>
object specifying the address to create the socket at.<BR>
<TT>port</TT>-an integer value representing
the port to create the socket on.<BR>
<TT>stream</TT>-a boolean value that
is <TT>true</TT> if a stream socket
is to be created; <TT>false</TT> if
a datagram socket is to be created.<BR>
<I><B>Throws:</B></I><TT> IOException</TT>
if an I/O error occurred while creating the socket.
</BLOCKQUOTE>
<H4><TT>getInetAddress</TT></H4>
<BLOCKQUOTE>
<TT>public InetAddress getInetAddress()<BR>
</TT>The <TT>getInetAddress</TT>
method is used to return the address to which the socket is connected.
<BR>
<I><B>Returns: </B></I>An <TT>InetAddress</TT>
object containing information about the address to which the socket
is connected.
</BLOCKQUOTE>
<H4><TT>getPort</TT></H4>
<BLOCKQUOTE>
<TT>public int getPort()<BR>
</TT>The <TT>getPort</TT> method
returns the remote port to which the socket is connected.<BR>
<I><B>Returns: </B></I>An integer value representing the remote
port number that the socket is con-<BR>
nected to.
</BLOCKQUOTE>
<H4><TT>getLocalPort</TT></H4>
<BLOCKQUOTE>
<TT>public int getLocalPort()<BR>
</TT>The <TT>getLocalPort</TT>
method returns the local port to which the socket is connected.
<BR>
<I><B>Returns: </B></I>An integer value representing the local
port number that the socket is connected to.
</BLOCKQUOTE>
<H4><TT>getInputStream</TT></H4>
<BLOCKQUOTE>
<TT>public InputStream getInputStream() throws
IOException<BR>
</TT>The <TT>getInputStream</TT>
method returns an input stream for this socket.<BR>
<I><B>Returns: </B></I>An <TT>InputStream</TT>
object to be used as the socket's input stream.<BR>
<I><B>Throws:</B></I><TT> IOException</TT>
if an I/O error occurred while retrieving the input stream.
</BLOCKQUOTE>
<H4><TT>getOutputStream</TT></H4>
<BLOCKQUOTE>
<TT>public OutputStream getOutputStream()
throws IOException<BR>
</TT>The <TT>getOutputStream</TT>
method returns an output stream for this socket.<BR>
<I><B>Returns: </B></I>An <TT>OutputStream</TT>
object to be used as the socket's output stream.<BR>
<I><B>Throws:</B></I><TT> IOException</TT>
if an I/O error occurred while retrieving the output stream.
</BLOCKQUOTE>
<H4><TT>close</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void close() throws
IOException<BR>
</TT>The <TT>close</TT> method
closes the socket's connection.<BR>
<I><B>Throws:</B></I><TT> IOException</TT>
if an I/O error occurred while closing the socket.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>The <TT>toString</TT>
method returns a string representation of the socket.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
object containing the socket information.
</BLOCKQUOTE>
<H4><TT>setSocketImplFactory</TT>
</H4>
<BLOCKQUOTE>
<TT>public static synchronized void setSocketImplFactory(SocketImplFactory
fac)<BR>
  throws IOException<BR>
</TT>The <TT>setSocketImplFactory</TT>
method sets the <TT>SocketImplFactory</TT>
interface for this socket. The factory can only be specified once.
<BR>
<I><B>Parameters: </B></I><TT>fac</TT>-a
<TT>SocketImplFactory</TT> derived
object to be used by this socket.<BR>
<I><B>Throws:</B></I><TT> IOException</TT>
if an I/O error occurred while setting the <TT>SocketImplFactory</TT>.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierSocketImplFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>SocketImpl</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>The <TT>SocketImpl</TT>
class is an abstract base class provided as a template for socket
implementations.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>The <TT>toString</TT>
method returns a string representation of the <TT>SocketImpl</TT>
class.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
object containing the port and address of this socket.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierURLFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>URL</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>The <TT>URL</TT> class
is used to represent a uniform resource locator. <TT>URL</TT>
is a reference to an object on the Web such as an FTP site, an
e-mail address, or an HTML page on a Web server.
</BLOCKQUOTE>
<H4><TT>URL</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public URL(String protocol, String host,
int port, String file) throws<BR>
   MalformedURLException<BR>
</TT>This <TT>URL</TT> constructor
creates a URL using the specified protocol, host, port, and host
filename.<BR>
<I><B>Parameters: <BR>
</B></I><TT>protocol</TT>-a <TT>String</TT>
object specifying the protocol to be used.<BR>
<TT>host</TT>-a <TT>String</TT>
object specifying the hostname.<BR>
<TT>port</TT>-an integer value specifying
the port.<BR>
<TT>file</TT>-a <TT>String</TT>
object specifying the file name on the host.<BR>
<I><B>Throws:</B></I><TT> MalformedURLException</TT>
if the protocol was unknown or invalid.
</BLOCKQUOTE>
<H4><TT>URL</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public URL(String protocol, String host,
String file) throws<BR>
   MalformedURLException<BR>
</TT>This <TT>URL</TT> constructor
creates a URL using the specified protocol, host, and host file
name. The port number will be the default port used for the specified
protocol.<BR>
<I><B>Parameters: <BR>
</B></I><TT>protocol</TT>-a <TT>String</TT>
object specifying the protocol to be used.<BR>
<TT>host</TT>-a <TT>String</TT>
object specifying the hostname.<BR>
<TT>file</TT>-a <TT>String</TT>
object specifying the file name on the host.<BR>
<I><B>Throws:</B></I><TT> MalformedURLException</TT>
if the protocol was unknown or invalid.
</BLOCKQUOTE>
<H4><TT>URL</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public URL(String spec) throws MalformedURLException
<BR>
</TT>This <TT>URL</TT> constructor
creates a URL using the specified unparsed URL.<BR>
<I><B>Parameters: </B></I><TT>spec</TT>-a
<TT>String</TT> object containing
an unparsed URL string.<BR>
<I><B>Throws:</B></I><TT> MalformedURLException</TT>
if the specified unparsed URL was invalid.
</BLOCKQUOTE>
<H4><TT>URL</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public URL(URL context, String spec)
throws MalformedURLException<BR>
</TT>This <TT>URL</TT> constructor
creates a URL using the specified context and unparsed URL. If
the unparsed URL is an absolute URL it is used as is, otherwise
it is used in combination with the specified context.<BR>
<I><B>Parameters: <BR>
</B></I><TT>context</TT>-a <TT>URL</TT>
object specifying the context to be used in combination with the
unparsed URL string.<BR>
<TT>spec</TT>-a <TT>String</TT>
object containing an unparsed URL string.<BR>
<I><B>Throws:</B></I><TT> MalformedURLException</TT>
if the specified unparsed URL was invalid.
</BLOCKQUOTE>
<H4><TT>getPort</TT></H4>
<BLOCKQUOTE>
<TT>public int getPort()<BR>
</TT>The <TT>getPort</TT> method
returns the port number for this URL.<BR>
<I><B>Returns: </B></I>An integer value representing the port
number for this URL, which is <TT>-1</TT>
if the port has not been set.
</BLOCKQUOTE>
<H4><TT>getProtocol</TT></H4>
<BLOCKQUOTE>
<TT>public String getProtocol()<BR>
</TT>The <TT>getProtocol</TT>
method returns a string representing the protocol used by this
URL.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
object containing the protocol name.
</BLOCKQUOTE>
<H4><TT>getHost</TT></H4>
<BLOCKQUOTE>
<TT>public String getHost()<BR>
</TT>The <TT>getHost</TT> method
returns a string containing the hostname.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
object containing the hostname.
</BLOCKQUOTE>
<H4><TT>getFile</TT></H4>
<BLOCKQUOTE>
<TT>public String getFile()<BR>
</TT>The <TT>getFile</TT> method
returns a string containing the host filename.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
object containing the name of the file on the host.
</BLOCKQUOTE>
<H4><TT>getRef</TT></H4>
<BLOCKQUOTE>
<TT>public String getRef()<BR>
</TT>The <TT>getRef</TT> method
returns the ref (if any) that was specified in the unparsed string
used to create this URL.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
object containing the URL's ref.
</BLOCKQUOTE>
<H4><TT>equals</TT></H4>
<BLOCKQUOTE>
<TT>public boolean equals(Object obj)<BR>
</TT>The <TT>equals</TT> method
can be used to compare this URL to another object.<BR>
<I><B>Parameters: </B></I><TT>obj</TT>-an
object that will be compared with this URL.<BR>
<I><B>Returns: </B></I>A boolean value that will be <TT>true</TT>
if the objects are equal, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>hashCode</TT></H4>
<BLOCKQUOTE>
<TT>public int hashCode()<BR>
</TT>The <TT>hashCode</TT>
method will return a hash code value for the URL.<BR>
<I><B>Returns: </B></I>An integer value representing the hash
code value of this URL.
</BLOCKQUOTE>
<H4><TT>sameFile</TT></H4>
<BLOCKQUOTE>
<TT>public boolean sameFile(URL other)<BR>
</TT>The <TT>sameFile</TT>
method can be used to determine if the specified file is the same
file used to create this URL.<BR>
<I><B>Parameters: </B></I><TT>other</TT>-a
<TT>URL</TT> object specifying the
location of another file.<BR>
<I><B>Returns: </B></I>A boolean value that will be <TT>true</TT>
if the files are equal; <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>The <TT>toString</TT>
method returns a string representation of the URL.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
object containing a textual representation of the URL including
the protocol, host, port, and filename.
</BLOCKQUOTE>
<H4><TT>toExternalForm</TT></H4>
<BLOCKQUOTE>
<TT>public String toExternalForm()<BR>
</TT>The <TT>toExternalForm</TT>
method is used to reverse the parsing of the URL.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
object containing the textual representation of the fully qualified
URL.
</BLOCKQUOTE>
<H4><TT>openConnection</TT></H4>
<BLOCKQUOTE>
<TT>public URLConnection openConnection()
throws java.io.IOException<BR>
</TT>The <TT>openConnection</TT>
method will open a <TT>URLConnection</TT>
to the object specified by the URL.<BR>
<I><B>Returns: </B></I>A <TT>URLConnection</TT>
object that represents a connection to the URL.<BR>
<I><B>Throws:</B></I><TT> IOException</TT>
if an I/O error occurred while creating the URL connection.
</BLOCKQUOTE>
<H4><TT>openStream</TT></H4>
<BLOCKQUOTE>
<TT>public final InputStream openStream()
throws java.io.IOException<BR>
</TT>The <TT>openStream</TT>
method opens an <TT>InputStream</TT>.
<BR>
<I><B>Returns: </B></I>An <TT>InputStream</TT>
representing an input stream for the URL.<BR>
<I><B>Throws:</B></I><TT> IOException</TT>
if an I/O error occurred while creating the input stream.
</BLOCKQUOTE>
<H4><TT>getContent</TT></H4>
<BLOCKQUOTE>
<TT>public final Object getContent() throws
java.io.IOException<BR>
</TT>The <TT>getContent</TT>
method retrieves the contents from the opened connection.<BR>
<I><B>Returns: </B></I>An object representing the contents that
are retrieved from the connection.<BR>
<I><B>Throws:</B></I><TT> IOException</TT>
if an I/O error occurred while retrieving the content.
</BLOCKQUOTE>
<H4><TT>setURLStreamHandlerFactory</TT>
</H4>
<BLOCKQUOTE>
<TT>public static synchronized void setURLStreamHandlerFactory(
<BR>
  URLStreamHandlerFactory fac)<BR>
</TT>The <TT>setURLStreamHandlerFactory</TT>
method sets the <TT>URLStreamHandlerFactory</TT>
interface for this URL. The factory can only be specified once.
<BR>
<I><B>Parameters: </B></I><TT>fac</TT>-a
<TT>URLStreamHandlerFactory</TT> interface
to be used by this URL.<BR>
<I><B>Throws:</B></I><TT> Error</TT>
if this factory has already been specified.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierURLConnectionFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>URLConnection</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>The <TT>URLConnection</TT>
class is an abstract base class used to represent a URL connection.
It must be subclassed in order to provide true functionality.
</BLOCKQUOTE>
<H4><TT>connect</TT></H4>
<BLOCKQUOTE>
<TT>abstract public void connect() throws
IOException<BR>
</TT>The <TT>connect</TT> method
is used to connect the <TT>URLConnection</TT>
after it has been created. Operations that depend on being connected
will call this method to automatically connect.<BR>
<I><B>Throws:</B></I><TT> IOException</TT>
if an I/O error occurred while the connection was attempted.
</BLOCKQUOTE>
<H4><TT>getURL</TT></H4>
<BLOCKQUOTE>
<TT>public URL getURL()<BR>
</TT>The <TT>getURL</TT> method
returns the URL for this URL connection.<BR>
<I><B>Returns: </B></I>A <TT>URL</TT>
object.
</BLOCKQUOTE>
<H4><TT>getContentLength</TT></H4>
<BLOCKQUOTE>
<TT>public int getContentLength()<BR>
</TT>The <TT>getContentLength</TT>
method returns the length of the content.<BR>
<I><B>Returns: </B></I>An integer value containing the length
of the content, which is <TT>-1</TT>
if the length is not known.
</BLOCKQUOTE>
<H4><TT>getContentType</TT></H4>
<BLOCKQUOTE>
<TT>public String getContentType()<BR>
</TT>The <TT>getContentType</TT>
method returns the type of the content.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
object containing the type of the content, which is <TT>null</TT>
if the type is not known.
</BLOCKQUOTE>
<H4><TT>getContentEncoding</TT></H4>
<BLOCKQUOTE>
<TT>public String getContentEncoding()<BR>
</TT>The <TT>getContentEncoding</TT>
method returns the encoding of the content.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
object containing the encoding of the content, which is <TT>null</TT>
if the encoding is not known.
</BLOCKQUOTE>
<H4><TT>getExpiration</TT></H4>
<BLOCKQUOTE>
<TT>public long getExpiration()<BR>
</TT>The <TT>getExpiration</TT>
method will return the expiration of the object.<BR>
<I><B>Returns: </B></I>A long value containing the expiration
of the object. This value will be <TT>0</TT>
if the expiration is not known.
</BLOCKQUOTE>
<H4><TT>getDate</TT></H4>
<BLOCKQUOTE>
<TT>public long getDate()<BR>
</TT>The <TT>getDate</TT> method
will return the date of the object.<BR>
<I><B>Returns: </B></I>A long value containing the date of the
object. This value will be <TT>0</TT>
if the date is not known.
</BLOCKQUOTE>
<H4><TT>getLastModified</TT></H4>
<BLOCKQUOTE>
<TT>public long getLastModified()<BR>
</TT>The <TT>getLastModified()</TT>
will return the last modified date of the object.<BR>
<I><B>Returns: </B></I>A long value containing the last modified
date of the object. This value will be <TT>0</TT>
if the last modified date is not known.
</BLOCKQUOTE>
<H4><TT>getHeaderField</TT></H4>
<BLOCKQUOTE>
<TT>public String getHeaderField(String name)
<BR>
</TT>The <TT>getHeaderField</TT>
method returns the contents of the header field based on the specified
field name.<BR>
<I><B>Parameters: </B></I><TT>name</TT>-a
<TT>String</TT> object specifying
the name of the header field to be returned.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
object containing the contents of the specified header field.
This value will be <TT>null</TT> if
the contents are not known.
</BLOCKQUOTE>
<H4><TT>getHeaderFieldInt</TT></H4>
<BLOCKQUOTE>
<TT>public int getHeaderFieldInt(String name,
int Default)<BR>
</TT>The <TT>getHeaderFieldInt</TT>
method returns the pre-parsed contents of the specified header
field.<BR>
<I><B>Parameters: <BR>
</B></I><TT>name</TT>-a <TT>String</TT>
object specifying the name of the header field to be returned.
<BR>
<TT>Default</TT>-an integer value
containing the value to be returned if the field is missing.<BR>
<I><B>Returns: </B></I>An integer value containing the preparsed
header field value.
</BLOCKQUOTE>
<H4><TT>getHeaderFieldDate</TT></H4>
<BLOCKQUOTE>
<TT>public long getHeaderFieldDate(String
name, long Default)<BR>
</TT>The <TT>getHeaderFieldDate</TT>
method returns the contents of the specified header field parsed
as a date.<BR>
<I><B>Parameters:<BR>
</B></I><TT>name</TT>-a <TT>String</TT>
object specifying the name of the header field to be returned.
<BR>
<TT>Default</TT>-an integer value
containing the value to be returned if the field is missing.<BR>
<I><B>Returns: </B></I>A long value containing the header field
value parsed as a date.
</BLOCKQUOTE>
<H4><TT>getHeaderFieldKey</TT></H4>
<BLOCKQUOTE>
<TT>public String getHeaderFieldKey(int n)
<BR>
</TT>The <TT>getHeaderFieldKey</TT>
method returns the key for the specified header field.<BR>
<I><B>Parameters: </B></I><TT>n</TT>-the
position of the header field to be returned.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
object containing the key for the specified header field. This
value will be <TT>null</TT> if there
are fewer than <I>n</I> header fields.
</BLOCKQUOTE>
<H4><TT>getHeaderField</TT></H4>
<BLOCKQUOTE>
<TT>public String getHeaderField(int n)<BR>
</TT>The <TT>getHeaderField</TT>
method returns the specified header field value.<BR>
<I><B>Parameters: </B></I><TT>n</TT>-the
position of the header field to be returned.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
object containing the contents of the specified header field.
This value will be <TT>null</TT> if
there are fewer than <I>n</I> header fields.
</BLOCKQUOTE>
<H4><TT>getContent</TT></H4>
<BLOCKQUOTE>
<TT>public Object getContent() throws IOException
<BR>
</TT>The <TT>getContent</TT>
method returns the object referred to by this <TT>URLConnection</TT>.
<BR>
<I><B>Returns: </B></I>An <TT>Object</TT>
object that was referred to by this URL.<BR>
<I><B>Throws:</B></I><TT> IOException</TT>
if an I/O error occurred while retrieving the content.
</BLOCKQUOTE>
<H4><TT>getInputStream</TT></H4>
<BLOCKQUOTE>
<TT>public InputStream getInputStream() throws
IOException<BR>
</TT>The <TT>getInputStream</TT>
method returns an <TT>InputStream</TT>
object to be used as an input stream to read from the object.
<BR>
<I><B>Returns: </B></I>An <TT>InputStream</TT>
object to be used to read from the object.<BR>
<I><B>Throws:</B></I><TT> IOException</TT>
if an I/O error occurred while creating the input stream.
</BLOCKQUOTE>
<H4><TT>getOutputStream</TT></H4>
<BLOCKQUOTE>
<TT>public OutputStream getOutputStream()
throws IOException<BR>
</TT>The <TT>getOutputStream</TT>
method returns an <TT>OutputStream</TT>
object to be used as an output stream to write to the object.
<BR>
<I><B>Returns: </B></I>An <TT>OutputStream</TT>
object to be used to write to the object.<BR>
<I><B>Throws:</B></I><TT> IOException</TT>
if an I/O error occurred while creating the output stream.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>The <TT>toString</TT>
method returns a string representation of the <TT>URLConnection</TT>.
<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
object containing a textual representation of the <TT>URLConnection</TT>
object.
</BLOCKQUOTE>
<H4><TT>setDoInput</TT></H4>
<BLOCKQUOTE>
<TT>public void setDoInput(boolean doinput)
<BR>
</TT>The <TT>setDoInput</TT>
method sets the functionality of the URL connection. If the parameter
is <TT>true</TT>, the URL connection
will be used for input. If it is <TT>false</TT>,
it will be used for output.<BR>
<I><B>Parameters: </B></I><TT>doinput</TT>-a
boolean value that will be <TT>true</TT>
if the URL connection is to be used for input; <TT>false</TT>
if for output.
</BLOCKQUOTE>
<H4><TT>setDoOutput</TT></H4>
<BLOCKQUOTE>
<TT>public void setDoOutput(boolean dooutput)
<BR>
</TT>The <TT>setDoOutput</TT>
method sets the functionality of the URL connection. If the parameter
is <TT>true</TT>, the URL connection
will be used for output. If it is <TT>false</TT>,
it will be used for input.<BR>
<I><B>Parameters: </B></I><TT>dooutput</TT>-a
boolean value that will be <TT>true</TT>
if the URL connection is to be used for output; <TT>false</TT>
if for input.
</BLOCKQUOTE>
<H4><TT>getDoOutput</TT></H4>
<BLOCKQUOTE>
<TT>public boolean getDoOutput()<BR>
</TT>The <TT>getDoOutput</TT>
method returns the input/output functionality of the <TT>URLConnection</TT>.
<BR>
<I><B>Returns: </B></I>A boolean value that will be <TT>true</TT>
if the URL connection is used for output; <TT>false</TT>
if it is used for input.
</BLOCKQUOTE>
<H4><TT>setAllowUserInteraction</TT>
</H4>
<BLOCKQUOTE>
<TT>public void setAllowUserInteraction(boolean
allowuserinteraction)<BR>
</TT>The <TT>setAllowUserInteraction</TT>
method allows the protocol to interact with the user.<BR>
<I><B>Parameters: </B></I><TT>allowuserinteraction</TT>-a
boolean value that should be <TT>true</TT>
if user interaction is allowed; <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>getAllowUserInteraction</TT>
</H4>
<BLOCKQUOTE>
<TT>public boolean getAllowUserInteraction()
<BR>
</TT>The <TT>getAllowUserInteraction</TT>
method can be called to determine if user interaction is allowed.
<BR>
<I><B>Returns: </B></I>A boolean value that will be <TT>true</TT>
if user interaction is allowed; <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>setDefaultAllowUserInteraction</TT>
</H4>
<BLOCKQUOTE>
<TT>public static void setDefaultAllowUserInteraction(
 boolean defaultallowuserinteraction)<BR>
</TT>The <TT>setDefaultAllowUserInteraction</TT>
method allows the default user interaction value to be set for
all URL connections because it is a static method.<BR>
<I><B>Parameters: </B></I><TT>defaultallowuserinteraction</TT>-a
boolean value that should be <TT>true</TT>
if user interaction is allowed; <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>getDefaultAllowUserInteraction</TT>
</H4>
<BLOCKQUOTE>
<TT>public static boolean getDefaultAllowUserInteraction()
<BR>
</TT>The <TT>getDefaultAllowUserInteraction</TT>
static method returns the default user interaction value.<BR>
<I><B>Returns: </B></I>A boolean value that will be <TT>true</TT>
if user interaction is allowed; <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>setUseCaches</TT></H4>
<BLOCKQUOTE>
<TT>public void setUseCaches(boolean usecaches)
<BR>
</TT>The <TT>setUseCaches</TT>
method is used to control the use of caching by the protocol.
Some protocols allow files to be cached.<BR>
<I><B>Parameters: </B></I><TT>usecaches</TT>-a
boolean value that will be <TT>true</TT>
if caching is to be used by the protocol; <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>getUseCaches</TT></H4>
<BLOCKQUOTE>
<TT>public boolean getUseCaches()<BR>
</TT>The <TT>getUseCaches</TT>
method can be called to determine if caching is to be used by
the protocol.<BR>
<I><B>Returns: </B></I>A boolean value that will be <TT>true</TT>
if caching is to be used by the protocol; <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>setIfModifiedSince</TT></H4>
<BLOCKQUOTE>
<TT>public void setIfModifiedSince(long ifmodifiedsince)
<BR>
</TT>The <TT>setIfModifiedSince</TT>
method is provided to set the internal <TT>ifmodifiedsince</TT>
variable of the <TT>URLConnection</TT>
class. Because some protocols allow caching of files, if the file
to be retrieved is newer than <TT>ifmodifiedsince</TT>,
it will need to retrieved from the URL (rather than the cache).
<BR>
<I><B>Parameters: </B></I><TT>ifmodifiedsince</TT>-a
long value used to represent the <TT>ifmodifiedsince</TT>
date.
</BLOCKQUOTE>
<H4><TT>getIfModifiedSince</TT></H4>
<BLOCKQUOTE>
<TT>public long getIfModifiedSince()<BR>
</TT>The <TT>getIfModifiedSince</TT>
method returns the internal <TT>ifmodifiedsince</TT>
date value. See the <TT>setIfModifiedSince</TT>
method documentation.<BR>
<I><B>Returns: </B></I>A long value representing the <TT>ifmodifiedsince</TT>
date value.
</BLOCKQUOTE>
<H4><TT>getDefaultUseCaches</TT></H4>
<BLOCKQUOTE>
<TT>public boolean getDefaultUseCaches()
<BR>
</TT>The <TT>getDefaultUseCaches</TT>
method can be called to determine if caches are used by default.
<BR>
<I><B>Returns: </B></I>A boolean value that will be <TT>true</TT>
if caches are used by default; <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>setDefaultUseCaches</TT></H4>
<BLOCKQUOTE>
<TT>public void setDefaultUseCaches(boolean
defaultusecaches)<BR>
</TT>The <TT>setDefaultUseCaches</TT>
method can be used to force all <TT>URLConnection</TT>s
to use caching by default because it is a static value.<BR>
<I><B>Parameters: </B></I><TT>defaultusecaches</TT>-a
boolean value that should be <TT>true</TT>
if caches are to be used by default; <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>setRequestProperty</TT></H4>
<BLOCKQUOTE>
<TT>public void setRequestProperty(String
key, String value)<BR>
</TT>The <TT>setRequestProperty</TT>
method is used to set <TT>URLConnection</TT>
properties.<BR>
<I><B>Parameters: <BR>
</B></I><TT>key</TT>-a <TT>String</TT>
object containing the key by which the property is known.<BR>
<TT>value</TT>-a <TT>String</TT>
object containing the property value.
</BLOCKQUOTE>
<H4><TT>getRequestProperty</TT></H4>
<BLOCKQUOTE>
<TT>public String getRequestProperty(String
key)<BR>
</TT>The <TT>getRequestProperty</TT>
method returns the value for the specified property key.<BR>
<I><B>Parameters: </B></I><TT>key</TT>-a
<TT>String</TT> object containing
the key by which the property is known.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
object containing the specified property's value.
</BLOCKQUOTE>
<H4><TT>setDefaultRequestProperty</TT>
</H4>
<BLOCKQUOTE>
<TT>public static void setDefaultRequestProperty(String
key, String value)<BR>
</TT>The <TT>setDefaultRequestProperty</TT>
method sets the default value of a specified property. All current
and future URL connections will be initialized with these properties.
<BR>
<I><B>Parameters: <BR>
</B></I><TT>key</TT>-a <TT>String</TT>
object containing the key by which the property is known.<BR>
<TT>value</TT>-a <TT>String</TT>
object containing the specified property's value.
</BLOCKQUOTE>
<H4><TT>getDefaultRequestProperty</TT>
</H4>
<BLOCKQUOTE>
<TT>public static String getDefaultRequestProperty(String
key)<BR>
</TT>The <TT>getDefaultRequestProperty</TT>
method gets the default value of a specified property.<BR>
<I><B>Parameters: </B></I><TT>key</TT>-a
<TT>String</TT> object containing
the key by which the property is known.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
object containing the specified property's value.
</BLOCKQUOTE>
<H4><TT>setContentHandlerFactory</TT>
</H4>
<BLOCKQUOTE>
<TT>public static synchronized void setContentHandlerFactory(
<BR>
  ContentHandlerFactory fac)<BR>
</TT>The <TT>setContentHandlerFactory</TT>
method is used to set the <TT>ContentHandlerFactory</TT>
interface for this URL connection. The factory can only be set
once.<BR>
<I><B>Parameters: </B></I><TT>fac</TT>-a
<TT>ContentHandlerFactory</TT>-derived
object.<BR>
<I><B>Throws:</B></I><TT> Error</TT>
if the <TT>ContentHandlerFactory</TT>
has already been defined.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierURLEncoderFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>URLEncoder</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>The <TT>URLEncoder</TT>
class is used to encode text into <TT><I>x-www-form-urlencoded</I></TT><I>
</I>format.
</BLOCKQUOTE>
<H4><TT>encode</TT></H4>
<BLOCKQUOTE>
<TT>public static String encode(String s)
<BR>
</TT>The <TT>encode</TT> method
is used to translate a string into <TT><I>x-www-form-urlencoded</I></TT>
format.<BR>
<I><B>Parameters: </B></I><TT>s</TT>-a
<TT>String</TT> object to be translated.
<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
object in <TT><I>x-www-form-urlencoded</I></TT>
format.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierMalformedURLExceptionFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>MalformedURLException</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>IOException<BR>
</TT>The MalformedURLException class is used to signal
a malformed URL.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierProtocolExceptionFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>ProtocolException</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>IOException<BR>
</TT>This exception signals when a connect receives an
<TT>EPROTO</TT> message. This exception
is used by the <TT>Socket</TT> class.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierSocketExceptionFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>SocketException</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>IOException<BR>
</TT>This exception signals when an error has occurred
while trying to use a socket. This exception is used by the <TT>Socket</TT>
class.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierUnknownHostExceptionFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>UnknownHostException</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>IOException<BR>
</TT>This exception signals that the host address specified
by the client cannot be resolved.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierUnknownServiceExceptionFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>UnknownServiceException</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>IOException<BR>
</TT>This exception signals when an unknown service exception
has occurred.
</BLOCKQUOTE>
<HR>

<CENTER><P><A HREF="ch38.htm"><IMG SRC="http://docs.rinet.ru/J21/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="http://docs.rinet.ru/J21/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/J21/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch40.htm"><IMG SRC="http://docs.rinet.ru/J21/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
