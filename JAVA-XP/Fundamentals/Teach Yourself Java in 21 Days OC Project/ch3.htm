<HTML>
<HEAD>
<TITLE>Day 3 -- Java Basics</TITLE>

<META>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">










<H1><FONT SIZE=6 COLOR=#FF0000>Day&nbsp;3</FONT></H1>
<H1><FONT SIZE=6 COLOR=#FF0000>Java Basics</FONT></H1>
<P>
<I><B>by Laura Lemay</B></I>
<HR>
<P>
<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>
<UL>
<LI><A HREF="#StatementsandExpressions">
Statements and Expressions</A>
<LI><A HREF="#VariablesandDataTypes">
Variables and Data Types</A>
<UL>
<LI><A HREF="#DeclaringVariables">
Declaring Variables</A>
<LI><A HREF="#NotesonVariableNames">
Notes on Variable Names</A>
<LI><A HREF="#VariableTypes">
Variable Types</A>
<LI><A HREF="#AssigningValuestoVariables">
Assigning Values to Variables</A>
</UL>
<LI><A HREF="#Comments">
Comments</A>
<LI><A HREF="#Literals">
Literals</A>
<UL>
<LI><A HREF="#NumberLiterals">
Number Literals</A>
<LI><A HREF="#BooleanLiterals">
Boolean Literals</A>
<LI><A HREF="#CharacterLiterals">
Character Literals</A>
<LI><A HREF="#StringLiterals">
String Literals</A>
</UL>
<LI><A HREF="#ExpressionsandOperators">
Expressions and Operators</A>
<UL>
<LI><A HREF="#Arithmetic">
Arithmetic</A>
<LI><A HREF="#MoreAboutAssignment">
More About Assignment</A>
<LI><A HREF="#IncrementingandDecrementing">
Incrementing and Decrementing</A>
<LI><A HREF="#Comparisons">
Comparisons</A>
<LI><A HREF="#LogicalOperators">
Logical Operators</A>
<LI><A HREF="#BitwiseOperators">
Bitwise Operators</A>
<LI><A HREF="#OperatorPrecedence">
Operator Precedence</A>
</UL>
<LI><A HREF="#StringArithmetic">
String Arithmetic</A>
<LI><A HREF="#Summary">
Summary</A>
<LI><A HREF="#QampABR">
Q&amp;A<BR>
</A>
</UL>

<HR>
<P>
Already this week you've learned about Java programming in very
broad terms-what a Java program and an executable look like, and
how to create simple classes. For the remainder of this week,
you're going to get down to details and deal with the specifics
of what the Java language looks like.
<P>
Today you won't define any classes or objects or worry about how
any of them communicate inside a Java program. Rather, you'll
draw closer and examine simple Java statements-the basic things
you can do in Java within a method definition such as <TT>main().</TT>
<P>
Today you'll learn about the following:
<UL>
<LI>Java statements and expressions
<LI>Variables and data types
<LI>Comments
<LI>Literals
<LI>Arithmetic
<LI>Comparisons
<LI>Logical operators
</UL>
<P>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Technical Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Java looks a lot like C++, and-by extension-like C. Much of the syntax will be very familiar to you if you are used to working in these languages. If you are an experienced C or C++ programmer, you may want to pay special attention to the technical notes 
(such as this one), because they provide information about the specific differences between these and other traditional languages and Java.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H2><A NAME="StatementsandExpressions"><FONT SIZE=5 COLOR=#FF0000>
Statements and Expressions</FONT></A></H2>
<P>
A statement indicates the simplest tasks you can accomplish in
Java; a statement forms a single Java operation. All the following
are simple Java statements:
<BLOCKQUOTE>
<PRE>
int i = 1;
import java.awt.Font;
System.out.println(&quot;This motorcycle is a &quot;
    + color + &quot; &quot; + make);
m.engineState = true;
</PRE>
</BLOCKQUOTE>
<P>
Statements sometimes return values-for example, when you add two
numbers together or test to see whether one value is equal to
another. These kind of statements are called expressions</FONT>.
You'll learn about these later today.
<P>
White space in Java statements, as with C, is unimportant. A statement
can be contained on a single line or on multiple lines, and the
Java compiler will be able to read it just fine. The most important
thing to remember about Java statements is that each one ends
with a semicolon (<TT>;</TT>). Forget
the semicolon, and your Java program won't compile.
<P>
Java also has compound statements, or blocks, which can be placed
wherever a single statement can. Block statements are surrounded
by braces (<TT>{}</TT>). You'll learn
more about blocks on <A HREF="ch5.htm">Day 5</A>, &quot;Arrays, Conditionals, and Loops.&quot;
<H2><A NAME="VariablesandDataTypes"><FONT SIZE=5 COLOR=#FF0000>
Variables and Data Types</FONT></A></H2>
<P>
Variables are locations in memory in which values can be stored.
Each one has a name, a type, and a value. Before you can use a
variable, you have to declare it. After it is declared, you can
then assign values to it (you can also declare and assign a value
to a variable at the same time, as you'll learn in this section).
<P>
Java actually has three kinds of variables: instance variables,
class variables, and local variables.
<P>
Instance variables, as you learned yesterday, are used to define
the attributes of a particular object. Class variables are similar
to instance variables, except their values apply to all that class's
instances (and to the class itself) rather than having different
values for each object.
<P>
Local variables are declared and used inside method definitions,
for example, for index counters in loops, as temporary variables,
or to hold values that you need only inside the method definition
itself. They can also be used inside blocks, which you'll learn
about on <A HREF="ch5.htm">Day 5</A>. Once the method (or block) finishes executing,
the variable definition and its value cease to exist. Use local
variables to store information needed by a single method and instance
variables to store information needed by multiple methods in the
object.
<P>
Although all three kinds of variables are declared in much the
same ways, class and instance variables are accessed and assigned
in slightly different ways from local variables. Today you'll
focus on variables as used within method definitions; tomorrow
you'll learn how to deal with instance and class variables.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Unlike other languages, Java does not have global variables-that is, variables that are global to all parts of a program. Instance and class variables can be used to communicate global information between and among objects. Remember that Java is an 
object-oriented language, so you should think in terms of objects and how they interact, rather than in terms of programs.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H3><A NAME="DeclaringVariables">
Declaring Variables</A></H3>
<P>
To use any variable in a Java program, you must first declare
it. Variable declarations consist of a type and a variable name:
<BLOCKQUOTE>
<PRE>
int myAge;
String myName;
boolean isTired;
</PRE>
</BLOCKQUOTE>
<P>
Variable definitions can go anywhere in a method definition (that
is, anywhere a regular Java statement can go), although they are
most commonly declared at the beginning of the definition before
they are used:
<BLOCKQUOTE>
<PRE>
public static void main (String args[]) {
    int count;
    String title;
    boolean isAsleep;
...
}
</PRE>
</BLOCKQUOTE>
<P>
You can string together variable names with the same type on one
line:
<BLOCKQUOTE>
<PRE>
int x, y, z;
String firstName, LastName;
</PRE>
</BLOCKQUOTE>
<P>
You can also give each variable an initial value when you declare
it:
<BLOCKQUOTE>
<PRE>
int myAge, mySize, numShoes = 28;
String myName = &quot;Laura&quot;;
boolean isTired = true;
int a = 4, b = 5, c = 6;
</PRE>
</BLOCKQUOTE>
<P>
If there are multiple variables on the same line with only one
initializer (as in the first of the previous examples), the initial
value applies to only the last variable in a declaration. You
can also group individual variables and initializers on the same
line using commas, as with the last example.
<P>
Local variables must be given values before they can be used (your
Java program will not compile if you try to use an unassigned
local variable). For this reason, it's a good idea always to give
local variables initial values. Instance and class variable definitions
do not have this restriction. (Their initial value depends on
the type of the variable: <TT>null</TT>
for instances of classes, <TT>0</TT>
for numeric variables, <TT>'\0'</TT>
for characters, and <TT>false</TT>
for booleans.)
<H3><A NAME="NotesonVariableNames">
Notes on Variable Names</A></H3>
<P>
Variable names in Java can start with a letter, an underscore
(<TT>_</TT>), or a dollar sign (<TT>$</TT>).
They cannot start with a number. After the first character, your
variable names can include any letter or number. Symbols, such
as <TT>%</TT>, <TT>*</TT>,
<TT>@</TT>, and so on, are often reserved
for operators in Java, so be careful when using symbols in variable
names.
<P>
In addition, the Java language uses the Unicode character set.
Unicode is a character set definition that not only offers characters
in the standard ASCII character set, but also includes several
thousand other characters for representing most international
alphabets. This means that you can use accented characters and
other glyphs as legal characters in variable names, as long as
they have a Unicode character number above <TT>00C0</TT>.
<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Warning</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
The Unicode specification is a two-volume set of lists of thousands of characters. If you don't understand Unicode, or don't think you have a use for it, it's safest just to use plain numbers and letters in your variable names. You'll learn a little more 
about Unicode later.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
Finally, note that the Java language is case sensitive, which
means that uppercase letters are different from lowercase letters.
This means that the variable <TT>X</TT>
is different from the variable <TT>x</TT>,
and a <TT>rose</TT> is not a <TT>Rose</TT>
is not a <TT>ROSE</TT>. Keep this
in mind as you write your own Java programs and as you read Java
code other people have written.
<P>
By convention, Java variables have meaningful names, often made
up of several words combined. The first word is lowercase, but
all following words have an initial uppercase letter:
<BLOCKQUOTE>
<PRE>
Button theButton;
long reallyBigNumber;
boolean currentWeatherStateOfPlanetXShortVersion;
</PRE>
</BLOCKQUOTE>
<H3><A NAME="VariableTypes">
Variable Types</A></H3>
<P>
In addition to the variable name, each variable declaration must
have a type, which defines what values that variable can hold.
The variable type can be one of three things:
<UL>
<LI>One of the eight primitive data types
<LI>The name of a class or interface
<LI>An array 
</UL>
<P>
You'll learn about how to declare and use array variables on Day
5; this lesson focuses on the primitive and class types.
<H4>Primitive Types</H4>
<P>
The eight primitive data types handle common types for integers,
floating-point numbers, characters, and boolean values (<TT>true</TT>
or <TT>false</TT>). They're called
primitive</FONT> because they're
built into the system and are not actual objects, which makes
them more efficient to use. Note that these data types are machine-independent,
which means that you can rely on their sizes and characteristics
to be consistent across your Java programs.
<P>
There are four Java integer types, each with a different range
of values (as listed in Table 3.1). All are signed, which means
they can hold either positive or negative numbers. Which type
you choose for your variables depends on the range of values you
expect that variable to hold; if a value becomes too big for the
variable type, it is silently truncated.<BR>
<P>
<CENTER><B>Table 3.1. Integer types.</B></CENTER>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=97><B>Type</B></TD><TD WIDTH=108><CENTER><B>Size</B></CENTER>
</TD><TD WIDTH=408><B>Range</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=97><TT>byte</TT></TD>
<TD WIDTH=108><CENTER>  8 bits</CENTER></TD><TD WIDTH=408>-128 to 127
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=97><TT>short</TT></TD>
<TD WIDTH=108><CENTER>16 bits</CENTER></TD><TD WIDTH=408>-32,768 to 32,767
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=97><TT>int</TT></TD>
<TD WIDTH=108><CENTER>32 bits</CENTER></TD><TD WIDTH=408>-2,147,483,648 to 2,147,483,647
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=97><TT>long</TT></TD>
<TD WIDTH=108><CENTER>64 bits</CENTER></TD><TD WIDTH=408>-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807
</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
Floating-point numbers are used for numbers with a decimal part.
Java floating-point numbers are compliant with IEEE 754 (an international
standard for defining floating-point numbers and arithmetic).
There are two floating-point types: <TT>float</TT>
(32 bits, single precision) and<TT> double</TT>
(64 bits, double precision).
<P>
The <TT>char</TT> type is used for
individual characters. Because Java uses the Unicode character
set, the <TT>char</TT> type has 16
bits of precision, unsigned.
<P>
Finally, the boolean type can have one of two values, <TT>true</TT>
or <TT>false</TT>. Note that unlike
in other C-like languages, <TT>boolean</TT>
is not a number, nor can it be treated as one. All tests of boolean
variables should test for <TT>true</TT>
or <TT>false</TT>.
<P>
Note that all the primitive types are in lowercase. Be careful
when you use them in your programs that you do use the lowercase,
because there are also classes with the same names (and an initial
capital letter) that have different behavior-so, for example,
the primitive type <TT>boolean</TT>
is different from the <TT>Boolean</TT>
class. You'll learn more about these special classes and what
they're used for on <A HREF="ch4.htm">Day 4</A>, &quot;Working with Objects.&quot;
<H4>Class Types</H4>
<P>
In addition to the eight primitive data types, variables in Java
can also be declared to hold an instance of a particular class:
<BLOCKQUOTE>
<PRE>
String LastName;
Font basicFont;
OvalShape myOval;
</PRE>
</BLOCKQUOTE>
<P>
Each of these variables can hold instances of the named class
or of any of its subclasses. The latter is useful when you want
a variable to be able to hold different instances of related classes.
For example, let's say you had a set of fruit classes-<TT>Apple</TT>,
<TT>Pear</TT>, <TT>Strawberry</TT>,
and so on- all of which inherited from the general class <TT>Fruit</TT>.
By declaring a variable of type <TT>Fruit</TT>,
that variable can then hold instances of any of the <TT>Fruit</TT>
classes. Declaring a variable of type <TT>Object</TT>
means that variable can hold any object.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Technical Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Java does not have a <TT>typedef</TT> statement (as in C and C++). To declare new types in Java, you declare a new class; then variables can be declared to be of that class's type.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H3><A NAME="AssigningValuestoVariables">
Assigning Values to Variables</A></H3>
<P>
Once a variable has been declared, you can assign a value to that
variable by using the assignment operator <TT>=</TT>,
like this:
<BLOCKQUOTE>
<PRE>
size = 14;
tooMuchCaffiene = true;
</PRE>
</BLOCKQUOTE>
<H2><A NAME="Comments"><FONT SIZE=5 COLOR=#FF0000>
Comments</FONT></A></H2>
<P>
Java has three kinds of comments: two for regular comments in
source code and one for the special documentation system <TT>javadoc</TT>.
<P>
The symbols <TT>/*</TT> and <TT>*/</TT>
surround multiline comments, as in C or C++. All text between
the two delimiters is ignored:
<BLOCKQUOTE>
<PRE>
/* I don't know how I wrote this next part; I was working
    really late one night and it just sort of appeared. I
    suspect the code elves did it for me. It might be wise
    not to try and change it.
*/
</PRE>
</BLOCKQUOTE>
<P>
These comments cannot be nested; that is, you cannot have a comment
inside a comment.
<P>
Double-slashes (<TT>//</TT>) can be
used for a single line of comment. All the text up to the end
of the line is ignored:
<BLOCKQUOTE>
<PRE>
int vices = 7; // are there really only 7 vices?
</PRE>
</BLOCKQUOTE>
<P>
The final type of comment begins with <TT>/**</TT>
and ends with <TT>*/</TT>. The contents
of these special comments are used by the <TT>javadoc</TT>
system, but are otherwise used identically to the first type of
comment. <TT>javadoc</TT> is used
to generate API documentation from the code. You'll learn more
about <TT>javadoc</TT> on <A HREF="ch22.htm">Day 22</A>,
&quot;Java Programming Tools.&quot;
<H2><A NAME="Literals"><FONT SIZE=5 COLOR=#FF0000>
Literals</FONT></A></H2>
<P>
Literal</FONT> is a programming
language term that essentially means that what you type is what
you get. For example, if you type <TT>4</TT>
in a Java program, you automatically get an integer with the value
<TT>4</TT>. If you type <TT>'a'</TT>,
you get a character with the value <TT>a</TT>.
Literals are used to indicate simple values in your Java programs.
<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>New Term</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
A literal</FONT> is a simple value where &quot;what you type is what you get.&quot; Numbers, characters, and strings are all examples of literals.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
Literals may seem intuitive most of the time, but there are some
special cases of literals in Java for different kinds of numbers,
characters, strings, and boolean values.
<H3><A NAME="NumberLiterals">
Number Literals</A></H3>
<P>
There are several integer literals. <TT>4</TT>,
for example, is a decimal integer literal of type <TT>int</TT>
(although you can assign it to a variable of type <TT>byte</TT>
or <TT>short</TT> because it's small
enough to fit into those types). A decimal integer literal larger
than an <TT>int</TT> is automatically
of type <TT>long</TT>. You also can
force a smaller number to a <TT>long</TT>
by appending an <TT>L</TT> or <TT>l</TT>
to that number (for example, <TT>4L</TT>
is a <TT>long</TT> integer of value
<TT>4</TT>). Negative integers are
preceded by a minus sign-for example, <TT>-45</TT>.
<P>
Integers can also be expressed as octal or hexadecimal: A leading
<TT>0</TT> indicates that a number
is octal-for example, <TT>0777</TT>
or <TT>0004</TT>. A leading <TT>0x</TT>
(or <TT>0X</TT>) means that it is
in hex (<TT>0xFF</TT>, <TT>0XAf45</TT>).
Hexadecimal numbers can contain regular digits (0-9) or upper-
or lowercase hex digits (a-f or A-F).
<P>
Floating-point literals usually have two parts, the integer part
and the decimal part-for example, <TT>5.77777</TT>.
A floating-point literal results in a floating-point number of
type <TT>double</TT>, regardless of
the precision of the number. You can force the number to the type
<TT>float</TT> by appending the letter
<TT>f</TT> (or <TT>F</TT>)
to that number-for example, <TT>2.56F</TT>.
<P>
You can use exponents in floating-point literals using the letter
<TT>e</TT> or <TT>E</TT>
followed by the exponent (which can be a negative number): <TT>10e45</TT>
or <TT>.36E-2</TT>.
<H3><A NAME="BooleanLiterals">
Boolean Literals</A></H3>
<P>
Boolean literals consist of the keywords <TT>true</TT>
and <TT>false.</TT> These keywords
can be used anywhere you need a test or as the only possible values
for boolean variables.
<H3><A NAME="CharacterLiterals">
Character Literals</A></H3>
<P>
Character literals are expressed by a single character surrounded
by single quotes: <TT>'a'</TT>, <TT>'#'</TT>,
<TT>'3'</TT>, and so on. Characters
are stored as 16-bit Unicode characters. Table 3.2 lists the special
codes that can represent nonprintable characters, as well as characters
from the Unicode character set. The letter <TT>d</TT>
in the octal, hex, and Unicode escapes represents a number or
a hexadecimal digit (a-f or A-F).<BR>
<P>
<CENTER><B>Table 3.2. Character escape codes.</B></CENTER>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=60%>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><B>Escape</B></CENTER></TD><TD WIDTH=156><B>Meaning</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>\n</TT></CENTER>
</TD><TD WIDTH=156>Newline</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>\t</TT></CENTER>
</TD><TD WIDTH=156>Tab</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>\b</TT></CENTER>
</TD><TD WIDTH=156>Backspace</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>\r</TT></CENTER>
</TD><TD WIDTH=156>Carriage return</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>\f</TT></CENTER>
</TD><TD WIDTH=156>Formfeed</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>\\</TT></CENTER>
</TD><TD WIDTH=156>Backslash</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>\'</TT></CENTER>
</TD><TD WIDTH=156>Single quote</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>\&quot;</TT></CENTER>
</TD><TD WIDTH=156>Double quote</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>\ddd</TT></CENTER>
</TD><TD WIDTH=156>Octal</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>\xdd</TT></CENTER>
</TD><TD WIDTH=156>Hexadecimal</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>\udddd</TT></CENTER>
</TD><TD WIDTH=156>Unicode character</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Technical Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
C and C++ programmers should note that Java does not include character codes for <TT>\a</TT> (bell) or <TT>\v</TT> (vertical tab).
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H3><A NAME="StringLiterals">
String Literals</A></H3>
<P>
A combination of characters is a string. Strings in Java are instances
of the class <TT>String</TT>. Strings
are not simply arrays of characters as they are in C or C++, although
they do have many array-like characteristics (for example, you
can test their length, and access and change individual characters).
Because string objects are real objects in Java, they have methods
that enable you to combine, test, and modify strings very easily.
<P>
String literals consist of a series of characters inside double
quotes:
<BLOCKQUOTE>
<PRE>
&quot;Hi, I'm a string literal.&quot;
&quot;&quot; //an empty string
</PRE>
</BLOCKQUOTE>
<P>
Strings can contain character constants such as newline, tab,
and Unicode characters:
<BLOCKQUOTE>
<PRE>
&quot;A string with a \t tab in it&quot;
&quot;Nested strings are \&quot;strings inside of\&quot; other strings&quot;
&quot;This string brought to you by Java\u2122&quot;
</PRE>
</BLOCKQUOTE>
<P>
In the last example, the Unicode code sequence for <TT>\u2122</TT>
produces a trademark symbol (&nbsp;).<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Just because you can represent a character using a Unicode escape does not mean your computer can display that character-the computer or operating system you are running may not support Unicode, or the font you're using may not have a glyph (picture) for 
that character. All that Unicode escapes in Java provide is a way to encode Unicode characters for systems that support Unicode.</BLOCKQUOTE>
<BLOCKQUOTE>
Java 1.1 will provide better capabilities for the display of Unicode characters and for handling international character sets.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
When you use a string literal in your Java program, Java automatically
creates an instance of the class <TT>String</TT>
for you with the value you give it. Strings are unusual in this
respect; the other literals do not behave in this way (none of
the primitive data types are actual objects), and usually creating
a new object involves explicitly creating a new instance of a
class. You'll learn more about strings, the <TT>String</TT>
class, and the things you can do with strings later today and
tomorrow.
<H2><A NAME="ExpressionsandOperators"><FONT SIZE=5 COLOR=#FF0000>
Expressions and Operators</FONT></A></H2>
<P>
Expressions are the simplest form of statement in Java that actually
accomplishes something: All expressions, when evaluated, return
a value (other statements don't necessarily do so). Arithmetic
and tests for equality and magnitude are common examples of expressions.
Because they return a value, you can assign that result to a variable
or test that value in other Java statements.
<P>
Most of the expressions in Java use operators. Operators are special
symbols for things like arithmetic, various forms of assignment,
increment and decrement, and logical operations.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>New Term</FONT></B>
</TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Expressions</FONT> are statements that return a value. 
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>New Term</FONT></B>
</TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Operators</FONT> are special symbols that are commonly used in expressions. 
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H3><A NAME="Arithmetic">
Arithmetic</A></H3>
<P>
Java has five operators for basic arithmetic (see Table 3.3).
<BR>
<P>
<CENTER><B>Table 3.3. Arithmetic operators.</B></CENTER>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=60%>
<TR VALIGN=TOP><TD WIDTH=151><CENTER><B>Operator</B></CENTER></TD><TD WIDTH=144><B>Meaning</B>
</TD><TD WIDTH=150><CENTER><B>Example</B></CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=151><CENTER><TT>+</TT></CENTER>
</TD><TD WIDTH=144>Addition</TD><TD WIDTH=150><CENTER><TT>3 + 4</TT></CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=151><CENTER><TT>-</TT></CENTER>
</TD><TD WIDTH=144>Subtraction</TD><TD WIDTH=150><CENTER><TT>5 - 7</TT></CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=151><CENTER><TT>*</TT></CENTER>
</TD><TD WIDTH=144>Multiplication</TD><TD WIDTH=150><CENTER><TT>5 * 5</TT></CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=151><CENTER><FONT FACE="Symbol">/</FONT></CENTER>
</TD><TD WIDTH=144>Division</TD><TD WIDTH=150><CENTER><TT>14 / 7</TT></CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=151><CENTER><TT>%</TT></CENTER>
</TD><TD WIDTH=144>Modulus</TD><TD WIDTH=150><CENTER><TT>20 % 7</TT></CENTER>
</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
Each operator takes two operands, one on either side of the operator.
The subtraction operator (<TT>-</TT>)
can also be used to negate a single operand.
<P>
Integer division results in an integer. Because integers don't
have decimal fractions, any remainder is ignored. The expression
<TT>31 / 9</TT>, for example, results
in <TT>3</TT> (9 goes into 31 only
3 times).
<P>
Modulus (<TT>%</TT>) gives the remainder
once the operands have been evenly divided. For example, <TT>31
% 9</TT> results in <TT>4</TT>
because 9 goes into 31 three times, with 4 left over.
<P>
Note that the result type of most arithmetic operations involving
integers is an <TT>int</TT> regardless
of the original type of the operands (<TT>short</TT>s
and <TT>byte</TT>s are both automatically
converted to <TT>int</TT>). If either
or both operands is of type <TT>long</TT>,
the result is of type <TT>long</TT>.
If one operand is an integer and another is a floating-point number,
the result is a floating point. (If you're interested in the details
of how Java promotes and converts numeric types from one type
to another, you may want to check out the Java Language Specification
on Sun's official Java Web site at <TT><A HREF="http://java.sun.com/">http://java.sun.com/</A></TT>;
that's more detail than I want to cover here.)
<P>
Listing 3.1 is an example of simple arithmetic in Java.
<HR>
<BLOCKQUOTE>
<B>Listing 3.1. Simple arithmetic.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
 1: class ArithmeticTest {
 2: public static void main (String args[]) {
 3:     short x = 6;
 4:     int y = 4;
 5:     float a = 12.5f;
 6:     float b = 7f;
 7: 
 8:     System.out.println(&quot;x is &quot; + x + &quot;, y is &quot; + y);
 9:     System.out.println(&quot;x + y = &quot; + (x + y));
10:     System.out.println(&quot;x - y = &quot; + (x - y));
11:     System.out.println(&quot;x / y = &quot; + (x / y));
12:     System.out.println(&quot;x % y = &quot; + (x % y));
13: 
14:     System.out.println(&quot;a is &quot; + a + &quot;, b is &quot; + b);
15:     System.out.println(&quot;a / b = &quot; + (a / b));
16: }
17: }
</PRE>
</BLOCKQUOTE>
<HR>
<P>
<IMG SRC="http://docs.rinet.ru/J21/output.gif" BORDER=0>
<BLOCKQUOTE>
<PRE>
x is 6, y is 4
x + y = 10
x - y = 2
x / y = 1
x % y = 2
a is 12.5, b is 7
a / b = 1.78571<BR>
</PRE>
</BLOCKQUOTE>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Analysis</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
In this simple Java application (note the <TT>main()</TT> method), you initially define four variables in lines 3 through 6: <TT>x</TT> and <TT>y</TT>, which are integers (type <TT>int</TT>), and <TT>a</TT> and <TT>b</TT>, which are floating-point numbers 
(type <TT>float</TT>). Keep in mind that the default type for floating-point literals (such as <TT>12.5</TT>) is <TT>double</TT>, so to make sure these are numbers of type <TT>float</TT>, you have to use an <TT>f</TT> after each one (lines 5 and 6).
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
The remainder of the program merely does some math with integers
and floating-point numbers and prints out the results.
<P>
There is one other thing to mention about this program: the method
<TT>System.out.println()</TT>. You've
seen this method on previous days, but you haven't really learned
exactly what it does. The <TT>System.out.println()</TT>
method merely prints a message to the standard output of your
system-to the screen, to a special window, or maybe just to a
special log file, depending on your system and the development
environment you're running. The <TT>System.out.println()</TT>
method takes a single argument-a string-but you can use <TT>+</TT>
to concatenate multiple values into a single string, as you'll
learn later today.
<H3><A NAME="MoreAboutAssignment">
More About Assignment</A></H3>
<P>
Variable assignment is a form of expression; in fact, because
one assignment expression results in a value, you can string them
together like this:
<BLOCKQUOTE>
<PRE>
x = y = z = 0;
</PRE>
</BLOCKQUOTE>
<P>
In this example, all three variables now have the value <TT>0</TT>.
<P>
The right side of an assignment expression is always evaluated
before the assignment takes place. This means that expressions
such as <TT>x = x + 2</TT> do the
right thing; <TT>2</TT> is added to
the value of <TT>x</TT>, and then
that new value is reassigned to <TT>x</TT>.
In fact, this sort of operation is so common that Java has several
operators to do a shorthand version of this, borrowed from C and
C++. Table 3.4 shows these shorthand assignment operators.<BR>
<P>
<CENTER><B>Table 3.4. Assignment operators.</B></CENTER>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=60%>
<TR VALIGN=TOP><TD WIDTH=151><CENTER><B>Expression</B></CENTER></TD><TD WIDTH=144><CENTER><B>Meaning</B></CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=151><CENTER><TT>x += y</TT></CENTER>
</TD><TD WIDTH=144><CENTER>x = x + y</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=151><CENTER><TT>x -= y</TT></CENTER>
</TD><TD WIDTH=144><CENTER>x = x - y</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=151><CENTER><TT>x *= y</TT></CENTER>
</TD><TD WIDTH=144><CENTER>x = x * y</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=151><CENTER><TT>x /= y</TT></CENTER>
</TD><TD WIDTH=144><CENTER>x = x <FONT FACE="Symbol">/</FONT> y</CENTER>
</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Technical Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Technically, the shorthand assignment and longhand expressions are not exactly equivalent, particularly in cases where x or y may themselves be complicated expressions and your code relies on side effects of those expressions. In most instances, however, 
they are functionally equivalent. For more information about very complicated expressions, evaluation order, and side effects, you may want to consult the Java Language Specification.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H3><A NAME="IncrementingandDecrementing">
Incrementing and Decrementing</A></H3>
<P>
As in C and C++, the <TT>++</TT> and
<TT>--</TT> operators are used to
increment or decrement a variable's value by 1. For example, <TT>x++</TT>
increments the value of <TT>x</TT>
by 1 just as if you had used the expression <TT>x
= x + 1</TT>. Similarly <TT>x--</TT>
decrements the value of <TT>x</TT>
by 1. (Unlike C and C++, Java allows <TT>x</TT>
to be floating point.)
<P>
These increment and decrement operators can be prefixed or postfixed;
that is, the <TT>++</TT> or <TT>--</TT>
can appear before or after the value it increments or decrements.
For simple increment or decrement expressions, which one you use
isn't overly important. In complex assignments, where you are
assigning the result of an increment or decrement expression,
which one you use makes a difference.
<P>
Take, for example, the following two expressions:
<BLOCKQUOTE>
<PRE>
y = x++;
y = ++x;
</PRE>
</BLOCKQUOTE>
<P>
These two expressions yield very different results because of
the difference between prefix and postfix. When you use postfix
operators (<TT>x++</TT> or <TT>x--</TT>),
<TT>y</TT> gets the value of <TT>x</TT>
before <TT>x</TT> is changed; using
prefix, the value of <TT>x</TT> is
assigned to <TT>y</TT> after the change
has occurred. Listing 3.2 is a Java example of how all this works.
<HR>
<BLOCKQUOTE>
<B>Listing 3.2. Test of prefix and postfix increment operators.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
 1: class PrePostFixTest {
 2: 
 3: public static void main (String args[]) {
 4:     int x = 0;
 5:     int y = 0;
 6: 
 7:     System.out.println(&quot;x and y are &quot; + x + &quot; and &quot; + y );
 8:     x++;
 9:     System.out.println(&quot;x++ results in &quot; + x);
10:     ++x;
11:     System.out.println(&quot;++x results in &quot; + x);
12:     System.out.println(&quot;Resetting x back to 0.&quot;);
13:     x = 0;
14:     System.out.println(&quot;------------&quot;);
15:     y = x++;
16:     System.out.println(&quot;y = x++ (postfix) results in:&quot;);
17:     System.out.println(&quot;x is &quot; + x);
18:     System.out.println(&quot;y is &quot; + y);
19:     System.out.println(&quot;------------&quot;);
20: 
21:     y = ++x;
22:     System.out.println(&quot;y = ++x (prefix) results in:&quot;);
23:     System.out.println(&quot;x is &quot; + x);
24:     System.out.println(&quot;y is &quot; + y);
25:     System.out.println(&quot;------------&quot;);
26: 
27: }
28: }
</PRE>
</BLOCKQUOTE>
<HR>
<P>
<IMG SRC="http://docs.rinet.ru/J21/output.gif" BORDER=0>
<BLOCKQUOTE>
<PRE>
x and y are 0 and 0
x++ results in 1
++x results in 2
Resetting x back to 0.
------------
y = x++ (postfix) results in:
x is 1
y is 0
------------
y = ++x (prefix) results in:
x is 2
y is 2
------------
</PRE>
</BLOCKQUOTE>
<P>
In the first part of this example, you increment <TT>x</TT>
alone using both <TT>prefix</TT> and
<TT>postfix</TT> increment operators.
In each, <TT>x</TT> is incremented
by 1 each time. In this simple form, using either <TT>prefix</TT>
or <TT>postfix</TT> works the same
way.
<P>
In the second part of this example, you use the expression <TT>y
= x++</TT>, in which the <TT>postfix</TT>
increment operator is used. In this result, the value of <TT>x</TT>
is incremented after</FONT> that
value is assigned to <TT>y</TT>. Hence
the result: <TT>y</TT> is assigned
the original value of <TT>x</TT> (<TT>0</TT>),
and then <TT>x</TT> is incremented
by 1.
<P>
In the third part, you use the <TT>prefix</TT>
expression <TT>y = ++x</TT>. Here,
the reverse occurs: <TT>x</TT> is
incremented before its value is assigned to <TT>y</TT>.
Because <TT>x</TT> is <TT>1</TT>
from the previous step, its value is incremented (to <TT>2</TT>),
and then that value is assigned to <TT>y</TT>.
Both <TT>x</TT> and <TT>y</TT>
end up being <TT>2</TT>.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Technical Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Technically, this description is not entirely correct. In reality, Java always</FONT> completely evaluates all expressions on the right of an expression before assigning that value to a variable, so the concept of &quot;assigning x to y before x is 
incremented&quot; isn't precisely right. Instead, Java takes the value of x and &quot;remembers&quot; it, evaluates (increments) x, and then</FONT> assigns the original value of x to y. Although in most simple cases this distinction may not be important, 
for more complex expressions with side effects, it may change the behavior of the expression overall. See the Language Specification for many more details about expression evaluation in Java.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H3><A NAME="Comparisons">
Comparisons</A></H3>
<P>
Java has several expressions for testing equality and magnitude.
All of these expressions return a boolean value (that is, <TT>true</TT>
or <TT>false</TT>). Table 3.5 shows
the comparison operators.<BR>
<P>
<CENTER><B>Table 3.5. Comparison operators.</B></CENTER>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=60%>
<TR VALIGN=TOP><TD WIDTH=103><CENTER><B>Operator</B></CENTER></TD><TD WIDTH=282><B>Meaning</B>
</TD><TD WIDTH=102><CENTER><B>Example</B></CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=103><CENTER>==</CENTER></TD><TD WIDTH=282>Equal
</TD><TD WIDTH=102><CENTER>x == 3</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=103><CENTER><TT>!=</TT></CENTER>
</TD><TD WIDTH=282>Not equal</TD><TD WIDTH=102><CENTER><TT>x != 3</TT></CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=103><CENTER><TT>&lt;</TT></CENTER>
</TD><TD WIDTH=282>Less than</TD><TD WIDTH=102><CENTER><TT>x &lt; 3</TT></CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=103><CENTER><TT>&gt;</TT></CENTER>
</TD><TD WIDTH=282>Greater than</TD><TD WIDTH=102><CENTER><TT>x &gt; 3</TT></CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=103><CENTER><TT>&lt;=</TT></CENTER>
</TD><TD WIDTH=282>Less than or equal to</TD><TD WIDTH=102><CENTER><TT>x &lt;= 3</TT></CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=103><CENTER><TT>&gt;=</TT></CENTER>
</TD><TD WIDTH=282>Greater than or equal to</TD><TD WIDTH=102><CENTER><TT>x &gt;= 3</TT></CENTER>
</TD></TR>
</TABLE>
</CENTER>
<P>
<H3><A NAME="LogicalOperators">
Logical Operators</A></H3>
<P>
Expressions that result in boolean values (for example, the comparison
operators) can be combined by using logical operators that represent
the logical combinations <TT>AND</TT>,
<TT>OR</TT>, <TT>XOR</TT>,
and logical <TT>NOT</TT>.
<P>
For <TT>AND</TT> combinations, use
either the <TT>&amp;</TT> or <TT>&amp;&amp;</TT>
operators. The entire expression will be true only if both expressions
on either side of the operator are also true; if either expression
is false, the entire expression is false. The difference between
the two operators is in expression evaluation. Using <TT>&amp;</TT>,
both sides of the expression are evaluated regardless of the outcome.
Using <TT>&amp;&amp;</TT>, if the
left side of the expression is false, the entire expression is
assumed to be false (the value of the right side doesn't matter),
so the expression returns <TT>false</TT>,
and the right side of the expression is never evaluated. (This
is often called a &quot;short-circuited&quot; expression.)
<P>
For <TT>OR</TT> expressions, use either
<TT>|</TT> or <TT>||</TT>.
<TT>OR</TT> expressions result in
true if either or both of the expressions on either side is also
true; if both expression operands are false, the expression is
false. As with <TT>&amp;</TT> and
<TT>&amp;&amp;</TT>, the single <TT>|</TT>
evaluates both sides of the expression regardless of the outcome;
and <TT>||</TT> is short-circuited:
If the left expression is true, the expression returns <TT>true</TT>
and the right side is never evaluated.
<P>
In addition, there is the <TT>XOR</TT>
operator <TT>^</TT>, which returns
<TT>true</TT> only if its operands
are different (one true and one false, or vice versa) and <TT>false</TT>
otherwise (even if both are true).
<P>
In general, only the <TT>&amp;&amp;</TT>
and <TT>||</TT> are commonly used
as actual logical combinations. <TT>&amp;</TT>,
<TT>|</TT>, and <TT>^</TT>
are more commonly used for bitwise logical operations.
<P>
For <TT>NOT</TT>, use the <TT>!</TT>
operator with a single expression argument. The value of the <TT>NOT</TT>
expression is the negation of the expression; if <TT>x</TT>
is true, <TT>!x</TT> is false.
<H3><A NAME="BitwiseOperators">
Bitwise Operators</A></H3>
<P>
Finally, here's a short summary of the bitwise operators in Java.
Most of these expressions are inherited from C and C++ and are
used to perform operations on individual bits in integers. This
book does not go into bitwise operations; it's an advanced topic
covered better in books on C or C++. Table 3.6 summarizes the
bitwise operators.<BR>
<P>
<CENTER><B>Table 3.6. Bitwise operators.</B></CENTER>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=60%>
<TR VALIGN=TOP><TD WIDTH=151><CENTER><B>Operator</B></CENTER></TD><TD WIDTH=336><B>Meaning</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=151><CENTER><TT>&amp;</TT></CENTER>
</TD><TD WIDTH=336>Bitwise <TT>AND</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=151><CENTER><TT>|</TT></CENTER>
</TD><TD WIDTH=336>Bitwise <TT>OR</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=151><CENTER><TT>^</TT></CENTER>
</TD><TD WIDTH=336>Bitwise <TT>XOR</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=151><CENTER><TT>&lt;&lt;</TT></CENTER>
</TD><TD WIDTH=336>Left shift</TD></TR>
<TR VALIGN=TOP><TD WIDTH=151><CENTER><TT>&gt;&gt;</TT></CENTER>
</TD><TD WIDTH=336>Right shift</TD></TR>
<TR VALIGN=TOP><TD WIDTH=151><CENTER><TT>&gt;&gt;&gt;</TT></CENTER>
</TD><TD WIDTH=336>Zero fill right shift</TD></TR>
<TR VALIGN=TOP><TD WIDTH=151><CENTER><TT>~</TT></CENTER>
</TD><TD WIDTH=336>Bitwise complement</TD></TR>
<TR VALIGN=TOP><TD WIDTH=151><CENTER><TT>&lt;&lt;=</TT></CENTER>
</TD><TD WIDTH=336>Left shift assignment (<TT>x = x &lt;&lt; y</TT>)
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=151><CENTER><TT>&gt;&gt;=</TT></CENTER>
</TD><TD WIDTH=336>Right shift assignment (<TT>x = x &gt;&gt; y</TT>)
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=151><CENTER><TT>&gt;&gt;&gt;=</TT></CENTER>
</TD><TD WIDTH=336>Zero fill right shift assignment (<TT>x = x &gt;&gt;&gt; y</TT>)
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=151><CENTER><TT>x&amp;=y</TT></CENTER>
</TD><TD WIDTH=336><TT>AND</TT> assignment (<TT>x = x &amp; y</TT>)
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=151><CENTER><TT>x|=y</TT></CENTER>
</TD><TD WIDTH=336><TT>OR</TT> assignment (<TT>x = x | y</TT>)
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=151><CENTER><TT>x^=y</TT></CENTER>
</TD><TD WIDTH=336><TT>XOR</TT> assignment (<TT>x = x ^ y</TT>)
</TD></TR>
</TABLE>
</CENTER>
<P>
<H3><A NAME="OperatorPrecedence">
Operator Precedence</A></H3>
<P>
Operator precedence determines the order in which expressions
are evaluated. This, in some cases, can determine the overall
value of the expression. For example, take the following expression:
<BLOCKQUOTE>
<PRE>
y = 6 + 4 / 2
</PRE>
</BLOCKQUOTE>
<P>
Depending on whether the <TT>6 + 4</TT>
expression or the <TT>4 </TT><FONT FACE="Symbol">/</FONT><TT>
2</TT> expression is evaluated first, the value of <TT>y</TT>
can end up being <TT>5</TT> or <TT>8</TT>.
Operator precedence determines the order in which expressions
are evaluated, so you can predict the outcome of an expression.
In general, increment and decrement are evaluated before arithmetic,
arithmetic expressions are evaluated before comparisons, and comparisons
are evaluated before logical expressions. Assignment expressions
are evaluated last.
<P>
Table 3.7 shows the specific precedence of the various operators
in Java. Operators further up in the table are evaluated first;
operators on the same line have the same precedence and are evaluated
left to right based on how they appear in the expression itself.
For example, given that same expression <TT>y
= 6 + 4 / 2</TT>, you now know, according to this table,
that division is evaluated before addition, so the value of <TT>y</TT>
will be <TT>8</TT>.<BR>
<P>
<CENTER><B>Table 3.7. Operator precedence.</B></CENTER>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=211><B>Operator</B></TD><TD WIDTH=379><B>Notes</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=211><TT>. [] ()</TT>
</TD><TD WIDTH=379>Parentheses (<TT>()</TT>) are used to group expressions; dot (<TT>.</TT>) is used for access to methods and variables within objects and classes (discussed tomorrow); square brackets (<TT>[]</TT>) are used for arrays (this is discussed 
later on in the week)
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=211><TT>++ -- ! ~ instanceof</TT>
</TD><TD WIDTH=379>The <TT>instanceof</TT> operator returns <TT>true</TT> or <TT>false</TT> based on whether the object is an instance of the named class or any of that class's subclasses (discussed tomorrow)
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=211><TT>new (type)</TT>expression
</TD><TD WIDTH=379>The <TT>new</TT> operator is used for creating new instances of classes; <TT>()</TT> in this case is for casting a value to another type (you'll learn about both of these tomorrow)
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=211><TT>* / %</TT></TD>
<TD WIDTH=379>Multiplication, division, modulus</TD></TR>
<TR VALIGN=TOP><TD WIDTH=211><TT>+ -</TT></TD>
<TD WIDTH=379>Addition, subtraction</TD></TR>
<TR VALIGN=TOP><TD WIDTH=211><TT>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</TT>
</TD><TD WIDTH=379>Bitwise left and right shift</TD></TR>
<TR VALIGN=TOP><TD WIDTH=211><TT>&lt; &gt; &lt;= &gt;=</TT>
</TD><TD WIDTH=379>Relational comparison tests</TD></TR>
<TR VALIGN=TOP><TD WIDTH=211><TT>== !=</TT></TD>
<TD WIDTH=379>Equality</TD></TR>
<TR VALIGN=TOP><TD WIDTH=211><TT>&amp;</TT></TD>
<TD WIDTH=379><TT>AND</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=211><TT>^</TT></TD>
<TD WIDTH=379><TT>XOR</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=211><TT>|</TT></TD>
<TD WIDTH=379><TT>OR</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=211><TT>&amp;&amp;</TT>
</TD><TD WIDTH=379>Logical <TT>AND</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=211><TT>||</TT></TD>
<TD WIDTH=379>Logical <TT>OR</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=211><TT>? :</TT></TD>
<TD WIDTH=379>Shorthand for <TT>if...then...else</TT> (discussed on <A HREF="ch5.htm">Day 5</A>)
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=211><TT>= += -= *= /= %= ^=</TT> 
</TD><TD WIDTH=379>Various assignments</TD></TR>
<TR VALIGN=TOP><TD WIDTH=211><TT>&amp;= |= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=</TT>
</TD><TD WIDTH=379>More assignments</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
You can always change the order in which expressions are evaluated
by using parentheses around the expressions you want to evaluate
first. You can nest parentheses to make sure expressions evaluate
in the order you want them to (the innermost parenthetic expression
is evaluated first). The following expression results in a value
of <TT>5</TT>, because the <TT>6
+ 4</TT> expression is evaluated first, and then the result
of that expression (<TT>10</TT>) is
divided by <TT>2</TT>:
<BLOCKQUOTE>
<PRE>
y = (6 + 4) / 2
</PRE>
</BLOCKQUOTE>
<P>
Parentheses also can be useful in cases where the precedence of
an expression isn't immediately clear-in other words, they can
make your code easier to read. Adding parentheses doesn't hurt,
so if they help you figure out how expressions are evaluated,
go ahead and use them.
<H2><A NAME="StringArithmetic"><FONT SIZE=5 COLOR=#FF0000>
String Arithmetic</FONT></A></H2>
<P>
One special expression in Java is the use of the addition operator
(<TT>+</TT>) to create and concatenate
strings. In most of the examples shown today and in earlier lessons,
you've seen lots of lines that looked something like this:
<BLOCKQUOTE>
<PRE>
System.out.println(name + &quot; is a &quot; + color + &quot; beetle&quot;);
</PRE>
</BLOCKQUOTE>
<P>
The output of that line (to the standard output) is a single string,
with the values of the variables (<TT>name</TT>
and <TT>color</TT>), inserted in the
appropriate spots in the string. So what's going on here?
<P>
The <TT>+</TT> operator, when used
with strings and other objects, creates a single string that contains
the concatenation of all its operands. If any of the operands
in string concatenation is not a string, it is automatically converted
to a string, making it easy to create these sorts of output lines.
<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Technical Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
An object or type can be converted to a string if you implement the method <TT>toString()</TT>. All objects have a default string representation, but most classes override <TT>toString()</TT> to provide a more meaningful printable representation.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
String concatenation makes lines such as the previous one especially
easy to construct. To create a string, just add all the parts
together-the descriptions plus the variables-and print it to the
standard output, to the screen, to an applet, or anywhere.
<P>
The <TT>+=</TT> operator, which you
learned about earlier, also works for strings. For example, take
the following expression:
<BLOCKQUOTE>
<PRE>
myName += &quot; Jr.&quot;;
</PRE>
</BLOCKQUOTE>
<P>
This expression is equivalent to this:
<BLOCKQUOTE>
<PRE>
myName = myName + &quot; Jr.&quot;;
</PRE>
</BLOCKQUOTE>
<P>
just as it would be for numbers. In this case, it changes the
value of <TT>myName</TT>, which might
be something like <TT>John Smith</TT>
to have a <TT>Jr.</TT> at the end
(<TT>John Smith Jr.</TT>).
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>
Summary</FONT></A></H2>
<P>
As you have learned in the last two lessons, a Java program is
made up primarily of classes and objects. Classes and objects,
in turn, are made up of methods and variables, and methods are
made up of statements and expressions. It is those last two things
that you've learned about today; the basic building blocks that
enable you to create classes and methods and build them up to
a full-fledged Java program.
<P>
Today, you have learned about variables, how to declare them and
assign values to them; literals for easily creating numbers, characters,
and strings; and operators for arithmetic, tests, and other simple
operations. With this basic syntax, you can move on tomorrow to
learning about working with objects and building simple, useful
Java programs.
<P>
To finish up this summary, Table 3.8 is a list of all the operators
you have learned about today so that you can refer back to them.
<BR>
<P>
<CENTER><B>Table 3.8. Operator summary.</B></CENTER>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=60%>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><B>Operator</B></CENTER></TD><TD WIDTH=156><B>Meaning</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>+</TT></CENTER>
</TD><TD WIDTH=156>Addition</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>-</TT></CENTER>
</TD><TD WIDTH=156>Subtraction</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>*</TT></CENTER>
</TD><TD WIDTH=156>Multiplication</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>/</TT></CENTER>
</TD><TD WIDTH=156>Division</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>%</TT></CENTER>
</TD><TD WIDTH=156>Modulus</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>&lt;</TT></CENTER>
</TD><TD WIDTH=156>Less than</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>&gt;</TT></CENTER>
</TD><TD WIDTH=156>Greater than</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>&lt;=</TT></CENTER>
</TD><TD WIDTH=156>Less than or equal to</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>&gt;=</TT></CENTER>
</TD><TD WIDTH=156>Greater than or equal to</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>==</TT></CENTER>
</TD><TD WIDTH=156>Equal</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><FONT FACE="Symbol">!=</FONT></CENTER>
</TD><TD WIDTH=156>Not equal</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>&amp;&amp;</TT></CENTER>
</TD><TD WIDTH=156>Logical <TT>AND</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>||</TT></CENTER>
</TD><TD WIDTH=156>Logical <TT>OR</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>!</TT></CENTER>
</TD><TD WIDTH=156>Logical <TT>NOT</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>&amp;</TT></CENTER>
</TD><TD WIDTH=156><TT>AND</TT></TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>|</TT></CENTER>
</TD><TD WIDTH=156><TT>OR</TT></TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>^</TT></CENTER>
</TD><TD WIDTH=156><TT>XOR</TT></TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>&lt;&lt;</TT></CENTER>
</TD><TD WIDTH=156>Left shift</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>&gt;&gt;</TT></CENTER>
</TD><TD WIDTH=156>Right shift</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>&gt;&gt;&gt;</TT></CENTER>
</TD><TD WIDTH=156>Zero fill right shift</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>~</TT></CENTER>
</TD><TD WIDTH=156>Complement</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>=</TT></CENTER>
</TD><TD WIDTH=156>Assignment</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>++</TT></CENTER>
</TD><TD WIDTH=156>Increment</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>----</TT></CENTER>
</TD><TD WIDTH=156>Decrement</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>+=</TT></CENTER>
</TD><TD WIDTH=156>Add and assign</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>-=</TT></CENTER>
</TD><TD WIDTH=156>Subtract and assign</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>*=</TT></CENTER>
</TD><TD WIDTH=156>Multiply and assign</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>/=</TT></CENTER>
</TD><TD WIDTH=156>Divide and assign</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>%=</TT></CENTER>
</TD><TD WIDTH=156>Modulus and assign</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>&amp;=</TT></CENTER>
</TD><TD WIDTH=156><TT>AND</TT> and assign
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>|=</TT></CENTER>
</TD><TD WIDTH=156><TT>OR</TT> and assign
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>&lt;&lt;=</TT></CENTER>
</TD><TD WIDTH=156>Left shift and assign</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>^=</TT></CENTER>
</TD><TD WIDTH=156><TT>XOR</TT> and assign
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>&gt;&gt;=</TT></CENTER>
</TD><TD WIDTH=156>Right shift and assign</TD></TR>
<TR VALIGN=TOP><TD WIDTH=145><CENTER><TT>&gt;&gt;&gt;=</TT></CENTER>
</TD><TD WIDTH=156>Zero fill right shift and assign</TD></TR>
</TABLE>
</CENTER>
<P>
<H2><A NAME="QampABR"><FONT SIZE=5 COLOR=#FF0000>
Q&amp;A<BR>
</FONT></A></H2>

<TABLE>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>Q:</B></CENTER></TD><TD><B>I didn't see any way to define constants.</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>A:</B></CENTER></TD><TD>You can't create local constants in Java; you can create only constant instance and class variables. You'll learn how to do this tomorrow.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>Q:</B></CENTER></TD><TD><B>What happens if you assign an integer value to a variable that is too large for that variable to hold?</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>A:</B></CENTER></TD><TD>Logically, you would think that the variable is just converted to the next larger type, but this isn't what happens. What does happen is called overflow.</FONT> This means that if a number 
becomes too big for its variable, that number wraps around to the smallest possible negative number for that type and starts counting upward toward zero again.
<P>
Because this can result in some very confusing (and wrong) results, make sure that you declare the right integer type for all your numbers. If there's a chance a number will overflow its type, use the next larger type instead.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>Q:</B></CENTER></TD><TD><B>How can you find out the type of a given variable?</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>A:</B></CENTER></TD><TD>If you're using any of the primitive types (<TT>int</TT>, <TT>float</TT>, <TT>boolean</TT>), and so on, you can't. If you care about the type, you can convert the value to some other type by 
using casting. (You'll learn about this tomorrow.)
<P>
If you're using class types, you can use the <TT>instanceof</TT> operator, which you'll learn more about tomorrow.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>Q:</B></CENTER></TD><TD><B>Why does Java have all these shorthand operators for arithmetic and assignment? It's really hard to read that way.</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>A:</B></CENTER></TD><TD>The syntax of Java is based on C++, and therefore on C. One of C's implicit goals is the capability of doing very powerful things with a minimum of typing. Because of this, shorthand operators, 
such as the wide array of assignments, are common.
<P>
There's no rule that says you have to use these operators in your own programs, however. If you find your code to be more readable using the long form, no one will come to your house and make you change it.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>Q:</B></CENTER></TD><TD><B>You covered simple math in this section using operators. I'm assuming that Java has ways of doing more complex math operations?</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>A:</B></CENTER></TD><TD>You assume correctly. A special class in the <TT>java.lang</TT> package, called <TT>java.lang.Math</TT>, has a number of methods for exponential, trigonometric, and other basic math operations. 
In fact, because you call these methods using the <TT>Math</TT> class itself, these are prime examples of class methods. You'll learn more about this tomorrow.
</TD></TR>
</TABLE>
</CENTER>
<HR>

<CENTER><P><A HREF="ch2.htm"><IMG SRC="http://docs.rinet.ru/J21/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="http://docs.rinet.ru/J21/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/J21/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch4.htm"><IMG SRC="http://docs.rinet.ru/J21/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
