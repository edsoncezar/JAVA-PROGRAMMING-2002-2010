<HTML>
<HEAD>
<TITLE>Day 7 -- More About Methods</TITLE>

<META>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">










<H1><FONT SIZE=6 COLOR=#FF0000>Day&nbsp;7</FONT></H1>
<H1><FONT SIZE=6 COLOR=#FF0000>More About Methods</FONT></H1>
<P>
<I><B>by Laura Lemay</B></I>
<HR>
<P>
<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>
<UL>
<LI><A HREF="#CreatingMethodswiththeSameNameDifferentArguments">
Creating Methods with the Same Name, Different Arguments</A>
<LI><A HREF="#ConstructorMethods">
Constructor Methods</A>
<UL>
<LI><A HREF="#BasicConstructors">
Basic Constructors</A>
<LI><A HREF="#CallingAnotherConstructor">
Calling Another Constructor</A>
<LI><A HREF="#OverloadingConstructors">
Overloading Constructors</A>
</UL>
<LI><A HREF="#OverridingMethods">
Overriding Methods</A>
<UL>
<LI><A HREF="#CreatingMethodsThatOverrideExistingMethods">
Creating Methods That Override Existing Methods</A>
<LI><A HREF="#CallingtheOriginalMethod">
Calling the Original Method</A>
<LI><A HREF="#OverridingConstructors">
Overriding Constructors</A>
</UL>
<LI><A HREF="#FinalizerMethods">
Finalizer Methods</A>
<LI><A HREF="#Summary">
Summary</A>
<LI><A HREF="#QampABR">
Q&amp;A<BR>
</A>
</UL>

<HR>
<P>
Methods are arguably the most important part of any object-oriented
language. Whereas classes and objects provide the framework, and
class and instance variables provide a way of holding that class's
or object's attributes, the methods actually provide an object's
behavior and define how that object interacts with other objects
in the system.
<P>
Yesterday you learned a little about defining methods. With what
you learned yesterday, you could create lots of Java programs,
but you'd be missing some of the features of methods that make
them really powerful and that make your objects and classes more
efficient and easier to understand. Today you'll learn about these
additional features, including the following:
<UL>
<LI>Overloading methods-that is, creating methods with multiple
signatures and definitions but with the same name
<LI>Creating constructor methods-methods that enable you to initialize
objects to set up their initial state when created
<LI>Overriding methods-creating a different definition for a method
that has been defined in a superclass
<LI>Using finalizer methods-a way for an object to clean up after
itself before it is removed from the system
</UL>
<H2><A NAME="CreatingMethodswiththeSameNameDifferentArguments"><FONT SIZE=5 COLOR=#FF0000>
Creating Methods with the Same Name, Different Arguments</FONT></A></H2>
<P>
Yesterday you learned how to create methods with a single name
and a single signature. Methods in Java can also be overloaded-that
is, you can create methods that have the same name, but different
signatures and different definitions. Method overloading allows
instances of your class to have a simpler interface to other objects
(no need for entirely different methods with different names that
do essentially the same thing) and to behave differently based
on the input to that method. For example, an overloaded <TT>draw()</TT>
method could be used to draw just about anything, whether it were
a circle or a point or an image. The same method name, with different
arguments, could be used for all cases.
<P>
When you call a method in an object, Java matches up the method
name and the number and type of arguments to choose which method
definition to execute.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>New Term</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Method overloading</FONT> is creating multiple methods with the same name but with different signatures and definitions. Java uses the number and type of arguments to choose which method definition to execute.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
To create an overloaded method, all you need to do is create several
different method definitions in your class, all with the same
name, but with different parameter lists (either in number or
type of arguments). Java allows method overloading as long as
each parameter list is unique for the same method name.
<P>
Note that Java differentiates overloaded methods based on the
number and type of parameters to that method, not on the method's
return type. That is, if you try to create two methods with the
same name and same parameter list, but different return types,
you'll get a compiler error. Also, the variable names you choose
for each parameter to the method are irrelevant-all that matters
is the number and the type.
<P>
Here's an example of creating an overloaded method. Listing 7.1
shows a simple class definition for a class called <TT>MyRect</TT>,
which defines a rectangular shape. The <TT>MyRect</TT>
class has four instance variables to define the upper-left and
lower-right corners of the rectangle: <TT>x1</TT>,
<TT>y1</TT>, <TT>x2</TT>,
and <TT>y2</TT>.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Why did I call it <TT>MyRect</TT> instead of just <TT>Rectangle</TT>? The <TT>java.awt</TT> package has a class called <TT>Rectangle</TT> that implements much of this same behavior. I called this class <TT>MyRect</TT> to prevent confusion between the two 
classes.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 7.1. The </B><TT><B>MyRect</B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
 1: class MyRect {
 2:     int x1 = 0;
 3:     int y1 = 0;
 4:     int x2 = 0;
 5:     int y2 = 0;
 6: }
</PRE>
</BLOCKQUOTE>
<HR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Don't try to compile this example yet.  Actually, it'll compile just fine, but it won't run because it doesn't (yet) have a <TT>main()</TT> method. When you're finished building this class definition, the final version can be compiled and run.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
When a new instance of the <TT>myRect</TT>
class is initially created, all its instance variables are initialized
to <TT>0</TT>. Let's define a <TT>buildRecpt()</TT>
method that takes four integer arguments and &quot;resizes&quot;
the rectangle to have the appropriate values for its corners,
returning the resulting rectangle object (note that because the
arguments have the same names as the instance variables, you have
to make sure to use <TT>this</TT>
to refer to them):
<BLOCKQUOTE>
<PRE>
MyRect buildRect(int x1, int y1, int x2, int y2) {
    this.x1 = x1;
    this.y1 = y1;
    this.x2 = x2;
    this.y2 = y2;
    return this;
}
</PRE>
</BLOCKQUOTE>
<P>
What if you want to define a rectangle's dimensions in a different
way-for example, by using <TT>Point</TT>
objects rather than individual coordinates? You can overload <TT>buildRect()</TT>
so that its parameter list takes two <TT>Point</TT>
objects (note that you'll also need to import the <TT>java.awt.Point</TT>
class at the top of your source file so Java can find it):
<BLOCKQUOTE>
<PRE>
MyRect buildRect(Point topLeft, Point bottomRight) {
    x1 = topLeft.x;
    y1 = topLeft.y;
    x2 = bottomRight.x;
    y2 = bottomRight.y;
    return this;
}
</PRE>
</BLOCKQUOTE>
<P>
Perhaps you want to define the rectangle using a top corner and
a width and height. You can do that, too. Just create a different
definition for <TT>buildRect()</TT>:
<BLOCKQUOTE>
<PRE>
MyRect buildRect(Point topLeft, int w, int h) {
    x1 = topLeft.x;
    y1 = topLeft.y;
    x2 = (x1 + w);
    y2 = (y1 + h);
    return this;
}
</PRE>
</BLOCKQUOTE>
<P>
To finish up this example, let's create a method-called <TT>printRect()</TT>-to
print out the rectangle's coordinates, and a <TT>main()</TT>
method to test it all (just to prove that this does indeed work).
Listing 7.2 shows the completed class definition with all its
methods: three <TT>buildRect()</TT>
methods, one <TT>printRect()</TT>,
and one <TT>main()</TT>.
<HR>
<BLOCKQUOTE>
<B>Listing 7.2. The complete </B><TT><B>MyRect</B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
 1:import java.awt.Point;
 2: 
 3:class MyRect {
 4:    int x1 = 0;
 5:    int y1 = 0;
 6:    int x2 = 0;
 7:    int y2 = 0;
 8: 
 9:    MyRect buildRect(int x1, int y1, int x2, int y2) {
10:        this.x1 = x1;
11:        this.y1 = y1;
12:        this.x2 = x2;
13:        this.y2 = y2;
14:        return this;
15:    }
16: 
17:    MyRect buildRect(Point topLeft, Point bottomRight) {
18:        x1 = topLeft.x;
19:        y1 = topLeft.y;
20:        x2 = bottomRight.x;
21:        y2 = bottomRight.y;
22:        return this;
23:    }
24: 
25:    MyRect buildRect(Point topLeft, int w, int h) {
26:        x1 = topLeft.x;
27:        y1 = topLeft.y;
28:        x2 = (x1 + w);
29:        y2 = (y1 + h);
30:        return this;
31:    }
32: 
33:    void printRect(){
34:        System.out.print(&quot;MyRect: &lt;&quot; + x1 + &quot;, &quot; + y1);
35:        System.out.println(&quot;, &quot; + x2 + &quot;, &quot; + y2 + &quot;&gt;&quot;);
36:    }
37: 
38:    public static void main(String args[]) {
39:        MyRect rect = new MyRect();
40: 
41:        System.out.println(&quot;Calling buildRect with coordinates 25,25 
<FONT FACE="ZapfDingbats">	</FONT>50,50:&quot;);
42:         rect.buildRect(25, 25, 50, 50);
43:         rect.printRect();
44:         System.out.println(&quot;----------&quot;);
45: 
46:         System.out.println(&quot;Calling buildRect w/points (10,10), (20,20):&quot;);
47:         rect.buildRect(new Point(10,10), new Point(20,20));
48:         rect.printRect();
49:         System.out.println(&quot;----------&quot;);
50: 
51:         System.out.print(&quot;Calling buildRect w/1 point (10,10),&quot;);
52:         System.out.println(&quot; width (50) and height (50):&quot;);
53: 
54:         rect.buildRect(new Point(10,10), 50, 50);
55:         rect.printRect();
56:        System.out.println(&quot;----------&quot;);
57:    }
</FONT>58: }
</PRE>
</BLOCKQUOTE>
<HR>
<P>
<IMG SRC="http://docs.rinet.ru/J21/output.gif" BORDER=0>
<BLOCKQUOTE>
<PRE>
Calling buildRect with coordinates 25,25 50,50:
MyRect: &lt;25, 25, 50, 50&gt;
----------
Calling buildRect w/points (10,10), (20,20):
MyRect: &lt;10, 10, 20, 20&gt;
----------
Calling buildRect w/1 point (10,10), width (50) and height (50):
MyRect: &lt;10, 10, 60, 60&gt;
----------
</PRE>
</BLOCKQUOTE>
<P>
As you can see from this example, all the <TT>buildRect()</TT>
methods work based on the arguments with which they are called.
You can define as many versions of a method as you need to in
your own classes to implement the behavior you need for that class.
<H2><A NAME="ConstructorMethods"><FONT SIZE=5 COLOR=#FF0000>
Constructor Methods</FONT></A></H2>
<P>
In addition to regular methods, you can also define constructor
methods in your class definition. Constructor methods are used
to initialize new objects when they're created. Unlike regular
methods, you can't call a constructor method by calling it directly;
instead, constructor methods are called by Java automatically
when you create a new object. As you learned on <A HREF="ch4.htm">Day 4</A>, &quot;Working
with Objects,&quot; when you use <TT>new</TT>,
Java does three things:
<UL>
<LI>Allocates memory for the new object
<LI>Initializes that object's instance variables, either to their
initial values or to a default (<TT>0</TT>
for numbers, <TT>null</TT> for objects,
<TT>false</TT> for booleans, <TT>'\0'</TT>
for characters)
<LI>Calls the class's constructor method (which may be one of
several methods)
</UL>
<P>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>New Term</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Constructor methods</FONT> are special methods that are called automatically by Java to initialize a new object.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
If a class doesn't have any special constructor methods defined,
you'll still end up with a new object, but you might have to set
its instance variables or call other methods that the object needs
to initialize itself. All the examples you've created up to this
point have behaved like this.
<P>
By defining constructor methods in your own classes, you can set
initial values of instance variables, call methods based on those
variables or on other objects, or calculate initial properties
of your object. You can also overload constructors, as you would
regular methods, to create an object that has specific properties
based on the arguments you give in the <TT>new
</TT>expression.
<H3><A NAME="BasicConstructors">
Basic Constructors</A></H3>
<P>
Constructors look a lot like regular methods, with two basic differences:
<UL>
<LI>Constructors always have the same name as the class.
<LI>Constructors don't have a return type.
</UL>
<P>
For example, Listing 7.3 shows a simple class called <TT>Person</TT>.
The constructor method for <TT>Person</TT>
takes two arguments: a string object representing a person's name
and an integer for the person's age.
<HR>
`
<BLOCKQUOTE>
<B>Listing 7.3. The </B><TT><B>Person</B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
 1: class Person {
 2:     String name;
 3:     int age;
 4: 
 5:    Person(String n, int a) {
 6:         name = n;
 7:         age = a;
 8:     }
 9: 
10:    void printPerson() {
11:        System.out.print(&quot;Hi, my name is &quot; + name);
12:        System.out.println(&quot;. I am &quot; + age + &quot; years old.&quot;);
13:    }
14: 
15:  public static void main (String args[]) {
16:     Person p;
17:     p = new Person(&quot;Laura&quot;, 20);
18:     p.printPerson();
19:     System.out.println(&quot;--------&quot;);
20:     p = new Person(&quot;Tommy&quot;, 3);
21:     p.printPerson();
22:     System.out.println(&quot;--------&quot;);
23:  }
24:}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
<IMG SRC="http://docs.rinet.ru/J21/output.gif" BORDER=0>
<BLOCKQUOTE>
<PRE>
Hi, my name is Laura. I am 20 years old.
--------
Hi, my name is Tommy. I am 3 years old.
--------
</PRE>
</BLOCKQUOTE>
<P>
The person class has three methods: The first is the constructor
method, defined in lines 5 to 8, which initializes the class's
two instance variables based on the arguments to <TT>new</TT>.
The <TT>Person</TT> class also includes
a method called <TT>printPerson()</TT>
so that the object can &quot;introduce&quot; itself, and a <TT>main()</TT>
method to test each of these things.
<H3><A NAME="CallingAnotherConstructor">
Calling Another Constructor</A></H3>
<P>
Some constructors you write may be supersets of other constructors
defined in your class; that is, they might have the same behavior
plus a little bit more. Rather than duplicating identical behavior
in multiple constructor methods in your class, it makes sense
to be able to just call that first constructor from inside the
body of the second constructor. Java provides a special syntax
for doing this. To call a constructor defined on the current class,
use the <TT>this</TT> keyword as if
it were a method name, with the arguments just after it, like
this:
<BLOCKQUOTE>
<PRE>
this(arg1, arg2, arg3...);
</PRE>
</BLOCKQUOTE>
<P>
The arguments to <TT>this()</TT> are,
of course, the arguments to the constructor.
<H3><A NAME="OverloadingConstructors">
Overloading Constructors</A></H3>
<P>
Like regular methods, constructors can also take varying numbers
and types of parameters, enabling you to create your object with
exactly the properties you want it to have, or for it to be able
to calculate properties from different kinds of input.
<P>
For example, the <TT>buildRect()</TT>
methods you defined in the <TT>MyRect</TT>
class earlier today would make excellent constructors because
they're initializing an object's instance variables to the appropriate
values. So, for example, instead of the original <TT>buildRect()</TT>
method you had defined (which took four parameters for the coordinates
of the corners), you could create a constructor instead. Listing
7.4 shows a new class, <TT>MyRect2</TT>,
that has all the same functionality of the original <TT>MyRect</TT>,
except with overloaded constructor methods instead of the overloaded
<TT>buildRect()</TT> method. The output
shown at the end is also the same output as for the previous <TT>MyRect</TT>
class; only the code to produce it has changed.
<HR>
<BLOCKQUOTE>
<B>Listing 7.4. The </B><TT><B>MyRect2</B></TT><B>
class (with constructors).<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
 1: import java.awt.Point;
 2: 
 3: class MyRect2 {
 4:     int x1 = 0;
 5:     int y1 = 0;
 6:     int x2 = 0;
 7:     int y2 = 0;
 8: 
 9:     MyRect2(int x1, int y1, int x2, int y2) {
10:         this.x1 = x1;
11:         this.y1 = y1;
12:         this.x2 = x2;
13:         this.y2 = y2;
14:     }
15: 
16:     MyRect2(Point topLeft, Point bottomRight) {
17:         x1 = topLeft.x;
18:         y1 = topLeft.y;
19:         x2 = bottomRight.x;
20:         y2 = bottomRight.y;
21:     }
22: 
23:     MyRect2(Point topLeft, int w, int h) {
24:         x1 = topLeft.x;
25:         y1 = topLeft.y;
26:         x2 = (x1 + w);
27:         y2 = (y1 + h);
28:     }
29: 
30:     void printRect() {
31:         System.out.print(&quot;MyRect: &lt;&quot; + x1 + &quot;, &quot; + y1);
32:         System.out.println(&quot;, &quot; + x2 + &quot;, &quot; + y2 + &quot;&gt;&quot;);
33:     }
34: 
35:     public static void main(String args[]) {
36:         MyRect2 rect;
37: 
38:         System.out.println(&quot;Calling MyRect2 with coordinates 25,25 50,50:&quot;);
39:         rect = new MyRect2(25, 25, 50,50);
40:         rect.printRect();
41:         System.out.println(&quot;----------&quot;);
42: 
43:         System.out.println(&quot;Calling MyRect2 w/points (10,10), (20,20):&quot;);
44:         rect= new MyRect2(new Point(10,10), new Point(20,20));
45:         rect.printRect();
46:         System.out.println(&quot;----------&quot;);
47: 
48:         System.out.print(&quot;Calling MyRect2 w/1 point (10,10)&quot;);
49:         System.out.println(&quot; width (50) and height (50):&quot;);
50:         rect = new MyRect2(new Point(10,10), 50, 50);
51:         rect.printRect();
52:         System.out.println(&quot;----------&quot;);
53: 
54:     }
55: }
</PRE>
</BLOCKQUOTE>
<HR>
<P>
<IMG SRC="http://docs.rinet.ru/J21/output.gif" BORDER=0>
<BLOCKQUOTE>
<PRE>
Calling MyRect2 with coordinates 25,25 50,50:
MyRect: &lt;25, 25, 50, 50&gt;
----------
Calling MyRect2 w/points (10,10), (20,20):
MyRect: &lt;10, 10, 20, 20&gt;
----------
Calling MyRect2 w/1 point (10,10), width (50) and height (50):
MyRect: &lt;10, 10, 60, 60&gt;
----------
</PRE>
</BLOCKQUOTE>
<H2><A NAME="OverridingMethods"><FONT SIZE=5 COLOR=#FF0000>
Overriding Methods</FONT></A></H2>
<P>
When you call an object's method, Java looks for that method definition
in the class of that object, and if it doesn't find a match with
the right signature, it passes the method call up the class hierarchy
until a definition is found. Method inheritance means that you
can use methods in subclasses without having to duplicate the
code.
<P>
However, there may be times when you want an object to respond
to the same methods but have different behavior when that method
is called. In this case, you can override that method. Overriding
a method involves defining a method in a subclass that has the
same signature as a method in a superclass. Then, when that method
is called, the method in the subclass is found and executed instead
of the one in the superclass.
<H3><A NAME="CreatingMethodsThatOverrideExistingMethods">
Creating Methods That Override Existing Methods</A></H3>
<P>
To override a method, all you have to do is create a method in
your subclass that has the same signature (name, return type,
and parameter list) as a method defined by one of your class's
superclasses. Because Java executes the first method definition
it finds that matches the signature, this effectively &quot;hides&quot;
the original method definition. Here's a simple example; Listing
7.5 shows a simple class with a method called <TT>printMe()</TT>,
which prints out the name of the class and the values of its instance
variables.
<HR>
<BLOCKQUOTE>
<B>Listing 7.5. The </B><TT><B>PrintClass</B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
 1: class PrintClass {
 2:     int x = 0;
 3:     int y = 1;
 4: 
 5:     void printMe() {
 6:         System.out.println(&quot;x is &quot; + x + &quot;, y is &quot; + y);
 7:         System.out.println(&quot;I am an instance of the class &quot; +
 8:         this.getClass().getName());
 9:     }
10: }
</PRE>
</BLOCKQUOTE>
<HR>
<P>
Listing 7.6 shows a class called <TT>PrintSubClass</TT>
that is a subclass of (<TT>extends</TT>)
<TT>PrintClass</TT>. The only difference
between <TT>PrintClass</TT> and <TT>PrintSubClass</TT>
is that the latter has a <TT>z</TT>
instance variable.
<HR>
<BLOCKQUOTE>
<B>Listing 7.6. The </B><TT><B>PrintSubClass</B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
1: class PrintSubClass extends PrintClass {
2:     int z = 3;
3: 
4:     public static void main(String args[]) {
5:         PrintSubClass obj = new PrintSubClass();
6:         obj.printMe();
7:     }
8: }
</PRE>
</BLOCKQUOTE>
<HR>
<P>
<IMG SRC="http://docs.rinet.ru/J21/output.gif" BORDER=0>
<BLOCKQUOTE>
<PRE>
x is 0, y is 1
I am an instance of the class PrintSubClass
</PRE>
</BLOCKQUOTE>
<P>
In the <TT>main()</TT> method of <TT>PrintSubClass</TT>,
you create a <TT>PrintSubClass</TT>
object and call the <TT>printMe()</TT>
method. Note that <TT>PrintSubClass</TT>
doesn't define this method, so Java looks for it in each of <TT>PrintSubClass</TT>'s
superclasses-and finds it, in this case, in <TT>PrintClass</TT>.
Unfortunately, because <TT>printMe()</TT>
is still defined in <TT>PrintClass</TT>,
it doesn't print the <TT>z</TT> instance
variable.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
There's an important feature of <TT>PrintClass</TT> I should point out: It doesn't have a <TT>main()</TT> method. It doesn't need one; it isn't an application. <TT>PrintClass</TT> is simply a utility class for the <TT>PrintSubClass</TT> class, which is an 
application and therefore has a <TT>main()</TT> method. Only the class that you're actually executing the Java interpreter on needs a <TT>main()</TT> method. 
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
Now, let's create a third class. <TT>PrintSubClass2</TT>
is nearly identical to <TT>PrintSubClass</TT>,
but you override the <TT>printMe()</TT>
method to include the <TT>z</TT> variable.
Listing 7.7 shows this class.
<HR>
<BLOCKQUOTE>
<B>Listing 7.7. The </B><TT><B>PrintSubClass2</B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
 1: class PrintSubClass2 extends PrintClass {
 2:     int z = 3;
 3: 
 4:     void printMe() {
 5:         System.out.println(&quot;x is &quot; + x + &quot;, y is &quot; + y +
 6:                &quot;, z is &quot; + z);
 7:         System.out.println(&quot;I am an instance of the class &quot; +
 8:                this.getClass().getName());
 9:     }
10: 
11:     public static void main(String args[]) {
12:         PrintSubClass2 obj = new PrintSubClass2();
13:         obj.printMe();
14:     }
15: }
</PRE>
</BLOCKQUOTE>
<HR>
<P>
Now when you instantiate this class and call the <TT>printMe()</TT>
method, the version of <TT>printMe()</TT>
you defined for this class is called instead of the one in the
superclass <TT>PrintClass</TT> (as
you can see in this output):
<P>
<IMG SRC="http://docs.rinet.ru/J21/output.gif" BORDER=0>
<BLOCKQUOTE>
<PRE>
x is 0, y is 1, z is 3
I am an instance of the class PrintSubClass2
</PRE>
</BLOCKQUOTE>
<H3><A NAME="CallingtheOriginalMethod">
Calling the Original Method</A></H3>
<P>
Usually, there are two reasons why you want to override a method
that a superclass has already implemented:
<UL>
<LI>To replace the definition of that original method completely
<LI>To augment the original method with additional behavior
</UL>
<P>
You've already learned about the first one; by overriding a method
and giving that method a new definition, you've hidden the original
method definition. But sometimes you may just want to add behavior
to the original definition rather than erase it altogether. This
is particularly useful where you end up duplicating behavior in
both the original method and the method that overrides it; by
being able to call the original method in the body of the overridden
method, you can add only what you need.
<P>
To call the original method from inside a method definition, use
the <TT>super</TT> keyword to pass
the method call up the hierarchy:
<BLOCKQUOTE>
<PRE>
void myMethod (String a, String b) {
    // do stuff here
    super.myMethod(a, b);
    // maybe do more stuff here
}
</PRE>
</BLOCKQUOTE>
<P>
The <TT>super</TT> keyword, somewhat
like the <TT>this</TT> keyword, is
a placeholder for this class's superclass. You can use it anywhere
you can use <TT>this</TT>, but to
refer to the superclass rather than to the current class.
<P>
For example, Listing 7.8 shows the two different <TT>printMe()</TT>
methods used in the previous example.
<HR>
<BLOCKQUOTE>
<B>Listing 7.8. The </B><TT><B>printMe()</B></TT><B>
methods.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
 1: // from PrintClass
 2: void printMe() {
 3:         System.out.println(&quot;x is &quot; + x + &quot;, y is &quot; + y);
 4:         System.out.println(&quot;I am an instance of the class&quot; +
 5:                this.getClass().getName());
 6:     }
 7: }
 8: 
 9: //from PrintSubClass2
10:     void printMe() {
11:         System.out.println(&quot;x is &quot; + x + &quot;, y is &quot; + y + &quot;, z is &quot; + z);
12:         System.out.println(&quot;I am an instance of the class &quot; +
13:                this.getClass().getName());
14:     }
</PRE>
</BLOCKQUOTE>
<HR>
<P>
Rather than duplicating most of the behavior of the superclass's
method in the subclass, you can rearrange the superclass's method
so that additional behavior can easily be added:
<BLOCKQUOTE>
<PRE>
// from PrintClass
void printMe() {
    System.out.println(&quot;I am an instance of the class&quot; +
                 this.getClass().getName());
    System.out.println(&quot;x is &quot; + x);
    System.out.println(&quot;y is &quot; + y);
}
</PRE>
</BLOCKQUOTE>
<P>
Then, in the subclass, when you override <TT>printMe()</TT>,
you can merely call the original method and then add the extra
stuff:
<BLOCKQUOTE>
<PRE>
// From PrintSubClass2
void printMe() {
    super.printMe();
    System.out.println(&quot;z is &quot; + z);
}
</PRE>
</BLOCKQUOTE>
<P>
Here's the output of calling <TT>printMe()</TT>
on an instance of the subclass:
<P>
<IMG SRC="http://docs.rinet.ru/J21/output.gif" BORDER=0>
<BLOCKQUOTE>
<PRE>
I am an instance of the class PrintSubClass2
X is 0
Y is 1
Z is 3
</PRE>
</BLOCKQUOTE>
<H3><A NAME="OverridingConstructors">
Overriding Constructors</A></H3>
<P>
Because constructors have the same name as the current class,
you cannot technically override a superclass's constructors. If
you want a constructor in a subclass with the same number and
type of arguments as in the superclass, you'll have to define
that constructor in your own class. 
<P>
However, when you create your constructors you will almost always
want to call your superclass's constructors to make sure that
the inherited parts of your object get initialized the way your
superclass intends them to be. By explicitly calling your superclasses
constructors in this way you can create constructors that effectively
override or overload your superclass's constructors.
<P>
To call a regular method in a superclass, you use the form <TT>super.methodname(arguments)</TT>.
Because with constructors you don't have a method name to call,
 you have to use a different form:
<BLOCKQUOTE>
<PRE>
super(arg1, arg2, ...);
</PRE>
</BLOCKQUOTE>
<P>
Note that Java has a specific rule for the use of <TT>super()</TT>:
It must be the very first thing in your constructor definition.
If you don't call <TT>super()</TT>
explicitly in your constructor, Java will do it for you-using
<TT>super()</TT> with no arguments.
<P>
Similar to using <TT>this(...)</TT>
in a constructor, <TT>super(...)</TT>
calls a constructor method for the immediate superclass with the
appropriate arguments (which may, in turn, call the constructor
of its superclass, and so on). Note that a constructor with that
signature has to exist in the superclass in order for the call
to <TT>super()</TT> to work. The Java
compiler will check this when you try to compile the source file.
<P>
Note that you don't have to call the constructor in your superclass
that has exactly the same signature as the constructor in your
class; you only have to call the constructor for the values you
need initialized. In fact, you can create a class that has constructors
with entirely different signatures from any of the superclass's
constructors.
<P>
Listing 7.9 shows a class called <TT>NamedPoint</TT>,
which extends the class <TT>Point</TT>
from Java's <TT>awt</TT> package.
The <TT>Point</TT> class has only
one constructor, which takes an <TT>x</TT>
and a <TT>y</TT> argument and returns
a <TT>Point</TT> object. <TT>NamedPoint</TT>
has an additional instance variable (a string for the name) and
defines a constructor to initialize <TT>x</TT>,
<TT>y</TT>, and the name.
<HR>
<BLOCKQUOTE>
<B>Listing 7.9. The </B><TT><B>NamedPoint</B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
1: import java.awt.Point;
2: class NamedPoint extends Point {
3:     String name;
4:
5:     NamedPoint(int x, int y, String name) {
6:        super(x,y);
7:        this.name = name;
8:     }
9:     public static void main (String arg[]) {
10:      NamedPoint np = new NamedPoint(5, 5, &quot;SmallPoint&quot;);
11:      System.out.println(&quot;x is &quot; + np.x);
12:      System.out.println(&quot;y is &quot; + np.y);
13:      System.out.println(&quot;Name is &quot; + np.name);
14:    }
15:}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
<IMG SRC="http://docs.rinet.ru/J21/output.gif" BORDER=0>
<BLOCKQUOTE>
<PRE>
x is 5
y is 5
name is SmallPoint
</PRE>
</BLOCKQUOTE>
<P>
The constructor defined here for <TT>NamedPoint</TT>
(lines 5 through 8) calls <TT>Point</TT>'s
constructor method to initialize <TT>Point</TT>'s
instance variables (<TT>x</TT> and
<TT>y</TT>). Although you can just
as easily initialize <TT>x</TT> and
<TT>y</TT> yourself, you may not know
what other things <TT>Point</TT> is
doing to initialize itself, so it's always a good idea to pass
constructors up the hierarchy to make sure everything is set up
correctly.
<H2><A NAME="FinalizerMethods"><FONT SIZE=5 COLOR=#FF0000>
Finalizer Methods</FONT></A></H2>
<P>
Finalizer methods are almost the opposite of constructor methods;
whereas a constructor method is used to initialize an object,
finalizer methods are called just before the object is garbage-collected
and its memory reclaimed.
<P>
The finalizer method is named simply <TT>finalize()</TT>.
The <TT>Object</TT> class defines
a default finalizer method, which does nothing. To create a finalizer
method for your own classes, override the <TT>finalize()</TT>
method using this signature:
<BLOCKQUOTE>
<PRE>
protected void finalize() throws Throwable {
    super.finalize();
}<BR>
</PRE>
</BLOCKQUOTE>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
The <TT>throws</TT> <TT>Throwable</TT> part of this method definition refers to the errors that might occur when this method is called. Errors in Java are called exceptions</FONT>; you'll learn more about them on <A HREF="ch17.htm">Day 17</A>, 
&quot;Exceptions.&quot; For now, all you need to do is include these keywords in the method definition.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
Inside the body of that <TT>finalize()</TT>
method, include any cleaning up you want to do for that object.
You can also call <TT>super.finalize()</TT>
to allow your class's superclasses to finalize your object, if
necessary (it's a good idea to do so just to make sure that everyone
gets a chance to deal with the object if they need to).
<P>
You can always call the <TT>finalize()</TT>
method yourself at any time; it's just a plain method like any
other. However, calling <TT>finalize()</TT>
does not trigger an object to be garbage-collected. Only removing
all references to an object will cause it to be marked for deleting.
<P>
Finalizer methods are best used for optimizing the removal of
an object-for example, by removing references to other objects,
by releasing external resources that have been acquired (for example,
external files), or for other behaviors that may make it easier
for that object to be removed. In most cases, you will not need
to use <TT>finalize()</TT> at all.
See <A HREF="ch21.htm">Day 21</A>, &quot;Under the Hood,&quot; for more about garbage
collection and <TT>finalize()</TT>.
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>
Summary</FONT></A></H2>
<P>
Today you have learned all kinds of techniques for using, reusing,
defining, and redefining methods. You have learned how to overload
a method name so that the same method can have different behaviors
based on the arguments with which it's called. You've learned
about constructor methods, which are used to initialize a new
object when it's created. You have learned about method inheritance
and how to override methods that have been defined in a class's
superclasses. Finally, you have learned about finalizer methods,
which can be used to clean up after an object just before that
object is garbage-collected and its memory reclaimed.
<P>
Congratulations on completing your first week of Teach
Yourself Java in 21 Days</FONT>! Starting next week, you'll apply
everything you've learned this week to writing Java applets and
to working with more advanced concepts in putting together Java
programs and working with the standard Java class libraries.
<H2><A NAME="QampABR"><FONT SIZE=5 COLOR=#FF0000>
Q&amp;A<BR>
</FONT></A></H2>

<TABLE>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>Q:</B></CENTER></TD><TD><B>I created two methods with the following signatures:</B>
<P>
<TT><B>int total(int arg1, int arg2, int arg3) {...}<BR>
float total(int arg1, int arg2, int arg3) {...}</B></TT>
<P>
<B>The Java compiler complains when I try to compile the class with these method definitions. But their signatures are different. What have I done wrong?</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>A:</B></CENTER></TD><TD>Method overloading in Java works only if the parameter lists are different-either in number or type of arguments. Return type is not relevant for method overloading. Think about it-if you had 
two methods with exactly the same parameter list, how would Java know which one to call?
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>Q:</B></CENTER></TD><TD><B>Can I overload overridden methods (that is, can I create methods that have the same name as an inherited method, but a different parameter list)?</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>A:</B></CENTER></TD><TD>Sure! As long as parameter lists vary, it doesn't matter whether you've defined a new method name or one that you've inherited from a superclass.
</TD></TR>
</TABLE>
</CENTER>
<HR>

<CENTER><P><A HREF="ch6.htm"><IMG SRC="http://docs.rinet.ru/J21/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="http://docs.rinet.ru/J21/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/J21/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch8.htm"><IMG SRC="http://docs.rinet.ru/J21/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
