<HTML>
<HEAD>
<TITLE>Day 8 -- Java Applet Basics</TITLE>

<META>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">










<H1><FONT SIZE=6 COLOR=#FF0000>Day&nbsp;8</FONT></H1>
<H1><FONT SIZE=6 COLOR=#FF0000>Java Applet Basics</FONT></H1>
<P>
<I><B>by Laura Lemay</B></I>
<HR>
<P>
<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>
<UL>
<LI><A HREF="#HowAppletsandApplicationsAreDifferent">
How Applets and Applications Are Different</A>
<LI><A HREF="#CreatingApplets">
Creating Applets</A>
<UL>
<LI><A HREF="#MajorAppletActivities">
Major Applet Activities</A>
<LI><A HREF="#ASimpleApplet">
A Simple Applet</A>
</UL>
<LI><A HREF="#IncludinganAppletonaWebPage">
Including an Applet on a Web Page</A>
<UL>
<LI><A HREF="#TheTTFONTSIZEFACECourierltAPPLETgtFONTTTFONTSIZETagFONT">
The <TT>&lt;APPLET&gt;</TT>
Tag</FONT></A>
<LI><A HREF="#TestingtheResult">
Testing the Result</A>
<LI><A HREF="#MakingJavaAppletsAvailabletotheWeb">
Making Java Applets Available to the Web</A>
</UL>
<LI><A HREF="#MoreAbouttheTTFONTSIZEFACECourierltAPPLETgtFONTTTFONTSIZETagFONT">
More About the <TT>&lt;APPLET&gt;</TT>
Tag</FONT></A>
<UL>
<LI><A HREF="#TTFONTSIZEFACECourierALIGNFONTTT">
<TT>ALIGN</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierHSPACEFONTTTFONTSIZEandFONTTTFONTSIZEFACECourierVSPACEFONTTT">
<TT>HSPACE</TT>
and </FONT><TT>VSPACE</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierCODEFONTTTFONTSIZEandFONTTTFONTSIZEFACECourierCODEBASEFONTTT">
<TT>CODE</TT>
and </FONT><TT>CODEBASE</TT>
</A>
</UL>
<LI><A HREF="#JavaArchives">
Java Archives</A>
<LI><A HREF="#PassingParameterstoApplets">
Passing Parameters to Applets</A>
<LI><A HREF="#Summary">
Summary</A>
<LI><A HREF="#QampABR">
Q&amp;A<BR>
</A>
</UL>

<HR>
<P>
Much of Java's current popularity has come about because of Java-enabled
World Wide Web browsers and their support for applets</FONT>-Java
programs that run on Web pages and can be used to create dynamic,
interactive Web sites. Applets, as noted at the beginning of this
book, are written in the Java language, and can be viewed in any
browser that supports Java, including Netscape's Navigator and
Microsoft's Internet Explorer. Learning how to create applets
is most likely the reason you bought this book, so let's waste
no more time.
<P>
Last week, you focused on learning about the Java language itself,
and most of the little programs you created were Java applications.
This week, now that you have the basics down, you'll move on to
creating and using applets, which includes a discussion of many
of the classes in the standard Java class library.
<P>
Today you'll start with the basics:
<UL>
<LI>A small review of differences between Java applets and applications
<LI>Getting started with applets: the basics of how an applet
works and how to create your own simple applets
<LI>Including an applet on a Web page by using the <TT>&lt;APPLET&gt;</TT>
tag, including the various features of that tag
<LI>Passing parameters to applets
</UL>
<H2><A NAME="HowAppletsandApplicationsAreDifferent"><FONT SIZE=5 COLOR=#FF0000>
How Applets and Applications Are Different</FONT></A></H2>
<P>
Although you explored the differences between Java applications
and Java applets in the early part of this book, let's review
them.
<P>
In short, Java applications are standalone Java programs that
can be run by using just the Java interpreter, for example, from
a command line. Most everything you've used up to this point in
the book has been a Java application, albeit a simple one.
<P>
Java applets, however, are run from inside a World Wide Web browser.
A reference to an applet is embedded in a Web page using a special
HTML tag. When a reader, using a Java-enabled browser, loads a
Web page with an applet in it, the browser downloads that applet
from a Web server and executes it on the local system (the one
the browser is running on). (The Java interpreter is built into
the browser and runs the compiled Java class file from there.)
<P>
Because Java applets run inside a Java browser, they have access
to the structure the browser provides: an existing window, an
event-handling and graphics context, and the surrounding user
interface. Java applications can also create this structure (allowing
you to create graphical applications), but they don't require
it (you'll learn how to create Java applications that use applet-like
graphics and user interface (UI) features on <A HREF="ch14.htm">Day 14</A>, &quot;Windows,
Networking, and Other Tidbits&quot;).
<P>
Note that a single Java program can be written to operate as both
a Java application and a Java applet. While you use different
procedures and rules to create applets and applications, none
of those procedures or rules conflict with each other. The features
specific to applets are ignored when the program runs as an application,
and vice versa. Keep this in mind as you design your own applets
and applications.
<P>
One final significant difference between Java applets and applications-probably
the biggest difference-is the set of restrictions placed on how
applets can operate in the name of security. Given the fact that
Java applets can be downloaded from any site on the World Wide
Web and run on a client's system, Java-enabled browsers and tools
limit what can be done to prevent a rogue applet from causing
system damage or security breaches. Without these restrictions
in place, Java applets could be written to contain viruses or
trojan horses (programs that seem friendly but do some sort of
damage to the system), or be used to compromise the security of
the system that runs them. The restrictions on applets include
the following:
<UL>
<LI>Applets can't read or write to the reader's file system, which
means they cannot delete files or test to see what programs you
have installed on the hard drive.
<LI>Applets can't communicate with any network server other than
the one that had originally stored the applet, to prevent the
applet from attacking another system from the reader's system.
<LI>Applets can't run any programs on the reader's system. For
UNIX systems, this includes forking a process.
<LI>Applets can't load programs native to the local platform,
including shared libraries such as DLLs.
</UL>
<P>
All these rules are true for Java applets running Netscape Navigator
or Microsoft Internet Explorer. Other Java-enabled browsers or
tools may allow you to configure the level of security you want-for
example, the <TT>appletviewer</TT>
tool in the JDK allows you to set an access control list for which
directories an applet can read or write. However, as an applet
developer, it's safe to assume that most of your audience is going
to be viewing your applets in a browser that implements the strictest
rules for what an applet can do. Java applications have none of
these restrictions.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
The security restrictions imposed on applets are sometimes called &quot;the sandbox&quot; (as in applets are only allowed to play in the sandbox and can go no further). Work is being done by Sun and by the Java community to find ways for applets to be able 
to break out of the sandbox, including digital signatures and encryption. On <A HREF="ch21.htm">Day 21</A>, &quot;Under the Hood,&quot; you'll learn more details on Java and applet security.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
In addition to the applet restrictions listed, Java itself includes
various forms of security and consistency checking in the Java
compiler and interpreter for all Java programs to prevent unorthodox
use of the language (you'll learn more about this on <A HREF="ch21.htm">Day 21</A>).
This combination of restrictions and security features makes it
more difficult for a rogue Java applet to do damage to the client's
system.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
These restrictions prevent all of the traditional ways of causing damage to a client's system, but it's impossible to be absolutely sure that a clever programmer cannot somehow work around these restrictions, violate privacy, use CPU resources, or just 
plain be annoying. Sun has asked the Net at large to try to break Java's security and to create an applet that can work around the restrictions imposed on it, and, in fact, several problems have been unearthed and fixed, usually relating to loading classes 
and to connecting to unauthorized sites. You'll learn about more issues in Java security on <A HREF="ch21.htm">Day 21</A>.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H2><A NAME="CreatingApplets"><FONT SIZE=5 COLOR=#FF0000>
Creating Applets</FONT></A></H2>
<P>
For the most part, all the Java programs you've created up to
this point have been Java applications-simple programs with a
single <TT>main()</TT> method that
create objects, set instance variables, and run methods. Today
and in the next few days you'll be creating applets exclusively,
so you will need a good grasp of how an applet works, the sorts
of features an applet has, and where to start when you first create
your own applets.
<P>
To create an applet, you create a subclass of the class <TT>Applet</TT>.
The <TT>Applet</TT> class, part of
the <TT>java.applet</TT> package,
provides much of the behavior your applet needs to work inside
a Java-enabled browser. Applets also take strong advantage of
Java's Abstract Windowing Toolkit (awt), which provides behavior
for creating graphical user interface (GUI)-based applets and
applications: drawing to the screen; creating windows, menu bars,
buttons, check boxes, and other UI elements; and managing user
input such as mouse clicks and keypresses. The awt classes are
part of the <TT>java.awt</TT> package.
<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>New Term</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Java's Abstract Windowing Toolkit (awt) provides classes and behavior for creating GUI-based applications in Java. Applets make use of many of the capabilities in the awt.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
Although your applet can have as many additional &quot;helper&quot;
classes as it needs, it's the main applet class that triggers
the execution of the applet. That initial applet class always
has a signature like this:
<BLOCKQUOTE>
<PRE>
public class myClass extends java.applet.Applet {
    ...
}
</PRE>
</BLOCKQUOTE>
<P>
Note the <TT>public</TT> keyword.
Java requires that your applet subclass be declared <TT>public</TT>.
Again, this is true only of your main applet class; any helper
classes you create do not necessarily need to be <TT>public</TT>.
<TT>public</TT>, <TT>private</TT>,
and other forms of access control are described on <A HREF="ch15.htm">Day 15</A>, &quot;Modifiers,
Access Control, and Class Design.&quot;
<P>
When a Java-enabled browser encounters your applet in a Web page,
it loads your initial applet class over the network, as well as
any other helper classes that first class uses, and runs the applet
using the browser's built-in bytecode interpreter. Unlike with
applications, where Java calls the <TT>main()</TT>
method directly on your initial class, when your applet is loaded,
Java creates an instance of the applet class, and a series of
special applet methods are called on that instance. Different
applets that use the same class use different instances, so each
one can behave differently from the other applets running in the
same browser.
<H3><A NAME="MajorAppletActivities">
Major Applet Activities</A></H3>
<P>
To create a basic Java application, your class has to have one
method, <TT>main()</TT>, with a specific
signature. Then, when your application runs, <TT>main()</TT>
is found and executed, and from <TT>main()</TT>
you can set up the behavior that your program needs to run. Applets
are similar but more complicated-and, in fact, applets don't need
a <TT>main()</TT> method at all. Applets
have many different activities that correspond to various major
events in the life cycle of the applet-for example, initialization,
painting, and mouse events. Each activity has a corresponding
method, so when an event occurs, the browser or other Java-enabled
tool calls those specific methods.
<P>
The default implementations of these activity methods do nothing;
to provide behavior for an event you must override the appropriate
method in your applet's subclass. You don't have to override all
of them, of course; different applet behavior requires different
methods to be overridden.
<P>
You'll learn about the various important methods to override as
the week progresses, but, for a general overview, here are five
of the most important methods in an applet's execution: initialization,
starting, stopping, destroying, and painting.
<H4>Initialization</H4>
<P>
Initialization occurs when the applet is first loaded (or reloaded),
similarly to the <TT>main()</TT> method
in applications. The initialization of an applet might include
reading and parsing any parameters to the applet, creating any
helper objects it needs, setting up an initial state, or loading
images or fonts. To provide behavior for the initialization of
your applet, override the <TT>init()</TT>
method in your applet class:
<BLOCKQUOTE>
<PRE>
public void init() {
    ...
}
</PRE>
</BLOCKQUOTE>
<H4>Starting</H4>
<P>
After an applet is initialized, it is started. Starting is different
from initialization because it can happen many different times
during an applet's lifetime, whereas initialization happens only
once. Starting can also occur if the applet was previously stopped.
For example, an applet is stopped if the reader follows a link
to a different page, and it is started again when the reader returns
to this page. To provide startup behavior for your applet, override
the <TT>start()</TT> method:
<BLOCKQUOTE>
<PRE>
public void start() {
    ...
}
</PRE>
</BLOCKQUOTE>
<P>
Functionality that you put in the <TT>start()</TT>
method might include creating and starting up a thread to control
the applet, sending the appropriate messages to helper objects,
or in some way telling the applet to begin running. You'll learn
more about starting applets on <A HREF="ch10.htm">Day 10</A>, &quot;Simple Animation
and Threads.&quot;
<H4>Stopping</H4>
<P>
Stopping and starting go hand in hand. Stopping occurs when the
reader leaves the page that contains a currently running applet,
or you can stop the applet yourself by calling <TT>stop()</TT>.
By default, when the reader leaves a page, any threads the applet
had started will continue running. You'll learn more about threads
on <A HREF="ch10.htm">Day 10</A>. By overriding <TT>stop()</TT>,
you can suspend execution of these threads and then restart them
if the applet is viewed again: 
<BLOCKQUOTE>
<PRE>
public void stop() {
    ...
}
</PRE>
</BLOCKQUOTE>
<H4>Destroying</H4>
<P>
Destroying sounds more violent than it is. Destroying enables
the applet to clean up after itself just before it is freed or
the browser exits-for example, to stop and remove any running
threads, close any open network connections, or release any other
running objects. Generally, you won't want to override <TT>destroy()</TT>
unless you have specific resources that need to be released-for
example, threads that the applet has created. To provide clean-up
behavior for your applet, override the <TT>destroy()</TT>
method:
<BLOCKQUOTE>
<PRE>
public void destroy() {
    ...
}<BR>
</PRE>
</BLOCKQUOTE>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Technical Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
How is <TT>destroy()</TT> different from <TT>finalize()</TT>, which was described on <A HREF="ch7.htm">Day 7</A>, &quot;More About Methods&quot;? First, <TT>destroy()</TT> applies only to applets. <TT>finalize()</TT> is a more general-purpose way for a 
single object of any type to clean up after itself.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H4>Painting</H4>
<P>
Painting is how an applet actually draws something on the screen,
be it text, a line, a colored background, or an image. Painting
can occur many thousands of times during an applet's life cycle
(for example, after the applet is initialized, if the browser
is placed behind another window on the screen and then brought
forward again, if the browser window is moved to a different position
on the screen, or perhaps repeatedly, in the case of animation).
You override the <TT>paint()</TT>
method if your applet needs to have an actual appearance on the
screen (that is, most of the time). The <TT>paint()</TT>
method looks like this:
<BLOCKQUOTE>
<PRE>
public void paint(Graphics g) {
    ...
}
</PRE>
</BLOCKQUOTE>
<P>
Note that unlike the other major methods in this section, <TT>paint()</TT>
takes an argument, an instance of the class <TT>Graphics</TT>.
This object is created and passed to <TT>paint</TT>
by the browser, so you don't have to worry about it. However,
you will have to make sure that the <TT>Graphics</TT>
class (part of the <TT>java.awt</TT>
package) gets imported into your applet code, usually through
an <TT>import</TT> statement at the
top of your Java file:
<BLOCKQUOTE>
<PRE>
import java.awt.Graphics;
</PRE>
</BLOCKQUOTE>
<H3><A NAME="ASimpleApplet">
A Simple Applet</A></H3>
<P>
Way back on <A HREF="ch2.htm">Day 2</A>, &quot;Object-Oriented Programming and Java,&quot;
you created a simple applet called <TT>HelloAgainApplet</TT>
(this was the one with the big red <TT>Hello
Again</TT>). There, you created and used that applet as
an example of creating a subclass. Let's go over the code for
that applet again, this time looking at it slightly differently
in light of the things you just learned about applets. Listing
8.1 shows the code for that applet.
<HR>
<BLOCKQUOTE>
<B>Listing 8.1. The Hello Again applet.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
 1:  import java.awt.Graphics;
 2:  import java.awt.Font;
 3:  import java.awt.Color;
 4:
 5:  public class HelloAgainApplet extends java.applet.Applet {
 6:
 7:     Font f = new Font(&quot;TimesRoman&quot;, Font.BOLD, 36);
 8:
 9:     public void paint(Graphics g) {
10:        g.setFont(f);
11:        g.setColor(Color.red);
12:        g.drawString(&quot;Hello again!&quot;, 5, 40);
13:     }
14: }
</PRE>
</BLOCKQUOTE>
<HR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Analysis</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
This applet implements the <TT>paint()</TT> method, one of the major methods described in the previous section (actually, it overrides the default implementation of <TT>paint()</TT>, which does nothing). Because the applet doesn't actually do much (all it 
does is print a couple words to the screen), and there's not really anything to initialize, you don't need a <TT>start()</TT>, <TT>stop()</TT>, <TT>init()</TT>, or <TT>destroy()</TT> method.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
The <TT>paint</TT> method is where
the real work of this applet (what little work goes on) really
occurs. The <TT>Graphics</TT> object
passed into the <TT>paint()</TT> method
holds the graphics state for the applet-that is, the current features
of the drawing surface, such as foreground and background colors
or clipping area. Lines 10 and 11 set up the font and color for
this graphics state (here, the font object held in the <TT>f</TT>
instance variable, and a <TT>Color</TT>
object representing the color red).
<P>
Line 12 draws the string <TT>&quot;Hello
Again!&quot;</TT> by using the current font and color at
the position <TT>5, 40</TT>. Note
that the <TT>0</TT> point for <TT>x,
y</TT> is at the top left of the applet's drawing surface,
with positive <TT>y</TT> moving downward,
so <TT>50</TT> is actually at the
bottom of the applet. Figure 8.1 shows how the applet's bounding
box and the string are drawn on the page.
<P>
<A HREF="http://docs.rinet.ru/J21/f8-1.gif"><B>Figure 8.1 : </B><I>Drawing the applet</I>.</A>
<P>
If you've been following along with all the examples up to this
point, you might notice that there appears to be something missing
in this class: a <TT>main()</TT> method.
As mentioned in the section on the differences between applets
and applications, applets don't need a <TT>main()</TT>
method. By implementing the right applet methods in your class
(<TT>init()</TT>, <TT>start()</TT>,
<TT>stop()</TT>, <TT>paint()</TT>,
and so on), your applet just seamlessly works without needing
an explicit jumping-off point.
<H2><A NAME="IncludinganAppletonaWebPage"><FONT SIZE=5 COLOR=#FF0000>
Including an Applet on a Web Page</FONT></A></H2>
<P>
After you create a class or classes that contain your applet and
compile them into class files as you would any other Java program,
you have to create a Web page that will hold that applet by using
the HTML language. There is a special HTML tag for including applets
in Web pages; Java-enabled browsers use the information contained
in that tag to locate the compiled class files and execute the
applet itself. In this section, you'll learn about how to put
Java applets in a Web page and how to serve those files to the
Web at large.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
The following section assumes that you have at least a passing understanding of writing HTML pages. If you need help in this area, you may find the book Teach Yourself Web Publishing with HTML in 14 Days</FONT> useful. It is also from Sams.net and also by 
Laura Lemay, the author of much of this book.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H3><A NAME="TheTTFONTSIZEFACECourierltAPPLETgtFONTTTFONTSIZETagFONT">
The <TT>&lt;APPLET&gt;</TT>
Tag</FONT></A></H3>
<P>
To include an applet on a Web page, use the <TT>&lt;APPLET&gt;</TT>
tag. <TT>&lt;APPLET&gt;</TT> is a
special extension to HTML for including applets in Web pages.
Listing 8.2 shows a very simple example of a Web page with an
applet included in it.
<HR>
<BLOCKQUOTE>
<B>Listing 8.2. A simple HTML page.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
 1:  &lt;HTML&gt;
 2:  &lt;HEAD&gt;
 3:  &lt;TITLE&gt;This page has an applet on it&lt;/TITLE&gt;
 4:  &lt;/HEAD&gt;
 5:  &lt;BODY&gt;
 6:  &lt;P&gt;My second Java applet says:
 7:  &lt;BR&gt;&lt;APPLET CODE=&quot;HelloAgainApplet.class&quot; WIDTH=200 HEIGHT=50&gt;
 8:  Hello Again!
 9:  &lt;/APPLET&gt;
10:  &lt;/BODY&gt;
11:  &lt;/HTML&gt;
</PRE>
</BLOCKQUOTE>
<HR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Analysis</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
There are three things to note about the <TT>&lt;APPLET&gt;</TT> tag in this page:
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<UL>
<LI>The <TT>CODE</TT> attribute indicates
the name of the class file that contains this applet, including
the <TT>.class</TT> extension. In
this case, the class file must be in the same directory as this
HTML file. To indicate applets are in a specific directory, use
<TT>CODEBASE</TT>, described later
today.
<LI><TT>WIDTH</TT> and <TT>HEIGHT</TT>
are required and are used to indicate the bounding box of the
applet-that is, how big a box to draw for the applet on the Web
page. Be sure you set <TT>WIDTH</TT>
and <TT>HEIGHT</TT> to be an appropriate
size for the applet; depending on the browser, if your applet
draws outside the boundaries of the space you've given it, you
may not be able to see or get to those parts of the applet outside
the bounding box.
<LI>The text between the <TT>&lt;APPLET&gt;</TT>
and <TT>&lt;/APPLET&gt;</TT> tags
is displayed by browsers that do not understand the <TT>&lt;APPLET&gt;</TT>
tag (which includes most browsers that are not Java aware). Because
your page may be viewed in many different kinds of browsers, it
is a very good idea to include some sort of alternate text or
HTML tags here so that readers of your page who don't have Java
will see something other than a blank line. For example, you might
show just an image or some other element. Here, you include a
simple statement that says <TT>Hello Again!</TT>.
</UL>
<P>
Note that the <TT>&lt;APPLET&gt;</TT>
tag, like the <TT>&lt;IMG&gt;</TT>
tag itself, is not a paragraph, so it should be enclosed inside
a more general text tag, such as <TT>&lt;P&gt;</TT>
or one of the heading tags (<TT>&lt;H1&gt;</TT>,
<TT>&lt;H2&gt;</TT>, and so on).
<H3><A NAME="TestingtheResult">
Testing the Result</A></H3>
<P>
Now with a class file and an HTML file that refers to your applet,
you should be able to load that HTML file into your Java-enabled
browser from your local disk (in Netscape, use Open File from
the File menu; in Internet Explorer, use Open from the File menu
and then choose Browse to find the right file on your disk). The
browser loads and parses your HTML file, and then loads and executes
your applet class.
<P>
If you don't have a Java-enabled browser, there are often tools
that come with your development environment to help you test applets.
In the JDK, the <TT>appletviewer</TT>
application will test your applets. You won't see the Web page
the applet is running on, but you can figure out if the applet
is indeed running the way you expect it to.
<P>
Figure 8.2 shows the Hello Again applet running in Netscape.
<P>
<A HREF="http://docs.rinet.ru/J21/f8-2.gif"><B>Figure 8.2 : </B><I>The Hello Again applet</I>.</A>
<H3><A NAME="MakingJavaAppletsAvailabletotheWeb">
Making Java Applets Available to the Web</A></H3>
<P>
After you have an applet and an HTML file, and you've verified
that everything is working correctly on your local system, the
last step is to make that applet available to the World Wide Web
at large so that anyone with a Java-enabled browser can view that
applet.
<P>
Java applets are served by a Web server the same way that HTML
files, images, and other media are. You don't need special server
software to make Java applets available to the Web; you don't
even need to configure your server to handle Java files. If you
have a Web server up and running, or space on a Web server available
to you, all you have to do is move your HTML and compiled class
files to that server, as you would any other file.
<P>
If you don't have a Web server, you have to rent space on one
or set one up yourself. (Web server setup and administration,
as well as other facets of Web publishing in general, are outside
the scope of this book.)
<H2><A NAME="MoreAbouttheTTFONTSIZEFACECourierltAPPLETgtFONTTTFONTSIZETagFONT"><FONT SIZE=5 COLOR=#FF0000>
More About the <TT>&lt;APPLET&gt;</TT>
Tag</FONT></FONT></A></H2>
<P>
In its simplest form, by using <TT>CODE</TT>,
<TT>WIDTH</TT>, and <TT>HEIGHT</TT>,
the <TT>&lt;APPLET&gt;</TT> tag merely
creates a space of the appropriate size and then loads and runs
the applet in that space. The <TT>&lt;APPLET&gt;</TT>
tag, however, does include several attributes that can help you
better integrate your applet into the overall design of your Web
page.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
The attributes available for the <TT>&lt;APPLET&gt;</TT> tag are almost identical to those for the HTML <TT>&lt;IMG&gt;</TT> tag.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H3><A NAME="TTFONTSIZEFACECourierALIGNFONTTT">
<TT>ALIGN</TT></A></H3>
<P>
The <TT>ALIGN</TT> attribute defines
how the applet will be aligned on the page. This attribute can
have one of nine values: <TT>LEFT</TT>,
<TT>RIGHT</TT>, <TT>TOP</TT>,
<TT>TEXTTOP</TT>, <TT>MIDDLE</TT>,
<TT>ABSMIDDLE</TT>, <TT>BASELINE</TT>,
<TT>BOTTOM</TT>, or <TT>ABSBOTTOM</TT>.
<P>
In the case of <TT>ALIGN=LEFT</TT>
and <TT>ALIGN=RIGHT</TT>, the applet
is placed at the left or right margin of the page, respectively,
and all text following that applet flows in the space to the right
or left of that applet. The text will continue to flow in that
space until the end of the applet, or you can use a line break
tag (<TT>&lt;BR&gt;</TT>) with the
<TT>CLEAR</TT> attribute to start
the left line of text below that applet. The <TT>CLEAR</TT>
attribute can have one of three values: <TT>CLEAR=LEFT</TT>
starts the text at the next clear left margin, <TT>CLEAR=RIGHT</TT>
does the same for the right margin, and <TT>CLEAR=ALL</TT>
starts the text at the next line where both margins are clear.
<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
In Netscape Navigator for Windows, the use of the <TT>ALIGN</TT> attribute prevents the applet from actually being loaded (this is a bug; it works fine in the UNIX and Macintosh versions of Netscape, as well as in Internet Explorer). If you're using 
alignment extensively in your Web pages with applets, you might want to enclose them in tables and align the tables themselves rather than use <TT>ALIGN</TT>. 
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
For example, here's a snippet of HTML code that aligns an applet
against the left margin, has some text flowing alongside it, and
then breaks at the end of the paragraph so that the next bit of
text starts below the applet:
<BLOCKQUOTE>
<PRE>
&lt;P&gt;&lt;APPLET CODE=&quot;HelloAgainApplet.class&quot; WIDTH=200 HEIGHT=50
ALIGN=LEFT&gt;Hello Again!&lt;/APPLET&gt;
To the left of this paragraph is an applet. It's a
simple, unassuming applet, in which a small string is
printed in red type, set in 36 point Times bold.
&lt;BR CLEAR=ALL&gt;
&lt;P&gt;In the next part of the page, we demonstrate how
under certain conditions, styrofoam peanuts can be
used as a healthy snack.
</PRE>
</BLOCKQUOTE>
<P>
Figure 8.3 shows how this applet and the text surrounding it might
appear in a Java-enabled browser (I've lightened the default page
background so you can see where the applet begins and the background
ends).
<P>
<A HREF="http://docs.rinet.ru/J21/f8-3.gif"><B>Figure 8.3 : </B><I>An applet aligned left</I>.</A>
<P>
For smaller applets, you might want to include your applet within
a single line of text. To do this, there are seven values for
<TT>ALIGN</TT> that determine how
the applet is vertically aligned with the text:
<UL>
<LI><TT>ALIGN=TEXTTOP</TT> aligns
the top of the applet with the top of the tallest text in the
line.
<LI><TT>ALIGN=TOP</TT> aligns the
applet with the topmost item in the line (which may be another
applet, or an image, or the top of the text).
<LI><TT>ALIGN=ABSMIDDLE</TT> aligns
the middle of the applet with the middle of the largest item in
the line.
<LI><TT>ALIGN=MIDDLE</TT> aligns the
middle of the applet with the middle of the baseline of the text.
<LI><TT>ALIGN=BASELINE</TT> aligns
the bottom of the applet with the baseline of the text. <TT>ALIGN=BASELINE</TT>
is the same as <TT>ALIGN=BOTTOM</TT>,
but <TT>ALIGN=BASELINE</TT> is a more
descriptive name.
<LI><TT>ALIGN=ABSBOTTOM</TT> aligns
the bottom of the applet with the lowest item in the line (which
may be the baseline of the text or another applet or image).
</UL>
<P>
Figure 8.4 shows the various alignment options, where the line
is an image and the arrow is a small applet.
<P>
<A HREF="http://docs.rinet.ru/J21/f8-4.gif"><B>Figure 8.4 : </B><I>Applet alignment options</I>.</A>
<H3><A NAME="TTFONTSIZEFACECourierHSPACEFONTTTFONTSIZEandFONTTTFONTSIZEFACECourierVSPACEFONTTT">
<TT>HSPACE</TT>
and </FONT><TT>VSPACE</TT>
</A></H3>
<P>
The <TT>HSPACE</TT> and <TT>VSPACE</TT>
attributes are used to set the amount of space, in pixels, between
an applet and its surrounding text. <TT>HSPACE</TT>
controls the horizontal space (the space to the left and right
of the applet). <TT>VSPACE</TT> controls
the vertical space (the space above and below). For example, here's
that sample snippet of HTML with vertical space of <TT>50</TT>
and horizontal space of <TT>10</TT>:
<BLOCKQUOTE>
<PRE>
&lt;P&gt;&lt;APPLET CODE=&quot;HelloAgainApplet.class&quot; WIDTH=300 HEIGHT=200
ALIGN=LEFT VSPACE=50 HSPACE=10&gt;Hello Again!&lt;/APPLET&gt;
To the left of this paragraph is an applet. Its a
simple, unassuming applet, in which a small string is
printed in red type, set in 36 point Times bold.
&lt;BR CLEAR=ALL&gt;
&lt;P&gt;In the next part of the page, we demonstrate how
under certain conditions, styrofoam peanuts can be
used as a healthy snack.
</PRE>
</BLOCKQUOTE>
<P>
The result in a typical Java browser might look like that in Figure
8.5.
<P>
<A HREF="http://docs.rinet.ru/J21/f8-5.gif"><B>Figure 8.5 : </B><I>Vertical and horizontal space</I>.</A>
<H3><A NAME="TTFONTSIZEFACECourierCODEFONTTTFONTSIZEandFONTTTFONTSIZEFACECourierCODEBASEFONTTT">
<TT>CODE</TT>
and </FONT><TT>CODEBASE</TT>
</A></H3>
<P>
The final two attributes to note in <TT>&lt;APPLET&gt;</TT>
are <TT>CODE</TT> and <TT>CODEBASE</TT>.
Unlike the other attributes, neither of these has anything to
do with the applet's appearance on the page; these two refer to
the actual location of the Java applet file so that the Java-enabled
browser can find it.
<P>
<TT>CODE</TT> is used to indicate
the name of the class file that holds the current applet. If <TT>CODE</TT>
is used alone in the <TT>&lt;APPLET&gt;</TT>
tag, the class file is searched for in the same directory as the
HTML file that references it. Note that class filenames used in
<TT>CODE</TT> have the <TT>.class</TT>
extension; this is different from in the Java command-line interpreter,
which doesn't use the extension.
<P>
If you want to store your class files in a different directory
on your Web server than that of your HTML files, you have to tell
the browser where to find those class files. To do this, you use
<TT>CODEBASE</TT>. <TT>CODE</TT>
contains only the name of the class file; <TT>CODEBASE</TT>
contains an alternate pathname (actually a URL or relative pathname)
where classes are contained. For example, if you store your class
files in a directory called <TT>classes</TT>,
which is in the same directory as your HTML files, <TT>CODEBASE</TT>
is the following:
<BLOCKQUOTE>
<PRE>
&lt;APPLET CODE=&quot;myclass.class&quot; CODEBASE=&quot;classes&quot;
    WIDTH=100 HEIGHT=100&gt;&lt;/APPLET&gt;
</PRE>
</BLOCKQUOTE>
<P>
If you store all your Java classes in some central location, you
can also use a URL in <TT>CODEBASE</TT>:
<BLOCKQUOTE>
<PRE>
&lt;APPLET CODE=&quot;myclass.class&quot; CODEBASE=&quot;http://myserver.com/javaclasses&quot;
    WIDTH=100 HEIGHT=100&gt;&lt;/APPLET&gt;
</PRE>
</BLOCKQUOTE>
<P>
What if your class files are actually stored on an entirely different
server altogether? You can use that URL in <TT>CODEBASE</TT>
as well:
<BLOCKQUOTE>
<PRE>
&lt;APPLET CODE=&quot;myclass.class&quot; CODEBASE=&quot;http://www.joesserver.com/javaclasses&quot;
    WIDTH=100 HEIGHT=100&gt;&lt;/APPLET&gt;
</PRE>
</BLOCKQUOTE>
<H2><A NAME="JavaArchives"><FONT SIZE=5 COLOR=#FF0000>
Java Archives</FONT></A></H2>
<P>
Normally, using the standard way of indicating Java applets in
Web pages, you use <TT>&lt;APPLET&gt;</TT>
to point to the primary applet class for your applet. Your Java-enabled
browser will then download and run that applet. That applet may
use other classes or media files, all of which are also downloaded
from the Web server as they are needed.
<P>
The problem with running applets in this way is that every single
file an applet needs-be it another helper class, image, audio
file, text file, or anything else-is a separate connection the
browser has to make to the server. Because there's a fair amount
of time needed just to make the connection itself, this can increase
the amount of time it takes to download your applet and everything
it needs.
<P>
The solution to this problem is a Java archive. A Java archive
is a collection of Java classes and other files contained in a
single file. By using a Java archive, the browser only makes one
connection to the server, rather than several. By reducing the
number of files the browser has to load from the server, your
applet can be downloaded and run that much faster. Java archives
may also be compressed, making the overall file size smaller and
therefore faster to download as well (although it may take some
time on the browser side for the files to be decompressed before
they can run).
<P>
Right now only Netscape supports the use of Java archives, and
only for Java class files (not for media). Within Netscape, you
can use the <TT>ARchIVE</TT> attribute
to indicate the name of the archive, like this:
<BLOCKQUOTE>
<PRE>
&lt;APPLET CODE=&quot;MyApplet.class&quot; ARchIVE=&quot;appletstuff.zip&quot; WIDTH=100 HEIGHT=100&gt;
...
&lt;/APPLET&gt;
</PRE>
</BLOCKQUOTE>
<P>
The archive itself is an uncompressed zip file. Standard zip files,
which use some form of compression to make the file smaller, are
not recognized. Also, helper classes may be contained inside or
outside the zip file; Netscape will look in either place. 
<P>
The <TT>ARchIVE</TT> attribute is
ignored by browsers or applet viewers that may run across this
Web page. If you do use Java archives for Netscape, it's a good
idea to store both the archive and the individual files on your
Web server so that all the Java-enabled browsers who visit your
Web page can view your applet.
<P>
In addition to Netscape's simple archive scheme, Java 1.1 will
include support for JAR files. JAR files are Java archives, with
or without compression, that can contain both classes and media.
In addition, JAR files are platform independent, and the tools
to create them will be available on any platform that supports
the JDK. JAR files and their individual components can also be
digitally signed, meaning that their creator can be reliably identified
(a form of security). For more information about JAR files, including
the specifications for the actual file format, see the JDK 1.1
Preview Page at <TT><A HREF="http://java.sun.com/products/JDK/1.1/designspecs/">http://java.sun.com/products/JDK/1.1/designspecs/</A>.</TT>
<H2><A NAME="PassingParameterstoApplets"><FONT SIZE=5 COLOR=#FF0000>
Passing Parameters to Applets</FONT></A></H2>
<P>
With Java applications, you pass parameters to your <TT>main()</TT>
routine by using arguments on the command line, or, for Macintoshes,
in the Java Runner's dialog box. You can then parse those arguments
inside the body of your class, and the application acts accordingly,
based on the arguments it is given.
<P>
Applets, however, don't have a command line. How do you pass in
different arguments to an applet? Applets can get different input
from the HTML file that contains the <TT>&lt;APPLET&gt;</TT>
tag through the use of applet parameters. To set up and handle
parameters in an applet, you need two things:
<UL>
<LI>A special parameter tag in the HTML file
<LI>Code in your applet to parse those parameters
</UL>
<P>
Applet parameters come in two parts: a parameter name, which is
simply a name you pick, and a value, which is the actual value
of that particular parameter. So, for example, you can indicate
the color of text in an applet by using a parameter with the name
<TT>color</TT> and the value <TT>red</TT>.
You can determine an animation's speed using a parameter with
the name <TT>speed</TT> and the value
<TT>5</TT>.
<P>
In the HTML file that contains the embedded applet, you indicate
each parameter using the <TT>&lt;PARAM&gt;</TT>
tag, which has two attributes for the name and the value, called
(surprisingly enough) <TT>NAME</TT>
and <TT>VALUE</TT>. The <TT>&lt;PARAM&gt;</TT>
tag goes inside the opening and closing <TT>&lt;APPLET&gt;</TT>
tags:
<BLOCKQUOTE>
<PRE>
&lt;APPLET CODE=&quot;MyApplet.class&quot; WIDTH=100 HEIGHT=100&gt;
&lt;PARAM NAME=font VALUE=&quot;TimesRoman&quot;&gt;
&lt;PARAM NAME=size VALUE=&quot;36&quot;&gt;
A Java applet appears here.&lt;/APPLET&gt;
</PRE>
</BLOCKQUOTE>
<P>
This particular example defines two parameters to the <TT>MyApplet</TT>
applet: one whose name is <TT>font</TT>
and whose value is <TT>TimesRoman</TT>,
and one whose name is <TT>size</TT>
and whose value is <TT>36</TT>.
<P>
Parameters are passed to your applet when it is loaded. In the
<TT>init()</TT> method for your applet,
you can then get hold of those parameters by using the <TT>getParameter()</TT>
method. <TT>getParameter()</TT> takes
one argument-a string representing the name of the parameter you're
looking for-and returns a string containing the corresponding
value of that parameter. (Like arguments in Java applications,
all the parameter values are strings.) To get the value of the
<TT>font</TT> parameter from the HTML
file, you might have a line such as this in your <TT>init()</TT>
method:
<BLOCKQUOTE>
<PRE>
String theFontName = getParameter(&quot;font&quot;);<BR>
</PRE>
</BLOCKQUOTE>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
The names of the parameters as specified in <TT>&lt;PARAM&gt;</TT> and the names of the parameters in <TT>getParameter()</TT> must match identically, including having the same case. In other words, <TT>&lt;PARAM NAME=&quot;name&quot;&gt;</TT> is different 
from <TT>&lt;PARAM NAME=&quot;Name&quot;&gt;</TT>. If your parameters are not being properly passed to your applet, make sure the parameter cases match.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
Note that if a parameter you expect has not been specified in
the HTML file, <TT>getParameter()</TT>
returns <TT>null</TT>. Most often,
you will want to test for a <TT>null</TT>
parameter in your Java code and supply a reasonable default:
<BLOCKQUOTE>
<PRE>
if (theFontName == null)
    theFontName = &quot;Courier&quot;
</PRE>
</BLOCKQUOTE>
<P>
Keep in mind that <TT>getParameter()</TT>
returns strings-if you want a parameter to be some other object
or type, you have to convert it yourself. To parse the <TT>size</TT>
parameter from that same HTML file and assign it to an integer
variable called <TT>theSize</TT>,
you might use the following lines:
<BLOCKQUOTE>
<PRE>
int theSize;
String s = getParameter(&quot;size&quot;);
if (s == null)
    theSize = 12;
else theSize = Integer.parseInt(s);
</PRE>
</BLOCKQUOTE>
<P>
Get it? Not yet? Let's create an example of an applet that uses
this technique. You'll modify the Hello Again applet so that it
says hello to a specific name, for example, <TT>&quot;Hello
Bill&quot;</TT> or <TT>&quot;Hello
Alice&quot;</TT>. The name is passed into the applet through
an HTML parameter.
<P>
Let's start by copying the original <TT>HelloAgainApplet</TT>
class and calling it <TT>MoreHelloAgain</TT>
(see Listing 8.3).
<HR>
<BLOCKQUOTE>
<B>Listing 8.3. The More Hello Again applet.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
 1:import java.awt.Graphics;
 2:import java.awt.Font;
 3:import java.awt.Color;
 4:
 5:public class MoreHelloApplet extends java.applet.Applet {
 6:
 7:    Font f = new Font(&quot;TimesRoman&quot;, Font.BOLD, 36);
 8:
 9:    public void paint(Graphics g) {
10:        g.setFont(f);
11:        g.setColor(Color.red);
12:        g.drawString(&quot;Hello Again!&quot;, 5, 40);
13:    }
14:}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
The first thing you need to add to this class is a place to hold
the name of the person you're saying hello to. Because you'll
need that name throughout the applet, let's add an instance variable
for the name, just after the variable for the font in line 7:
<BLOCKQUOTE>
<PRE>
String name;
</PRE>
</BLOCKQUOTE>
<P>
To set a value for the name, you have to get that parameter from
the HTML file. The best place to handle parameters to an applet
is inside an <TT>init()</TT> method.
The <TT>init()</TT> method is defined
similarly to <TT>paint()</TT> (<TT>public</TT>,
with no arguments, and a return type of <TT>void</TT>).
Make sure when you test for a parameter that you test for a value
of <TT>null</TT>. The default, in
this case, if a name isn't indicated, is to say hello to <TT>&quot;Laura&quot;</TT>.
Add the <TT>init()</TT> method in
between your instance variable definitions and the definition
for <TT>paint()</TT>, just before
line 9:
<BLOCKQUOTE>
<PRE>
public void init() {
    name = getParameter(&quot;name&quot;);
    if (name == null)
        name = &quot;Laura&quot;;
}
</PRE>
</BLOCKQUOTE>
<P>
Now that you have the name from the HTML parameters, you'll need
to modify it so that it's a complete string-that is, to tack the
word<TT> Hello</TT> with a space onto
the beginning, and an exclamation point onto the end. You could
do this in the <TT>paint()</TT> method
just before printing the string to the screen, but that would
mean creating a new string every time the applet is painted. It
would be much more efficient to do it just once, right after getting
the name itself, in the <TT>init()</TT>
method. Add this line to the <TT>init()</TT>
method just before the last brace:
<BLOCKQUOTE>
<PRE>
name = &quot;Hello &quot; + name + &quot;!&quot;;
</PRE>
</BLOCKQUOTE>
<P>
And now, all that's left is to modify the <TT>paint()</TT>
method to use the new name parameter. The original <TT>drawString()</TT>
method looked like this:
<BLOCKQUOTE>
<PRE>
g.drawString(&quot;Hello Again!&quot;, 5, 40);
</PRE>
</BLOCKQUOTE>
<P>
To draw the new string you have stored in the <TT>name</TT>
instance variable, all you need to do is substitute that variable
for the literal string:
<BLOCKQUOTE>
<PRE>
g.drawString(name, 5, 40);
</PRE>
</BLOCKQUOTE>
<P>
Listing 8.4 shows the final result of the <TT>MoreHelloApplet</TT>
class. Compile it so that you have a class file ready.
<HR>
<BLOCKQUOTE>
<B>Listing 8.4. The </B><TT><B>MoreHelloApplet</B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
 1:  import java.awt.Graphics;
 2:  import java.awt.Font;
 3:  import java.awt.Color;
 4:
 5:  public class MoreHelloApplet extends java.applet.Applet {
 6:
 7:     Font f = new Font(&quot;TimesRoman&quot;, Font.BOLD, 36);
 8:     String name;
 9:
10:     public void init() {
11:         name = getParameter(&quot;name&quot;);
12:         if (name == null)
13:             name = &quot;Laura&quot;;
14:
15:         name = &quot;Hello &quot; + name + &quot;!&quot;;
16:     }
17:
18:     public void paint(Graphics g) {
19:         g.setFont(f);
20:         g.setColor(Color.red);
21:         g.drawString(name, 5, 40);
22:     }
23: }
</PRE>
</BLOCKQUOTE>
<HR>
<P>
Now let's create the HTML file that contains this applet. Listing
8.5 shows a new Web page for the <TT>MoreHelloApplet</TT>
applet.
<HR>
<BLOCKQUOTE>
<B>Listing 8.5. The HTML file for the </B><TT><B>MoreHelloApplet</B></TT><B>
applet.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
 1:  &lt;HTML&gt;
 2:  &lt;HEAD&gt;
 3:  &lt;TITLE&gt;Hello!&lt;/TITLE&gt;
 4:  &lt;/HEAD&gt;
 5:  &lt;BODY&gt;
 6:  &lt;P&gt;
 7:  &lt;APPLET CODE=&quot;MoreHelloApplet.class&quot; WIDTH=200 HEIGHT=50&gt;
 8:  &lt;PARAM NAME=name VALUE=&quot;Bonzo&quot;&gt;
 9:  Hello to whoever you are!
10: &lt;/APPLET&gt;
11: &lt;/BODY&gt;
12: &lt;/HTML&gt;
</PRE>
</BLOCKQUOTE>
<HR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Analysis</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Note the <TT>&lt;APPLET&gt;</TT> tag, which points to the class file for the applet and has the appropriate width and height (<TT>200</TT> and <TT>50</TT>). Just below it (line 8) is the <TT>&lt;PARAM&gt;</TT> tag, which you use to pass in the value for 
the name. Here, the <TT>NAME</TT> parameter is simply name, and the <TT>VALUE</TT> is the string <TT>&quot;Bonzo&quot;</TT>.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
Loading up this HTML file in Netscape produces the result shown
in Figure 8.6.
<P>
<A HREF="http://docs.rinet.ru/J21/f8-6.gif"><B>Figure 8.6 : </B><I>The result of using </I><TT>MoreHelloApplet</TT><I>
the first time</I>.</A>
<P>
Let's try a second example. Remember that in the code for <TT>MoreHelloApplet</TT>,
if no name is specified in a parameter, the default is the name
<TT>Laura</TT>. Listing 8.6 creates
an HTML file with no parameter tag for <TT>name</TT>.
<HR>
<BLOCKQUOTE>
<B>Listing 8.6. Another HTML file for the </B><TT><B>MoreHelloApplet</B></TT><B>
applet.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
 1: &lt;HTML&gt;
 2: &lt;HEAD&gt;
 3: &lt;TITLE&gt;Hello!&lt;/TITLE&gt;
 4: &lt;/HEAD&gt;
 5: &lt;BODY&gt;
 6: &lt;P&gt;
 7: &lt;APPLET CODE=&quot;MoreHelloApplet.class&quot; WIDTH=200 HEIGHT=50&gt;
 8: Hello to whoever you are!
 9: &lt;/APPLET&gt;
10: &lt;/BODY&gt;
11: &lt;/HTML&gt;
</PRE>
</BLOCKQUOTE>
<HR>
<P>
Here, because no name was supplied, the applet uses the default,
and the result is what you might expect (see Figure 8.7).
<P>
<A HREF="http://docs.rinet.ru/J21/f8-7.gif"><B>Figure 8.7 : </B><I>The result of using </I><TT>MoreHelloApplet</TT><I>
the second time</I>.</A>
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>
Summary</FONT></A></H2>
<P>
Applets are probably the most common use of the Java language
today. Applets are more complicated than many Java applications
because they are executed and drawn inline within Web pages, but
they can access the graphics, user interface, and event structure
provided by the Web browser itself. Today you learned the basics
of creating applets, including the following things:
<UL>
<LI>All applets you develop using Java inherit from the <TT>Applet</TT>
class, which is part of the <TT>java.applet</TT>
package. The <TT>Applet</TT> class
provides basic behavior for how the applet will be integrated
with and react to the browser and various forms of input from
that browser and the person running it. By subclassing <TT>Applet</TT>,
you have access to all that behavior.
<LI>Applets have five main methods, which are used for the basic
activities an applet performs during its life cycle: <TT>init()</TT>,
<TT>start()</TT>, <TT>stop()</TT>,
<TT>destroy()</TT>, and <TT>paint()</TT>.
Although you don't need to override all these methods, these are
the most common methods you'll see repeated in many of the applets
you'll create in this book and in other sample programs.
<LI>To run a compiled applet class file, you include it in an
HTML Web page by using the <TT>&lt;APPLET&gt;</TT>
tag. When a Java-capable browser comes across <TT>&lt;APPLET&gt;</TT>,
it loads and runs the applet described in that tag. Note that
to publish Java applets on the World Wide Web alongside HTML files
you do not need special server software; any plain old Web server
will do just fine.
<LI>Unlike applications, applets do not have a command line on
which to pass arguments, so those arguments must be passed into
the applet through the HTML file that contains it. You indicate
parameters in an HTML file by using the <TT>&lt;PARAM&gt;</TT>
tag inside the opening and closing <TT>&lt;APPLET&gt;</TT>
tags. <TT>&lt;PARAM&gt;</TT> has two
attributes: <TT>NAME</TT> for the
name of the parameter, and <TT>VALUE</TT>
for its value. Inside the body of your applet (usually in <TT>init()</TT>),
you can then gain access to those parameters using the <TT>getParameter()</TT>
method.
</UL>
<H2><A NAME="QampABR"><FONT SIZE=5 COLOR=#FF0000>
Q&amp;A<BR>
</FONT></A></H2>

<TABLE>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>Q:</B></CENTER></TD><TD><B>In the first part of today's lesson, you say that applets are downloaded from random Web servers and run on the client's system. What's to stop an applet developer from creating an applet 
that deletes all the files on that system, or in some other way compromises the security of the system?</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>A:</B></CENTER></TD><TD>Recall that Java applets have several restrictions that make it difficult for all of the more obvious malicious behavior to take place. For example, because Java applets cannot read or write 
files on the client system, they cannot delete files or read system files that might contain private information. Because they cannot run programs on the client's system without your express permission, they cannot, for example,  pretend to be you and run 
system programs. Nor can they run so many programs that your system crashes.
<P>
In addition, Java's very architecture makes it difficult to circumvent these restrictions. The language itself, the Java compiler, and the Java interpreter all have checks to make sure that no one has tried to sneak in bogus code or play games with the 
system itself. You'll learn more about these checks at the end of this book.<P>
Of course, no system can claim to be 100 percent secure, and the fact that Java applets are run on your system should make you suspicious-see <A HREF="ch21.htm">Day 21</A> for more on security.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>Q:</B></CENTER></TD><TD><B>Wait a minute. If I can't read or write files or run programs on the system the applet is running on, doesn't that mean I basically can't do anything other than simple animation and flashy 
graphics? How can I save state in an applet? How can I create, say, a word processor or a spreadsheet as a Java applet?</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>A:</B></CENTER></TD><TD>For everyone who doesn't believe that Java is secure enough, there is someone who believes that Java's security restrictions are too severe for just these reasons. Yes, Java applets are limited 
because of the security restrictions. But, given the possibility for abuse, I believe that it's better to err on the side of being more conservative as far as security is concerned. Consider it a challenge.
<P>
Keep in mind, also, that Java applications have none of the restrictions that Java applets do, but because they are also compiled to bytecode, they are portable across platforms. It may be that the thing you want to create would make a much better 
application than an applet.<P>
If the thing you want to create has to be an applet, the only solution you have for saving state or implementing something like a word processor in a Java applet is to allow your readers to save the state back to your server.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>Q:</B></CENTER></TD><TD><B>Will applets be like this forever-confined to the sandbox and unable to do anything other than whizzy animation and simple toys?</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>A:</B></CENTER></TD><TD>Sun is working on future models for applet security that will allow applets to break out of the sandbox in some instances. One of the solutions being discussed is for the applet class file to 
be digitally signed, which is a way to identify without a doubt where an applet came from (for example, if an applet is signed by Sun, you can be sure it was Sun that actually created it, and therefore trust it more than some other random applet need). 
You'll learn more about applet security on <A HREF="ch21.htm">Day 21</A>.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>Q:</B></CENTER></TD><TD><B>I have an older version of the HotJava browser. I followed all the examples in this section, but HotJava cannot read my applets (it seems to ignore them). What's going on?</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>A:</B></CENTER></TD><TD>You most likely have an alpha version of HotJava. Recall that significant changes were made to the Java API and how Java applets are written between alpha and the 1.0 release. The result of 
these changes is that browsers that support alpha applets cannot read beta applets, and vice versa. The HTML tags are even different, so an older browser just skips over newer applets, and vice versa.
<P>
By the time you read this, there may be a new version of HotJava with support for 1.0. If not, you can use Netscape, Internet Explorer, or the JDK's <TT>appletviewer</TT> to view applets written to the beta specification.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>Q:</B></CENTER></TD><TD><B>I noticed in my documentation that the <TT><B>&lt;APPLET&gt;</B></TT> tag also has a <TT><B>NAME</B></TT> attribute. You didn't discuss it here.</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>A:</B></CENTER></TD><TD><TT>NAME</TT> is used when you have multiple applets on a page that need to communicate with each other. You'll learn about this on <A HREF="ch12.htm">Day 12</A>, &quot;Managing Simple Events 
and Interactivity.&quot;
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>Q:</B></CENTER></TD><TD><B>Lots of the applet examples I've seen on the Web have an <TT><B>init()</B></TT> method that does nothing to call a <TT><B>resize()</B></TT> method with the same values as in the 
<TT><B>&lt;APPLET&gt;</B></TT> tag's <TT><B>WIDTH </B></TT>and <TT><B>HEIGHT</B></TT>. I asked a friend about that and he said that you have to have <TT><B>resize()</B></TT> in there to make sure the applet's the right size. You don't mention 
<TT><B>resize().</B></TT></B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>A:</B></CENTER></TD><TD>The call to the <TT>resize()</TT> method in <TT>init()</TT> is left over from the early days of applets when you did need <TT>resize()</TT> to set the initial size of the applet. These days 
only the <TT>WIDTH</TT> and <TT>HEIGHT</TT> attributes do that; calling <TT>resize()</TT> isn't necessary.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>Q:</B></CENTER></TD><TD><B>I have an applet that takes parameters and an HTML file that passes it those parameters. But when my applet runs, all I get are <TT><B>null</B></TT> values. What's going on here?</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>A:</B></CENTER></TD><TD>Do the names of your parameters (in the <TT>NAME</TT> attribute) match exactly with the names you're testing for in <TT>getParameter()</TT>? They must be exact, including case, for the match to 
be made. Make sure also that your <TT>&lt;PARAM&gt;</TT> tags are inside the opening and closing <TT>&lt;APPLET&gt;</TT> tags, and that you haven't misspelled anything.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>Q:</B></CENTER></TD><TD><B>Since applets don't have a command line or a <TT><B>stdout</B></TT> stream, how can you do simple debugging output like <TT><B>System.out.println()</B></TT> in an applet?</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>A:</B></CENTER></TD><TD>You can. Depending on your browser or other Java-enabled environment, there may be a console window where debugging output (the result of <TT>System.out.println()</TT>) appears, or it may be 
saved to a log file (Netscape has a Java Console under the Options menu; Internet Explorer uses a Java log file that you must enable using Options<FONT SIZE=1> </FONT>|<FONT SIZE=1> </FONT>Advanced). You can continue to print messages using 
<TT>System.out.println()</TT> in your applets-just remember to remove them once you're done so they don't confuse your actual readers!
</TD></TR>
</TABLE>
</CENTER>
<HR>

<CENTER><P><A HREF="ch7.htm"><IMG SRC="http://docs.rinet.ru/J21/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="http://docs.rinet.ru/J21/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/J21/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch9.htm"><IMG SRC="http://docs.rinet.ru/J21/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
