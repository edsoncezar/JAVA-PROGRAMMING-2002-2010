<HTML>

<HEAD>
   <TITLE>Chapter 24 -- Integrated Development Environments</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">










<H1><FONT COLOR=#FF0000>Chapter 24</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Integrated Development Environments</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>


<UL>
<LI><A HREF="#TheExamplesUsedinThisChapter" >The Examples Used in This Chapter</A>
<LI><A HREF="#SymantecsCafeLite" >Symantec's Cafe Lite</A>
<LI><A HREF="#EDforWindowsTheJavaIDE" >ED for Windows, The Java IDE</A>
<LI><A HREF="#ObjectEngineeringWorkbench" >Object Engineering Workbench</A>
<LI><A HREF="#ComparisonofEnvironments" >Comparison of Environments</A>
<LI><A HREF="#OtherProductsUnderDevelopment" >Other Products Under Development</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
As you begin to do more development in Java, you may desire a
more robust environment than notepad and the DOS prompt. Your
environment should support your coding effort, making implementing
and debugging easier and more pleasant. The editor should enable
you to easily locate the portion of the code you want to work
on. It also can ease the implementation of a particular coding
style or project standards. Because you are recompiling often,
having the compiler just a click away will decrease the time and
frustration in your development process. This chapter investigates
a few of the many integrated development environments that are
being created for the Java language. These environments are applicable
to both applets and applications, so an example of each is given
in this chapter.
<H2><A NAME="TheExamplesUsedinThisChapter"><B><FONT SIZE=5 COLOR=#FF0000>The
Examples Used in This Chapter</FONT></B></A></H2>
<P>
Before getting into a specific development environment, it makes
sense to have a good idea of the program you are going to develop.
This section introduces the examples used in this chapter and
reviews how they would be created without an integrated development
environment.
<H3><B>Example One: myapplet</B></H3>
<P>
The applet developed in this chapter displays a single .gif file
and its caption. The code for the applet is shown in Listing 24.1
and 24.2. To create and run the applet under Windows 95 you would
do the following:
<OL>
<LI>Type Listing 24.1 into a file named myapplet.java using notepad
or another text editor.
<LI>Type Listing 24.2 into a file named myCanvas.java using notepad
or another text editor.
<LI>Compile myapplet.java in a DOS window using the command: <TT>javac
myapplet.java</TT>.
<LI>Compile myCanvas.java in a DOS window using the command: <TT>javac
myCanvas.java</TT>.
<LI>Locate and fix any compilation errors.
<LI>Type Listing 24.3 into a file named myapplet.html.
<LI>Use the appletviewer, Netscape, or another browser to open
myapplet.html.
</OL>
<P>
The integrated development environments presented in this chapter
make each of these steps faster and easier than working from the
command line.
<HR>
<BLOCKQUOTE>
<B>Listing 24.1. myapplet.java.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>import java.awt.*;<BR>
import java.io.*;<BR>
<BR>
public class myapplet extends java.applet.Applet {<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void init() {<BR>
</TT>&nbsp;<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Image
theImage;<BR>
<BR>
</TT>&nbsp;<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout(new
BorderLayout());<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;North&quot;,new
Label(&quot;SAMS Logo&quot;));<BR>
</TT>&nbsp;<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theImage
= getImage(getCodeBase(),&quot;samsnet.gif&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;Center&quot;,new
myCanvas(theImage));<BR>
</TT>&nbsp;<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resize(150,
150);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;move(100,100);
<BR>
</TT>&nbsp;<TT>&nbsp;&nbsp;&nbsp;}
<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<HR>
<BLOCKQUOTE>
<B>Listing 24.2. myCanvas.java.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>import java.awt.*;<BR>
<BR>
public class myCanvas extends java.awt.Canvas {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Image localImage;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public myCanvas(Image theImage) {<BR>
</TT>&nbsp;<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localImage = theImage;
<BR>
</TT>&nbsp;<TT>&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void paint(Graphics g) {<BR>
</TT>&nbsp;<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawImage(localImage,0,0,this);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<HR>
<BLOCKQUOTE>
<B>Listing 24.3. myapplet.html.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>&lt;HTML&gt;<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt; Applet Tester &lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
&lt;BODY&gt;<BR>
<BR>
&lt;APPLET CODE=&quot;myapplet.class&quot; WIDTH=200 HEIGHT=100&gt;&lt;/APPLET&gt;
<BR>
<BR>
&lt;/BODY&gt;<BR>
<BR>
&lt;/HTML&gt;</TT>
</BLOCKQUOTE>
<HR>
<H3><B>Example Two: myapplication</B></H3>
<P>
Because building an application is slightly different from building
an applet, it makes sense to give an example of each. Running
an application is, of course, very different from running an applet
because applications are run using the java interpreter rather
than a browser. The environments presented here provide a means
of running applications as well as applets.
<P>
The application developed in this chapter is very similar to the
applet created in the listings above. It displays a single GIF
with a caption. It provides a frame with an appropriate title
for the application to run in and a button to close the frame
and end the program. It borrows the <TT>myCanvas</TT>
class from the applet. The remaining code for the application
is shown in Listing 24.5. The steps to create an application follow:
<OL>
<LI>Type Listing 24.4 into a file named myapplication.java using
notepad or another text editor.
<LI>Copy myCanvas.class into the same directory if it is not there.
<LI>Compile myapplication.java in a DOS window using the command
<TT>javac</TT> <TT>myapplication.java</TT>.
<LI>Locate and fix any compilation errors.
<LI>From the command line, run the application using the java
command.
</OL>
<P>
The integrated development environments help shorten the time
to perform each of these steps and make reusing code between applications
more simple.
<HR>
<BLOCKQUOTE>
<B>Listing 24.4. myapplication.java.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>import java.awt.*;<BR>
<BR>
public class myapplication extends Frame {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public myapplication()<BR>
</TT>&nbsp;<TT>&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();<BR>
</TT>&nbsp;<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Image
theImage;<BR>
<BR>
</TT>&nbsp;<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout(new
BorderLayout());<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;North&quot;,new
Label(&quot;SAMS Logo&quot;));<BR>
</TT>&nbsp;<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theImage
= getToolkit().getImage(&quot;Samsnet.gif&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;Center&quot;,new
mycanvas(theImage));<BR>
</TT>&nbsp;<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;South&quot;,new
Button(&quot;OK&quot;));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resize(140,170);
<BR>
</TT>&nbsp;<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;move(400,200);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
</TT>&nbsp;<TT>&nbsp;&nbsp;&nbsp;public
boolean handleEvent(Event evt){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( evt.id ==
Event.WINDOW_DESTROY || evt.target instanceof Button ) {<BR>
</TT>&nbsp;<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
true;<BR>
</TT>&nbsp;<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
<BR>
</TT>&nbsp;<TT>&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static void main( String args[]
)<BR>
</TT>&nbsp;<TT>&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myapplication
localmyapplication = new myapplication();<BR>
</TT>&nbsp;<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localmyapplication.setTitle(&quot;Show
Logo&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localmyapplication.show();
<BR>
</TT>&nbsp;<TT>&nbsp;&nbsp;&nbsp;}
<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<P>
The remainder of this chapter shows how these two examples can
be developed in several different integrated environments. This
chapter does not provide exhaustive coverage of each environment-that
would require several books this size! This chapter should be
enough to get you in and moving around in each environment.
<H2><A NAME="SymantecsCafeLite"><B><FONT SIZE=5 COLOR=#FF0000>Symantec's
Cafe Lite</FONT></B></A></H2>
<P>
Symantec has the advantage of having the first integrated development
environment for Java. The full version is known as Cafe. A scaled-down,
evaluation version known as Cafe Lite is being included on CD
with several books on Java programming. More information on Symantec's
Caf&eacute; and Caf&eacute; Lite is available at <TT><A HREF="http://cafe.symantec.com/">http://cafe.symantec.com/</A></TT>.
<H3><B>Installing</B></H3>
<P>
There are a number of books and utilities that include Symantec's
Cafe Lite on CD-ROM. Installation from the CD-ROM is easy; just
run the Setup.exe utility that comes with the software. A standard
installation program prompts for name, company, and installation
directory. It then proceeds to install Cafe Lite in the specified
directory. The complete installation includes a subdirectory containing
Java sources and the JDK.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Caution</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
The only unexpected feature is that the installer set Cafe as the default application for files with the extension .java. You don't have to worry anymore about clicking on Java files and having them appear in notepad. Unfortunately, after installation, 
when a Java file is activated from Windows Explorer, Cafe starts but does not automatically load the file selected in Explorer.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><B>Creating the Applet</B></H3>
<P>
Integrated development environments group the code for each applet
into a project. The code resides in different files based on the
Java classes, but a project is created to store the names of all
files related to an applet. Each applet or application constructed
in Cafe will need to be part of such a project. The Cafe environment
makes it easy to create a new project and include Java files in
the project.
<H4><B>Starting a Project in Cafe Lite</B></H4>
<P>
After Cafe has been installed, click on the Cafe icon or select
Scw32.exe in the Cafe/bin directory to start Cafe. From the startup
screen you can create a new project with a new applet. Take the
following steps:
<OL>
<LI>Select Project|New from the main menu. A project wizard dialog
box appears, as shown in Figure 24.1, to step you through creating
the project.
<LI>Choose the directory for the project.
<LI>Give the project a name.
<LI>Place an X in the box labeled &quot;Use App Express to create
new application.&quot;
<LI>Click finish.
</OL>
<P>
<A HREF="http://docs.rinet.ru/JaTricks/f24-1.gif" ><B>Figure 24.1 :</B><I>The project wizard for Cafe Lite.</I></A>
<P>
The project has been created and you are now ready to create the
Java files for the applet. In fact, the applet wizard is waiting
for information about the file you are creating.
<H4><B>Entering and Editing Code in Cafe Lite</B></H4>
<P>
With the applet wizard running, your screen should appear as shown
in Figure 24.2. Be sure the application type is set to Java Applet,
and then click Next.
<P>
<A HREF="http://docs.rinet.ru/JaTricks/f24-2.gif" ><B>Figure 24.2 : </B><I>First Page of the Application Wizard for Cafe Lite.</I></A>
<P>
The next screen in the wizard deals with the directory for the
new file. The directory entry box in the wizard should default
to the directory for the project you just created. Verify the
default and click Next.
<P>
The following page gives you the opportunity to enter your company
information and the year the program is created. Change this information
to reflect the project you are working on.
<P>
The remainder of the screens affect features which are not editable
in the Cafe Lite version. In the full Cafe version it is possible
to select a name for the applet, the file where it is stored,
and the .html file which invokes it. The Lite version only creates
an applet named simple. For the moment, select Finish to complete
creating the applet. Once the applet is created you can change
the name of the class and the file.
<P>
You can now Select Project|Build to build the new project and
then Project|Execute Program to run the project. The applet viewer
runs, displaying the default applet. This default applet displays
the text &quot;simple applet&quot; to the user.
<P>
You now need to modify the default applet to reflect the applet
in Listing 24.1. You also need to create another file to hold
the code in Listing 24.2. From the main menu, select File|Open
and open Simple.java. Select New! from the menu on the edit window.
A new file is created with the same code as Simple.java.
<P>
Use the File|Save As option to save one file as myapplet.java
and the other as myCanvas.java. In each case, be sure that the
box labeled &quot;Add to project&quot; is marked. Your project
now contains three Java files. Select the Project tab to see the
files contained in your project. The Simple.java file is not needed
for your project, and can be removed by clicking on it with the
right mouse button and selecting Delete from the menu which appears.
<P>
As an alternative, adding and deleting files from a project may
be done from the window which is displayed from the Project|Edit
menu selection. 
<P>
Return to the editing tab and modify the code in each file to
reflect Listings 24.1 and 24.2. Notice that the editor changes
the color to reflect the syntax of the listing, resulting in code
that is easier to read. When all of the code has been entered,
you are ready to compile the project.
<H4><B>Compiling in Cafe Lite</B></H4>
<P>
To compile the project on the main menu, select Project|Rebuild
All. If you select Project|Build, Cafe recommends that you rebuild
all the files and then prompts you to do so.
<P>
If an error occurs, it appears in the output window. Double-clicking
the error selects the line of code that is suspected of causing
the error. Figure 24.3 illustrates an error condition. Double-clicking
on an error in the output window moves the focus to the line in
the file where the error occurs. You can then edit that line and
recompile. Once the applet has been correctly compiled it is ready
to run.
<P>
<A HREF="http://docs.rinet.ru/JaTricks/f24-3.gif" ><B>Figure 24.3 : </B><I>Compilation Errors in Cafe Lite.</I></A>
<H4><B>Running in Cafe Lite</B></H4>
<P>
You still need an HTML file to run the applet. Cafe uses Simple.html
as the file to pass to the appletviewer when the appletviewer
is started. Use File|Open to open the file Simple.html, and edit
it so it looks like Listing 24.3. These changes will cause Simple.html
to reference the class <TT>myapplet</TT>.
<P>
Select Project|Execute Program to run the applet. The screen should
appear as shown in Figure 24.4.
<P>
<A HREF="http://docs.rinet.ru/JaTricks/f24-4.gif" ><B>Figure 24.4 : </B><I>Running the applet in Cafe Lite.</I></A>
<H4><B>Debugging in Cafe Lite</B></H4>
<P>
Suppose the program runs but does not behave as expected. Cafe
provides access to the JDB to enable runtime debugging of the
applet. To run the JDB in a DOS box, select Debug|Start/Restart
Debugging from the main menu. Once you have the applet running
correctly, you can begin work on the application.
<H3><B>Creating an Application in Cafe Lite</B></H3>
<P>
You need to create a new project to hold your application. Creating
a project for an application is almost exactly the same as creating
a project for an applet.
<H4><B>Setting up the Application in Cafe Lite</B></H4>
<P>
When you reach the application wizard in Cafe Lite, select the
Java Console option instead of the Java Applet. This creates your
new file as a stand-alone application rather than an applet. The
wizard creates a new version of Simple.java. It also verifies
that you want to create this project in the same directory as
an existing project. This does not mean that you are overwriting
the existing project.
<P>
Unfortunately, since Cafe Lite does not support changing the runtime
argument, you need to create the application with the name Simple.
Open the file Simple.java and modify it to reflect the code in
Listing 24.4. Replace <TT>myapplication</TT>
with <TT>Simple</TT> throughout the
code.
<H4><B>Compiling and Running the Application in Cafe Lite</B>
</H4>
<P>
Because the application makes use of the myCanvas class, you need
to include the code for this class as part of the new project.
From the main menu, select Project | Edit, and display the Dialog
Box for editing the project. Add the file myCanvas.java to the
project. That's all there is to it. Including existing code can
be a simple process!<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD WIDTH=563><B>Tip</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
Be sure to check the output tab after each compile, to verify that your code compiled successfully.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Use Project|Rebuild All to compile the new code. Check the output
tab to verify that the code compiled successfully, then use Project|Execute
Program to execute your new program.
<P>
Not being able to change the argument to the Execute Program option
can be a bit frustrating, but a little creative directory structuring
can prevent this from being a real problem. You did not really
want to put all of your projects in the same directory anyway;
it would be a management nightmare. However, this feature and
the class hierarchy browser are available in the full version
of Cafe, which can be purchased from Symantec. There is also a
class editor in the full version of Cafe.
<P>
For more information concerning Cafe and Cafe Lite, visit Symantec's
Web Site at <TT><A HREF="http://cafe.symantec.com/">http://cafe.symantec.com/</A>.</TT>
<H2><A NAME="EDforWindowsTheJavaIDE"><B><FONT SIZE=5 COLOR=#FF0000>ED
for Windows, The Java IDE</FONT></B></A></H2>
<P>
ED for Windows is an advanced editor that supplies development
assistance for 30 different languages, including Java. The editor
integrates with compilers for each language, in this case javac,
to provide assistance in removing compilation errors. It also
enables you to trigger execution of your code from within the
editor.
<H3><B>Installation and Setup of ED for Windows</B></H3>
<P>
A 30-day evaluation copy of ED for Windows can be downloaded from
<TT><A HREF="http://www.ozemail.com.au/~saig/ed_java.html">http://www.ozemail.com.au/~saig/ed_java.html</A></TT>.
This document also contains price and ordering information for
ED. The download is a single ZIP file which must be expanded.
It includes an installation program, install.exe. Running the
installation program enables you to specify the directory for
ED installation and then neatly installs all of the needed files.
The installation procedure creates a Windows group with an icon
to start ED. Double-click the icon to start up the ED environment
and get the screen shown in Figure 24.5.
<P>
<A HREF="http://docs.rinet.ru/JaTricks/f24-5.gif" ><B>Figure 24.5 : </B><I>The startup screen of ED for Windows.</I></A>
<P>
ED can be set up to provide a class hierarchy browser for the
Java classes. Unfortunately, this process is a little more involved
than the initial installation of the editor. Read the ED Help
screen on Hierarchical Class and Method Browser for more complete
instructions on how to set up the class hierarchy browser.
<P>
The class browser is very handy when you're working in ED and
worth taking the time to configure. However, the setup is currently
a three-step process that requires significant user interaction.
<OL>
<LI>On the main menu, select Tools|Make Function Tags to bring
up the dialog box. Select Java as the language, the source files
as *.java, and then make tags for one of the directories containing
Java source files. Repeat this step for each of the other directories
containing Java source files. 
<LI>Select Options|Paths &amp; API Help|Tag Paths, and pull up
a dialog box where you can specify which files will be used to
build the hierarchy tree. You should add each of the files you
just created to the specification list and remove any default
files which are not applicable to your directory setup. Place
an X in the box before each file that you want included in the
hierarchy browser. 
<LI>Finally, on the main menu, select GoTo|Source Browser, and
a new window containing the hierarchy of objects and methods is
displayed. A view of ED with the hierarchical source browser open
is shown in Figure 24.6. This process seems needlessly complex-hopefully
it will be shortened in the future.
</OL>
<P>
<A HREF="http://docs.rinet.ru/JaTricks/f24-6.gif" ><B>Figure 24.6 : </B><I>ED for Windows screen with Class Hierarchy Browser.</I></A>
<H3><B>Creating an Applet in ED for Windows</B></H3>
<P>
Just as the Cafe environment made it easy to create the applet
Simple.java, ED makes it easy to create a HelloWorld applet. The
code for the applet is included as a skeleton in the environment.
To make use of this, open a new file using the File|New menu option,
and name the file HelloWorld.java with the File|Save As menu option.
Select Macro|Skeletons from the main menu. The dialog box containing
a list of available skeletons is displayed. Scroll down in the
dialog box until you can select the Hello World (applet) under
the heading Programs. Once you have selected this option, click
the Insert button. The code for the Hello World applet appears
in your editing window. You can skip to the Compile and Run section
to run the Hello World applet or you can create the example applet
from Listing 24.1.
<P>
Other skeletons, more useful for developing new applications,
are also included with ED. You can create your own skeletons for
inserting frequently used code. You can modify existing skeletons
to conform to coding standards and conventions at your site. The
use of code skeletons is a handy time-saver that decreases syntax
errors and makes code creation less painful.
<H4><B>Starting a New File in ED for Windows</B></H4>
<P>
Before creating an applet in ED, you will probably want to change
the default directory. You should create a separate directory
for each project that you write under ED. To change the default
directory, use the main menu option File|Change Directory. Set
the new directory to the directory where you want to store the
applet.
<P>
Once you have the default directory established, start a new applet
by selecting File|New from the main menu. Use File|Save As to
save the applet with the name myapplet.java. Be sure to change
the file extension. ED defaults the file extension to .JAVA, which
does not compile correctly. Case sensitivity can have its drawbacks.
<H4><B>Entering and Editing Code in ED for Windows</B></H4>
<P>
You can use both the skeletons and the class hierarchy browser
to assist you as you enter the code for myapplet. If you have
not already done so, choose Macro|Skeletons to bring up the Skeletons
dialog box. This box may also be opened by selecting the tenth
button from the left on the main toolbar. The ED screen with the
Skeletons dialog box is shown in Figure 24.7.
<P>
<A HREF="http://docs.rinet.ru/JaTricks/f24-7.gif" ><B>Figure 24.7 : </B><I>ED for Windows screen with Skeleton Dialog.</I></A>
<P>
To begin editing code, double-click Comments Header in the dialog
box and a comment is inserted at the top of the active window.
Fill in the appropriate file information, then add the import
lines.
<P>
In the dialog box, select class under the Constructs heading and
press insert to get the following code fragment:
<BLOCKQUOTE>
<TT>public class extends</TT>
</BLOCKQUOTE>
<P>
The cursor sits between the words &quot;class&quot; and &quot;extends&quot;.
Fill in <TT>myapplet</TT> before <TT>extends</TT>
and <TT>Applet {</TT> after <TT>extends</TT>.
<P>
Now open the Java class hierarchy browser by selecting Goto |
Source browser. Look at the methods available for the Applet class.
Double-click init and a new window is displayed showing the <TT>init()</TT>
method as defined in the Applet class. You can cut and paste this
method into your new code rather than typing.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Tip</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
When the Java class hierarchy browser first displays, all of the classes are open. To make it easier to look through the listing, click the box before Object to close all the classes. Click it again and the classes are displayed, but not their subclasses. 
Click the box in front of each class to see its subclasses.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Within the <TT>init()</TT> method,
declare the local variable. On the class hierarchy browser find
<TT>setLayout</TT>. Click the insert
button and the method name is inserted into your code. Inserting
names from the class hierarchy browser can be handy for preventing
typos, especially case sensitivity problems. Using the class hierarchy
browser to find the appropriate method names, continue adding
the remaining code for this file.
<P>
Open another file and save it as myCanvas.java. Repeat the procedure
above to create the myCanvas class with appropriate comments and
methods. Figure 24.8 shows the complete myapplet.java file as
developed in ED for Windows.
<P>
<A HREF="http://docs.rinet.ru/JaTricks/f24-8.gif" ><B>Figure 24.8 : </B><I>The ED for Windows screen showing myapplet.java.</I></A>
<H4><B>Compiling the Applet in ED for Windows</B></H4>
<P>
Because myapplet.class is dependent upon myCanvas.class, you need
to compile myCanvas first. Therefore, make the mycanvas window
the active window. Click the leftmost button on the Java toolbar
to run the javac compiler against this code. Unless you modify
the default options, ED saves the most recent changes to the file
before compiling.
<P>
Compilation errors are displayed in the standard outbox. This
is a new window which opens at the bottom of your screen. Double-clicking
on an error causes the portion of the code where the error occurs
to be highlighted. You can edit that line and then recompile.
Be careful in compiling-make sure that the window containing the
code is the active window when you press the compile button.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Caution</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
If the window containing the source code is not the active window when you select the button to run the javac compiler, unexpected results occur. If a dialog box is active, you don't get any response. If the output window is active, you get an error 
message from the Java compiler indicating that it is being passed an invalid file.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
When you have successfully compiled myCanvas.java, switch the
active window to myapplet.java and compile it. Obviously, in larger
projects it could become difficult to track which portions of
the source have been compiled and which have not. However, if
any of the .class files are missing the javac compiler itself
attempts to locate the .java files and compile them.
<H4><B>Running the Applet in ED for Windows</B></H4>
<P>
Now you just need an HTML file to run the applet. Open one more
new file and save it as myapplet.html. Open the skeletons, or
if you still have the dialog box open, click the Rebuild button.
You see a list of HTML skeletons. Scroll down, find the Basic
HTML Page, and insert it in the new file. Replace the title with
&quot;myapplet Example.&quot; Select the body text and delete
it. Find the Skeleton Applet skeleton in the Java category and
insert it in the body of the HTML file. Change the code value
of the applet tag to read myapplet.class, then remove the param
name tag and save the file.
<P>
Having created the HTML file, set myapplet.java as the active
window. Select the fourth button from the left to run the applet
viewer. Be sure that myapplet.java is the active window when starting
the Applet viewer (see Figure 24.9). This causes the viewer to
look for the file myapplet.html.
<P>
<A HREF="http://docs.rinet.ru/JaTricks/f24-9.gif" ><B>Figure 24.9 : </B><I>ED for Windows running myapplet.</I></A>
<P>
Alternatively, you may select Tools|Programs and select Java Applet
Viewer from the choose list in the dialog box. You can check the
paths for each of the commands by editing them in the dialog box
that results from the Tools|Programs menu option. Figure 24.10
shows the edit dialog box for configuring the applet viewer. Press
Run to run the Applet Viewer or press Edit to examine the paths
and parameters that are used when the Applet Viewer is invoked.
<P>
<A HREF="http://docs.rinet.ru/JaTricks/f24-10.gif" ><B>Figure 24.10 : </B><I>ED for Windows screen showing Tool dialog box.</I></A>
<H4><B>Debugging</B></H4>
<P>
ED does not directly support runtime debugging. However, the JDB
can be added as an available tool. To do this, select Tools|Programs
to display the Tools Dialog Box. Click the Add button. Enter a
name for the new tool. For the command line, enter the following:
<BLOCKQUOTE>
<TT>d:\java\java\bin\jdb &lt;File&gt;</TT>
</BLOCKQUOTE>
<P>
Give the working directory as <TT>&lt;PATH&gt;</TT>.
Click OK to save the setup or Run to run the debugger.
<H3><B>Creating the Application in ED for Windows</B></H3>
<P>
Before creating the application, you can set up a skeleton for
a generic application. This saves time in creating this and future
applications, each of which will have the same basic structure.
<P>
To create a new skeleton, select Options|Language Words &amp;
Templates from the main menu. In the dialog box, select Java as
the language. Scroll down to the templates section and look for
the Programs heading. At the bottom of this section add the following
code all on the same line.
<BLOCKQUOTE>
<TT>genap import java.awt.*;<BR>
\n\npublic class GenApp extends Frame {<BR>
\npublic GenApp()\n{<BR>
\nsuper();<BR>
\n}\npublic static void main( String args[] )\n{<BR>
\nGenApp localGenApp = new GenApp();<BR>
\nlocalGenApp.setTitle(&quot;\f&quot;);<BR>
\nlocalGenApp.show()\n}\u} Programs.Generic Application</TT>
</BLOCKQUOTE>
<P>
In this case, <TT>genap</TT> serves
as a marker for the new skeleton. The portion of the code from
import through the last } specifies the code that will be inserted
for the template. The word Programs designates that this skeleton
will be listed under the category Programs and the following word,
&quot;Generic Application&quot; is the name of the template.
<P>
The \ is used to indicate formatting options. The \n indicates
a new line and \f indicates where the cursor will be after the
skeleton is inserted. For more information concerning formatting
and template creation, use the Help menu option in ED and look
under Template creation, Template escape sequences.
<P>
Close the window and save the changes to the template file. You
can now use your new template just as you would any of the templates
which came with ED.
<H4><B>Setting up the Application in ED for Windows</B></H4>
<P>
To begin to create the application in ED, open a new editing window
using File|Open. Save the file as myapplication.java. Insert the
skeleton code you just created by opening the skeletons dialog
box, scrolling down to Generic Application, and clicking insert.
After adding the generic application, the cursor is in position
to add the title to the frame. Add this title and you have a basic
application.
<P>
To enhance the application, do a search and replace to substitute
myapplication for GenApp throughout the file. Go to the top of
the file and add a blank line. Then use the skeletons to insert
an appropriate header comment. In the constructor for the application,
add the lines to display the canvas, label, and button.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Tip</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
Block cut and paste allows stream, column, or line mode, all of which can be handy for cutting and pasting large chunks of formatted code.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Having the button in the application requires an event handler.
Add the method <TT>handleEvent()</TT>
in the following manner. Type <FONT FACE="AGaramond Bold">pub</FONT>
and press the spacebar. Notice how Ed completes the word. Next,
type <FONT FACE="AGaramond Bold">bo</FONT> and press space. A
menu listing appears, enabling you to select boolean as the expansion
value. As you continue to type in the code for the handleEvent
method, notice the different ways in which ED can help you complete
the coding with less typing.
<P>
When all of the code has been entered, save the application. You
are now ready to compile and execute the application.
<H4><B>Compiling and Running the Application in ED for Windows</B>
</H4>
<P>
Compiling the application in ED is just like compiling the applet.
Use the fourth button on the toolbar to run the javac compiler
against the active window. Use the second button from the left
on the Java toolbar to run the application via the Java interpreter.
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Tip</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
ED supplies Tips on Startup, an easy and painless way to learn more of the features of the environment.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
ED has advantages for developers who often switch between languages.
It can be used with most popular programming languages and compilers,
enabling the programmer to continue working in a familiar environment
even when switching projects. The class hierarchy browser and
skeletons help to provide reminders of the correct syntax and
features of a particular language.
<H2><A NAME="ObjectEngineeringWorkbench"><B><FONT SIZE=5 COLOR=#FF0000>Object
Engineering Workbench</FONT></B></A></H2>
<P>
Innovative Software's Object Engineering Workbench for Java is
a graphical editor and hierarchy display. It is useful for object-oriented
design and development. This environment is set up to prominently
display the relationships between classes.
<H3><B>Installation and Setup of OEW</B></H3>
<P>
An evaluation copy of OEW can be downloaded from <TT><A HREF="http://www.isg.de/">http://www.isg.de/</A>.</TT>
You need to download the executable and then do a separate download
for the .dll's.
<P>
OEW is slightly more complicated to install than the other two
environments, mostly because it does not include an installation
program. You need to create a directory for the program, unzip
the DLL files, and put all the files in the directory. If you
want a program group, you need to create it. Run the program by
starting the file Oew.exe.
<P>
OEW has a number of utilities for creating and editing make files,
but does not include a make utility. You need to locate and install
make to use these options. Fortunately, OEW does enable you to
configure the make tool to point to any make utility.
<P>
The Help information included with the environment is mostly directed
toward the C++ environment. There is some online documentation
concerning the Java environment, which is helpful to read before
you try to use the environment itself.
<H3><B>Creating an Applet in OEW</B></H3>
<P>
Each applet or application developed in OEW is part of a project.
 Within a project, objects are created and properties are associated
with each object. OEW then generates code for each object based
on the definitions and properties.  
<H4><B>Setting up a Project in OEW</B></H4>
<P>
To start a new development project in OEW, you need to create
a *.oew file to hold information about which classes belong in
the project. Select File|New and a New Object Base dialog box
is displayed. Use the select button on this dialog box to display
an Open file dialog box. In the Open File dialog, select the filename
myapplet.oew, choose the desired directory, and press OK. Press
OK in the Object Base dialog to create the new file. You are now
ready to begin to create the applet.
<H4><B>Entering and Editing Code in OEW</B></H4>
<P>
To simplify entering the new classes, maximize the No View-Inheritances
window. At any blank space in this window, press the right mouse
button. From the resulting drop-down menu, choose the first option,
New class. A dialog box displays where you enter the name of the
class, my applet. When you select Add in the dialog box, the new
class appears as a box on the display.
<P>
You need to edit the default definition of the new class. To edit
the class, move the mouse pointer until it is over the box containing
the class and press the right mouse button. From the resulting
drop-down menu, select Edit class. In the box labeled modifiers,
type public. Close the dialog box.
<P>
Methods and objects within each class are called slots in OEW.
To add the <TT>init()</TT> method
for the myapplet class, use the right mouse button to click on
the class and then select New Slot... from the menu. A dialog
box is displayed-here you can add the name of the slot, the type,
and the access level. The values to enter are init, method, and
public. Figure 24.11 shows this dialog box with its contents.
<P>
<A HREF="http://docs.rinet.ru/JaTricks/f24-11.gif" ><B>Figure 24.11 : </B><I>Adding the init() method in OEW.</I></A>
<P>
When you have entered the values shown, click the More button
in the dialog box. An additional dialog box displays where you
can add the code for the <TT>init()</TT>
method. You do not need to add the opening and closing braces
when entering methods in OEW. After entering the code, click OK
to close the dialog and save the code. Click OK in the original
dialog to close it and add the method.
<P>
What you have done so far does not actually create any code. When
you have defined all of the classes, you generate the code, compile
and run it. This can be very useful if you are in a design stage
where you are defining objects, but are not yet ready to put source
code behind all of the objects. You also can generate files to
contain the code and enable the code to be entered by others.
Existing code can be parsed and added to a project.
<P>
Having finished defining the class myapplet, you can move on to
create the myCanvas class. The class is added in the same manner
as myapplet. Be sure to set the class modifier to public after
creating the class. In addition to using the right mouse button,
you can add a new class by selecting Edit|New class on the main
menu.
<P>
Before you create the methods for the myCanvas class, you need
to have an Image object available to use for a class reference
object. You must import the source to add the class to the diagram.
From the main menu, select Source|Import source code. The dialog
box Select Files to Import displays. In the dialog box, select
Add to display the dialog box titled Open.
<P>
In the Open dialog box, locate the source for java.awt.Image and
double-click it. Because the Open dialog box remains until you
close it, go ahead and add java.awt.Canvas and java.applet.Applet,
which you need to show the inheritance in your new classes. Click
cancel to close the Open dialog box. The Select Files to Import
box should now have three files listed in it and appear as shown
in Figure 24.12.
<P>
<A HREF="http://docs.rinet.ru/JaTricks/f24-12.gif" ><B>Figure 24.12 : </b><i>Importing source files in OEW.</i></A>
<P>
Select start to load these files. When the dialog box closes you
see the new classes displayed on the screen. Using the left mouse
button, click canvas and drag to draw a line to myCanvas. This
line represents the inheritance relationship. Use the left mouse
button to draw a line from Applet to myapplet. Notice how the
classes move to accommodate and highlight the relationship. If
you want to see the methods available in either the Applet or
Canvas class, you can use the right mouse button to show the slots
for these classes, just like a class you create.
<P>
Now you are ready to create the slots for the myCanvas class.
Using the right mouse button, click on myCanvas and select Show
Slots. This sets the screen to display the slots as they are added
to the class.
<P>
To add the reference variable, click on myCanvas with the right
mouse button and select New slot. Give the slot the name localImage.
Use the drop-down list box to select reference as the slot type.
The access should be set to protected. Select more and another
dialog box appears, enabling you to select the type of reference.
Select <TT>java.awt.Image</TT> and
click OK to close the dialog. If <TT>java.awt.Image</TT>
is not available, review the procedure for importing classes.
Click OK to close the original dialog box and add the slot. The
new slot should appear in the myCanvas class.
<P>
To add the constructor, create a new slot using the right pull-down
menu. Type the class name as the slot name and notice that the
type defaults to method and the access level defaults to public.
Click more to generate the next dialog box. Here you add the parameter
as Image <TT>theImage</TT> and add
the code for the constructor. Notice that there is no return type.
Close the dialog boxes when you are finished. This method should
now be listed under the reference variable as part of the myCanvas
class.
<P>
The <TT>paint()</TT> method is added
in the same fashion as the <TT>init()</TT>
method. Open a dialog box to create a new slot. Enter <FONT FACE="AGaramond Bold">paint</FONT>
as the name, <FONT FACE="AGaramond Bold">method</FONT> as the
type, and <FONT FACE="AGaramond Bold">public</FONT> as the access
level. Click more and enter a return type of void, the parameter
Graphics g, and the line of code for the paint method. Close the
dialog boxes and verify that the method has been added to the
class. Figure 24.13 shows how the screen appears after all of
the classes and slots have been added.
<P>
<A HREF="http://docs.rinet.ru/JaTricks/f24-13.gif" ><B>Figure 24.13 : </B><I>Classes and slots for myapplet as displayed in OEW.</I></A>
<P>
You are just about ready to generate the code for this project.
You need to edit the header files first. These create the portion
of your files which appear before the class listings-specifically,
comments and import statements.
<P>
To add the needed import statements to the header files, go to
the main menu and select Source|Modules. On the resulting dialog
box, select myapplet header and click Edit. Click the myapplet
entry so it is highlighted. This means that the entries you are
adding appear just before the myapplet entry. Select New|User
defined entry and in the resulting dialog box type the following:
<BLOCKQUOTE>
<TT>import java.awt.*;</TT>
</BLOCKQUOTE>
<P>
Click OK to close this dialog box. In the Edit Module dialog,
select New|User defined entry to display another entry dialog
box. In this one, type the following:
<BLOCKQUOTE>
<TT>>import java.applet.Applet;</TT>
</BLOCKQUOTE>
<P>
Close this dialog and the Edit Module dialog. In the Edit Modules
dialog select myCanvas header and click Edit. Just before the
class declaration define a new entry and add the following line:
<BLOCKQUOTE>
<TT>import java.awt.*;</TT>
</BLOCKQUOTE>
<P>
Close the dialog box, the Edit Module box, and the Edit Modules
box. You are now ready to generate the source code.
<P>
To generate source code based on the classes you have defined,
select Source Generate all from the main menu. A dialog box displays,
showing the two source files that will be generated. Click OK
to generate these source files. Once you have generated the source
files you may edit them by selecting File|Edit from the main menu.
<P>
When you are satisfied with the source code that is generated,
you will want to compile it into an applet. OEW enables you to
generate a <TT>makefile</TT> and use
it to compile your applet. Generate the <TT>makefile</TT>
by selecting Make|Generate <TT>makefile</TT>
on the main menu. Before using the <TT>makefile</TT>,
select Make|Make options and verify that the make command points
to a valid make program on your computer. To compile the applet,
select Make|Make program from the main menu.
<P>
An additional window appears at the bottom of the screen showing
the results of the compilation. Correct any errors which appear.
Pay careful attention to the order of items in the headers, as
this affects how the code is generated. You can change the order
of the headers by selecting and moving them. You also can select
and move slots so that your reference variables are at the top.
It may be helpful to look at the actual source code to pinpoint
any errors. After fixing the errors in OEW you need to regenerate
the source code before compiling.
<P>
OEW does not automatically create an .html file. However, you
can select File Editor to bring up a dialog box of files to edit.
Click the Create button and enter the HTML file in the editor.
Use File|Save As on the main menu to save the file as myapplet.html
in the current directory.
<P>
To launch the applet select Make|Execute and type appletviewer
myapplet.html in the dialog box. If the applet does not display
correctly, look in the DOS box to see the error listing. Figure
24.14 shows the screen display with the applet running.
<P>
<A HREF="http://docs.rinet.ru/JaTricks/f24-14.gif" ><B>Figure 24.14 : </B><I>myapplet running in OEW.</I></A>
<H3><B>Creating the Application in OEW</B></H3>
<P>
Creating the application in OEW is very similar to creating the
applet. You need to create a new project for the application.
Click on File|New and create a new file named myapplication.oew.
<H4><B>Setting up the Application in OEW</B></H4>
<P>
Use Edit|Copy and Edit|Paste to move the Canvas and myCanvas objects
to the new project. Next, import the Java source file for the
Frame object.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Tip</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
When copying classes from one project to another, be sure to copy any super classes or the class in your new project is marked as a library class.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Create a <TT>myapplication</TT> object
that is inherited from Frame. Enter the constructor, the <TT>handleEvent</TT>
method, and the main method as slots in the myapplication class.
Be sure to check the static box to indicate that the main method
is static. Remember to make the class <TT>myapplication</TT>
public.
<H4><B>Compiling and Running the Application in OEW</B></H4>
<P>
Before you can compile the application, you need to regenerate
the makefile so that it contains myapplication information as
opposed to myapplet. Select Make|Generate makefile to accomplish
this, then choose Make|Build program from the main menu.
<P>
After compiling the application, you can run it in OEW by selecting
Make|Execute Program and typing java myapplication. Figure 24.15
shows the application running in OEW with its class structure
shown in the lower part of the screen.
<P>
<A HREF="http://docs.rinet.ru/JaTricks/f24-15.gif" ><B>Figure 24.15 : </B><I>myapplication running in OEW.</I></A>
<P>
The OEW environment provides an excellent means for seamlessly
merging object-oriented design into code development. Classes
can be defined at one point, methods added at a later point, and
the methods can be implemented when the design is complete. OEW
also makes it easy to integrate existing classes into new projects.
<H2><A NAME="ComparisonofEnvironments"><B><FONT SIZE=5 COLOR=#FF0000>Comparison
of Environments</FONT></B></A></H2>
<P>
The table below gives a comparison of some of the key features
of the integrated development environments which are described
in this chapter.  Each of these products is being improved, so
features not listed here may be added in the near future.<BR>
<P>
<CENTER><B>Table 24.1. A comparison of some of the features of
the environments described in this chapter.</B></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD WIDTH=265>Feature</TD><TD WIDTH=101>Cafe</TD><TD WIDTH=107>ED
</TD><TD WIDTH=58>OEW</TD></TR>
<TR><TD WIDTH=265>Compilation errors linked to code</TD><TD WIDTH=101>Yes
</TD><TD WIDTH=107>Yes</TD><TD WIDTH=58>No</TD></TR>
<TR><TD WIDTH=265>Automatic Save before Compile</TD><TD WIDTH=101>Yes
</TD><TD WIDTH=107>Yes</TD><TD WIDTH=58>Yes</TD></TR>
<TR><TD WIDTH=265>Run appletviewer within environment</TD><TD WIDTH=101>Yes
</TD><TD WIDTH=107>Yes</TD><TD WIDTH=58>Yes</TD></TR>
<TR><TD WIDTH=265>HTML file assistance</TD><TD WIDTH=101>Yes</TD>
<TD WIDTH=107>Yes</TD><TD WIDTH=58>No</TD></TR>
<TR><TD WIDTH=265>Launch Netscape within environment</TD><TD WIDTH=101>No
</TD><TD WIDTH=107>Yes</TD><TD WIDTH=58>Yes</TD></TR>
<TR><TD WIDTH=265>Runtime debugging</TD><TD WIDTH=101>Yes</TD>
<TD WIDTH=107>Configurable</TD><TD WIDTH=58>No</TD></TR>
<TR><TD WIDTH=265>Tips at startup</TD><TD WIDTH=101>No</TD><TD WIDTH=107>Yes
</TD><TD WIDTH=58>Yes</TD></TR>
<TR><TD WIDTH=265>Template creation</TD><TD WIDTH=101>No</TD>
<TD WIDTH=107>Yes</TD><TD WIDTH=58>Yes</TD></TR>
<TR><TD WIDTH=265>Class hierarchy browser</TD><TD WIDTH=101>available in full version</TD><TD WIDTH=107>Yes
</TD><TD WIDTH=58>Yes</TD></TR>
<TR><TD WIDTH=265>Class editor</TD><TD WIDTH=101>available in full version</TD><TD WIDTH=107>Yes
</TD><TD WIDTH=58>Yes</TD></TR>
</TABLE></CENTER>
<P>
<P>
When choosing a development environment, you should carefully
consider the features that are important for your development
effort. If your environment needs to support both design and coding,
you need to examine environments with that in mind. If your design
is complete and you want to generate code as quickly as possible,
look for an environment that will enable your programmers to work
as efficiently as possible.
<P>
One important criteria to efficiency is having an environment
with which the developers are comfortable. If you are a C++ programmer
and have an environment you are used to working in, see if that
environment has been enhanced or duplicated to support Java development.
Before purchasing a development environment, be sure to see if
it supports multiple developers, if it will run across a network,
and how it will integrate with your source code control system.
<H2><A NAME="OtherProductsUnderDevelopment"><B><FONT SIZE=5 COLOR=#FF0000>Other
Products Under Development</FONT></B></A></H2>
<P>
There are many other IDEs available for Java and new ones are
being added at a remarkable rate.  Review sites such as 
<BLOCKQUOTE>
<TT><A HREF="http://www.gamelan.com/pages/Gamelan.programming.tool.html">http://www.gamelan.com/pages/Gamelan.programming.tool.html</A></TT>
</BLOCKQUOTE>
<P>
for an online list of new products.  As this book is going to
press there are several noteworthy additions.
<H3><B>Borland's Latte</B></H3>
<P>
Borland is expected to release Latte as a Rapid Application Development
product for Java. The release is scheduled for the fall of 1996.
Latte promises to include visual application development, secure
cross-platform application deployment, JDBC support, and an open
extensible architecture to support code reuse. Latte also plans
to support Borland's Interface Database by providing a JDBC driver
and integrating the database with Latte. Borland is using Java
to develop a new product named InterClient. InterClient will give
Java applets and applications more powerful and flexible database
access capabilities than the JDBC alone.
<P>
Latte is scheduled to be released in the fall of 1996 and minimum
system requirements are not yet available. More information on
Latte can be found at
<BLOCKQUOTE>
<TT><A HREF="http://www.borland.com/Product/latte/index.html">http://www.borland.com/Product/latte/index.html</A></TT>
</BLOCKQUOTE>
<H3><B>Microsoft's Jakarta</B></H3>
<P>
The Jakarta product has not yet been released by Microsoft.  It
promises to incorporate the ActiveX components developed by Microsoft
into the Java applets. This idea has a great deal of potential,
especially for organizations that already make use of Microsoft
components in their development.  
<P>
Jakarta is due to be released in the fall of 1996 and system requirements
are not yet available. For more information on Jakarta, visit
<BLOCKQUOTE>
<TT><A HREF="http://www.microsoft.co/visualc/jakarta/default.htm">http://www.microsoft.co/visualc/jakarta/default.htm</A></TT>
</BLOCKQUOTE>
<H3><B>Sun's Java Workshop</B></H3>
<P>
The Beta version of Sun's Java Workshop is available for downloading
from Sun. This product is clearly developed specifically for Java
and is robust and easy to use. The system includes a project manager,
a source code editor, a build manager, a source browser, an applet
tester, and a debugger. It appears well thought-out and should
be useful for developing Java applets.
<P>
The system requirements for Windows 95 include:
<BLOCKQUOTE>
Intel 90MHz Pentium or higher system<BR>
24 MB memory<BR>
45 MB disk space
</BLOCKQUOTE>
<P>
To download a copy of Sun's Java Workshop visit
<BLOCKQUOTE>
<TT><A HREF="http://www.sun.com/sunsoft/Developer-products/java">http://www.sun.com/sunsoft/Developer-products/java</A></TT>
</BLOCKQUOTE>
<H3><B>Roaster</B></H3>
<P>
If you are working on a Macintosh, then Roaster from Natural Intelligence
seems to be the choice development environment. Version 1.0 of
this product has been released, and the product has received many
good reviews. Roaster groups files into projects, provides a source
code editor, and a debugger. It enables you to run applets on
the Macintosh using the Roaster Applet Runner. Natural Intelligence
has written their own Java compiler. Roaster includes both the
compiler developed by Natural Intelligence and the Sun compiler.
<P>
The minimum system requirements for Roaster follow:
<BLOCKQUOTE>
68030 or greater processor<BR>
8Mb of RAM<BR>
System 7.1.2 or later (7.5 or later preferred)<BR>
CD-ROM drive to install the software
</BLOCKQUOTE>
<P>
For more information concerning Roaster, visit 
<BLOCKQUOTE>
<TT><A HREF="ahttp://www.roaster.com/">ahttp://www.roaster.com/</A></TT>
</BLOCKQUOTE>
<H2><A NAME="Summary"><B><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></B></A>
</H2>
<P>
This chapter surveyed a few of the many development environments
that are beginning to appear for the Java language. They provide
a tremendous improvement over plain text editors. These environments
are useful for creating both applets and applications and an example
of each is presented in the chapter.
<P>
This chapter does not begin to provide exhaustive coverage of
the many features available from each of these products. However,
having read the chapter you should feel comfortable getting started
with each of the products. You only truly learn the products by
using them. The beta versions of these applications were evaluated
in this chapter, so be sure to check for improvements and additional
features in the near future.
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch23.htm"><IMG SRC="http://docs.rinet.ru/JaTricks/pc.gif" BORDER=0 HEIGHT=88
WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="http://docs.rinet.ru/JaTricks/cc.gif" BORDER=0
HEIGHT=88 WIDTH=140></A><A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/JaTricks/hb.gif" BORDER=0
HEIGHT=88 WIDTH=140></A><A HREF="ch25.htm"><IMG SRC="http://docs.rinet.ru/JaTricks/nc.gif" BORDER=0
HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>

