<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<SCRIPT LANGUAGE="JavaScript">


<!--

function popUp(pPage) {
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '<link rel="stylesheet" href="/includes/stylesheets/ebooks.css"></head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 figDoc.write(zhtm);
 figDoc.close();
 popUpWin.focus();
 }

//-->


</SCRIPT>
<link rel="stylesheet" href="http://www.szptt.net.cn/includes/stylesheets/ebooks.css">

        <META NAME="GENERATOR" Content="Symantec Visual Page 1.0.1">
        <META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
        <TITLE>JFC -- Chapter 32 - Swing Utilities</TITLE>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<CENTER>
<H1><IMG SRC="..\button\sams.gif" BORDER="0"></H1>

<P><A HREF="..\ch31\ch31.htm"><IMG SRC="..\button\previous.gif" BORDER="0"></A>
<A HREF="..\index.htm"><IMG SRC="..\button\contents.gif" BORDER="0"></A> 
<A HREF="..\ch33\ch33.htm"><IMG SRC="..\button\next.gif" BORDER="0"></A> 


<H1>JFC Unleashed</H1></CENTER>
<HR>


<H1>Chapter&nbsp;32<br>
Swing Utilities</H1>
<HR>
<p>

<UL>
<LI><A HREF="#TheTTFONTSIZESwingUtilitiesFONTTTFONTSIZEClassFONT">
The <TT>SwingUtilities
Class</TT></A>
<UL>
<LI><A HREF="#CoordinateSystemConversionUtilities">
Coordinate System Conversion Utilities</A>
<LI><A HREF="#RectangleUtilities">
Rectangle Utilities</A>
<LI><A HREF="#ComponentBoundsUtilities">
Component Bounds Utilities</A>
<LI><A HREF="#UtilitiesforWorkingwithComponentContainmentHierarchies">
Utilities for Working with Component Containment Hierarchies
</A>
<LI><A HREF="#UtilitiesforInvokingExecutionontheEventDispatchThread">
Utilities for Invoking Execution on the Event-Dispatch Thread
</A>
<LI><A HREF="#MouseEventUtilities">
Mouse Event Utilities </A>
<LI><A HREF="#ComponentLayoutUtilities">
Component Layout Utilities</A>
<LI><A HREF="#PaintUtilities">
Paint Utilities </A>
<LI><A HREF="#AccessibilityUtilities">
Accessibility Utilities</A>
</UL>
<LI><A HREF="#TheTTFONTSIZESwingConstantsFONTTTFONTSIZEClassFONT">
The <TT>SwingConstants
Class</TT></A>
<LI><A HREF="#Summary">
Summary</A>
</UL>

<HR>
<P>
JFC provides a collection of miscellaneous utilities and constant
definitions in the <TT>SwingUtilities</TT> and <TT>SwingConstants</TT>
classes. This chapter provides an overview and summary of these
classes.
<P>
In this chapter you will learn
<UL>
<LI>About the various utility methods in <TT>SwingUtilities<BR>
</TT>This class includes utilities for converting coordinates,
determining component bounds, navigating component hierarchies,
invoking <TT>Runnable</TT> objects, working with mouse events,
painting components, laying out complex menu items and labels,
and working with accessibility.
<LI>About the <TT>SwingConstants</TT> class<BR>
This class includes constants used in several classes to specify
the position of components or elements of components.
</UL>
<H2><A NAME="TheTTFONTSIZESwingUtilitiesFONTTTFONTSIZEClassFONT">
The <TT>SwingUtilities</TT>
Class</A></H2>
<P>
The <TT>SwingUtilities</TT> class, included in the <TT>javax.swing</TT>
package, is a miscellaneous collection of utilities implemented
as static class methods. Listing 32.1 gives the class signature
for <TT>SwingUtilities</TT>.
<P>
<HR>
<P>
<B>Listing 32.1&nbsp;&nbsp;</B><TT><B>SWINGUTILITIES</B></TT><B>
Class Signature
<p>
</B>
<BLOCKQUOTE>
<PRE>
public class SwingUtilities extends Object implements SwingConstants 
{ 
  // Public class methods
    // coordinate system conversion utilities
    public static Point convertPoint(Component source, Point point,
                                     Component destination);
    public static Point convertPoint(Component source, int x, int y, 
                                     Component destination);
public static void convertPointFromScreen(Point point, 
                                              Component component);
    public static void convertPointToScreen(Point point, 
                                            Component component);
    public static Rectangle convertRectangle(Component source, 
                                             Rectangle rect, 
                                             Component destination);
    // rectangle utilities
public static Rectangle[] computeDifference(Rectangle rect1, 
                                                Rectangle rect2);
    public static Rectangle computeIntersection(int x, int y, 
                                                int width, int height,
                                                Rectangle rect);
public static Rectangle computeUnion(int x, int y, 
                                         int width, int height,
                                         Rectangle rect);
public static final boolean isRectangleContainingRectangle(
                                    Rectangle rect1,
                                    Rectangle rect2);

    // component bounds utilities
public static int computeStringWidth(FontMetrics metrics, 
                                         String string);
    public static Rectangle getLocalBounds(Component component);

    // component containment hierarchy utilities 
    public static Component findFocusOwner(Component component);
public static Container getAncestorNamed(String string, 
                                             Component component);
    public static Container getAncestorOfClass(Class class, 
                                               Component component);
    public static Component getDeepestComponentAt(Component component, 
                                                  int x, int y);
    public static JRootPane getRootPane(Component component);
public static boolean isDescendingFrom(Component component1, 
                                           Component component2);
    public static Window windowForComponent(Component component);

    // utilities for invoking execution on the event-dispatch thread 
    public static void invokeAndWait(Runnable runnable);
    public static void invokeLater(Runnable runnable);
    public static boolean isEventDispatchThread();

    // mouse event utilities 
public static MouseEvent convertMouseEvent(Component source, 
                                               MouseEvent event, 
                                               Component destination);
    public static boolean isLeftMouseButton(MouseEvent event);
    public static boolean isMiddleMouseButton(MouseEvent event);
    public static boolean isRightMouseButton(MouseEvent event);

    // component layout utilities
public static String layoutCompoundLabel(FontMetrics metrics, 
                                             String s, Icon icon,
                                             int vertAlign, int horiz
  Align,
                                             int vertTextPos, int horiz
  TextPos, 
                                             Rectangle rect
  View, Rectangle rectIcon,
                                             Rectangle rectText, int gap);

    // paint utilities 
public static void paintComponent(Graphics graphics, 
                                      Component component, 
                                      Container container, 
                                      int x, int y, 
                                      int width, int height);
public static void paintComponent(Graphics graphics, 
                                      Component component,
                                      Container container, 
                                      Rectangle rect);
    public static void updateComponentTreeUI(Component component);
 
    // accessibility utilities
public static Accessible getAccessibleAt(Component component, 
                                             Point point);
    public static Accessible getAccessibleChild(Component component, 
                                                int index);
    public static int getAccessibleChildrenCount(Component component);
    public static int getAccessibleIndexInParent(Component component);
public static AccessibleStateSet getAccessibleStateSet(
                                         Component component);
} 
</PRE>
</BLOCKQUOTE>
<HR>
<P>
Note that there is no constructor for <TT>SwingUtilities</TT>
as all of its methods because static class methods.
<H3><A NAME="CoordinateSystemConversionUtilities">
Coordinate System Conversion Utilities</A></H3>
<P>
The following <TT>SwingUtilities</TT> methods convert coordinates
from the coordinate system of one component to the coordinate
system of another component.
<BLOCKQUOTE>
<PRE>
public static Point convertPoint(Component source, Point point, 
                                 Component destination);
public static Point convertPoint(Component source, int x, int y, 
                                 Component destination);
public static void convertPointToScreen(Point point, 
                                        Component component);
public static void convertPointFromScreen(Point point, 
                                          Component component);
public static Rectangle convertRectangle(Component source, 
                                         Rectangle rect, 
                                         Component destination);
</PRE>
</BLOCKQUOTE>
<P>
The <TT>convertPoint</TT> methods convert a given coordinate from
the coordinate system of a source component to the coordinate
system of a destination component. The source and destination
components must be members of a component tree hierarchy with
a <TT>Window</TT> object at its root. <TT>convertRectangle</TT>
works like the <TT>convertPoint</TT> methods, but converts the
location of a given rectangle.
<P>
The <TT>convertPointToScreen</TT> and <TT>convertPointFromScreen</TT>
methods convert component-based coordinates to and from screen-based
coordinates.
<H3><A NAME="RectangleUtilities">
Rectangle Utilities</A></H3>
<P>
The following <TT>SwingUtilities</TT> methods are useful for working
with rectangles.
<BLOCKQUOTE>
<PRE>
public static final boolean isRectangleContainingRectangle(
                                Rectangle rect1,
                                Rectangle rect2);
public static Rectangle computeIntersection(int x, int y, 
                                            int width, int height,
                                            Rectangle rect);
public static Rectangle computeUnion(int x, int y, 
                                     int width, int height,
                                     Rectangle rect);
public static Rectangle[] computeDifference(Rectangle rect1, 
                                            Rectangle rect2);
</PRE>
</BLOCKQUOTE>
<P>
<TT>isRectangleContainingRectangle</TT> takes two <TT>Rectangle</TT>
objects and returns <TT>true</TT> if the first rectangle completely
contains the second rectangle.
<P>
The <TT>computeIntersection</TT> and <TT>computeUnion</TT> methods
allow you to calculate the intersection and union of two rectangles.
In these two methods, you specify one rectangle as a <TT>Rectangle</TT>
object and the other rectangle in terms of its origin and size
(x, y, width, height). The <TT>computeDifference</TT> method takes
two rectangles and returns an array of rectangles representing
the regions of the first rectangle that do not overlap with the
second rectangle. These three methods are useful for calculating
dirty rectangle lists when batching repaint requests.
<H3><A NAME="ComponentBoundsUtilities">
Component Bounds Utilities</A></H3>
<P>
<TT>SwingUtilities</TT> has two methods for determining the bounds
of components.
<BLOCKQUOTE>
<PRE>
public static Rectangle getLocalBounds(Component component);
public static int computeStringWidth(FontMetrics metrics, String string);
</PRE>
</BLOCKQUOTE>
<P>
The <TT>getLocalBounds</TT> method returns the bounds of a component
as a <TT>Rectangle</TT> object. The location of the returned rectangle
is always (0, 0). 
<P>
<TT>computeStringWidth</TT> returns the width (in pixels) of a
given string when rendered with the given font metrics. This can
be useful for determining the preferred and minimum sizes of components
that contain text elements.
<H3><A NAME="UtilitiesforWorkingwithComponentContainmentHierarchies">
Utilities for Working with Component Containment Hierarchies
</A></H3>
<P>
The following <TT>SwingUtilities</TT> methods are useful for obtaining
information about component containment hierarchies.
<BLOCKQUOTE>
<PRE>
public static Container getAncestorOfClass(Class class, 
                                           Component component);
public static Container getAncestorNamed(String string, 
                                         Component component);
public static Component getDeepestComponentAt(Component component, 
                                              int x, int y);
public static boolean isDescendingFrom(Component component1, 
                                       Component component2);
public static Window windowForComponent(Component component);
public static Component findFocusOwner(Component component);
public static JRootPane getRootPane(Component component);
</PRE>
</BLOCKQUOTE>
<P>
The typical containment hierarchy for a JFC application begins
with a <TT>JFrame</TT> (a <TT>Window</TT> object) or <TT>JApplet</TT>
object. Each of these objects contains a single child, a <TT>JRootPane</TT>
object, which contains the rest of the application's GUI objects.
<TT>SwingUtilities</TT> has two methods that are useful for determining
the window or root pane object associated with a given component.
The <TT>windowForComponent</TT> method returns the <TT>Window</TT>
object that contains a given component. The <TT>getRootPane</TT>
method returns the root pane (<TT>JRootPane</TT> object) for a
component.
<P>
There are several other utilities for working with component hierarchies.
The <TT>getAncestorOfClass</TT> method walks up the component
containment hierarchy beginning with the given component until
it finds and returns a component that is an instance of the given
class. <TT>getAncestorNamed</TT> walks up a component containment
hierarchy, beginning with the given component, until it finds
and returns a component with the given name. The <TT>isDescendingFrom</TT>
method returns <TT>true</TT> if a given component is an ancestor
of a second given component.
<P>
The <TT>getDeepestComponentAt</TT> method is useful for hit testing
on component hierarchies. Given a component that may be a container,
it returns the deepest child component at the given coordinates.
If the given component is not a container, <TT>getDeepestComponentAt</TT>
returns the given component.
<P>
The <TT>findFocusOwner</TT> method takes a component that is a
parent in a component hierarchy and returns the child component
(if any) that has the focus. 
<H3><A NAME="UtilitiesforInvokingExecutionontheEventDispatchThread">
Utilities for Invoking Execution on the Event-Dispatch Thread
</A></H3>
<P>
The following <TT>SwingUtilities</TT> methods are useful for working
with the single-thread requirement of Swing components.
<BLOCKQUOTE>
<PRE>
public static void invokeLater(Runnable runnable);
public static boolean isEventDispatchThread();
public static void invokeAndWait(Runnable runnable);
</PRE>
</BLOCKQUOTE>
<P>
The <TT>invokeLater</TT> and <TT>invokeAndWait</TT> methods execute
the given <TT>Runnable</TT> object on the event-dispatch thread.
You can use <TT>isEventDispatchThread</TT> to determine if the
current thread of execution is the event-dispatch thread. See
<A HREF="..\ch04\ch04.htm" >Chapter 4</A> &quot;JFC Programming Techniques,&quot; for details
and examples of using these methods.
<H3><A NAME="MouseEventUtilities">
Mouse Event Utilities </A></H3>
<P>
The following <TT>SwingUtilities</TT> methods are useful utilities
for working with mouse events.
<BLOCKQUOTE>
<PRE>
public static MouseEvent convertMouseEvent(Component source, 
                                           MouseEvent event, 
                                           Component destination);
public static boolean isLeftMouseButton(MouseEvent event);
public static boolean isMiddleMouseButton(MouseEvent event);
public static boolean isRightMouseButton(MouseEvent event);
</PRE>
</BLOCKQUOTE>
<P>
The <TT>convertMouseEvent</TT> method converts a mouse event from
the coordinate system of one component to the coordinate system
of another component. This method is useful in implementing event
handling on custom JFC components.
<P>
<TT>isLeftMouseButton</TT>, <TT>isMiddleMouseButton</TT>, and
<TT>isRightMouseButton</TT> are shortcut utilities for determining
if a given mouse event is a left, middle, or right mouse button
action.
<H3><A NAME="ComponentLayoutUtilities">
Component Layout Utilities</A></H3>
<P>
The following <TT>SwingUtilities</TT> methods are useful for working
with complex labels and menu items.
<BLOCKQUOTE>
<PRE>
public static String layoutCompoundLabel(FontMetrics metrics,
                                         String s, Icon icon,
                                         int vertAlign, 
                                         int horizAlign,
int vertTextPos, 
                                         int horizTextPos, 
                                         Rectangle rectView, 
                                         Rectangle rectIcon,
                                         Rectangle rectText, int gap);
</PRE>
</BLOCKQUOTE>
<P>
Labels and menu items can become quite complex when you utilize
all of the available features of these components. The <TT>layoutCompoundLabel</TT>
and <TT>layoutMenuItem</TT> methods make the task a bit easier
by making many of the calculations required to determine metrics
like text alignment and text position.
<H3><A NAME="PaintUtilities">
Paint Utilities </A></H3>
<P>
The following <TT>SwingUtilities</TT> methods are useful for implementing
view renderers and updating look-and-feel at run time.
<BLOCKQUOTE>
<PRE>
public static void paintComponent(Graphics graphics, Component component,
                                  Container container, int x, int y,
                                  int width, int height);
public static void paintComponent(Graphics graphics, Component component,
                                  Container container, Rectangle rect);
public static void updateComponentTreeUI(Component component);
</PRE>
</BLOCKQUOTE>
<P>
The <TT>paintComponent</TT> methods paint a component in a rectangle
on a graphics context. The component is re-parented to an intermediate
container to prevent <TT>repaint</TT> and <TT>validate</TT> calls
from propagating up the containment hierarchy.
<P>
The <TT>updateComponentTreeUI</TT> method will update the user
interface of a component and all of its children to the current
look-and-feel. If you provide a way for users of your application
to change the look-and-feel at run time, <TT>updateComponentTreeUI</TT>
saves you the task of walking through all of your components and
calling <TT>JComponent.updateUI</TT>.
<H3><A NAME="AccessibilityUtilities">
Accessibility Utilities</A></H3>
<P>
Finally, <TT>SwingUtilities</TT> contains some methods useful
for working with accessibility.
<BLOCKQUOTE>
<PRE>
public static int getAccessibleIndexInParent(Component component);
public static Accessible getAccessibleAt(Component component, 
                                         Point point);
public static AccessibleStateSet getAccessibleStateSet(
                                     Component component);
public static int getAccessibleChildrenCount(Component component);
public static Accessible getAccessibleChild(Component component,
                                            int index);
</PRE>
</BLOCKQUOTE>
<P>
The <TT>getAccessibleIndexInParent</TT> method gets the index
of a given component in its accessible parent. <TT>getAccessibleAt</TT>
returns the accessible child component located at the given coordinates
in a given accessible component hierarchy.
<P>
The <TT>getAccessibleStateSet</TT> methods return the accessible
state (represented as <TT>AccessibleStateSet</TT> object) of a
given component.
<P>
The <TT>getAccessibleChildrenCount</TT> method returns the number
of accessible child objects contained by a given component. <TT>getAccessibleChild</TT>
returns the nth accessible child contained by the given component.
<P>
For more information about accessibility, see <A HREF="..\ch33\ch33.htm" >Chapter 33</A>, &quot;Accessibility.&quot;
<H2><A NAME="TheTTFONTSIZESwingConstantsFONTTTFONTSIZEClassFONT">
The <TT>SwingConstants</TT>
Class</A></H2>
<P>
Many Swing classes include methods for positioning components
or elements of components. For example, in <TT>JLabel</TT> objects,
you can specify whether to put the icon to the left or to the
right of the text. Because there are a number of classes that
use positional information, there is a set of common constants
defined in an interface class named <TT>SwingConstants</TT>. Listing
32.2 gives the class signature for this class.
<P>
<HR>
<P>
<B>Listing 32.2&nbsp;&nbsp;</B><TT><B>SWINGCONSTANTS</B></TT><B>
Class Signature
<BR>
</B>
<BLOCKQUOTE>
<PRE>
public interface SwingConstants extends Object { 
    public static final int CENTER;
    public static final int TOP;
    public static final int LEFT;
    public static final int BOTTOM;
    public static final int RIGHT;
    public static final int NORTH;
    public static final int NORTH_EAST;
    public static final int EAST;
    public static final int SOUTH_EAST;
    public static final int SOUTH;
    public static final int SOUTH_WEST;
    public static final int WEST;
    public static final int NORTH_WEST;
    public static final int HORIZONTAL;
    public static final int VERTICAL;
}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
All the classes that require you to specify positional information
implement the <TT>SwingConstants</TT> interface, so you don't
necessarily need to import the <TT>SwingConstants</TT> class.
Instead, you can access the constants as members of the class
you are using. For example, the following line of code uses the
<TT>RIGHT</TT> constant to create a right-aligned label.
<P>
<TT>JLabel label = new JLabel(&quot;Label
text goes here.&quot;, JLabel.RIGHT);</TT>
<P>
In this code, the <TT>RIGHT</TT> alignment constant is specified
as a member of the <TT>JLabel</TT> class. If you want to access
the constant value as a member of the <TT>SwingConstants</TT>
class, you'll have to be sure to import the <TT>SwingConstants</TT>
class.<P>

<CENTER>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1>
<TR VALIGN=TOP><TD WIDTH=600><B>NOTE</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=600>
<BLOCKQUOTE>
The <TT>SwingConstants</TT> members are not usable for specifying layout positions for the <TT>BorderLayout</TT> layout manager.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
</CENTER>
<P>
<H2><A NAME="Summary">
Summary</A></H2>
<P>
The <TT>SwingUtilities</TT> class contains a myriad of static
class methods that the Swing developers found useful in implementing
the classes in the <TT>javax.swing</TT> package. You may find
some of these utilities useful when writing JFC applications.
This chapter presents an overview of all of the methods in the
<TT>SwingUtilities</TT> class-it's a good idea to familiarize
yourself with what utilities are available so you don't end up
spending time creating an already-available utility.

<P>
<CENTER>
<HR SIZE=4>

<A HREF="..\ch31\ch31.htm"><IMG SRC="..\button\previous.gif" BORDER="0"></A>
<A HREF="..\index.htm"><IMG SRC="..\button\contents.gif" BORDER="0"></A> 
<A HREF="..\ch33\ch33.htm"><IMG SRC="..\button\next.gif" BORDER="0"></A> 
</p>

<p>&#169; <A HREF="..\copy.htm">Copyright</A>, Macmillan Computer Publishing. All rights reserved.
</CENTER>
</BODY>
</HTML>
