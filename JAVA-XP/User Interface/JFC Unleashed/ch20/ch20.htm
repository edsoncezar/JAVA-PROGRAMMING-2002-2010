<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<SCRIPT LANGUAGE="JavaScript">


<!--

function popUp(pPage) {
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '<link rel="stylesheet" href="/includes/stylesheets/ebooks.css"></head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 figDoc.write(zhtm);
 figDoc.close();
 popUpWin.focus();
 }

//-->


</SCRIPT>
<link rel="stylesheet" href="http://www.szptt.net.cn/includes/stylesheets/ebooks.css">

        <META NAME="GENERATOR" Content="Symantec Visual Page 1.0.1">
        <META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
        <TITLE>JFC -- Chapter 20 - JDialog </TITLE>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<CENTER>
<H1><IMG SRC="..\button\sams.gif" BORDER="0"></H1>

<P><A HREF="..\ch19\ch19.htm"><IMG SRC="..\button\previous.gif" BORDER="0"></A>
<A HREF="..\index.htm"><IMG SRC="..\button\contents.gif" BORDER="0"></A> 
<A HREF="..\ch21\ch21.htm"><IMG SRC="..\button\next.gif" BORDER="0"></A> 


<H1>JFC Unleashed</H1></CENTER>
<HR>


<H1>Chapter&nbsp;20<br>
JDialog</H1>
<HR>
<p>


<UL>
<LI><A HREF="#TTFONTSIZEJDialogFONTTTFONTSIZEConfigurationFONT">
<TT>JDialog</TT> Configuration
</A>
<LI><A HREF="#TTFONTSIZEJDialogFONTTTFONTSIZEModalityFONT">
<TT>JDialog</TT> Modality
</A>
<LI><A HREF="#ClosingOptions">
Closing Options</A>
<LI><A HREF="#TTFONTSIZEJDialogFONTTTFONTSIZEClassUsageExampleFONT">
<TT>JDialog</TT> Class Usage
Example</A>
<UL>
<LI><A HREF="#NonModalDialogBoxUsingaTTFONTSIZEPropertyChangeListenerFONTTT">
Non-Modal Dialog Box Using a <TT>PropertyChangeListener</TT>
</A>
<LI><A HREF="#NonModalTTFONTSIZEColorEditorFONTTTFONTSIZEDialogBoxFONT">
Non-Modal <TT>ColorEditor</TT>
Dialog Box</A>
<LI><A HREF="#ModalTTFONTSIZEColorEditorFONTTTFONTSIZEDialogBoxFONT">
Modal <TT>ColorEditor</TT>
Dialog Box</A>
</UL>
<LI><A HREF="#Summary">
Summary</A>
</UL>

<HR>
<P>
The JFC provides a rich collection of predefined dialog boxes
that will meet most of your needs. However, there are cases where
these dialog boxes will not address your needs. The <TT>JDialog</TT>
class can be used in these situations; it provides an empty pane
that you can configure in any way required. In this chapter, you
will learn how to take advantage of the many features contained
in the <TT>JDialog</TT> class. These include the following:
<UL>
<LI>The <TT>JDialog</TT> class configuration
<LI>Using modal and non-modal dialog boxes
<LI>Dialog box closing options
<LI>Example <TT>JDialog</TT> dialog boxes
</UL>
<P>
The <TT>JDialog</TT> class can be used to create modal and non-modal
dialog boxes. If the application cannot continue before the information
is queried from the user or a severe error has occurred, a modal
dialog box may be most appropriate.
<P>
This chapter will show similarities between the <TT>JFrame</TT>
and <TT>JDialog</TT> classes. This will be followed by an example
of the use of the <TT>JDialog</TT> class.
<H2><A NAME="TTFONTSIZEJDialogFONTTTFONTSIZEConfigurationFONT">
<TT>JDialog</TT> Configuration
</A></H2>
<P>
The <TT>JDialog</TT> class is an extension of the AWT <TT>java.awt.Dialog</TT>
class. When shown, the <TT>JDialog</TT> will create a decorated
window that can be moved and sized independently of other frames.
A <TT>JDialog</TT> instance contains a single child, an instance
of the <TT>JRootPane</TT> class. The <TT>JRootPane</TT> consists
of many components. These are <TT>glassPane</TT>, <TT>layeredPane</TT>,
optional <TT>menuBar</TT>, and <TT>contentPane</TT>. The <TT>contentPane</TT>
provides the container where user components are to be added.
The <TT>contentPane</TT> is guaranteed to be non-<TT>null</TT>.
The <TT>contentPane</TT> comes configured with the <TT>BorderLayout</TT>
layout manager by default. For a complete description of the <TT>JRootPane</TT>
class, see the <TT>JFrame</TT> section of <A HREF="..\ch08\ch08.htm" >Chapter 8</A> &quot;Frame
Windows.&quot;
<P>
The <TT>JDialog</TT> class's configuration is similar to the <TT>JFrame</TT>
class. Each class contains a single child that is an instance
of the <TT>JRootPane</TT> class. Each is a descendant of the <TT>java.awt.Window</TT>
class. However, the <TT>JDialog</TT> class extends the <TT>java.awt.Dialog</TT>
class while the <TT>JFrame</TT> class extends the <TT>java.awt.Frame</TT>
class.
<P>
When adding components to a <TT>JDialog</TT> instance, the component
isn't added directly to the dialog box. Instead, the component
is added to the <TT>contentPane</TT>, which is a child of the
dialog box. A handle to the <TT>contentPane</TT> can be acquired
by using the <TT>getContentPane</TT> method. If a layout manager
other than the default <TT>BorderLayout</TT> is required, that
needs to be set on the content pane as well.
<P>
A string can be given to the <TT>JDialog</TT> constructor to specify
the title of the dialog box. The title can also be set and queried
by using the <TT>setTitle</TT> and <TT>getTitle</TT> methods inherited
from <TT>java.awt.Dialog</TT>.
<P>
The current <TT>JDialog</TT> class API does not contain a method
to set the icon in the dialog box's title bar. This is an AWT
omission and is promised for a future version of the JDK. When
implemented, the dialog box will use the icon of its parent frame,
if available. If the parent frame's icon is not appropriate, a
method will be available to set a different icon for the dialog
box.
<H2><A NAME="TTFONTSIZEJDialogFONTTTFONTSIZEModalityFONT">
<TT>JDialog</TT> Modality
</A></H2>
<P>
A <TT>JDialog</TT> instance can be configured as modal or non-modal.
When configured to be a modal dialog box, the <TT>JDialog</TT>
instance will not allow input to other windows until the dialog
box is dismissed. A modal dialog box is typically used for error
conditions, or when user input is required before the application
can continue. A non-modal dialog box allows the user to interact
with other windows in the application while the dialog box is
displayed.
<P>
Another consequence of the modality of the dialog box is whether
or not the calling code blocks. When the <TT>JDialog</TT> instance
is modal, the <TT>show</TT> method blocks until the dialog box
is dismissed. This allows processing code to be placed immediately
after the <TT>show</TT> method. However, if the dialog box is
non-modal, the code continues to execute after the <TT>show</TT>
method. This often requires the code that processes the user input
to be placed in a listener or callback method.
<P>
The modality of a <TT>JDialog</TT> can be set by using the <TT>setModal</TT>
method or at construction time. Passing a value of <TT>true</TT>
to this method will cause the dialog box to be modal. The <TT>setModal</TT>
method must be called before the <TT>show</TT> method is called
to display the dialog box. If the <TT>setModal</TT> method is
not called, the default mode for the dialog box will be non-modal.
The modality of a dialog box can be queried with the <TT>isModal</TT>
method. This will return the <TT>boolean</TT> modal state for
the dialog box.
<P>
The <TT>show</TT> method is used to display the dialog box. If
it is already visible when the <TT>show</TT> method is called,
the dialog box is raised to the top of the window stack on the
display. The <TT>setVisible</TT> method with a parameter of <TT>false</TT>
will remove the dialog box from the display. The <TT>setVisible</TT>
method with a parameter of <TT>true</TT> can also be used to display
the dialog box. The <TT>setVisible</TT> method calls the <TT>show</TT>
method. If the dialog box is to be modal, the protected <TT>blockingShow</TT>
method of the <TT>JDialog</TT> class is called when the <TT>show</TT>
method is invoked. This method mimics the functionality of the
<TT>EventDispatchThread</TT> until the dialog box is no longer
visible. It dispatches <TT>AWTEvents</TT> to components contained
in the <TT>JDialog</TT> instance that is blocking.
<H2><A NAME="ClosingOptions">
Closing Options</A></H2>
<P>
The operation performed by the <TT>JDialog</TT> class when a <TT>WINDOW_CLOSING</TT>
event is received can be configured using the <TT>setDefaultCloseOperation</TT>
method. Possible operations are <TT>HIDE_ON_CLOSE</TT>, which
will hide the dialog box but not dispose of it. <TT>DISPOSE_ON_CLOSE</TT>,
which will hide the dialog box and then dispose of it. The final
option is <TT>DO_NOTHING_ON_CLOSE</TT>. This option does not hide
or dispose of the dialog box. Just as its name implies, it does
nothing. The default value for this property is <TT>HIDE_ON_CLOSE</TT>.
The current setting for this property can be queried with the
<TT>getDefaultCloseOperation</TT> method.
<P>
The <TT>HIDE_ON_CLOSE</TT> option is typically used for dialog
boxes that interact with the user but do not alter the application
data until the dialog box is dismissed. The results of the user
interaction are read from the dialog box after it has been hidden.
The code that uses the dialog box is responsible for disposal
of the dialog when it is no longer required. This mode can also
be used if the same dialog box is reused multiple times.
<P>
The <TT>DISPOSE_ON_CLOSE</TT> option is useful for dialog boxes
that update the application data as the user interacts with the
dialog box. The updates can be performed via <TT>propertyChange</TT>
notifications or by directly calling application methods. Using
<TT>propertyChange</TT> events requires less knowledge of the
application in the dialog box and makes dialog box reuse easier.
In this situation, there is not any postmortem processing required,
so the <TT>JDialog</TT> class can hide and dispose of the dialog
box.
<P>
The <TT>DO_NOTHING_ON_CLOSE</TT> option can be used for dialog
boxes that verify state information before allowing the dialog
box to be closed. If the state is acceptable, the dialog box will
be closed. If not, an error is reported to the user, and the dialog
box remains open.
<H2><A NAME="TTFONTSIZEJDialogFONTTTFONTSIZEClassUsageExampleFONT">
<TT>JDialog</TT> Class Usage
Example</A></H2>
<P>
In the previous chapter, the <TT>ColorEditor</TT> component was
presented. The <TT>ColorEditor</TT> contains components that allow
the foreground and background colors to be visually specified.
It would be useful to present this component in a dialog box to
allow the user to change colors.
<P>
Depending on the required dialog box usage, the JFC provides multiple
methods to present a <TT>ColorEditor</TT> instance in a dialog
box. As was seen in <A HREF="..\ch18\ch18.htm" >Chapter 18</A>, &quot;<TT>JOptionPane</TT>,&quot;
the <TT>JOptionPane</TT> can be used. For example, the following
code will display the dialog box shown in Figure 20.1.
<P>
<A HREF="javascript:popUp('f20-1.gif')"><B>Figure 20.1 :</B> <I>ColorEditor dialog box using JOptionPane</I>.</A>
<BR>
<BLOCKQUOTE>
<PRE>
package com.foley.test;

import javax.swing.*;

/**
 * An application that displays a ColorEditor in a JOptionPane dialog box.
 *
 * @author Mike Foley
 **/
public class ColorEditorTest extends Object { 
    
    /**
     * Application entry point.
     * Display a dialog box using the JOptionPane class.
     *
     * @param args Command line parameter. Not used.
     **/
    public static void main( String args[] ) { 

        JOptionPane.showOptionDialog( parent, 
                              new ColorEditor(),
                              &quot;ColorEditor Dialog&quot;, 
                              JOptionPane.OK_CANCEL_OPTION,
                              JOptionPane.PLAIN_MESSAGE,
                              null, null, null );
       System.exit(0);

    }  // main

}  // ColorEditorTest
</PRE>
</BLOCKQUOTE>
<P>
Using the <TT>JOptionPane</TT> to present a component in a dialog
box is sufficient in many situations. However, when more control
is desired, the <TT>JDialog</TT> class can be used. A primary
reason is if you require a non-modal dialog box.
<H3><A NAME="NonModalDialogBoxUsingaTTFONTSIZEPropertyChangeListenerFONTTT">
Non-Modal Dialog Box Using a <TT>PropertyChangeListener</TT>
</A></H3>
<P>
This section presents a version of the <TT>ColorEditor</TT> dialog
box using a non-modal dialog box. The dialog box contains an instance
of the <TT>ColorEditor</TT> class created in <A HREF="..\ch19\ch19.htm" >Chapter 19</A>, &quot;Choice
Dialog Boxes.&quot; The calling application listens for property
change events occurring in the dialog box. When such an event
occurs, the colors are updated in the application.
<P>
The <TT>DialogColorEditorTest</TT> application shown next produces
the dialog box shown in Figure 20.2. The <TT>ColorEditor</TT>
is created and placed in a border. An OK and Cancel button are
added to a <TT>JPanel</TT> instance. Both panels are added to
the content pane of the dialog box. If a component is added to
the <TT>JDialog</TT> directly, a <TT>RuntimeException</TT> is
thrown. Finally, the dialog box is packed and shown. It is important
to call the <TT>pack</TT> method for the dialog box before showing
it. The <TT>pack</TT> method will calculate the desired size for
the dialog box. The default size is a width and height of 0. With
this size, the dialog box will not be displayed. The dialog box
in this example uses the default modality, which is non-modal.
When the <TT>show</TT> method is called, the dialog box will not
be modal and the code will not block.
<P>
<A HREF="javascript:popUp('f20-2.gif')"><B>Figure 20.2 :</B> <I>ColorEditor dialog box using the JDialog
class</I>.</A><BR>
<BLOCKQUOTE>
<PRE>
package com.foley.test;

import java.awt.*;

import javax.swing.*;

import com.foley.utility.ColorEditor;


/**
 * An application that displays a ColorEditor in a JDialog
 * dialog box.
 *
 * @author Mike Foley
 **/
public class DialogColorEditorTest extends Object { 
    
    /**
     * Application entry point.
     * Display a dialog box using the JOptionPane class.
     *
     * @param args Command line parameter. Not used.
     **/
    public static void main( String args[] ) { 

        ColorEditor colorEditor = new ColorEditor();
        colorEditor.setBorder( BorderFactory.createLoweredBevelBorder() );
        JDialog dialog = new JDialog( null, &quot;ColorEditor Dialog&quot; );
        dialog.getContentPane().add( BorderLayout.CENTER, colorEditor );
                
        JPanel buttonPanel = new JPanel();
        buttonPanel.add( new JButton( &quot;OK&quot; ) );
        buttonPanel.add( new JButton( &quot;Cancel&quot; ) );
        dialog.getContentPane().add( BorderLayout.SOUTH, buttonPanel );
        dialog.pack();
        dialog.show();

        // System.exit(0);

    }  // main

}  // DialogColorEditorTest
</PRE>
</BLOCKQUOTE>
<P>
The code in the listing displays the dialog box, but doesn't contain
any functionality. It may be desirable to have the color editor
remain non-modal. To add functionality to the non-modal version
of the <TT>ColorEditor</TT>, a <TT>PropertyChangeListener</TT>
can be used. When colors are altered in the <TT>ColorEditor</TT>,
<TT>EDITED_FOREGROUND_PROPERTY</TT> and <TT>EDITED_BACKGROUND_PROPERTY</TT>
property change events are fired.
<P>
The property change listener inner class is shown next. This code
simply detects which property has changed, queries the new color
from the event, and calls the appropriate method to alter the
color. Notice that when checking the property name, the <TT>==</TT>
operation can be used rather than the <TT>String.equals</TT> method.
This is because the property names are defined as constants in
the <TT>ColorEditor</TT> class, and the property name in the event
will be the same instance as the constant defined in the <TT>ColorEditor</TT>
class.
<BLOCKQUOTE>
<PRE>
colorEditor.addPropertyChangeListener( new PropertyChangeListener() { 
    public void propertyChange( PropertyChangeEvent event ) { 
if( event.getPropertyName() == 
            ColorEditor.EDITED_FOREGROUND_PROPERTY ) { 
            Color foreground = ( Color )event.getNewValue();
            // Update foreground color
        }  else if( event.getPropertyName() == 
            ColorEditor.EDITED_BACKGROUND_PROPERTY ) { 
            Color background = ( Color )event.getNewValue();
            // Update background color.
        } 
    } 
}  );
</PRE>
</BLOCKQUOTE>
<P>
Using this property change listener, the dialog box updates colors
from the <TT>ColorEditor</TT>. Unfortunately, the dialog box doesn't
go away when the buttons are pressed. This is because you are
not listening for action events from the buttons. Since the colors
are continuously being updated from the property change events,
the OK button only needs to close the dialog box. The Cancel button
should also close the dialog box; however, it should also restore
the original colors. A single <TT>ActionListener</TT>, shown in
the following code, was created for this task. It hides and disposes
of the dialog box. The action command is checked, and, if it is
the Cancel button that fired the action, the original colors are
restored. This example assumes that the application saves the
original colors before the dialog box is opened, and provides
a method to restore the saved colors. These methods are not presented
in the example.
<BLOCKQUOTE>
<PRE>
ActionListener actionListener = new ActionListener() { 
    public void actionPerformed( ActionEvent event ) { 
        dialog.setVisible( false );
        dialog.dispose();
        if( event.getActionCommand().equals( &quot;Cancel&quot; ) ) { 
            // Reset Colors.
        } 
    } 
} ;
JButton ok = new JButton( &quot;OK&quot; );
JButton cancel = new JButton( &quot;Cancel&quot; );
ok.addActionListener( actionListener );
cancel.addActionListener( actionListener );
                
buttonPanel.add( ok );
buttonPanel.add( cancel );
</PRE>
</BLOCKQUOTE>
<P>
Finally, since you are not caching this dialog box for reuse,
the <TT>close</TT> operation should be set to dispose of the dialog
box. This is done with the following line of code.
<P>
<TT>dialog.setDefaultCloseOperation( DISPOSE_ON_CLOSE
);</TT>
<P>
These previous code examples are combined to create the complete
<TT>ColorChooserDialog</TT> class shown in Listing 20.1.
<P>
<HR>
<P>
<B>Listing 20.1&nbsp;&nbsp;The </B><TT><B>COLORCHOOSERDIALOG</B></TT><B>
Application<BR>
</B>
<BLOCKQUOTE>
<PRE>
package com.foley.test;

import java.awt.*;
import java.awt.event.*;
import java.beans.*;

import javax.swing.*;

import com.foley.utility.ColorEditor;


/**
 * An application that displays a ColorEditor in a JDialog
 * dialog box.
 *
 * @author Mike Foley
 **/
public class ColorChooserDialog extends Object { 
    
    /**
     * Application entry point.
     * Display a dialog box using the JOptionPane class.
     *
     * @param args Command line parameter. Not used.
     **/
    public static void main( String args[] ) { 

        ColorEditor colorEditor = new ColorEditor();
        colorEditor.setBorder( BorderFactory.createLoweredBevelBorder() );
        final JDialog dialog = new JDialog( null, &quot;ColorEditor Dialog&quot; );
        dialog.getContentPane().add( BorderLayout.CENTER, colorEditor );
                
                
        colorEditor.addPropertyChangeListener( new PropertyChangeListener
() { 
            public void propertyChange( PropertyChangeEvent event ) { 
                if( event.getPropertyName() == 
                    ColorEditor.EDITED_FOREGROUND_PROPERTY ) { 
                    Color foreground = ( Color )event.getNewValue();
                    // Update foreground color
                }  else if( event.getPropertyName() == 
                    ColorEditor.EDITED_BACKGROUND_PROPERTY ) { 
                    Color background = ( Color )event.getNewValue();
                    // Update background color.
                } 
            } 
        }  );
                
        JPanel buttonPanel = new JPanel();
        ActionListener actionListener = new ActionListener() { 
            public void actionPerformed( ActionEvent event ) { 
                dialog.setVisible( false );
                dialog.dispose();
                if( event.getActionCommand().equals( &quot;Cancel&quot; ) ) { 
                    // Reset Colors.
                } 
            } 
        } ;
        JButton ok = new JButton( &quot;OK&quot; );
        JButton cancel = new JButton( &quot;Cancel&quot; );
        ok.addActionListener( actionListener );
        cancel.addActionListener( actionListener );
                
        buttonPanel.add( ok );
        buttonPanel.add( cancel );
        
        dialog.getContentPane().add( BorderLayout.SOUTH, buttonPanel );

        dialog.setDefaultCloseOperation( JDialog.DISPOSE_ON_CLOSE );
        dialog.pack();
        dialog.show();

    }  // main

}  // ColorChooserDialog
</PRE>
</BLOCKQUOTE>
<HR>
<P>
<H3><A NAME="NonModalTTFONTSIZEColorEditorFONTTTFONTSIZEDialogBoxFONT">
Non-Modal <TT>ColorEditor</TT>
Dialog Box</A></H3>
<P>
The previous section presented a complete example of a non-modal
dialog box where a property change listener was used to update
the application as the colors were edited in the dialog box. Special
processing had to be performed to allow the user to cancel the
edits already performed. This is a useful dialog model for many
situations, but not all. If the <TT>ColorEditor</TT> forces the
entire application to be redrawn each time the color is changed
in the editor, this could cause undesirable painting of the application.
Also, if the operation being performed takes a significant amount
of processing time, the dialog box will appear sluggish to the
user.
<P>
Changing the <TT>ColorEditor</TT> dialog box to wait until the
user chooses the OK button is a simple modification. The property
change listener is not required, so it is not created or added
to the <TT>ColorEditor</TT> component. The <TT>ActionListener</TT>
has been modified as presented in the following code. In this
version of the <TT>ActionListener</TT>, the dialog box is first
hidden. If the OK button caused the action, the colors are retrieved
from the dialog box and updated in the application. If the Cancel
button caused the action event, the colors will not be modified.
Finally, the dialog box is disposed of. The <TT>dispose</TT> method
must be called after the colors have been retrieved from the dialog
box, or the dialog box reference will not be valid for querying
the colors selected by the user.
<BLOCKQUOTE>
<PRE>
ActionListener actionListener = new ActionListener() { 
    public void actionPerformed( ActionEvent event ) { 
        dialog.setVisible( false );
        if( event.getActionCommand().equals( &quot;OK&quot; ) ) { 
            Color foreground = colorEditor.getEditedForegound();
            Color background = colorEditor.getEditedBackgound();
            // Set the colors.
        } 
        dialog.dispose();
    } 
} ;
</PRE>
</BLOCKQUOTE>
<H3><A NAME="ModalTTFONTSIZEColorEditorFONTTTFONTSIZEDialogBoxFONT">
Modal <TT>ColorEditor</TT>
Dialog Box</A></H3>
<P>
There may be situations where it is desirable to have the <TT>ColorEditor</TT>
instance dialog box be a modal. Changing the <TT>ColorEditor</TT>
dialog box to be modal can be done by simply adding a call to
the <TT>setModal</TT> method with a parameter of <TT>true</TT>
before the non-modal dialog box in the previous section is displayed.
For modal dialog boxes, the calling code is blocked by the <TT>show</TT>
method. It is often convenient to have the dialog box return the
action the user took rather than using an <TT>ActionListener</TT>.
This allows the code that processes the results from the dialog
box to be placed immediately after the call to the <TT>show</TT>
method. This is similar to the <TT>show <I>XXX</I> Dialog</TT>
methods provided by the <TT>JOptionPane</TT> class. It is easiest
to create this type of dialog box by extending the <TT>JDialog</TT>
class.
<P>
The <TT>ColorEditorDialog</TT> class is an extension of the <TT>JDialog</TT>
class. Its visual appearance is identical to the dialog boxes
presented in the previous sections and shown in Figure 20.2. The
<TT>ColorEditorDialog</TT> class creates the content panel components
in its constructor presented in Listing 20.2. The code is very
similar to that used in the previous sections. The <TT>buttonHit</TT>
attribute was added to allow the blocking <TT>showDialog</TT>
method to return which button was used to dismiss the dialog box.
This attribute is initialized to <TT>JOptionPane.CLOSED_OPTION</TT>.
This constant will be returned if the dialog box is dismissed
without hitting either the OK or Cancel button. The action listener
for the buttons hide the dialog box and sets the <TT>buttonHit</TT>
attribute to the appropriate button. The dialog box is not disposed
of, because the calling code may need to query the edited colors
from the dialog box. It is the responsibility of the client code
to dispose of the dialog box.
<P>
Two versions of the constructor are provided. One that uses the
default colors in the <TT>ColorEditor</TT>, and another that allows
the calling code to specify the initial foreground and background
colors in the editor. Either of these parameters can be <TT>null</TT>.
If either parameter is <TT>null</TT>, the default color will be
used. The <TT>ColorEditorDialog</TT> constructors specify the
title to be used for the dialog box by specifying the title string
in the call to the <TT>JDialog</TT> constructor.
<P>
<HR>
<P>
<B>Listing 20.2&nbsp;&nbsp;The </B><TT><B>COLOREDITORDIALOG</B></TT><B>
Class<BR>
</B>
<BLOCKQUOTE>
<PRE>
package com.foley.dialogs;

import java.awt.*;
import java.awt.event.*;

import javax.swing.*;

import com.foley.utility.ColorEditor;


/** 
 * The ColorEditorDialog is a class which implements a
 * modal dialog box allowing the visual editing of the
 * foreground and background colors.
 * &lt;p&gt;
 * The showDialog box is used to display the dialog.  This
 * method blocks until the dialog is dismissed.  The value
 * returned from this method specifies how the dialog was
 * dismissed.
 * &lt;p&gt;
 * Methods are provided to query the edited colors from the
 * dialog.
 **/
public class ColorEditorDialog extends JDialog { 
        
    /**
     * The color editor used in the dialog.
     **/
    private ColorEditor colorEditor;
    
    /**
     * The code returned from the showDialog method.
     * This value is defined by the values defined in JOptionPane.
     **/
    private int buttonHit;

    /**
     * ColorEditorDialog, constructor
     * &lt;p&gt;
     * Create a ColorEditingDialog with default colors.
     * &lt;p&gt;
     * @param parent The Frame to use as the dialog's parent.
     **/
    public ColorEditorDialog( Frame parent ) { 
        this( parent, null, null );
} 
    
    
    /**
     * ColorEditorDialog, constructor
     * &lt;p&gt;
     * Create the contents of the ColorEditor dialog.
     * Add the action listeners to the buttons to close the dialog.
     * &lt;p&gt;
     * @param parent The Frame to use as the dialog's parent.
     * @param foreground The initial foreground color for the editor.
     * @param background The initial background color for the editor.
     **/
    public ColorEditorDialog( Frame parent, 
           Color foreground, Color background ) { 
        
        super( parent, &quot;ColorEditor Dialog&quot; );
        
        //
        // HIDE_ON_CLOSE is the default.
        // We rely on this functionality, as it is valid
        // to call methods on the dialog after it is closed.
        //
        setDefaultCloseOperation( JDialog.HIDE_ON_CLOSE );
        
        //
        // Default to CLOSED_OPTION.  If a button is hit,
        // then the return value will be set to the button.
        //
        buttonHit = JOptionPane.CLOSED_OPTION;
        
        //
        // Create the content of the dialog.
        //
        colorEditor = new ColorEditor( foreground, background );
        colorEditor.setBorder( BorderFactory.createLoweredBevelBorder());
        
        getContentPane().add( BorderLayout.CENTER, colorEditor );
        
        JPanel buttonPanel = new JPanel();
        
        //
        // The button action listener hides the dialog, and sets
        // the returned value attribute to which button was hit.
        //
        ActionListener actionListener = new ActionListener() { 
            public void actionPerformed( ActionEvent event ) { 
                setVisible( false );
                if( event.getActionCommand().equals( &quot;OK&quot; ) ) { 
                    buttonHit = JOptionPane.OK_OPTION;
                } 
                if( event.getActionCommand().equals( &quot;Cancel&quot; ) ) { 
                    buttonHit = JOptionPane.CANCEL_OPTION;
                } 
            } 
        } ;
        JButton ok = new JButton( &quot;OK&quot; );
        JButton cancel = new JButton( &quot;Cancel&quot; );
        ok.addActionListener( actionListener );
        cancel.addActionListener( actionListener );
                
        buttonPanel.add( ok );
        buttonPanel.add( cancel );
        getContentPane().add( BorderLayout.SOUTH, buttonPanel );
                
    }  // ColorEditorDialog
    
    
    /**
     * @return The chosen foreground color.
     **/
    public Color getEditedForegoundColor() { 
        return( colorEditor.getEditedForegoundColor() );
    } 
    
    
    /**
     * @return The chosen background color.
     **/
    public Color getEditedBackgoundColor() { 
        return( colorEditor.getEditedBackgoundColor() );
    } 
            
    
    /**
     * show, overrides JDialog
     * &lt;p&gt;
     * We do not want the 'normal' show to be called.  Instead,
     * the showDialog should be used.
     **/
    public void show() { 
        throw new RuntimeException( &quot;show may not be called for &quot;
                                    + |the ColorEditorDialog.&quot;
                                    + &quot;  Use showDialog instead.&quot; );
    }  // show
    
    
    /**
     * showDialog
     * &lt;p&gt;
     * The preferred method for displaying the dialog.
     * This method blocks until the dialog is dismissed, and
     * returns how the dialog was dismissed.
     * &lt;p&gt;
     * @return How the dialog was dismissed.  Valid return values are:
     *              JOptionPane.OK_OPTION;
     *              JOptionPane.CANCEL_OPTION;
     *              JOptionPane.CLOSED_OPTION;
     **/
    public int showDialog() { 
        
        setModal( true );
        pack();
        super.show();

        return( buttonHit );
        
    }  // showDialog
    
}  // ColorEditorDialog
</PRE>
</BLOCKQUOTE>
<HR>
<P>
The <TT>showDialog</TT> method is provided to display the dialog
box and return the operation that was used by the user to dismiss
the dialog box. This method blocks the caller's code until the
dialog box is dismissed. Setting the dialog box to modal and calling
the <TT>show</TT> method in the <TT>JDialog</TT> class will implement
this functionality. The <TT>buttonHit</TT> attribute can be returned
to the calling program after the dialog box is dismissed. A common
programming error when using the <TT>ColorEditorDialog</TT> class
would be to call the <TT>show</TT> method instead of the <TT>showDialog</TT>
method. To help programmers find this error, the <TT>show</TT>
method is overridden from the <TT>show</TT> method in the <TT>JDialog</TT>
class, and it throws a runtime exception explaining the error.
The overridden <TT>show</TT> method and the <TT>showDialog</TT>
methods are shown Listing 20.2.
<P>
Finally, a pair of methods are provided to determine which values
the user specified in the <TT>ColorEditor</TT>. The <TT>getEditedForegroundColor</TT>
and <TT>getEditedBackgroundColor</TT> methods are provided to
return the colors selected by the user. Each of these methods
simply calls the corresponding method in <TT>ColorEditor</TT>
and returns the color.
<H2><A NAME="Summary">
Summary</A></H2>
<P>
The <TT>JDialog</TT> class provides a frame in which any other
components can be placed. The frame can be modal or non-modal.
This provides the utmost in flexibility for dialog boxes.
<P>
This chapter presented an evolution of dialog boxes for a color
editor. Various techniques for reporting the choices made in the
dialog box to the calling application were explored. <TT>PropertyChangeEvents</TT>,
<TT>ActionEvents</TT>, and blocking <TT>show</TT> methods where
explored. The technique used in your dialog boxes will vary with
the dialog boxes' functions.
<P>
<CENTER>
<HR SIZE=4>

<A HREF="..\ch19\ch19.htm"><IMG SRC="..\button\previous.gif" BORDER="0"></A>
<A HREF="..\index.htm"><IMG SRC="..\button\contents.gif" BORDER="0"></A> 
<A HREF="..\ch21\ch21.htm"><IMG SRC="..\button\next.gif" BORDER="0"></A> 
</p>

<p>&#169; <A HREF="..\copy.htm">Copyright</A>, Macmillan Computer Publishing. All rights reserved.
</CENTER>
</BODY>
</HTML>
