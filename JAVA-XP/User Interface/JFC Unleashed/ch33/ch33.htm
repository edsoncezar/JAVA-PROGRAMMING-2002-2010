<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<SCRIPT LANGUAGE="JavaScript">


<!--

function popUp(pPage) {
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '<link rel="stylesheet" href="/includes/stylesheets/ebooks.css"></head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 figDoc.write(zhtm);
 figDoc.close();
 popUpWin.focus();
 }

//-->


</SCRIPT>
<link rel="stylesheet" href="http://www.szptt.net.cn/includes/stylesheets/ebooks.css">

        <META NAME="GENERATOR" Content="Symantec Visual Page 1.0.1">
        <META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
        <TITLE>JFC -- Chapter 33 - Accessibility </TITLE>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<CENTER>
<H1><IMG SRC="..\button\sams.gif" BORDER="0"></H1>

<P><A HREF="..\ch32\ch32.htm"><IMG SRC="..\button\previous.gif" BORDER="0"></A>
<A HREF="..\index.htm"><IMG SRC="..\button\contents.gif" BORDER="0"></A> 
<A HREF="..\ch34\ch34.htm"><IMG SRC="..\button\next.gif" BORDER="0"></A> 


<H1>JFC Unleashed</H1></CENTER>
<HR>


<H1>Chapter&nbsp;33<br>
Accessibility</H1>
<HR>
<p>

<UL>
<LI><A HREF="#AboutAccessibilityandAssistiveTechnologies">
About Accessibility and Assistive Technologies</A>
<LI><A HREF="#OverviewofJDKSupportforAccessibility">
Overview of JDK Support for Accessibility</A>
<UL>
<LI><A HREF="#BasicAccessibilityInformation">
Basic Accessibility Information</A>
<LI><A HREF="#ExtendedAccessibilityInformation">
Extended Accessibility Information</A>
</UL>
<LI><A HREF="#SupportingAccessibilityinJFCApplications">
Supporting Accessibility in JFC Applications</A>
<UL>
<LI><A HREF="#TheTTFONTSIZEAccessibleFONTTTFONTSIZEInterfaceFONT">
The <TT>Accessible</TT> Interface
</A>
<LI><A HREF="#TheTTFONTSIZEAccessibleContextFONTTTFONTSIZEClassFONT">
The <TT>AccessibleContext</TT>
Class</A>
<LI><A HREF="#GuidelinesforCreatingAccessibleApplications">
Guidelines for Creating Accessible Applications</A>
</UL>
<LI><A HREF="#SupportingAccessibilityinCustomComponents">
Supporting Accessibility in Custom Components</A>
<UL>
<LI><A HREF="#TheTTFONTSIZEAccessibleActionFONTTTFONTSIZEInterfaceFONT">
The <TT>AccessibleAction</TT>
Interface</A>
<LI><A HREF="#TheTTFONTSIZEAccessibleComponentFONTTTFONTSIZEInterfaceFONT">
The <TT>AccessibleComponent</TT>
Interface</A>
<LI><A HREF="#TheTTFONTSIZEAccessibleSelectionFONTTTFONTSIZEInterfaceFONT">
The <TT>AccessibleSelection</TT>
Interface</A>
<LI><A HREF="#TheTTFONTSIZEAccessibleTextFONTTTFONTSIZEInterfaceFONT">
The <TT>AccessibleText</TT>
Interface</A>
<LI><A HREF="#TheTTFONTSIZEAccessibleValueFONTTTFONTSIZEInterfaceFONT">
The <TT>AccessibleValue</TT>
Interface</A>
<LI><A HREF="#TheTTFONTSIZEAccessibleBundleFONTTTFONTSIZEClassFONT">
The <TT>AccessibleBundle</TT>
Class</A>
<LI><A HREF="#TheTTFONTSIZEAccessibleRoleFONTTTFONTSIZEClassFONT">
The <TT>AccessibleRole</TT>
Class</A>
<LI><A HREF="#TheTTFONTSIZEAccessibleStateFONTTTFONTSIZEClassFONT">
The <TT>AccessibleState</TT>
Class</A>
<LI><A HREF="#TheTTFONTSIZEAccessibleStateSetFONTTTFONTSIZEClassFONT">
The <TT>AccessibleStateSet</TT>
Class</A>
</UL>
<LI><A HREF="#CreatingAssistiveTechnologies">
Creating Assistive Technologies</A>
<UL>
<LI><A HREF="#TheJavaAccessibilityUtilities">
The Java Accessibility Utilities</A>
<LI><A HREF="#AutomaticLoadingofAssistiveTechnologies">
Automatic Loading of Assistive Technologies</A>
</UL>
<LI><A HREF="#Summary">
Summary</A>
</UL>

<HR>
<P>
As computers become more prevalent in the home and in the workplace,
it becomes increasingly important to design applications with
user interfaces that are accessible to everyone, including those
people with limited abilities to view a display or manipulate
a mouse or keyboard. The JDK provides built-in support for <I>assistive
technologies</I>-technologies that provide accessibility
to accommodate users with limited abilities.
<P>
In this chapter you will learn
<UL>
<LI>Why it is important to enable your applications to support
assistive technologies<BR>
Applications that are designed to be accessible can be used by
a larger percentage of the general population. Some governments
and universities are beginning to require that certain purchased
software products meet accessibility requirements.
<LI>About assistive technologies and how they operate<BR>
There is a wide range of existing assistive technologies with
new technologies being developed every year. Examples of existing
assistive technologies include screen magnifiers and speech recognition
systems.
<LI>How to enable your applications to support assistive technologies
<BR>
All of the Swing components are implemented to support accessibility.
If you're using Swing components, it's relatively easy to create
accessible Java applets and applications.
</UL>
<H2><A NAME="AboutAccessibilityandAssistiveTechnologies">
About Accessibility and Assistive Technologies</A></H2>
<P>
In the general sense, assistive technologies include any technology
that allows people with limited abilities to perform tasks they
could not perform otherwise. Wheelchair ramps at curbs and closed-captioning
on television programs are general examples of assistive technologies.
<P>
In the realm of computers, assistive technologies allow people
with limited vision, hearing, or movement ability to operate the
user interface of applications. Examples of assistive technologies
on computers include screen readers and magnifiers, speech recognition
systems, text-to-speech converters, and keyboard mnemonics.
<P>
The United States has passed legislation (Section 508 of the Federal
Rehabilitation Act, the Americans with Disabilities Act, and the
Telecommunications Act of 1996) to encourage support for accessibility
in education and the workplace and in technology-related government
purchases. There is strong sensitivity to accessibility in Europe
and Japan as well. 
<H2><A NAME="OverviewofJDKSupportforAccessibility">
Overview of JDK Support for Accessibility</A></H2>
<P>
JFC provides three areas of support for accessibility:
<UL>
<LI>The Java Accessibility API allows applications to operate
with assistive technologies. 
<LI>Utility classes provide support for implementing assistive
technologies.
<LI>Pluggable look-and-feel also provides support for implementing
certain types of assistive technologies. 
</UL>
<P>
The Java Accessibility API defines a contract between the user-interface
components used by applications and the assistive technologies
that provide access to accessible applications. To make your application
accessible, you must fully implement this API in all of your user-interface
components.
<P>
In addition to the Java Accessibility API, there is a collection
of utility classes that support the implementation of assistive
technologies. If you're not actually creating an assistive technology,
you won't need to use these utility classes, but learning a bit
about them will give you a better understanding of how assistive
technologies operate. 
<P>
JFC's pluggable look-and-feel provides a way to make applications
accessible without the use of separate assistive technologies.
For example, you could create a look-and-feel that uses large
fonts or high-contrast colors for users with impaired vision.
You could also create a look-and-feel that presents the user interface
on devices other than a visual display. Examples of such alternate
interface devices include tactile (Braille) and audio devices.
For more information on using JFC's pluggable look-and-feel capabilities,
see <A HREF="..\ch30\ch30.htm" >Chapter 30</A> &quot;Pluggable Look-and-Feel.&quot;
<p>
<CENTER>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1>
<TR VALIGN=TOP><TD WIDTH=600><B>NOTE</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=600>
<BLOCKQUOTE>
The Java Accessibility utility classes are not a part of the JDK. These classes, along with several examples of assistive technologies, are available in the Java Accessibility down- load available from JavaSoft.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
</CENTER>
<P>
<H3><A NAME="BasicAccessibilityInformation">
Basic Accessibility Information</A></H3>
<P>
The following list describes the basic types of accessibility
information that all accessible components provide through the
<TT>AccessibleContext</TT> class.
<UL>
<LI>The name of the component
<LI>A short description of the component's function
<LI>The role of the component
<LI>The state of the component
</UL>
<P>
The <I>name</I> and <I>description</I>
are specific to how you are using the component in your application.
For example, for a File, Open menu item, the accessible name could
be &quot;Open&quot; and the accessible description could be &quot;Opens
a file.&quot; Components, such as textual menus and buttons, will
automatically generate an accessible name from the text supplied
to the constructor or set with the <TT>setText</TT> method. Components
with ToolTips will generate an accessible description from the
ToolTip text. You should ensure that all of your user interface
components have an accessible name and description.
<P>
The <I>role</I> is an intrinsic property
of the component that describes its function. The role property
is not set by applications. Examples of accessible roles for some
of the Swing components include <TT>window</TT>, <TT>frame</TT>,
<TT>list</TT>, <TT>menubar</TT>, and <TT>pushbutton</TT>. The
<TT>AccessibleRole</TT> class defines role identifier constants
for all of the Swing components. Assistive technologies can make
use of these roles in a programmatic manner to navigate a user
interface.
<P>
The <I>state</I> is also an intrinsic
property of the component and is not directly set by applications
(although applications can indirectly change a component's state
by executing actions on the component). The <TT>AccessibleStateSet</TT>
class, a collection of individual <TT>AccessibleState</TT> objects,
is used to represent a component's state. Examples of component
states include <TT>active</TT>, <TT>pressed</TT>, <TT>checked</TT>,
<TT>editable</TT>, and <TT>focused</TT>.
<P>
Note that component role and state are programmatically accessed
by the identifier constants defined in the <TT>AccessibleRole</TT>
and <TT>AccessibleState</TT> classes. The examples presented in
the previous two paragraphs present the human-readable forms of
role and state that are also available through these classes.
<H3><A NAME="ExtendedAccessibilityInformation">
Extended Accessibility Information</A></H3>
<P>
In addition to basic accessibility information, most components
provide extended <BR>
accessibility information. The following list describes the different
types of extended accessibility information. The <TT>AccessibleContext</TT>
class provides methods to get objects representing extended accessibility
information.
<UL>
<LI>Actions that the component can perform
<LI>Attributes of the component's graphical representation
<LI>The current selection if the component contains selectable
children
<LI>Editable text contained by the component
<LI>The numerical value represented by the component
</UL>
<P>
Classes used to represent extended accessibility information in
Swing components include <TT>AccessibleAction</TT>, <TT>AccessibleComponent</TT>,
<TT>AccessibleSelection</TT>, <TT>AccessibleText</TT>, and <TT>AccessibleValue</TT>.
Most of these classes are interface classes that are implemented
by the components using them. 
<P>
Support for extended accessibility information is fully implemented
in all of the Swing components-you don't really need to be concerned
with extended accessibility information unless you're creating
a custom component by subclassing <TT>JComponent</TT> or creating
an assistive technology application. See &quot;Supporting Accessibility
in Custom Components,&quot; later in this chapter, for a discussion
of extended accessibility classes.
<H2><A NAME="SupportingAccessibilityinJFCApplications">
Supporting Accessibility in JFC Applications</A></H2>
<P>
To be accessible, user-interface components must fully implement
the Java Accessibility API, a collection of interfaces and classes
that allow components to be observed and operated by an assistive
technology. All of the Swing components are designed to be accessible,
and, as a result, it's relatively easy to create an accessible
JFC application.
<P>
The basic Java Accessibility classes are the <TT>Accessible</TT>
interface and the <TT>AccessibleContext</TT> class. All Swing
components implement the <TT>Accessible</TT> interface to provide
a method to get an <TT>AccessibleContext</TT> object containing
the component's accessibility information.
<H3><A NAME="TheTTFONTSIZEAccessibleFONTTTFONTSIZEInterfaceFONT">
The <TT>Accessible</TT> Interface
</A></H3>
<P>
The <TT>Accessible</TT> interface is an interface that all accessible
components must implement.
<BLOCKQUOTE>
<PRE>
public interface Accessible extends Object { 
    public abstract AccessibleContext getAccessibleContext();
} 
</PRE>
</BLOCKQUOTE>
<P>
<TT>Accessible</TT> has a single method, <TT>getAccessibleContext</TT>,
which returns an <TT>AccessibleContext</TT> object. The <TT>AccessibleContext</TT>
object provides access to all of the accessibility information
about a component. You should always check the return value from
<TT>getAccessibleContext</TT> to ensure that it is not <TT>null</TT>
and that the component is indeed accessible.
<H3><A NAME="TheTTFONTSIZEAccessibleContextFONTTTFONTSIZEClassFONT">
The <TT>AccessibleContext</TT>
Class</A></H3>
<P>
The <TT>AccessibleContext</TT> class represents the basic accessibility
information maintained by an accessible component (see Listing
33.1). The basic accessibility information includes the component's
name, description, role, and state. <TT>AccessibleContext</TT>
also provides methods to get the accessible parent and children
of the component, as well as methods to access extended accessibility
information contained in <TT>AccessibleAction</TT>, <TT>AccessibleComponent</TT>,
<TT>AccessibleSelection</TT>, <TT>AccessibleText</TT>, and <TT>AccessibleValue</TT>
objects.
<P>
<HR>
<P>
<B>Listing 33.1&nbsp;&nbsp;</B><TT><B>ACCESSIBLECONTEXT</B></TT><B>
Class Signature<BR>
</B>
<BLOCKQUOTE>
<PRE>
public abstract class AccessibleContext extends Object 
{ 
  // PropertyChangeEvent constants
    public static final String ACCESSIBLE_CARET_PROPERTY;
    public static final String ACCESSIBLE_DESCRIPTION_PROPERTY;
    public static final String ACCESSIBLE_NAME_PROPERTY;
    public static final String ACCESSIBLE_SELECTION_PROPERTY;
    public static final String ACCESSIBLE_STATE_PROPERTY;
    public static final String ACCESSIBLE_TEXT_PROPERTY;
    public static final String ACCESSIBLE_VALUE_PROPERTY;
    public static final String ACCESSIBLE_VISIBLE_DATA_PROPERTY;
  // Protected instance variables
    protected String accessibleDescription;
    protected String accessibleName;
    protected Accessible accessibleParent;
  // Public instance methods
public void addPropertyChangeListener(PropertyChangeListener 
  listener);
    public void firePropertyChange(String property, 
                                   Object old, Object new);
    public abstract Accessible getAccessibleChild(int index);
    public abstract int getAccessibleChildrenCount();
    public String getAccessibleDescription();
    public abstract int getAccessibleIndexInParent();
    public String getAccessibleName();
    public Accessible getAccessibleParent();
    public abstract AccessibleRole getAccessibleRole();
    public abstract AccessibleStateSet getAccessibleStateSet();
    public AccessibleAction getAccessibleAction();
    public AccessibleComponent getAccessibleComponent();
    public AccessibleSelection getAccessibleSelection();
    public AccessibleText getAccessibleText();
    public AccessibleValue getAccessibleValue();
    public abstract Locale getLocale();
public void removePropertyChangeListener(PropertyChangeListener 
  listener);
    public void setAccessibleDescription(String description);
    public void setAccessibleName(String name);
    public void setAccessibleParent(Accessible parent);
}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
There is no constructor provided for <TT>AccessibleContext</TT>.
Instead, all accessible components implement the <TT>Accessible</TT>
interface, which contains the <TT>getAccessibleContext</TT> method
to return an <TT>AccessibleContext</TT> object. For example, the
following code gets an <TT>AccessibleContext</TT> object and calls
its <TT>setAccessibleName</TT> method to set a component's accessible
name.
<P>
<TT>getAccessibleContext().setAccessibleName(&quot;First
text field&quot;);</TT>
<P>
There are only two methods in <TT>AccessibleContext</TT> you need
to use to make your applications accessible. <TT>setAccessibleName</TT>
sets the accessible name for the component, and <TT>setAccessibleDescription</TT>
sets the accessible description. All visible components should
have an accessible name and accessible description. However, you
don't always have to explicitly set these attributes. Components
that display a name, such as textual buttons and menus, will use
their name as the accessible name. Likewise, components with ToolTips
will use the ToolTip text as the accessible description. For components
that don't display a textual name or don't have a ToolTip, you'll
have to explicitly set the accessible name or description by calling
<TT>setAccessibleName</TT> or <TT>setAccessibleDescription</TT>.
<P>
The remaining members of <TT>AccessibleContext</TT> are used to
make custom components accessible and to create assistive technologies.
These methods are discussed later in this chapter in the &quot;Supporting
Accessibility in Custom Components&quot; and &quot;Creating Assistive
Technologies&quot; sections.
<H3><A NAME="GuidelinesforCreatingAccessibleApplications">
Guidelines for Creating Accessible Applications</A></H3>
<P>
The following is a list of guidelines to help you create accessible
JFC applications:
<UL>
<LI>Use ToolTips on all user-interface components. See Chapter
25, &quot;ToolTips and Debug Graphics,&quot; for details on using
ToolTips. If you don't provide a ToolTip for a user-interface
component, use <TT>AccessibleContext.setAccessibleDescription</TT>
to provide a description of the component's purpose.
<LI>Use keyboard mnemonics whenever possible. Ideally, your interface
should be completely navigable using only the keyboard. See Chapter
29, &quot;Keyboard Navigation,&quot; for details on using mnemonics.
<LI>Whenever you use a <TT>JLabel</TT> object to label a component,
use the <TT>setLabelFor</TT> method to associate the label with
the component. 
<LI>If you use <TT>ImageIcon</TT> objects as part of the user
interface, construct the objects by using the constructor that
allows you to specify a description or else use the <TT>ImageIcon.setDescription</TT>
method to provide a short description of the object.
<LI>Use the <TT>AccessibleContext.setAccessibleName</TT> method
to provide a short name for user-interface components that don't
display text identifying the component's function. Components
such as textual buttons and menus will generate an accessible
name from their identifying text.
<LI>If you're designing your program so it can be internationalized,
be sure to treat all accessible name and description text as you
do other text that will be translated. Normally, text that will
be translated for internationalization is stored in resource bundles.
</UL>
<P>
Don't overlook testing your application's accessibility features.
<H2><A NAME="SupportingAccessibilityinCustomComponents">
Supporting Accessibility in Custom Components</A></H2>
<P>
If you're writing a custom component (a component that extends
directly from the <TT>JComponent</TT> class), you should ensure
the component is accessible by adhering to the following guidelines.
<OL>
<LI>Create an <TT>AccessibleContext</TT> for your component. This
is best handled by creating an inner class that extends from the
<TT>JComponent.AccessibleJComponent</TT> class.<BR>
<TT>AccessibleJComponent</TT> provides default implementations
for many of the <TT>AccessibleContext</TT> methods. You should
provide implementations for the basic <TT>getAccessibleRole</TT>
and <TT>getAccessibleStateSet</TT> methods.<BR>
The following code fragment illustrates the structure of a typical
<TT>AccessibleContext</TT> implementation.
</OL>
<BLOCKQUOTE>
<PRE>
protected class AccessibleCustomComponent 
          extends AccessibleJComponent { 

    // Constructor
    AccessibleCustomComponent() {  super();} 

    // Accessible role info
    public AccessibleRole getAccessibleRole() { 
        return AccessibleRole.CUSTOM_COMPONENT;
    } 

    // Accessible state info
    public AccessibleStateSet getAccessibleStateSet() { 
        // get basic JComponent state set
AccessibleStateSet states = 
  super.getAccessibleStateSet();

        // add states for custom component
        
        return states;
    } 
    
// implement extended accessibility interfaces
} 
</PRE>
</BLOCKQUOTE>
<OL start=2>
<LI>Override the component's <TT>getAccessibleContext</TT> method
to create an instance of its <TT>AccessibleContext</TT> (if it
doesn't exist already), store it in the protected instance variable
<TT>accessibleContext</TT>, and return it to the caller.<BR>
The following is an example of a typical implementation of <TT>getAccessibleContext</TT>.
For this example, <TT>AccessibleCustomComponent</TT> is the name
of the inner class that represents the component's <TT>AccessibleContext</TT>.
</OL>
<BLOCKQUOTE>
<PRE>
public AccessibleContext getAccessibleContext() { 
    if (accessibleContext == null) { 
        accessibleContext = new AccessibleCustomComponent();
    } 
    return accessibleContext;
} 
</PRE>
</BLOCKQUOTE>
<P>

<OL>
Note that the <TT>accessibleContext</TT> variable used to
store the <TT>AccessibleContext</TT> object in this example is
a protected member of the <TT>JComponent</TT> class.
</OL>
<P>

<OL start=3>
<LI>Implement each of the extended accessibility interfaces that
your component requires in the inner class you created in step
1. The extended accessibility interfaces include <TT>AccessibleAction</TT>,
<TT>AccessibleComponent</TT>, <TT>AccessibleSelection</TT>, <TT>AccessibleText</TT>,
and <TT>AccessibleValue</TT>.<BR>
For each extended accessibility interface you implement, override
the corresponding <TT>AccessibleContext</TT> method to return
the object providing extended accessibility support. For example,
if your component supports the <TT>AccessibleText</TT> interface,
override the <TT>getAccessibleText</TT> method to return an instance
of the object implementing <TT>AccessibleText</TT>.
</OL>
<P>
The following sections list and briefly describe each of the JFC
extended accessibility classes.
<H3><A NAME="TheTTFONTSIZEAccessibleActionFONTTTFONTSIZEInterfaceFONT">
The <TT>AccessibleAction</TT>
Interface</A></H3>
<P>
The <TT>AccessibleAction</TT> interface provides a mechanism for
assistive technologies to determine what actions an accessible
component supports and to perform those actions. Examples of accessible
actions include <I>clicking</I> a
button and <I>closing</I> a window.
<P>
You can determine if an object supports the <TT>AccessibleAction</TT>
interface by getting the object's <TT>AccessibleContext</TT> and
calling the <TT>getAccessibleAction</TT> method. A non-<TT>null</TT>
return value indicates that the object supports the <TT>AccessibleAction</TT>
interface.
<P>
Custom components that support actions should implement the <TT>AccessibleAction</TT>
interface and override the <TT>getAccessibleAction</TT> method
in the <TT>AccessibleContext</TT> to return an instance of the
implementation.
<P>
Objects with accessible actions should maintain a list of actions
that can be performed on the object. Actions are referenced by
a zero-based index of their position in the list. The following
code gives the class signature of the <TT>AccessibleAction</TT>
class.
<BLOCKQUOTE>
<PRE>
public interface AccessibleAction extends Object { 
    public abstract int getAccessibleActionCount();
public abstract String getAccessibleActionDescription(int 
  indexAction);
    public abstract boolean doAccessibleAction(int indexAction);
} 
</PRE>
</BLOCKQUOTE>
<P>
The <TT>getAccessibleActionCount</TT> method returns the number
of actions supported by the object. <TT>getAccessibleActionDescription</TT>
retrieves a textual description of a given action. The <TT>doAccessibleAction</TT>
method performs the given action.
<H3><A NAME="TheTTFONTSIZEAccessibleComponentFONTTTFONTSIZEInterfaceFONT">
The <TT>AccessibleComponent</TT>
Interface</A></H3>
<P>
The <TT>AccessibleComponent</TT> interface is a core interface
all visual components must implement to be accessible. You can
determine if an object supports the <TT>AccessibleComponent</TT>
interface by getting the object's <TT>AccessibleContext</TT> and
calling the <TT>getAccessibleComponent</TT> method. A non-<TT>null</TT>
return value indicates that the object supports the <TT>AccessibleComponent</TT>
interface. <TT>AccessibleComponent</TT> provides standard methods
that assistive technologies can use to work with visual components.
Listing 33.2 gives the class signature of the <TT>AccessibleComponent</TT>
interface.
<p>
<HR>
<P>
<B>Listing 33.2&nbsp;&nbsp;</B><TT><B>ACCESSIBLECOMPONENT</B></TT><B>
Class Signature<BR>
</B>
<BLOCKQUOTE>
<PRE>
public interface AccessibleComponent extends Object { 
    public abstract Color getBackground();
    public abstract void setBackground(Color color);
    public abstract Color getForeground();
    public abstract void setForeground(Color color);
    public abstract Cursor getCursor();
    public abstract void setCursor(Cursor cursor);
    public abstract Font getFont();
    public abstract void setFont(Font font);
    public abstract FontMetrics getFontMetrics(Font font);
    public abstract boolean isEnabled();
    public abstract void setEnabled(boolean enable);
    public abstract boolean isVisible();
    public abstract void setVisible(boolean visible);
    public abstract boolean isShowing();
    public abstract boolean contains(Point point);
    public abstract Point getLocationOnScreen();
    public abstract Point getLocation();
    public abstract void setLocation(Point location);
    public abstract Rectangle getBounds();
    public abstract void setBounds(Rectangle bounds);
    public abstract Dimension getSize();
    public abstract void setSize(Dimension );
    public abstract Accessible getAccessibleAt(Point point);
    public abstract boolean isFocusTraversable();
    public abstract void requestFocus();
    public abstract void addFocusListener(FocusListener listener);
    public abstract void removeFocusListener(FocusListener listener);
}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
The <TT>AccessibleJComponent</TT> class (an inner class in <TT>JComponent</TT>)
implements the <TT>AccessibleComponent</TT> interface and provides
default implementations for all of its methods. Most of the <TT>AccessibleComponent</TT>
methods map to a corresponding <TT>JComponent</TT> method of the
same name.
<H3><A NAME="TheTTFONTSIZEAccessibleSelectionFONTTTFONTSIZEInterfaceFONT">
The <TT>AccessibleSelection</TT>
Interface</A></H3>
<P>
The <TT>AccessibleSelection</TT> interface provides a mechanism
for determining the selected children of a component as well as
for selecting and unselecting children. 
<P>
You can determine if an object supports the <TT>AccessibleSelection</TT>
interface by getting the object's <TT>AccessibleContext</TT> and
calling the <TT>getAccessibleSelection</TT> method. A non-<TT>null</TT>
return value indicates that the object supports the <TT>AccessibleSelection</TT>
interface.
<P>
All components with selectable children should implement this
interface and override the <TT>getAccessibleSelection</TT> method
in the <TT>AccessibleContext</TT> to return an instance of the
implementation. Listing 33.3 gives the class signature for the
<TT>AccessibleSelection</TT> interface.<p>
<HR>
<P>
<B>Listing 33.3&nbsp;&nbsp;</B><TT><B>ACCESSIBLESELECTION</B></TT><B>
Class Signature<BR>
</B>
<BLOCKQUOTE>
<PRE>
public interface AccessibleSelection extends Object { 
    public abstract int getAccessibleSelectionCount();
    public abstract Accessible getAccessibleSelection(int childIndex);
    public abstract boolean isAccessibleChildSelected(int childIndex);
    public abstract void addAccessibleSelection(int childIndex);
    public abstract void removeAccessibleSelection(int childIndex);
    public abstract void clearAccessibleSelection();
    public abstract void selectAllAccessibleSelection();
} 
</PRE>
</BLOCKQUOTE>
<HR>
<P>
The <TT>getAccessibleSelectionCount</TT> method returns the number
of selected children. <TT>getAccessibleSelection</TT> returns
a selected child, referenced by a zero-based index value. The
index is based on the list of selected children, not the list
of all children contained by the object. In all other <TT>AccessibleSelection</TT>
methods, children are referenced by an index value based on the
list of all children contained by the object.
<P>
The isAccessibleChildSelected method determines if a given child
object is selected. If an object supports multiple selections,
the <TT>addAccessibleSelection</TT> method adds the given child
to the selection. If the object supports only a single selection,
<TT>addAccessibleSelection</TT> replaces the current selection
with the given selection. The <TT>removeAccessibleSelection</TT>
method removes a given object from the selection. Finally, <TT>selectAllAccessibleSelection</TT>
selects all of an object's children, and <TT>clearAccessibleSelection</TT>
deselects all selected children.
<H3><A NAME="TheTTFONTSIZEAccessibleTextFONTTTFONTSIZEInterfaceFONT">
The <TT>AccessibleText</TT>
Interface</A></H3>
<P>
The <TT>AccessibleText</TT> interface provides a way for assistive
technologies to work with objects that present textual information.
You can determine if an object supports the <TT>AccessibleText</TT>
interface by getting the object's <TT>AccessibleContext</TT> and
calling the <TT>getAccessibleText</TT> method. A non-<TT>null</TT>
return value indicates that the object supports the <TT>AccessibleText</TT>
interface. Listing 33.4 gives the class signature for <TT>AccessibleText</TT>.
<p>
<HR>
<P>
<B>Listing 33.4&nbsp;&nbsp;</B><TT><B>ACCESSIBLETEXT</B></TT><B>
Class Signature<BR>
</B>
<BLOCKQUOTE>
<PRE>
public interface AccessibleText extends Object { 
    public static final int CHARACTER;
    public static final int WORD;
    public static final int SENTENCE;
    public abstract int getIndexAtPoint(Point point);
    public abstract Rectangle getCharacterBounds(int index);
    public abstract int getCharCount();
    public abstract int getCaretPosition();
    public abstract String getAtIndex(int element, int index);
    public abstract String getAfterIndex(int element, int index);
    public abstract String getBeforeIndex(int element, int index);
    public abstract AttributeSet getCharacterAttribute(int index);
    public abstract int getSelectionStart();
    public abstract int getSelectionEnd();
    public abstract String getSelectedText();
}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
Accessible text is represented as a single <TT>String</TT> object.
The <TT>getCharCount</TT> method returns the number of characters
in the text. The <TT>getAtIndex</TT>, <TT>getAfterIndex</TT>,
and <TT>getBeforeIndex</TT> methods retrieve text by the sentence,
by the word, or character-by-character. The <TT>getCaratPosition</TT>
method gets the index of the character to the right of the carat.
<P>
Three methods allow you to work with a selection within the text
object. <TT>getSelectionStart</TT> returns the index of the first
character in the selection. <TT>getSelectionEnd</TT> returns the
index of the character that follows the last character in the
selection. If there is no selection, the start and end indexes
will be equal. The <TT>getSelectedText</TT> method returns a <TT>String</TT>
object containing the selected text.
<P>
<TT>AccessibleText</TT> includes two methods useful for working
with the text from the perspective of the visual display of the
text: <TT>getCharacterBounds</TT> retrieves a <TT>Rectangle</TT>
corresponding to the bounds of the area occupied by the text,
and <TT>getIndexAtPoint</TT> retrieves the index of the character
under the given mouse coordinates.
<H3><A NAME="TheTTFONTSIZEAccessibleValueFONTTTFONTSIZEInterfaceFONT">
The <TT>AccessibleValue</TT>
Interface</A></H3>
<P>
The <TT>AccessibleValue</TT> interface provides a way for assistive
technologies to manipulate numerical values that are associated
with accessible objects. You can determine if an object supports
the <TT>AccessibleValue</TT> interface by getting the object's
<TT>AccessibleContext</TT> and calling the <TT>getAccessibleValue</TT>
method. A non-<TT>null</TT> return value indicates that the object
supports the <TT>AccessibleValue</TT> interface. Listing 33.5
gives the class signature for the <TT>AccessibleValue</TT> interface.
<p>
<HR>
<P>
<B>Listing 33.5&nbsp;&nbsp;</B><TT><B>ACCESSIBLEVALUE</B></TT><B>
Class Signature<BR>
</B>
<BLOCKQUOTE>
<PRE>
public interface AccessibleValue extends Object { 
    public abstract Number getCurrentAccessibleValue();
    public abstract boolean setCurrentAccessibleValue(Number number);
    public abstract Number getMinimumAccessibleValue();
    public abstract Number getMaximumAccessibleValue();
} 
</PRE>
</BLOCKQUOTE>
<HR>
<P>
The <TT>AccessibleValue</TT> interface has only four methods.
Two methods, <TT>getCurrent-AccessibleValue</TT> and <TT>setCurrentAccessibleValue</TT>,
get and set the current value. The <TT>getMinimumAccessibleValue</TT>
and <TT>getMaximumAccessibleValue</TT> methods retrieve the minimum
and maximum settings for the numerical value. If you try to set
a value outside this range, <TT>setCurrentAccessibleValue</TT>
will fail to set the value and will return <TT>false</TT>.
<H3><A NAME="TheTTFONTSIZEAccessibleBundleFONTTTFONTSIZEClassFONT">
The <TT>AccessibleBundle</TT>
Class</A></H3>
<P>
The <TT>AccessibleBundle</TT> class is a class designed to define
a closely typed enumeration. It's used as the base class for the
<TT>AccessibleRole</TT> and <TT>AccessibleState</TT> classes.
Listing 33.6 gives the class signature for <TT>AccessibleBundle</TT>.
<p>
<HR>
<P>
<B>Listing 33.6&nbsp;&nbsp;</B><TT><B>ACCESSIBLEBUNDLE</B></TT><B>
Class Signature<BR>
</B>
<BLOCKQUOTE>
<PRE>
public abstract class AccessibleBundle extends Object 
{ 
  // public constructor
    public AccessibleBundle();
  // public instance methods
public String toDisplayString(String resourceBundleName, 
                                  Locale locale); 
    public String toDisplayString(Locale locale);
    public String toDisplayString();
    public String toString();
} 
</PRE>
</BLOCKQUOTE>
<HR>
<P>
The <TT>AccessibleBundle</TT> class provides several methods to
get localized human-readable string representations of enumeration
elements. 
<H3><A NAME="TheTTFONTSIZEAccessibleRoleFONTTTFONTSIZEClassFONT">
The <TT>AccessibleRole</TT>
Class</A></H3>
<P>
The <TT>AccessibleRole</TT> class provides a mechanism for describing
the role of an accessible user interface component. Accessible
technologies can determine the function of a user-interface component
by getting the component's role. All accessible components must
have a role. To get an object's role, first get its <TT>AccessibleContext</TT>
and then call the <TT>getAccessibleRole</TT> method. 
<P>
All of the public members of the <TT>AccessibleRole</TT> class
are static final constants that define roles for Swing components.
Listing 33.7 gives the class signature for this class.<p>
<HR>
<P>
<B>Listing 33.7&nbsp;&nbsp;</B><TT><B>ACCESSIBLEROLE</B></TT><B>
Class Signature<BR>
</B>
<BLOCKQUOTE>
<PRE>
public class AccessibleRole extends AccessibleBundle 
{ 
    public static final AccessibleRole ALERT;
    public static final AccessibleRole COLUMN_HEADER;
    public static final AccessibleRole COMBO_BOX;
    public static final AccessibleRole DESKTOP_ICON;
    public static final AccessibleRole INTERNAL_FRAME;
    public static final AccessibleRole DESKTOP_PANE;
    public static final AccessibleRole WINDOW;
    public static final AccessibleRole FRAME;
    public static final AccessibleRole DIALOG;
    public static final AccessibleRole DIRECTORY_PANE;
    public static final AccessibleRole FILE_CHOOSER;
    public static final AccessibleRole FILLER;
    public static final AccessibleRole LABEL;
    public static final AccessibleRole ROOT_PANE;
    public static final AccessibleRole GLASS_PANE;
    public static final AccessibleRole LAYERED_PANE;
    public static final AccessibleRole LIST;
    public static final AccessibleRole MENU_BAR;
    public static final AccessibleRole POPUP_MENU;
    public static final AccessibleRole MENU;
    public static final AccessibleRole MENU_ITEM;
    public static final AccessibleRole SEPARATOR;
    public static final AccessibleRole PAGE_TAB_LIST;
    public static final AccessibleRole PAGE_TAB;
    public static final AccessibleRole PANEL;
    public static final AccessibleRole PROGRESS_BAR;
    public static final AccessibleRole PASSWORD_TEXT;
    public static final AccessibleRole PUSH_BUTTON;
    public static final AccessibleRole TOGGLE_BUTTON;
    public static final AccessibleRole CHECK_BOX;
    public static final AccessibleRole RADIO_BUTTON;
    public static final AccessibleRole ROW_HEADER;
    public static final AccessibleRole SCROLL_PANE;
    public static final AccessibleRole SCROLL_BAR;
    public static final AccessibleRole VIEWPORT;
    public static final AccessibleRole SLIDER;
    public static final AccessibleRole SPLIT_PANE;
    public static final AccessibleRole TABLE;
    public static final AccessibleRole TEXT;
    public static final AccessibleRole TREE;
    public static final AccessibleRole TOOL_BAR;
    public static final AccessibleRole TOOL_TIP;
    public static final AccessibleRole AWT_COMPONENT;
    public static final AccessibleRole SWING_COMPONENT;
    public static final AccessibleRole UNKNOWN;
}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
If you need to define roles for your custom components, you should
subclass <TT>AccessibleRole</TT> and add additional constant definitions
as shown in the following code fragment that creates the <TT>DIALOG</TT>
constant.
<P>
<TT>public static final AccessibleRole DIALOG
= new AccessibleRole(&quot;dialog&quot;);</TT>
<H3><A NAME="TheTTFONTSIZEAccessibleStateFONTTTFONTSIZEClassFONT">
The <TT>AccessibleState</TT>
Class</A></H3>
<P>
The <TT>AccessibleState</TT> class is used to describe a component's
state. It's based on the <TT>AccessibleBundle</TT> class and is
implemented to represent a closely typed enumeration. The actual
state of a component is described by the <TT>AccessibleStateSet</TT>
class, which contains an array of <TT>AccessibleState</TT> objects.
Listing 33.8 gives the class signature of the <TT>AccessibleState</TT>
class.<p>
<HR>
<P>
<B>Listing 33.8&nbsp;&nbsp;</B><TT><B>ACCESSIBLESTATE</B></TT><B>
Class Signature<BR>
</B>
<BLOCKQUOTE>
<PRE>
public class AccessibleState extends AccessibleBundle 
{ 
    public static final AccessibleState ACTIVE;
    public static final AccessibleState PRESSED;
    public static final AccessibleState ARMED;
    public static final AccessibleState BUSY;
    public static final AccessibleState CHECKED;
    public static final AccessibleState EDITABLE;
    public static final AccessibleState EXPANDABLE;
    public static final AccessibleState COLLAPSED;
    public static final AccessibleState EXPANDED;
    public static final AccessibleState ENABLED;
    public static final AccessibleState FOCUSABLE;
    public static final AccessibleState FOCUSED;
    public static final AccessibleState ICONIFIED;
    public static final AccessibleState MODAL;
    public static final AccessibleState OPAQUE;
    public static final AccessibleState RESIZABLE;
    public static final AccessibleState MULTISELECTABLE;
    public static final AccessibleState SELECTABLE;
    public static final AccessibleState SELECTED;
    public static final AccessibleState SHOWING;
    public static final AccessibleState VISIBLE;
    public static final AccessibleState VERTICAL;
    public static final AccessibleState HORIZONTAL;
    public static final AccessibleState SINGLE_LINE;
    public static final AccessibleState MULTI_LINE;
}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
All the members of <TT>AccessibleState</TT> are static final constants.
There is no public constructor for this class-if you need to define
new constants to describe the state of your accessible objects,
you should subclass <TT>AccessibleState</TT> and add your constants
to the new class by using the technique shown in the following
code fragment that creates the <TT>CHECKED</TT> state constant.
<BLOCKQUOTE>
<PRE>
public static final AccessibleState CHECKED 
                        = new AccessibleState(&quot;checked&quot;);
</PRE>
</BLOCKQUOTE>
<P>
The basic states that are used with all types of Swing components
include <TT>ENABLED</TT>, <TT>FOCUSABLE</TT>, <TT>VISIBLE</TT>,
<TT>SHOWING</TT>, <TT>FOCUSED</TT>, <TT>SELECTABLE</TT>, <TT>SELECTED</TT>,
and <TT>OPAQUE</TT>. Specific components can use additional states.
For example, <TT>JButton</TT> objects also use the <TT>ARMED</TT>,
<TT>PRESSED</TT>, and <TT>CHECKED</TT> states.
<H3><A NAME="TheTTFONTSIZEAccessibleStateSetFONTTTFONTSIZEClassFONT">
The <TT>AccessibleStateSet</TT>
Class</A></H3>
<P>
The <TT>AccessibleStateSet</TT> class fully describes the state
of an accessible component. You can determine an object's accessible
state by getting the object's <TT>AccessibleContext</TT> and calling
the <TT>getAccessibleStateSet</TT> method. Listing 33.9 gives
the class signature of the <TT>AccessibleStateSet</TT> class.
<p>
<HR>
<P>
<B>Listing 33.9&nbsp;&nbsp;</B><TT><B>ACCESSIBLESTATESET</B></TT><B>
Class Signature<BR>
</B>
<BLOCKQUOTE>
<PRE>
public class AccessibleStateSet extends Object 
{ 
    public AccessibleStateSet();
    public AccessibleStateSet(AccessibleState[] state);
    public boolean add(AccessibleState state);
    public void addAll(AccessibleState[] state);
    public boolean remove(AccessibleState state);
    public void clear();
    public boolean contains(AccessibleState state);
    public AccessibleState toArray()[];
    public String toString();
} 
</PRE>
</BLOCKQUOTE>
<HR>
<P>
There are two public constructors for <TT>AccessibleStateSet.</TT>
One constructor creates a state set containing the given array
of <TT>AccessibleState</TT> objects. The other constructor creates
an empty state set. The <TT>add</TT> and <TT>addAll</TT> methods
add states to the state set. The <TT>remove</TT> method removes
the given state from the state set. The <TT>clear</TT> method
removes all states from the state set.
<P>
You can use the <TT>contains</TT> method to determine if a given
state is in the state set. <TT>toArray</TT> returns an array of
all <TT>AccessibleState</TT> objects in the state set. The <TT>toString</TT>
method returns a localized string representing all of the states
in the state set.
<H2><A NAME="CreatingAssistiveTechnologies">
Creating Assistive Technologies</A></H2>
<P>
A full treatise on designing assistive technologies for Java Accessibility
is beyond the scope of this book. If you're interested in creating
assistive technologies, you should begin by downloading the latest
Java Accessibility Utilities from the JavaSoft Web site at <TT><A HREF="http://www.javasoft.com/">http://www.javasoft.com</A></TT>.
<H3><A NAME="TheJavaAccessibilityUtilities">
The Java Accessibility Utilities</A></H3>
<P>
The Java Accessibility Utilities provide support for creating
assistive technologies. The utilities include a small API that
supports event monitoring and provides a mechanism for assistive
technologies to be notified when top-level windows are created
and destroyed.
<P>
The utilities include classes for monitoring events for all components
that exist in applications running in the same Java Virtual Machine
(JVM) as the assistive technology. The classes provide system-wide
monitoring of all events for both AWT and Swing components.
<H3><A NAME="AutomaticLoadingofAssistiveTechnologies">
Automatic Loading of Assistive Technologies</A></H3>
<P>
JDK 1.2 includes a mechanism for automatically loading assistive
technologies. This is handled by putting a configuration line
in the <TT>accessibility.properties</TT> file to specify which
assistive technologies to load when launching an applet or application.
Refer to the Java Accessibility Utilities documentation for details
on automatic loading of assistive technologies.
<H2><A NAME="Summary">
Summary</A></H2>
<P>
Making applications accessible to users with limited abilities
is becoming an important element of user-interface design. JFC
facilitates the creation of accessible applications by providing
components with built-in support for accessibility. It's relatively
easy to write accessible JFC applications-the &quot;Supporting
Accessibility in JFC Applications&quot; section gives some guidelines
for what you need to do to accomplish this.

<P>
<CENTER>
<HR SIZE=4>

<A HREF="..\ch32\ch32.htm"><IMG SRC="..\button\previous.gif" BORDER="0"></A>
<A HREF="..\index.htm"><IMG SRC="..\button\contents.gif" BORDER="0"></A> 
<A HREF="..\ch34\ch34.htm"><IMG SRC="..\button\next.gif" BORDER="0"></A> 
</p>

<p>&#169; <A HREF="..\copy.htm">Copyright</A>, Macmillan Computer Publishing. All rights reserved.
</CENTER>
</BODY>
</HTML>
