<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!--last modified on Thu, Mar 11, 1999 12:05 PM-->
<HTML>

<HEAD>
	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<SCRIPT LANGUAGE="JavaScript">


<!--

function popUp(pPage) {
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '<link rel="stylesheet" href="/includes/stylesheets/ebooks.css"></head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 figDoc.write(zhtm);
 figDoc.close();
 popUpWin.focus();
 }

//-->


</SCRIPT>
<link rel="stylesheet" href="http://www.szptt.net.cn/includes/stylesheets/ebooks.css">

	<META NAME="Author" Content="Steph Mineart">
	<TITLE>JFC -- Chapter 1 - Introduction to JFC </TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<H1 ALIGN="CENTER"><IMG SRC="..\button\sams.gif" WIDTH="171" HEIGHT="66" ALIGN="BOTTOM"
BORDER="0"></H1>

<H1 ALIGN="CENTER">JFC Unleashed</H1>

<H1 ALIGN="CENTER"><A HREF="..\fm\fm.htm"><IMG SRC="..\button\previous.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" BORDER="0"></A> <A HREF="..\index.htm"><IMG SRC="..\button\contents.gif"
WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" BORDER="0"></A> <A HREF="..\ch02\ch02.htm"><IMG
SRC="..\button\next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" BORDER="0"></A></H1>

<H1 ALIGN="CENTER">Chapter&nbsp;1<BR>
Introduction to JFC</H1>

<UL>
	<LI><A HREF="#TheJFCExtension">The JFC 1.2 Extension</A>
	<LI><A HREF="#Swing">Swing</A>
	<UL>
		<LI><A HREF="#Packages">Packages</A>
	</UL>
	<LI><A HREF="#DragandDrop">Drag and Drop</A>
	<UL>
		<LI><A HREF="#TheDragandDropPackageTTFONTSIZEjavaawtdndFONTTT">The Drag and Drop
		Package: <TT>java.awt.dnd</TT></A>
	</UL>
	<LI><A HREF="#Accessibility">Accessibility</A>
	<UL>
		<LI><A HREF="#TheAccessibilityPackageTTFONTSIZEjavaxaccessibilityFONTTT">The Accessibility
		Package: <TT>javax.accessibility</TT></A>
	</UL>
	<LI><A HREF="#Summary">Summary</A>
</UL>

<P>
<HR>
</P>
<P>In Java 1.0, user interfaces were created by using the Abstract Window Toolkit
(AWT). The AWT provides a set of primitive user interface components. These include
such elements as buttons, labels, and text fields; higher-level user-interface components
such as lists and choice boxes; classes for creating frames and dialog boxes; and
classes to support menus that may be attached to a frame. The AWT also contains an
applet entry point.</P>
<P>The original AWT was a peer-based toolkit, meaning that each component created
a peer that was implemented in native code for the platform on which the Java Virtual
Machine (JVM) was executing. The peer in turn created a window in which the component
was displayed. This process of requiring each interface component to create its own
window makes the AWT classes difficult to port and proved taxing on system resources.
It also led to a problem common among toolkits that target multiple platforms: the
least common denominator problem. Toolkits that only support components available
on all the targeted platforms lead to an inferior component set that doesn't meet
the needs of serious application development.</P>
<P>The AWT also contains classes that are not directly user-interface components.
These typically are support classes, including a rich set of AWT Layout Manager classes
and geometry classes.</P>
<P>In Java 1.1, extensions of AWT components can be lightweight. A lightweight component
is created by extending the AWT <TT>Component</TT> or <TT>Container</TT> class directly.
With the introduction of lightweight components, the door was opened for pure Java
lightweight component toolkits. Eliminating the requirement for native peers circumvents
the least common denominator problem and means that the single Java implementation
of a component can be used for all targeted platforms.
<H2><A NAME="TheJFCExtension"></A>The JFC 1.2 Extension</H2>
<P>To address the shortcomings of the AWT, the Java Foundation Classes (JFC) were
developed. The development of the JFC was unique. JavaSoft provided developers early
access releases of the toolkit knowing that the application program interface (API)
was subject to change. The developers were asked to use the toolkit and provide feedback
on the usability aspects of API for the toolkit. This process was repeated many times
before the first official release, known as JFC 1.1 and Swing 1.0.</P>
<P>JFC 1.2 is an extension of the AWT, not a replacement for it. The JFC visual components
extend the AWT <TT>Container</TT> class. Thus the methods contained in the <TT>Component</TT>
and <TT>Container</TT> classes that AWT programmers are familiar with are still valid
for JFC visual classes. This fact also ensures that classes written at the component
or container abstraction level will work with JFC classes. A classic example of this
is layout managers. A layout manager may be set for any container and arranges components.
Since JFC classes extend these classes, layout managers will continue to work as
they did with AWT classes.</P>
<P>The AWT user-interface classes are now superseded by classes provided by the JFC.
The support classes often play just as important a part in JFC applications as they
did in AWT-based applications. AWT support classes, those that do not create a native
window, are not replaced by JFC classes.</P>
<P>JFC 1.2 consists of five major packages:

<UL>
	<LI>Swing
	<LI>Pluggable Look-and-Feel (PL&amp;F)
	<LI>Drag and Drop
	<LI>Accessibility
	<LI>2D
</UL>

<CENTER>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="600"><B>WHY THE NAME &quot;SWING&quot;?</B></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="600">

			<BLOCKQUOTE>
Swing is the unofficial name of the Java GUI classes contained in the JFC. The story
			is that Swing got its name at the 1997 JavaOne convention in San Francisco. A planned
			demonstration of the new component set was to be set to music. A Swing team member,
			Georges Saab, voiced the observation that swing music was enjoying a comeback. He
			went on to suggest that swing would make a nice code name for the project. The slogan
			potential was not lost on the room full of engineers, including the very famous one
			provided by Duke Ellington in a popular song, &quot;It Don't Mean a Thing if It Ain't
			Got That Swing.&quot; Thus the name Swing was adopted. The early releases of the
			component library were released under the code name Swing. Even though Swing components
			were officially added to JFC 1.1, the name Swing has persisted. This has led to the
			often quoted statement from the JFC project leader Rick Levenson, &quot;It's spelled
			'J', 'F', 'C', but it's pronounced Swing.&quot; The name Swing is also used for the
			package name of the JFC classes.			</BLOCKQUOTE>
		</TD>
	</TR>
</TABLE>
</P>

<P>
<H2><A NAME="Swing"></A>Swing</H2>
<P>Swing components allow for efficient graphical user interface (GUI) development.
Swing components are a collection of lightweight visual components. They contain
replacements for the basic heavyweight AWT components as well as complex user-interface
components such as trees and tables.</P>
<P>Swing components contain a pluggable look-and-feel, abbreviated as PL&amp;F or
plaf. This allows the same application to run with a native look-and-feel on different
platforms. For example, when running on a Windows platform, the application will
look like an application written specifically for the Windows-based computer. The
same application, when run on an Apple Macintosh computer, looks like it was written
specifically for the Macintosh. When the application is run on a UNIX workstation,
it looks like a UNIX application, and so on for any platform to which the JVM has
been ported.</P>
<P>Another use of the PL&amp;F is to have an application behave the same on any platform
on which it is executed. The JFC contains operating system-neutral look-and-feels
that allow an application to present the same look-and-feel independent of the operating
system where it executes. This capability can reduce the learning curve for users
of applications running in a heterogeneous computer environment.</P>
<P>As a developer, you are not limited to the PL&amp;F shipped with the JFC. You
can develop your own look-and-feel that can be used by any JFC application. An organization
may want to develop its own to give applications a consistent look-and-feel for use
on all its hardware platforms.</P>
<P>Unlike their AWT equivalents, Swing components do not contain peers. Swing components
are 100% pure Java and were designed to allow for mixing AWT heavyweight and Swing
lightweight components in an application. However, in practice this has proven problematic.
Whenever possible you should use all Swing components and components derived from
them.</P>
<P>The major difference between lightweight and heavyweight components is that a
lightweight component can have transparent pixels while a heavyweight component is
always opaque. By taking advantage of transparent pixels, a lightweight component
can appear to be non-rectangular, while a heavyweight component must always be rectangular.
A mouse event occurring in a lightweight component falls through to its parent component,
while a mouse event in a heavyweight component does not propagate through to its
parent component. When a lightweight component overlaps a heavyweight component,
the heavyweight component is always drawn on top of the lightweight component, regardless
of the relative z-order of the two components.</P>
<P>The Swing components are JavaBean compliant. This allows the components to be
used easily in a Bean-aware application building program. The Swing release contains
<TT>BeanInfo</TT> classes for the Swing UI (user interface) components to aid in
using Swing in builder applications.</P>
<P>With all these great new features provided by the JFC, it may be asked if the
AWT is required at all. The answer is yes, it is. This is because Swing is an extension
for the AWT, not a replacement. The root of the majority of the Swing hierarchy is
the <TT>JComponent</TT> class. This class is an extension of the AWT <TT>Container</TT>
class. Thus the necessity of the AWT classes, even when using Swing components. This
is demonstrated in Figure 1.1. This figure shows that Swing is built on the base
AWT classes, but not on the AWT UI component classes. For example, the AWT button
or label classes are not extended.</P>
<P><A HREF="javascript:popUp('f1-1.gif')"><B>Figure 1.1 :</B> <I>The Swing architecture</I>.</A></P>
<P>When there are equivalent classes in each toolkit for a particular UI component,
the Swing version should be used. For example, the AWT provides an implementation
of a button in the <TT>Button</TT> class. Swing also provides an implementation for
a button in the <TT>JButton</TT> class. The <TT>JButton</TT> class should be used
in JFC applications. This allows the PL&amp;F to be changed and the button to be
drawn by using the current PL&amp;F. The JFC contains many complex components, such
as a tree and table, that simply are not available in the AWT.</P>
<P>Swing components comprise a large percentage of the JFC release and are the major
focus of this book. However they are not the only innovations contained in the JFC.
The JFC contains the Java 2D classes. These classes provide an API for advanced two-dimensional
graphic rendering in Java: many different paint styles, APIs for defining complex
shapes, coordinate transformations, and more. The Drag and Drop API provides data
transfer between Java and native applications as well as within a single Java application.
The Accessibility APIs are provided to aid people with disabilities while interacting
with JFC components. Unlike Swing, however, these portions of the JFC are not 100%
pure Java implementations. The AWT components are to be enhanced to support these
new features in the 1.2 release of the JDK.
<H3><A NAME="Packages"></A>Packages</H3>
<P>The Swing component toolkit consists of over 250 pure Java classes and 75 interfaces
contained in more than 10 packages. They are used to build lightweight user interfaces.
Swing consists of non-user-interface (non-UI) classes as well as the more familiar
user-interface (UI) classes. The non-UI classes provide services and other operations
for the UI classes. They do not display anything on screen. Examples of non-UI Swing
classes are the events fired by Swing components and the Swing data model classes.
The UI classes, such as buttons and labels, create visible components that applications
can display on screen, and they can be combined to create a complete graphical user
interface. The Swing UI components descend from the <TT>JComponent</TT> class, and
all begin with the capital letter J.</P>
<P>Swing packages that are typically used by developers when building GUIs are listed,
and briefly explained, in the following sections.</P>
<CENTER>

<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="600"><B>WHERE SHOULD THE SWING PACKAGES LIVE?</B></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="600">

			<BLOCKQUOTE>
As was mentioned earlier in the chapter, Swing was released to developers for feedback
			during design and development of the toolkit. There were two versions of the toolkit
			for review: one that ran with the released 1.1 version of the JDK, and another that
			ran with the 1.2 beta version of the JDK. The root of the toolkit for the 1.1 JDK
			was contained in the <TT>com.sun.java.swing </TT>package. Support classes were located
			in sub-packages to this base package. The root of the toolkit for the 1.2 beta JDK
			was <TT>java.awt.swing</TT>. Due to security restrictions browsers can not download
			from the network core Java classes, that is, classes whose package name begins with
			<TT>java</TT>. The <TT>com.sun.java.swing </TT>package name allowed 1.1-enabled browsers
			to download the Swing packages from the server.<BR>
			When the 1.2 beta4 version of the JDK was released, it was also announced that the
			Swing packages were not to be part of the <TT>java.awt.swing </TT>package, but would
			remain in the 1.1 JDK-compatible <TT>com.sun.java.swing </TT>package. In JDK Release
			Candidate 1, the package name changed to <TT>javax.swing</TT>. The rational for this
			decision was that many developers had developed applications using the 1.1 names,
			and changing to the 1.2 package name would be complicated. This decision has been
			very controversial. Until this point, classes contained in <TT>com.sun </TT>packages
			have been undocumented and not guaranteed to be available on all platforms. Developers
			have raised the concern that the Swing packages will not be available on all platforms.
			However, JavaSoft has guaranteed that Swing is part of the core Java release and
			will be available on all plat-forms, including browsers. This author agrees with
			the concerns expressed by many developers after the package name announcement. The
			core Java packages should follow a consistent naming convention. The reason cited
			for not changing the name is insufficient. Changing package names for the Swing packages
			in a large project would have been painful; however, this would have been a one-time
			change, and developers were told of the intention to change the package names from
			the beginning. Now developers are going to have to live with the pain of a non-standard
			named package for the foreseeable future.			</BLOCKQUOTE>
		</TD>
	</TR>
</TABLE>
</CENTER>
<P>
<H4>The Swing Package: <TT>javax.swing</TT></H4>
<P>This is the largest of the Swing packages consisting of approximately 100 classes
and 25 interfaces. The majority of the UI classes (the &quot;J&quot; classes) are
contained in this package. The exceptions are <TT>JTableHeader</TT>, implemented
in the <TT>javax.swing.table</TT> package, and <TT>JTextComponent</TT>, implemented
in the <TT>javax.swing.text</TT> package. Both of these packages are described shortly.
Also contained in this package are high-level choice components. This type of component
allows the user to visually choose a value from a fixed set of possible values-choosing
a color, for example. The components in this package are the primary focus of this
book (see Figure 1.2). Examples of their use are given throughout.</P>
<P><A HREF="javascript:popUp('f1-2.gif')"><B>Figure 1.2 :</B> <I>Examples of the
basic Swing components in the Windows PL&amp;F</I>.</A>
<H4>The Basic Package: <TT>javax.swing.plaf.basic</TT></H4>
<P>The Basic package contains classes that define the default look-and-feel of Swing
components. By extending these classes, components with a customized PL&amp;F can
be developed. This is the second largest package in terms of the number of classes,
containing approximately 40 classes. The high number of classes should give a feel
for the amount of work required to develop a complete PL&amp;F.
<H4>The Border Package: <TT>javax.swing.border</TT></H4>
<P>The Border package contains the <TT>Border</TT> interface and nine classes that
implement this interface. Typically classes in this package are not instantiated
directly; instead, instances are obtained via methods in the <TT>BorderFactory</TT>
class contained in the <TT>javax.swing</TT> package. However, the constants defined
in the classes in this package are often used when obtaining borders from the factory.
Classes in this package can be extended to create a specialized border. The Border
package and the borders contained in the JFC are presented in <A HREF="..\ch05\ch05.htm">Chapter
5</A> &quot;Basic Components.&quot;
<H4>The Event Package: <TT>javax.swing.event</TT></H4>
<P>The Event package defines events specific to Swing components. The events defined
in this package fill roles similar to those defined in the <TT>java.awt.event</TT>
package. There are approximately 25 Swing-specific events. The events themselves
and their associated <TT>Listener</TT> interfaces are defined in this package. Swing
events are used by the various data models contained in the JFC. The events are presented
with the classes that fire the particular event.
<H4>The Multipackage: <TT>javax.swing.plaf.multi</TT></H4>
<P>The Multipackage consists of multiplexing UI classes. These allow Swing components
to have UIs provided by multiple user-interface factories.
<H4>The Pluggable Look-and-Feel Package: <TT>javax.swing.plaf</TT></H4>
<P>The PL&amp;F package consists of classes that provide Swing components with pluggable
look-and-feel capabilities. If a custom PL&amp;F is being developed and the classes
in the <TT>javax.swing.plaf.basic</TT> package cannot be extended, the abstract classes
contained in this package can be used as a starting point. The JFC is shipped with
three PL&amp;Fs: the Windows PL&amp;F contained in the <TT>com.sun.java.swing.plaf.windows</TT>
package (see Figure 1.2), the Motif PL&amp;F contained in the <TT>com.sun.java.swing.plaf.motif</TT>
package (see Figure 1.3), and the Metal platform-neutral PL&amp;F contained in the
<TT>javax.swing.plaf.metal</TT> package (see Figure 1.4). The Macintosh PL&amp;F
contained in the <TT>com.sun.java.swing.plaf.mac</TT> package is available separately.</P>
<P><A HREF="javascript:popUp('f1-3.gif')"><B>Figure 1.3 :</B> <I>The Motif PL&amp;F</I>.</A></P>
<P><A HREF="javascript:popUp('f1-4.gif')"><B>Figure 1.4 :</B> <I>The Metal PL&amp;F</I>.</A>
<H4>The Table Package: <TT>javax.swing.table</TT></H4>
<P>The Table package contains classes and interfaces specific to the Swing table
component, <TT>JTable</TT>. It contains the <TT>TableColumnModel</TT> and <TT>TableModel</TT>
interfaces, as well as interfaces that define rendering and editing components for
a table. There are also default implementations of each of these interfaces in this
package. Simple tables can be created and used without knowledge of the interfaces
or classes in this package. To utilize the full capabilities of the <TT>JTable</TT>
component, however, the classes and interfaces contained in this package must be
understood. An example of a Swing table is shown in Figure 1.5. A complete description
of the <TT>JTable</TT> component and the support classes contained in this package
is presented in <A HREF="..\ch12\ch12.htm">Chapter 12</A>, &quot;Table Component.&quot;</P>
<P><A HREF="javascript:popUp('f1-5.gif')"><B>Figure 1.5 :</B> <I>The Swing table
component</I>.</A>
<H4>The Text Package: <TT>javax.swing.text</TT></H4>
<P>The Text package contains classes and interfaces for the rich set of text manipulation
components contained in the Swing toolkit. These include the various document and
document support interfaces, as well as default implementations of these interfaces.
The Text package also contains two child packages, the <TT>javax.swing.text.html</TT>
package for HTML content and the <TT>javax.swing.text.rtf</TT> package for rich text
format content. A complete overview of the text features in the JFC is presented
in <A HREF="..\ch07\ch07.htm">Chapter 7</A> &quot;Text Components.&quot;
<H4>The Tree Package: <TT>javax.swing.tree</TT></H4>
<P>This package contains classes that are used with the Swing tree component, <TT>JTree</TT>
(see Figure 1.6). The <TT>TreeModel</TT> and various node interfaces are defined
in this package, as well as default implementations of each interface. The <TT>JTree</TT>
component may be used to create simple trees without knowledge of the interfaces
and classes contained in this package. To take full advantage of the <TT>JTree</TT>
component, the interfaces and classes in this package must be understood. A complete
description of the <TT>JTree</TT> component and its supporting classes contained
in this package is presented in <A HREF="..\ch11\ch11.htm">Chapter 11</A>, &quot;Tree
Component.&quot;</P>
<P><A HREF="javascript:popUp('f1-6.gif')"><B>Figure 1.6 :</B> <I>The Swing tree component</I>.</A>
<H4>The Undo Package: <TT>javax.swing.undo</TT></H4>
<P>The Undo package contains the interfaces and classes required to implement the
undo functionality in JFC applications. This allows for an application to easily
add Undo and Redo functionality. A complete description of the Undo and Redo features
of the JFC is presented in <A HREF="..\ch28\ch28.htm">Chapter 28</A>, &quot;Undo
and Redo.&quot;
<H2><A NAME="DragandDrop"></A>Drag and Drop</H2>
<P>The JFC drag-and-drop capabilities allow the transfer of data between Java applications,
as well as Java to native applications. A component may be a drag source, a drop
target, or both. As is common with well-written Java toolkits, interfaces define
the methods required to be a drag source or drop target. Implementing these interfaces
allows the component to participate in a drag operation.</P>
<P>An unusual aspect of drag-and-drop in the Java environment is flavor maps. A flavor
map is a mapping between the device-dependent data type and the Java device-independent
data type. This allows a Java application to transfer data with a native application
without requiring the Java application to know the specifics about the native data
types.
<H3><A NAME="TheDragandDropPackageTTFONTSIZEjavaawtdndFONTTT"></A>The Drag and Drop
Package: <TT>java.awt.dnd</TT></H3>
<P>This package consists of four interfaces and fourteen classes that define drag-and-drop
operations. There is an interface that a drag source and a drop target must implement,
as well as an interface for the data flavors that can be transferred. A complete
drag-and-drop example is given in <A HREF="..\ch34\ch34.htm">Chapter 34</A>, &quot;Drag
and Drop.&quot;
<H2><A NAME="Accessibility"></A>Accessibility</H2>
<P>The Java Accessibility API provides the framework for JFC applications to interact
with assistive technologies. A properly written JFC application can be executed by
assistive technologies such as Braille terminals and screen readers just as easily
as it is run on conventional computers.
<H3><A NAME="TheAccessibilityPackageTTFONTSIZEjavaxaccessibilityFONTTT"></A>The Accessibility
Package: <TT>javax.accessibility</TT></H3>
<P>The Accessibility package consists of eight interfaces and five classes. It contains
the <TT>Accessible</TT> interface that is the main interface for the JFC Accessibility
package. Any accessible component must implement this interface. The Accessibility
package is presented in <A HREF="..\ch33\ch33.htm">Chapter 33</A>, &quot;Accessibility.&quot;
<H2><A NAME="Summary"></A>Summary</H2>
<P>The Java Foundation Classes provide a lightweight extension to the original AWT
toolkit contained in the Java Virtual Machine. The user-interface portion of the
JFC was developed under the codename Swing. The name has stuck, and these packages
are still known as the Swing packages. Although these packages consist of over 250
classes and 75 interfaces, learning how to use the JFC is not an insurmountable task.
These classes are divided into user interface (UI) classes, known as the J classes,
and non-user interface (non-UI) classes. The UI classes contain a visual representation
that can be used to interact with the user. The combination of instances of these
classes is used to develop a complete graphical user interface. The non-UI classes
provide support for the UI classes. Examples of non-UI classes include the Swing
<TT>Event</TT> class and the model classes. These classes will be explored and their
use demonstrated in the remainder of this book.</P>
<CENTER>

<HR SIZE="4">
<A HREF="..\fm\fm.htm"><IMG SRC="..\button\previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" BORDER="0"></A> <A HREF="..\index.htm"><IMG SRC="..\button\contents.gif"
WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" BORDER="0"></A> <A HREF="..\ch02\ch02.htm"><IMG
SRC="..\button\next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" BORDER="0"></A></CENTER>
&copy; <A HREF="..\copy.htm">Copyright</A>, Macmillan Computer Publishing. All rights
reserved.

</BODY>

</HTML>