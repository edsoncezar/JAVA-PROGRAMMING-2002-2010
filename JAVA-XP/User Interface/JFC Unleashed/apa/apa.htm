<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!--last modified on Thu, Mar 11, 1999 12:14 PM-->
<HTML>

<HEAD>
	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<SCRIPT LANGUAGE="JavaScript">


<!--

function popUp(pPage) {
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '<link rel="stylesheet" href="/includes/stylesheets/ebooks.css"></head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 figDoc.write(zhtm);
 figDoc.close();
 popUpWin.focus();
 }

//-->


</SCRIPT>
<link rel="stylesheet" href="http://www.szptt.net.cn/includes/stylesheets/ebooks.css">

	<META NAME="Author" Content="Steph Mineart">
	<TITLE>JFC -- Appendix A - JFC Class Reference </TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<H1 ALIGN="CENTER"><IMG SRC="..\button\sams.gif" WIDTH="171" HEIGHT="66" ALIGN="BOTTOM"
BORDER="0"></H1>
<P>
<H1 ALIGN="CENTER">JFC Unleashed</H1>

<H1 ALIGN="CENTER"><A HREF="..\ch34\ch34.htm"><IMG SRC="..\button\previous.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" BORDER="0"></A> <A HREF="..\index.htm"><IMG SRC="..\button\contents.gif"
WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" BORDER="0"></A> <A HREF="..\apb\apb.htm"><IMG
SRC="..\button\next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" BORDER="0"></A></H1>
<CENTER>
<P>
<HR>

</CENTER>
<H1 ALIGN="CENTER">Appendix&nbsp;A<BR>
JFC Class Reference</H1>
<P></P>

<P>by <B><I>Luke Cassady-Dorion</I></B>

<UL>
	<LI><A HREF="#TheJoysofObjectOrientedClassLibraries">The Joys of Object-Oriented
	Class Libraries</A>
	<LI><A HREF="#DevelopingwithOOClassLibraries">Developing with OO Class Libraries</A>
	<LI><A HREF="#NewUIDevelopmentsintheJDK">New UI Developments in the JDK 1.1</A>
	<UL>
		<LI><A HREF="#TheDelegationBasedEventModel">The Delegation-Based Event Model</A>
		<LI><A HREF="#LightweightComponents">Lightweight Components</A>
	</UL>
	<LI><A HREF="#TTFONTSIZEjavaawtFONTTT"><TT>java.awt</TT></A>
	<UL>
		<LI><A HREF="#TTFONTSIZEjavaawtFONTTTFONTSIZESummaryBRFONT"><TT>java.awt</TT>: Summary
		</A>
		<LI><A HREF="#TTFONTSIZEjavaawtAWTEventFONTTT"><TT>java.awt.AWTEvent</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtBorderLayoutFONTTT"><TT>java.awt.BorderLayout</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtButtonFONTTT"><TT>java.awt.Button</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtCanvasFONTTT"><TT>java.awt.Canvas</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtCardLayoutFONTTT"><TT>java.awt.CardLayout</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtCheckboxFONTTT"><TT>java.awt.Checkbox</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtCheckboxGroupFONTTT"><TT>java.awt.CheckboxGroup</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtCheckboxMenuItemFONTTT"><TT>java.awt.CheckboxMenuItem</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtChoiceFONTTT"><TT>java.awt.Choice</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtColorFONTTT"><TT>java.awt.Color</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtComponentFONTTT"><TT>java.awt.Component</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtComponentOrientationFONTTT"><TT>java.awt.ComponentOrientation</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtContainerFONTTT"><TT>java.awt.Container</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtCursorFONTTT"><TT>java.awt.Cursor</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtDialogFONTTT"><TT>java.awt.Dialog</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtDimensionFONTTT"><TT>java.awt.Dimension</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtFileDialogFONTTT"><TT>java.awt.FileDialog</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtFlowLayoutFONTTT"><TT>java.awt.FlowLayout</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtFontFONTTT"><TT>java.awt.Font</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtFontMetricsFONTTT"><TT>java.awt.FontMetrics</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtFrameFONTTT"><TT>java.awt.Frame</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtGraphicsFONTTT"><TT>java.awt.Graphics</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtGridBagConstraintsFONTTT"><TT>java.awt.GridBagConstraints</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtGridBagLayoutFONTTT"><TT>java.awt.GridBagLayout</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtGridLayoutFONTTT"><TT>java.awt.GridLayout</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtImageFONTTT"><TT>java.awt.Image</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtInsetsFONTTT"><TT>java.awt.Insets</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtLabelFONTTT"><TT>java.awt.Label</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtListFONTTT"><TT>java.awt.List</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtMediaTrackerFONTTT"><TT>java.awt.MediaTracker</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtMenuFONTTT"><TT>java.awt.Menu</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtMenuBarFONTTT"><TT>java.awt.MenuBar</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtMenuComponentFONTTT"><TT>java.awt.MenuComponent</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtMenuItemFONTTT"><TT>java.awt.MenuItem</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtMenuShortcutFONTTT"><TT>java.awt.MenuShortcut</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtPanelFONTTT"><TT>java.awt.Panel</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtPointFONTTT"><TT>java.awt.Point</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtPolygonFONTTT"><TT>java.awt.Polygon</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtPopupMenuFONTTT"><TT>java.awt.PopupMenu</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtPrintJobFONTTT"><TT>java.awt.PrintJob</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtRectangleFONTTT"><TT>java.awt.Rectangle</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtScrollPaneFONTTT"><TT>java.awt.ScrollPane</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtTextAreaFONTTT"><TT>java.awt.TextArea</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtTextComponentFONTTT"><TT>java.awt.TextComponent</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtTextFieldFONTTT"><TT>java.awt.TextField</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaawtToolkitFONTTT"><TT>java.awt.Toolkit</TT></A>
	</UL>
	<LI><A HREF="#TTFONTSIZEjavaxswingFONTTT"><TT>javax.swing</TT></A>
	<UL>
		<LI><A HREF="#TTFONTSIZEjavaxswingFONTTTFONTSIZESummaryFONT"><TT>javax.swing</TT>:
		Summary</A>
		<LI><A HREF="#TTFONTSIZEjavaxswingActionFONTTT"><TT>javax.swing.Action</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingButtonModelFONTTT"><TT>javax.swing.ButtonModel</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingCellEditorFONTTT"><TT>javax.swing.CellEditor</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingComboBoxEditorFONTTT"><TT>javax.swing.ComboBoxEditor</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingComboBoxModelFONTTT"><TT>javax.swing.ComboBoxModel</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingDesktopManagerFONTTT"><TT>javax.swing.DesktopManager</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingIconFONTTT"><TT>javax.swing.Icon</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingListCellRendererFONTTT"><TT>javax.swing.ListCellRenderer</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingListModelFONTTT"><TT>javax.swing.ListModel</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingListSelectionModelFONTTT"><TT>javax.swing.ListSelectionModel</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingScrollableFONTTT"><TT>javax.swing.Scrollable</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingSingleSelectionModelFONTTT"><TT>javax.swing.SingleSelectionModel</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingBorderFactoryFONTTT"><TT>javax.swing.BorderFactory</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingBoxFONTTT"><TT>javax.swing.Box</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingBoxLayoutFONTTT"><TT>javax.swing.BoxLayout</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingButtonGroupFONTTT"><TT>javax.swing.ButtonGroup</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingGrayFilterFONTTT"><TT>javax.swing.GrayFilter</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingImageIconFONTTT"><TT>javax.swing.ImageIcon</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJAppletFONTTT"><TT>javax.swing.JApplet</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJButtonFONTTT"><TT>javax.swing.JButton</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJCheckBoxFONTTT"><TT>javax.swing.JCheckBox</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJCheckBoxMenuItemFONTTT"><TT>javax.swing.JCheckBoxMenuItem</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJColorChooserFONTTT"><TT>javax.swing.JColorChooser</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJComboBoxFONTTT"><TT>javax.swing.JComboBox</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJComponentFONTTT"><TT>javax.swing.JComponent</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJDialogFONTTT"><TT>javax.swing.JDialog</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJEditorPaneFONTTT"><TT>javax.swing.JEditorPane</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJFileChooserFONTTT"><TT>javax.swing.JFileChooser</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJFrameFONTTT"><TT>javax.swing.JFrame</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJInternalFrameFONTTT"><TT>javax.swing.JInternalFrame</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJInternalFrameJDesktopIconFONTTT"><TT>javax.swing.JInternalFrame.JDesktopIcon</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJLabelFONTTT"><TT>javax.swing.JLabel</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJLayeredPaneFONTTT"><TT>javax.swing.JLayeredPane</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJListFONTTT"><TT>javax.swing.JList</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJMenuFONTTT"><TT>javax.swing.JMenu</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJMenuBarFONTTT"><TT>javax.swing.JMenuBar</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJMenuItemFONTTT"><TT>javax.swing.JMenuItem</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJOptionPaneFONTTT"><TT>javax.swing.JOptionPane</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJPanelFONTTT"><TT>javax.swing.JPanel</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJPasswordFieldFONTTT"><TT>javax.swing.JPasswordField</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJPopupMenuFONTTT"><TT>javax.swing.JPopupMenu</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJProgressBarFONTTT"><TT>javax.swing.JProgressBar</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJRadioButtonFONTTT"><TT>javax.swing.JRadioButton</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJRadioButtonMenuItemFONTTT"><TT>javax.swing.JRadioButtonMenuItem</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJRootPaneFONTTT"><TT>javax.swing.JRootPane</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJScrollBarFONTTT"><TT>javax.swing.JScrollBar</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJScrollPaneFONTTT"><TT>javax.swing.JScrollPane</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJSeparatorFONTTT"><TT>javax.swing.JSeparator</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJSliderFONTTT"><TT>javax.swing.JSlider</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJSplitPaneFONTTT"><TT>javax.swing.JSplitPane</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJTabbedPaneFONTTT"><TT>javax.swing.JTabbedPane</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJTableFONTTT"><TT>javax.swing.JTable</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJTextFieldFONTTT"><TT>javax.swing.JTextField</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJTextPaneFONTTT"><TT>javax.swing.JTextPane</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJToggleButtonFONTTT"><TT>javax.swing.JToggleButton</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJToolBarFONTTT"><TT>javax.swing.JToolBar</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJToolTipFONTTT"><TT>javax.swing.JToolTip</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingJTreeFONTTT"><TT>javax.swing.JTree</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingKeyStrokeFONTTT"><TT>javax.swing.KeyStroke</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingOverlayLayoutFONTTT"><TT>javax.swing.OverlayLayout</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingProgressMonitorFONTTT"><TT>javax.swing.ProgressMonitor</TT></A>
		<LI><A HREF="#TTFONTSIZEjavaxswingProgressMonitorInputStreamFONTTT"><TT>javax.swing.ProgressMonitorInputStream</TT></A>
	</UL>
</UL>

<P>
<HR>
</P>

<P>Not too long ago, all computer programmers had to do was develop a powerful application
and slap on a simple text-based interface, and they were ready to ship it. Those
days are but a fading memory. Now that our job title has changed from &quot;computer
programmer&quot; to &quot;software engineer&quot; or even &quot;software architect,&quot;
we're expected to develop powerful applications that are actually easy to use!</P>

<P>This means that not only do we have to agonize over every line of information-processing
code, but also over all sorts of issues related to the user interface (UI). At every
step along the development path, we must constantly consider whether the UI is as
easy to use for engineers as it is for our grandparents. Fortunately, this hardship
has arrived along with the popularity of object-oriented (OO) development languages,
and with the advent of graphical screen-building tools. In the next few chapters,
we will take a look at developing with the OO class libraries contained in the 1.1
and 1.2 releases of the JDK.
<H2><A NAME="TheJoysofObjectOrientedClassLibraries"></A>The Joys of Object-Oriented
Class Libraries</H2>
<P>If you close your eyes for a minute and think back to the first verse to the OO
mantra that you learned so many years ago, you will no doubt have the words &quot;software
reuse&quot; wedged in there somewhere. Having developed in OO languages for some
period of time, I am sure that you have learned how to write code that can easily
be reused not only within your current application, but also within other applications
you develop. Now, due to component technologies such as Java Beans and ActiveX, it
is even easier to develop reusable code.</P>

<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="600"><B>NOTE</B></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="600">

			<BLOCKQUOTE>
A component is basically a black box that you can stick in your application to serve
			a specific purpose. It has a defined set of input/output methods that you exploit
			to achieve a desired effect. If you use components that adhere to a standard (like
			Java Beans and ActiveX), it becomes very easy to integrate those third-party components
			directly into your code.			</BLOCKQUOTE>
		</TD>
	</TR>
</TABLE>
</P>

<P>Although much of the &quot;meat&quot; (or internals) of an application is rather
specific to that application, the various pieces of the UI are often easily reused
from application to application. For this reason, developing a UI from off-the-shelf
components is a simple task. However, deciding how the UI must come together is far
from simple.
<H2><A NAME="DevelopingwithOOClassLibraries"></A>Developing with OO Class Libraries</H2>
<P>In this chapter, we will take a look at the UI widgets contained in the <TT>java.awt</TT>
package and those contained in the <TT>javax.swing</TT> package. The <TT>java.awt</TT>
components were first introduced with the 1.0 release of the JDK, and were then changed
to meet the new event model with the 1.1 release. These components are <I>peered</I>
components, meaning that they exist as two halves: a Java half and a native half.
The native half is actually displayed on the screen, and it gives components like
<TT>java.awt.Frame</TT> a Mac look on a Mac and a Windows look on a Windows machine.</P>

<P>The components in the <TT>javax.swing</TT> (introduced in JDK 1.2) package are
written totally in Java, and they manage to keep an OS-dependent look and feel through
something called a &quot;pluggable look and feel.&quot; What this means is that the
components have an internal class that manages their onscreen representation, rendering
them differently depending on the OS. This pluggable look and feel even gives developers
the option of creating custom objects.</P>

<P>To begin your venture into development with UI class libraries, we will first
take a look at two new concepts in the JDK 1.1: the delegation-based event model
and the lightweight component model. Then we will cover the classes in the <TT>java.awt</TT>
package, and then the <TT>javax.swing</TT> package.
<H2><A NAME="NewUIDevelopmentsintheJDK"></A>New UI Developments in the JDK 1.1</H2>
<P>Whereas the JDK 1.0.2 contained only a small subset of the features needed by
professional developers, version 1.1 adds many of these important missing features.
Of note are the improvements made in the <TT>java.awt</TT> packages and its new subpackages.</P>

<P>Added to the AWT in version 1.1 is a new event model, as well as support for lightweight
components and component transparency. This means that developers can now develop
applications with a look and feel very similar to a native-code application.
<H3><A NAME="TheDelegationBasedEventModel"></A>The Delegation-Based Event Model</H3>
<P>The event model in the JDK 1.0.2 was lacking in many areas. First of all, it involved
a lot of unnecessary message-passing due to its hierarchical nature. Whenever an
event occurred, it had to propagate up the component hierarchy until it was absorbed;
absorption occurred when a <TT>handleEvent()</TT> or <TT>action()</TT> method returned
a <TT>boolean</TT> true.</P>

<P>The task of internationalization was a rather difficult one because the appropriate
reaction to an event was often discovered using (language-dependent) string comparisons.</P>

<P>In an attempt to solve the problems created by a hierarchical-based event model,
JavaSoft has introduced a completely new event model in their JDK 1.1 release. This
new event model is delegation-based rather than hierarchical, which allows for the
solution of these issues.</P>

<P>In a delegation-based event model, events propagate directly from the location
where they occur (the source) to all interested parties (the listeners). For example,
a button could be configured so that whenever it is clicked, the method that knows
how to deal with that button will be directly invoked. To accomplish this change
in event processing, a series of new classes and interfaces have been introduced.</P>

<P>The new classes and interfaces, contained in the package <TT>java.awt.Event</TT>,
define a mechanism for receiving events and managing them. The interfaces are implemented
by those objects that want to receive events generated by the component class associated
with the interface. The classes in the <TT>java.awt.event</TT> package represent
the different events themselves.</P>

<P>Fans of the JDK 1.0.2 class <TT>java.awt.event</TT> will notice that there is
a fundamental change in the way events are represented. Under JDK 1.0.2, all instances
of the class <TT>java.awt.event</TT>, and their source, are pinpointed using the
<TT>Event</TT> object's <TT>id</TT> instance variable. Under the JDK 1.1, all event
sources publish a unique event class (which extends from the base class <TT>java.util.EventObject</TT>).
As you can guess, all event sources offer an interface that is implemented by listeners,
and an event class that is instantiated and sent to all listeners when an event occurs.</P>

<P>As an example, we will build a simple application that builds a small screen and
performs appropriate event handling. Listing 3.1 contains the code for the application.
Pay specific attention to the methods <TT>registerListeners()</TT>, <TT>itemStateChanged()</TT>,
and <TT>actionPerformed()</TT>. In <TT>registerListeners()</TT>, you notify all widgets
that you want to receive notification when their states change. In <TT>actionPerformed()</TT>
and <TT>itemStateChanged()</TT>, you receive notification when the associated event
occurs.</P>

<P>
<HR>
</P>

<P><B>Listing 3.1&nbsp;&nbsp;The JDK 1.1 event model.</B>


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;





public class EventDemo extends    Frame

                       implements WindowListener,

                                  ActionListener,

                                  ItemListener { 





    // some simple widgets

    private Button      demoButton;

    private Checkbox    demoCheckbox;

    private Choice      demoChoice;





    public EventDemo() { 

        super(&quot;Event Demo&quot;);



        // instantiate the widgets

        demoButton = new Button(&quot;Click Me&quot;);

        demoCheckbox = new Checkbox(&quot;Check Me&quot;);

        demoChoice = new Choice();

        demoChoice.add(&quot;Option 1&quot;);

        demoChoice.add(&quot;Option 2&quot;);

        demoChoice.add(&quot;Option 3&quot;);

        demoChoice.add(&quot;Choose Me&quot;);



        // build the screen

        setLayout(new GridLayout(3,1));

        add(demoButton);

        add(demoCheckbox);

        add(demoChoice);



        registerListeners();

    } 





    // register as listeners of all components

    private void registerListeners() { 

        demoButton.addActionListener(this);

        demoCheckbox.addItemListener(this);

        demoChoice.addItemListener(this);

<B>        </B>this.addWindowListener(this);    } 





    // as defined by ActionListener

    // called when the button is clicked

    public void actionPerformed(ActionEvent ae) { 

        System.out.println(&quot;button clicked&quot;);

    } 





    // as defined by ItemListener

    // called when the checkbox state is changed or when

    // the choice display option is changed

    public void itemStateChanged(ItemEvent ie) { 

        // attempt to localize the event

        Object source = ie.getItemSelectable(); 

if(source == demoCheckbox) { 

            System.out.println(&quot;checkbox state changed&quot;);

        } 

        else if(source == demoChoice) { 

            System.out.println(&quot;choice display option changed&quot;);

        } 

    } 





               // as Defined by WindowListener

              // One of the following seven functions are called when

              // something happens to a window. We are only interested

              // in the windowClosing event, but all methods of the

              // interface must be implemented. 

              public void windowActivated(WindowEvent we) { } 

              public void windowClosed(WindowEvent we) { } 

              public void windowClosing(WindowEvent we) { 

                      // Exit the program when the Frame closes.

                      System.exit(0);

               } 

               public void windowDeactivated(WindowEvent we) { } 

               public void windowDeiconified(WindowEvent we) { } 

               public void windowIconified(WindowEvent we) { } 

               public void windowOpened(WindowEvent we) { } 





    public static void main(String args[]) { 

        EventDemo myDemo = new EventDemo();

        myDemo.pack();

        myDemo.setVisible(true);

    } 



} 

</PRE>

</BLOCKQUOTE>

<P>
<HR>
</P>

<P>Although the delegation-based event model is probably different than the way you
think about events in Java, this change is obviously for the better. As you will
see during the development examples in this chapter, the new event model provides
for more logical coding practices.
<H3><A NAME="LightweightComponents"></A>Lightweight Components</H3>
<P>The lightweight component model, added to the JDK with release 1.1, allows for
the creation of peerless components. Because instantiation of a native peer is a
time-consuming task, this results in rapid instantiation of a component.</P>

<P>Added flexibility is present in the form of optional transparency. Component transparency
is the capability to define an opaque portion of a component. This means that you
can create a series of differently shaped components.</P>

<P>When you're building a custom component (a button, for example), the traditional
process has been to build it as a child class of <TT>java.awt.Canvas</TT>. Then,
in the <TT>paint()</TT> method of the <TT>Canvas</TT> object, you would perform the
necessary drawing to create your component. A lot of time is wasted when the <TT>Canvas</TT>
object is instantiated, because a peer class must also be instantiated.</P>

<P>To begin modeling your current custom components for the new lightweight component
model, few code changes are needed. In fact, all you need to do is build your component
as a child class of either <TT>java.awt.Component</TT> or <TT>java.awt.Container</TT>.
Then, when your new lightweight component is instantiated, a peer class will not
be associated with it.</P>

<P>Although speed of object instantiation is an obvious advantage of custom lightweight
components, there are also other development advantages. As we all know, the 1.0.2
API has many drawbacks in terms of custom component development. Using the lightweight
component model, your components can now possess the following features:

<UL>
	<LI>Non-rectangular shape
	<LI>Transparency (you can see through part of the component)<BR>
	Overlapping (more than one component can draw in the same screen area)
</UL>

<P>Keep in mind that your component should implement methods that give it a similar
programmatic feel to those components already in the AWT. This includes the following:

<UL>
	<LI>Methods to allow the component state to be changed programmatically (for example,
	<TT>setText()</TT>).
	<LI>Methods to allow other components to add and remove themselves as event listeners
	(for example, <TT>addActionListener()</TT> and <TT>removeActionListener()</TT>).
</UL>

<P>In addition to giving your components a look and feel similar to existing AWT
components, follow these tips to make your product much easier to use:

<UL>
	<LI>In cases where events are to be received by the component, call the <TT>enableEvents()</TT>
	method in the constructor.
	<LI>After performing screen drawing in the <TT>paint()</TT> method, you must call
	<TT>super.paint()</TT> or the component will not appear onscreen.
	<LI>If your component will change size, call <TT>invalidate()</TT> before calling
	<TT>repaint()</TT>.
	<LI>If your component will only receive events in a portion of its visual representation,
	it must implement the <TT>contains()</TT> method.
</UL>

<P>Now it's time to build a lightweight component. You will build a small button
that takes on the shape of a triangle. In its default state, the triangle is black.
When the button is clicked, it changes to pink. The button supports methods for adding
and removing event listeners, and will notify all listeners whenever a button-click
occurs.</P>

<P>The code for the <TT>TriangleButton</TT> class is contained in Listing 3.2, and
a snapshot of the class in action is contained in Figure 3.1.</P>

<P><A HREF="javascript:popUp('appendix-a.gif')"><B>Figure:</B> <I>Creation of a triangle
button using the light-weight component model</I>.</A></P>

<P>
<HR>
</P>

<P><B>Listing 3.2&nbsp;&nbsp;Transparent components under JDK 1.1 </B>


<BLOCKQUOTE>
	<PRE>import java.awt.event.*;

import java.awt.*;

import java.util.*;





public class TriangleButton extends Component { 

    private Polygon triangle;

    private Color   myColor;

    private Vector  listeners;

    private int     theID;





    public TriangleButton() { 

        // enable the sending of mouse events

        enableEvents(AWTEvent.MOUSE_EVENT_MASK);



        // mark out the xpoints and ypoints

        int x[] = { 0, 100, 50} ;

        int y[] = { 0, 0, 100} ;



        triangle = new Polygon(x, y, 3);

        setSize(100,100);



        myColor = Color.black;

        listeners = new Vector();

    } 





    public void paint(Graphics g) { 

        g.setColor(myColor);

        g.fillPolygon(triangle);



        // super.paint() MUST be called, or your component

        // will NOT appear on screen.

        super.paint(g);

    } 





    // called when the user clicks on the triangle

    public void processMouseEvent(MouseEvent me) { 

        // make sure that the event occured over the triangle itself

        if(! triangle.contains(me.getPoint()) ) return;



        // if the mouse button was clicked change to alternate state

        if(me.getID() == MouseEvent.MOUSE_PRESSED) { 

            theID = me.getID();

            myColor = Color.pink;

            repaint();

        } 

        // if the mouse button was released change to initial state

        else if(me.getID() == MouseEvent.MOUSE_RELEASED) { 

            theID = me.getID();

            myColor = Color.black;

            repaint();



            // send the event to all listeners

            sendEvents();

        } 

    } 





    public synchronized void addActionListener(ActionListener al) { 

        listeners.addElement(al);

    } 





    public synchronized void removeActionListener(ActionListener al) { 

        listeners.removeElement(al);

    } 





    private void sendEvents() { 

        ActionEvent myEvent 

        = new ActionEvent(this, theID, &quot;button click occured&quot;);



        // create a clone of the listeners Vector.

        // This will place a &quot;cut-off&quot;

        // point after which new registerations 

        // will not be considered for

// the current event being sent out.

        Vector listenerClone;

        synchronized(this) { 

            listenerClone = (Vector)listeners.clone();

        } 



        for(int i=0;i&lt;listenerClone.size();i++) { 

            ((ActionListener)listenerClone.elementAt(i))

             .actionPerformed(myEvent);

} 

    } 

} 

</PRE>

</BLOCKQUOTE>

<P>
<HR>
</P>

<P><IMG SRC="package.gif" WIDTH="62" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H2><A NAME="TTFONTSIZEjavaawtFONTTT"></A><TT>java.awt</TT></H2>
<P>The package <TT>java.awt</TT> contains the classes and interfaces used for interaction
with the screen. This includes UI components and graphic primitives used for creating
one's own components. Additionally, there are classes called <TT>LayoutManagers</TT>,
used for describing screen layout information.</P>

<P>Note the concept of the container class in the AWT. A container class is one that
has a visual screen representation and can display both itself and other components.
A non-container class cannot display itself alone, and will need to be displayed
within the confines of a container. For example, it is possible to create a generic
window and display it onscreen. It is also possible to create a button and display
it within the confines of a container. It is not possible, however, to create a button
and simply display it by itself without some sort of container. Nor is it possible
to create a <TT>Button</TT> object and place another component (like a <TT>Label</TT>
object) within it.</P>

<P>In the <TT>java.awt</TT> package, most containers are created through a <I>peer</I>
class. A peer class is implemented in native code and gives the native look and feel
present when programming with Java. For example, when you create a window, a window
peer is created that represents how a native window looks on the machine running
the application. The problem with peer classes is that they are non-lightweight and
instantiation time is rather long.</P>

<P>In addition to container classes, most other UI components are created using this
peer approach. Again, this is what gives instances of the <TT>Button</TT> class a
Solaris feel under Solaris, a Windows feel under Windows NT, and even a BeOS feel
under BeOS. However, there is a category of AWT components and containers that are
created using only Java code. These classes, called lightweight components, are new
to the JDK with the 1.1 release and were covered earlier in this appendix in the
&quot;New UI Developments in the JDK 1.1&quot; section.</P>

<P>Terms that appear in <I><TT>italic monospaced font</TT></I> are covered in more
detail later in this appendix.</P>

<P><IMG SRC="package.gif" WIDTH="62" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtFONTTTFONTSIZESummaryBRFONT"></A><TT>java.awt</TT>:
Summary </H3>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Interfaces/Classes</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD COLSPAN="2">
			<P ALIGN="CENTER"><I>Interfaces</I>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>ActiveEvent</TT></TD>
		<TD WIDTH="295">Implemented by events that know how to dispatch themselves</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>Adjustable</TT></TD>
		<TD WIDTH="295">Implemented by components that have a finite set of adjustable available values</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>Composite</TT></TD>
		<TD WIDTH="295">Defines methods used to draw graphic primitives</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>CompositeContext</TT></TD>
		<TD WIDTH="295">Defines an environment for compositing</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>ItemSelectable</TT></TD>
		<TD WIDTH="295">Implemented by objects that contain a set of values, of which zero or more can be
			selected</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>LayoutManager</TT></TD>
		<TD WIDTH="295">Implemented by layout manager classes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>LayoutManager2</TT></TD>
		<TD WIDTH="295">Implemented by constraint base layout manager classes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>MenuContainer</TT></TD>
		<TD WIDTH="295">Implemented by all menu containers</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>Paint</TT></TD>
		<TD WIDTH="295">Defines color patterns used in 2D operations</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>PaintContext</TT></TD>
		<TD WIDTH="295">Defines an environment used when working with 2D operations</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>PrintGraphics</TT></TD>
		<TD WIDTH="295">Defines a mechanism for obtaining print graphics contexts</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>Shape</TT></TD>
		<TD WIDTH="295">Implemented by any class wishing to be a polygon</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>Stroke</TT></TD>
		<TD WIDTH="295">Models a graphical stroke</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>Transparency</TT></TD>
		<TD WIDTH="295">Models behavior used by classes that support transparency</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD COLSPAN="2">
			<P ALIGN="CENTER"><I>Classes</I>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>AlphaComposite</TT></TD>
		<TD WIDTH="295">Class that implements basic alpha compositing rules</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>AWTEvent</TT></I></TD>
		<TD WIDTH="295">Abstract base class for all AWT events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>AWTEventMulticaster</TT></TD>
		<TD WIDTH="295">Class used to broadcast events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>AWTPermission</TT></TD>
		<TD WIDTH="295">Class used to model an AWT permission</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>BasicStroke</TT></TD>
		<TD WIDTH="295">Class that models basic rendering attributes for stroked graphics primitives</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>BorderLayout</TT></I></TD>
		<TD WIDTH="295">Layout manager that allows components to be placed within a container at any of the
			following locations: North, South, East, West, Center</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Button</TT></I></TD>
		<TD WIDTH="295">Class used for creating a labeled button</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Canvas</TT></I></TD>
		<TD WIDTH="295">Basic class that may be drawn directly into</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>CardLayout</TT></I></TD>
		<TD WIDTH="295">Layout manager that controls a series of components, no more than one of which may
			be visible at a given point in time</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Checkbox</TT></I></TD>
		<TD WIDTH="295">Class used to model a checkbox or radio button onscreen</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>CheckboxGroup</TT></I></TD>
		<TD WIDTH="295">Class used to house a series of <TT>Checkbox</TT> objects, turning them into radio
			buttons; at most, one <TT>Checkbox</TT> object in a given <TT>CheckboxGroup</TT>
			may be checked at a given point in time</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>CheckboxMenuItem</TT></I></TD>
		<TD WIDTH="295">Class that models a menu item that also displays a checkbox</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Choice</TT></I></TD>
		<TD WIDTH="295">Class that models a list of options, from which one may be selected at a given point
			in time</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Color</TT></I></TD>
		<TD WIDTH="295">Class that models an onscreen color</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Component</TT></I></TD>
		<TD WIDTH="295"><TT>Component</TT> is the base class for all objects that have a graphical presence
			and can be used for user interaction</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>ComponentOrientation</TT></TD>
		<TD WIDTH="295">Class that models the orientation of elements and text of a <TT>Component</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Container</TT></I></TD>
		<TD WIDTH="295">Base class for all containers in the AWT</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Cursor</TT></I></TD>
		<TD WIDTH="295">Class that models an onscreen cursor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Dialog</TT></I></TD>
		<TD WIDTH="295">Class used to build dialog boxes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Dimension</TT></I></TD>
		<TD WIDTH="295">Class that allows the width and height of a component to be encapsulated into a single
			object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>Event</TT></TD>
		<TD WIDTH="295">Old JDK 1.0.n class used to model an event</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>EventQueue</TT></TD>
		<TD WIDTH="295">Used to queue up events before they can be delivered</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>FileDialog</TT></I></TD>
		<TD WIDTH="295">Class used when user interaction with the local file system is needed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>FlowLayout</TT></I></TD>
		<TD WIDTH="295">Layout manager that lays out components from left to right and top to bottom</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Font</TT></I></TD>
		<TD WIDTH="295">Class that models a unique font face</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>FontMetrics</TT></I></TD>
		<TD WIDTH="295">Class used to model different attributes about a given font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Frame</TT></I></TD>
		<TD WIDTH="295">Class that models a top-level window with a title bar and a menu bar</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>GradientPaint</TT></TD>
		<TD WIDTH="295">Class used to fill a shape with a linear gradient pattern</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Graphics</TT></I></TD>
		<TD WIDTH="295">When rendering, components draw themselves directly into a <TT>Graphics</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>Graphics2D</TT></TD>
		<TD WIDTH="295">Class used for 2D rendering</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>GraphicsConfiguration</TT></TD>
		<TD WIDTH="295">Class that models unique characteristics of a given graphics output device (monitor,
			printer, plotter, and so on)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>GraphicsDevice</TT></TD>
		<TD WIDTH="295">Class that models a unique graphics device (monitor, printer, plotter, and so on)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>GraphicsEnvironment</TT></TD>
		<TD WIDTH="295">Class that models a unique graphics environment</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>GridBagConstraints</TT></I></TD>
		<TD WIDTH="295">Used with the <TT>GridBagLayout</TT> class to describe how a given component should
			be placed onscreen</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>GridBagLayout</TT></I></TD>
		<TD WIDTH="295">Layout manager that allows for a high level of customization when building screens</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>GridLayout</TT></I></TD>
		<TD WIDTH="295">Layout manager that breaks up the screen into a grid in which each block is of an
			equal size; a given grid block may contain exactly one component, and that component
			will be stretched to fill the block</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Image</TT></I></TD>
		<TD WIDTH="295">Abstract class that models an image</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Insets</TT></I></TD>
		<TD WIDTH="295">Class that models the amount of space separating the component border from the container
			border</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Label</TT></I></TD>
		<TD WIDTH="295">Class that displays a one-line <TT>String</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>List</TT></I></TD>
		<TD WIDTH="295">Class that displays a scrollable series of elements, one or more of which may be
			selected at a given point in time</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>MediaTracker</TT></I></TD>
		<TD WIDTH="295">Class used to track the status of a series of <TT>Image</TT> objects; used to ensure
			that <TT>Image</TT> objects are fully loaded before they are shown</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Menu</TT></I></TD>
		<TD WIDTH="295">Class that models a menu (for example, File or Edit)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>MenuBar</TT></I></TD>
		<TD WIDTH="295">Class that houses and displays a collection of <TT>Menu</TT> objects and is bound
			to a <TT>Frame</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>MenuComponent</TT></I></TD>
		<TD WIDTH="295">Abstract base class for all menu-related classes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>MenuItem</TT></I></TD>
		<TD WIDTH="295"><TT>MenuItem</TT> is the base class for all items that can appear in a <TT>Menu</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>MenuShortcut</TT></I></TD>
		<TD WIDTH="295">Keyboard accelerator associated with a given menu item</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Panel</TT></I></TD>
		<TD WIDTH="295">A simple container class</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Point</TT></I></TD>
		<TD WIDTH="295">Class used to model a unique position in a 2D coordinate space</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Polygon</TT></I></TD>
		<TD WIDTH="295">Class used to model the collection of points that form a polygon</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>PopupMenu</TT></I></TD>
		<TD WIDTH="295">Class used to create a pop-up menu</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>PrintJob</TT></I></TD>
		<TD WIDTH="295">Abstract class used to model an active session with the printer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Rectangle</TT></I></TD>
		<TD WIDTH="295">Class used to model the collection of points that form a rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Scrollbar</TT></I></TD>
		<TD WIDTH="295">Class used to model either a horizontal or vertical scrollbar</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>ScrollPane</TT></I></TD>
		<TD WIDTH="295">Container that can house a series of components and, potentially, can scroll to show
			those components not currently visible</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>SystemColor</TT></TD>
		<TD WIDTH="295">Class used to model the system-specific colors in use on the local machine</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>TextArea</TT></I></TD>
		<TD WIDTH="295">Class used to model a multiline text area</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>TextComponent</TT></I></TD>
		<TD WIDTH="295">Base class of both <TT>TextArea</TT> and <TT>TextField</TT> and any other Component
			that allows the editing of text</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>TextField</TT></I></TD>
		<TD WIDTH="295">Class used to model a one-line text area</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>TexturePaint</TT></TD>
		<TD WIDTH="295">Class used to fill a shape with a given texture</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Toolkit</TT></I></TD>
		<TD WIDTH="295">Abstract class for classes that are used to bind components to their native implementations</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>Window</TT></TD>
		<TD WIDTH="295">Parent class to many containers</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtAWTEventFONTTT"></A><TT>java.awt.AWTEvent</TT></H3>
<P><TT>public abstract class AWTEvent extends java.util.EventObject</TT></P>

<P>AWTEvent is the abstract base class for all AWT-related events. Because this class
is abstract, you will never instantiate it directly, but you will often work with
its child <BR>
classes. Additionally, when you're developing your own UI components, any new event
classes you may need should extend AWTEvent.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.AWTEvent</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final long ACTION_EVENT_MASK</TT></TD>
		<TD WIDTH="295">Indicates an action event</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final long ADJUSTMENT_EVENT_MASK</TT></TD>
		<TD WIDTH="295">Indicates an adjustment event</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final long COMPONENT_EVENT_MASK</TT></TD>
		<TD WIDTH="295">Indicates a component event</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected boolean consumed</TT></TD>
		<TD WIDTH="295">True if the event has been consumed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final long CONTAINER_EVENT_MASK</TT></TD>
		<TD WIDTH="295">Indicates a container event</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final long FOCUS_EVENT_MASK</TT></TD>
		<TD WIDTH="295">Indicates a focus event</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected int id</TT></TD>
		<TD WIDTH="295">Event ID</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final long INPUT_METHOD_EVENT_MASK</TT></TD>
		<TD WIDTH="295">Indicates an input method event</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final long ITEM_EVENT_MASK</TT></TD>
		<TD WIDTH="295">Indicates an item event</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final long KEY_EVENT_MASK</TT></TD>
		<TD WIDTH="295">Indicates a key event</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final long</TT> <TT>MOUSE_EVENT_MASK</TT></TD>
		<TD WIDTH="295">Indicates a mouse event</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final long</TT> <TT>MOUSE_MOTION_EVENT_MASK</TT></TD>
		<TD WIDTH="295">Indicates a mouse motion event</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final long</TT> <TT>RESERVED_ID_MAX</TT></TD>
		<TD WIDTH="295">Max reserved ID</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final long</TT> <TT>TEXT_EVENT_MASK</TT></TD>
		<TD WIDTH="295">Indicates a text event</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final long</TT> <TT>WINDOW_EVENT_MASK</TT></TD>
		<TD WIDTH="295">Indicates a window event</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void consume()</TT></TD>
		<TD WIDTH="295">Invoked internally to consume an event</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getID()</TT></TD>
		<TD WIDTH="295">Obtains the event ID</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected boolean</TT></TD>
		<TD WIDTH="295">Invoked internally to check if an event</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>isConsumed()</TT></TD>
		<TD WIDTH="295">is consumed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String paramString()</TT></TD>
		<TD WIDTH="295">Obtains the parameter string associated with this event</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String toString()</TT></TD>
		<TD WIDTH="295">Returns a string version of the object</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtBorderLayoutFONTTT"></A><TT>java.awt.BorderLayout</TT></H3>
<P><TT>public class BorderLayout extends java.lang.Object implements LayoutManager2,
Serializable</TT></P>

<P>The BorderLayout layout manager allows for positioning of up to five components
in a container. Each component is assigned to either the north, south, east, west,
or center of the container. When the container is resized, each of its components
will automatically hold its relative position.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.BorderLayout</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final String AFTER_LAST_LINE</TT></TD>
		<TD WIDTH="295">Used to indicate that acomponent should be placed after the last line of the layout's
			content</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final String AFTER_LINE_ENDS</TT></TD>
		<TD WIDTH="295">Used to indicate that a component should be placed at the end of the line direction
			for the layout</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final String BEFORE_FIRST_LINE</TT></TD>
		<TD WIDTH="295">Used to indicate that acomponent should be placed before the first line of the layout's
			content</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final String BEFORE_LINE_BEGINS</TT></TD>
		<TD WIDTH="295">Used to indicate that a component should be placed at the beginning of the line direction
			for the layout</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final String CENTER</TT></TD>
		<TD WIDTH="295">Used to indicate that a component should be placed in the center region</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final String EAST</TT></TD>
		<TD WIDTH="295">Used to indicate that a component should be placed in the east region</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final String NORTH</TT></TD>
		<TD WIDTH="295">Used to indicate that a component should be placed in the north region</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final String SOUTH</TT></TD>
		<TD WIDTH="295">Used to indicate that a component should be placed in the south region</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final String WEST</TT></TD>
		<TD WIDTH="295">Used to indicate that a component should be placed in the west region</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addLayoutComponent(Component, Object)</TT></TD>
		<TD WIDTH="295">Adds the specified component to the screen using the specified constraints</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addLayoutComponent (String, Component)</TT></TD>
		<TD WIDTH="295">Adds the specified component to the container in region</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getHgap()</TT></TD>
		<TD WIDTH="295">Obtains the horizontal pixel gap</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getLayoutAlignmentX(Container)</TT></TD>
		<TD WIDTH="295">Obtains the alignment along the x-axis for the container using this layout</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getLayoutAlignmentY(Container)</TT></TD>
		<TD WIDTH="295">Obtains the alignment along the y-axis for the container using this layout</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getVgap()</TT></TD>
		<TD WIDTH="295">Obtains the vertical pixel gap</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void invalidateLayout(Container)</TT></TD>
		<TD WIDTH="295">Invalidates the layout of the specified container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void layoutContainer(Container)</TT></TD>
		<TD WIDTH="295">Causes the specified container to be laid out</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension maximumLayoutSize(Container)</TT></TD>
		<TD WIDTH="295">Obtains the maximum size for the container using this layout</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension minimumLayoutSize(Container)</TT></TD>
		<TD WIDTH="295">Obtains the minimum size for the container using this layout</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension preferredLayoutSize(Container)</TT></TD>
		<TD WIDTH="295">Obtains the preferred size for the container using this layout</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeLayoutComponent(Component)</TT></TD>
		<TD WIDTH="295">Removes the specified component from the screen</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setHgap(int)</TT></TD>
		<TD WIDTH="295">Assigns the horizontal gap (in pixels)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setVgap(int)</TT></TD>
		<TD WIDTH="295">Assigns the vertical gap (in pixels)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String toString()</TT></TD>
		<TD WIDTH="295">Obtains a string version of the object</TD>
	</TR>
</TABLE>
</P>

<P><BR>
<IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.BorderLayout</TT>: Example</H4>
<P>The <TT>BorderLayout</TT> layout manager allows components to be placed along
the edges and center of a panel:


<BLOCKQUOTE>
	<PRE>import java.awt.*;



public class BorderLayoutDemo extends Frame { 



    public BorderLayoutDemo() { 

        Button northButton = new Button(&quot;North&quot;);

        Button westButton = new Button(&quot;West&quot;);

        Button eastButton = new Button(&quot;East&quot;);

        Button southButton = new Button(&quot;South&quot;);

        Button centerButton = new Button(&quot;Center&quot;);



        // Create a new BorderLayout object with 10 pixel gaps

        // between all components.

        BorderLayout borderLayout = new BorderLayout(10,10);



        // Set the layout.

        setLayout(borderLayout);



        // Add some components.

               add(northButton, BorderLayout.NORTH);

       add(westButton, BorderLayout.WEST);

       add(eastButton, BorderLayout.EAST);

       add(southButton, BorderLayout.SOUTH);

       add(centerButton, BorderLayout.CENTER);

               // Allow the program to be shut down by closing the

       // main window.

       addWindowListener(new WindowAdapter() { 

         public void windowClosing(WindowEvent we) { 

           System.exit(0);

         } 

       } );

} 





    public static void main(String args[]) { 

        BorderLayoutDemo myDemo = new BorderLayoutDemo();

        myDemo.pack();

        myDemo.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtButtonFONTTT"></A><TT>java.awt.Button</TT></H3>
<P><TT>public class Button extends Component</TT></P>

<P>The Button class represents an onscreen button. Because this class is created
using a native peer object, it will have the look and feel of a native button.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Button</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="247">
			<P ALIGN="CENTER"><B>Methods</B>
		</TD>
		<TD WIDTH="246">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="247"><TT>public void addActionListener(ActionListener)</TT></TD>
		<TD WIDTH="246">Adds an <TT>ActionListener</TT> to the collection of listeners; it is notified when
			the button is clicked on</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="247"><TT>public void addNotify()</TT></TD>
		<TD WIDTH="246">Causes the button's peer to be created</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="247"><TT>public String getActionCommand()</TT></TD>
		<TD WIDTH="246">Obtains the action command associated with this button</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="247"><TT>public String getLabel()</TT></TD>
		<TD WIDTH="246">Obtains the label for this button</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="247"><TT>public String paramString()</TT></TD>
		<TD WIDTH="246">Obtains the parameter string associated with this button</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="247"><TT>protected void processActionEvent(ActionEvent)</TT></TD>
		<TD WIDTH="246">Invoked internally for event management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="247"><TT>protected void processEvent(AWTEvent)</TT></TD>
		<TD WIDTH="246">Invoked internally for event management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="247"><TT>public void removeActionListener(ActionListener)</TT></TD>
		<TD WIDTH="246">Removes an <TT>ActionListener</TT> from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="247"><TT>public void setActionCommand(String)</TT></TD>
		<TD WIDTH="246">Sets the action command associated with this button</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="247"><TT>public void setLabel(String)</TT></TD>
		<TD WIDTH="246">Sets the label associated with this button</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Button</TT>: Example</H4>
<P>Creating and adding a <TT>Button</TT> object:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;



public class ButtonDemo extends Frame { 



    public ButtonDemo() { 

        // create a button

        Button demoButton = new Button(&quot;Demo Button&quot;);



        // add it to the screen

        add(demoButton);



        // Allow the program to be shut down by closing the

       // main window.

       addWindowListener(new WindowAdapter() { 

               public void windowClosing(WindowEvent we) { 

                      System.exit(0);

               } 

       } );

    } 





    public static void main(String args[]) { 

        ButtonDemo myDemo = new ButtonDemo();

        myDemo.pack();

        myDemo.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtCanvasFONTTT"></A><TT>java.awt.Canvas</TT></H3>
<P><TT>public class Canvas extends Component</TT></P>

<P>The Canvas class represents a peered component that can be drawn into. With the
JDK 1.1, you will find that it is usually less expensive to directly subclass Component
because that will allow you to draw into a peer-free piece of the screen.</P>

<P>If you do decide to subclass Canvas, all painting should occur in the paint()
method. The JVM will automatically call this method when the Canvas object is shown
on the screen.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Canvas</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addNotify()</TT></TD>
		<TD WIDTH="295">Creates the component's peer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void paint(Graphics)</TT></TD>
		<TD WIDTH="295">Invoked when the component should draw itself into the specified <TT>Graphics</TT>
			object</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Canvas</TT>: Example</H4>
<P>The <TT>Canvas</TT> class allows text and graphics primitives to be directly drawn
onto it:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;



class CanvasDemo extends Canvas { 



    public CanvasDemo() { 

        setSize(100,100);

    } 





    public void paint(Graphics g) { 

        g.setColor(Color.black);

        g.drawString(&quot;Canvas Demo&quot;, 20, 20);

    } 

    

    public static void main(String[] args) { 

          Frame myDemo = new Frame();



          myDemo.add(new CanvasDemo());



          myDemo.addWindowListener(new WindowAdapter() { 

               public void windowClosing(WindowEvent we) { 

                      System.exit(0);

               } 

        } );



         myDemo.pack();

         myDemo.setVisible(true);

    } 


</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtCardLayoutFONTTT"></A><TT>java.awt.CardLayout</TT></H3>
<P><TT>public class CardLayout extends Object implements LayoutManager2, Serializable</TT></P>

<P>The CardLayout layout manager allows for a series of components to be assigned
to a unique container, with the understanding that only one component can be shown
at a given time. This class is useful for instances where a &quot;slide show&quot;
effect needs to be produced.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.CardLayout</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addLayoutComponent (Component, Object)</TT></TD>
		<TD WIDTH="295">Adds the specified component to the container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addLayoutComponent (String, Component)</TT></TD>
		<TD WIDTH="295">Adds the specified component to the container. This function has been deprecated
			in deference to <BR>
			<TT>addLayoutComponent(Component,Object)</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void first(Container)</TT></TD>
		<TD WIDTH="295">Shows the first component managed by the card layout</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void getHgap()</TT></TD>
		<TD WIDTH="295">Obtains the horizontal gap (in pixels)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getLayoutAlignmentX(Container)</TT></TD>
		<TD WIDTH="295">Obtains the alignment along the x-axis for the given container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getLayoutAlignmentY(Container)</TT></TD>
		<TD WIDTH="295">Obtains the alignment along the y-axis for the given container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getVgap()</TT></TD>
		<TD WIDTH="295">Obtains the vertical gap (in pixels)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void invalidateLayout(Container)</TT></TD>
		<TD WIDTH="295">Invalidates the specified container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295">public void last(Container)</TD>
		<TD WIDTH="295">Shows the last component managed by the card layout</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void layoutContainer(Container)</TT></TD>
		<TD WIDTH="295">Lays out the specified container using card layout</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension maximumLayoutSize(Container)</TT></TD>
		<TD WIDTH="295">Obtains the maximum layout size for the specified container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension minimumLayoutSize(Container)</TT></TD>
		<TD WIDTH="295">Obtains the minimum layout size for the specified container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void next(Container)</TT></TD>
		<TD WIDTH="295">Shows the next component managed by the card layout</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension preferredLayoutSize(Container)</TT></TD>
		<TD WIDTH="295">Obtains the preferred layout size for the specified container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void previous(Container)</TT></TD>
		<TD WIDTH="295">Shows the previous component managed by the card layout</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeLayoutComponent(Component)</TT></TD>
		<TD WIDTH="295">Removes the specified component from the container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setHgap(int)</TT></TD>
		<TD WIDTH="295">Sets the horizontal gap</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setVgap(int)</TT></TD>
		<TD WIDTH="295">Sets the vertical gap</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void show(Container, String)</TT></TD>
		<TD WIDTH="295">Shows the given component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String toString()</TT></TD>
		<TD WIDTH="295">Returns a string describing this object</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtCheckboxFONTTT"></A><TT>java.awt.Checkbox</TT></H3>
<P><TT>public class Checkbox extends Component implements ItemSelectable</TT></P>

<P>The java.awt.Checkbox class represents either an onscreen checkbox or a radio
button. Because the Checkbox class is created using a native peer, it will have the
look and feel of a native checkbox or radio button. Both a checkbox and a radio button
serve a similar purpose, so JavaSoft engineers decided that they could be represented
with the same class. Covered in the next section is the class CheckboxGroup. If you
create a Checkbox object and add it to a CheckboxGroup, it will appear and act like
a radio button. If you create a Checkbox object and do not add it to a CheckboxGroup,
it will appear and act like a checkbox.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Checkbox</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addItemListener(ItemListener)</TT></TD>
		<TD WIDTH="295">Adds an <TT>ItemListener</TT> to the collection of listeners; an <TT>ItemListener</TT>
			is notified whenever the checkbox state changes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addNotify()</TT></TD>
		<TD WIDTH="295">Causes the checkbox's peer to be created</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void getCheckboxGroup()</TT></TD>
		<TD WIDTH="295">Obtains the <TT>CheckboxGroup</TT> associated with this object, or null if there
			is none</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getLabel()</TT></TD>
		<TD WIDTH="295">Obtains the label displayed with this checkbox</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Object[] getSelectedObjects()</TT></TD>
		<TD WIDTH="295">Returns an array of length 1, with either the label of the checkbox if it is checked
			or null if it is not</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean getState()</TT></TD>
		<TD WIDTH="295">Obtains the current state of the checkbox</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected String paramString()</TT></TD>
		<TD WIDTH="295">Obtains the parameter string associated with the checkbox</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processEvent(AWTEvent)</TT></TD>
		<TD WIDTH="295">Used internally for event management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void</TT></TD>
		<TD WIDTH="295">Used internally for event</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>processItemEvent(ItemEvent)</TT></TD>
		<TD WIDTH="295">management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void</TT></TD>
		<TD WIDTH="295">Removes an <TT>ItemListener</TT> from</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>removeItemListener(ItemListener)</TT></TD>
		<TD WIDTH="295">the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void</TT></TD>
		<TD WIDTH="295">Associates this object with a</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>setCheckboxGroup(CheckboxGroup)</TT></TD>
		<TD WIDTH="295"><TT>CheckboxGroup</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setLabel(String)</TT></TD>
		<TD WIDTH="295">Sets the label displayed with the checkbox</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setState(boolean)</TT></TD>
		<TD WIDTH="295">Sets the current state of the checkbox</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Checkbox</TT>: Example</H4>
<P>Checkbox objects are used to represent an item with a binary state:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;



public class CheckboxDemo extends Frame { 



    public CheckboxDemo() { 

        // create some widgets

        Label questionLabel 

        = new Label(&quot;Check Off All Authors You Read:&quot;);

Checkbox demoCheckbox1 = new Checkbox(&quot;William Gibson&quot;);

        Checkbox demoCheckbox2 = new Checkbox(&quot;Larry Nevin&quot;);

        Checkbox demoCheckbox3 = new Checkbox(&quot;Irma S. Rombauer&quot;);

        Checkbox demoCheckbox4 = new Checkbox(&quot;Douglas Adams&quot;);

        Checkbox demoCheckbox5 = new Checkbox(&quot;Neal Stepenson&quot;);



        // set the layout

        setLayout( new GridLayout(6,1,10,10) );



        // add them to the screen

        add(questionLabel);

        add(demoCheckbox1);

        add(demoCheckbox2);

        add(demoCheckbox3);

        add(demoCheckbox4);

        add(demoCheckbox5);

    } 





    public static void main(String args[]) { 

        CheckboxDemo myDemo = new CheckboxDemo();



         // Allow the program to be shut down by closing the

         // main window.

         myDemo.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                 System.exit(0);

             } 

         } );



        myDemo.pack();

        myDemo.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtCheckboxGroupFONTTT"></A><TT>java.awt.CheckboxGroup</TT></H3>
<P><TT>public class CheckboxGroup extends Object</TT></P>

<P>Unlike the other classes in this section, CheckboxGroup is not a UI component
itself. Rather, it is a utility class used with the Checkbox class.</P>

<P>To create radio buttons in Java, you instantiate a CheckboxGroup object and add
to it a series of Checkbox objects. These Checkbox objects now appear onscreen as
radio buttons, and only one Checkbox object in the CheckboxGroup may be true.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.CheckboxGroup</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">Methods/Events</TD>
		<TD WIDTH="295">Description</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Checkbox getSelectedCheckbox()</TT></TD>
		<TD WIDTH="295">Obtains the currently selected checkbox</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setSelectedCheckbox(Checkbox)</TT></TD>
		<TD WIDTH="295">Sets the currently selected checkbox</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String toString()</TT></TD>
		<TD WIDTH="295">Obtains a string representation of this object</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.CheckboxGroup</TT>: Example</H4>
<P>The <TT>CheckboxGroup</TT> class acts as an umbrella holding together <TT>Checkbox</TT>
objects. A <TT>Checkbox</TT> object owned by a <TT>CheckboxGroup</TT> object is displayed
as a radio button:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;



public class CheckboxGroupDemo extends Frame { 



    public CheckboxGroupDemo() { 

        // create some widgets

        Label questionLabel 

        = new Label(&quot;Who is your favorite author?:&quot;);

CheckboxGroup demoGroup = new CheckboxGroup();

        Checkbox demoCheckbox1 

         = new Checkbox(&quot;William Gibson&quot;, demoGroup, false);

        Checkbox demoCheckbox2 

        = new Checkbox(&quot;Larry Nevin&quot;, demoGroup, false);

        Checkbox demoCheckbox3 

        = new Checkbox(&quot;Irma S. Rombauer&quot;, demoGroup, true);

        Checkbox demoCheckbox4 

        = new Checkbox(&quot;Douglas Adams&quot;, demoGroup, false);

        Checkbox demoCheckbox5 

        = new Checkbox(&quot;Neal Stepenson&quot;, demoGroup, false);



        // set the layout

        setLayout( new GridLayout(6,1,10,10) );



        // add them to the screen

        add(questionLabel);

        add(demoCheckbox1);

        add(demoCheckbox2);

        add(demoCheckbox3);

        add(demoCheckbox4);

        add(demoCheckbox5);

    } 





    public static void main(String args[]) { 

        CheckboxGroupDemo myDemo = new CheckboxGroupDemo();



         // Allow the program to be shut down by closing the

         // main window.

         myDemo.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                 System.exit(0);

             } 

         } );

        myDemo.pack();

        myDemo.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtCheckboxMenuItemFONTTT"></A><TT>java.awt.CheckboxMenuItem</TT></H3>
<P><TT>public class CheckboxMenuItem extends MenuItem implements ItemSelectable</TT></P>

<P>Often a menu will simply allow the selection of a unique item. From time to time,
however, a UI requires that a binary choice be placed in a pull-down menu. In such
a situation, the CheckboxMenuItem class is used to place a checkbox next to a menu
option in a pull-down menu.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.CheckboxMenuItem</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addItemListener(ItemListener)</TT></TD>
		<TD WIDTH="295">Adds an <TT>ItemListener</TT> to the collection of listeners; an <TT>ItemListener</TT>
			is notified whenever the checkbox state changes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addNotify()</TT></TD>
		<TD WIDTH="295">Causes the <TT>CheckboxMenuItem</TT>'s peer to be created</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Object[] getSelectedObjects()</TT></TD>
		<TD WIDTH="295">Returns an array of length 1, with either the label of the checkbox if it is checked
			or null if it is not</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean getState()</TT></TD>
		<TD WIDTH="295">Obtains the current state of the <TT>CheckboxMenuItem</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected String paramString()</TT></TD>
		<TD WIDTH="295">Obtains the parameter string associated with the <TT>CheckboxMenuItem</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processEvent(AWTEvent)</TT></TD>
		<TD WIDTH="295">Used internally for event management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processItemEvent(ItemEvent)</TT></TD>
		<TD WIDTH="295">Used internally for event management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeItemListener(ItemListener)</TT></TD>
		<TD WIDTH="295">Removes an <TT>ItemListener</TT> from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setState(boolean)</TT></TD>
		<TD WIDTH="295">Sets the current state of the <TT>CheckboxMenuItem</TT></TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.CheckboxMenuItem</TT>: Example</H4>
<P>The <TT>CheckboxMenuItem</TT> class allows for the displaying of a menu item that
has a binary state:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;



public class CheckboxMenuItemDemo extends Frame { 



    public CheckboxMenuItemDemo() { 

        MenuBar myMenuBar = new MenuBar();

        Menu options = new Menu(&quot;Options&quot;);

        CheckboxMenuItem toggle = new CheckboxMenuItem(&quot;Toggle&quot;);



        options.add(toggle);

        myMenuBar.add(options);

        setMenuBar(myMenuBar);

    } 





    public static void main(String args[]) { 

        CheckboxMenuItemDemo myDemo = new CheckboxMenuItemDemo();



         // Allow the program to be shut down by closing the

         // main window.

         myDemo.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                 System.exit(0);

             } 

         } );

        myDemo.pack();

        myDemo.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtChoiceFONTTT"></A><TT>java.awt.Choice</TT></H3>
<P><TT>public class Choice extends Component implements ItemSelectable</TT></P>

<P>A Choice object is used to present the user with a list of options, from which
he may select exactly one. Except during selection, the currently selected option
only is displayed.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Choice</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void add(String)</TT></TD>
		<TD WIDTH="295">Adds the <TT>String</TT> object to the <TT>Choice</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addItem(String)</TT></TD>
		<TD WIDTH="295">Adds the <TT>String</TT> object to the <TT>Choice</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addItemListener(ItemListener)</TT></TD>
		<TD WIDTH="295">Adds an <TT>ItemListener</TT> to the collection of listeners; an <TT>ItemListener</TT>
			is notified whenever the selected item changes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addNotify()</TT></TD>
		<TD WIDTH="295">Creates the component's peer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int countItems()</TT></TD>
		<TD WIDTH="295">Obtains a count of items in the <TT>Choice</TT>. Deprecated, use <TT>getItemCount()</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getItem(int)</TT></TD>
		<TD WIDTH="295">Obtains the item at the specified index, or null if it does not exist</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getItemCount()</TT></TD>
		<TD WIDTH="295">Obtains a count of items in the <TT>Choice</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getSelectedIndex()</TT></TD>
		<TD WIDTH="295">Obtains the index of the selected item</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getSelectedItem()</TT></TD>
		<TD WIDTH="295">Obtains the selected item</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Object[] getSelectedObjects()</TT></TD>
		<TD WIDTH="295">Obtains an array of length 1, where the first element is the selected item</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void insert(String, int)</TT></TD>
		<TD WIDTH="295">Inserts the specified <TT>String</TT> at the</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295">specified index</TD>
		<TD WIDTH="295"></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected String paramString()</TT></TD>
		<TD WIDTH="295">Obtains the parameter string for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processEvent(AWTEvent)</TT></TD>
		<TD WIDTH="295">Used internally for event management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void</TT></TD>
		<TD WIDTH="295">Used internally for event</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>processItemEvent(ItemEvent)</TT></TD>
		<TD WIDTH="295">management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void remove(int)</TT></TD>
		<TD WIDTH="295">Removes the item at the specified index from the <TT>Choice</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void remove(String)</TT></TD>
		<TD WIDTH="295">Removes the first occurrence of the specified item from the <TT>Choice</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeAll()</TT></TD>
		<TD WIDTH="295">Removes all items from the <TT>Choice</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void</TT></TD>
		<TD WIDTH="295">Removes the specified</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>removeItemListener(ItemListener)</TT></TD>
		<TD WIDTH="295"><TT>ItemListener</TT> from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void select(int)</TT></TD>
		<TD WIDTH="295">Selects the item at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void select(String)</TT></TD>
		<TD WIDTH="295">Selects the specified item</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Choice</TT>: Example</H4>
<P>The <TT>Choice</TT> class allows for a single item to be selected from a list
containing many:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;



public class ChoiceDemo extends Frame { 



    public ChoiceDemo() { 

        Label questionLabel 

        = new Label(&quot;Who is your favorite author?:&quot;);



        Choice options = new Choice();

        options.add(&quot;William Gibson&quot;);

        options.add(&quot;Larry Nevin&quot;);

        options.add(&quot;Irma S. Rombauer&quot;);

        options.add(&quot;Douglas Adams&quot;);

        options.add(&quot;Neal Stepenson&quot;);



        setLayout(new FlowLayout(10));

        add(questionLabel);

        add(options);

    } 





    public static void main(String args[]) { 

        ChoiceDemo myDemo = new ChoiceDemo();



         // Allow the program to be shut down by closing the

         // main window.

         myDemo.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                 System.exit(0);

             } 

         } );



        myDemo.pack();

        myDemo.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtColorFONTTT"></A><TT>java.awt.Color</TT></H3>
<P><TT>public class Color extends Object implements Serializable</TT></P>

<P>The class Color encapsulates RGB information for a given color. In addition to
allowing user selection of red, green, and blue values, the class provides a series
of static member variables representing commonly used colors.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Color</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final Color black</TT></TD>
		<TD WIDTH="295">Represents the color black</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final Color blue</TT></TD>
		<TD WIDTH="295">Represents the color blue</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final Color cyan</TT></TD>
		<TD WIDTH="295">Represents the color cyan</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final Color darkGray</TT></TD>
		<TD WIDTH="295">Represents the color dark gray</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final Color gray</TT></TD>
		<TD WIDTH="295">Represents the color gray</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final Color green</TT></TD>
		<TD WIDTH="295">Represents the color green</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final Color lightGray</TT></TD>
		<TD WIDTH="295">Represents the color light gray</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final Color magenta</TT></TD>
		<TD WIDTH="295">Represents the color magenta</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final Color orange</TT></TD>
		<TD WIDTH="295">Represents the color orange</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final Color pink</TT></TD>
		<TD WIDTH="295">Represents the color pink</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final Color red</TT></TD>
		<TD WIDTH="295">Represents the color red</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final Color white</TT></TD>
		<TD WIDTH="295">Represents the color white</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final Color yellow</TT></TD>
		<TD WIDTH="295">Represents the color yellow</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Color brighter()</TT></TD>
		<TD WIDTH="295">Returns a brighter version of the color represented by the active object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public PaintContext createContext (ColorModel, Rectangle, Rectangle2D, AffineTransform,
			RenderingHints)</TT></TD>
		<TD WIDTH="295">Returns a <TT>PaintContext</TT> that can be used to generate a solid color pattern</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Color darker()</TT></TD>
		<TD WIDTH="295">Returns a darker version of the color represented by the active object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static Color decode(String)</TT></TD>
		<TD WIDTH="295">Transforms the <TT>String</TT> object to an integer and returns the specified color</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean equals(Object)</TT></TD>
		<TD WIDTH="295">Tests if the two objects reference the same color</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getAlpha()</TT></TD>
		<TD WIDTH="295">Returns the Alpha portion of the color</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getBlue()</TT></TD>
		<TD WIDTH="295">Obtains the blue portion of the color</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static Color getColor(String)</TT></TD>
		<TD WIDTH="295">Obtains a color in the system<TT> </TT>properties identified by the specified string</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static Color getColor(String, Color)</TT></TD>
		<TD WIDTH="295">Obtains a color in the system properties identified by the specified string; if the
			specified property cannot be found, the <TT>Color</TT> parameter is returned</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static Color getColor(String, int)</TT></TD>
		<TD WIDTH="295">Obtains a color in the system properties identified by the specified string; if the
			specified property cannot be found, the <TT>int</TT> parameter is converted to a
			<TT>Color</TT> object and returned</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public float[] getColorComponents (ColorSpace, float[])</TT></TD>
		<TD WIDTH="295">Obtains an array containing the color components (no alpha) of the color, in the
			specified <TT>ColorSpace</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public float[]getColorComponents(float[])</TT></TD>
		<TD WIDTH="295">Obtains an array containing the color components (no alpha) of the color</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public ColorSpace getColorSpace()</TT></TD>
		<TD WIDTH="295">Obtains the <TT>ColorSpace</TT> of the <TT>Color</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public float[] getComponents (ColorSpace, float[])</TT></TD>
		<TD WIDTH="295">Obtains an array containing the color components of the color, in the specified <TT>ColorSpace</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public float[] getComponents(float[])</TT></TD>
		<TD WIDTH="295">Obtains an array containing the color and alpha components of the Color</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getGreen()</TT></TD>
		<TD WIDTH="295">Obtains the green portion of the color</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static Color getHSBColor(float, float, float)</TT></TD>
		<TD WIDTH="295">Creates a new Color object based on the hue, saturation, and brightness parameters</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getRed()</TT></TD>
		<TD WIDTH="295">Obtains the red portion of the color</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getRGB()</TT></TD>
		<TD WIDTH="295">Obtains an RGB code for the color</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public float[]getRGBColorComponents(float[])</TT></TD>
		<TD WIDTH="295">Obtains an array containing the color components (no alpha) of the color in the default
			ColorSpace</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public float[]getRGBComponents(float[])</TT></TD>
		<TD WIDTH="295">Obtains an array containing the color components of the color in the default ColorSpace</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int hashCode()</TT></TD>
		<TD WIDTH="295">Obtains a hash code for the object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static int HSBtoRGB(float, float, float)</TT></TD>
		<TD WIDTH="295">Obtains an RGB value for the specified HSB value</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static int RGBtoHSB(int, int, int, float[])</TT></TD>
		<TD WIDTH="295">Obtains an HSB value for the specified RGB value</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String toString()</TT></TD>
		<TD WIDTH="295">Obtains a string representing this object</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Color</TT>: Example</H4>
<P>The <TT>Color</TT> object is used to represent a physical color:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;



class ColorDemo extends Canvas implements Runnable { 

    private Color myColor;

    private Thread myThread;



    public ColorDemo() { 

        setSize(100,100);

        myColor = Color.red;

    } 





    public void paint(Graphics g) { 

        // draw a square with the current color

        g.setColor(myColor);

        g.fillRect(0,0, getSize().width, getSize().height);

    } 



public void start() { 

        myThread = new Thread(this);

        myThread.start();

    } 





    public void run() { 

        while(true) { 

            // get progressively brighter

            myColor = myColor.brighter();

            repaint();

        } 

    } 

} 





public class DisplayFrameColor extends Frame { 



    public DisplayFrameColor() { 

        ColorDemo myDemo = new ColorDemo();

        myDemo.start();

        add(myDemo);

    } 





    public static void main(String args[]) { 

        DisplayFrameColor myDemo = new DisplayFrameColor();



         // Allow the program to be shut down by closing the

         // main window.

         myDemo.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                 System.exit(0);

             } 

        } );



        myDemo.pack();

        myDemo.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtComponentFONTTT"></A><TT>java.awt.Component</TT></H3>
<P><TT>public class Component extends Object</TT></P>

<P>The class Component is the basic class that is extended by almost all UI classes
in the package java.awt. If you understand its functionality, you'll understand all
other UI components in the java.awt package.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Component</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void add(PopupMenu)</TT></TD>
		<TD WIDTH="295">Adds a pop-up menu to this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addComponentListener<BR>
			(ComponentListener)</TT></TD>
		<TD WIDTH="295">Adds a <TT>ComponentListener</TT> to the collection of listeners; a<TT> ComponentListener</TT>
			is notified whenever the component is hidden, shown, moved, or resized</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addFocusListener<BR>
			(FocusListener)</TT></TD>
		<TD WIDTH="295">Adds a <TT>FocusListener</TT> to the collection of listeners; a<TT> FocusListener</TT>
			is notified whenever focus is gained or lost</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>Public void addInputMethodListener<BR>
			(InputMethodListener)</TT></TD>
		<TD WIDTH="295">Adds an <TT>InputMethodListener</TT> to the collection of listeners; an <TT>InputMethodListener</TT>
			is notified whenever a text editing event occurs</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addKeyListener<BR>
			(KeyListener)</TT></TD>
		<TD WIDTH="295">Adds a <TT>KeyListener</TT> to the collection of listeners; a<TT> KeyListener</TT>
			is notified every time a key is pressed on the keyboard</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addMouseListener<BR>
			(MouseListener)</TT></TD>
		<TD WIDTH="295">Adds a <TT>MouseListener</TT> to the collection of listeners; a<TT> MouseListener</TT>
			is notified every time the mouse is clicked, pressed, or released, or enters/exits
			the component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addMouseMotionListener<BR>
			(MouseMotionListener)</TT></TD>
		<TD WIDTH="295">Adds a <TT>MouseMotionListener</TT> to the collection of listeners; a<TT> MouseMotionListener</TT>
			is notified every time the mouse moves</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addNotify()</TT></TD>
		<TD WIDTH="295">Alerts the component that it is now part of a displayable containment hierarchy</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int checkImage<BR>
			(Image, ImageObserver)</TT></TD>
		<TD WIDTH="295">Obtains the status of the image preparation for the specified image</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int checkImage<BR>
			(Image, int, int, ImageObserver)</TT></TD>
		<TD WIDTH="295">Obtains the status of the image preparation for the specified image</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected AWTEvent coalesceEvents<BR>
			(AWTEvent, AWTEvent)</TT></TD>
		<TD WIDTH="295">Potentially combines an existing event with a new<TT> </TT>event</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean contains(int, int)</TT></TD>
		<TD WIDTH="295">Returns true if the specified component contains the specified coordinates</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean contains(Point)</TT></TD>
		<TD WIDTH="295">Returns true if the specified component contains the specified coordinates</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Image createImage<BR>
			(ImageProducer)</TT></TD>
		<TD WIDTH="295">Creates a new <TT>Image</TT> object using the data in the <TT>ImageProducer</TT>
			object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Image createImage(int, int)</TT></TD>
		<TD WIDTH="295">Creates a new <TT>Image</TT> object using the specified height and width; this method
			is usually used to create an offscreen image used in double-buffering</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected final void disableEvents(long)</TT></TD>
		<TD WIDTH="295">Disables the events specified with the <TT>long</TT> parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void dispatchEvent(AWTEvent)</TT></TD>
		<TD WIDTH="295">Dispatches an event to this component, or one of its children</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void doLayout()</TT></TD>
		<TD WIDTH="295">Lays out all components again</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void enableEvents(long)</TT></TD>
		<TD WIDTH="295">Enables the events specified with the <TT>long</TT> parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void enableInputMethods(boolean)</TT></TD>
		<TD WIDTH="295">Sets the enabled status of<TT> </TT>input method support</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void firePropertyChange<BR>
			(String, Object, Object)</TT></TD>
		<TD WIDTH="295">Report bound property changes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public float getAlignmentX()</TT></TD>
		<TD WIDTH="295">Obtains the alignment along the x-axis for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public float getAlignmentY()</TT></TD>
		<TD WIDTH="295">Obtains the alignment along the y-axis for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Color getBackground()</TT></TD>
		<TD WIDTH="295">Obtains the background color for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Rectangle getBounds()</TT></TD>
		<TD WIDTH="295">Obtains the bounding box for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Rectangle getBounds(Rectangle)</TT></TD>
		<TD WIDTH="295">Stores the bounding box for this component in the specified <TT>Rectangle</TT>, and
			returns the rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public ColorModel getColorModel()</TT></TD>
		<TD WIDTH="295">Obtains the color model in use for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Component getComponentAt(int, int)</TT></TD>
		<TD WIDTH="295">Obtains the child component at the specified coordinates</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Component getComponentAt(Point)</TT></TD>
		<TD WIDTH="295">Obtains the child component at the specified coordinates</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public ComponentOrientation<BR>
			getComponentOrientation()</TT></TD>
		<TD WIDTH="295">Obtains the language-sensitive orientation that is used to order textual elements</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Cursor getCursor()</TT></TD>
		<TD WIDTH="295">Obtains the current <TT>Cursor</TT> object in use</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public DropTarget getDropTarget()</TT></TD>
		<TD WIDTH="295">Obtains the <TT>DropTarget </TT>associated for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Font getFont()</TT></TD>
		<TD WIDTH="295">Obtains the current <TT>Font</TT> object in use</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public FontMetrics getFontMetrics<BR>
			(Font)</TT></TD>
		<TD WIDTH="295">Obtains the <TT>FontMetrics</TT> object corresponding to the current font in use</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Color getForeground()</TT></TD>
		<TD WIDTH="295">Obtains the foreground color for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Graphics getGraphics()</TT></TD>
		<TD WIDTH="295">Obtains the <TT>Graphics</TT> object associated with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getHeight()</TT></TD>
		<TD WIDTH="295">Obtains the height of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public InputContext getInputContext()</TT></TD>
		<TD WIDTH="295">Obtains the InputContext for this component for text editing</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public InputMethodRequests <BR>
			getInputMethodRequests()</TT></TD>
		<TD WIDTH="295">Obtains the method request handler for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Locale getLocale()</TT></TD>
		<TD WIDTH="295">Obtains the locale of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Point getLocation()</TT></TD>
		<TD WIDTH="295">Obtains the relative coordinates of the component's top-left corner</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Point getLocation(Point)</TT></TD>
		<TD WIDTH="295">Stores the relative coordinates of the component's top left corner into the specified
			<TT>Point</TT> and returns that <TT>Point</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Point getLocationOnScreen()</TT></TD>
		<TD WIDTH="295">Obtains the global coordinates of the component's top-left corner</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getMaximumSize()</TT></TD>
		<TD WIDTH="295">Obtains the maximum size this component can take on</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getMinimumSize()</TT></TD>
		<TD WIDTH="295">Obtains the minimum size this component can take on</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getName()</TT></TD>
		<TD WIDTH="295">Obtains the logical name describing this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Object getParent()</TT></TD>
		<TD WIDTH="295">Obtains the parent component for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public ComponentPeer getPeer()</TT></TD>
		<TD WIDTH="295">Obtains a reference to the component's <TT>Peer</TT>. Deprecated, use <TT>isDisplayable()</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getPreferredSize()</TT></TD>
		<TD WIDTH="295">Obtains the preferred size for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getSize()</TT></TD>
		<TD WIDTH="295">Obtains the current size of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getSize(Dimension)</TT></TD>
		<TD WIDTH="295">Stores the current size of this component in the specified <TT>Dimension</TT> and
			returns that <TT>Dimension</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Toolkit getToolkit()</TT></TD>
		<TD WIDTH="295">Obtains the <TT>Toolkit</TT> object associated with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public final Object getTreeLock()</TT></TD>
		<TD WIDTH="295">Obtains the component tree locking object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getWidth()</TT></TD>
		<TD WIDTH="295">Obtains the width of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getX()</TT></TD>
		<TD WIDTH="295">Obtains the relative x coordinate of this component's top left corner</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getY()</TT></TD>
		<TD WIDTH="295">Obtains the relative y coordinate of this component's top left corner</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean hasFocus()</TT></TD>
		<TD WIDTH="295">Determines whether this component has the keyboard focus or not</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean imageUpdate<BR>
			(Image, int, int, int, int, int)</TT></TD>
		<TD WIDTH="295">Repaints the area bounded by the specified coordinates when the specified <TT>Image</TT>
			object has changed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void invalidate()</TT></TD>
		<TD WIDTH="295">Invalidates the component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isDisplayable()</TT></TD>
		<TD WIDTH="295">Returns true if the component is displayable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isDoubleBuffered()</TT></TD>
		<TD WIDTH="295">Returns true if the component uses double buffering</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isEnabled()</TT></TD>
		<TD WIDTH="295">Returns true if the component is enabled</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isFocusTraversable()</TT></TD>
		<TD WIDTH="295">Returns true if this component should receive focus when the user tabs through a
			screen</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isLightWeight()</TT></TD>
		<TD WIDTH="295">Returns true if the component does not have a toolkit peer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isOpaque()</TT></TD>
		<TD WIDTH="295">Returns true if the component is completely opaque</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isShowing()</TT></TD>
		<TD WIDTH="295">Returns true if this component is currently showing</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isValid()</TT></TD>
		<TD WIDTH="295">Returns true if this component is currently valid</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isVisible()</TT></TD>
		<TD WIDTH="295">Returns true if this component is currently visible</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void list()</TT></TD>
		<TD WIDTH="295">Prints a listing of this component to the output stream at <TT>System.out</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void list(PrintStream)</TT></TD>
		<TD WIDTH="295">Prints a listing of this component to the specified output stream</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void list(PrintStream, int)</TT></TD>
		<TD WIDTH="295">Prints a listing of this component to the specified output stream, starting at the
			specified indentation</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void list(PrintWriter)</TT></TD>
		<TD WIDTH="295">Prints a listing of this component to the specified <TT>PrintWriter</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void list(PrintWriter, int)</TT></TD>
		<TD WIDTH="295">Prints a listing of this component to the specified <TT>PrintWriter</TT> object,
			starting at the specified indentation</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void paint(Graphics)</TT></TD>
		<TD WIDTH="295">Invoked when the component should paint itself into the specified <TT>Graphics</TT>
			object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void paintAll(Graphics)</TT></TD>
		<TD WIDTH="295">Invoked when the component should paint itself and all of its children into the specified
			<TT>Graphics</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void paramString()</TT></TD>
		<TD WIDTH="295">Obtains the parameter string for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean prepareImage<BR>
			(Image, ImageObserver)</TT></TD>
		<TD WIDTH="295">Prepares the image for rendering into this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"></TD>
		<TD WIDTH="295"></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean prepareImage<BR>
			(Image, int, int, ImageObserver)</TT></TD>
		<TD WIDTH="295">Prepares the image for rendering into this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void print(Graphics)</TT></TD>
		<TD WIDTH="295">Invoked when the component should print itself into the specified <TT>Graphics</TT>
			object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void printAll(Graphics)</TT></TD>
		<TD WIDTH="295">Invoked when the component should print itself and all of its children into the specified
			<TT>Graphics</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processComponentEvent<BR>
			(ComponentEvent)</TT></TD>
		<TD WIDTH="295">Used internally to process component events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processEvent(AWTEvent)</TT></TD>
		<TD WIDTH="295">Used internally to process component events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processFocusEvent<BR>
			(FocusEvent)</TT></TD>
		<TD WIDTH="295">Used internally to process focus events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processInputMethodEvent<BR>
			(InputMethodEvent)</TT></TD>
		<TD WIDTH="295">Used internally to process text editing events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processKeyEvent<BR>
			(KeyEvent)</TT></TD>
		<TD WIDTH="295">Used internally to process key events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processMouseEvent<BR>
			(MouseEvent)</TT></TD>
		<TD WIDTH="295">Used internally to process mouse events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processMouseMotionEvent<BR>
			(MouseEvent)</TT></TD>
		<TD WIDTH="295">Used internally to process mouse motion events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void remove(MenuComponent)</TT></TD>
		<TD WIDTH="295">Removes the specified pop-up menu from the component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeComponentListener<BR>
			(ComponentListener)</TT></TD>
		<TD WIDTH="295">Removes the specified<TT> ComponentListener</TT> object from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeFocusListener</TT></TD>
		<TD WIDTH="295">Removes the specified</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>(FocusListener)</TT></TD>
		<TD WIDTH="295"><TT>FocusListener</TT> object from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeInputMethodListener<BR>
			(InputMethodListener)</TT></TD>
		<TD WIDTH="295">Removes the specified<TT> InputListener</TT> object from the collections of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeKeyListener(KeyListener)</TT></TD>
		<TD WIDTH="295">Removes the specified<TT> KeyListener</TT> object from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeMouseListener</TT></TD>
		<TD WIDTH="295">Removes the specified</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>(MouseListener)</TT></TD>
		<TD WIDTH="295"><TT>MouseListener</TT> object from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeMouseMotionListener</TT></TD>
		<TD WIDTH="295">Removes the specified</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>(MouseMotionListener)</TT></TD>
		<TD WIDTH="295"><TT>MouseMotionListener</TT> object from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeNotify()</TT></TD>
		<TD WIDTH="295">Notifies the component that it has been removed from its peer, and destroys any existing
			peer objects</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removePropertyChangeListener<BR>
			(PropertyChangeListener)</TT></TD>
		<TD WIDTH="295">Removes the specified<TT> PropertyChangeListener</TT> from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removePropertyChangeListener<BR>
			(String, PropertyChangeListener)</TT></TD>
		<TD WIDTH="295">Removes the specified<TT> PropertyChangeListener</TT> for a specified property</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void repaint()</TT></TD>
		<TD WIDTH="295">Method to call if you want the screen to repaint; invoking this method will cause
			the <TT>paint()</TT> method to be called</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void repaint(int, int, int, int)</TT></TD>
		<TD WIDTH="295">Method to call if you want the screen to repaint for the specified coordinates</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void repaint(long)</TT></TD>
		<TD WIDTH="295">Method to call if you want the screen to wait up to the specified number of milliseconds
			and before repainting</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void repaint(long, int, int, int, int)</TT></TD>
		<TD WIDTH="295">Method to call if you want the screen to wait up to the specified number of milliseconds
			and before repainting the specified coordinates</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void requestFocus()</TT></TD>
		<TD WIDTH="295">Asks that focus be given to this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setBackground(Color)</TT></TD>
		<TD WIDTH="295">Sets the background color for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setBounds(int, int, int, int)</TT></TD>
		<TD WIDTH="295">Sets the bounding box for this rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setBounds(Rectangle)</TT></TD>
		<TD WIDTH="295">Sets the bounding box for this rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setComponentOrientation<BR>
			(ComponentOrientation)</TT></TD>
		<TD WIDTH="295">Sets the orientation used to order the elements or text of the component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setCursor(Cursor)</TT></TD>
		<TD WIDTH="295">Sets the cursor object currently in use</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setDropTarget(DropTarget)</TT></TD>
		<TD WIDTH="295">Sets the <TT>DropTarget</TT> associated with this component for drag and drop operations</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setEnabled(boolean)</TT></TD>
		<TD WIDTH="295">Sets the enabled status of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setFont(Font)</TT></TD>
		<TD WIDTH="295">Sets the <TT>Font</TT> object currently in use</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setForeground(Color)</TT></TD>
		<TD WIDTH="295">Sets the foreground color currently in use by this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setLocale(Locale)</TT></TD>
		<TD WIDTH="295">Sets the locale for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setLocation(int, int)</TT></TD>
		<TD WIDTH="295">Sets the location of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setLocation(Point)</TT></TD>
		<TD WIDTH="295">Sets the location of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setName(String)</TT></TD>
		<TD WIDTH="295">Sets the name of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setSize(Dimension)</TT></TD>
		<TD WIDTH="295">Sets the dimensions of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setSize(int, int)</TT></TD>
		<TD WIDTH="295">Sets the dimensions of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setVisible(boolean)</TT></TD>
		<TD WIDTH="295">Sets the visible status of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String toString()</TT></TD>
		<TD WIDTH="295">Obtains a <TT>String</TT> object that represents this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void transferFocus()</TT></TD>
		<TD WIDTH="295">Transfers focus to the next component waiting for it</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void update(Graphics)</TT></TD>
		<TD WIDTH="295">Invoked immediately before a call to <TT>paint()</TT> is made</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void validate()</TT></TD>
		<TD WIDTH="295">Validates the component</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Component</TT>: Example</H4>
<P>The <TT>Component</TT> class can be extended to create custom components:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;

import java.util.*;



public class ComponentDemo extends Component { 

    private Polygon triangle;

    private Color   myColor;

    private Vector  listeners;

    private int     theID;





    public ComponentDemo() { 

        // enable the sending of mouse events

        enableEvents(AWTEvent.MOUSE_EVENT_MASK);



        // mark out the xpoints and ypoints

        int x[] = { 0, 100, 50} ;

        int y[] = { 0, 0, 100} ;



        triangle = new Polygon(x, y, 3);

        setSize(100,100);



        myColor = Color.black;

        listeners = new Vector();

    } 





    public void paint(Graphics g) { 

        g.setColor(myColor);

        g.fillPolygon(triangle);



        // super.paint() MUST be called, or your component

        // will NOT appear on screen.

        super.paint(g);

    } 





    // called when the user clicks on the triangle

    public void processMouseEvent(MouseEvent me) { 

        // make sure that the event occured over the triangle itself

        if(! triangle.contains(me.getPoint()) ) return;



        // if the mouse button was clicked change to alternate state

        if(me.getID() == MouseEvent.MOUSE_PRESSED) { 

            theID = me.getID();

            myColor = Color.pink;

            repaint();

        } 

        // if the mouse button was released change to initial state

        else if(me.getID() == MouseEvent.MOUSE_RELEASED) { 

            theID = me.getID();

            myColor = Color.black;

            repaint();



            // send the event to all listeners

            sendEvents();

        } 

    } 





    public Dimension getPreferredSize() { 

       return new Dimension(200,200);

    } 



    public Dimension getMinimumSize() { 

       return new Dimension(200,200);

    } 





    public synchronized void addActionListener(ActionListener al) { 

       listeners.addElement(al);

    } 





    public synchronized void removeActionListener(ActionListener al) { 

       listeners.removeElement(al);

    } 





    private void sendEvents() { 

       ActionEvent myEvent 

       = new ActionEvent(this, theID, &quot;button click occured&quot;);



       // create a clone of the listeners Vector. 

       // This will place a &quot;cut-off&quot;

       // point after which new registerations 

       // will not be considered for

// the current event being sent out.

       Vector listenerClone;

       synchronized(this) { 

           listenerClone = (Vector)listeners.clone();

       } 



       for(int i=0;i&lt;listenerClone.size();i++) { 

           ((ActionListener)listenerClone.elementAt(i)).

           actionPerformed(myEvent);

} 

    } 



    public static void main(String args[] ) { 

       Frame myDemo = new Frame();



       myDemo.add(new ComponentDemo());



                // Allow the program to be shut down by closing the

        // main window.

        myDemo.addWindowListener(new WindowAdapter() { 

            public void windowClosing(WindowEvent we) { 

                 System.exit(0);

            } 

        } );

       myDemo.pack();

       myDemo.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtComponentOrientationFONTTT"></A><TT>java.awt.ComponentOrientation</TT></H3>
<P><TT>public final class ComponentOrientation extends Object implements Serializable</TT></P>

<P>The ComponentOrientation class encapsulates orientation for elements of a component
or text. It controls how characters are laid out into lines, how those lines are
laid out into blocks, and how items are laid out. For example, where the checkbox
is laid out in relation to its text.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4>java.awt.<TT>ComponentOrientation</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final ComponentOrientation LEFT_TO_RIGHT</TT></TD>
		<TD WIDTH="295">Indicates left to right, top to bottom flow</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final ComponentOrientation RIGHT_TO_LEFT</TT></TD>
		<TD WIDTH="295">Indicates right to left, top to bottom flow</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final ComponentOrientation UNKNOWN</TT></TD>
		<TD WIDTH="295">Indicates that orientation has not been set</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static ComponentOrientation getOrientation(Locale)</TT></TD>
		<TD WIDTH="295">Obtains the appropriate orientation for the specified locale</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static ComponentOrientation getOrientation(ResourceBundle)</TT></TD>
		<TD WIDTH="295">Obtains the appropriate orientation for the specified<TT> ResourceBundle</TT>'s localization</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isHorizontal()</TT></TD>
		<TD WIDTH="295">Returns true if the lines are laid out horizontally</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isLeftToRight()</TT></TD>
		<TD WIDTH="295">Returns true if items in horizontal lines flow left to right or if vertical lines
			flow left to right</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtContainerFONTTT"></A><TT>java.awt.Container</TT></H3>
<P><TT>public abstract class Container extends Component</TT></P>

<P>As stated at the beginning of the section on the AWT, the Container class is used
to visually group a series of components. Usually you will not subclass Container,
but instead will work with one of its child classes like Frame. With the 1.1 release
of the JDK, it is possible to create a child class of Container that becomes a peer-free
container. This has the advantage of being very lightweight.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Container</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Component add(Component)</TT></TD>
		<TD WIDTH="295">Adds the specified component to the container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Component add(Component, int)</TT></TD>
		<TD WIDTH="295">Adds the specified component to the container at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void add(Component, Object)</TT></TD>
		<TD WIDTH="295">Adds the specified component to the container using the specified constraints</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void add(Component, Object, int)</TT></TD>
		<TD WIDTH="295">Adds the specified component to the container at the specified index using the specified
			constraints</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Component add(String, Component)</TT></TD>
		<TD WIDTH="295">Adds the specified component to the container at the specified position</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addContainerListener(ContainerListener)</TT></TD>
		<TD WIDTH="295">Adds a <TT>ContainerListener</TT> to the collection of listeners; a <TT>ContainerListener</TT>
			receives notification whenever a component is added or removed from the container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void addImpl(Component, Object, int)</TT></TD>
		<TD WIDTH="295">Adds the specified component to the container at the specified index using the specified
			constraints</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addNotify()</TT></TD>
		<TD WIDTH="295">Causes the object's peer to be created</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void doLayout()</TT></TD>
		<TD WIDTH="295">Lays out all components again</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void Component findComponentAt(int, int)</TT></TD>
		<TD WIDTH="295">Searches children and their children (if<TT> </TT>necessary) to locate the visible
			component at the specified position</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void Component findComponentAt(Point)</TT></TD>
		<TD WIDTH="295">Searches children and their children (if necessary) to locate the visible component
			at the specified <TT>Point</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public float getAlignmentX()</TT></TD>
		<TD WIDTH="295">Obtains the alignment along the x-axis for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public float getAlignmentY()</TT></TD>
		<TD WIDTH="295">Obtains the alignment along the y-axis for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Component getComponent(int)</TT></TD>
		<TD WIDTH="295">Obtains the <TT>Component</TT> at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Component getComponentAt(int, int)</TT></TD>
		<TD WIDTH="295">Obtains the <TT>Component</TT> at the specified coordinates</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Component getComponentAt(Point)</TT></TD>
		<TD WIDTH="295">Obtains the <TT>Component</TT> at the specified coordinates</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getComponentCount()</TT></TD>
		<TD WIDTH="295">Obtains a count of all components currently owned by the active container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Component[] getComponents()</TT></TD>
		<TD WIDTH="295">Obtains an array of all components currently owned by the container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Insets getInsets()</TT></TD>
		<TD WIDTH="295">Obtains the insets for the container; insets for a given container specify the number
			of pixels that separate the container border from the first child component edge</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public LayoutManager getLayout()</TT></TD>
		<TD WIDTH="295">Obtains the active layout manager, or null if none is in use</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getMaximumSize()</TT></TD>
		<TD WIDTH="295">Obtains the maximum size this component can take on</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getMinimumSize()</TT></TD>
		<TD WIDTH="295">Obtains the minimum size this component can take on</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getPreferredSize()</TT></TD>
		<TD WIDTH="295">Obtains the preferred size for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void invalidate()</TT></TD>
		<TD WIDTH="295">Invalidates the component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isAncestorOf(Component)</TT></TD>
		<TD WIDTH="295">Returns true if the specified component is contained in the containment hierarchy
			of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void list(PrintStream, int)</TT></TD>
		<TD WIDTH="295">Prints a listing of this component to the specified output stream, starting at the
			specified indentation</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void list(PrintWriter, int)</TT></TD>
		<TD WIDTH="295">Prints a listing of this component to the specified <TT>PrintWriter</TT> object,
			starting at the specified indentation</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void paint(Graphics)</TT></TD>
		<TD WIDTH="295">Invoked when the component should paint itself into the specified <TT>Graphics</TT>
			object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void paintComponents(Graphics)</TT></TD>
		<TD WIDTH="295">Invoked when all child components should be painted to the specified <TT>Graphics</TT>
			object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected Sting paramString()</TT></TD>
		<TD WIDTH="295">Obtains a parameter string for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void print(Graphics)</TT></TD>
		<TD WIDTH="295">Invoked when the component should print itself into the specified <TT>Graphics</TT>
			object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void printComponents(Graphics)</TT></TD>
		<TD WIDTH="295">Invoked when all child components should be painted into the specified <TT>Graphics</TT>
			object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processContainerEvent(ContainerEvent)</TT></TD>
		<TD WIDTH="295">Used internally to handle events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processEvent(AWTEvent)</TT></TD>
		<TD WIDTH="295">Used internally to handle events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void remove(Component)</TT></TD>
		<TD WIDTH="295">Removes the specified component from the container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void remove(int)</TT></TD>
		<TD WIDTH="295">Removes the component at the specified index from the container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeAll()</TT></TD>
		<TD WIDTH="295">Removes all child components from the container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeContainerListener</TT></TD>
		<TD WIDTH="295">Removes the specified</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>(ContainerListener)</TT></TD>
		<TD WIDTH="295"><TT>ContainerListener</TT> from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeNotify()</TT></TD>
		<TD WIDTH="295">Notifies the component that has been removed from its peer, and destroys any existing
			peer objects</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setLayout(LayoutManager)</TT></TD>
		<TD WIDTH="295">Sets the active layout manager</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void validate()</TT></TD>
		<TD WIDTH="295">Validates the component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void validateTree()</TT></TD>
		<TD WIDTH="295">Performs a layout on all child components that have been invalidated</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Container</TT>: Example</H4>
<P>The <TT>Container</TT> class is used to aggregate a collection of components:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;



public class ContainerDemo extends Container { 

    private ComponentDemo myComponent;



    public ContainerDemo() { 

        myComponent = new ComponentDemo();

        add(myComponent);

    } 



    public Dimension getPreferredSize() { 

       return myComponent.getPreferredSize();

    } 



    public Dimension getMinimumSize() { 

       return myComponent.getMinimumSize();

    } 





    public static void main(String args[]) { 

        Frame f = new Frame();

        f.add(new ContainerDemo());



         // Allow the program to be shut down by closing the

         // main window.

         f.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                 System.exit(0);

             } 

         } );



        f.pack();

        f.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtCursorFONTTT"></A><TT>java.awt.Cursor</TT></H3>
<P><TT>public class Cursor extends Object implements Serializble</TT></P>

<P>The Cursor class encapsulates the bitmap representation of a screen cursor. Under
normal circumstances, you will not need to create child classes of Cursor, but instead
will work with its predefined forms. As noted in the next section, Cursor publishes
a series of public member variables that represent commonly used cursors.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Cursor</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int CROSSHAIR_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for a crosshair cursor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int CUSTOM_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for all custom cursors</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int DEFAULT_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for the default cursor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int E_RESIZE_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for an east-facing resize cursor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int HAND_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for a hand cursor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int MOVE_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for a move cursor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int N_RESIZE_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for a north-facing resize cursor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected static String name</TT></TD>
		<TD WIDTH="295">Name given to the cursor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int NE_RESIZE_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for a northeast-facing resize cursor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int NW_RESIZE_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for a northwest-facing resize cursor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected static Cursor[] predefined</TT></TD>
		<TD WIDTH="295">Array of predefined cursors</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int S_RESIZE_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for a south-facing resize cursor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int SE_RESIZE_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for a southeast-facing resize cursor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int SW_RESIZE_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for a southwest-facing resize cursor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int TEXT_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for a text cursor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int W_RESIZE_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for a west-facing resize cursor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int WAIT_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for a wait cursor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static Cursor getDefaultCursor()</TT></TD>
		<TD WIDTH="295">Obtains the default cursor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getName()</TT></TD>
		<TD WIDTH="295">Obtains the name of this cursor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static Cursor getPredefinedCursor(int)</TT></TD>
		<TD WIDTH="295">Obtains a cursor object corresponding to one of the aforementioned types</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static Cursor getSystemCustomCursor(String) throws AWTException</TT></TD>
		<TD WIDTH="295">Obtains a system specific custom cursor with the specified name</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getType()</TT></TD>
		<TD WIDTH="295">Obtains the type of the active cursor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String toString()</TT></TD>
		<TD WIDTH="295">Obtains a string representation of this cursor</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Cursor</TT>: Example</H4>
<P>The <TT>Cursor</TT> class is used to represent an onscreen cursor:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;





public class CursorDemo extends Frame implements ActionListener { 

    private Cursor defaultCursor;

    private Cursor waitCursor;

    private boolean currentCursorIsDefault;





    public CursorDemo() { 

        defaultCursor = new Cursor(Cursor.DEFAULT_CURSOR);

        waitCursor = new Cursor(Cursor.WAIT_CURSOR);



        setCursor(defaultCursor);

        currentCursorIsDefault = true;



        Button toggleButton = new Button(&quot;Toggle Cursor&quot;);

        toggleButton.addActionListener(this);

        add(toggleButton);

    } 





    public void actionPerformed(ActionEvent ae) { 

        if(currentCursorIsDefault) setCursor(waitCursor);

        else setCursor(defaultCursor);



        currentCursorIsDefault = !currentCursorIsDefault;

    } 





    public static void main(String args[]) { 

        CursorDemo myDemo = new CursorDemo();



         // Allow the program to be shut down by closing the

         // main window.

         myDemo.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                 System.exit(0);

             } 

         } );



        myDemo.pack();

        myDemo.setVisible(true);

    } 



} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtDialogFONTTT"></A><TT>java.awt.Dialog</TT></H3>
<P><TT>public class Dialog extends Window</TT></P>

<P>The Dialog class is used to prompt the user for an answer to some question. For
example, a friendly box asks &quot;Are You Sure You Want To Quit?&quot; when you
quit most applications. A dialog box can take on one of two forms: modal, which blocks
access to all other UI components until the user dismisses the dialog; and modeless,
which does not block access to other UI resources from which the user is deciding.
In most traditional applications-like Microsoft Word-the Save As option produces
a modal dialog prompting you to enter a filename and path.</P>

<P>A Dialog object is defined as either modal or modeless, and this parameter is
specified through a boolean argument to the constructor. Additionally, modality may
be specified through the use of the setModal(boolean) method.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Dialog</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addNotify()</TT></TD>
		<TD WIDTH="295">Creates the dialog's peer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getTitle()</TT></TD>
		<TD WIDTH="295">Obtains the title of the dialog</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isModal()</TT></TD>
		<TD WIDTH="295">Obtains the modal status of the dialog</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isResizable()</TT></TD>
		<TD WIDTH="295">Specifies whether or not the dialog can be resized</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected String paramString()</TT></TD>
		<TD WIDTH="295">Obtains a parameter string for the dialog</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setModal(boolean)</TT></TD>
		<TD WIDTH="295">Sets the modal status of the dialog</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setResizable(boolean)</TT></TD>
		<TD WIDTH="295">Sets the resize status of the dialog</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setTitle(String)</TT></TD>
		<TD WIDTH="295">Sets the title of the dialog</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void show()</TT></TD>
		<TD WIDTH="295">Displays the dialog on the screen</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Dialog</TT>: Example</H4>
<P>A <TT>Dialog</TT> object can be used to prompt the user for input or to acknowledge
an event:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;



public class DialogDemo extends Dialog implements ActionListener { 

    private Label questionLabel;

    private Button yesButton;

    private Button noButton;



    public DialogDemo(Frame parent) { 

        super(parent, true);



        // add the components using the GridBagLayout

GridBagLayout gridBagLayout;

    gridBagLayout = new GridBagLayout();

    setLayout(gridBagLayout);



    ssetSize(299,152);

    questionLabel = new Label

    (&quot;Are You Sure You Want To Quit?&quot;,Label.CENTER);

questionLabel.setFont(new Font(&quot;Dialog&quot;, Font.BOLD, 16));



    GridBagConstraints gbc;

    gbc = new GridBagConstraints();

    gbc.gridx = 0;

    gbc.gridy = 1;

    gbc.gridwidth = 4;

    gbc.weightx = 1;

    gbc.weighty = 1;

    gbc.fill = GridBagConstraints.HORIZONTAL;

    gbc.insets = new Insets(0,0,0,0);

    gridBagLayout.setConstraints(questionLabel, gbc);

    add(questionLabel);



    yesButton = new Button(&quot;Yes&quot;);

    yesButton.addActionListener(this);



    gbc = new GridBagConstraints();

    gbc.gridx = 1;

    gbc.gridy = 2;

    gbc.weightx = 1;

    gbc.weighty = 1;

    gbc.fill = GridBagConstraints.HORIZONTAL;

    gbc.insets = new Insets(10,10,10,10);

    gbc.ipadx = 10;

    gbc.ipady = 10;

    gridBagLayout.setConstraints(yesButton, gbc);

    add(yesButton);



    noButton = new Button(&quot;No&quot;);

    noButton.addActionListener(this);



    gbc = new GridBagConstraints();

    gbc.gridx = 3;

    gbc.gridy = 2;

    gbc.weightx = 1;

    gbc.weighty = 1;

    gbc.fill = GridBagConstraints.HORIZONTAL;

    gbc.insets = new Insets(10,10,10,10);

    gbc.ipadx = 10;

    gbc.ipady = 10;

    gridBagLayout.setConstraints(noButton, gbc);

    add(noButton);

    } 





    // As defined by ActionListener

    public void actionPerformed(ActionEvent ae) { 

        if (ae.getActionCommand().toLowerCase().equals(&igrave;yes&icirc;))

             System.exit(0);

        else { 

            setVisible(false); // Hide the dialog

            this.dispose();      // release the dialogs resources

        } 

    }    



    public static void main(String args[]) { 

        final Frame f = new Frame();



         // Allow the program to be shut down by closing the

         // main window.

         f.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                 // Close if it&iacute;s okay. . .

                 DialogDemo d = new DialogDemo(f);

                 d.setVisible(true);

             } 

         } );



        f.setSize(100,100);

        f.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtDimensionFONTTT"></A><TT>java.awt.Dimension</TT></H3>
<P><TT>public class Dimension extends Dimension2D implements Serializable</TT></P>

<P>The Dimension class is a utility class used to encapsulate the height and width
of a rectangular region. As an examination of many of the APIs listed in this book
will show, this class is often a return value from many methods, including getPreferredSize(),
getMinimumSize(), and getMaximumSize(). While Dimension provides getter and setter
methods, its only two fields, height and width, are declared public. Therefore, access
to the fields is usually done directly rather than through method calls.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Dimension</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int height</TT></TD>
		<TD WIDTH="295">The height attribute</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int width</TT></TD>
		<TD WIDTH="295">The width attribute</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean equals(Object)</TT></TD>
		<TD WIDTH="295">Returns true if both <TT>Dimension</TT> objects have the same height and width fields</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getSize()</TT></TD>
		<TD WIDTH="295">Obtains a copy of the object, added for consistency</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setSize(Dimension)</TT></TD>
		<TD WIDTH="295">Sets the height and width attributes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setSize(int, int)</TT></TD>
		<TD WIDTH="295">Sets the height and width attributes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String toString()</TT></TD>
		<TD WIDTH="295">Obtains a string representation of the object</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtFileDialogFONTTT"></A><TT>java.awt.FileDialog</TT></H3>
<P><TT>public class FileDialog extends Dialog</TT></P>

<P>The class FileDialog is a specialized Dialog class used for reading and writing
files. Although it's a parameter to its constructor, it is possible to specify whether
the FileDialog object is to be used for reading files (LOAD) or writing files (SAVE).</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.FileDialog</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int LOAD</TT></TD>
		<TD WIDTH="295">Constant specifying that the <TT>FileDialog</TT> object is to be used for the loading
			of files</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int SAVE</TT></TD>
		<TD WIDTH="295">Constant specifying that the <TT>FileDialog</TT> object is to be used for the saving
			of files</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addNotify()</TT></TD>
		<TD WIDTH="295">Creates the component's peer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getDirectory()</TT></TD>
		<TD WIDTH="295">Obtains the last directory referenced by this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getFile()</TT></TD>
		<TD WIDTH="295">Obtains the last filename referenced by this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public FilenameFilter getFilenameFilter()</TT></TD>
		<TD WIDTH="295">Obtains the <TT>FilenameFilter</TT> object (if any) used with this component; a <TT>FilenameFilter</TT>
			object is used to specify that only certain types of files appear in a file browser</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getMode()</TT></TD>
		<TD WIDTH="295">Obtains the current mode of the component (<TT>LOAD</TT> or <TT>SAVE</TT>)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected String paramString()</TT></TD>
		<TD WIDTH="295">Obtains the parameter string for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setDirectory(String)</TT></TD>
		<TD WIDTH="295">Sets the default directory in which this component is to start browsing</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setFile(String)</TT></TD>
		<TD WIDTH="295">Sets a suggested filename</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setFilenameFilter(FilenameFilter)</TT></TD>
		<TD WIDTH="295">Sets the active <TT>FilenameFilter</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setMode(int)</TT></TD>
		<TD WIDTH="295">Sets the current mode of the component (<TT>LOAD</TT> or <TT>SAVE</TT>)</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.FileDialog</TT>: Example</H4>
<P>The <TT>FileDialog</TT> class allows a user to select a file for loading or saving:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;





public class FileDialogDemo extends Frame implements ActionListener { 

    private Button openButton;

    private Button saveButton;

    private FileDialog openDialog;

    private FileDialog saveDialog;





    public FileDialogDemo() { 

        openButton = new Button(&quot;Open&quot;);

        saveButton = new Button(&quot;Save&quot;);

        openDialog = new FileDialog

        (this, &quot;Open File&quot;, FileDialog.LOAD);

        saveDialog = new FileDialog

        (this, &quot;Save File&quot;, FileDialog.SAVE);



        openButton.addActionListener(this);

        saveButton.addActionListener(this);



        setLayout(new FlowLayout(10));

        add(openButton);

        add(saveButton);

    } 





    public void actionPerformed(ActionEvent ae) { 

        if(ae.getSource() == openButton) openDialog.setVisible(true);

        else saveDialog.setVisible(true);

    } 





    public static void main(String args[]) { 

        FileDialogDemo myDemo = new FileDialogDemo();



         // Allow the program to be shut down by closing the

         // main window.

         myDemo.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                 System.exit(0);

             } 

        } );



        myDemo.pack();

        myDemo.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtFlowLayoutFONTTT"></A><TT>java.awt.FlowLayout</TT></H3>
<P><TT>public class FlowLayout extends Object implements LayoutManager, Serializable</TT></P>

<P>The FlowLayout layout manager lays out all components from left to right until
there is no more space, and then continues down and to the right again.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.FlowLayout</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int CENTER</TT></TD>
		<TD WIDTH="295">Constant indicating that each row of components should be centered</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int LEADING</TT></TD>
		<TD WIDTH="295">Constant indicating that each row of components should be justified to the leading
			edge of the container's orientation</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int LEFT</TT></TD>
		<TD WIDTH="295">Constant indicating that each row of components should be left-justified</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int RIGHT</TT></TD>
		<TD WIDTH="295">Constant indicating that each row of components should be right-justified</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int TRAILING</TT></TD>
		<TD WIDTH="295">Constant indicating that each row of components should be justified to the trailing
			edge of the container's orientation</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addLayoutComponent(String, Component)</TT></TD>
		<TD WIDTH="295">Adds the specified component to the container with the specified name</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getAlignment()</TT></TD>
		<TD WIDTH="295">Obtains the alignment for this container (<TT>LEADING</TT>, <TT>TRAILING</TT>, <TT>LEFT</TT>,
			<TT>CENTER</TT>, or <TT>RIGHT</TT>)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getHgap()</TT></TD>
		<TD WIDTH="295">Obtains the horizontal gap between each component owned by this container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getVgap()</TT></TD>
		<TD WIDTH="295">Obtains the vertical gap between each component owned by this container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void layoutContainer(Container)</TT></TD>
		<TD WIDTH="295">Lays out the specified container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension minimumLayoutSize(Container)</TT></TD>
		<TD WIDTH="295">Obtains the minimum dimensions needed to lay out the specified container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension preferredLayoutSize(Container)</TT></TD>
		<TD WIDTH="295">Obtains the maximum dimensions needed to lay out the specified container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeLayoutComponent(Component)</TT></TD>
		<TD WIDTH="295">Implemented to fulfill interface requirements, but has no effect</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setAlignment(int)</TT></TD>
		<TD WIDTH="295">Sets the alignment for this container (<TT>LEFT</TT>, <TT>CENTER</TT>, or <TT>RIGHT</TT>)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setHgap(int)</TT></TD>
		<TD WIDTH="295">Sets the horizontal gap between each component owned by this container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setVgap(int)</TT></TD>
		<TD WIDTH="295">Sets the vertical gap between each component owned by this container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String toString()</TT></TD>
		<TD WIDTH="295">Obtains a <TT>String</TT> object representing the current state of this container</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.FlowLayout</TT>: Example</H4>
<P>The <TT>FlowLayout</TT> class allows objects to be arranged either from left to
right along a container or from top to bottom:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;



public class FlowLayoutDemo extends Frame { 



    public FlowLayoutDemo() { 

        // Set the layout, use a 10 pixel gap between components

        setLayout(new FlowLayout(10));



        // Add some components

        add(new Label(&quot;Resize Me&quot;));

        add(new Button(&quot;Flow&quot;));

        add(new Label(&quot;Layout&quot;));

    } 





    public static void main(String args[]) { 

        FlowLayoutDemo myDemo = new FlowLayoutDemo();



         // Allow the program to be shut down by closing the

         // main window.

         myDemo.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                 System.exit(0);

             } 

         } );



        myDemo.pack();

        myDemo.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtFontFONTTT"></A><TT>java.awt.Font</TT></H3>
<P><TT>public class Font extends Object implements Serializable</TT></P>

<P>The Font class encapsulates information including typeface, style, and point size
for a screen font. Each VM is in charge of implementing its own fonts, and a list
of them can be obtained by calling the Toolkit.getFontList() method.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Font</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int BOLD</TT></TD>
		<TD WIDTH="295">Constant used to specify the bold form of a font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int CENTER_BASELINE</TT></TD>
		<TD WIDTH="295">Specifies a center baseline</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int HANGING_BASELINE</TT></TD>
		<TD WIDTH="295">Specifies a hanging baseline</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int ITALIC</TT></TD>
		<TD WIDTH="295">Constant used to specify the italic form of a font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected String name</TT></TD>
		<TD WIDTH="295">The logical name of the current font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int PLAIN</TT></TD>
		<TD WIDTH="295">Constant used to specify the plain form of a font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected float pointSize</TT></TD>
		<TD WIDTH="295">The size of the font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final byte ROMAN_BASELINE</TT></TD>
		<TD WIDTH="295">Location of roman baseline</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int size</TT></TD>
		<TD WIDTH="295">Size of the current font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int style</TT></TD>
		<TD WIDTH="295">Style of the current font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean canDisplay(char)</TT></TD>
		<TD WIDTH="295">Returns true if the active <TT>Font</TT> object has a glyph for the specified character</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int canDisplayUpTo(char[], int, int)</TT></TD>
		<TD WIDTH="295">Returns an index into the array that is an offset to the first character for which
			the font does not have a glyph. Returns -1 if the font has enough glyphs to display
			the string</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int canDisplayUpTo(CharacterIterator, int, int)</TT></TD>
		<TD WIDTH="295">Returns an index into the array that is an offset to the first character for which
			the font does not have a glyph. Returns-1 if the font has enough glyphs to display
			the string</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int canDisplayUpTo(String)</TT></TD>
		<TD WIDTH="295">Returns true if the active <TT>Font</TT> object has sufficient glyphs to display
			the specified string</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public GlyphVector createGlyphVector(FontRenderContext, char[])</TT></TD>
		<TD WIDTH="295">Creates a <TT>GlyphVector</TT> for he specified tcharacter<TT> </TT>array using the
			specified context</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public GlyphVector createGlyphVector(FontRenderContext, CharacterIterator)</TT></TD>
		<TD WIDTH="295">Creates a <TT>GlyphVector</TT> for the specified string using the specified context</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public GlyphVector createGlyphVector(FontRenderContext, int[])</TT></TD>
		<TD WIDTH="295">Creates a <TT>GlyphVector</TT> for the specified glyph codes using the specified
			context</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public GlyphVector createGlyphVector(FontRenderContext, String)</TT></TD>
		<TD WIDTH="295">Creates a <TT>GlyphVector</TT> for the specified string using the specified<TT> </TT>context</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static Font decode(String)</TT></TD>
		<TD WIDTH="295">Returns the <TT>Font</TT> object represented by the <TT>String</TT> object parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Font deriveFont(AffineTransform)</TT></TD>
		<TD WIDTH="295">Applies the specified transform to the current font and returns the new font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Font deriveFont(float)</TT></TD>
		<TD WIDTH="295">Creates a new <TT>Font</TT> object with all properties matching the original <TT>Font</TT>
			object except for the size, which is obtained from the parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Font deriveFont(int)</TT></TD>
		<TD WIDTH="295">Creates a new <TT>Font</TT> object with all properties matching the original <TT>Font</TT>
			object except for the style, which is obtained from the parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Font</TT></TD>
		<TD WIDTH="295">Creates a new <TT>Font</TT> object with all</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>deriveFont(int, AffineTransform)</TT></TD>
		<TD WIDTH="295">properties matching the original <TT>Font</TT> object except for the style, which
			is obtained from the parameter; in addition to a modified style, the specified transform
			is applied</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Font deriveFont(int, float)</TT></TD>
		<TD WIDTH="295">Creates a new <TT>Font</TT> object with all properties matching the original <TT>Font</TT>
			object except for the size and style, which are obtained from the parameters</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Font deriveFont(Map)</TT></TD>
		<TD WIDTH="295">Creates a new <TT>Font</TT> object with properties determined by both the original
			<TT>Font</TT> properties and the properties specified in the <TT>Map</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean equals(Object)</TT></TD>
		<TD WIDTH="295">Returns true if the two <TT>Font</TT> objects have the same face, style, and point
			size</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void finalize()</TT></TD>
		<TD WIDTH="295">Invoked by the garbage collector when there are no longer any references to the active
			object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Map getAttributes()</TT></TD>
		<TD WIDTH="295">Obtains the attributes for the active font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public AttributedCharacterIterator.Attribute getAvailableAttributes()</TT></TD>
		<TD WIDTH="295">Obtains all attribute names for the active font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public byte getBaselineFor(char)</TT></TD>
		<TD WIDTH="295">Obtains the baseline used with this glyph</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getFamily()</TT></TD>
		<TD WIDTH="295">Obtains the font family</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getFamily()</TT></TD>
		<TD WIDTH="295">Obtains the font family localized for the specified locale</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static Font getFont(Map)</TT></TD>
		<TD WIDTH="295">Obtains the font best suited to display glyphs, as specified in the <TT>Map</TT>
			object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static Font getFont(String)</TT></TD>
		<TD WIDTH="295">Obtains the <TT>Font</TT> object associated with the system property specified as
			a parameter, or null if none exist</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static Font getFont(String, Font)</TT></TD>
		<TD WIDTH="295">Obtains the <TT>Font</TT> object associated with the system property specified as
			a parameter; if none exist, the <TT>Font</TT> object parameter is returned</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getFontName()</TT></TD>
		<TD WIDTH="295">Obtains a logical name for the font face</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getFontName(Locale)</TT></TD>
		<TD WIDTH="295">Obtains a logical name for the font face localized for the specified locale</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public float getItalicAngle()</TT></TD>
		<TD WIDTH="295">Obtains the angle applied to the font when it is in italic form</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public LineMetrics getLineMetrics(char[], int, int, FontRenderContext)</TT></TD>
		<TD WIDTH="295">Obtains the <TT>LineMetrics</TT> object for the specified character array</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public LineMetrics getLineMetrics(CharacterIterator, int, int, FontRenderContext)</TT></TD>
		<TD WIDTH="295">Obtains the <TT>LineMetrics</TT> object for the specified<TT> CharacterIterator</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public LineMetrics getLineMetrics(String, FontRenderContext)</TT></TD>
		<TD WIDTH="295">Obtains the <TT>LineMetrics</TT> object for the specified<TT> String</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public LineMetrics getLineMetrics(String, int, int, FontRenderContext)</TT></TD>
		<TD WIDTH="295">Obtains the <TT>LineMetrics</TT> object for the specified<TT> String</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Rectangle2D getMaxCharBounds(FontRenderContext)</TT></TD>
		<TD WIDTH="295">Obtains the maximum bounding box for this font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getMissingGlyphCode()</TT></TD>
		<TD WIDTH="295">Obtains the missing glyph code</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getName()</TT></TD>
		<TD WIDTH="295">Obtains the logical name for this font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getNumGlyphs()</TT></TD>
		<TD WIDTH="295">Obtains the number of glyphs in this font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public FontPeer getPeer()</TT></TD>
		<TD WIDTH="295">Obtains the peer associated with this font (deprecated; font rendering is now platform
			independent)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getPSName()</TT></TD>
		<TD WIDTH="295">Obtains the postscript name for this font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getSize()</TT></TD>
		<TD WIDTH="295">Obtains the point size of this font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public float getSize2D()</TT></TD>
		<TD WIDTH="295">Obtains the point size of this font as a float</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Rectangle2D getStringBounds(char[], int, int, FontRenderContext)</TT></TD>
		<TD WIDTH="295">Obtains the maximum bounding box for the specified character array</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Rectangle2D getStringBounds(CharacterIterator, int, int, FontRenderContext)</TT></TD>
		<TD WIDTH="295">Obtains the maximum bounding box for the specified character iterator</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Rectangle2D getStringBounds(String, FontRenderContext)</TT></TD>
		<TD WIDTH="295">Obtains the maximum bounding box for the specified <TT>String</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Rectangle2D getStringBounds(String, int, int, FontRenderContext)</TT></TD>
		<TD WIDTH="295">Obtains the maximum bounding box for the specified <TT>String</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getStyle()</TT></TD>
		<TD WIDTH="295">Obtains the style used with this font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public AffineTransform getTransform()</TT></TD>
		<TD WIDTH="295">Obtains the transform associated with this font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int hashCode()</TT></TD>
		<TD WIDTH="295">Obtains a hash code for this font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean hasUniformLineMetrics()</TT></TD>
		<TD WIDTH="295">Returns true if the font has uniform line metrics</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isBold()</TT></TD>
		<TD WIDTH="295">Returns true if the font is bold</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isItalic()</TT></TD>
		<TD WIDTH="295">Returns true if the font is italic</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isPlain()</TT></TD>
		<TD WIDTH="295">Returns true if the font is plain</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String toString()</TT></TD>
		<TD WIDTH="295">Obtains a <TT>String</TT> object that represents the current state of this object</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Font</TT>: Example</H4>
<P>The <TT>Font</TT> class is used to represent a unique screen or printer font:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;



public class FontDemo extends Frame implements ActionListener { 

    private MenuItem[]  fontItems;

    private Font        myFont;



    public FontDemo() { 

        // Create a font menu

        Menu fontMenu = new Menu(&quot;Fonts&quot;);



        // Create menu items for each font, 

        // and add the new item to the menu

String[] fontList = getToolkit().getFontList();

        fontItems = new MenuItem[fontList.length];

        for(int i=0;i&lt;fontList.length; i++) { 

            // create the MenuItem

            fontItems[i] = new MenuItem(fontList[i]);

            // add the MenuItem to the Menu

            fontMenu.add(fontItems[i]);

            // register as a listener of the MenuItem

            fontItems[i].addActionListener(this);

        } 



        MenuBar myMenuBar = new MenuBar();

        myMenuBar.add(fontMenu);

        setMenuBar(myMenuBar);



        setSize(200,200);



        myFont = new Font(fontList[0], Font.BOLD, 14);

    } 





    public void paint(Graphics g) { 

        g.setColor(Color.red);

        g.setFont(myFont);

        g.drawString(&quot;Font Demo&quot;, 50, 100);

    } 





    public void actionPerformed(ActionEvent ae) { 

        myFont = new Font

        (ae.getActionCommand().trim(), Font.BOLD, 14);

repaint();

    } 





    public static void main(String args[]) { 

        FontDemo myDemo = new FontDemo();



         // Allow the program to be shut down by closing the

         // main window.

         myDemo.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                 System.exit(0);

             } 

         } );



        myDemo.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtFontMetricsFONTTT"></A><TT>java.awt.FontMetrics</TT></H3>
<P><TT>public abstract class FontMetrics extends Object implements Serializable</TT></P>

<P>The FontMetrics class encapsulates information about a specific Font object, including
leading, ascent, descent, and character width. The class is useful for determining
screen position for something like a centered string, or for determining where to
break words if text is to properly flow around an image.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.FontMetrics</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Font font</TT></TD>
		<TD WIDTH="295">The font being represented</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int bytesWidth(byte[], int, int)</TT></TD>
		<TD WIDTH="295">Obtains the total width needed to show the specified characters</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int charsWidth(char[], int, int)</TT></TD>
		<TD WIDTH="295">Obtains the total width needed to show the specified characters</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int charWidth(char)</TT></TD>
		<TD WIDTH="295">Obtains the total width needed to show the specified character</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int charWidth(int)</TT></TD>
		<TD WIDTH="295">Obtains the total width needed to show the specified character</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getAscent()</TT></TD>
		<TD WIDTH="295">Obtains the ascent in use for this font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getDescent()</TT></TD>
		<TD WIDTH="295">Obtains the descent in use for this font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Font getFont()</TT></TD>
		<TD WIDTH="295">Obtains the font represented by the <TT>FontMetrics</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getHeight()</TT></TD>
		<TD WIDTH="295">Obtains the height in use for this font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getLeading()</TT></TD>
		<TD WIDTH="295">Obtains the leading in use for this font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public LineMetrics getLineMetrics(char[], int, int, Graphics)</TT></TD>
		<TD WIDTH="295">Obtains the <TT>LineMetrics</TT> object for the specified character array</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public LineMetrics getLineMetrics(CharacterIterator, int, int, Graphics)</TT></TD>
		<TD WIDTH="295">Obtains the <TT>LineMetrics</TT> object for the specified<TT> CharacterIterator</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public LineMetrics getLineMetrics(String, Graphics)</TT></TD>
		<TD WIDTH="295">Obtains the <TT>LineMetrics</TT> object for the specified<TT> String</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public LineMetrics getLineMetrics(String, int, int, Graphics)</TT></TD>
		<TD WIDTH="295">Obtains the <TT>LineMetrics</TT> object for the specified<TT> String</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getMaxAdvance()</TT></TD>
		<TD WIDTH="295">Obtains the max advance in use for this font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getMaxAscent()</TT></TD>
		<TD WIDTH="295">Obtains the max ascent in use for this font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Rectangle2D getMaxCharBounds(Graphics)</TT></TD>
		<TD WIDTH="295">Obtains the maximum bounding box</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getMaxDescent()</TT></TD>
		<TD WIDTH="295">Obtains the max descent in use for this font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Rectangle2D getStringBounds(char[], int, int, Graphics)</TT></TD>
		<TD WIDTH="295">Obtains the maximum bounding box for the specified character array</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Rectangle2D getStringBounds(CharacterIterator, int, int, Graphics)</TT></TD>
		<TD WIDTH="295">Obtains the maximum bounding box for the specified character iterator</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Rectangle2D getStringBounds(String, Graphics)</TT></TD>
		<TD WIDTH="295">Obtains the maximum bounding box for the specified <TT>String</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Rectangle2D getStringBounds(String, int, int, Graphics)</TT></TD>
		<TD WIDTH="295">Obtains the maximum bounding box for the specified <TT>String</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int[] getWidths()</TT></TD>
		<TD WIDTH="295">Obtains the widths of the first 256 glyphs</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int stringWidth(String)</TT></TD>
		<TD WIDTH="295">Obtains the width of the specified string with the represented font applied</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String toString()</TT></TD>
		<TD WIDTH="295">Obtains a <TT>String</TT> object representing the current state</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.FontMetrics</TT>: Example</H4>
<P>The <TT>FontMetrics</TT> class is used to represent parameters about a unique
font object:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;



public class FontMetricsDemo extends Frame { 

    private Font        myFont;

    private String      displayString;

    private int         pointSize;



    public FontMetricsDemo() { 

        setSize(200, 200);

        pointSize = 8;

        myFont = new Font(&quot;Helvetica&quot;, Font.BOLD, pointSize);

        displayString = new String(&quot;FontMetrics Demo&quot;);

    } 





    public void paint(Graphics g) { 

        // get the current FontMetrics

        FontMetrics myMetrics = getFontMetrics(myFont);



        // Keep increasing the point size until

        // displayString fills the window

        while(myMetrics.stringWidth(displayString) &lt; getWidth()) { 

            pointSize++;

            myFont = new Font(&quot;Helvetica&quot;, Font.BOLD, pointSize);

            myMetrics = getFontMetrics(myFont);

        } 



        g.setFont(myFont);

        g.drawString(displayString, 0, 100);

    } 





    public static void main(String args[]) { 

        FontMetricsDemo myDemo = new FontMetricsDemo();



         // Allow the program to be shut down by closing the

         // main window.

         myDemo.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                 System.exit(0);

             } 

         } );



        myDemo.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtFrameFONTTT"></A><TT>java.awt.Frame</TT></H3>
<P><TT>public class Frame extends Window implements MenuContainer</TT></P>

<P>The Frame class represents a top-level window with a title and possibly a menu
bar. Anytime an application needs to create a window, it will usually create a Frame
object. This class is implemented using peers, so it will have a native look and
feel on each platform it runs on.</P>

<P>Unlike most classes covered in this section, we will not spend time on a coding
example here. Flip to any other coding example because they are all implemented using
a Frame object at some point.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Frame</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int CROSSHAIR_CURSOR CURSOR</TT>)</TD>
		<TD WIDTH="295">Cursor type for a crosshair cursor (deprecated, use <TT>Cursor.CROSSHAIR_</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int DEFAULT_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for the default cursor (deprecated, use <TT>Cursor. DEFAULT_CURSOR)</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int E_RESIZE_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for an east-facing resize cursor (deprecated, use <TT>Cursor. E_RESIZE_CURSOR</TT>)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int HAND_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for a hand cursor (deprecated, use <TT>Cursor.HAND_CURSOR</TT>)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int MOVE_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for a move cursor (deprecated, use <TT>Cursor.MOVE_CURSOR</TT>)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int N_RESIZE_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for a north-facing resize cursor (deprecated, use <TT>Cursor. N_RESIZE_CURSOR</TT>)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int NE_RESIZE_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for a northeast-facing resize cursor (deprecated, use <TT>Cursor.NE_RESIZE_CURSOR</TT>)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int NW_RESIZE_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for a northwest-facing resize cursor (deprecated, use <TT>Cursor.NW_RESIZE_CURSOR</TT>)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int S_RESIZE_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for a south-facing resize cursor (deprecated, use <TT>Cursor.S_RESIZE_CURSOR</TT>)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int SE_RESIZE_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for a southeast-facing resize cursor (deprecated, use <TT>Cursor.SE_RESIZE_CURSOR</TT>)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int SW_RESIZE_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for a southwest-facing resize cursor (deprecated, use <TT>Cursor.SW_RESIZE_CURSOR</TT>)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int TEXT_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for a text cursor (depre-cated, use <TT>Cursor.TEXT_CURSOR</TT>)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int W_RESIZE_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for a west-facing resize cursor (deprecated, use <TT>Cursor. W_RESIZE_CURSOR</TT>)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int WAIT_CURSOR</TT></TD>
		<TD WIDTH="295">Cursor type for a wait cursor (depre-cated, use <TT>Cursor.WAIT_CURSOR</TT>)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addNotify()</TT></TD>
		<TD WIDTH="295">Creates the component's peer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void dispose()</TT></TD>
		<TD WIDTH="295">Frees any resources associated with the component and makes it a candidate for garbage
			collection</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void finalize()</TT></TD>
		<TD WIDTH="295">Internal use to prevent memory leak</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static Frame getFrames()</TT></TD>
		<TD WIDTH="295">Obtains an array containing references to all frames created by the application</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Image getIconImage()</TT></TD>
		<TD WIDTH="295">Obtains the icon image used to represent this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public MenuBar getMenuBar()</TT></TD>
		<TD WIDTH="295">Obtains the menu bar associated with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getTitle()</TT></TD>
		<TD WIDTH="295">Obtains the title displayed in the title bar</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isResizable()</TT></TD>
		<TD WIDTH="295">Returns true if this window is resizable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected String paramString()</TT></TD>
		<TD WIDTH="295">Obtains the parameter string for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void remove(MenuComponent)</TT></TD>
		<TD WIDTH="295">Removes the specified menu bar from this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setIconImage(Image)</TT></TD>
		<TD WIDTH="295">Sets the icon image used to represent this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setMenuBar(MenuBar)</TT></TD>
		<TD WIDTH="295">Associates a menu bar with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setResizable(boolean)</TT></TD>
		<TD WIDTH="295">Sets whether or not the frame can be resized</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setTitle(String)</TT></TD>
		<TD WIDTH="295">Sets the string displayed in the title bar</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtGraphicsFONTTT"></A><TT>java.awt.Graphics</TT></H3>
<P><TT>public abstract class Graphics extends Object</TT></P>

<P>When an application draws to either the screen or an off-screen Image object,
all drawing is performed on a Graphics object. The Graphics object maintains state,
indicating the component to draw into, the current color, the current font, the current
logical pixel operation, the current color, and the current alternate color.</P>

<P>The class is abstract, so you will never instantiate it directly. However, you
will receive a reference to an appropriate subclass either as a parameter to a paint()
method or by calling the Image.getGraphics() method.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Graphics</TT>: Method/Event Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void clearRect(int, int, int, int)</TT></TD>
		<TD WIDTH="295">Fills the area contained within the specified coordinates with the background color</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void clipRect(int, int, int, int)</TT></TD>
		<TD WIDTH="295">Intersects the current clip region with the area specified by the coordinates</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void copyArea(int, int, int, int, int, int)</TT></TD>
		<TD WIDTH="295">Copies an area of the component from one set of coordinates to the other</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract Graphics create()</TT></TD>
		<TD WIDTH="295">Obtains a copy of the current <TT>Graphics</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Graphics create(int, int, int, int)</TT></TD>
		<TD WIDTH="295">Obtains a copy of the current <TT>Graphics</TT> object with the specified translation
			and clip area</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void dispose()</TT></TD>
		<TD WIDTH="295">Disposes of the <TT>Graphics</TT> object and makes it a candidate for garbage collection</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void draw3DRect(int, int, int, int, boolean)</TT></TD>
		<TD WIDTH="295">Draws a 3D outline rectangle using the specified coordinates and raised status</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void drawArc(int, int, int, int, int, int)</TT></TD>
		<TD WIDTH="295">Draws an outline arc using the specified coordinates and covering the given rectangle
			dimensions</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void drawBytes(byte[], int, int, int, int)</TT></TD>
		<TD WIDTH="295">Draws the specified bytes at the specified location</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void drawChars(char[], int, int, int, int)</TT></TD>
		<TD WIDTH="295">Draws the specified bytes at the specified location</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void drawImage(Image, int, int, Color, ImageObserver)</TT></TD>
		<TD WIDTH="295">Draws an image at the specified location with the specified background color</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void drawImage(Image, int, int, ImageObserver)</TT></TD>
		<TD WIDTH="295">Draws an image at the specified location</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void drawImage(Image, int, int, int, int, Color, ImageObserver)</TT></TD>
		<TD WIDTH="295">Draws an image at the specified location with the specified background color and
			height/width</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void</TT></TD>
		<TD WIDTH="295">Draws an image</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>drawImage(Image, int, int, int, int, ImageObserver)</TT></TD>
		<TD WIDTH="295">at the specified location with the specified height/width</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void drawImage(Image, int, int, int, int, int, int, int, int,
			Color, ImageObserver)</TT></TD>
		<TD WIDTH="295">Draws an image at the specified location with the specified background color and
			scaling information</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void drawImage(Image, int, int, int, int, int, int, int, int,
			ImageObserver)</TT></TD>
		<TD WIDTH="295">Draws an image at the specified location with the specified scaling information</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void drawLine(int, int, int, int) public abstract void drawOval(int,
			int, int, int)</TT></TD>
		<TD WIDTH="295">Draws a line from one point to the other Draws an outline oval using the specified
			coordinates</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void drawPolygon(int[], int[], int)</TT></TD>
		<TD WIDTH="295">Draws an outline polygon using the specified coordinates</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void drawPolygon(Polygon)</TT></TD>
		<TD WIDTH="295">Draws an outline polygon using the specified coordinates</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void drawPolyline(int[], int[], int)</TT></TD>
		<TD WIDTH="295">Draws a sequence of lines as defined by the coordinates</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void drawRect(int, int, int, int)</TT></TD>
		<TD WIDTH="295">Draws an outline rectangle using the specified coordinates</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void drawRoundRect</TT></TD>
		<TD WIDTH="295">Draws an outline rounded</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>(int, int, int, int, int, int)</TT></TD>
		<TD WIDTH="295">rectangle using the specified coordinates and curve dimensions</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void drawString(AttributedCharacterIterator, int, int)</TT></TD>
		<TD WIDTH="295">Draws the specified text given by the specified iterator at the location specified</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void drawString(String, int, int)</TT></TD>
		<TD WIDTH="295">Draws the specified string at the location specified</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void fill3DRect(int, int, int, int, boolean)</TT></TD>
		<TD WIDTH="295">Draws a 3D filled rectangle using the specified coordinates and raised status</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void fillArc(int, int, int, int, int, int)</TT></TD>
		<TD WIDTH="295">Draws a filled arc using the specified coordinates and arc dimensions</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void fillOval(int, int, int, int) public abstract void fillPolygon(int[],
			int[], int)</TT></TD>
		<TD WIDTH="295">Draws a filled oval using the specified coordinates Draws a filled polygon using
			the specified coordinates</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void fillPolygon(Polygon)</TT></TD>
		<TD WIDTH="295">Draws a filled polygon using the specified coordinates</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void fillRect(int, int, int, int)</TT></TD>
		<TD WIDTH="295">Draws a filled rectangle using the specified coordinates</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void fillRoundRect(int, int, int, int, int, int)</TT></TD>
		<TD WIDTH="295">Draws a filled rectangle using the specified coordinates and curve dimensions</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void finalize()</TT></TD>
		<TD WIDTH="295">Release resources during garbage collection</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract Shape getClip()</TT></TD>
		<TD WIDTH="295">Obtains the active clipping area</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract Rectangle getClipBounds()</TT></TD>
		<TD WIDTH="295">Obtains the bounding box for the active clipping area</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract Rectangle getClipBounds(Rectangle)</TT></TD>
		<TD WIDTH="295">Stores the bounding box for the active clipping area in the specified<TT> Rectangle</TT>
			and returns it</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract Color getColor()</TT></TD>
		<TD WIDTH="295">Obtains the current drawing color</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract Font getFont()</TT></TD>
		<TD WIDTH="295">Obtains the current <TT>Font</TT> object in use</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public FontMetrics getFontMetrics()</TT></TD>
		<TD WIDTH="295">Obtains the current <TT>FontMetrics</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract FontMetrics getFontMetrics(Font)</TT></TD>
		<TD WIDTH="295">Obtains the <TT>FontMetrics</TT> object associated with the specified <TT>Font</TT>
			object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean hitClip(int, int, int, int)</TT></TD>
		<TD WIDTH="295">Returns true if the specified rectangular area intersects the active clipping region</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void setClip(int, int, int, int)</TT></TD>
		<TD WIDTH="295">Sets the active clipping area</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void setClip(Shape)</TT></TD>
		<TD WIDTH="295">Sets the active clipping area</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void setColor(Color)</TT></TD>
		<TD WIDTH="295">Sets the active drawing color</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void setFont(Font)</TT></TD>
		<TD WIDTH="295">Sets the active font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void setPaintMode()</TT></TD>
		<TD WIDTH="295">Sets the active paint mode</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void setXORMode(Color)</TT></TD>
		<TD WIDTH="295">Sets the <TT>XOR</TT> paint status</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String toString()</TT></TD>
		<TD WIDTH="295">Obtains a <TT>String</TT> object representing the current state of this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void translate(int, int)</TT></TD>
		<TD WIDTH="295">Translates the active origin to the specified origin</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Graphics</TT>: Example</H4>
<P>Direct drawing of primitives and fonts is performed in a <TT>Graphics</TT> object:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;





public class GraphicsDemo extends Frame implements MouseListener { 

    private Point start = null;

    private Point stop = null;





    public GraphicsDemo() { 

        setSize(300,300);

        addMouseListener(this);

    } 



    // Keep the screen from updating

    public void update(Graphics g) { 

        paint(g);

    } 



    // Paint the screen

    public void paint(Graphics g) { 

        // Make sure we are null free

        if( (start == null) || (stop == null) ) return;



        // Draw the line between two points

        g.drawLine(start.x, start.y, stop.x, stop.y);

    } 



    // Reset the start point

    public void mousePressed(MouseEvent me) { 

       start = me.getPoint();

       repaint();

    } 



    // Reset the stop point

    public void mouseReleased(MouseEvent me) { 

       stop = me.getPoint();

       repaint();

    } 



    public void mouseClicked(MouseEvent me ) { 

    } 



    public void mouseEntered(MouseEvent me) { 

    } 



    public void mouseExited(MouseEvent me) { 

    } 





    public static void main(String args[]) { 

        GraphicsDemo myDemo = new GraphicsDemo();



         // Allow the program to be shut down by closing the

         // main window.

         myDemo.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                 System.exit(0);

             } 

         } );



        myDemo.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtGridBagConstraintsFONTTT"></A><TT>java.awt.GridBagConstraints</TT></H3>
<P><TT>public class GridBagConstraints extends Object implements Cloneable, Serializable</TT></P>

<P>When laying out screens using the GridBagLayout class, each component's screen
position is set using a GridBagConstraints object. GridBagConstraints has fields
for specifying relative screen location, relative screen size, and grow-on-resize
parameters. As a side note, this class joins together with GridBagLayout to form
both the most powerful and hardest to use layout manager.</P>

<P>Because GridBagLayout and GridBagConstraints are most assuredly bedfellows, we
will hold off on a coding example until the section on GridBagLayout.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.GridBagConstraints</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int anchor</TT></TD>
		<TD WIDTH="295">Specifies where a component should be anchored</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int BOTH</TT></TD>
		<TD WIDTH="295">Constant used with <TT>fill</TT> to specify that a component should stretch in a
			horizontal and vertical fashion</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int CENTER</TT></TD>
		<TD WIDTH="295">Constant used with <TT>anchor</TT> to specify that a component should be anchored
			in the center of its region</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int EAST</TT></TD>
		<TD WIDTH="295">Constant used with <TT>anchor</TT> to specify that a component should be anchored
			in the east of its region</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int fill</TT></TD>
		<TD WIDTH="295">Specifies how a component is to be stretched to fill a region</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int gridheight</TT></TD>
		<TD WIDTH="295">Specifies the relative grid height that a component is to take up</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int gridwidth</TT></TD>
		<TD WIDTH="295">Specifies the relative grid width that a component is to take up</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int gridx</TT></TD>
		<TD WIDTH="295">Specifies the relative x position for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int gridy</TT></TD>
		<TD WIDTH="295">Specifies the relative y position for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int HORIZONTAL</TT></TD>
		<TD WIDTH="295">Constant used with <TT>fill</TT> to specify that a component should stretch in a
			horizontal fashion</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Insets insets</TT></TD>
		<TD WIDTH="295">Specifies the external padding of the component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int ipadx</TT></TD>
		<TD WIDTH="295">Specifies the internal padding along the x-axis</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int ipady</TT></TD>
		<TD WIDTH="295">Specifies the internal padding along the y-axis</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int NONE</TT></TD>
		<TD WIDTH="295">Constant used with <TT>fill</TT> to specify that a component should not stretch</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int NORTH</TT></TD>
		<TD WIDTH="295">Constant used with <TT>anchor</TT> to specify that a component should be anchored
			in the north of its region</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int NORTHEAST</TT></TD>
		<TD WIDTH="295">Constant used with <TT>anchor</TT> to specify that a component should be anchored
			in the northeast of its region</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int NORTHWEST</TT></TD>
		<TD WIDTH="295">Constant used with <TT>anchor</TT> to specify that a component should be anchored
			in the northwest of its region</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int RELATIVE</TT></TD>
		<TD WIDTH="295">Constant that specifies relative positioning</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int REMAINDER</TT></TD>
		<TD WIDTH="295">Constant that specifies this component is the last component in a given row</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int SOUTH</TT></TD>
		<TD WIDTH="295">Constant used with <TT>anchor</TT> to specify that a component should be anchored
			in the south of its region</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int SOUTHEAST</TT></TD>
		<TD WIDTH="295">Constant used with <TT>anchor</TT> to specify that a component should be anchored
			in the southeast of its region</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int SOUTHWEST</TT></TD>
		<TD WIDTH="295">Constant used with <TT>anchor</TT> to specify that a component should be anchored
			in the southwest of its region</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int VERTICAL</TT></TD>
		<TD WIDTH="295">Constant used with <TT>fill</TT> to specify that a component should stretch in a
			vertical fashion</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int weightx</TT></TD>
		<TD WIDTH="295">Specifies the x grow factor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int weighty</TT></TD>
		<TD WIDTH="295">Specifies the y grow factor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int WEST</TT></TD>
		<TD WIDTH="295">Constant used with <TT>anchor</TT> to specify that a component should be anchored
			in the west of its region</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Object clone()</TT></TD>
		<TD WIDTH="295">Clones the current object</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtGridBagLayoutFONTTT"></A><TT>java.awt.GridBagLayout</TT></H3>
<P><TT>public class GridBagLayout extends Object implements LayoutManger2, Serializable</TT></P>

<P>GridBagLayout is, without a doubt, the most powerful layout manager in the JDK
1.1. It allows for very specific customization of the screens look and feel. However,
it is also very hard to use. Having worked with Java since December of 1995, I have
only begun to understand GridBagLayout, and still find tools like Visual Caf&eacute;
invaluable when building screens using this class.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.GridBagLayout</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public double[] columnWeights</TT></TD>
		<TD WIDTH="295">Collection of column weights</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public double[] columnWidths</TT></TD>
		<TD WIDTH="295">Collection of column heights</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Hashtable comptable protected GridBagConstraints defaultConstraints</TT></TD>
		<TD WIDTH="295">Comptable information</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected GridBagLayoutInfo layoutInfo</TT></TD>
		<TD WIDTH="295">Screen meta-data</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected static final int MAXGRIDSIZE</TT></TD>
		<TD WIDTH="295">Maximum number of available grid blocks</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected static final int MINSIZE</TT></TD>
		<TD WIDTH="295">Minimum number of grid blocks</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected static final int PREFERREDSIZE</TT></TD>
		<TD WIDTH="295">Preferred number of grid blocks</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public double[] rowHeights</TT></TD>
		<TD WIDTH="295">Collection of row heights</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public double[] rowWeights</TT></TD>
		<TD WIDTH="295">Collection of row weights</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addLayoutComponent(Component, Object)</TT></TD>
		<TD WIDTH="295">Adds the specified component using the specified constraints</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addLayoutComponent(String, Component)</TT></TD>
		<TD WIDTH="295">Adds the specified component using the specified name</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void AdjustForGravity(GridBagConstraints, Rectangle)</TT></TD>
		<TD WIDTH="295">Used internally to determine screen placing</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void ArrangeGrid(Container)</TT></TD>
		<TD WIDTH="295">Used internally to determine screen placing</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public GridBagConstraints getConstraints(Component)</TT></TD>
		<TD WIDTH="295">Obtains the constraints applied to the specified component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public float getLayoutAlignmentX(Container)</TT></TD>
		<TD WIDTH="295">Obtains the alignment along the x-axis</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public float</TT></TD>
		<TD WIDTH="295">Obtains the alignment</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>getLayoutAlignmentY(Container)</TT></TD>
		<TD WIDTH="295">along the y-axis</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int[][] getLayoutDimensions()</TT></TD>
		<TD WIDTH="295">Obtains all row widths and column heights</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected GridBagLayoutInfo GetLayoutInfo(Container, int)</TT></TD>
		<TD WIDTH="295">Obtains <TT>GridBagLayoutInfo</TT> information used in debugging</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Point getLayoutOrigin()</TT></TD>
		<TD WIDTH="295">Obtains the grid origin</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public double[][] getLayoutWeights()</TT></TD>
		<TD WIDTH="295">Obtains all row and column weights</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected Dimension GetMinSize(Container, GridBagLayoutInfo)</TT></TD>
		<TD WIDTH="295">Used internally to determine screen placement</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void invalidateLayout(Container)</TT></TD>
		<TD WIDTH="295">Invalidates the layout for the specified container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void layoutContainer(Container)</TT></TD>
		<TD WIDTH="295">Lays out the specified container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Point location(int, int)</TT></TD>
		<TD WIDTH="295">Determines the cell that owns the specified coordinates</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected GridBagConstraints</TT></TD>
		<TD WIDTH="295">Obtains the</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>lookupConstraints(Component)</TT></TD>
		<TD WIDTH="295"><TT>GridBagConstraints</TT> object used to lay out the specified component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension maximumLayoutSize(Container)</TT></TD>
		<TD WIDTH="295">Obtains the maximum size the specified container can consume</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension minimumLayoutSize(Container)</TT></TD>
		<TD WIDTH="295">Obtains the minimum size the specified container can consume</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension preferredLayoutSize(Container)</TT></TD>
		<TD WIDTH="295">Obtains the preferred size the specified container can consume</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeLayoutComponent(Component)</TT></TD>
		<TD WIDTH="295">Removes the specified component from the screen</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setConstraints(Component, GridBagConstraints)</TT></TD>
		<TD WIDTH="295">Applies the specified constraints to the specified component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String toString()</TT></TD>
		<TD WIDTH="295">Obtains a <TT>String</TT> object representing the current state of this object</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.GridBagLayout</TT>: Example</H4>
<P>The <TT>GridBagLayout</TT> class allows complex screens to be built:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;



public class GridBagDemo extends Frame { 

    private Choice  layoutChoice;

    private Label   questionLabel;





    public GridBagDemo() { 

    GridBagLayout gridBagLayout;

    gridBagLayout = new GridBagLayout();

    setLayout(gridBagLayout);



    questionLabel = new Label(&quot;What Is Your Favorite Layout Manager&quot;);



    GridBagConstraints gbc;

    gbc = new GridBagConstraints();

    gbc.gridx = 0;

    gbc.gridy = 0;

    gbc.gridwidth = 3;

    gbc.weightx = 100;

    gbc.weighty = 100;

    gbc.fill = GridBagConstraints.HORIZONTAL;

    gbc.insets = new Insets(0,0,0,0);

    gridBagLayout.setConstraints(questionLabel, gbc);

    add(questionLabel);



    layoutChoice = new Choice();

    layoutChoice.add(&quot;GridBagLayout&quot;);

    layoutChoice.add(&quot;GridLayout&quot;);

    layoutChoice.add(&quot;BorderLayout&quot;);

    layoutChoice.add(&quot;FlowLayout&quot;);



    gbc = new GridBagConstraints();

    gbc.gridx = 4;

    gbc.gridy = 0;

    gbc.gridwidth = 2;

    gbc.weightx = 100;

    gbc.weighty = 100;

    gbc.fill = GridBagConstraints.HORIZONTAL;

    gbc.insets = new Insets(0,0,0,0);

    gridBagLayout.setConstraints(layoutChoice, gbc);

    add(layoutChoice);

    } 





    public static void main(String args[]) { 

        GridBagDemo myDemo = new GridBagDemo();



         // Allow the program to be shut down by closing the

         // main window.

         myDemo.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                 System.exit(0);

             } 

         } );



        myDemo.pack();

        myDemo.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtGridLayoutFONTTT"></A><TT>java.awt.GridLayout</TT></H3>
<P><TT>public class GridLayout extends Object implements LayoutManager, Serializable</TT></P>

<P>The GridLayout layout manager breaks up a container into a series of equally sized
grid squares. Each grid square must house exactly one component, and the size of
all grid squares defaults to the size of the largest component. This layout manager
can be used to build screens in certain situations, but it often produces undesirable
results. GridLayout is useful when each component is about the same size.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.GridLayout</TT>: Method/Event Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addLayoutComponent(String, Component)</TT></TD>
		<TD WIDTH="295">Adds the specified component using the specified name</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getColumns()</TT></TD>
		<TD WIDTH="295">Obtains the number of columns</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getHgap()</TT></TD>
		<TD WIDTH="295">Obtains the horizontal gap between components</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getRows()</TT></TD>
		<TD WIDTH="295">Obtains the number of rows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getVgap()</TT></TD>
		<TD WIDTH="295">Obtains the vertical gap between components</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void layoutContainer(Container)</TT></TD>
		<TD WIDTH="295">Lays out the specified container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension minimumLayoutSize(Container)</TT></TD>
		<TD WIDTH="295">Obtains the minimum size the specified container can consume</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension preferredLayoutSize(Container)</TT></TD>
		<TD WIDTH="295">Obtains the preferred size the specified container can consume</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeLayoutComponent(Component)</TT></TD>
		<TD WIDTH="295">Removes the specified component from the screen</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setColumns(int)</TT></TD>
		<TD WIDTH="295">Sets the number of columns in use</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setHgap(int)</TT></TD>
		<TD WIDTH="295">Sets the horizontal gap between components</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setRows(int)</TT></TD>
		<TD WIDTH="295">Sets the number of rows in use</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setVgap(int)</TT></TD>
		<TD WIDTH="295">Sets the vertical gap between components</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String toString()</TT></TD>
		<TD WIDTH="295">Obtains a <TT>String</TT> object representing the current state of the object</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.GridLayout</TT>: Example</H4>
<P>The <TT>GridLayout</TT> class allows objects to be added to a container in a grid
with equally sized partitions:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;



public class GridLayoutDemo extends Frame { 



    public GridLayoutDemo() { 

        // Set the layout

        setLayout(new GridLayout(3,2));



        // add some components

        add(new Button(&quot;1&quot;));

        add(new Button(&quot;2&quot;));

        add(new Button(&quot;3&quot;));

        add(new Button(&quot;4&quot;));

        add(new Button(&quot;5&quot;));

    } 



    public static void main(String args[]) { 

        GridLayoutDemo myDemo = new GridLayoutDemo();



         // Allow the program to be shut down by closing the

         // main window.

         myDemo.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                 System.exit(0);

             } 

         } );



        myDemo.pack();

        myDemo.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtImageFONTTT"></A><TT>java.awt.Image</TT></H3>
<P><TT>public abstract class Image extends Object</TT></P>

<P>The Image class represents a physical image. Images are inherently platform dependent,
so this class contains a platform-dependent implementation and may not be directly
instantiated. Instead, an instance of an appropriate subclass can be obtained by
reading in a GIF or JPEG file or through the createImage() method.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Image</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD COLSPAN="2">
			<P ALIGN="CENTER"><B>Fields</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int SCALE_AREA_AVERAGING</TT></TD>
		<TD WIDTH="295">Constant passed to<TT> getScaledInstance()</TT>specifying the <TT>AREA AVERAGING</TT>
			scaling algorithm</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int SCALE_DEFAULT</TT></TD>
		<TD WIDTH="295">Constant passed to <TT>getScaledInstance()</TT> specifying the <TT>SCALE DEFAULT</TT>
			scaling algorithm</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int SCALE_FAST</TT></TD>
		<TD WIDTH="295">Constant passed to <TT>getScaledInstance()</TT> specifying the <TT>SCALE FAST </TT>scaling
			algorithm</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int SCALE_REPLICATE</TT></TD>
		<TD WIDTH="295">Constant passed to <TT>getScaledInstance()</TT> specifying the <TT>SCALE REPLICATE
			</TT>scaling algorithm</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int SCALE_SMOOTH</TT></TD>
		<TD WIDTH="295">Constant passed to <TT>getScaledInstance()</TT> specifying the <TT>SCALE SMOOTH</TT>
			scaling algorithm</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final Object UndefinedProperty</TT></TD>
		<TD WIDTH="295">Returned from the<TT> getProperty()</TT> method whenever the requested property cannot
			be found</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void flush()</TT></TD>
		<TD WIDTH="295">Flushes all resources in use</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract Graphics getGraphics()</TT></TD>
		<TD WIDTH="295">Obtains the <TT>Graphics</TT> object associated with this image</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract int getHeight(ImageObserver)</TT></TD>
		<TD WIDTH="295">Obtains the height as viewed by <TT>ImageObserver</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Object getProperty(String, ImageObserver)</TT></TD>
		<TD WIDTH="295">Obtains the named property from the image</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Image getScaledInstance(int, int, int)</TT></TD>
		<TD WIDTH="295">Obtains a scaled version of the active image</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract ImageProducer getSource()</TT></TD>
		<TD WIDTH="295">Obtains the <TT>ImageProducer</TT> associated with this image</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract int getWidth(ImageObserver)</TT></TD>
		<TD WIDTH="295">Obtains the width as viewed by <TT>ImageObserver</TT></TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtInsetsFONTTT"></A><TT>java.awt.Insets</TT></H3>
<P><TT>public class Insets extends Object implements Clonable, Serializable</TT></P>

<P>The Insets class represents the number of pixels that should be used for a container's
borders. When the container is laying itself out, it will not place any components
in the area specified by the Insets class. As a side note, when you're creating external
views in an applet, you should allocate approximately 10 extra pixels along the bottom
of a frame for the warning label.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Insets</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int bottom</TT></TD>
		<TD WIDTH="295">The bottom inset in pixels</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int left</TT></TD>
		<TD WIDTH="295">The left inset in pixels</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int right</TT></TD>
		<TD WIDTH="295">The right inset in pixels</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int top</TT></TD>
		<TD WIDTH="295">The top inset in pixels</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Object clone()</TT></TD>
		<TD WIDTH="295">Obtains a copy of the current object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean equals(Object)</TT></TD>
		<TD WIDTH="295">Returns true if both <TT>Insets</TT> objects have the same values for all public
			member variables</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String toString()</TT></TD>
		<TD WIDTH="295">Returns a <TT>String</TT> object representing the current state of this object</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtLabelFONTTT"></A><TT>java.awt.Label</TT></H3>
<P><TT>public class Label extends Component</TT></P>

<P>The Label class is used to display a single line of read-only text. It is possible
to write directly into a container using the Graphics.drawString() method, but this
leaves all layout up to you and can be very time-consuming. Instead, the Label class
is provided as a component that can display a string.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Label</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int CENTER</TT></TD>
		<TD WIDTH="295">Constant used to specify that the label text should be center-justified</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int LEFT</TT></TD>
		<TD WIDTH="295">Constant used to specify that the label text should be left-justified</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int RIGHT</TT></TD>
		<TD WIDTH="295">Constant used to specify that the label text should be right-justified</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addNotify()</TT></TD>
		<TD WIDTH="295">Creates the label's peer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getAlignment()</TT></TD>
		<TD WIDTH="295">Obtains the alignment of the label (<TT>CENTER</TT>, <TT>LEFT</TT>, or <TT>RIGHT</TT>)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getText()</TT></TD>
		<TD WIDTH="295">Obtains the text being displayed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected String paramString()</TT></TD>
		<TD WIDTH="295">Obtains the parameter string for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setAlignment(int)</TT></TD>
		<TD WIDTH="295">Sets the alignment of the label (<TT>CENTER</TT>, <TT>LEFT</TT>, or <TT>RIGHT</TT>)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setText(String)</TT></TD>
		<TD WIDTH="295">Sets the text being displayed</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Label</TT>: Example</H4>
<P>The <TT>Label</TT> class is used to represent a text identifier:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;



public class LabelDemo extends Frame { 



    public LabelDemo() { 

        // Set the layout

        setLayout(new GridLayout(2,1));



        // add some labels

        add(new Label(&quot;Special Edition Using&quot;, Label.CENTER));

        add(new Label(&quot;Java Class Libraries&quot;, Label.CENTER));

    } 



    public static void main(String args[]) { 

        LabelDemo myDemo = new LabelDemo();



         // Allow the program to be shut down by closing the

         // main window.

         myDemo.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                 System.exit(0);

             } 

         } );



        myDemo.pack();

        myDemo.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtListFONTTT"></A><TT>java.awt.List</TT></H3>
<P><TT>public class List extends Component implements ItemSelectable</TT></P>

<P>Like the Choice object, the List object is used to display a series of choices
to a user. By using the List object, however, the user can see and select more than
one option at a time.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.List</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void add(String)</TT></TD>
		<TD WIDTH="295">Adds the string to the end of the list</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void add(String, int)</TT></TD>
		<TD WIDTH="295">Adds the string at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addActionListener(ActionListener)</TT></TD>
		<TD WIDTH="295">Adds an <TT>ActionListener</TT> to the collection of listeners; an<TT> ActionListener</TT>
			is notified whenever a user double-clicks on an item</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addItem(String)</TT></TD>
		<TD WIDTH="295">Adds the string to the end of the list (deprecated, use <TT>add(String)</TT>)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addItem(String, int)</TT></TD>
		<TD WIDTH="295">Adds the string at the specified index (deprecated, use <TT>add(String, int)</TT>)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addItemListener(ItemListener)</TT></TD>
		<TD WIDTH="295">Adds an <TT>ItemListener</TT> to the collection of listeners; an<TT> ItemListener</TT>
			is notified whenever the selected item changes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addNotify()</TT></TD>
		<TD WIDTH="295">Creates the component's peer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void delItem(int)</TT></TD>
		<TD WIDTH="295">Removes the <TT>String</TT> at the specified index (deprecated, use <TT>remove(int)</TT>)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void deselect(int)</TT></TD>
		<TD WIDTH="295">Deselects the item at the index specified by the <TT>int</TT> parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getItem(int)</TT></TD>
		<TD WIDTH="295">Obtains the item at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getItemCount()</TT></TD>
		<TD WIDTH="295">Obtains a count of all items in the list</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String[] getItems()</TT></TD>
		<TD WIDTH="295">Obtains an array containing all items in the list</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getMinimumSize()</TT></TD>
		<TD WIDTH="295">Obtains the minimum size of the list</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getMinimumSize(int)</TT></TD>
		<TD WIDTH="295">Obtains the minimum size of a list with the specified number of rows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getPreferredSize()</TT></TD>
		<TD WIDTH="295">Obtains the preferred size of the list</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getPreferredSize(int)</TT></TD>
		<TD WIDTH="295">Obtains the preferred size of a list with the specified number of rows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getRows()</TT></TD>
		<TD WIDTH="295">Obtains the number of visible rows in the list</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getSelectedIndex()</TT></TD>
		<TD WIDTH="295">Obtains the index of the selected item</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int[] getSelectedIndexes()</TT></TD>
		<TD WIDTH="295">Obtains an array containing all selected indices</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getSelectedItem()</TT></TD>
		<TD WIDTH="295">Obtains the selected item</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String[] getSelectedItems()</TT></TD>
		<TD WIDTH="295">Obtains an array containing all selected items</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Object[] getSelectedObjects()</TT></TD>
		<TD WIDTH="295">Obtains an array containing all selected items</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getVisibleIndex()</TT></TD>
		<TD WIDTH="295">Obtains the last index made visible with a call to <TT>makeVisible()</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isIndexSelected(int)</TT></TD>
		<TD WIDTH="295">Returns true if the specified index is currently selected</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isMultipleMode()</TT></TD>
		<TD WIDTH="295">Returns true if you are currently in multiple select mode</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void makeVisible(int)</TT></TD>
		<TD WIDTH="295">Scrolls the list, ensuring that the item at the specified index is visible</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void paramString()</TT></TD>
		<TD WIDTH="295">Obtains a parameter string for the component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processActionEvent(ActionEvent)</TT></TD>
		<TD WIDTH="295">Used internally for event management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processEvent(AWTEvent)</TT></TD>
		<TD WIDTH="295">Used internally for event management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processItemEvent(ItemEvent)</TT></TD>
		<TD WIDTH="295">Used internally for event management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void remove(int)</TT></TD>
		<TD WIDTH="295">Removes the item at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void remove(String)</TT></TD>
		<TD WIDTH="295">Removes the first occurrence of the specified item</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeActionListener(ActionListener)</TT></TD>
		<TD WIDTH="295">Removes the<TT> ActionListener</TT> from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeAll()</TT></TD>
		<TD WIDTH="295">Removes all items from the list</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeItemListener(ItemListener)</TT></TD>
		<TD WIDTH="295">Removes the <TT>ItemListener</TT> from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeNotify()</TT></TD>
		<TD WIDTH="295">Separates the <TT>List</TT> object from its peer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void replaceItem(String, int)</TT></TD>
		<TD WIDTH="295">Replaces the item at the specified index with the <TT>String</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void select(int)</TT></TD>
		<TD WIDTH="295">Selects the item at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setMultipleMode(boolean)</TT></TD>
		<TD WIDTH="295">Sets multiple select mode based on the parameter</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.List</TT>: Example</H4>
<P>The <TT>List</TT> class is used to represent a collection of items, from which
either one or many can be selected:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;



public class ListDemo extends Frame { 

    private List    layoutList;

    private Label   questionLabel;





    public ListDemo() { 

        GridBagLayout gridBagLayout;

        gridBagLayout = new GridBagLayout();

        setLayout(gridBagLayout);



questionLabel = new Label(&quot;What Is Your Favorite&quot; +

                                  &quot; Layout Manager&quot;);



        GridBagConstraints gbc;

        gbc = new GridBagConstraints();

        gbc.gridx = 0;

        gbc.gridy = 0;

        gbc.gridwidth = 3;

        gbc.weightx = 100;

        gbc.weighty = 100;

        gbc.fill = GridBagConstraints.HORIZONTAL;

        gbc.insets = new Insets(0,0,0,0);

        gridBagLayout.setConstraints(questionLabel, gbc);

        add(questionLabel);



        // Create a new List object which allows multiple selections,

        // and displays up to 5 items at a time.

        layoutList = new List(5, true);

layoutList.add(&quot;GridBagLayout&quot;);

        layoutList.add(&quot;GridLayout&quot;);

        layoutList.add(&quot;BorderLayout&quot;);

        layoutList.add(&quot;FlowLayout&quot;);



        gbc = new GridBagConstraints();

        gbc.gridx = 4;

        gbc.gridy = 0;

        gbc.gridwidth = 2;

        gbc.gridheight = 4;

        gbc.weightx = 100;

        gbc.weighty = 100;

        gbc.fill = GridBagConstraints.HORIZONTAL;

        gbc.insets = new Insets(0,0,0,0);

        gridBagLayout.setConstraints(layoutList, gbc);

        add(layoutList);

    } 





    public static void main(String args[]) { 

        ListDemo myDemo = new ListDemo();



         // Allow the program to be shut down by closing the

         // main window.

         myDemo.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                 System.exit(0);

             } 

        } );



        myDemo.pack();

        myDemo.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtMediaTrackerFONTTT"></A><TT>java.awt.MediaTracker</TT></H3>
<P><TT>public class MediaTracker extends Object implements Serializable</TT></P>

<P>The MediaTracker class is a utility class provided to track the loading progress
of Image objects. When an Image object is loaded from a file, a reference to the
object is established. However, the Image is not actually loaded in until needed.
Deferment of Image loading occurs to save time, but it also means a slowdown when
the images are <BR>
actually ready.</P>

<P>Using the MediaTracker class, it is possible to force the loading of a series
of Image objects.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.MediaTracker</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int ABORTED</TT></TD>
		<TD WIDTH="295">Flag indicating that image loading was aborted</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int COMPLETE</TT></TD>
		<TD WIDTH="295">Flag indicating that image loading is complete</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int ERRORED</TT></TD>
		<TD WIDTH="295">Flag indicating that image loading received an error</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int LOADING</TT></TD>
		<TD WIDTH="295">Flag indicating that image loading is in progress</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addImage(Image, int)</TT></TD>
		<TD WIDTH="295">Adds the specified image to the <TT>MediaTracker</TT> at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addImage(Image, int, int, int)</TT></TD>
		<TD WIDTH="295">Adds a scaled version of the specified image to the <TT>MediaTracker</TT> at the
			specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean checkAll()</TT></TD>
		<TD WIDTH="295">Checks to see if all images being tracked have finished loading</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean checkAll(boolean)</TT></TD>
		<TD WIDTH="295">Checks to see if all images being tracked have finished loading; if the <TT>boolean</TT>
			parameter is set to true, all unloaded images will be loaded</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean checkID(int)</TT></TD>
		<TD WIDTH="295">Checks to see if the image(s) with the specified ID have finished loading</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean checkID(int, boolean)</TT></TD>
		<TD WIDTH="295">Checks to see if the image(s) with the specified ID have finished loading; If the
			<TT>boolean</TT> parameter is set to true, all unloaded image(s) will be loaded</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Object[] getErrorsAny()</TT></TD>
		<TD WIDTH="295">Obtains all <TT>Image</TT> objects that have generated an error-out while loading</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Object[] getErrorsID(int)</TT></TD>
		<TD WIDTH="295">Obtains all <TT>Image</TT> objects with the specified ID that have generated an error-out
			while loading</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isErrorAny()</TT></TD>
		<TD WIDTH="295">Returns true if any objects being tracked have generated an error</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isErrorID(int)</TT></TD>
		<TD WIDTH="295">Returns true if any objects with the specified ID have generated an error</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeImage(Image)</TT></TD>
		<TD WIDTH="295">Removes the specified image from the collection of images being tracked</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeImage(Image, int)</TT></TD>
		<TD WIDTH="295">Removes the specified image with the specified ID from the collection of images being
			tracked</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeImage(Image, int, int, int)</TT></TD>
		<TD WIDTH="295">Removes the specified image with the specified ID, width, and height from the collection
			of images being tracked</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int statusAll(boolean)</TT></TD>
		<TD WIDTH="295">Returns the bitwise <TT>OR</TT> of all status codes; if the <TT>boolean</TT> parameter
			is true, all unloaded objects will be loaded</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int statusID(int, boolean)</TT></TD>
		<TD WIDTH="295">Returns the bitwise <TT>OR</TT> of the status codes of all objects with the specified
			ID; if the <TT>boolean</TT> parameter is true, all unloaded objects will be loaded</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean waitForAll()throws InterruptedException</TT></TD>
		<TD WIDTH="295">Waits for all objects to load</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean waitForAll(long) throws InterruptedException</TT></TD>
		<TD WIDTH="295">Waits either for all objects to load or the amount of time specified as the <TT>long</TT>
			parameter (in milliseconds)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean waitForID(int) throws InterruptedException</TT></TD>
		<TD WIDTH="295">Waits for all objects with the specified ID to load</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean waitForID(int, long) throws InterruptedException</TT></TD>
		<TD WIDTH="295">Waits either for all objects with the specified ID to load or the amount of time
			specified as the<TT> long</TT> parameter (in milliseconds)</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtMenuFONTTT"></A><TT>java.awt.Menu</TT></H3>
<P><TT>public class Menu extends MenuItem implements MenuContainer</TT></P>

<P>The Menu class is used to create a pull-down menu. Used together with MenuBar
and MenuItem, you can create the set of menus seen at the top of most windows.</P>

<P>Because the Menu, MenuBar, and MenuItem classes work together, the coding example
for this class is included in the section on MenuItem.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Menu</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public MenuItem add(MenuItem)</TT></TD>
		<TD WIDTH="295">Adds the specified <TT>MenuItem</TT> to the end of the menu</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void add(String)</TT></TD>
		<TD WIDTH="295">Adds the specified string to the end of the menu</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addNotify()</TT></TD>
		<TD WIDTH="295">Creates the <TT>Menu</TT> object's peer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addSeparator()</TT></TD>
		<TD WIDTH="295">Adds a separator line to the end of the menu</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public MenuItem getItem(int)</TT></TD>
		<TD WIDTH="295">Obtains the <TT>MenuItem</TT> object at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getItemCount()</TT></TD>
		<TD WIDTH="295">Obtains a count of all items in the menu</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void insert(MenuItem, int)</TT></TD>
		<TD WIDTH="295">Inserts the specified <TT>MenuItem</TT> at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void insert(String, int)</TT></TD>
		<TD WIDTH="295">Inserts the specified <TT>MenuItem</TT> at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void insertSeparator(int)</TT></TD>
		<TD WIDTH="295">Inserts a separator line to the menu at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isTearOff()</TT></TD>
		<TD WIDTH="295">Returns true if this menu is a tear-off menu</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected String paramString()</TT></TD>
		<TD WIDTH="295">Obtains the parameter string for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void remove(int)</TT></TD>
		<TD WIDTH="295">Removes the item at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void remove(MenuComponent)</TT></TD>
		<TD WIDTH="295">Removes the specified <TT>MenuComponent</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeAll()</TT></TD>
		<TD WIDTH="295">Removes all items from the menu</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeNotify()</TT></TD>
		<TD WIDTH="295">Detaches the <TT>Menu</TT> object from its peer</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtMenuBarFONTTT"></A><TT>java.awt.MenuBar</TT></H3>
<P><TT>public class MenuBar extends MenuComponent implements MenuContainer</TT></P>

<P>The MenuBar class represents the physical menu bar that rests at the top of most
windows. Once a MenuBar object is ready for display, it can be placed on a frame
using the Frame.setMenuBar() method.</P>

<P>Because the Menu, MenuBar, and MenuItem classes work together, the coding example
for this class is included in the section on MenuItem.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.MenuBar</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods/Events</B>
		</TD>
		<TD WIDTH="295"><B>Description</B></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Menu add(Menu)</TT></TD>
		<TD WIDTH="295">Adds the specified menu to the <TT>MenuBar</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addNotify()</TT></TD>
		<TD WIDTH="295">Creates the <TT>MenuBar</TT>'s peer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void deleteShortcut(MenuShortcut)</TT></TD>
		<TD WIDTH="295">Removes the specified <TT>MenuShortcut</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Menu getHelpMenu()</TT></TD>
		<TD WIDTH="295">Obtains the Help menu, or null if none exists</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Menu getMenu(int)</TT></TD>
		<TD WIDTH="295">Obtains the <TT>Menu</TT> object at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getMenuCount()</TT></TD>
		<TD WIDTH="295">Obtains a count of all menus</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public MenuItem getShortcutMenuItem(MenuShortcut)</TT></TD>
		<TD WIDTH="295">Obtains the <TT>MenuItem</TT> associated with the specified <TT>MenuShortcut</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void remove(int)</TT></TD>
		<TD WIDTH="295">Removes the menu at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void remove(MenuComponent)</TT></TD>
		<TD WIDTH="295">Removes the specified <TT>MenuComponent</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeNotify()</TT></TD>
		<TD WIDTH="295">Detaches the <TT>MenuBar</TT> object from its peer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setHelpMenu(Menu)</TT></TD>
		<TD WIDTH="295">Sets the Help menu</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Enumeration shortcuts()</TT></TD>
		<TD WIDTH="295">Obtains a collection of all shortcuts</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtMenuComponentFONTTT"></A><TT>java.awt.MenuComponent</TT></H3>
<P><TT>public abstract class MenuComponent extends Object implements Serializable</TT></P>

<P>MenuComponent is the abstract base class of all menu-related components. Like
all other examples of abstract classes, there will obviously not be a code example
for this section.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.MenuComponent</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void dispatchEvent(AWTEvent)</TT></TD>
		<TD WIDTH="295">Used internally to send events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Font getFont()</TT></TD>
		<TD WIDTH="295">Obtains the font used to render the component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getName()</TT></TD>
		<TD WIDTH="295">Obtains the logical name for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public MenuContainer getParent()</TT></TD>
		<TD WIDTH="295">Obtains the parent component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected String paramString()</TT></TD>
		<TD WIDTH="295">Obtains a parameter string for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processEvent(AWTEvent)</TT></TD>
		<TD WIDTH="295">Used internally to send events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeNotify()</TT></TD>
		<TD WIDTH="295">Separates the component from its peer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setFont(Font)</TT></TD>
		<TD WIDTH="295">Sets the font used to render the component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setName(String)</TT></TD>
		<TD WIDTH="295">Set the logical name for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String toString()</TT></TD>
		<TD WIDTH="295">Obtains a <TT>String</TT> object representing the current state of this object</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtMenuItemFONTTT"></A><TT>java.awt.MenuItem</TT></H3>
<P><TT>public class MenuItem extends MenuComponent</TT></P>

<P>MenuItem represents a choice in a pull-down menu. A MenuItem object consists of
a logical name that is displayed in the pull-down menu, and an optional keyboard
shortcut.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.MenuItem</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addActionListener(ActionListener)</TT></TD>
		<TD WIDTH="295">Adds the specified<TT> ActionListener</TT> to the collection of listeners; an <TT>ActionListener</TT>
			is notified whenever the<TT> MenuItem</TT> is selected</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addNotify()</TT></TD>
		<TD WIDTH="295">Creates the component's peer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void deleteShortcut()</TT></TD>
		<TD WIDTH="295">Removes the shortcut from this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected final void disableEvents(long)</TT></TD>
		<TD WIDTH="295">Disables the events matching the specified event code</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected final void enableEvents(long)</TT></TD>
		<TD WIDTH="295">Enables the events matching the specified event code</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void getActionCommand()</TT></TD>
		<TD WIDTH="295">Obtains the action command associated with this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getLabel()</TT></TD>
		<TD WIDTH="295">Obtains the label used to render this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public MenuShortcut getShortcut()</TT></TD>
		<TD WIDTH="295">Obtains the menu shortcut associated with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isEnabled()</TT></TD>
		<TD WIDTH="295">Returns true if this component is currently enabled</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected String paramString()</TT></TD>
		<TD WIDTH="295">Obtains a parameter string representing the current state of this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processActionEvent(ActionEvent)</TT></TD>
		<TD WIDTH="295">Used internally for event management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processEvent(AWTEvent)</TT></TD>
		<TD WIDTH="295">Used internally for event management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeActionListener(ActionListener)</TT></TD>
		<TD WIDTH="295">Removes the specified<TT> ActionListener</TT> from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setActionCommand(String)</TT></TD>
		<TD WIDTH="295">Sets the action command associated with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setEnabled(boolean)</TT></TD>
		<TD WIDTH="295">Sets the enabled status of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setLabel(String)</TT></TD>
		<TD WIDTH="295">Sets the label displayed with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setShortcut(MenuShortcut)</TT></TD>
		<TD WIDTH="295">Sets the menu shortcut associated with this menu item</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.MenuItem</TT>: Example</H4>
<P>The <TT>Menu</TT> class is used to represent an item on a menu bar.


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;



public class MenuDemo extends Frame { 



    public MenuDemo() { 

        // Create a new Menu

        Menu demo = new Menu(&quot;Demo&quot;);



        // Create and add some MenuItems

        demo.add(new MenuItem(&quot;Demo Item&quot;));

        demo.add(new CheckboxMenuItem(&quot;Demo Checkbox Item&quot;));



        // Create a MenuBar

        MenuBar demoMB = new MenuBar();



        // Add the Menu to the MenuBar

        demoMB.add(demo);



        // Set the MenuBar

        setMenuBar(demoMB);

    } 





    public static void main(String args[]) { 

        MenuDemo myDemo = new MenuDemo();

        myDemo.setSize(200,200);



         // Allow the program to be shut down by closing the

         // main window.

         myDemo.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                 System.exit(0);

             } 

         } );



        myDemo.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtMenuShortcutFONTTT"></A><TT>java.awt.MenuShortcut</TT></H3>
<P><TT>public class MenuShortcut extends Object implements Serializable</TT></P>

<P>Modern UIs contain keyboard shortcuts for popular menu choices. For example, when
you save a document you don't want to have to move your hands off the keyboard, move
the mouse to the File menu, and choose Save. Instead, you expect to hit Ctrl+S (or
Command+S, or whatever your platform uses) and have your document saved instantly.</P>

<P>The class MenuShortcut is used in Java to associate a keyboard shortcut with a
MenuItem object.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.MenuShortcut</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean equals(MenuShortcut)</TT></TD>
		<TD WIDTH="295">Returns true if the two <TT>MenuShortcut</TT> objects represent the same keyboard
			accelerator</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean equals(Object)</TT></TD>
		<TD WIDTH="295">Returns true if the two <TT>MenuShortcut</TT> objects represent the same keyboard
			accelerator</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getKey()</TT></TD>
		<TD WIDTH="295">Obtains the key that one must press to activate this menu shortcut</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int hashCode()</TT></TD>
		<TD WIDTH="295">Obtains the hashcode for the <TT>MenuShortcut</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected String paramString()</TT></TD>
		<TD WIDTH="295">Obtains the parameter string for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String toString()</TT></TD>
		<TD WIDTH="295">Returns a <TT>String</TT> object representing the current state of this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean usesShiftModifier()</TT></TD>
		<TD WIDTH="295">Returns true if the Shift key must be pressed to active this shortcut</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.MenuShortcut</TT>: Example</H4>
<P>The <TT>MenuShortcut</TT> class is used to represent a keyboard accelerator for
a menu item.</P>

<P>The following example expands on the <TT>MenuItem</TT> example:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;



public class MenuDemo extends Frame { 



    public MenuDemo() { 

        // Create a new Menu

        Menu demo = new Menu(&quot;Demo&quot;);



        // Create a MenuShortcut

        MenuShortcut demoShortcut = new MenuShortcut('q');



        // Create and add some MenuItems

        demo.add(new MenuItem(&quot;Demo Item&quot;));

        demo.add(new CheckboxMenuItem(&quot;Demo Checkbox Item&quot;));

        demo.add(new MenuItem(&quot;Quit&quot;, demoShortcut));



        // Create a MenuBar

        MenuBar demoMB = new MenuBar();



        // Add the Menu to the MenuBar

        demoMB.add(demo);



        // Set the MenuBar

        setMenuBar(demoMB);

    } 





    public static void main(String args[]) { 

        MenuDemo myDemo = new MenuDemo();



         // Allow the program to be shut down by closing the

         // main window.

         myDemo.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                 System.exit(0);

             } 

         } );



        myDemo.setSize(200,200);

        myDemo.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtPanelFONTTT"></A><TT>java.awt.Panel</TT></H3>
<P><TT>public class Panel extends Container</TT></P>

<P>The Panel class is a peer-based container class.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Panel</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addNotify()</TT></TD>
		<TD WIDTH="295">Creates the component's peer</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtPointFONTTT"></A><TT>java.awt.Point</TT></H3>
<P><TT>public class Point extends Object implements Serializable</TT></P>

<P>The Point class represents a physical location in a 2D coordinate space.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Point</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int x</TT></TD>
		<TD WIDTH="295">The x coordinate of the point</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int y</TT></TD>
		<TD WIDTH="295">The y coordinate of the point</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean equals(Object)</TT></TD>
		<TD WIDTH="295">Returns true if the two <TT>Point</TT> objects have the same values for their x and
			y variables</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Point getLocation()</TT></TD>
		<TD WIDTH="295">Returns a copy of the current object; this method is included for completeness</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int hashCode()</TT></TD>
		<TD WIDTH="295">Obtains a hash code for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void move(int, int)</TT></TD>
		<TD WIDTH="295">Moves the point to the specified location</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setLocation(float, float)</TT></TD>
		<TD WIDTH="295">Sets the location of the point</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setLocation(int, int)</TT></TD>
		<TD WIDTH="295">Sets the location of the point</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setLocation(Point)</TT></TD>
		<TD WIDTH="295">Sets the location of the point</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String toString()</TT></TD>
		<TD WIDTH="295">Obtains a <TT>String</TT> object representing the state of the current object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void translate(int, int)</TT></TD>
		<TD WIDTH="295">Translates the point using the specified deltas</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtPolygonFONTTT"></A><TT>java.awt.Polygon</TT></H3>
<P><TT>public class Polygon extends Object implements Shape, Serializable</TT></P>

<P>The Polygon class represents the physical coordinates of a polygon.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Polygon</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected Rectangle bounds</TT></TD>
		<TD WIDTH="295">A bounding box for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int npoints</TT></TD>
		<TD WIDTH="295">Number of points specified</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int[] xpoints</TT></TD>
		<TD WIDTH="295">Array of x points</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int[] ypoints</TT></TD>
		<TD WIDTH="295">Array of y points</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addPoint(int, int)</TT></TD>
		<TD WIDTH="295">Adds a point to the polygon</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean contains</TT></TD>
		<TD WIDTH="295">Returns true if the specified</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>(double, double, double, double)</TT></TD>
		<TD WIDTH="295">rectangular region is wholly within the polygon</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean contains(double, double)</TT></TD>
		<TD WIDTH="295">Returns true if the polygon contains the specified point</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean contains(int, int)</TT></TD>
		<TD WIDTH="295">Returns true if the polygon contains the specified point</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean contains(Point)</TT></TD>
		<TD WIDTH="295">Returns true if the polygon contains the specified point</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean contains(Point2D)</TT></TD>
		<TD WIDTH="295">Returns true if the polygon contains the specified point</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean contains(Rectangle2D)</TT></TD>
		<TD WIDTH="295">Returns true if the specified rectangle is wholly within the polygon</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Rectangle getBounds()</TT></TD>
		<TD WIDTH="295">Returns the bounding box for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Rectangle2D getBounds2D()</TT></TD>
		<TD WIDTH="295">Returns the high precision bounding box for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public PathIterator getPathIterator(AffineTransform, double)</TT></TD>
		<TD WIDTH="295">Obtains an iterator object that iterates along the boundary of the shape</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public PathIterator getPathIterator(AffineTransform)</TT></TD>
		<TD WIDTH="295">Obtains an iterator object that iterates along the boundary of the shape</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean intersects(double, double, double, double)</TT></TD>
		<TD WIDTH="295">Returns true if the interior of the polygon intersects the interior of the specified
			rectangular region</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean intersects(Rectangle2D)</TT></TD>
		<TD WIDTH="295">Returns true if the interior of the polygon intersects the interior of the specified
			rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void translate(int, int)</TT></TD>
		<TD WIDTH="295">Translates all points using the specified deltas</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Polygon</TT>: Example</H4>
<P>The <TT>Polygon</TT> class is used to represent any form of polygon.


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;





public class PolygonDemo extends Frame { 

    private Polygon triangle;



    public PolygonDemo() { 

        // mark out the xpoints and ypoints

        int x[] = { 0, 100, 50} ;

        int y[] = { 0, 0, 100} ;



        // Create a triangle polygon

        triangle = new Polygon(x, y, 3);

    } 



    public void paint(Graphics g) { 

        g.setColor(Color.pink);

        g.fillPolygon(triangle);

    } 





    public static void main(String args[]) { 

        PolygonDemo myDemo = new PolygonDemo();

        myDemo.setSize(200,200);



         // Allow the program to be shut down by closing the

         // main window.

         myDemo.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                 System.exit(0);

             } 

         } );



        myDemo.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtPopupMenuFONTTT"></A><TT>java.awt.PopupMenu</TT></H3>
<P><TT>public class PopupMenu extends Menu</TT></P>

<P>The PopupMenu class, new to the JDK 1.1, represents a menu that can be dynamically
popped up from any location within a component. It is useful for displaying context-sensitive
speed menus.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.PopupMenu</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addNotify()</TT></TD>
		<TD WIDTH="295">Creates the component's peer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void show(Component, int, int)</TT></TD>
		<TD WIDTH="295">Displays the menu at the specified point</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.PopupMenu</TT>: Example</H4>
<P>A <TT>PopupMenu</TT> object can be spawned from any location on the screen:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;





public class PopupMenuDemo extends Frame implements ActionListener { 

    private PopupMenu   myMenu;

    private Button      launchButton;





    public PopupMenuDemo() { 

        myMenu = new PopupMenu();

        myMenu.add(&quot;Demo Option 1&quot;);

        myMenu.add(&quot;Demo Option 2&quot;);

        myMenu.add(&quot;Demo Option 3&quot;);



        launchButton = new Button(&quot;Launch Menu!&quot;);

        launchButton.addActionListener(this);

        setLayout(new FlowLayout(10));

        add(launchButton);

        add(myMenu);

    } 



    // Called when the launch button is clicked

    public void actionPerformed(ActionEvent ae) { 

        myMenu.show(launchButton, 10, 10);

    } 





    public static void main(String args[]) { 

        PopupMenuDemo myDemo = new PopupMenuDemo();



         // Allow the program to be shut down by closing the

         // main window.

         myDemo.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                 System.exit(0);

             } 

         } );



        myDemo.pack();

        myDemo.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtPrintJobFONTTT"></A><TT>java.awt.PrintJob</TT></H3>
<P><TT>public abstract class PrintJob extends Object</TT></P>

<P>The PrintJob class initiates and executes a print job through native printing
mechanisms. An instance of an appropriate subclass of PrintJob instance is obtained
through the method Toolkit.getPrintJob(). To actually render the print image, you
will obtain a PrintJob object, use its getGraphics() method, and then perform all
drawing in the returned Graphics object.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.PrintJob</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract void end()</TT></TD>
		<TD WIDTH="295">Ends the print job</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void finalize()</TT></TD>
		<TD WIDTH="295">Releases resources during garbage collection to prevent a memory leak</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract Graphics getGraphics()</TT></TD>
		<TD WIDTH="295">Obtains the <TT>Graphics</TT> object associated with the print output device</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract Dimension getPageDimension()</TT></TD>
		<TD WIDTH="295">Obtains the page dimensions; is not currently accurate</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract int getPageResolution()</TT></TD>
		<TD WIDTH="295">Obtains the page resolutions</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract boolean lastPageFirst()</TT></TD>
		<TD WIDTH="295">Returns true if the last page will be printed first</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.PrintJob</TT>: Example</H4>
<P>The <TT>PrintJob</TT> class is used when an item needs to be sent to the printer:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;





public class PrintJobDemo extends Frame implements ActionListener { 

    private Panel printable;



    public PrintJobDemo() { 

        // Add some components to the screen

        printable = new Panel();

        printable.setLayout(new GridLayout(2,2,10,10));

        add(new Button(&quot;Print&quot;));

        add(new Button(&quot;Test&quot;));

        add(new Label(&quot;java.awt.&quot;));

        add(new Label(&quot;PrintJob&quot;));



        setLayout(new FlowLayout(10));

        add(printable);

        Button printButton = new Button(&quot;Print Above&quot;);

        add(printButton);

        printButton.addActionListener(this);

    } 





    public void actionPerformed(ActionEvent ae) { 

        // get a PrintJob object

        PrintJob pj = getToolkit().getPrintJob(this, &quot;Luke&quot;, null);



        // obtain its graphics context

        Graphics printGraphics = pj.getGraphics();



        // draw to the graphics context

        printable.printAll(printGraphics);



        // finish up

        pj.end();

        pj.finalize();



    } 





    public static void main(String args[]) { 

        PrintJobDemo myDemo = new PrintJobDemo();



         // Allow the program to be shut down by closing the

         // main window.

         myDemo.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                 System.exit(0);

             } 

         } );



        myDemo.pack();

        myDemo.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtRectangleFONTTT"></A><TT>java.awt.Rectangle</TT></H3>
<P><TT>public class Rectangle extends Rectangle2D implements Shape, Serializable</TT></P>

<P>The Rectangle object encapsulates information that represents a physical rectangle.
This information includes height, width, x-position, and y-position.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Rectangle</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int height</TT></TD>
		<TD WIDTH="295">Height of the rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int width</TT></TD>
		<TD WIDTH="295">Width of the rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int x</TT></TD>
		<TD WIDTH="295">x-position of the rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int y</TT></TD>
		<TD WIDTH="295">y-position of the rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void add(int, int)</TT></TD>
		<TD WIDTH="295">Adds the specified point to the rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void add(Point)</TT></TD>
		<TD WIDTH="295">Adds the specified point to the rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void add(Rectangle)</TT></TD>
		<TD WIDTH="295">Adds the specified rectangle to the rectangle; after this method executes, the rectangle
			will be the union of the <TT>Rectangle</TT> parameter and the original rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean contains(int, int, int, int)</TT></TD>
		<TD WIDTH="295">Returns true if the specified rectangular region is wholly contained in this rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean contains(int, int)</TT></TD>
		<TD WIDTH="295">Returns true if the rectangle contains the specified point</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean contains(Point)</TT></TD>
		<TD WIDTH="295">Returns true if the rectangle contains the specified point</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean contains(int, int, int, int)</TT></TD>
		<TD WIDTH="295">Returns true if the specified rectangle is wholly contained in this rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Rectangle2D createIntersection(Rectangle2D)</TT></TD>
		<TD WIDTH="295">Obtains a new rectangle that is the intersection of the specified rectangle with
			this rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Rectangle2D createUnion(Rectangle2D)</TT></TD>
		<TD WIDTH="295">Obtains a new rectangle that is the smallest rectangle that will contain the specified
			rectangle and this rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean equals(Object)</TT></TD>
		<TD WIDTH="295">Returns true if both rectangles have the same values for all fields</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Rectangle getBounds()</TT></TD>
		<TD WIDTH="295">Returns a copy of the current object; provided for consistency</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public double getHeight()</TT></TD>
		<TD WIDTH="295">Obtains the height of this rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Point getLocation()</TT></TD>
		<TD WIDTH="295">Obtains the location of the top left corner of this rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getSize()</TT></TD>
		<TD WIDTH="295">Obtains the dimensions of this rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public double getWidth()</TT></TD>
		<TD WIDTH="295">Obtains the width of this rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void grow(int, int)</TT></TD>
		<TD WIDTH="295">Grows the rectangle by the specified deltas</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void hashCode()</TT></TD>
		<TD WIDTH="295">Obtains the hash code for the rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Rectangle intersection(Rectangle)</TT></TD>
		<TD WIDTH="295">Obtains the intersection of the current rectangle and the one specified as a parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean intersects(Rectangle)</TT></TD>
		<TD WIDTH="295">Returns true if the current rectangle and the rectangle specified as a parameter
			intersect</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isEmpty()</TT></TD>
		<TD WIDTH="295">Returns true if this rectangle is empty, where &quot;empty&quot; is defined as having
			a width or height less than or equal to zero</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int outcode(double, double)</TT></TD>
		<TD WIDTH="295">Indicates where the specified coordinates lie with respect to this rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setBounds(int, int, int, int)</TT></TD>
		<TD WIDTH="295">Sets the bounding box for this rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setBounds(Rectangle)</TT></TD>
		<TD WIDTH="295">Sets the bounding box for this rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setLocation(int, int)</TT></TD>
		<TD WIDTH="295">Sets the location of the top left corner of this rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setLocation(Point)</TT></TD>
		<TD WIDTH="295">Sets the location of the top left corner of this rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setSize(Dimension)</TT></TD>
		<TD WIDTH="295">Sets the size of this rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setSize(int, int)</TT></TD>
		<TD WIDTH="295">Sets the size of this rectangle</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String toString()</TT></TD>
		<TD WIDTH="295">Obtains a <TT>String</TT> object that represents the current state of this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Rectangle translate(int, int)</TT></TD>
		<TD WIDTH="295">Translates all points of the rectangle using the specified deltas</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Rectangle union(Rectangle)</TT></TD>
		<TD WIDTH="295">Obtains the union of the current rectangle and the one specified as a parameter;
			the union is defined as the smallest rectangle that will contain both the specified
			rectangle and this rectangle</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtScrollPaneFONTTT"></A><TT>java.awt.ScrollPane</TT></H3>
<P><TT>public class ScrollPane extends Container</TT></P>

<P>The <TT>ScrollPane</TT> class, new to the JDK 1.1, is a container class with the
added bonus of automatic scrolling for a single child component. A <TT>ScrollPane</TT>
object can optionally display horizontal and vertical scrollbars. If it is not large
enough to display its component, it will be logically shifted automatically when
the user interacts with the scrollbars. The most effective use of <TT>ScrollPane</TT>
is to make its single component a <TT>Container</TT> object that can, in turn, contain
other components. In that way, you can effectively have multiple components inside
the <TT>ScrollPane</TT>.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.ScrollPane</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int SROLLBARS_ALWAYS</TT></TD>
		<TD WIDTH="295">Constant indicating that scrollbars should always appear</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int SCROLLBARS_AS_NEEDED</TT></TD>
		<TD WIDTH="295">Constant indicating that scrollbars should appear only when required</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int SCROLLBARS_NEVER</TT></TD>
		<TD WIDTH="295">Constant indicating that scrollbars should never appear</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void addImpl(Component, Object, int)</TT></TD>
		<TD WIDTH="295">Adds the specified component to the container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addNotify()</TT></TD>
		<TD WIDTH="295">Creates the component's peer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void doLayout()</TT></TD>
		<TD WIDTH="295">Performs a layout on the container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Adjustable getHAdjustable()</TT></TD>
		<TD WIDTH="295">Obtains the active state of the horizontal scrollbar, or null if the scrollbar policy
			is never</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getHScrollbarHeight()</TT></TD>
		<TD WIDTH="295">Obtains the height potentially held by the horizontal scrollbar</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getScrollbarDisplayPolicy()</TT></TD>
		<TD WIDTH="295">Obtains the scrollbar display policy</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Point getScrollPosition()</TT></TD>
		<TD WIDTH="295">Obtains the current relative position of the container's contents</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Adjustable getVAdjustable()</TT></TD>
		<TD WIDTH="295">Obtains the active state of the vertical scrollbar, or null if the scrollbar policy
			is never</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getViewportSize()</TT></TD>
		<TD WIDTH="295">Obtains the current size of the viewport</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getVScrollbarWidth()</TT></TD>
		<TD WIDTH="295">Obtains the width potentially held by the vertical scrollbar</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected String paramString()</TT></TD>
		<TD WIDTH="295">Obtains the parameter string for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void printComponents(Graphics)</TT></TD>
		<TD WIDTH="295">Prints the child components</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setLayout(LayoutManager)</TT></TD>
		<TD WIDTH="295">Sets the internal layout manager</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setScrollPosition(int, int)</TT></TD>
		<TD WIDTH="295">Sets the current scroll position</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setScrollPosition(Point)</TT></TD>
		<TD WIDTH="295">Sets the current scroll position</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtTextAreaFONTTT"></A><TT>java.awt.TextArea</TT></H3>
<P><TT>public class TextArea extends TextComponent</TT></P>

<P>The TextArea class represents a multiline area where text may be entered. Although
scrolling of the text is supported, stylized text (multifont, multicolor) is not.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.TextArea</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD COLSPAN="2">
			<P ALIGN="CENTER"><B>Fields</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int SCROLLBARS_BOTH</TT></TD>
		<TD WIDTH="295">Constant specifying that scrollbars should appear along the horizontal and vertical
			axis</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int SCROLLBARS_HORIZONTAL_ONLY</TT></TD>
		<TD WIDTH="295">Constant specifying that scrollbars should appear along the horizontal axis</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int SCROLLBARS_NONE</TT></TD>
		<TD WIDTH="295">Constant specifying that scrollbars should not appear along either axis</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int SCROLLBARS_VERTICAL_ONLY</TT></TD>
		<TD WIDTH="295">Constant specifying that scrollbars should appear along the vertical axes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD COLSPAN="2">
			<P ALIGN="CENTER"><B>Methods</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addNotify()</TT></TD>
		<TD WIDTH="295">Creates the component's peer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void append(String)</TT></TD>
		<TD WIDTH="295">Adds the contents of the <TT>String</TT> parameter to the text area</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getColumns()</TT></TD>
		<TD WIDTH="295">Obtains the number of visible columns</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getMinimumSize()</TT></TD>
		<TD WIDTH="295">Obtains the minimum size needed to display this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getMinimumSize(int, int)</TT></TD>
		<TD WIDTH="295">Obtains the minimum size needed to display a text area with the specified number
			of rows and columns</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getPreferredSize()</TT></TD>
		<TD WIDTH="295">Obtains the preferred size of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getPreferredSize(int, int)</TT></TD>
		<TD WIDTH="295">Obtains the preferred size of a text area with the specified number of rows and columns</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getRows()</TT></TD>
		<TD WIDTH="295">Obtains the current number of visible rows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getScrollbarVisibility()</TT></TD>
		<TD WIDTH="295">Obtains the current scrollbar visibility</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void insert(String, int)</TT></TD>
		<TD WIDTH="295">Inserts the specified string at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected String paramString()</TT></TD>
		<TD WIDTH="295">Obtains the parameter string for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void replaceRange(String, int, int)</TT></TD>
		<TD WIDTH="295">Replaces the text between the specified indices with the contents of the string parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setColumns(int)</TT></TD>
		<TD WIDTH="295">Sets the current number of visible columns</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setRows(int)</TT></TD>
		<TD WIDTH="295">Sets the current number of visible rows</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.TextArea</TT>: Example</H4>
<P>The <TT>TextArea</TT> class is used to represent a multiline text entry field:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;



public class TextAreaDemo extends Frame { 



    public TextAreaDemo() { 

        setLayout(new BorderLayout());



        // Create and add a text area

        add(&quot;Center&quot;, new TextArea(&quot;Demo Text Area&quot;));

    } 



    public static void main(String args[]) { 

        TextAreaDemo myDemo = new TextAreaDemo();



         // Allow the program to be shut down by closing the

         // main window.

         myDemo.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                 System.exit(0);

             } 

         } );



        myDemo.setSize(200,200);

        myDemo.show();

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtTextComponentFONTTT"></A><TT>java.awt.TextComponent</TT></H3>
<P><TT>public class TextComponent extends Component</TT></P>

<P>The TextComponent class represents a UI component that contains some potentially
editable text. Usually you will not work directly with this class, but instead will
focus on TextArea and TextField.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.TextComponent</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected transient TextListener textListener</TT></TD>
		<TD WIDTH="295">Reference to <TT>TextListener</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addTextListener(TextListener)</TT></TD>
		<TD WIDTH="295">Adds a <TT>TextListener</TT> to the collection of listeners; a<TT> TextListener</TT>
			is notified whenever the current text value changes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getCaretPosition()</TT></TD>
		<TD WIDTH="295">Obtains the current position of the caret</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getSelectedText()</TT></TD>
		<TD WIDTH="295">Obtains the currently selected text</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getSelectionEnd()</TT></TD>
		<TD WIDTH="295">Obtains the index of the last selected character</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getSelectionStart()</TT></TD>
		<TD WIDTH="295">Obtains the index of the first selected character</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getText()</TT></TD>
		<TD WIDTH="295">Obtains the contents of the text component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isEditable()</TT></TD>
		<TD WIDTH="295">Returns true if this component is editable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected String paramString()</TT></TD>
		<TD WIDTH="295">Obtains a parameter string for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processEvent(AWTEvent)</TT></TD>
		<TD WIDTH="295">Used internally for event management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processTextEvent(TextEvent)</TT></TD>
		<TD WIDTH="295">Used internally for event management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeNotify()</TT></TD>
		<TD WIDTH="295">Separates this component from its peer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void</TT></TD>
		<TD WIDTH="295">Removes the specified</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>removeTextListener(TextListener)</TT></TD>
		<TD WIDTH="295"><TT>TextListener</TT> from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void select(int, int)</TT></TD>
		<TD WIDTH="295">Selects the text between the two indices</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void selectAll()</TT></TD>
		<TD WIDTH="295">Selects all the text</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setCaretPosition(int)</TT></TD>
		<TD WIDTH="295">Sets the current caret position</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setEditable(boolean)</TT></TD>
		<TD WIDTH="295">Sets the current editable status</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setSelectionEnd(int)</TT></TD>
		<TD WIDTH="295">Sets the end of the text selection</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setSelectionStart(int)</TT></TD>
		<TD WIDTH="295">Sets the beginning of the text selection</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setText(String)</TT></TD>
		<TD WIDTH="295">Sets the contents of the text component</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtTextFieldFONTTT"></A><TT>java.awt.TextField</TT></H3>
<P><TT>public class TextField extends TextComponent</TT></P>

<P>The TextField class represents a potentially editable one-line text component.
It is <BR>
usually used for creating forms and other screens that require creation of variable/data
association.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.TextField</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addActionListener(ActionListener)</TT></TD>
		<TD WIDTH="295">Adds an <TT>ActionListener</TT> to the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addNotify()</TT></TD>
		<TD WIDTH="295">Creates this component's peer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean echoCharIsSet()</TT></TD>
		<TD WIDTH="295">Returns true if there is currently an echo character set</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getColumns()</TT></TD>
		<TD WIDTH="295">Obtains the number of visible columns</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public char getEchoChar()</TT></TD>
		<TD WIDTH="295">Obtains the echo character</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getMinimumSize()</TT></TD>
		<TD WIDTH="295">Obtains the minimum size this component can take up</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getMinimumSize(int)</TT></TD>
		<TD WIDTH="295">Obtains the minimum size for a component with the specified number of visible columns</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getPreferredSize()</TT></TD>
		<TD WIDTH="295">Obtains the preferred size for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getPreferredSize(int)</TT></TD>
		<TD WIDTH="295">Obtains the preferred size for a component with the specified number of visible columns</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected String paramString()</TT></TD>
		<TD WIDTH="295">Obtains the parameter string for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processActionEvent(ActionEvent)</TT></TD>
		<TD WIDTH="295">Used internally for event management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processEvent(AWTEvent)</TT></TD>
		<TD WIDTH="295">Used internally for event management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeActionListener(ActionListener)</TT></TD>
		<TD WIDTH="295">Removes the specified<TT> ActionListener</TT> from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setColumns(int)</TT></TD>
		<TD WIDTH="295">Sets the current number of visible columns</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setEchoChar(char)</TT></TD>
		<TD WIDTH="295">Sets an echo character</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.TextField</TT>: Example</H4>
<P>The <TT>TextField</TT> class is used to represent a single-line text entry field:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;



public class TextFieldDemo extends Frame { 



    public TextFieldDemo() { 

        setLayout(new BorderLayout());



        // Create and add a text area

        add(&quot;Center&quot;, new TextField(&quot;Demo Text Area&quot;));

    } 



    public static void main(String args[]) { 

        TextFieldDemo myDemo = new TextFieldDemo();



         // Allow the program to be shut down by closing the

         // main window.

         myDemo.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                 System.exit(0);

             } 

         } );



        myDemo.pack();

        myDemo.show();

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaawtToolkitFONTTT"></A><TT>java.awt.Toolkit</TT></H3>
<P><TT>public abstract class Toolkit extends Object</TT></P>

<P>The Toolkit is used by the AWT to obtain UI peers and other information associated
with the native system. It is an abstract class. An instance of an appropriate subclass
is obtained using the Component.getToolkit() method. Although there is a chance that
your development efforts will require many of the Toolkit methods, usually you will
only use beep(), getFontList(), sync(), getPrintJob(), and getSystemClipboard().</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>java.awt.Toolkit</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addProperteyChangeListener(String, PropertyChangeListener)</TT></TD>
		<TD WIDTH="295">Adds the specified property change listener to the group of listeners for the named
			property</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract beep()</TT></TD>
		<TD WIDTH="295">Causes a system beep</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract int checkImage(Image, int, int, ImageObserver)</TT></TD>
		<TD WIDTH="295">Checks the loading status of the specified <TT>Image</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected abstract ButtonPeer createButton(Button)</TT></TD>
		<TD WIDTH="295">Creates a <TT>ButtonPeer</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected abstract CanvasPeer createCanvas(Canvas)</TT></TD>
		<TD WIDTH="295">Creates a <TT>CanvasPeer</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected abstract CheckboxPeer createCheckbox(Checkbox)</TT></TD>
		<TD WIDTH="295">Creates a <TT>CheckboxPeer</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected abstract CheckboxMenuItemPeer createCheckboxMenuItem(CheckboxMenuItem)</TT></TD>
		<TD WIDTH="295">Creates a<TT> CheckboxMenuItemPeer</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected abstract ChoicePeer createChoice(Choice)</TT></TD>
		<TD WIDTH="295">Creates a <TT>ChoicePeer</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected abstract ComponentPeer createComponent(Component)</TT></TD>
		<TD WIDTH="295">Creates a <TT>ComponentPeer</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected abstract DialogPeer createDialog(Dialog)</TT></TD>
		<TD WIDTH="295">Creates a <TT>DialogPeer</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public DragGestureRecognizer createDragGestureRecognizer(Class, DragSource, Component,
			DragGestureListener)</TT></TD>
		<TD WIDTH="295">Creates a<TT> DragGestureListener</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract DragSourceContextPeer createDragSourceContextPeer(DragGestureEvent)</TT></TD>
		<TD WIDTH="295">Creates a<TT> DragSourceContextPeer</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected abstract FileDialogPeer createFileDialog(FileDialog)</TT></TD>
		<TD WIDTH="295">Creates a <TT>FileDialogPeer</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected abstract FramePeer createFrame(Frame)</TT></TD>
		<TD WIDTH="295">Creates a<TT> FramePeer</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract Image createImage(byte[])</TT></TD>
		<TD WIDTH="295">Creates a new <TT>Image</TT> object using the source bytes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Image createImage(byte[], int, int)</TT></TD>
		<TD WIDTH="295">Creates a new <TT>Image</TT> object using the source bytes, and takes into account
			the specified offset/image length</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract Image createImage(ImageProducer)</TT></TD>
		<TD WIDTH="295">Creates a new <TT>Image</TT> object using the image producer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected abstract LabelPeer createLabel(Label)</TT></TD>
		<TD WIDTH="295">Creates a <TT>LabelPeer</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected abstract ListPeer createList(List)</TT></TD>
		<TD WIDTH="295">Creates a<TT> ListPeer</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected abstract MenuPeer createMenu(Menu)</TT></TD>
		<TD WIDTH="295">Creates a <TT>MenuPeer</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected abstract MenuBarPeer createMenuBar(MenuBar)</TT></TD>
		<TD WIDTH="295">Creates a <TT>MenuBarPeer</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected abstract</TT> <TT>MenuItemPeer createMenuItem(MenuItem)</TT></TD>
		<TD WIDTH="295">Creates a MenuItemPeer object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected abstract PanelPeer createPanel(Panel)</TT></TD>
		<TD WIDTH="295">Creates a <TT>PanelPeer</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected abstract PopupMenuPeer createPopupMenu(PopupMenu)</TT></TD>
		<TD WIDTH="295">Creates a <TT>PopupMenuPeer</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected abstract ScrollBarPeer createScrollbar(Scrollbar)</TT></TD>
		<TD WIDTH="295">Creates a <TT>ScrollBarPeer</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected abstract ScrollPanePeer createScrollPane(ScrollPane)</TT></TD>
		<TD WIDTH="295">Creates a <TT>ScrollPanePeer</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected abstract TextAreaPeer createTextArea(TextArea)</TT></TD>
		<TD WIDTH="295">Creates a <TT>TextAreaPeer</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected abstract TextFieldPeer createTextField(TextField)</TT></TD>
		<TD WIDTH="295">Creates a <TT>TextFieldPeer</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected abstract WindowPeer createWindow(Window)</TT></TD>
		<TD WIDTH="295">Creates a<TT> WindowPeer</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getBestCursorSize(int, int)</TT></TD>
		<TD WIDTH="295">Obtains the supported cursor size that is closes to the desired sizes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract ColorModel getColorModel()</TT></TD>
		<TD WIDTH="295">Obtains the color model for this toolkit's screen</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static Toolkit getDefaultToolkit()</TT></TD>
		<TD WIDTH="295">Obtains the default <TT>Toolkit</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String[] getFontList()</TT></TD>
		<TD WIDTH="295">Obtains an array of all font names (deprecated)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public FontMetrics getFontMetrics(Font)</TT></TD>
		<TD WIDTH="295">Obtains the <TT>FontMetrics</TT> object for the specified font (deprecated)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected abstract FontPeer getFontPeer(String, int)</TT></TD>
		<TD WIDTH="295">Obtains the requested<TT> FontPeer</TT> object(deprecated)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract Image getImage(String)</TT></TD>
		<TD WIDTH="295">Obtains the image from the file specified as a parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract Image getImage(URL)</TT></TD>
		<TD WIDTH="295">Obtains the image from the URL specified as a parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getMaximumCursurColors()</TT></TD>
		<TD WIDTH="295">Obtains the maximum number of colors the toolit supports</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getMenuShortcutKeyMask()</TT></TD>
		<TD WIDTH="295">Determines the system dependent modifier key for menu shortcuts (Control, Command,
			and so on)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected static Container getNativeContainer(Component)</TT></TD>
		<TD WIDTH="295">Obtains a native<TT> Container</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract PrintJob getPrintJob(Frame, String, Properties)</TT></TD>
		<TD WIDTH="295">Obtains a <TT>PrintJob</TT> object and begins a dialog with the printer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static String getProperty(String, String)</TT></TD>
		<TD WIDTH="295">Obtains the property with the specified key and default value</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract int getScreenResolution()</TT></TD>
		<TD WIDTH="295">Obtains the screen resolution</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract Dimension getScreenSize()</TT></TD>
		<TD WIDTH="295">Obtains the screen size</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public abstract Clipboard getSystemClipboard()</TT></TD>
		<TD WIDTH="295">Obtains the system clipboard</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public final EventQueue getSystemEventQueue()</TT></TD>
		<TD WIDTH="295">Obtains the system event queue</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected abstract EventQueue getSystemEventQueueImpl()</TT></TD>
		<TD WIDTH="295">Obtains the system event queue</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void initializeDesktopProperties()</TT></TD>
		<TD WIDTH="295">Initialize the desktop properties</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected Object lazilyLoadDesktopProperty(String)</TT></TD>
		<TD WIDTH="295">Evaluate desktop property values</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void loadSystemColors(int[])</TT></TD>
		<TD WIDTH="295">Fills the array with the current system color values</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void prepareImage</TT></TD>
		<TD WIDTH="295">Prepares the specified</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>(Image, int, int, ImageObserver)</TT></TD>
		<TD WIDTH="295"><TT>Image</TT> object for display</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removePropertyChangeListener(String, PropertyChangeListener)</TT></TD>
		<TD WIDTH="295">Removes the specified property change listener from the group of listeners for the
			specified property</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected final void setDesktopProperty(String, Object)</TT></TD>
		<TD WIDTH="295">Sets the named property to the specified value and fires a property change event</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void sync()</TT></TD>
		<TD WIDTH="295">Synchronizes the graphics state of this object</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="package.gif" WIDTH="62" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H2><A NAME="TTFONTSIZEjavaxswingFONTTT"></A><TT>javax.swing</TT></H2>
<P>The <TT>Swing</TT> class library (part of the Java Foundation Class library) from
JavaSoft is an attempt to produce an all-Java windowing toolkit. As you will remember
from the previous section on <TT>java.awt</TT>, the Abstract Windowing Toolkit (AWT)
is JavaSoft's original approach to a windowing library and uses native code. In a
nutshell, almost every AWT class is paired with a native class that takes care of
drawing the UI widget on the screen. The fact that the native library draws to the
screen gives each Java application the look and feel of the native platform that
it is running under.</P>

<P>Applications produced with the <TT>Swing</TT> classes also maintain the native
look and feel of the platform they are run under, but this is achieved through something
called a <I>pluggable look-and-feel</I>. All <TT>Swing</TT> components are designed
according to the Model-View-Controller (MVC) pattern, and each component provides
a unique view for each platform it is run under. Taking this further, it is also
possible to design custom views for use in producing interesting UIs.</P>

<P>As you examine the classes in the following table, you will note that in addition
to providing a 100%-Java windowing toolkit, a series of new classes have been provided.
With the 1.02 release of the JDK, JavaSoft provided only a bare minimum of the UI
classes required by most applications. With the <TT>javax.swing</TT> classes, this
is no longer the case. For example, the <TT>javax.swing</TT> package provides classes
for creating combo boxes and color pickers.</P>

<P><IMG SRC="package.gif" WIDTH="62" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingFONTTTFONTSIZESummaryFONT"></A><TT>javax.swing</TT>:
Summary</H3>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Interfaces/Classes</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD COLSPAN="2">
			<P ALIGN="CENTER"><I>Interfaces</I>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Action</TT></I></TD>
		<TD WIDTH="295">Used to model an interaction between the user of an application and the application
			itself</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>BoundedRangeModel</TT></TD>
		<TD WIDTH="295">Model for a bounded range; useful for components like sliders and progress bars</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>ButtonModel</TT></I></TD>
		<TD WIDTH="295">The default model used by <TT>Button</TT> objects</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>CellEditor</TT></I></TD>
		<TD WIDTH="295">Interface implemented by cell editors</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>ComboBoxEditor</TT></I></TD>
		<TD WIDTH="295">Interface implemented by all combo box editors</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>ComboBoxModel</TT></I></TD>
		<TD WIDTH="295">The default model used by <TT>ComboBox</TT> objects</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>DesktopManager</TT></I></TD>
		<TD WIDTH="295">Class responsible for implementing look and feel behavior in the <TT>JDesktopPane</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Icon</TT></I></TD>
		<TD WIDTH="295">Implemented by classes that need to represent themselves as an onscreen icon</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>JComboBox.KeySelectionManager</TT></TD>
		<TD WIDTH="295">Models the key selections in a combo box</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>ListCellRenderer</TT></I></TD>
		<TD WIDTH="295">Implemented by classes that act as rubber stamps in a <TT>Jlist</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>ListModel</TT></I></TD>
		<TD WIDTH="295">The default model for <TT>JList</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>ListSelectionModel</TT></I></TD>
		<TD WIDTH="295">A model used to represent the state for any component that maintains an active list
			of values</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>MenuElement</TT></TD>
		<TD WIDTH="295">Implemented by classes that can be placed into a menu</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>MutableComboBoxModel</TT></TD>
		<TD WIDTH="295">A mutable version of the <TT>ComboBoxModel</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>Renderer</TT></TD>
		<TD WIDTH="295">Interface implemented by renderers</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Scrollable</TT></I></TD>
		<TD WIDTH="295">Provides information to any component that can scroll</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>ScrollPaneConstants</TT></TD>
		<TD WIDTH="295">Constants used when referring to anything that can scroll</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>SingleSelectionModel</TT></I></TD>
		<TD WIDTH="295">A model used by components from which, at most, one item from a list may be selected</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>SwingConstants</TT></TD>
		<TD WIDTH="295">Constants used by a variety of <TT>Swing</TT> classes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>UIDefaults.ActiveValue</TT></TD>
		<TD WIDTH="295">Used to store information</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>UIDefaults.LazyValue</TT></TD>
		<TD WIDTH="295">Used to store information that is not created until the first time it is asked for</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>WindowConstants</TT></TD>
		<TD WIDTH="295">Constants used by different classes that reference windows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD COLSPAN="2">
			<P ALIGN="CENTER"><I>Classes</I>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>AbstractAction</TT></TD>
		<TD WIDTH="295">Abstract parent class to all actions</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>AbstractButton</TT></TD>
		<TD WIDTH="295">Abstract parent class to all buttons</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>AbstractListModel</TT></TD>
		<TD WIDTH="295">Abstract list data model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>BorderFactory</TT></I></TD>
		<TD WIDTH="295">The <TT>BorderFactory</TT> singleton is responsible for passing out references to
			<TT>Border</TT> objects; through the use of a shared factory object, a shared instance
			will be returned when multiple objects request the same border</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Box</TT></I></TD>
		<TD WIDTH="295">A lightweight container that uses the <TT>BoxLayout</TT> layout manager by default;
			a series of methods are provided to facilitate building highly evolved screens</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>Box.Filler</TT></TD>
		<TD WIDTH="295">Utility class used to take up space when building screens</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>BoxLayout</TT></I></TD>
		<TD WIDTH="295">A layout manager that will arrange all components either vertically or horizontally;
			in most situations, the <TT>Box</TT> class is used instead because it provides additional
			methods for component management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>ButtonGroup</TT></I></TD>
		<TD WIDTH="295">Used to create an aggregate of button objects in which only one object may have an
			&quot;on&quot; state at a given time</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>CellRendererPane</TT></TD>
		<TD WIDTH="295">Sits between cell renderers and the components that use them; allows for desired
			view results</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>DebugGraphics</TT></TD>
		<TD WIDTH="295">A development tool used when doing development with the <TT>java.awt.Graphics</TT>
			class; allows one to see exactly what is going on at a given point in time</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>DefaultBoundedRangeModel</TT></TD>
		<TD WIDTH="295">Default implementation of the <TT>BoundedRangeModel</TT> interface</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>DefaultButtonModel</TT></TD>
		<TD WIDTH="295">Default implementation of the <TT>ButtonModel</TT> interface</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>DefaultCellEditor</TT></TD>
		<TD WIDTH="295">Default implementation of the <TT>TableCellEditor</TT> interface</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>DefaultCellEditor.EditorDelegate</TT></TD>
		<TD WIDTH="295">Utility class used by <TT>DefaultCellEditor</TT> to manage events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>DefaultListModel</TT></TD>
		<TD WIDTH="295">Default implementation of the <TT>ListModel</TT> interface</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>DefaultListSelectionModel</TT></TD>
		<TD WIDTH="295">Default implementation of the <TT>ListSelectionModel</TT> interface</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>DefaultSingleSelectionModel</TT></TD>
		<TD WIDTH="295">Default implementation of the <TT>SingleSelectionModel</TT> interface</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>FocusManager</TT></TD>
		<TD WIDTH="295">Manages focus for a series of components</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295">Interfaces/Classes</TD>
		<TD WIDTH="295">Description</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>GrayFilter</TT></I></TD>
		<TD WIDTH="295">Used to display an image as &quot;disabled&quot;; <TT>GrayFilter</TT> turns an image
			into grayscale, and then brightens the pixels</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>ImageIcon</TT></I></TD>
		<TD WIDTH="295">An implementation of the <TT>Icon</TT> interface, which allows <TT>Icon</TT> objects
			to be created from <TT>Image</TT> objects</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Japplet</TT></I></TD>
		<TD WIDTH="295">Subclass of the <TT>javaappletApplet</TT> class, which adds <TT>Swing</TT> UI advancements
			to the original <TT>Applet</TT> class</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Jbutton</TT></I></TD>
		<TD WIDTH="295">A generic <TT>Button</TT> class</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JCheckBox</TT></I></TD>
		<TD WIDTH="295">A generic <TT>CheckBox</TT> class</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JCheckBoxMenuItem</TT></I></TD>
		<TD WIDTH="295">A generic class used to place a checkbox next to a text string in a menu item</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JColorChooser</TT></I></TD>
		<TD WIDTH="295">A class used to prompt a user to select a color</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JComboBox</TT></I></TD>
		<TD WIDTH="295">A generic implementation of a combo box</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>Jcomponent</TT></I></TD>
		<TD WIDTH="295">The base class for all <TT>Swing</TT> components</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>JdesktopPane</TT></TD>
		<TD WIDTH="295">Container used to create MDI applications</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JDialog</TT></I></TD>
		<TD WIDTH="295">A generic class used to create dialog windows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JEditorPane</TT></I></TD>
		<TD WIDTH="295">A text pane that can be used to edit various types of content, including HTML and
			RTF</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JFileChooser</TT></I></TD>
		<TD WIDTH="295">A generic file chooser class</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JFrame</TT></I></TD>
		<TD WIDTH="295">Subclass of the <TT>java.awt.Frame</TT> class that adds Swing UI advancements to
			the original <TT>Frame</TT> class</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JInternalFrame</TT></I></TD>
		<TD WIDTH="295">A lightweight object that provides features similar to a native window</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JinternalFrame.JDesktopIcon</TT></I></TD>
		<TD WIDTH="295">Provides an iconified view for a <TT>JinternalFrame</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JLabel</TT></I></TD>
		<TD WIDTH="295">Used to display a read-only line of text, or a combination of a read-only line of
			text and an <TT>Image</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JLayeredPane</TT></I></TD>
		<TD WIDTH="295">A generic container object that supports the definition of multiple layers within
			itself</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JList</TT></I></TD>
		<TD WIDTH="295">A generic implementation of a <TT>List</TT> class</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JMenu</TT></I></TD>
		<TD WIDTH="295">A generic implementation of a <TT>Menu</TT> class</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>JMenu.WinListener</TT></TD>
		<TD WIDTH="295">Used by <TT>JMenu</TT> to listen for events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JMenuBar</TT></I></TD>
		<TD WIDTH="295">A generic implementation of a <TT>MenuBar</TT> class</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JMenuItem</TT></I></TD>
		<TD WIDTH="295">A generic implementation of a <TT>MenuItem</TT> class</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JOptionPane</TT></I></TD>
		<TD WIDTH="295">A class used to create any number of different types of dialog boxes, including attention
			dialogs, yes/no dialogs, and input dialogs</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JPanel</TT></I></TD>
		<TD WIDTH="295">A generic implementation of a panel class; used in creating screens or for performing
			custom drawing</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JPasswordField</TT></I></TD>
		<TD WIDTH="295">A simple text field that masks all text entered into it</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JPopupMenu</TT></I></TD>
		<TD WIDTH="295">A generic pop-up menu class</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JProgressBar</TT></I></TD>
		<TD WIDTH="295">A generic progress bar class</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JRadioButton</TT></I></TD>
		<TD WIDTH="295">A generic radio button class</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JRadioButtonMenuItem</TT></I></TD>
		<TD WIDTH="295">A generic class used to place a radio button next to a text string in a menu item</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JRootPane</TT></I></TD>
		<TD WIDTH="295">The base pane used when laying out components</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>JRootPane.RootLayout</TT></TD>
		<TD WIDTH="295">Layout manager used internally by <TT>JRootPane</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JScrollBar</TT></I></TD>
		<TD WIDTH="295">A generic implementation of a <TT>ScrollBar</TT> class</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JScrollPane</TT></I></TD>
		<TD WIDTH="295">A panel that scrolls over a view</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>JScrollPane.ScrollBar</TT></TD>
		<TD WIDTH="295">Special type of <TT>JScrollBar</TT> used internally by <TT>JScrollPane</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JSeparator</TT></I></TD>
		<TD WIDTH="295">Used to place a separator line in a pull-down menu</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JSlider</TT></I></TD>
		<TD WIDTH="295">A generic slider class</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>JSlider.ModelListener</TT></TD>
		<TD WIDTH="295">Used internally by <TT>JSlider</TT> to manage events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JSplitPane</TT></I></TD>
		<TD WIDTH="295">A generic class used to display two and only two components, either side by side
			or on top of each other; the percentage of the screen given to each component can
			be determined programmatically or by having the user drag the bar between the components</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JTabbedPane</TT></I></TD>
		<TD WIDTH="295">A generic control that organizes a series of components in terms of tabbed folders</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>JTabbedPane.ModelListener</TT></TD>
		<TD WIDTH="295">Used internally by <TT>JTabbedPane</TT> to manage events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JTable</TT></I></TD>
		<TD WIDTH="295">A generic control that organizes data into a grid-like table</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JTextArea</TT></I></TD>
		<TD WIDTH="295">A generic text area class</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JTextField</TT></I></TD>
		<TD WIDTH="295">A generic text field class</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JTextPane</TT></I></TD>
		<TD WIDTH="295">A generic class that can display marked-up text</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JToggleButton</TT></I></TD>
		<TD WIDTH="295">A generic two-state button; <TT>JRadioButton</TT> and <TT>JCheckBox</TT> are both
			child classes of this class</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>JToggleButton.ToggleButtonModel</TT></TD>
		<TD WIDTH="295">Default toggle button model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JToolBar</TT></I></TD>
		<TD WIDTH="295">A generic class used to model a toolbar</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>JToolBar.Separator</TT></TD>
		<TD WIDTH="295">Used by <TT>JToolBar</TT> to separate data</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JToolTip</TT></I></TD>
		<TD WIDTH="295">A generic class used to represent a ToolTip</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>JTree</TT></I></TD>
		<TD WIDTH="295">A generic control used to organize data in a hierarchical tree</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>JTree.DynamicUtilTreeNode</TT></TD>
		<TD WIDTH="295">Used internally by <TT>JTree</TT> to create nodes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>JTree.EmptySelectionModel</TT></TD>
		<TD WIDTH="295">Used internally by <TT>JTree</TT> to model selection sets that can contain exactly
			zero elements</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>JTree.TreeSelectionRedirector</TT></TD>
		<TD WIDTH="295">Used internally by <TT>JTree</TT> to manage events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>JViewport</TT></TD>
		<TD WIDTH="295">Container used by many other containers</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>JViewport.ViewListene<B>r</B></TT></TD>
		<TD WIDTH="295">Used internally by <TT>JViewport</TT> to watch for component resizing</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>JWindow</TT></TD>
		<TD WIDTH="295">A generic implementation of a Window component; usually, developers will work with
			one of <TT>JWindow</TT>'s subclasses and not <TT>JWindow</TT> directly</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>KeyStroke</TT></I></TD>
		<TD WIDTH="295">A class used to model a unique keypress by the application's user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>LookAndFeel MenuSelectionManager</TT></TD>
		<TD WIDTH="295">A class that models a pluggable look-and-feel</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>OverlayLayout</TT></I></TD>
		<TD WIDTH="295">A layout manager class that allows components to be layered on top of each other</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>ProgressMonitor</TT></I></TD>
		<TD WIDTH="295">A class used to monitor how long an operation takes, and to notify the user if the
			operation appears to be taking too long</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><I><TT>ProgressMonitorInputStream</TT></I></TD>
		<TD WIDTH="295">A class used to monitor how long reading from an input stream takes, and to notify
			the user if the operation appears to be taking too long</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>RepaintManager</TT></TD>
		<TD WIDTH="295">Class used by Swing to determine which areas need to be repainted</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>ScrollPaneLayout</TT></TD>
		<TD WIDTH="295">A layout manager used to lay out components in an area that will scroll to display
			anything not visible at a given point in time; usually you will use <TT>JScrollPane</TT>
			and not this class directly</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>SizeRequirements</TT></TD>
		<TD WIDTH="295">Utility class used by layout managers to determine component sizes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>SwingUtilities</TT></TD>
		<TD WIDTH="295">A collection of static methods used to perform simple calculations</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>Timer</TT></TD>
		<TD WIDTH="295">A utility class that is used to obtain notification at or after a certain time</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>ToolTipManager</TT></TD>
		<TD WIDTH="295">Used internally by Swing to manage all tooltips</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>ToolTipManager.insideTimerAction</TT></TD>
		<TD WIDTH="295">Used internally by <TT>ToolTipManager</TT> to handle display timing</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>ToolTipManager.outsideTimerAction</TT></TD>
		<TD WIDTH="295">Used internally by <TT>ToolTipManager</TT> to handle display timing</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>ToolTipManager.stillInsideTimerAction</TT></TD>
		<TD WIDTH="295">Used internally by <TT>ToolTipManager</TT> to handle display timing</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>TypedFile</TT></TD>
		<TD WIDTH="295"><TT>TypedFile</TT> objects are returned by <TT>FileChooserModel</TT> after the user
			selects a file</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>UIDefaults</TT></TD>
		<TD WIDTH="295">Collection of defaults used by Swing components</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>UIManager</TT></TD>
		<TD WIDTH="295">Used internally by Swing to manage the UI</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>ViewportLayout</TT></TD>
		<TD WIDTH="295">Layout manager used internally by <TT>JViewport</TT></TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="interface.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingActionFONTTT"></A><TT>javax.swing.Action</TT></H3>
<P><TT>public interface javax.swing.Action</TT></P>

<P>The Action interface provides for the same functionality to be accessed by several
controls.</P>

<P><IMG SRC="interface.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.Action</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static String DEFAULT</TT></TD>
		<TD WIDTH="295">Useful as a storage-retrieval key for setting or getting one of this object&iacute;s
			properties</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static String LONG_DESCRIPTION</TT></TD>
		<TD WIDTH="295">Long description used to detail the <TT>Action</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static String NAME</TT></TD>
		<TD WIDTH="295">Logical name associated with the <TT>Action</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static String SHORT_DESCRIPTION</TT></TD>
		<TD WIDTH="295">Short description used to detail the <TT>Action</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static String SMALL_ICON</TT></TD>
		<TD WIDTH="295">A small (often 16<FONT FACE="Symbol">&acute;16) icon used to represent the <TT>Action</TT>
			pictorially</FONT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addProperty <BR>
			ChangeListener<BR>
			(PropertyChangeListener)</TT></TD>
		<TD WIDTH="295">Adds a <TT>PropertyChangeListener </TT>to the <TT>Action</TT>'s collection of listeners;
			these listeners will be notified when a change to a property occurs</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isEnabled()</TT></TD>
		<TD WIDTH="295">Obtains the enabled state of the <TT>Action</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void <BR>
			removePropertyChangeListener <BR>
			(PropertyChangeListener)</TT></TD>
		<TD WIDTH="295">Removes a <TT>PropertyChangeListener</TT> from the <TT>Action</TT>'s collection of
			listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setEnabled(boolean)</TT></TD>
		<TD WIDTH="295">Sets the enabled state of the <TT>Action</TT></TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="interface.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingButtonModelFONTTT"></A><TT>javax.swing.ButtonModel</TT></H3>
<P><TT>public interface javax.swing.ButtonModel extends ItemSelectable</TT></P>

<P>The ButtonModel interface is implemented by any object wishing to act as a model
to any of the Button objects that may be created from the Swing Button classes.</P>

<P><IMG SRC="interface.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.ButtonModel</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addActionListener (ActionListener)</TT></TD>
		<TD WIDTH="288">Adds an <TT>ActionListener</TT> to the button's collection of listeners; an <TT>ActionListener
			</TT>receives notification when the button is clicked</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addChangeListener (ChangeListener)</TT></TD>
		<TD WIDTH="288">Adds a <TT>ChangeListener</TT> to the button's collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addItemListener (ItemListener)</TT></TD>
		<TD WIDTH="288">Adds an <TT>ItemListener</TT> to the button's collection of listeners; an <TT>ItemListener
			</TT>receives notification when a multi-state button changes state</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getActionCommand()</TT></TD>
		<TD WIDTH="288">Obtains the action command sent with actions</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getMnemonic()</TT></TD>
		<TD WIDTH="288">Obtains the keyboard mnemonic for this model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isArmed()</TT></TD>
		<TD WIDTH="288">Obtains the button's armed state</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isEnabled()</TT></TD>
		<TD WIDTH="288">Obtains the enabled state of the button</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isPressed()</TT></TD>
		<TD WIDTH="288">Obtains the pressed state of the button</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isRollover()</TT></TD>
		<TD WIDTH="288">Identifies whether the button is cur-rently in a rollover state</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isSelected()</TT></TD>
		<TD WIDTH="288">Identifies that the mouse is over the button</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeActionListener (ActionListener)</TT></TD>
		<TD WIDTH="288">Removes an <TT>ActionListener</TT> from the button's collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeChangeListener (ChangeListener)</TT></TD>
		<TD WIDTH="288">Removes a <TT>ChangeListener</TT> from the button's collection of change listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeItemListener (ItemListener)</TT></TD>
		<TD WIDTH="288">Removes an <TT>ItemListener</TT> from the button's collection of item listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setActionCommand(String)</TT></TD>
		<TD WIDTH="288">Sets the action command associated with button actions</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setArmed(boolean)</TT></TD>
		<TD WIDTH="288">Sets the button's armed state</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setEnabled(boolean)</TT></TD>
		<TD WIDTH="288">Sets the button's enabled state</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setGroup(ButtonGroup)</TT></TD>
		<TD WIDTH="288">Sets the button group to which the button belongs</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setMnemonic(int)</TT></TD>
		<TD WIDTH="288">Sets the keyboard shortcut associated with the button</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setPressed(boolean)</TT></TD>
		<TD WIDTH="288">Sets the current pressed state of the button</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setRollover(boolean)</TT></TD>
		<TD WIDTH="288">Sets the current rollover state of the button</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setSelected(boolean)</TT></TD>
		<TD WIDTH="288">Sets the current selected state of the button</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="interface.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingCellEditorFONTTT"></A><TT>javax.swing.CellEditor</TT></H3>
<P><TT>public interface javax.swing.CellEditor</TT></P>

<P>The <TT>CellEditor</TT> class is a default implementation of a cell editor.</P>

<P><IMG SRC="interface.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.CellEditor</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addCellEditorListener (CellEditorListener)</TT></TD>
		<TD WIDTH="288">Adds a <TT>CellEditorListener</TT> to the <TT>CellEditor</TT>'s collection of listeners;
			a <TT>CellEditorListener</TT> is notified when editing is stopped or cancelled for
			a given cell</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void cancelCellEditing()</TT></TD>
		<TD WIDTH="288">Cancels editing and rejects any partially edited value</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Object getCellEditorValue()</TT></TD>
		<TD WIDTH="288">Obtains the current value present in the editor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isCellEditable</TT> <TT>(EventObject)</TT></TD>
		<TD WIDTH="288">Obtains whether the cell is currently editable given the <TT>EventObject</TT> parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeCellEditorListener (CellEditorListener)</TT></TD>
		<TD WIDTH="288">Removes a <TT>CellEditorListener </TT>from the <TT>CellEditor</TT>'s collection of
			listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean shouldSelectCell (EventObject)</TT></TD>
		<TD WIDTH="288">Notifies the editor that, given the <TT>EventObject </TT>parameter, the <TT>CellEditor
			</TT>should begin editing</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void stopCellEditing()</TT></TD>
		<TD WIDTH="288">Stops editing and accepts any partially edited value</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="interface.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingComboBoxEditorFONTTT"></A><TT>javax.swing.ComboBoxEditor</TT></H3>
<P><TT>public interface javax.swing.ComboBoxEditor</TT></P>

<P>The <TT>ComboBoxEditor</TT> interface is implemented by any object that wants
to serve as a combo box editor. A default implementation of this interface is provided
in <TT>javax.swing.basic.BasicComboBoxEditor</TT>.</P>

<P><IMG SRC="interface.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.ComboBoxEditor</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addActionListener (ActionListener)</TT></TD>
		<TD WIDTH="288">Adds an action listener to the <TT>ComboBoxEditor</TT>'s collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component getEditorComponent()</TT></TD>
		<TD WIDTH="288">Obtains the component that should be added to the tree hierarchy for this editor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Object getItem()</TT></TD>
		<TD WIDTH="288">Obtains the item that should be edited</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeActionListener (ActionListener)</TT></TD>
		<TD WIDTH="288">Removes an <TT>ActionListener</TT> from the <TT>ComboBoxEditor</TT>'s collection
			of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void selectAll()</TT></TD>
		<TD WIDTH="288">Tells the editor to select everything</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Object setItem(Object)</TT></TD>
		<TD WIDTH="288">Sets the item to be edited</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="interface.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingComboBoxModelFONTTT"></A><TT>javax.swing.ComboBoxModel</TT></H3>
<P><TT>public interface javax.swing.ComboBoxModel extends ListModel</TT></P>

<P>A <TT>ComboBox</TT> model extends <TT>ListModel</TT> and adds the additional functionality
of allowing a selected item.</P>

<P><IMG SRC="interface.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.ComboBoxModel</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Object getSelectedItem()</TT></TD>
		<TD WIDTH="288">Obtains the selected item</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setSelectedItem(Object)</TT></TD>
		<TD WIDTH="288">Sets the selected item</TD>
	</TR>
</TABLE>
</P>

<P>
<H3><A NAME="TTFONTSIZEjavaxswingDesktopManagerFONTTT"></A><TT>javax.swing.DesktopManager</TT></H3>
<P><TT>public interface javax.swing.DesktopManager</TT></P>

<P><TT>DesktopManager</TT> objects, owned by <TT>JDesktopPane</TT> objects, are charged
with implementing look and feel behavior in a <TT>JDesktopPane</TT> object.</P>

<P><IMG SRC="interface.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.DesktopManager</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void activateFrame (JInternalFrame)</TT></TD>
		<TD WIDTH="288">Displays the frame in its proper location relative to the <TT>JInternalFrame</TT>
			object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void beginDraggingFrame (JComponent)</TT></TD>
		<TD WIDTH="288">Invoked when a user begins dragging a frame</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void beginResizingFrame (JComponent, int)</TT></TD>
		<TD WIDTH="288">Invoked when a user begins resizing a frame</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void closeFrame (JInternalFrame)</TT></TD>
		<TD WIDTH="288">Removes a frame from its parent</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void deactivateFrame (JInternalFrame)</TT></TD>
		<TD WIDTH="288">Deactivates (removes focus from) a frame</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void deiconifyFrame (JInternalFrame)</TT></TD>
		<TD WIDTH="288">Deiconifies a frame and returns it to its size and location prior to the iconification</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void dragFrame (JComponent, int, int)</TT></TD>
		<TD WIDTH="288">Invoked when the user has dragged the frame to a new location</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void endDraggingFrame (JComponent)</TT></TD>
		<TD WIDTH="288">Invoked when a user completes the frame-dragging process</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void endResizingFrame (JComponent)</TT></TD>
		<TD WIDTH="288">Invoked when a user completes the frame-resizing process</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void iconifyFrame (JInternalFrame)</TT></TD>
		<TD WIDTH="288">Iconifies a frame</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void maximizeFrame (JInternalFrame)</TT></TD>
		<TD WIDTH="288">Maximizes a frame</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void minimizeFrame (JInternalFrame)</TT></TD>
		<TD WIDTH="288">Minimizes a frame</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void openFrame (JInternalFrame)</TT></TD>
		<TD WIDTH="288">Tries to display the frame in a location relative to the <TT>JInternalFrame</TT>
			object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void resizeFrame (JComponent, int, int, int, int)</TT></TD>
		<TD WIDTH="288">Resizes a frame</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setBoundsForFrame (JComponent, int, int, int, int)</TT></TD>
		<TD WIDTH="288">Sets the frame's bounding box</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="interface.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingIconFONTTT"></A><TT>javax.swing.Icon</TT></H3>
<P><TT>public interface javax.swing.Icon</TT></P>

<P>The <TT>Icon</TT> class is implemented by classes that need to represent themselves
as an onscreen icon. An object that implements the <TT>Icon</TT> class has a fixed-size
onscreen representation.</P>

<P><IMG SRC="interface.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.Icon</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getIconHeight()</TT></TD>
		<TD WIDTH="288">Obtains the <TT>Icon</TT> height</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getIconWidth()</TT></TD>
		<TD WIDTH="288">Obtains the <TT>Icon</TT> width</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void paintIcon (Component, Graphics, int, int)</TT></TD>
		<TD WIDTH="288">Paints the <TT>Icon</TT> object into the <TT>Graphics</TT> object parameter</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="interface.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingListCellRendererFONTTT"></A><TT>javax.swing.ListCellRenderer</TT></H3>
<P><TT>public interface javax.swing.ListCellRenderer</TT></P>

<P>The <TT>ListCellRenderer</TT> interface is implemented by objects that are to
be used as rubber stamps in a <TT>JList</TT>.</P>

<P><IMG SRC="interface.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.ListCellRenderer</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component<BR>
			getListCellRendererComponent<BR>
			(JList, Object, int, boolean, boolean)</TT></TD>
		<TD WIDTH="288">Obtains a component configured<BR>
			to display the <TT>Object<BR>
			</TT>parameter</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="interface.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingListModelFONTTT"></A><TT>javax.swing.ListModel</TT></H3>
<P><TT>public interface javax.swing.ListModel</TT></P>

<P>The <TT>ListModel</TT> interface is implemented by objects that act as a model
for a <TT>JList</TT>.</P>

<P><IMG SRC="interface.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.ListModel</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addListDataListener (ListDataListener)</TT></TD>
		<TD WIDTH="288">Adds a <TT>ListDataListener</TT> object to the collection of listeners that are notified
			when a <TT>List </TT>data model changes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Object getElementAt(int)</TT></TD>
		<TD WIDTH="288">Obtains the element at the specific index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getSize()</TT></TD>
		<TD WIDTH="288">Obtains the length of the list</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeListDataListener (ListDataListener)</TT></TD>
		<TD WIDTH="288">Removes a <TT>ListDataListener </TT>object from the collection of listeners that
			are notified when a <TT>List</TT> data model changes</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="interface.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingListSelectionModelFONTTT"></A><TT>javax.swing.ListSelectionModel</TT></H3>
<P><TT>public interface javax.swing.ListSelectionModel</TT></P>

<P>The <TT>ListSelectionModel</TT> interface is used by any class that maintains
an active list of selectable values.</P>

<P><IMG SRC="interface.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.ListSelectionModel</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addListSelectionListener (ListSelectionListener)</TT></TD>
		<TD WIDTH="288">Adds a <TT>ListSelectionListener </TT>object to the <TT>ListSelectionModel</TT>'s
			collection of listeners; a <TT>ListSelectionListener</TT> receives notification every
			time the selected value changes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addSelectionInterval (int, int)</TT></TD>
		<TD WIDTH="288">Changes the selection interval based on the parameters</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void clearSelection()</TT></TD>
		<TD WIDTH="288">Modifies the set so that no item is selected</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getAnchorSelectionIndex()</TT></TD>
		<TD WIDTH="288">Obtains the selection interval (set by <TT>addSelectionInterval()</TT> or <TT>setSelectionInterval()</TT>)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getLeadSelectionIndex()</TT></TD>
		<TD WIDTH="288">Obtains the lead selection index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getMaxSelectionIndex()</TT></TD>
		<TD WIDTH="288">Obtains the maximum selection index or -1 if the selection is empty</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getMinSelectionIndex()</TT></TD>
		<TD WIDTH="288">Obtains the minimum selection index or -1 if the selection is empty</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean getValueIsAdjusting()</TT></TD>
		<TD WIDTH="288">Obtains the active state of the model; true if changes are expected, false otherwise</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void insertIndexInterval (int, int, boolean)</TT></TD>
		<TD WIDTH="288">Inserts additional values into<TT> </TT>the length indices</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isSelectedIndex(int)</TT></TD>
		<TD WIDTH="288">Returns true if the parameter is the index of the selected item</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isSelectionEmpty()</TT></TD>
		<TD WIDTH="288">Returns true if the selection is empty</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeIndexInterval (int, int)</TT></TD>
		<TD WIDTH="288">Removes the indices identified by the parameters from the selection model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeListSelectionListener (ListSelectionListener)</TT></TD>
		<TD WIDTH="288">Removes a <TT>ListSelectionListener</TT> from the <TT>ListSelectionModel</TT>'s collection
			of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeSelectionInterval (int, int)</TT></TD>
		<TD WIDTH="288">Change the selection to be the difference of the current selection and the indices
			between (and including) the specified indices</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setAnchorSelectionIndex(int)</TT></TD>
		<TD WIDTH="288">Sets the anchor selection index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setLeadSelectionIndex(int)</TT></TD>
		<TD WIDTH="288">Sets the lead selection index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setSelectionInterval (int, int)</TT></TD>
		<TD WIDTH="288">Sets the active selection<TT> </TT>interval</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setSelectionMode(int) MULTIPLE_INTERVAL_SELECTION</TT>)</TD>
		<TD WIDTH="288">Sets the selection mode (<TT>SINGLE_SELECTION</TT>, <TT>SINGLE_INTERVAL_SELECTION</TT>,</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setValueIsAdjusting (boolean)</TT></TD>
		<TD WIDTH="288">Returns true if upcoming changes to the state of the model should be considered a
			single event</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="interface.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingScrollableFONTTT"></A><TT>javax.swing.Scrollable</TT></H3>
<P><TT>public interface javax.swing.Scrollable</TT></P>

<P>The <TT>Scrollable</TT> interface is implemented by objects that are to be controlled
by an object such as <TT>JScrollPane</TT>. This interface tells <TT>JScrollPane</TT>
how to move the <TT>Scrollable</TT> object when required.</P>

<P><IMG SRC="interface.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.Scrollable</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Dimension getPreferredScrollableViewportSize()</TT></TD>
		<TD WIDTH="288">Obtains the preferred size of the <TT>Scrollable</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getScrollableBlockIncrement (Rectangle, int, int)</TT></TD>
		<TD WIDTH="288">If the <TT>Scrollable</TT> object needs scrolling to occur in certain increments,
			that increment should be returned from this method</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean getScrollableTracksViewportHeight()</TT></TD>
		<TD WIDTH="288">Returns true if the <TT>Scrollable </TT>object should have its height forced to match
			the height of the scrolling viewport</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean getScrollableTracksViewportWidth()</TT></TD>
		<TD WIDTH="288">Returns true if the <TT>Scrollable </TT>object should have its width forced to match
			the width of the scrolling viewport</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getScrollableUnitIncrement (Rectangle, int, int)</TT></TD>
		<TD WIDTH="288">If the <TT>Scrollable</TT> object needs scrolling to occur in certain increments,
			these increments should be returned from this method</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="interface.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingSingleSelectionModelFONTTT"></A><TT>javax.swing.SingleSelectionModel</TT></H3>
<P><TT>public interface javax.swing.SingleSelectionModel</TT></P>

<P>The <TT>SingleSelectionModel</TT> interface is used to model objects that support
at most one indexed selection.</P>

<P><IMG SRC="interface.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.SingleSelectionModel</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addChangeListener (ChangeListener)</TT></TD>
		<TD WIDTH="288">Adds a <TT>ChangeListener</TT> to the <TT>SingleSelectionModel</TT>'s collection
			of listeners; a <TT>ChangeListener</TT> is notified when the selected item changes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void clearSelection()</TT></TD>
		<TD WIDTH="288">Clears the active selection; further calls to <TT>getSelectedIndex()</TT> will return
			-1</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getSelectedIndex()</TT></TD>
		<TD WIDTH="288">Obtains the index of the selected index, or -1 if none is selected</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isSelected()</TT></TD>
		<TD WIDTH="288">Returns true if an item is currently selected</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeChangeListener (ChangeListener)</TT></TD>
		<TD WIDTH="288">Removes a <TT>ChangeListener</TT> from the <TT>SingleSelectionModel</TT>'s collection
			of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setSelectedIndex(int)</TT></TD>
		<TD WIDTH="288">Sets the active selected <TT>index.kj</TT></TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingBorderFactoryFONTTT"></A><TT>javax.swing.BorderFactory</TT></H3>
<P><TT>public class javax.swing.BorderFactory</TT></P>

<P>The <TT>BorderFactory</TT> class is used to produce borders around objects. Through
the use of the <TT>Factory</TT> pattern, it is possible for multiple objects to share
the same border object.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.BorderFactory</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static Border createBevelBorder (int)</TT></TD>
		<TD WIDTH="288">Obtains a beveled <TT>Border</TT> object in which the size of the bevel is specified
			by the parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static Border createBevelBorder (int, Color, Color)</TT></TD>
		<TD WIDTH="288">Obtains a beveled <TT>Border </TT>object in which the size of the bevel is specified
			by the <TT>int</TT> parameter, and the highlight and shadow colors are specified
			by the <TT>Color</TT> parameters</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static Border createBevelBorder (int, Color, Color, Color, Color)</TT></TD>
		<TD WIDTH="288">Obtains a beveled <TT>Border </TT>object in which the size of the bevel is specified
			by the <TT>int</TT> parameter, and the highlight (inner and outer) and shadow (inner
			and outer) colors are specified by the <TT>Color </TT>parameters</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static CompoundBorder createCompoundBorder()</TT></TD>
		<TD WIDTH="288">Obtains a blank <TT>CompoundBorder</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static CompoundBorder createCompoundBorder(Border, Border)</TT></TD>
		<TD WIDTH="288">Obtains a <TT>CompoundBorder </TT>object that is a composite of the two parameters</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static Border createEmptyBorder()</TT></TD>
		<TD WIDTH="288">Obtains an empty <TT>Border </TT>object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static Border createEmptyBorder (int, int, int, int)</TT></TD>
		<TD WIDTH="288">Obtains an empty <TT>Border </TT>object with the dimensions specified by the parameters</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static Border createEtchedBorder()</TT></TD>
		<TD WIDTH="288">Obtains a default <TT>EtchedBorder</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static Border createEtchedBorder (Color, Color)</TT></TD>
		<TD WIDTH="288">Obtains an <TT>EtchedBorder </TT>object with the highlight and shadow colors specified
			by the parameters</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static Border createLineBorder (Color)</TT></TD>
		<TD WIDTH="288">Obtains a simple line <TT>Border</TT> object using the specified color</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static Border createLineBorder (Color, int)</TT></TD>
		<TD WIDTH="288">Obtains a simple line <TT>Border</TT> object using the specified color and thickness</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static Border createLoweredBevelBorder()</TT></TD>
		<TD WIDTH="288">Obtains a beveled <TT>Border </TT>object where the bevel is inset</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static MatteBorder createMatteBorder (int, int, int, int, Color)</TT></TD>
		<TD WIDTH="288">Obtains a <TT>MatteBorder </TT>object with the specified dimensions and color</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>createMatteBorder (int, int, int, int, Icon)</TT></TD>
		<TD WIDTH="288">Obtains a <TT>MatteBorder </TT>object with the specified dimensions and title icon</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static Border createRaisedBevelBorder()</TT></TD>
		<TD WIDTH="288">Obtains a beveled <TT>Border </TT>object where the border is raised</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static TitledBorder createTitledBorder(Border)</TT></TD>
		<TD WIDTH="288">Obtains a <TT>TitledBorder </TT>object that is based on the specified Border object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static TitledBorder createTitledBorder(Border, String)</TT></TD>
		<TD WIDTH="288">Obtains a <TT>TitledBorder </TT>object that is a based on the specified <TT>Border
			</TT>object and bears a title specified by the <TT>String </TT>object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static TitledBorder createTitledBorder (Border, String, int, int)</TT></TD>
		<TD WIDTH="288">Obtains a <TT>TitledBorder </TT>object that is a based on the specified <TT>Border
			</TT>object and bears a title specified by the String object; the title is positioned
			according to the justification and position parameters</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static TitledBorder createTitledBorder (Border, String, int, int, Font)</TT></TD>
		<TD WIDTH="288">Obtains a <TT>TitledBorder </TT>object that is a based on the specified <TT>Border
			</TT>object and bears a title specified by the <TT>String </TT>object; the title
			is positioned according to the justification and position parameters, and appears
			in the font specified by the <TT>Font </TT>parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static TitledBorder createTitledBorder (Border, String, int, int, Font,
			Color)</TT></TD>
		<TD WIDTH="288">Obtains a <TT>TitledBorder </TT>object that is a based on the specified <TT>Border
			</TT>object and bears a title specified by the <TT>String </TT>object; the title
			is positioned according to the justification and position parameters, appears in
			the font specified by the <TT>Font </TT>parameter, and is in the color specified
			by the <TT>Color</TT> parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static TitledBorder createTitledBorder(String)</TT></TD>
		<TD WIDTH="288">Obtains a <TT>TitledBorder </TT>object with the specified title</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.BorderFactory</TT>: Example</H4>
<P>The <TT>BorderFactory</TT> class is used to obtain references to <TT>Border</TT>
object singletons:


<BLOCKQUOTE>
	<PRE>import java.awt.*;



import javax.swing.swing.*;

import javax.swing.swing.event.*;

import javax.swing.swing.tree.*;



public class BorderFactoryDemo extends JApplet { 

    public void init() { 

        resize(400, 400);



        // Create a new Grid Layout object with a 2x7 format and a

        // a 10 pixel gaps between all components.

        GridLayout gridLayout = new GridLayout(5, 2, 10,10);

          getContentPane().setLayout(gridLayout);



        //create components

        JPanel  jpnlLineBorder1 = new JPanel();

        JPanel  jpnlLineBorder2 = new JPanel();

        JPanel  jpnlRaisedBevelBorder = new JPanel();

        JPanel  jpnlLoweredBevelBorder = new JPanel();

        JPanel  jpnlBevelBorder = new JPanel();

        JPanel  jpnlEtchedBorder = new JPanel();

        JPanel  jpnlTitledBorder = new JPanel();

        JPanel  jpnlCompoundBorder = new JPanel();

        JPanel  jpnlMatteBorder = new JPanel();



        JLabel  jlblLineBorder1 = new JLabel(&quot;Line Border 1&quot;);

        JLabel  jlblLineBorder2 

        = new JLabel(&quot;Line Border 2 (specified width)&quot;);

        JLabel  jlblRaisedBevelBorder 

        = new JLabel(&quot;Raised Bevel Border&quot;);

        JLabel  jlblLoweredBevelBorder 

        = new JLabel(&quot;Lowered Bevel Border&quot;);

JLabel  jlblBevelBorder = new JLabel(&quot;Bevel Border&quot;);

        JLabel  jlblEtchedBorder = new JLabel(&quot;Etched Border&quot;);

        JLabel  jlblTitledBorder = new JLabel(&quot;Titled Border&quot;);

        JLabel  jlblCompoundBorder = new JLabel(&quot;Compound Border&quot;);

        JLabel  jlblMatteBorder = new JLabel(&quot;Matte Border&quot;);



        //set borders

        jpnlLineBorder1.setBorder

        (BorderFactory.createLineBorder(java.awt.Color.blue));

        jpnlLineBorder2.setBorder

        (BorderFactory.createLineBorder(java.awt.Color.blue,5));

        jpnlRaisedBevelBorder.setBorder

        (BorderFactory.createRaisedBevelBorder());

        jpnlLoweredBevelBorder.setBorder

        (BorderFactory.createLoweredBevelBorder());

        jpnlBevelBorder.setBorder

        (BorderFactory.createBevelBorder(0));

        jpnlEtchedBorder.setBorder

        (BorderFactory.createEtchedBorder());

        jpnlTitledBorder.setBorder

        (BorderFactory.createTitledBorder(&quot;Title&quot;));

        jpnlCompoundBorder.setBorder

        (BorderFactory.createCompoundBorder());

        jpnlMatteBorder.setBorder

       (BorderFactory.createMatteBorder(5,5,5,5,java.awt.Color.blue));



        //add components

        jpnlLineBorder1.setLayout(new BorderLayout());

        jpnlLineBorder1.add(jlblLineBorder1,&quot;Center&quot;);

        jpnlLineBorder2.setLayout(new BorderLayout());

        jpnlLineBorder2.add(jlblLineBorder2,&quot;Center&quot;);

        jpnlRaisedBevelBorder.setLayout(new BorderLayout());

        jpnlRaisedBevelBorder.add(jlblRaisedBevelBorder,&quot;Center&quot;);

        jpnlLoweredBevelBorder.setLayout(new BorderLayout());

        jpnlLoweredBevelBorder.add(jlblLoweredBevelBorder,&quot;Center&quot;);

        jpnlBevelBorder.setLayout(new BorderLayout());

        jpnlBevelBorder.add(jlblBevelBorder,&quot;Center&quot;);

        jpnlEtchedBorder.setLayout(new BorderLayout());

        jpnlEtchedBorder.add(jlblEtchedBorder,&quot;Center&quot;);

        jpnlTitledBorder.setLayout(new BorderLayout());

        jpnlTitledBorder.add(jlblTitledBorder,&quot;Center&quot;);

        jpnlCompoundBorder.setLayout(new BorderLayout());

        jpnlCompoundBorder.add(jlblCompoundBorder,&quot;Center&quot;);

        jpnlMatteBorder.setLayout(new BorderLayout());

        jpnlMatteBorder.add(jlblMatteBorder,&quot;Center&quot;);



        getContentPane().add(jpnlLineBorder1, BorderLayout.CENTER);

        getContentPane().add(jpnlLineBorder2, BorderLayout.CENTER);

        getContentPane().add

        (jpnlRaisedBevelBorder, BorderLayout.CENTER);

        getContentPane().add

        (jpnlLoweredBevelBorder, BorderLayout.CENTER);

getContentPane().add

        (jpnlBevelBorder, BorderLayout.CENTER);

        getContentPane().add

        (jpnlEtchedBorder, BorderLayout.CENTER);

        getContentPane().add

        (jpnlTitledBorder, BorderLayout.CENTER);

        getContentPane().add

        (jpnlCompoundBorder, BorderLayout.CENTER);

getContentPane().add(jpnlMatteBorder, BorderLayout.CENTER);



    } 



} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingBoxFONTTT"></A><TT>javax.swing.Box</TT></H3>
<P><TT>public class javax.swing.Box extends Container implements Accessible</TT></P>

<P>The <TT>Box</TT> class is a utility class used in building screens. The <TT>Box</TT>
class uses the <TT>BoxLayout</TT> layout manager, and adds a series of useful methods
that facilitate the building of screens. In general, you will be aided by the capability
to create one of three invisible components: <TT>Glue</TT>, <TT>Strut</TT>, and <TT>Rigid</TT>.
The <TT>Glue</TT> component allows you to control component position when all components
are of the same size. A <TT>Strut</TT> (horizontal or vertical) places a fixed amount
of space between two components. A <TT>Rigid</TT> simply takes up a preset amount
of space.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.Box</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static Component createGlue()</TT></TD>
		<TD WIDTH="288">Obtains a <TT>Glue</TT> component for use in screen design</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static Box createHorizontalBox()</TT></TD>
		<TD WIDTH="288">Obtains a <TT>Box</TT> object that displays objects from left to right</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static Component createHorizontalGlue()</TT></TD>
		<TD WIDTH="288">Obtains a <TT>Glue</TT> object with a horizontal orientation</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static Component createHorizontalStrut(int)</TT></TD>
		<TD WIDTH="288">Obtains a <TT>Strut</TT> object with a horizontal representation</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static Component createRigidArea(Dimension)</TT></TD>
		<TD WIDTH="288">Obtains a <TT>Rigid</TT> object with the specified dimensions</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static Box createVerticalBox()</TT></TD>
		<TD WIDTH="288">Obtains a <TT>Box</TT> object that displays objects from top to bottom</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static Component createVerticalGlue()</TT></TD>
		<TD WIDTH="288">Obtains a <TT>Glue</TT> object with a vertical orientation</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static Component createVerticalStrut(int)</TT></TD>
		<TD WIDTH="288">Obtains a <TT>Strut</TT> object with a vertical orientation</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains an <TT>Accessible Context</TT> associated with the <TT>Jcomponent</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setLayout(LayoutManager)</TT></TD>
		<TD WIDTH="288">Sets the layout manager for the <TT>Box,</TT> because <TT>Box</TT> can only use <TT>BoxLayout</TT>,
			this method will throw an <TT>AWTException</TT> when invoked</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingBoxLayoutFONTTT"></A><TT>javax.swing.BoxLayout</TT></H3>
<P><TT>public class javax.swing.BoxLayout implements LayoutManager2, Serializable</TT></P>

<P>The <TT>BoxLayout</TT> layout manager will align components from either left to
right or top to bottom. In general, this class is not used directly because the <TT>Box</TT>
class provides additional methods used for screen design. In examining the following
method listing, note that some methods, although implemented due to interface requirements,
are not used by this class.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.BoxLayout</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final int X_AXIS</TT></TD>
		<TD WIDTH="288">Used to specify that components should be laid out in a horizontal fashion</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final int Y_AXIS</TT></TD>
		<TD WIDTH="288">Used to specify that components should be laid out in a vertical fashion</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addLayoutComponent (Component, Object)</TT></TD>
		<TD WIDTH="288">Unused in this class</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addLayoutComponent(String, Component)</TT></TD>
		<TD WIDTH="288">Unused in this class</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public float getLayoutAlignmentX (Container)</TT></TD>
		<TD WIDTH="288">Obtains the layout along the x-axis for the container passed as a parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public float getLayoutAlignmentY (Container)</TT></TD>
		<TD WIDTH="288">Obtains the layout along the y-axis for the container passed as a parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void invalidateLayout (Container)</TT></TD>
		<TD WIDTH="288">Causes information about the layout to be recalculated</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void layoutContainer (Container)</TT></TD>
		<TD WIDTH="288">Used by the AWT to make layout decisions when painting the screen</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Dimension maximumLayoutSize (Container)</TT></TD>
		<TD WIDTH="288">Obtains the maximum dimensions that the given <TT>Container </TT>object can fill</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Dimension minimumLayoutSize (Container)</TT></TD>
		<TD WIDTH="288">Obtains the minimum dimensions that the given <TT>Container </TT>object can comfortably
			fill</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Dimension preferredLayoutSize (Container)</TT></TD>
		<TD WIDTH="288">Obtains the preferred dimensions that the given <TT>Container</TT> object can fill</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeLayoutComponent (Component)</TT></TD>
		<TD WIDTH="288">Unused in this class</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingButtonGroupFONTTT"></A><TT>javax.swing.ButtonGroup</TT></H3>
<P><TT>public class javax.swing.ButtonGroup implements Serializable</TT></P>

<P>The <TT>ButtonGroup</TT> object is used to create an aggregate of button objects
in which one and only one button may sport a selected state at a given point in time.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.ButtonGroup</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void add(AbstractButton)</TT></TD>
		<TD WIDTH="288">Adds a button to the <TT>ButtonGroup</TT>'s collection</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Enumeration getElements()</TT></TD>
		<TD WIDTH="288">Obtains an enumeration of all objects in the <TT>ButtonGroup</TT>'s collection</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public ButtonModel getSelection()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the currently selected object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isSelected(ButtonModel)</TT></TD>
		<TD WIDTH="288">Returns true if the <TT>ButtonModel</TT> passed as a parameter is currently selected</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void remove(AbstractButton)</TT></TD>
		<TD WIDTH="288">Removes the <TT>AbstractButton</TT> object passed as a parameter from the <TT>ButtonGroup</TT>'s
			collection</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setSelected (ButtonModel, boolean)</TT></TD>
		<TD WIDTH="288">Sets the selected state for the <TT>ButtonModel</TT> object passed as parameter</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingGrayFilterFONTTT"></A><TT>javax.swing.GrayFilter</TT></H3>
<P><TT>public class javax.swing.GrayFilter extends RGBImageFilter</TT></P>

<P>The <TT>GrayFilter</TT> class is used to create a &quot;disabled&quot; version
of an <TT>Image</TT> by first turning it into a grayscale image and then brightening
its pixels.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.GrayFilter</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static Image createDisabledImage(Image)</TT></TD>
		<TD WIDTH="288">Obtains a &quot;disabled&quot; version of the <TT>Image</TT> object specified as
			a parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int filterRGB(int, int, int)</TT></TD>
		<TD WIDTH="288">Used to change a single pixel from its original state to the &quot;disabled&quot;
			state; subclasses must override this method</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingImageIconFONTTT"></A><TT>javax.swing.ImageIcon</TT></H3>
<P><TT>public class javax.swing.ImageIcon implements Icon, Serializable</TT></P>

<P>The <TT>ImageIcon</TT> class implements the <TT>Icon</TT> interface and allows
users to create <TT>Icon</TT> objects using an <TT>Image</TT> object.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.ImageIcon</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Constructors/Methods</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public ImageIcon()</TT></TD>
		<TD WIDTH="288">Creates an empty <TT>ImageIcon</TT> object, the source <TT>image</TT> can be set
			using the <TT>setImage()</TT> method</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public ImageIcon(Image)</TT></TD>
		<TD WIDTH="288">Creates an <TT>ImageIcon</TT> object using the source <TT>Image</TT> specified as
			a parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public ImageIcon(Image, String)</TT></TD>
		<TD WIDTH="288">Creates an <TT>ImageIcon</TT> object using the source <TT>Image</TT> specified as
			a parameter, and with a description specified as a <TT>String</TT> object parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public ImageIcon(String)</TT></TD>
		<TD WIDTH="288">Creates an <TT>ImageIcon</TT> object using a source image in the location specified
			by the <TT>String</TT> object parameter; once created, the <TT>Image</TT> object
			will be preloaded using the <TT>MediaTracker</TT> class</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public ImageIcon(String, String)</TT></TD>
		<TD WIDTH="288">Creates an <TT>ImageIcon</TT> object using a source image in the location specified
			by the <TT>String</TT> object parameter, and bearing the description of the second
			<TT>String</TT> object parameter; once created, the <TT>Image</TT> object will be
			preloaded using the <TT>MediaTracker</TT> class</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public ImageIcon(URL)</TT></TD>
		<TD WIDTH="288">Creates an <TT>ImageIcon</TT> object using a source image in the location specified
			by the URL object parameter; once created, the <TT>Image</TT> object will be preloaded
			using the <TT>MediaTracker</TT> class</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public ImageIcon(URL, String)</TT></TD>
		<TD WIDTH="288">Creates an <TT>ImageIcon</TT> object using a source image in the location specified
			by the URL object parameter, and bearing the description of the <TT>String</TT> object
			parameter; once created, the <TT>Image</TT> object will be preloaded using the <TT>MediaTracker</TT>
			class</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getDescription()</TT></TD>
		<TD WIDTH="288">Obtains a description of the <TT>ImageIcon</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getIconHeight()</TT></TD>
		<TD WIDTH="288">Obtains the height of the <TT>ImageIcon</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getIconWidth()</TT></TD>
		<TD WIDTH="288">Obtains the width of the <TT>ImageIcon</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Image getImage()</TT></TD>
		<TD WIDTH="288">Obtains the <TT>Image</TT> object used to produce the <TT>ImageIcon</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public ImageObserver getImageObserver()</TT></TD>
		<TD WIDTH="288">Obtains the <TT>ImageObserver </TT>object associated with the source image</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void loadImage(Image)</TT></TD>
		<TD WIDTH="288">Utility method used to force <TT>Image</TT> loading</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void paintIcon(Component, Graphics, int, int)</TT></TD>
		<TD WIDTH="288">Draws the <TT>Icon</TT> object into the specified <TT>Graphics</TT> object; the <TT>Component</TT>
			parameter is used to allow for discovery of default parameters like background color</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setDescription(String)</TT></TD>
		<TD WIDTH="288">Sets the description of the <TT>ImageIcon</TT> object to match the <TT>String</TT>
			parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setImage(Image)</TT></TD>
		<TD WIDTH="288">Sets the source image object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setImageObserver(ImageObserver)</TT></TD>
		<TD WIDTH="288">Sets the <TT>ImageObserver</TT> object</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJAppletFONTTT"></A><TT>javax.swing.JApplet</TT></H3>
<P><TT>public class javax.swing.JApplet extends Applet implements Accessible, RootPaneContainer</TT></P>

<P>The <TT>JApplet</TT> class extends <TT>java.applet.Applet</TT> to add functionality
unique to the Swing packages. When developing applets using Swing, developers should
subclass <TT>JApplet</TT> and not <TT>Applet</TT>. In examining the methods and example
associated with this class, a brief understanding of JFC views and panes is important.
If you have not read the introduction at the beginning on the <TT>javax.swing</TT>
section, please do so now.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JApplet</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected String accessibleContext</TT></TD>
		<TD WIDTH="288"><TT>String</TT> object representing the <TT>Accessible</TT> description of the object;
			external classes access this value through the <TT>getAccessibleDescription()</TT>
			method</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected JRootPane rootPane</TT></TD>
		<TD WIDTH="288">The root pane for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected boolean rootPaneCheckingEnabled</TT></TD>
		<TD WIDTH="288">If true, causes calls to <TT>add()</TT> and <TT>setLayout()</TT> to throw exceptions</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected JRootPane createRootPane()</TT></TD>
		<TD WIDTH="288">Creates the root pane for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext </TT>object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Container getContentPane()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>contentPane</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component getGlassPane()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>GlassPane</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JMenuBar getJMenuBar()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>JMenuBar</TT> object owned by this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JLayeredPane getLayeredPane()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>JLayeredPane</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JRootPane getRootPane()</TT></TD>
		<TD WIDTH="288">Obtains a reference to this object's <TT>JRootPane</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected boolean isRootPaneCheckingEnabled()</TT></TD>
		<TD WIDTH="288">Returns the state of the <TT>isRootPaneCheckingEnabled </TT>field</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void processKeyEvent(KeyEvent)</TT></TD>
		<TD WIDTH="288">Catches and processes key events that occur over this object and sends them on to
			interested parties</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setContentPane(Container)</TT></TD>
		<TD WIDTH="288">Sets the active <TT>ContentPane</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setGlassPane(Component)</TT></TD>
		<TD WIDTH="288">Sets the active <TT>GlassPane</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setJMenuBar(JMenuBar)</TT></TD>
		<TD WIDTH="288">Sets the active <TT>JMenuBar</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setLayeredPane(JLayeredPane)</TT></TD>
		<TD WIDTH="288">Sets the active <TT>JLayeredPane</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void setRootPane(JRootPane)</TT></TD>
		<TD WIDTH="288">Sets the active <TT>JRootPane</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void setRootPaneCheckingEnabled(boolean)</TT></TD>
		<TD WIDTH="288">Sets the value of the <TT>rootPaneCheckingEnabled </TT>field</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void update(Graphics g)</TT></TD>
		<TD WIDTH="288">Causes the <TT>JApplet</TT> to paint itself</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJButtonFONTTT"></A><TT>javax.swing.JButton</TT></H3>
<P><TT>public class javax.swing.JButton extends AbstractButton implements Accessible</TT></P>

<P>The <TT>JButton</TT> class is a JFC version of a common button. The Swing libraries
provide a richer collection of UI widgets than the AWT libraries, so this is not
the only available button class. The <TT>JButton</TT> is a standard &quot;push&quot;
type of button, but there are additional button classes, including a multi-state
button class. <TT>JButtons</TT> also differ from the <TT>Button</TT> class in <TT>java.awt</TT>
in that they can display an icon.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JButton</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Constructors/Methods</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JButton()</TT></TD>
		<TD WIDTH="288">Creates a default <TT>JButton</TT> object with no icon and no text</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JButton(Icon)</TT></TD>
		<TD WIDTH="288">Creates a <TT>JButton</TT> object with an icon and no text</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JButton(String)</TT></TD>
		<TD WIDTH="288">Creates a <TT>JButton</TT> object with text but no icon</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JButton(String, Icon)</TT></TD>
		<TD WIDTH="288">Creates a <TT>JButton</TT> object with both an icon and text</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains the logical name identifying the look and feel characteristics of this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isDefaultButton()</TT></TD>
		<TD WIDTH="288">Returns true if this button is the default button for the root pane</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isDefaultCapable()</TT></TD>
		<TD WIDTH="288">Returns true if the button is capable of becoming the default button</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setDefaultCapable(boolean)</TT></TD>
		<TD WIDTH="288">Sets the ability of the button to be the default button</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="288">Invoked by the <TT>UIFactory</TT> when the look and feel of the application has changed</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JButton</TT>: Example</H4>
<P>The following code example demonstrates the <TT>JButton</TT> class, the <TT>ImageButton</TT>
class, and the <TT>JFrame</TT> class.


<BLOCKQUOTE>
	<PRE>import javax.swing.*;

import java.awt.event.*;



public class ButtonDemo extends JPanel { 

    public ButtonDemo() { 

        Icon iconLuke = new ImageIcon(&quot;luke.gif&quot;);

        JButton btnLuke = new JButton(&quot;Luke&quot;, iconLuke);

        add(btnLuke);

     } 



    public static void main(String args[]) { 

        JFrame frmMain = new JFrame(&quot;Button Demo!&quot;);

        frmMain.getContentPane().add(new ButtonDemo());



         // Allow the program to be shut down by closing the

         // main window.

         frmMain.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                 System.exit(0);

             } 

         } );



        frmMain.pack();

        frmMain.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJCheckBoxFONTTT"></A><TT>javax.swing.JCheckBox</TT></H3>
<P><TT>public class javax.swing.JCheckBox extends JToggleButton implements Accessible</TT></P>

<P>The <TT>JCheckBox</TT> class is the JFC version of a standard checkbox. It's better
than traditional AWT checkboxes because it can display an icon in addition to a text
label.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JCheckBox</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Constructors/Methods</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JCheckBox()</TT></TD>
		<TD WIDTH="288">Creates a <TT>JCheckBox</TT> object with a false initial state, no icon, and no text
			label</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JCheckBox(Icon)</TT></TD>
		<TD WIDTH="288">Creates a <TT>JCheckBox</TT> object with a false initial state, an icon, and no text
			label</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JCheckBox(Icon, boolean)</TT></TD>
		<TD WIDTH="288">Creates a <TT>JCheckBox</TT> object with an initial state specified as a <TT>boolean</TT>
			parameter, an icon specified as an <TT>Icon</TT> parameter, and no text label</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JCheckBox(String)</TT></TD>
		<TD WIDTH="288">Creates a <TT>JCheckBox</TT> object with a false initial state, no icon, and a text
			label specified as a parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JCheckBox(String, boolean)</TT></TD>
		<TD WIDTH="288">Creates a <TT>JCheckBox</TT> object with an initial state specified as a <TT>boolean</TT>
			parameter, no icon, and a text label specified as a <TT>String</TT> parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JCheckBox(String, Icon)</TT></TD>
		<TD WIDTH="288">Creates a <TT>JCheckBox</TT> object with a false initial state, an icon specified
			by the <TT>Icon</TT> parameter, and a label specified by the <TT>String</TT> parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JCheckBox(String, Icon, boolean)</TT></TD>
		<TD WIDTH="288">Creates a <TT>JCheckBox</TT> object with an initial state specified by the <TT>boolean</TT>
			parameter, an icon specified by the <TT>Icon</TT> parameter, and a label specified
			by the <TT>String</TT> parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext </TT>object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains the logical name identifying the look and feel characteristics of this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="288">Invoked by the <TT>UIFactory</TT> when the look and feel of the application have
			changed</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JCheckBox</TT>: Example</H4>
<P>The following code example demonstrates the <TT>JLabel</TT> class, the <TT>JCheckBox</TT>
class, and the <TT>JFrame</TT> class:


<BLOCKQUOTE>
	<PRE>import javax.swing.*;

import java.awt.event.*;



public class CheckboxDemo extends JPanel { 

    public CheckboxDemo() { 

        JLabel lblOptions = new JLabel(&quot;Checkbox Demo&quot;);

        JCheckBox chkOn = new JCheckBox(&quot;Default Checked&quot;, true);

        JCheckBox chkOff = new JCheckBox(&quot;Default Unchecked&quot;, false);

        add(lblOptions);

        add(chkOn);

        add(chkOff);

   } 

   public static void main(String args[]) { 

        JFrame frmMain = new JFrame(&quot;Checkbox Demo!&quot;);

        frmMain.getContentPane().add(new CheckboxDemo());



         // Allow the program to be shut down by closing the

         // main window.

         frmMain.addWindowListener(new WindowAdapter() { 

             public void windowClosing(WindowEvent we) { 

                System.exit(0);

             } 

         } );



        frmMain.pack();

        frmMain.setVisible(true);

    } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJCheckBoxMenuItemFONTTT"></A><TT>javax.swing.JCheckBoxMenuItem</TT></H3>
<P><TT>public class javax.swing.ButtonGroup extends JMenuItem implements SwingConstants,
Accessible</TT></P>

<P>The <TT>JCheckBoxMenuItem</TT> class allows you to place an item in a pull-down
menu that has a checkbox and optionally displays an icon or text label.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JCheckBoxMenuItem</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Constructors/Methods</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JCheckBoxMenuItem()</TT></TD>
		<TD WIDTH="288">Creates a <TT>JCheckBoxMenuItem</TT> object with a false initial state, no icon,
			and no text label</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JcheckBoxMenuItem(Icon)</TT></TD>
		<TD WIDTH="288">Creates a <TT>JCheckBoxMenuItem</TT> object with a false initial state, an icon specified
			by the <TT>Icon</TT> parameter, and no text label</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JcheckBoxMenuItem(String)</TT></TD>
		<TD WIDTH="288">Creates a <TT>JCheckBoxMenuItem</TT> object with a false initial state, no icon,
			and a text label specified by the <TT>String</TT> parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JcheckBoxMenuItem(String, boolean)</TT></TD>
		<TD WIDTH="288">Creates a <TT>JCheckBoxMenuItem</TT> object with an initial state specified by the
			<TT>boolean</TT> parameter, no icon, and a text label specified by the <TT>String</TT>
			parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JcheckBoxMenuItem(String, Icon)</TT></TD>
		<TD WIDTH="288">Creates a <TT>JCheckBoxMenuItem</TT> object with a false initial state, an icon specified
			by the <TT>Icon</TT> parameter, and a text label specified by the <TT>String</TT>
			parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JcheckBoxMenuItem(String, Icon, boolean)</TT></TD>
		<TD WIDTH="288">Creates a <TT>JCheckBoxMenuItem</TT> object with an initial state specified by the
			<TT>boolean </TT>parameter, an icon specified by the <TT>Icon </TT>parameter, and
			a text label specified by the <TT>String</TT> parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext </TT>object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Object[] getSelectedObjects()</TT></TD>
		<TD WIDTH="288">Obtains all selected objects or null if the checkbox is not selected</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean getState()</TT></TD>
		<TD WIDTH="288">Obtains the current state (checked or unchecked) of this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains a description of this object's UI; will always be <TT>CheckBoxMenuItemUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void init(String, Icon)</TT></TD>
		<TD WIDTH="288">Called during initialization</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void requestFocus()</TT></TD>
		<TD WIDTH="288">Transfers focus to this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setState(boolean)</TT></TD>
		<TD WIDTH="288">Sets the current state of this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="288">Invoked when the look and feel parameters have been changed</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJColorChooserFONTTT"></A><TT>javax.swing.JColorChooser</TT></H3>
<P><TT>public class javax.swing.JColorChooser extends Jcomponent implements Accessible</TT></P>

<P>The <TT>JColorChooser</TT> class allows a user to visually pick and configure
a color for use in an application. In a painting program, for example, this class
could be used to let the user select the active brush color.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JColorChooser</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Constructors/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public JColorChooser()</TT></TD>
		<TD WIDTH="295">Creates a new <TT>JColorChooser</TT> object with an initial color of white</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public JColorChooser(Color)</TT></TD>
		<TD WIDTH="295">Creates a new <TT>JColorChooser</TT> object with an initial color specified by the
			color parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public JColorChooser (ColorSelectionModel)</TT></TD>
		<TD WIDTH="295">Creates a new <TT>JColorChooser </TT>object with the specified <TT>ColorSelectionModel</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addChooserPanel()</TT></TD>
		<TD WIDTH="295">Adds a <TT>chooser</TT> panel to the <TT>ColorChooser</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static JColorChooser createDialog(Component, String, boolean, JcolorChooser,
			ActionListener, ActionListener)</TT></TD>
		<TD WIDTH="295">Creates and returns a new <TT>JColorChooser</TT> object that is optionally modal
			(as specified by the <TT>boolean</TT> parameter)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Color getColor()</TT></TD>
		<TD WIDTH="295">Obtains a reference to the currently selected color as a <TT>Color</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public AccessibleContext getAccessibleContext()</TT></TD>
		<TD WIDTH="295">Obtains a reference to the <TT>AccessibleContext</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public AbstractColorChooserPanel[]getChooserPanels()</TT></TD>
		<TD WIDTH="295">Obtains a reference to the available color panels</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getColor()</TT></TD>
		<TD WIDTH="295">Obtains the currently selected color as an <TT>int</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Jcomponent getPreviewPanel()</TT></TD>
		<TD WIDTH="295">Obtains a reference to the <TT>getPreviewPanel</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public ColorSelectionModel getSelectionModel()</TT></TD>
		<TD WIDTH="295">Obtains a reference to the <TT>SelectionModel</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public ColorChooserUI getUI()</TT></TD>
		<TD WIDTH="295">Obtains a reference to the <TT>ColorChooserUI</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="295">Obtains the name of the<TT> ColorChooserUI</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public AbstractColorChooserPanel removeChooserPanel (AbstractChooserPanel)</TT></TD>
		<TD WIDTH="295">Removes the specified color panel</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setChooserPanels (AbstractColorChooserPanel[])</TT></TD>
		<TD WIDTH="295">Sets the available color panels</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setColor(Color)</TT></TD>
		<TD WIDTH="295">Sets the currently selected color using a <TT>Color</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setColor(int)</TT></TD>
		<TD WIDTH="295">Sets the currently selected color using an <TT>int</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setColor(int, int, int)</TT></TD>
		<TD WIDTH="295">Sets the currently selected color using three <TT>int</TT>s as red, green, and blue
			values</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setPreviewPanel(Jcomponent)</TT></TD>
		<TD WIDTH="295">Sets the current preview panel</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setSelectionModel (ColorSelectionModel)</TT></TD>
		<TD WIDTH="295">Sets the model containing the selected color</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setUI(ColorChooserUI)</TT></TD>
		<TD WIDTH="295">Sets the look-and-feel object used to render this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static Color showDialog(Component, String, Color)</TT></TD>
		<TD WIDTH="295">Creates and shows a new modal <TT>JColorChooser</TT> object; once showing, program
			flow will block and the selected color will be returned when the user clicks OK;
			if the user presses <TT>Cancel</TT> in the dialog, null will be returned</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="295">Notification that the look-and-feel has changed</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJComboBoxFONTTT"></A><TT>javax.swing.JComboBox</TT></H3>
<P><TT>public class javax.swing.JComboBox extends JComponent implements ItemSelectable,
ListDataListener, ActionListener, Accessible</TT></P>

<P>The <TT>JComboBox</TT> class is a JFC version of a combo box UI widget.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JComboBox</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void actionPerformed(ActionEvent)</TT></TD>
		<TD WIDTH="288">Implemented to fulfill the requirements of the <TT>ActionListener</TT> interface;
			should never be invoked or overridden</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addActionListener(ActionListener)</TT></TD>
		<TD WIDTH="288">Adds an <TT>ActionListener</TT> to the combo box's collection of listeners; a <TT>ActionListener</TT>
			is notified whenever the selected item changes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addItem(Object)</TT></TD>
		<TD WIDTH="288">Adds an item to the collection of items displayed in the combo box</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addItemListener(ItemListener)</TT></TD>
		<TD WIDTH="288">Adds an <TT>ItemListener</TT> to the combo box's collection of listeners; a <TT>ItemListener</TT>
			is notified whenever the selected item changes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void configureEditor(ComboBoxEditor, Object)</TT></TD>
		<TD WIDTH="288">Allows for editing of the given object using the given editor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void contentsChanged(ListDataEvent)</TT></TD>
		<TD WIDTH="288">Implemented to fulfill interface requirements; should not be invoked or overridden</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected JComboBox.KeySelectionManager createDefaultKeySelectionManager()</TT></TD>
		<TD WIDTH="288">Creates and returns a reference to the default <TT>KeySelectionManager </TT>object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void fireActionEvent()</TT></TD>
		<TD WIDTH="288">Used to send action events to listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void fireItemStateChanged(ItemEvent)</TT></TD>
		<TD WIDTH="288">Used to send item events to listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext </TT>object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected String getActionCommand()</TT></TD>
		<TD WIDTH="288">Obtains the action command used when sending events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public ComboBoxEditor getEditor()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the ComboBoxEditor responsible for painting and editing the
			selected item</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Object getItemAt(int)</TT></TD>
		<TD WIDTH="288">Obtains the item at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getItemCount()</TT></TD>
		<TD WIDTH="288">Obtains a count of all items</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JComboBox.KeySelectionManager getKeySelectionManager()</TT></TD>
		<TD WIDTH="288">Obtains the default <TT>KeySelectionManager</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getMaximumRowCount()</TT></TD>
		<TD WIDTH="288">Obtains the maximum row count for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public ComboBoxModel getModel()</TT></TD>
		<TD WIDTH="288">Obtains the model used to build this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public ListCellRenderer getRenderer()</TT></TD>
		<TD WIDTH="288">Obtains the renderer used to build this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getSelectedIndex()</TT></TD>
		<TD WIDTH="288">Obtains the index of the selected item</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Object getSelectedItem()</TT></TD>
		<TD WIDTH="288">Obtains the selected item</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Object[] getSelectedObjects()</TT></TD>
		<TD WIDTH="288">Obtains the selected item as the first element in an array; implemented due to interface
			requirements</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public ComboBoxUI getUI()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the UI used when building this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains the logical name of the UI used to build this object; will always be <TT>ComboBoxUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void hidePopup()</TT></TD>
		<TD WIDTH="288">Hides the pop-up portion of the combo box</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void insertItemAt(Object, int)</TT></TD>
		<TD WIDTH="288">Inserts a new item at the index specified by the <TT>int</TT> parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void installAncestorListener()</TT></TD>
		<TD WIDTH="288">&nbsp;</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void intervalAdded(ListDataEvent)</TT></TD>
		<TD WIDTH="288">Invoked when a new interval is added</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void intervalRemoved(ListDataEvent)</TT></TD>
		<TD WIDTH="288">Invoked when an interval is removed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isEditable()</TT></TD>
		<TD WIDTH="288">Returns true if the elements in the combo box are editable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isFocusTraversable()</TT></TD>
		<TD WIDTH="288">Returns true if the object can receive the focus</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isLightWeightPopupEnabled()</TT></TD>
		<TD WIDTH="288">Returns true if lightweight pop-ups are in use</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isPopupVisible()</TT></TD>
		<TD WIDTH="288">Returns true if the pop-up portion of the combo box is visible</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void processKeyEvent(KeyEvent)</TT></TD>
		<TD WIDTH="288">Invoked when a key event occurs; should never be invoked or overridden</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeActionListener(ActionListener)</TT></TD>
		<TD WIDTH="288">Removes an <TT>ActionListener </TT>from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeAllItems()</TT></TD>
		<TD WIDTH="288">Removes all items from the combo box</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeItem(Object)</TT></TD>
		<TD WIDTH="288">Removes the item specified as a parameter from the combo box</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeItemAt(int)</TT></TD>
		<TD WIDTH="288">Removes the item at the index specified as a parameter from the combo box</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeItemListener(ItemListener)</TT></TD>
		<TD WIDTH="288">Removes an <TT>ItemListener </TT>from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void selectedItemChanged()</TT></TD>
		<TD WIDTH="288">Used to send item events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean selectWithKeyChar(char)</TT></TD>
		<TD WIDTH="288">Performs a select with the given <TT>char</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setActionCommand(String)</TT></TD>
		<TD WIDTH="288">Sets the action command sent with events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setEditable(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether this object is editable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setEditor(ComboBoxEditor)</TT></TD>
		<TD WIDTH="288">Sets the active editor for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setEnabled(boolean)</TT></TD>
		<TD WIDTH="288">Enables or disables this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setKeySelectionManager (JComboBox.KeySelectionManager)</TT></TD>
		<TD WIDTH="288">Sets the key selection manager for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setLightWeightPopupEnabled (boolean)</TT></TD>
		<TD WIDTH="288">Sets whether or not to try to use a lightweight pop-up</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setMaximumRowCount(int)</TT></TD>
		<TD WIDTH="288">Sets the maximum row count for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setModel(ComboBoxModel)</TT></TD>
		<TD WIDTH="288">Sets the model used to build this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setPopupVisible(boolean)</TT></TD>
		<TD WIDTH="288">Sets the visibility of the popup portion of the combo box</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setRenderer(ListCellRenderer)</TT></TD>
		<TD WIDTH="288">Sets the renderer used to build this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setSelectedIndex(int)</TT></TD>
		<TD WIDTH="288">Sets the currently selected item based on an index parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setSelectedItem(Object)</TT></TD>
		<TD WIDTH="288">Sets the currently selected item based on the <TT>Object</TT> parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setUI(ComboBoxUI)</TT></TD>
		<TD WIDTH="288">Sets the UI used to build this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void showPopup()</TT></TD>
		<TD WIDTH="288">Forces the combo box pop-up to show</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="288">Invoked when the UI look-and-feel parameters are changed</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JComboBox</TT>: Example</H4>


<BLOCKQUOTE>
	<PRE>import javax.swing.*;

import java.awt.event.*;



public class JComboBoxDemo extends JPanel { 

       public JComboBoxDemo() { 

           JLabel lblTitle = new JLabel

          (&quot;Chose your favorite author, or entry your own&quot;);

           String[] sChoices 

          = { &quot;Rand&quot;, &quot;Cassady-Dorion&quot;, &quot;Gibson&quot;, &quot;Stepenson&quot;} 

JComboBox jcCombo = new JComboBox();

int iLength = sChoices.length;

for (int i=0;i&lt;iLength; jcCombo.addItem(sChoices[i++]));

        jcCombo.setEditable(true);

           add(lblTitle);

        add(jcCombo);

} 

      public static void main(String args[]) { 

           JFrame frmMain = new JFrame(&quot;JComboBox Demo!&quot;);

           frmMain.getContentPane().add(new JComboBoxDemo ());



           // Allow the program to be shut down by closing the

           // main window.

           frmMain.addWindowListener(new WindowAdapter() { 

              public void windowClosing(WindowEvent we) { 

                  System.exit(0);

              } 

           } );



           frmMain.pack();

           frmMain.setVisible(true);

       } 

} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJComponentFONTTT"></A><TT>javax.swing.JComponent</TT></H3>
<P><TT>public abstract class JComponent extends Container implements Serializable</TT></P>

<P>The JComponent class is the base class for all Swing components. It implements
basic functionality for a pluggable UI, ToolTips, Action object, borders, auto-scrolling,
accessibility, simplified dialog construction, and internationalization.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JComponent</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected AccessibleContext accessibleContext</TT></TD>
		<TD WIDTH="295">Used for accessibility support</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected EventListenerList listenerList</TT></TD>
		<TD WIDTH="295">Collection of <TT>EventListener</TT> objects</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final String TOOL_TIP_TEXT_KEY</TT></TD>
		<TD WIDTH="295">Text displayed in the ToolTip for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int UNDEFINED_CONDITION</TT></TD>
		<TD WIDTH="295">Constant used by certain classes to signify an undefined condition</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int WHEN_ANCESTOR_OF_FOCUSED_COMPONENT</TT></TD>
		<TD WIDTH="295">Constant used by <TT>registerKeyboardAction() </TT>to mean that the component should
			receive events when it is the ancestor of a component that has focus</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int WHEN_FOCUSED</TT></TD>
		<TD WIDTH="295">Constant used by <TT>registerKeyboardAction()</TT> to mean that the component should
			receive events when it has focus</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final int WHEN_IN_FOCUSED_WINDOW</TT></TD>
		<TD WIDTH="295">Constant used by <TT>registerKeyboardAction() </TT>to mean that the component should
			receive events when it is contained in a window that has focus</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addAncestorListener(AncestorListener)</TT></TD>
		<TD WIDTH="295">Adds an <TT>AncestorListener </TT>to the object's collection of listeners; an <TT>AncestorListener</TT>
			is notified whenever an ancestor of a given object is added, removed, hidden, or
			shown</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addNotify()</TT></TD>
		<TD WIDTH="295">Notification to this component that it now has a parent component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addPropertyChangeListener (PropertyChangeListener)</TT></TD>
		<TD WIDTH="295">Adds a PropertyChangeListener to the object's collection of listeners; a PropertyChangeListener
			is notified whenever a bound property value is changed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addVetoableChangeListener (VetoableChangeListener)</TT></TD>
		<TD WIDTH="295">Adds a VetoableChangeListener to the object's collection of listeners; a PropertyChangeListener
			is notified whenever a constrained property value is changed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void computeVisibleRect(Rectangle)</TT></TD>
		<TD WIDTH="295">Places the value of the component's visible rectangle inside the Rectangle parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean contains(int, int)</TT></TD>
		<TD WIDTH="295">Returns true if the specified point is within the bounds of the component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public JtoolTip createToolTip()</TT></TD>
		<TD WIDTH="295">Creates and returns the JToolTop object that should be displayed for this object;
			to display context-sensitive tooltips, you would override this method</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void firePropertyChange (String, boolean, boolean)</TT></TD>
		<TD WIDTH="295">Sends an event indicating a bound property change</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void firePropertyChange (String, byte, byte)</TT></TD>
		<TD WIDTH="295">Sends an event indicating a bound property change</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void firePropertyChange (String, char, char)</TT></TD>
		<TD WIDTH="295">Sends an event indicating a bound property change</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void firePropertyChange (String, double, double)</TT></TD>
		<TD WIDTH="295">Sends an event indicating a bound property change</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void firePropertyChange (String, float, float)</TT></TD>
		<TD WIDTH="295">Sends an event indicating a bound property change</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void firePropertyChange (String, int, int)</TT></TD>
		<TD WIDTH="295">Sends an event indicating a bound property change</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void firePropertyChange (String, long, long)</TT></TD>
		<TD WIDTH="295">Sends an event indicating a bound property change</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void firePropertyChange (String, Object, Object)</TT></TD>
		<TD WIDTH="295">Sends an event indicating a bound property change</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void firePropertyChange (String, short, short)</TT></TD>
		<TD WIDTH="295">Sends an event indicating a bound property change</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void fireVetoableChange (String, Object, Object)</TT></TD>
		<TD WIDTH="295">Sends an event indicating a constrained property change</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public AccessibleContext getAccessibleContext()</TT></TD>
		<TD WIDTH="295">Obtains a reference to the <TT>AccessibleContext </TT>object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public ActionListener getActionForKeyStroke(KeyStroke)</TT></TD>
		<TD WIDTH="295">Obtains the <TT>ActionListener</TT> associated with the given keystroke</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public float getAlignmentX()</TT></TD>
		<TD WIDTH="295">Obtains this component's alignment along the x-axis</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public float getAlignmentY()</TT></TD>
		<TD WIDTH="295">Obtains this component's alignment along the y-axis</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean getAutoscrolls()</TT></TD>
		<TD WIDTH="295">Returns true if this component scrolls automatically when its contents are adjusted</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Border getBorder()</TT></TD>
		<TD WIDTH="295">Obtains the border associated with this object, or null if none exists</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Rectangle getBounds(Rectangle)</TT></TD>
		<TD WIDTH="295">Places the bounds for this component in the <TT>Rectangle</TT> parameter and returns
			that value</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public final Object getClientProperty(Object)</TT></TD>
		<TD WIDTH="295">Obtains the property associated with the given key</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected Graphics getComponentGraphics(Graphics)</TT></TD>
		<TD WIDTH="295">Obtains the <TT>Graphics </TT>bject used to paint the component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getConditionForKeyStroke(KeyStroke)</TT></TD>
		<TD WIDTH="295">Obtains the execution condition associated with the given keystroke</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getDebugGraphicsOptions()</TT></TD>
		<TD WIDTH="295">Obtains the current debug graphics state</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Graphics getGraphics()</TT></TD>
		<TD WIDTH="295">Obtains the <TT>Graphics</TT> object used to paint this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getHeight()</TT></TD>
		<TD WIDTH="295">Obtains the height of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Insets getInsets()</TT></TD>
		<TD WIDTH="295">Obtains the <TT>Insets</TT> object associated with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Insets getInsets(Insets)</TT></TD>
		<TD WIDTH="295">Stores the insets in the specified <TT>Insets</TT> object and returns that object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Point getLocation(Point)</TT></TD>
		<TD WIDTH="295">Places the current location of this component both in the <TT>Point</TT> object parameter
			and in the return value of this method</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getMaximumSize()</TT></TD>
		<TD WIDTH="295">Obtains the maximum size this component can take on</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getMinimumSize()</TT></TD>
		<TD WIDTH="295">Obtains the minimum size this component can fill</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Component getNextFocusableComponent()</TT></TD>
		<TD WIDTH="295">Obtains the next component that should receive focus, or null if the focus manager
			is to determine the component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getPreferredSize()</TT></TD>
		<TD WIDTH="295">Obtains the preferred size for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public KeyStroke[]getRegisteredKeyStrokes()</TT></TD>
		<TD WIDTH="295">Obtains all keystrokes that can initiate registered actions</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public JrootPane getRootPane()</TT></TD>
		<TD WIDTH="295">Obtains the <TT>JRootPane</TT> to which the component belongs</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getSize(Dimension)</TT></TD>
		<TD WIDTH="295">Places the size of the component both in the <TT>Dimension</TT> parameter and in
			the method return value</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Point getToolTipLocation(MouseEvent)</TT></TD>
		<TD WIDTH="295">Obtains the preferred location for the ToolTip associated with this component; if
			null is returned, a location will be chosen automatically</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getToolTipText()</TT></TD>
		<TD WIDTH="295">Obtains the text to be used in displaying the ToolTip for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>getToolTipText(MouseEvent)</TT></TD>
		<TD WIDTH="295">Obtains the text to be used in displaying the ToolTip for this component; if context-sensitive
			tooltips are used, this method is passed to the active location of the mouse</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Container getTopLevelAncestor()</TT></TD>
		<TD WIDTH="295">Obtains the top level container or null if the component does not belong to another
			container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="295">Obtains the logical name for this component's UI</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Rectangle getVisibleRect()</TT></TD>
		<TD WIDTH="295">Obtains the visible rectangle for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getWidth()</TT></TD>
		<TD WIDTH="295">Obtains the width of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getX()</TT></TD>
		<TD WIDTH="295">Obtains the location of this component along the x-axis</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getY()</TT></TD>
		<TD WIDTH="295">Obtains the location of this component along the y-axis</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void grabFocus()</TT></TD>
		<TD WIDTH="295">Used by the focus manager to obtain focus for this component; in general, it is a
			good practice to call <TT>requestFocus()</TT> instead</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean hasFocus()</TT></TD>
		<TD WIDTH="295">Returns true if this component has focus, false otherwise</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isDoubleBuffered()</TT></TD>
		<TD WIDTH="295">Returns true if this component is using double-buffering to paint itself, false otherwise</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isFocusCycleRoot()</TT></TD>
		<TD WIDTH="295">If your component is part of a component tree with its own focus cycle, you will
			want to override this method and return true</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isFocusTraversable()</TT></TD>
		<TD WIDTH="295">Returns true if this component can receive focus when the user tabs through the screen</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static boolean isLightweightComponent(Component)</TT></TD>
		<TD WIDTH="295">Returns true if this component is lightweight, meaning that it does not have a native
			peer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isManagingFocus()</TT></TD>
		<TD WIDTH="295">If your component is managing its own focus, override this method and return true</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isOpaque()</TT></TD>
		<TD WIDTH="295">Returns true if this component is completely opaque</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isOptimizedDrawingEnabled()</TT></TD>
		<TD WIDTH="295">Returns true if this component has optimized its drawing by ensuring that none of
			its children overlap</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isPaintingTile()</TT></TD>
		<TD WIDTH="295">Returns true if this component is currently in the process of painting a tile</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isRequestFocusEnabled()</TT></TD>
		<TD WIDTH="295">Returns true if the <TT>requestFocus()</TT> method will function properly for this
			component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void paint(Graphics)</TT></TD>
		<TD WIDTH="295">Invoked when this component should draw itself into the specified <TT>Graphics</TT>
			object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void paintBorder (protected void paintBorder(Graphics)</TT></TD>
		<TD WIDTH="295">Invoked when this component should draw its border into the specified <TT>Graphics</TT>
			object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void paintChildren(Graphics)</TT></TD>
		<TD WIDTH="295">Invoked when this component should draw its children into the specified <TT>Graphics</TT>
			object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void paintComponent(Graphics)</TT></TD>
		<TD WIDTH="295">Method used to transfer the <TT>Graphics</TT> object to a UI-delegate, assuming one
			exists</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void paintImmediately(int, int, int, int)</TT></TD>
		<TD WIDTH="295">Forces an immediate paint of the specified region</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processComponentKeyEvent (KeyEvent e)</TT></TD>
		<TD WIDTH="295">Invoked when a key event occurs that the component itself recognizes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processFocusEvent</TT></TD>
		<TD WIDTH="295">Invoked when a focus event occurs</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void paintImmediately(Rectangle)</TT></TD>
		<TD WIDTH="295">Forces an immediate paint of the specified region</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void processKeyEvent(KeyEvent)</TT></TD>
		<TD WIDTH="295">Invoked when a key event occurs</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public protected processMouseMotionEvent(MouseEvent)</TT></TD>
		<TD WIDTH="295">Invoked when a mouse motion event occurs</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void putClientProperty(Object, Object)</TT></TD>
		<TD WIDTH="295">Adds the specified property and key to the client property collection</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void registerKeyboardAction (ActionListener, KeyStroke, int)</TT></TD>
		<TD WIDTH="295">Registers an <TT>ActionListener</TT> object to receive events when the specified
			keystroke occurs</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeAncestorListener (AncestorListener)</TT></TD>
		<TD WIDTH="295">Removes the <TT>AncestorListener </TT>specified as a parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeNotify()</TT></TD>
		<TD WIDTH="295">Invoked when this component no longer has a parent</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removePropertyChangeListener(PropertyChangeListener)</TT></TD>
		<TD WIDTH="295">Removes the specified<TT> PropertyChangeListener </TT>from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeVetoableChangeListener (VetoableChangeListener)</TT></TD>
		<TD WIDTH="295">Removes the specified <TT>VetoableChangeListener </TT>from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void repaint(long, int, int, int, int)</TT></TD>
		<TD WIDTH="295">Adds the area specified as a parameter to the list of regions that need to be repainted
			if the component is showing</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void repaint(Rectangle)</TT></TD>
		<TD WIDTH="295">Adds the area specified as a parameter to the list of regions that need to be repainted
			if the component is showing</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void requestDefaultFocus()</TT></TD>
		<TD WIDTH="295">Requests that focus be given to the component that should have focus by default</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void requestFocus()</TT></TD>
		<TD WIDTH="295">Requests that focus be given to this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void resetKeyboardActions()</TT></TD>
		<TD WIDTH="295">Deletes all stored keyboard actions</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void reshape(int, int, int, int)</TT></TD>
		<TD WIDTH="295">Resizes the component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void revalidate()</TT></TD>
		<TD WIDTH="295">Allows deferred automatic layout</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void scrollRectToVisible(Rectangle)</TT></TD>
		<TD WIDTH="295">Attempts to show the region specified as a parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setAlignmentX(float)</TT></TD>
		<TD WIDTH="295">Sets the x-alignment for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setAlignmentY(float)</TT></TD>
		<TD WIDTH="295">Sets the y-alignment for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setAutoscrolls(boolean)</TT></TD>
		<TD WIDTH="295">Sets whether this component can automatically scroll its contents</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setBorder(Border)</TT></TD>
		<TD WIDTH="295">Sets the border to be drawn with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setBounds(int, int, int, int)</TT></TD>
		<TD WIDTH="295">Sets the bounding coordinates for the component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setDebugGraphicsOptions(int)</TT></TD>
		<TD WIDTH="295">Either enables or disables debug graphics information</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setDoubleBuffered(boolean)</TT></TD>
		<TD WIDTH="295">Sets whether this component should buffer all drawing before moving it to the screen</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setEnabled(boolean)</TT></TD>
		<TD WIDTH="295">Sets the enabled state of the component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setMaximumSize(Dimension)</TT></TD>
		<TD WIDTH="295">Sets the maximum size this component can fill</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setMinimumSize(Dimension)</TT></TD>
		<TD WIDTH="295">Sets the minimum size this component can use</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setNextFocusableComponent(Component)</TT></TD>
		<TD WIDTH="295">Sets the component that should receive focus after this component; focus is generally
			transferred when the Tab key is pressed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setOpaque(boolean)</TT></TD>
		<TD WIDTH="295">Determines whether the components background is filled with the background color</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setPreferredSize(Dimension)</TT></TD>
		<TD WIDTH="295">Sets the preferred size for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setRequestFocusEnabled(boolean)</TT></TD>
		<TD WIDTH="295">Sets whether this component can successfully obtain focus by invoking <TT>requestFocus()</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setToolTipText(String)</TT></TD>
		<TD WIDTH="295">Sets the ToolTip text to be displayed with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void setUI(ComponentUI)</TT></TD>
		<TD WIDTH="295">Sets the UI associated with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setVisible(boolean)</TT></TD>
		<TD WIDTH="295">Sets the visible state of the component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void unregisterKeyboardAction(KeyStroke)</TT></TD>
		<TD WIDTH="295">Removes a keyboard action from the list ofregistered actions</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void update(Graphics)</TT></TD>
		<TD WIDTH="295">Updates this component; this method is called immediately before <TT>paint()</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="295">Invoked when the active look and feel parameters have changed</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJDialogFONTTT"></A><TT>javax.swing.JDialog</TT></H3>
<P><TT>public class JDialog extends Dialog implements WindowConstants, Accessible,
RootPaneContainer</TT></P>

<P>The JDialog class is used to display either a modal or modeless dialog to a user.
When customizing the UI for a given dialog, children are not added directly to the
JDialog object, but are added to its child obtained by invoking getContentPane().</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JDialog</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected JRootPane createRootPane()</TT></TD>
		<TD WIDTH="288">Invoked internally to create the root pane</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void dialogInit()</TT></TD>
		<TD WIDTH="288">Invoked internally to perform initialization tasks</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext </TT>object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Container getContentPane()</TT></TD>
		<TD WIDTH="288">Obtains the content pane for this object; when customizing the UI for a <TT>JDialog</TT>
			object, component additions must be made to the content pane and not the <TT>JDialog</TT>
			itself</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getDefaultCloseOperation()</TT></TD>
		<TD WIDTH="288">Obtains the default operation that is initiated when the window is closed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component getGlassPane()</TT></TD>
		<TD WIDTH="288">Obtains the <TT>GlassPane</TT> object for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JmenuBar() getJMenuBar()</TT></TD>
		<TD WIDTH="288">Obtains the <TT>JmenuBar </TT>object for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JLayeredPane getLayeredPane()</TT></TD>
		<TD WIDTH="288">Obtains the <TT>JLayeredPane</TT> object associated with this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JRootPane getRootPane()</TT></TD>
		<TD WIDTH="288">Obtains the <TT>JRootPane</TT> object associated with this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected isRootPaneCheckingEnabled()</TT></TD>
		<TD WIDTH="288">Returns the state of the <TT>RootPaneCheckingEnabled </TT>variable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setContentPane(Container)</TT></TD>
		<TD WIDTH="288">Sets the content pane for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setDefaultCloseOperation(int)</TT></TD>
		<TD WIDTH="288">Sets the default operation that should execute when the window closes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setGlassPane(Component)</TT></TD>
		<TD WIDTH="288">Sets the <TT>GlassPane</TT> used when displaying this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setJMenuBar(JmenuBar)</TT></TD>
		<TD WIDTH="288">Sets <TT>the JDialog's</TT> menu bar to the specified <TT>JmenuBar</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setLayeredPane(JLayeredPane)</TT></TD>
		<TD WIDTH="288">Sets the <TT>JLayeredPane</TT> object associated with this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setLocationRelativeTo(Component)</TT></TD>
		<TD WIDTH="288">Sets the location of the <TT>JDialog</TT> object near the <TT>Component</TT> parameter;
			if the <TT>Component</TT> is not showing, the <TT>JDialog</TT> object will be centered
			on the screen</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void setRootPane(JRootPane)</TT></TD>
		<TD WIDTH="288">Sets the <TT>JRootPane</TT> object associated with this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void setRootPaneCheckingEnabled (boolean)</TT></TD>
		<TD WIDTH="288">Sets the state of the <TT>rootPaneCheckingEnabled </TT>field</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void update(Graphics)</TT></TD>
		<TD WIDTH="288">Causes the dialog to paint itself</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJEditorPaneFONTTT"></A><TT>javax.swing.JEditorPane</TT></H3>
<P><TT>public class JEditorPane extends JTextComponent</TT></P>

<P>The JEditorPane class is used to display text in various rich formats, including
RTF and HTML.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JEditorPane</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addHyperlinkListener (HyperlinkListener)</TT></TD>
		<TD WIDTH="288">Adds a <TT>HyperlinkListener </TT>to the group of listener's objects; links are selected
			and entered, and so on</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected EditorKit createDefaultEditorKit()</TT></TD>
		<TD WIDTH="288">Called during initialization to create the <TT>PlainEditorKit</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static EditorKit createEditorKitForContentType(String)</TT></TD>
		<TD WIDTH="288">Create an <TT>EditorKit</TT> for the specified type from the registry of kits</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void fireHyperlinkUpdate (HyperlinkEvent)</TT></TD>
		<TD WIDTH="288">Notify hyperlink listeners of a hyperlink event</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext </TT>object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getContentType()</TT></TD>
		<TD WIDTH="288">Obtains the name of the content type that the editor pane handles</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public EditorKit getEditorKit()</TT></TD>
		<TD WIDTH="288">Obtains the current editor kit for handling content</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public EditorKit getEditorKitForContentType(String)</TT></TD>
		<TD WIDTH="288">Obtains the <TT>EditorKit</TT> to use for the specified content type</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public URL getPage()</TT></TD>
		<TD WIDTH="288">Obtains the URL used to supply the current text</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean getScrollableTracksViewportWidth()</TT></TD>
		<TD WIDTH="288">Returns true if the width of the view port should always match the width of the scrollable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains the class ID associated with this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isManagingFocus()</TT></TD>
		<TD WIDTH="288">Returns true if the component turns off tab traversal once it gains the focus</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static void registerEditorKitForContentType (String, String, ClassLoader)</TT></TD>
		<TD WIDTH="288">Sets the default <TT>EditorKit</TT> to use for the specified content type</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static void registerEditorKitForContentType (String, String)</TT></TD>
		<TD WIDTH="288">Sets the default <TT>EditorKit</TT> to use for the specified content type; uses the
			default <TT>ClassLoader</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeHyperlinkListener (HyperlinkListener)</TT></TD>
		<TD WIDTH="288">Removes the specified <TT>HyperlinkListener</TT> from the group of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void scrollToReference(String)</TT></TD>
		<TD WIDTH="288">Scroll to the given reference</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setContentType(String)</TT></TD>
		<TD WIDTH="288">Sets the content type handled by this editor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setEditorKit(EditorKit)</TT></TD>
		<TD WIDTH="288">Sets the EditorKit used to handle content</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setEditorKit (String, EditorKit)</TT></TD>
		<TD WIDTH="288">Sets the <TT>EditorKit</TT> used to handle the specified content type</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setPage(String)</TT></TD>
		<TD WIDTH="288">Sets the current URL being displayed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setPage(URL)</TT></TD>
		<TD WIDTH="288">Sets the current URL being displayed</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJFileChooserFONTTT"></A><TT>javax.swing.JFileChooser</TT></H3>
<P><TT>public class JfileChooser extends Jcomponent implements Accessible</TT></P>

<P>The JFileChooser class is a file-system browser that can be used to allow a user
to select a file.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JFileChooser</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean accept(File)</TT></TD>
		<TD WIDTH="288">Returns true if the specified file should be included in the list of files to choose
			from</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public voi addActionListener(ActionListener)</TT></TD>
		<TD WIDTH="288">Adds an <TT>ActionListener</TT> to the component's group of action listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addChooseableFileFilter(FileFilter)</TT></TD>
		<TD WIDTH="288">Adds a file type to the list that the user can use to filter by</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void approveSelection()</TT></TD>
		<TD WIDTH="288">Notification that the user has selected the approve button</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void changeToParentDirectory()</TT></TD>
		<TD WIDTH="288">Set the new current directory to be the parent directory of the current directory</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void ensureFileIsVisible(File f)</TT></TD>
		<TD WIDTH="288">Force the specified file to become visible</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void fireActionPerformed(String)</TT></TD>
		<TD WIDTH="288">Dispatch a notification to all action listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public FileFilter getAcceptAllFileFilter()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AcceptAll</TT> file filter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext </TT>object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component getAccessory()</TT></TD>
		<TD WIDTH="288">Obtains the accessory component associated with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getApproveButtonMnemonic()</TT></TD>
		<TD WIDTH="288">Obtains the mnemonic for the approve button</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getApproveButtonText()</TT></TD>
		<TD WIDTH="288">Obtains the text displayed by the approve button</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getApproveButtonToolTipText()</TT></TD>
		<TD WIDTH="288">Obtains the text displayed as a tool tip</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public FileFilter[]getChoosableFileFilters()</TT></TD>
		<TD WIDTH="288">Obtains a list of user-selectable file filters Methods/Events Description</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public File getCurrentDirectory()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the current directory</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getDescription(File)</TT></TD>
		<TD WIDTH="288">Obtains a description of the specified file</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getDialogTitle()</TT></TD>
		<TD WIDTH="288">Obtains the text displayed in the dialog's title bar</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getDialogType()</TT></TD>
		<TD WIDTH="288">Obtains the mode of the dialog (open or save)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public FileFilter getFileFilter()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the currently selected file filter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getFileSelectionMode()</TT></TD>
		<TD WIDTH="288">Obtains the mode of file selection</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public FileSystemView getFileSystemView()</TT></TD>
		<TD WIDTH="288">Obtains the current <TT>FileSystemView</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Icon getIcon(File f)</TT></TD>
		<TD WIDTH="288">Obtains a reference to the icon used when displaying the specified file</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getName(File f)</TT></TD>
		<TD WIDTH="288">Obtains the name of the specified file</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public File getSelectedFile()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the currently selected file</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public File[] getSelectedFiles()</TT></TD>
		<TD WIDTH="288">Obtains a list of all selected files</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getTypeDescription(File)</TT></TD>
		<TD WIDTH="288">Obtains a description of the current file's type</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public FileChooserUI getUI()</TT></TD>
		<TD WIDTH="288">Obtains the <TT>FileChooserUI</TT> object associated with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains a logical description of the UI; will always return <TT>FileChooserUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isDirectorySelectionEnabled()</TT></TD>
		<TD WIDTH="288">Returns true if directories are selectable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isFileHidingEnabled()</TT></TD>
		<TD WIDTH="288">Returns true if hidden files are not shown</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isFileSelectionEnabled()</TT></TD>
		<TD WIDTH="288">Returns true if files are selectable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isTraversable(File)</TT></TD>
		<TD WIDTH="288">Returns true if the specified file is traversable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeActionListener(ActionListener)</TT></TD>
		<TD WIDTH="288">Remove the specified <TT>ActionListener</TT> from the group of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean removeChoosableFileFilter(FileFilter)</TT></TD>
		<TD WIDTH="288">Remove the specified filter from the group of user selectable file filters</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void rescanCurrentDireactory()</TT></TD>
		<TD WIDTH="288">Force a rescan on the files of the current directory</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void resetChoosableFileFilters()</TT></TD>
		<TD WIDTH="288">Return the user choosable file filter list to its default state</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setAccessory(Component)</TT></TD>
		<TD WIDTH="288">Assigns the accessory component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setApprovedButtonMnemonic(char)</TT></TD>
		<TD WIDTH="288">Sets the keyboard shortcut for the approve button</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setApprovedButtonMnemonic(int)</TT></TD>
		<TD WIDTH="288">Sets the keyboard shortcut for the approve button</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setApprovedButtonText(String)</TT></TD>
		<TD WIDTH="288">Sets the text displayed by the approved button</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setApproveButtonToolTip(String)</TT></TD>
		<TD WIDTH="288">Sets the tooltip that will be displayed by the approve button</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setCurrentDirectory(File)</TT></TD>
		<TD WIDTH="288">Sets the current directory to the specified file</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setDialogTitle(String)</TT></TD>
		<TD WIDTH="288">Sets the text to be displayed in the dialog's title bar</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setDialogType(int)</TT></TD>
		<TD WIDTH="288">Sets the mode of the dialog</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setFileFilter(FileFilter)</TT></TD>
		<TD WIDTH="288">Sets the current file filter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setFileHidingEnabled(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether or not hidden files are displayed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setFileSelectionMode(in)</TT></TD>
		<TD WIDTH="288">Sets what types of files may be selected (file, directory or both)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setFileView()</TT></TD>
		<TD WIDTH="288">Sets the current view</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setMultiSelectionEnabled(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether or not multiple files can be selected</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setSelectedFile(File)</TT></TD>
		<TD WIDTH="288">Sets the currently selected file</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setSelectedFiles(File[])</TT></TD>
		<TD WIDTH="288">Sets the currently selected files</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected setup(FileSystemView)</TT></TD>
		<TD WIDTH="288">Called during initialization</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int showDialog(Component)</TT></TD>
		<TD WIDTH="288">Shows the <TT>JFileChooser</TT> object relative to the <TT>Component</TT> object
			specified as a parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int showOpenDialog(Component)</TT></TD>
		<TD WIDTH="288">Shows the <TT>JfileChooser</TT> in the &quot;Open File&quot; mode</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int showSaveDialog(Component)</TT></TD>
		<TD WIDTH="288">Shows the <TT>JfileChooser</TT> in the &quot;Close File&quot; mode</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="288">Invoked to indicate a UI look-and-feel change</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJFrameFONTTT"></A><TT>javax.swing.JFrame</TT></H3>
<P><TT>public class JFrame extends Frame implements WindowConstants, Accessible,
RootPaneContainer</TT></P>

<P>The JFrame class extends java.awt.Frame, introducing a series of new features
unique to Swing. The one major difference between this class and Frame is that children
may not be added directly to the JFrame object. As an alternative, children must
be added to the content pane that is obtained using the getContentPane() method.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JFrame</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void addImpl(Component, Object, int)</TT></TD>
		<TD WIDTH="288">Adds the specified component to the <TT>Jframe </TT>object at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected JRootPane createRootPane()</TT></TD>
		<TD WIDTH="288">Invoked by the constructors to create the <TT>JRootPane</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void frameInit()</TT></TD>
		<TD WIDTH="288">Invoked by the constructors to perform initialization tasks</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext </TT>object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Container getContentPane()</TT></TD>
		<TD WIDTH="288">Obtains the content pane for this object; when customizing the UI for a <TT>JFrame</TT>
			object, component additions must be made to the content pane and not the <TT>JFrame</TT>
			itself</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getDefaultCloseOperation()</TT></TD>
		<TD WIDTH="288">Obtains the default operation that is initiated when the window is closed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component getGlassPane()</TT></TD>
		<TD WIDTH="288">Obtains the <TT>GlassPane</TT> object for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JMenuBar()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>JMenuBar</TT> for this <TT>JFrame</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JLayeredPane getLayeredPane()</TT></TD>
		<TD WIDTH="288">Obtains the <TT>JLayeredPane</TT> object associated with this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JRootPane getRootPane()</TT></TD>
		<TD WIDTH="288">Obtains the <TT>JRootPane</TT> object associated with this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected boolean isRootPaneCheckingEnabled()</TT></TD>
		<TD WIDTH="288">Returns true if exceptions are thrown when <TT>add()</TT> or <TT>setLayout() </TT>is
			called</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void processKeyEvent(KeyEvent)</TT></TD>
		<TD WIDTH="288">Invoked when a key event occurs</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void processWindowEvent(WindowEvent)</TT></TD>
		<TD WIDTH="288">Invoked when a window event occurs</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setContentPane(Container)</TT></TD>
		<TD WIDTH="288">Sets the content pane for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setDefaultCloseOperation(int)</TT></TD>
		<TD WIDTH="288">Sets the default operation that should execute when the window closes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setGlassPane(Component)</TT></TD>
		<TD WIDTH="288">Sets the glass pane used when displaying this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setJMenuBar(JmenuBar)</TT></TD>
		<TD WIDTH="288">Sets the menu bar associated with this frame</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setLayeredPane(JLayeredPane)</TT></TD>
		<TD WIDTH="288">Sets the <TT>JLayeredPane</TT> object associated with this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setRootPane(JRootPane)</TT></TD>
		<TD WIDTH="288">Sets the <TT>JRootPane</TT> object associated with this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void setRootPaneCheckingEnabled(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether or not calls to <TT>add()</TT> or <TT>setLayout()</TT>will throw exceptions</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void update(Graphics)</TT></TD>
		<TD WIDTH="288">Invoked prior to calling <TT>paint()</TT></TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJInternalFrameFONTTT"></A><TT>javax.swing.JInternalFrame</TT></H3>
<P><TT>public class JInternalFrame extends JComponent implements Accessible, WindowConstants,
RootPaneContainer</TT></P>

<P>The JInternalFrame class is a lightweight component that can often be used in
place of a JFrame object. Like many Swing components, children are not added directly
to a JInternalFrame object, but are added to its content pane.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JInternalFrame</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addInternalFrameListener (InternalFrameListener)</TT></TD>
		<TD WIDTH="288">Adds the specified listener to the group of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected JRootPane createRootPane()</TT></TD>
		<TD WIDTH="288">Invoked by the constructors to create the <TT>JRootPane</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void dispose()</TT></TD>
		<TD WIDTH="288">Frees resources associated with this frame</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected fireInternalFrameEvent(int)</TT></TD>
		<TD WIDTH="288">Used for internal event handling</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext </TT>object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Color getBackground()</TT></TD>
		<TD WIDTH="288">Obtains the background color for the frame</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Container getContentPane()</TT></TD>
		<TD WIDTH="288">Obtains the content pane for this object; when customizing the UI for a <TT>JInternalFrame</TT>
			object, component additions must be made to the content pane and not the <TT>JInternalFrame</TT>
			itself</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JinternalFrame.JDesktopIcon getDesktopIcon()</TT></TD>
		<TD WIDTH="288">Obtains the <TT>JDesktopIcon </TT>used to display this window when iconified</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JDesktopPane getDesktopPane()</TT></TD>
		<TD WIDTH="288">Searches the component hierarchy and returns the first <TT>JDesktopPane</TT> object
			that is found</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Color getForeground()</TT></TD>
		<TD WIDTH="288">Obtains the foreground color for the frame</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JMenuBar getJMenuBar()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the menu bar for the frame</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Icon getFrameIcon()</TT></TD>
		<TD WIDTH="288">Obtains an icon that can be used to represent this frame</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component getGlassPane()</TT></TD>
		<TD WIDTH="288">Obtains the glass pane object for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getLayer()</TT></TD>
		<TD WIDTH="288">Obtains the layer attribute for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JLayeredPane getLayeredPane()</TT></TD>
		<TD WIDTH="288">Obtains the <TT>JLayeredPane</TT> object associated with this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JMenuBar getMenuBar()</TT></TD>
		<TD WIDTH="288">Obtains the <TT>JMenuBar</TT> object associated with this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JRootPane getRootPane()</TT></TD>
		<TD WIDTH="288">Obtains the <TT>JRootPane</TT> object associated with this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getTitle()</TT></TD>
		<TD WIDTH="288">Obtains a title for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public InternalFrameUI getUI()</TT></TD>
		<TD WIDTH="288">Obtains the active look and feel attributes for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains a logical name associated with the UI; will always return <TT>InternalFrameUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getWarningString()</TT></TD>
		<TD WIDTH="288">Obtains the warning string that is associated with this window</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isClosable()</TT></TD>
		<TD WIDTH="288">Returns true if this object can be closed by the user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isClosed()</TT></TD>
		<TD WIDTH="288">Returns true if this window is currently closed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isIcon()</TT></TD>
		<TD WIDTH="288">Returns true if the <TT>JInternalFrame</TT> object is currently in icon form</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isIconifiable()</TT></TD>
		<TD WIDTH="288">Returns true if the <TT>JInternalFrame</TT> object can be iconified</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isMaximizable()</TT></TD>
		<TD WIDTH="288">Returns true if the <TT>JInternalFrame</TT> object can be maximized</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isMaximum()</TT></TD>
		<TD WIDTH="288">Returns true if the <TT>JInternalFrame</TT> object is currently maximized</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isResizable()</TT></TD>
		<TD WIDTH="288">Returns true if this component is resizable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isSelected()</TT></TD>
		<TD WIDTH="288">Returns true if this component is currently selected</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void moveToBack()</TT></TD>
		<TD WIDTH="288">Assuming the parent of this component is <TT>JLayeredPane</TT>, this method moves
			the <TT>JInternalFrame</TT> object to position -1</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void moveToFront()</TT></TD>
		<TD WIDTH="288">Assuming the parent of this component is <TT>JLayeredPane</TT>, this method moves
			the <TT>JInternalFrame</TT> object to position 0</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void pack()</TT></TD>
		<TD WIDTH="288">Causes the frame to be laid out at its preferred size</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeInternalFrameListener (InternalFrameListener)</TT></TD>
		<TD WIDTH="288">Removes the specified listener from the group of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void reshape(int, int, int, int)</TT></TD>
		<TD WIDTH="288">Sets the size and location of the top-left corner of the frame</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setBackground(Color)</TT></TD>
		<TD WIDTH="288">Set the background color for the frame</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setClosable(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether this component can be closed by user action</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setClosed(boolean)</TT></TD>
		<TD WIDTH="288">An argument of true will close the frame</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setContentPane(Container)</TT></TD>
		<TD WIDTH="288">Sets the active content pane for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setDesktopIcon(JDesktopIcon)</TT></TD>
		<TD WIDTH="288">Sets the active desktop icon for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setForeground(Color)</TT></TD>
		<TD WIDTH="288">Sets the foreground color for the frame</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setFrameIcon(Icon)</TT></TD>
		<TD WIDTH="288">Sets the active frame icon for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setGlassPane(Component)</TT></TD>
		<TD WIDTH="288">Sets the active glass pane for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setIcon(boolean)</TT></TD>
		<TD WIDTH="288">Iconifies the frame</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setIconifiable(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether this frame can be iconified</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setLayer(Integer)</TT></TD>
		<TD WIDTH="288">Assigns the layer attribute for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setJMenuBar(JMenuBar)</TT></TD>
		<TD WIDTH="288">Associates the specified menu bar with the frame</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setLayeredPane(JLayeredPane)</TT></TD>
		<TD WIDTH="288">Sets the <TT>JLayeredPane</TT> object associated with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setLayer(Integer)</TT></TD>
		<TD WIDTH="288">Sets the layer attribute of the frame</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setMaximizable(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether this component can be maximized</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setMaximum(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether this component is cur-rently maximized</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setMenuBar(JMenuBar)</TT></TD>
		<TD WIDTH="288">Associates this object with a <TT>JMenuBar</TT> object (deprecated, use <TT>setJMenuBar</TT>)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setResizable(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether this component can be resized</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setRootPane(JRootPane)</TT></TD>
		<TD WIDTH="288">Associates this component with a <TT>JRootPane</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void setRootPaneCheckingEnabled(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether or not calls to <TT>add()</TT> and <TT>setLayout() </TT>will throw an
			exception</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setSelected(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether this component is currently selected</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setTitle(String)</TT></TD>
		<TD WIDTH="288">Sets the title for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setUI(InternalFrameUI)</TT></TD>
		<TD WIDTH="288">Sets the pluggable look-and-feel attributes for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setVisible(boolean)</TT></TD>
		<TD WIDTH="288">Set the visible state of the frame</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void show()</TT></TD>
		<TD WIDTH="288">Shows the frame</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void toBack()</TT></TD>
		<TD WIDTH="288">Sends the frame to the back</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void toFront()</TT></TD>
		<TD WIDTH="288">Sends the frame to the front</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="288">Invoked to indicate a UI look-and-feel change</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJInternalFrameJDesktopIconFONTTT"></A><TT>javax.swing.JInternalFrame.JDesktopIcon</TT></H3>
<P><TT>public static class JInternalFrame.JDesktopIcon extends JComponent <BR>
implements Accessible</TT></P>

<P>The JDesktopIcon class is used to represent an iconified version of a JInternalFrame
object.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JInternalFrame.JDesktopIcon</TT>: Summary </H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext </TT>object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JDesktopPane getDesktopPane()</TT></TD>
		<TD WIDTH="288">Obtains the <TT>JDesktopPane</TT> associated with the <TT>JInternalFrame</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JInternalFrame getInternalFrame()</TT></TD>
		<TD WIDTH="288">Obtains the <TT>JInternalFrame</TT> associated with this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public DesktopIconUI getUI()</TT></TD>
		<TD WIDTH="288">Obtains the <TT>DesktopIconUI</TT> object associated with this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains a logical name associated with this object; will always return <TT>DesktopIconUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setInternalFrame(JInternalFrame)</TT></TD>
		<TD WIDTH="288">Sets the <TT>JInternalFrame</TT> object associated with this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setUI(DesktopIconUI)</TT></TD>
		<TD WIDTH="288">Sets the <TT>DesktopIconUI</TT> object asso-ciated with this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="288">Invoked when the look and feel parameters have been updated</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJLabelFONTTT"></A><TT>javax.swing.JLabel</TT></H3>
<P><TT>public class JLabel extends JComponent implements SwingConstants, Accessible</TT></P>

<P>The JLabel class is used to display a read-only line of text, or a combination
of a read-only line of text and an Image object.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JLabel</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext </TT>object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Icon getDisabledIcon()</TT></TD>
		<TD WIDTH="288">If a disabled icon has been specified for this object, it is returned; otherwise,
			one is created using the default icon and the GrayFilter class</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int DisplayedMnemonic()</TT></TD>
		<TD WIDTH="288">Obtains the keyboard accelerator for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getHorizontalAlignment()</TT></TD>
		<TD WIDTH="288">Obtains the alignment along the x-axis for this component; return value is either
			<TT>SwingConstants.LEFT</TT>, <TT>SwingConstants.RIGHT</TT>, or <TT>SwingConstants.CENTER</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getHorizontalTextPosition()</TT></TD>
		<TD WIDTH="288">Returns either <TT>SwingConstants.LEFT</TT>, <TT>SwingConstants.RIGHT</TT>, or <TT>SwingConstants.CENTER</TT>
			depending on horizontal alignment of the text relative to the icon</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Icon getIcon()</TT></TD>
		<TD WIDTH="288">Obtains the icon (if any) associated with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getIconTextGap()</TT></TD>
		<TD WIDTH="288">Obtains the number of pixels that separate the icon from the text label</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component getLabelFor()</TT></TD>
		<TD WIDTH="288">Obtains the component responsible for labeling</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getText()</TT></TD>
		<TD WIDTH="288">Obtains the text label associated with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public LabelUI getUI()</TT></TD>
		<TD WIDTH="288">Obtains the current look and feel properties for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains a logical name for the active UI; will always return <TT>LabelUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getVerticalAlignment()</TT></TD>
		<TD WIDTH="288">Obtains the alignment for this component along the y-axis; return value is either
			<TT>SwingConstants.LEFT</TT>, <TT>SwingConstants.RIGHT</TT>, or <TT>SwingConstants.CENTER</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getVerticalTextPosition()</TT></TD>
		<TD WIDTH="288">Returns either <TT>SwingConstants.LEFT</TT>, <TT>SwingConstants.RIGHT</TT>, or <TT>SwingConstants.CENTER</TT>
			depending on vertical alignment of the text relative to the icon</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setDisabledIcon(Icon)</TT></TD>
		<TD WIDTH="288">Sets the disabled icon for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void DisplayedMnemonic(char)</TT></TD>
		<TD WIDTH="288">Sets the keyboard accelerator for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setDisplayedMnemonic(int)</TT></TD>
		<TD WIDTH="288">Sets the keyboard accelerator for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setFont(Font)</TT></TD>
		<TD WIDTH="288">Sets the font to be used in this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setHorizontalAlignment(int)</TT></TD>
		<TD WIDTH="288">Sets the alignment along the x-axis for this component; parameter value is either
			<TT>SwingConstants.LEFT</TT>, <TT>SwingConstants.RIGHT</TT>, or <TT>SwingConstants.CENTER</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int setHorizontalTextPosition(int)</TT></TD>
		<TD WIDTH="288">Sets the horizontal position of the text relative to the icon; parameter value is
			either <TT>SwingConstants.LEFT</TT>, <TT>SwingConstants.RIGHT</TT>, or <TT>SwingConstants.CENTER</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setIcon(Icon)</TT></TD>
		<TD WIDTH="288">Sets the icon to be used with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setIconTextGap(int)</TT></TD>
		<TD WIDTH="288">Sets the number of pixels that separate the icon from the text label</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setLabelFor(Component)</TT></TD>
		<TD WIDTH="288">Sets the component responsible for labeling</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setText(String)</TT></TD>
		<TD WIDTH="288">Sets the text label for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setUI(LabelUI)</TT></TD>
		<TD WIDTH="288">Sets the pluggable look and feel properties for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setVerticalAlignment(int)</TT></TD>
		<TD WIDTH="288">Sets the vertical alignment of this component along the y-axis; parameter value is
			either <TT>SwingConstants.TOP</TT>, <TT>SwingConstants.BOTTOM</TT>, or <TT>SwingConstants.CENTER</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setVerticalTextPosition(int)</TT></TD>
		<TD WIDTH="288">Sets the vertical position of the text image relative to the icon; parameter value
			is either <TT>SwingConstants.TOP</TT>, <TT>SwingConstants.BOTTOM</TT>, or <TT>SwingConstants.CENTER</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="288">Invoked to indicate a change in the pluggable look and feel properties</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJLayeredPaneFONTTT"></A><TT>javax.swing.JLayeredPane</TT></H3>
<P><TT>public class JLayeredPane extends JComponent implements Accessible</TT></P>

<P>The JLayeredPane container is used to lay out a series of components with the
added bonus of being able to &quot;layer&quot; one component on top of another. Components
on the same layer will behave just like a series of components in a normal container,
and components on different layers will appear on top of each other. Each layer is
assigned a number, and the layer with the highest number will appear first. In assigning
layer numbers, you may use any of the constants that are defined or use your own
numbering scheme.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JLayeredPane</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final Integer DEFAULT_LAYER</TT></TD>
		<TD WIDTH="288">Used to add components to the default layer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final Integer DRAG_LAYER</TT></TD>
		<TD WIDTH="288">Used to add components to the drag layer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final Integer FRAME_CONTENT_LAYER</TT></TD>
		<TD WIDTH="288">Used to add components to the frame content layer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final Integer MODAL_LAYER</TT></TD>
		<TD WIDTH="288">Used to add components to the default layer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final Integer PALETTE_LAYER</TT></TD>
		<TD WIDTH="288">Used to add components to the default layer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final Integer POPUP_LAYER</TT></TD>
		<TD WIDTH="288">Used to add components to the default layer protected void specified</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>addImpl(Component, Object, int)</TT></TD>
		<TD WIDTH="288">component to the JLayeredPane object at the specified</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the AccessibleContext object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getComponentCountInLayer(int)</TT></TD>
		<TD WIDTH="288">Obtains the number of components in the layer specified by the int parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component[]getComponentsInLayer(int)</TT></TD>
		<TD WIDTH="288">Obtains the collection of components in the layer specified by the int parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD COLSPAN="2">
			<P ALIGN="CENTER"><I>Methods</I>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected Hashtable getComponentToLayer()</TT></TD>
		<TD WIDTH="288">Obtains a hashtable that maps each component to its corresponding layer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getIndexOf(Component)</TT></TD>
		<TD WIDTH="288">Obtains the absolute index of the <TT>Component</TT> object specified as a parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getLayer(Component)</TT></TD>
		<TD WIDTH="288">Obtains the layer associated with the <TT>Component</TT> object parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static int getLayer(JComponent)</TT></TD>
		<TD WIDTH="288">Obtains the layer associated with the <TT>Component</TT> object parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static JLayeredPane getLayeredPaneAbove(Component)</TT></TD>
		<TD WIDTH="288">Obtains the first<TT> JLayeredPane</TT> object located up the hierarchy from the
			<TT>Component</TT> object parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected Integer getObjectForLayer(int)</TT></TD>
		<TD WIDTH="288">Used internally for layer management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getPosition(Component)</TT></TD>
		<TD WIDTH="288">Obtains the relative position of the <TT>Component</TT> object parameter within its
			layer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int highestLayer()</TT></TD>
		<TD WIDTH="288">Obtains the highest layer currently in use, or 0 if there are none</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected int insertIndexForLayer(int, int)</TT></TD>
		<TD WIDTH="288">Used internally to determine component positions</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isOptimizedDrawingEnabled()</TT></TD>
		<TD WIDTH="288">Returns true if this component has optimized its drawing by ensuring that none of
			its children overlap; will always return false, obviously</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int lowestLayer()</TT></TD>
		<TD WIDTH="288">Obtains the lowest layer currently in use, or 0 if there are none</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void moveToBack(Component)</TT></TD>
		<TD WIDTH="288">Moves the specified <TT>Component</TT> object to the back of its layer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void moveToFront(Component)</TT></TD>
		<TD WIDTH="288">Moves the specified <TT>Component</TT> object to the front of its layer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void paint(Graphics)</TT></TD>
		<TD WIDTH="288">Invoked when this component should draw itself into the specified <TT>Graphics</TT>
			object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static void putLayer(JComponent, int)</TT></TD>
		<TD WIDTH="288">Sets the layer property on the <TT>JComponent</TT> parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void remove(int)</TT></TD>
		<TD WIDTH="288">Removes the component specified by the <TT>int</TT> parameter from its container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setLayer(Component, int)</TT></TD>
		<TD WIDTH="288">Sets the layer attribute for the specified <TT>Component</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setLayer(Component, int, int)</TT></TD>
		<TD WIDTH="288">Sets the layer and position attributes for the specified <TT>Component</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setPosition(Component, int)</TT></TD>
		<TD WIDTH="288">Sets the position attribute for the specified <TT>Component</TT></TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJListFONTTT"></A><TT>javax.swing.JList</TT></H3>
<P><TT>public class JList extends JComponent implements Scrollable, Accessible</TT></P>

<P>The JList component allows a user to select one or (possibly) more items from
a list. The data presented in the list is supplied by a ListModel object, and if
scrolling is desired the JList object must be placed inside a JScrollPane object.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JList</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addListSelectionListener (ListSelectionListener)</TT></TD>
		<TD WIDTH="295">Adds a <TT>ListSelectionListener</TT> to the collection of listeners; a</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>ListSelectionListener</TT> is</TD>
		<TD WIDTH="295">notified every time the selected value changes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addSelectionInterval(int, int)</TT></TD>
		<TD WIDTH="295">Changes the selection interval so that the new set of selected items is the union
			of the original selection interval and the selection interval formed by the two <TT>int</TT>
			parameters</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void clearSelection()</TT></TD>
		<TD WIDTH="295">Alters the selection such that no items are currently selected</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected ListSelectionModel createSelectionModel()</TT></TD>
		<TD WIDTH="295">Used internally to create a data model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void ensureIndexIsVisible(int)</TT></TD>
		<TD WIDTH="295">Ensures that the item identified by the <TT>int</TT> parameter is visible</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void <BR>
			fireSelectionValueChanged(int, int, boolean)</TT></TD>
		<TD WIDTH="295">Used internally to notify<TT> ListSelectionListeners</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public AccessibleContext getAccessibleContext()</TT></TD>
		<TD WIDTH="295">Obtains a reference to the <TT>AccessibleContext</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getAnchorSelectionIndex()</TT></TD>
		<TD WIDTH="295">Obtains the most recent index (first parameter) used to modify the selection using
			either the <TT>addSelectionInterval()</TT> or <TT>setSelectionInterval()</TT> method</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Rectangle getCellBounds(int, int)</TT></TD>
		<TD WIDTH="295">Assuming items exist at both parameters, the coordinates of their bounding box is
			returned</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public ListCellRenderer getCellRenderer()</TT></TD>
		<TD WIDTH="295">Obtains the <TT>ListCellRenderer</TT> object associated with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getFirstVisibleIndex()</TT></TD>
		<TD WIDTH="295">Obtains the first visible index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getFixedCellHeight()</TT></TD>
		<TD WIDTH="295">Obtains the fixed cell height property</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getFixedCellWidth()</TT></TD>
		<TD WIDTH="295">Obtains the fixed cell width property</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getLastVisibleIndex()</TT></TD>
		<TD WIDTH="295">Obtains the index of the last visible item</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getLeadSelectionIndex()</TT></TD>
		<TD WIDTH="295">Obtains the most recent index (second parameter) used to modify the selection using
			either the <TT>addSelectionInterval()</TT> or <TT>setSelectionInterval()</TT> methods</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getMaxSelectionIndex()</TT></TD>
		<TD WIDTH="295">Obtains the maximum cell index currently in use</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getMinSelectionIndex()</TT></TD>
		<TD WIDTH="295">Obtains the minimum cell index currently in use</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public ListModel getModel()</TT></TD>
		<TD WIDTH="295">Obtains the current data model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getPreferredScrollableViewportSize()</TT></TD>
		<TD WIDTH="295">Obtains the required dimensions to fully show the list</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Object getPrototypeCellValue()</TT></TD>
		<TD WIDTH="295">Obtains the prototype cell property</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getScrollableBlockIncrement<BR>
			(Rectangle, int, int)</TT></TD>
		<TD WIDTH="295">Obtains the desired block size to use when scrolling</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>(Rectangle, int, int)public boolean getScrollableTracksViewportHeight()</TT></TD>
		<TD WIDTH="295">Assuming the <TT>JList</TT> object is contained in a viewport, determines whether
			the height of the<TT> JList</TT> should change to match the changing height of the
			viewport</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean getScrollableTracksViewportWidth()public int</TT></TD>
		<TD WIDTH="295">Assuming the <TT>Jlist</TT> object is contained in a viewport, determines whether
			the width of the<TT> JList</TT> should change to match the changing width of the
			viewport Obtains the dimensions</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>getScrollableUnitIncrement<BR>
			(Rectangle, int, int)</TT></TD>
		<TD WIDTH="295">needed to fully show the next value while scrolling</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getSelectedIndex()</TT></TD>
		<TD WIDTH="295">Obtains the currently selected index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int[] getSelectedIndices()</TT></TD>
		<TD WIDTH="295">Obtains the currently selected indices</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Object getSelectedValue()</TT></TD>
		<TD WIDTH="295">Obtains the currently selected value</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Object[] getSelectedValues()</TT></TD>
		<TD WIDTH="295">Obtains all currently selected values</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Color getSelectioinBackground()</TT></TD>
		<TD WIDTH="295">Obtains the background color of the selected cells</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Color getSelectionForeground()</TT></TD>
		<TD WIDTH="295">Obtains the foreground color of the selected cells</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getSelectionMode()</TT></TD>
		<TD WIDTH="295">Obtains the selection mode</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public ListSelectionModel</TT></TD>
		<TD WIDTH="295">Obtains the active</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>getSelectionModel()</TT></TD>
		<TD WIDTH="295"><TT>ListSelectionModel</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public ListUI getUI()</TT></TD>
		<TD WIDTH="295">Obtains the current look and feel properties for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="295">Obtains a logical name describing look and feel properties; always returns <TT>ListUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean getValueIsAdjusting(boolean)</TT></TD>
		<TD WIDTH="295">Obtains the <TT>ValueIsAdjusting</TT> status</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getVisibleRowCount()</TT></TD>
		<TD WIDTH="295">Obtains the preferred number of rows that should be visible at a given point in time</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Point indexToLocation(int)</TT></TD>
		<TD WIDTH="295">Obtains the physician location of the item at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isSelectedIndex(int)</TT></TD>
		<TD WIDTH="295">Returns true if the selected index is currently selected</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Point isSelectionEmpty()</TT></TD>
		<TD WIDTH="295">Returns true if there are currently no selected items</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int locationToIndex(Point)</TT></TD>
		<TD WIDTH="295">Obtains the index of the item location at the specified coordinates</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeListSelectionListener(ListSelectionListener)</TT></TD>
		<TD WIDTH="295">Removes a<TT> ListSelectionListener</TT> from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeSelectionInterval(int, int)</TT></TD>
		<TD WIDTH="295">Sets the currently selected items to be the set difference of the currently selected
			items and the set created by the specified indices</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setCellRenderer(ListCellRenderer)</TT></TD>
		<TD WIDTH="295">Sets the <TT>ListCellRenderer</TT> object for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setFixedCellHeight(int)</TT></TD>
		<TD WIDTH="295">Sets the fixed cell height property</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setFixedCellWidth(int)</TT></TD>
		<TD WIDTH="295">Sets the fixed cell width property</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setListData(Object[])</TT></TD>
		<TD WIDTH="295">Sets the elements that are to be displayed in the list; this method propagates the
			data change to the data model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setListData(Vector)</TT></TD>
		<TD WIDTH="295">Sets the elements that are to be displayed in the list; this method propagates the
			data change to the data model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setModel(ListModel)</TT></TD>
		<TD WIDTH="295">Sets the data model associated with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setPrototypeCellValue(Object)</TT></TD>
		<TD WIDTH="295">Sets the fixed cell width and height properties based on the parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setSelectedIndex(int)</TT></TD>
		<TD WIDTH="295">Sets the currently selected item</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setSelectedIndices(int[])</TT></TD>
		<TD WIDTH="295">Sets the currently selected items</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setSelectedValue(Object, boolean)</TT></TD>
		<TD WIDTH="295">Sets the currently selected value to match that of the <TT>Object</TT> parameter;
			if the <TT>boolean</TT> parameter is set to true, the list will scroll to force the
			selected item into visibility</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setSelectionInterval(int, int)</TT></TD>
		<TD WIDTH="295">Sets the current selection interval</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setSelectionModel(ListSelectionModel)</TT></TD>
		<TD WIDTH="295">Sets the current selection model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setUI(ListUI)</TT></TD>
		<TD WIDTH="295">Assigns pluggable look-and-feel parameters</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setValueIsAdjusting(boolean)</TT></TD>
		<TD WIDTH="295">Sets the <TT>ValueIsAdjusting</TT> parameter</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setVisibleRowCount(int)</TT></TD>
		<TD WIDTH="295">Sets the desired visible row count</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="295">Invoked to indicate a change in the pluggable look-and-feel</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJMenuFONTTT"></A><TT>javax.swing.JMenu</TT></H3>
<P><TT>public class JMenu extends JMenuItem implements Accessible, MenuElement</TT></P>

<P>The JMenu class is an implementation of a menu that can be used in a Swing environment.
In most applications you will have a series of JMenu objects (File, Edit, and so
on) that are all owned by a single JMenuBar object. The JMenuBar class is covered
in the next section.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.Jmenu</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JMenuItem add(Action)</TT></TD>
		<TD WIDTH="288">Adds the specified <TT>Action</TT> object to the bottom of the <TT>JMenu</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component add(Component)</TT></TD>
		<TD WIDTH="288">Adds the specified <TT>Component</TT> object to the bottom of the <TT>Jmenu</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JMenuItem add(JmenuItem)</TT></TD>
		<TD WIDTH="288">Adds the specified <TT>JMenuItem</TT> object to the bottom of the <TT>Jmenu</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JMenuItem add(String)</TT></TD>
		<TD WIDTH="288">Adds the specified <TT>String</TT> object to the bottom of the <TT>Jmenu</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addMenuListener(MenuListener)</TT></TD>
		<TD WIDTH="288">Adds a <TT>MenuListener</TT> to the collection of listeners; a <TT>MenuListener</TT>
			is notified when a menu selection is made</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addSeparator()</TT></TD>
		<TD WIDTH="288">Adds a separator to the bottom of the <TT>JMenu</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected PropertyChangeListener createActionChangeListener(JMenuItem)</TT></TD>
		<TD WIDTH="288">Used internally to create a new<TT> PropertyChangeListener</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected JMenu.WinListener createWinListener(JPopupMenu)</TT></TD>
		<TD WIDTH="288">Used internally to create a new <TT>WinListener</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void doClick(int pressTime)</TT></TD>
		<TD WIDTH="288">Causes a &quot;click&quot; programmatically</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void fireMenuCanceld()</TT></TD>
		<TD WIDTH="288">Used internally to send menu-canceled events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void fireMenuDeselected()</TT></TD>
		<TD WIDTH="288">Used internally to send <TT>MenuDeselected</TT> events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void fireMenuSelected()</TT></TD>
		<TD WIDTH="288">Used internally to send <TT>MenuSelected</TT> events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component getComponent()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the AWT component used to paint this item</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getDelay()</TT></TD>
		<TD WIDTH="288">Obtains the suggested delay (in milliseconds) that occurs between the time that the
			user selects a menu and the associated pop-up menu appears</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JMenuItem getItem(int)</TT></TD>
		<TD WIDTH="288">Obtains the <TT>JMenuItem</TT> at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getItemCount()</TT></TD>
		<TD WIDTH="288">Obtains a count of all items</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component getMenuComponent(int)</TT></TD>
		<TD WIDTH="288">Obtains the <TT>Component</TT> object at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getMenuComponentCount()</TT></TD>
		<TD WIDTH="288">Obtains a count of all menu components</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component[] getMenuComponents()</TT></TD>
		<TD WIDTH="288">Obtains an array containing all menu components</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JPopupMenu getPopupMenu()</TT></TD>
		<TD WIDTH="288">Obtains the <TT>JPopupMenu</TT> object asso-ciated with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public MenuElement[] getSubElements()</TT></TD>
		<TD WIDTH="288">Obtains an array of the sub-menu components</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains the logical name associated with the current look and feel; always returns
			<TT>MenuUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JMenuItem insert(Action, int)</TT></TD>
		<TD WIDTH="288">Inserts the specified <TT>Action</TT> at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JMenuItem insert(JMenuItem, int)</TT></TD>
		<TD WIDTH="288">Inserts the specified <TT>JMenuItem</TT> at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void insert(String, int)</TT></TD>
		<TD WIDTH="288">Inserts the specified <TT>String</TT> at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void insertSeparator(int)</TT></TD>
		<TD WIDTH="288">Inserts a menu separator at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isMenuComponent(Component)</TT></TD>
		<TD WIDTH="288">Returns true if the specified component is a menu component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isPopupMenuVisible()</TT></TD>
		<TD WIDTH="288">Returns true if the pop-up menu is currently visible</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isSelected()</TT></TD>
		<TD WIDTH="288">Returns true if the menu is currently selected</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isTearOff()</TT></TD>
		<TD WIDTH="288">Returns true if the active <TT>JMenu</TT> object is a tear-off menu</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isTopLevelMenu()</TT></TD>
		<TD WIDTH="288">Returns true if the active <TT>JMenu</TT> object is a top-level menu</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void menuSelectionChanged(boolean)</TT></TD>
		<TD WIDTH="288">Notifies if the menu selection changed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String paramString()</TT></TD>
		<TD WIDTH="288">Obtains a <TT>String</TT> object representing the state of the object; often used
			for debugging purposes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void processKeyEvent(KeyEvent)</TT></TD>
		<TD WIDTH="288">Used internally for event handling</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void remove(Component)</TT></TD>
		<TD WIDTH="288">Removes the specified <TT>Component</TT> object from the <TT>JMenu</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void remove(int)</TT></TD>
		<TD WIDTH="288">Removes the object at the specified index from the <TT>JMenu</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void remove(JMenuItem)</TT></TD>
		<TD WIDTH="288">Removes the specified <TT>JMenuItem</TT> object from the <TT>JMenu</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeAll()</TT></TD>
		<TD WIDTH="288">Removes all objects from the <TT>JMenu</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeMenuListener(MenuListener)</TT></TD>
		<TD WIDTH="288">Removes the specified <TT>MenuListener</TT> object from the <TT>JMenu</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setAccelerator(KeyStroke)</TT></TD>
		<TD WIDTH="288">Sets the keyboard accelerator asso ciated with this menu</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setDelay(int)</TT></TD>
		<TD WIDTH="288">Sets the suggested delay (in milliseconds) that occurs between the time that the
			user selects a menu and the associated pop-up menu appears</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setMenuLocation(int, int)</TT></TD>
		<TD WIDTH="288">Sets the location of the <TT>JMenu</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setModel(ButtonModel)</TT></TD>
		<TD WIDTH="288">Sets the data model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setPopupMenuVisible(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether the pop-up menu is currently visible</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setSelected(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether the <TT>JMenu</TT> object is currently selected</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setUI(MenuUI)</TT></TD>
		<TD WIDTH="288">Sets the pluggable look-and-feel features for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288">public void updateUI()</TD>
		<TD WIDTH="288">Invoked to indicate a change in UI</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJMenuBarFONTTT"></A><TT>javax.swing.JMenuBar</TT></H3>
<P><TT>public class JMenuBar extends JComponent implements Accessible, MenuElement</TT></P>

<P>The JMenuBar class is used to represent a menu bar as owned by some container.
A JMenuBar object will own a series of JMenu objects corresponding to each of the
many menus (File, Edit, and so on) that a single application might sport.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JMenuBar</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JMenu add(JMenu)</TT></TD>
		<TD WIDTH="288">Adds the specified <TT>JMenu</TT> object to the <TT>JMenu</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext</TT>object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component getComponent()</TT></TD>
		<TD WIDTH="288">Implemented to meet <TT>MenuElement</TT> specification; returns this element</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component getComponentAtIndex(int)</TT></TD>
		<TD WIDTH="288">Obtains the <TT>Component</TT> object at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getComponentIndex(Component)</TT></TD>
		<TD WIDTH="288">Obtains the index of the specified <TT>Component</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JMenu getHelpMenu()</TT></TD>
		<TD WIDTH="288">Obtains the <TT>JMenu</TT> object that is identified as a Help menu, or null if none
			exists; depending on the pluggable look-and-feel that is currently active, the Help
			menu may receive special treatment in the UI</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Insets getMargin()</TT></TD>
		<TD WIDTH="288">Obtains the space separating the outline of the menu bar and its menus</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JMenu getMenu(int)</TT></TD>
		<TD WIDTH="288">Obtains the <TT>JMenu</TT> object at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getMenuCount()</TT></TD>
		<TD WIDTH="288">Obtains a count of all <TT>JMenu</TT> objects</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public SingleSelectionModel getSelectionModel()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the selection model currently in use</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public MenuElement[] getSubElements()</TT></TD>
		<TD WIDTH="288">Obtains the collection of menu elements in this menu bar</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public MenuBarUI getUI()</TT></TD>
		<TD WIDTH="288">Obtains the current object responsible for the pluggable look-and-feel</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains a logical name describing the pluggable look-and-feel object; will always
			return <TT>MenuBarUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isBorderPainted()</TT></TD>
		<TD WIDTH="288">Returns true if the border has been painted</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isManagingFocus()</TT></TD>
		<TD WIDTH="288">Returns true if this component manages focus delegation for its children</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isSelected()</TT></TD>
		<TD WIDTH="288">Returns true if this component is currently selected</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void menuSelectionChanged(boolean)</TT></TD>
		<TD WIDTH="288">Implemented to meet <TT>MenuElement</TT> specifications; does nothing</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void paintBorder(Graphics)</TT></TD>
		<TD WIDTH="288">Invoked to cause the border to be pained into the specified <TT>Graphics</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void provessKeyEvent(KeyEvent, MenuElement[],</TT></TD>
		<TD WIDTH="288">Used internally to process key events<TT> MenuSelectionManager)</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void processMouseEvent(MouseEvent, MenuElement[],MenuSelectionManager)</TT></TD>
		<TD WIDTH="288">Used internally to process mouse events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setBorderPainted(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether the border has been painted</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setHelpMenu(JMenu)</TT></TD>
		<TD WIDTH="288">Associates a Help menu with the <TT>JMenuBar</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setMargin(Insets)</TT></TD>
		<TD WIDTH="288">Sets the space between the outline of the menu bar and its menus</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setSelected(Component)</TT></TD>
		<TD WIDTH="288">Sets whether the specified <TT>Component</TT> object is currently selected</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void</TT></TD>
		<TD WIDTH="288">Sets the selection model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>setSelectionModel(SingleSelectionModel)</TT></TD>
		<TD WIDTH="288">for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setUI(MenuBarUI)</TT></TD>
		<TD WIDTH="288">Sets the pluggable look-and-feel object for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="288">Invoked to indicate a pluggable look-and-feel change</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJMenuItemFONTTT"></A><TT>javax.swing.JMenuItem</TT></H3>
<P><TT>public class JMenuItem extends AbstractButton implements Accessible, MenuElement</TT></P>

<P>A JMenuItem object represents an item in a JMenu. It can consist of any of the
following properties: an icon identifier, a string identifier, or a keyboard shortcut.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JMenuItem</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addMenuDragMouseListener(MenuDragMouseListener)</TT></TD>
		<TD WIDTH="288">Adds the specified listener to the appropriate group of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addMenuKeyListener(MenuKeyListener)</TT></TD>
		<TD WIDTH="288">Adds the specified listener to the appropriate group of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void fireMenuDragMouseDragged(MenuDragMouseEvent)</TT></TD>
		<TD WIDTH="288">Used internally to notify appropriate listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void fireMenuDragMouseEntered(MenuDragMouseEvent)</TT></TD>
		<TD WIDTH="288">Used internally to notify appropriate listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void fireMenuDragMouseExited(MenuDragMouseEvent)</TT></TD>
		<TD WIDTH="288">Used internally to notify appropriate listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void fireMenuDragMouseReleased(MenuDragMouseEvent)</TT></TD>
		<TD WIDTH="288">Used internally to notify appropriate listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void fireMenuKeyPressed(MenuKeyEvent)</TT></TD>
		<TD WIDTH="288">Used internally to notify appropriate listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void fireMenuKeyReleased(MenuKeyEvent)</TT></TD>
		<TD WIDTH="288">Used internally to notify appropriate listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void fireMenuKeyTyped(MenuKeyEvent)</TT></TD>
		<TD WIDTH="288">Used internally to notify appropriate listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public KeyStroke getAccelerator()</TT></TD>
		<TD WIDTH="288">Obtains the keyboard shortcut asso-ciated with this item</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component getComponent()</TT></TD>
		<TD WIDTH="288">Obtains the AWT component which draws this item</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public MenuElement[] getSubElements()</TT></TD>
		<TD WIDTH="288">Obtains an array of sub-menu components</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains a logical name describing the pluggable look and feel object; will always
			return <TT>MenuItemUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void init(String, Icon)</TT></TD>
		<TD WIDTH="288">Invoked internally to perform initialization</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isArmed()</TT></TD>
		<TD WIDTH="288">Returns true if the menu item is armed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void menuSelectioinChanged(boolean)</TT></TD>
		<TD WIDTH="288">Notification that the menu element's selected state has changed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void processKeyEvent(KeyEvent, MenuElement[],MenuSelectionManager)</TT></TD>
		<TD WIDTH="288">Processes key events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void processMenuDragMouseEvent(MenuDrageMouseEvent)</TT></TD>
		<TD WIDTH="288">Processes menu drag mouse events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void processMouseEvent (MouseEvent, MenuElement[],MenuSelectionManager)</TT></TD>
		<TD WIDTH="288">Processes mouse events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeMenuDragMouseListener(MenuDragMouseListener)</TT></TD>
		<TD WIDTH="288">Removes the specified listener from the group of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeMenuKeyListener(MenuKeyListener)</TT></TD>
		<TD WIDTH="288">Removes the specified listener from the group of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setAccelerator(KeyStroke)</TT></TD>
		<TD WIDTH="288">Associates a keyboard shortcut with the menu item</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setArmed(boolean)</TT></TD>
		<TD WIDTH="288">Sets the armed status of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setEnabled(boolean)</TT></TD>
		<TD WIDTH="288">Sets the enabled status of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setUI(MenuItemUI)</TT></TD>
		<TD WIDTH="288">Sets the pluggable look-and-feel attributes of this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="288">Invoked to indicate a change in the pluggable look-and-feel properties</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJOptionPaneFONTTT"></A><TT>javax.swing.JOptionPane</TT></H3>
<P><TT>public class JOptionPane extends JComponent implements Accessible</TT></P>

<P>During the pre-Swing UI dynasty, programmers had to either dynamically build a
dialog's UI every time or build a collection of different dialog boxes. In fact,
one of the first things I would do before beginning a project was collect the classes
that act as message dialogs, Yes/No (confirmation) dialogs, and input dialogs. With
the Swing dynasty, we can throw away the custom classes we wrote and use the JOptionPane
class.</P>

<P>The JOptionPane class is used to create any number of different dialogs, including
confirmation (Yes, No, Cancel), input, and message, as well as something called an
option dialog, which is an amalgam of those three types.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JOptionPane</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Fields/Constructors/Methods</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final int CANCEL_OPTION</TT></TD>
		<TD WIDTH="288">Return value used to indicate that the Cancel button was chosen in a confirmation
			dialog</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final int CLOSED_OPTION</TT></TD>
		<TD WIDTH="288">Return value used if the user closes a window without clicking Yes/No/OK/Cancel</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final int DEFAULT_OPTION</TT></TD>
		<TD WIDTH="288">Used to indicate that look and feel properties should be supplied only by the <TT>JOptionPane</TT>
			object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final int ERROR_MESSAGE</TT></TD>
		<TD WIDTH="288">Used by error messages</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final String ICON_PROPERTY</TT></TD>
		<TD WIDTH="288">Indicates the name of the icon; this is a bound property</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final int INFORMATION_MESSAGE</TT></TD>
		<TD WIDTH="288">Used by information messages</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final String INITIAL_SELECTION_VALUE_PROPERTY</TT></TD>
		<TD WIDTH="288">Indicates the<TT> initialSelectionValue</TT> variable; this property is bound</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final String INITIAL_VALUE_PROPERTY</TT></TD>
		<TD WIDTH="288">Indicates the<TT> initialValue</TT> variable; this property is bound</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected transient Object initialSelectionValue</TT></TD>
		<TD WIDTH="288">Initial value used with the <TT>initialValue</TT> field</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected transient Object initialValue</TT></TD>
		<TD WIDTH="288">Value that is initially selected in option dialogs will be painted opaque</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected transient Object message public static final String MESSAGE_PROPERTY</TT></TD>
		<TD WIDTH="288">Message displayed by the dialog Indicates the message variable; this property is
			bound</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final String MESSAGE_TYPE_PROPERTY</TT></TD>
		<TD WIDTH="288">Indicates the message type; this property is bound</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected int messageType</TT></TD>
		<TD WIDTH="288">The message type Description</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final int NO_OPTION</TT></TD>
		<TD WIDTH="288">Return value used to indicate that no option was selected in a dialog</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final int OK_CANCEL_OPTION</TT></TD>
		<TD WIDTH="288">Type used to indicate that a confirmation dialog is to be formed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final int OK_OPTION</TT></TD>
		<TD WIDTH="288">Return value used to indicate that the OK button was clicked</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final String OPTION_TYPE_PROPERTY</TT></TD>
		<TD WIDTH="288">Type used to indicate the<TT> optionType</TT> variable; this property is bound</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected transient Object[] options</TT></TD>
		<TD WIDTH="288">Array of options displayed to the user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final String OPTIONS_PROPERTY</TT></TD>
		<TD WIDTH="288">Used to indicate the <TT>options</TT> variable; this property is bound</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected int optionType</TT></TD>
		<TD WIDTH="288">The current option type; value will be one of the following: <TT>DEFAULT_OPTION</TT>,
			<TT>YES_NO_OPTION</TT>, <TT>YES_NO_CANCEL_OPTION</TT> or <TT>OK_CANCEL_OPTION</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final int PLAIN_MESSAGE</TT></TD>
		<TD WIDTH="288">Used to indicate that no icon is associated with the string</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final int QUESTION_MESSAGE</TT></TD>
		<TD WIDTH="288">Used to indicate a question message</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final String SELECTION_VALUES_PROPERTY</TT></TD>
		<TD WIDTH="288">Indicates the<TT> selectionValues</TT> variable; this property is bound</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected transient Object[]selectionValues</TT></TD>
		<TD WIDTH="288">Array of values the user can choose from</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected static Frame sharedFrame</TT></TD>
		<TD WIDTH="288">Frame used by the static methods that must present a UI</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final Object UNITIALIZED_VALUE</TT></TD>
		<TD WIDTH="288">Used to indicate that the user has yet to select a value</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected transient Object value public static final String VALUE_PROPERTY</TT></TD>
		<TD WIDTH="288">Currently selected value Used to indicate the<TT> value</TT> variable; this property
			is bound</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final String WANTS_INPUT_PROPERTY</TT></TD>
		<TD WIDTH="288">Used to indicate the<TT> wantsInput</TT> variable; this property is bound</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected boolean wantsInput</TT></TD>
		<TD WIDTH="288">If true, the user will be prompted to input data</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final int WARNING_MESSAGE</TT></TD>
		<TD WIDTH="288">Used to indicate a warning message</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final int YES_NO_CANCEL_OPTION</TT></TD>
		<TD WIDTH="288">Used to indicate that a confirmation dialog with Yes/No/Cancel buttons should be
			created</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final int YES_NO_OPTION</TT></TD>
		<TD WIDTH="288">Used to indicate that a confirmation dialog with Yes/No buttons should be created</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final int YES_OPTION</TT></TD>
		<TD WIDTH="288">Return value used to indicate that the Yes button was clicked</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JOptionPane()</TT></TD>
		<TD WIDTH="288">Creates a new <TT>JoptionPane</TT> dialog with a test message</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JOptionPane(Object)</TT></TD>
		<TD WIDTH="288">Creates a new <TT>JoptionPane</TT> dialog using the specified object to populate
			the screen; if this object is a component, it will be added directly to the screen;
			if it is a icon or string, it will be placed in a <TT>JLabel</TT> object and added
			to the screen; finally, if the object is an array, each element will be tested as
			specified above</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JOptionPane(Object, int)</TT></TD>
		<TD WIDTH="288">Creates a new <TT>JoptionPane</TT> object using the specified message and message
			type; the message is added to the screen according to the rules outlined in the <TT>JOptionPane(Object)</TT>
			constructor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JOptionPane(Object, int, int)</TT></TD>
		<TD WIDTH="288">Creates a new <TT>JoptionPane</TT> object using the specified message, message type,
			and option type; the message is added to the screen according to the rules outlined
			in the <TT>JOptionPane(Object)</TT> constructor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JOptionPane(Object, int, int, Icon)</TT></TD>
		<TD WIDTH="288">Creates a new <TT>JoptionPane</TT> object using the specified message, icon message
			type, and option type; the message is added to the screen according to the rules
			outlined in the <TT>JOptionPane(Object)</TT> constructor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JOptionPane(Object, int, int, Icon, Object[])</TT></TD>
		<TD WIDTH="288">Creates a new <TT>JOptionPane</TT> object using the specified message, icon message
			type, option type, and choice options; the message is added to the screen according
			to the rules outlined in the<TT> JOptionPane(Object)</TT> constructor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JOptionPane(Object, int, int, Icon, Object[], Object)</TT></TD>
		<TD WIDTH="288">Creates a new <TT>JOptionPane</TT>object using the specified message, icon message
			type, option type, choice options, and initial value; the message is added to the
			screen according to the rules outlined in the<TT> JOptionPane(Object)</TT> constructor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JDialog createDialog(Component, String)</TT></TD>
		<TD WIDTH="288">Creates a new <TT>JDialog</TT> object with the specified owner and title</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JInternalFrame createInternalFrame(Component, String)</TT></TD>
		<TD WIDTH="288">Creates a new<TT> JinternalFrame</TT> object with the specified owner and title</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD COLSPAN="2">
			<P ALIGN="CENTER"><I>Methods</I>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static JDesktopPane getDesktopPaneForComponent(Component)</TT></TD>
		<TD WIDTH="288">Returns the JdesktopPane object associated with the Component parameter, assuming
			one exists</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static Frame getFrameForComponent(Component)</TT></TD>
		<TD WIDTH="288">Returns the Frame object associated with the Component parameter, assuming one exists</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Icon getIcon()</TT></TD>
		<TD WIDTH="288">Obtains the Icon object associated with this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Object getInitialSelectionValue()</TT></TD>
		<TD WIDTH="288">Obtains the initially selected value for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Object getInitialValue()</TT></TD>
		<TD WIDTH="288">Obtains the initial value for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Object getInputValue()</TT></TD>
		<TD WIDTH="288">Obtains the value input by the user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getMaxCharactersPerLineCount()</TT></TD>
		<TD WIDTH="288">Obtains the maximum number of characters that can be input in a given line</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Object getMessage()</TT></TD>
		<TD WIDTH="288">Obtains the message on display in this dialog</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getMessageType()</TT></TD>
		<TD WIDTH="288">Obtains the message type</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Object[] getOptions()</TT></TD>
		<TD WIDTH="288">Obtains the choices that the user can select from</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getOptionType()</TT></TD>
		<TD WIDTH="288">Obtains the types of options that can be displayed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static Frame getRootFrame()</TT></TD>
		<TD WIDTH="288">Used by static methods to obtain a root frame</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Object[] getSelectionValues()</TT></TD>
		<TD WIDTH="288">Obtains the selection values</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public OptionPaneUI getUI()</TT></TD>
		<TD WIDTH="288">Obtains the object that specifies look and feel properties</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains a logical name for the current look and feel object; will always return OptionPaneUI</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD COLSPAN="2">
			<P ALIGN="CENTER"><I>Methods</I>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Object getValue()</TT></TD>
		<TD WIDTH="288">Obtains the value selected by the user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean getWantsInput()</TT></TD>
		<TD WIDTH="288">Returns true if this dialog is to prompt the user to enter data</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void selectInitialValue()</TT></TD>
		<TD WIDTH="288">Selects the initial value for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setIcon(Icon)</TT></TD>
		<TD WIDTH="288">Adds a display icon for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setInitialSelectionValue(Object)</TT></TD>
		<TD WIDTH="288">Sets the initial selection value for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setInitialValue(Object)</TT></TD>
		<TD WIDTH="288">Sets the initial value for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setInputValue(Object)</TT></TD>
		<TD WIDTH="288">Sets the value input by the user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setMessage(Object)</TT></TD>
		<TD WIDTH="288">Sets the message on display; see the constructor documentation for the rules on how
			this object is handled by the UI</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setMessageType(int)</TT></TD>
		<TD WIDTH="288">Sets the message type for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setOptions(Object[])</TT></TD>
		<TD WIDTH="288">Sets the options the user can choose from</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setOptionType(int)</TT></TD>
		<TD WIDTH="288">Sets the option type for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static void setRootFrame(Frame)</TT></TD>
		<TD WIDTH="288">Sets the root frame for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setSelectionValues(Object[])</TT></TD>
		<TD WIDTH="288">Sets the values the user has to select from</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setUI(OptionPaneUI)</TT></TD>
		<TD WIDTH="288">Sets the object responsible for the look and feel properties</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setValue(Object)</TT></TD>
		<TD WIDTH="288">Sets the value chosen by the user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setWantsInput(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether this dialog is to receive input from the user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static int</TT></TD>
		<TD WIDTH="288">Shows a confirmation</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>showConfirmDialog(Component, Object)</TT></TD>
		<TD WIDTH="288">dialog constructed using the parameters, and returns the value chosen by the user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD COLSPAN="2">
			<P ALIGN="CENTER"><I>Methods</I>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static int showConfirmDialog(Component, Object, String)</TT></TD>
		<TD WIDTH="288">Shows a confirmation dialog constructed using the parameters, and returns the value
			chosen by the user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static int showConfirmDialog(Component, Object, String, int)</TT></TD>
		<TD WIDTH="288">Shows a confirmation dialog constructed using the parameters, and returns the value
			chosen by the user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static int showConfirmDialog(Component, Object, String, int, int)</TT></TD>
		<TD WIDTH="288">Shows a confirmation dialog constructed using the parameters, and returns the value
			chosen by the user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static int showConfirmDialog(Component, Object, String, int, int, Icon)</TT></TD>
		<TD WIDTH="288">Shows a confirmation dialog constructed using the parameters, and returns the value
			chosen by the user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static String showInputDialog(Component, Object)</TT></TD>
		<TD WIDTH="288">Shows an input dialog constructed using the parameters, and returns the value entered
			by the user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static String showInputDialog(Component, Object, String, int)</TT></TD>
		<TD WIDTH="288">Shows an input dialog constructed using the parameters, and returns the value entered
			by the user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static String showInputDialog(Component, Object, String, int, Icon, Object[],Object)</TT></TD>
		<TD WIDTH="288">Shows an input dialog constructed using the parameters, and returns the value entered
			by the user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static String showInputDialog(Object)</TT></TD>
		<TD WIDTH="288">Shows an input dialog constructed using the parameters to build the UI; the return
			value is the value entered by the user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD COLSPAN="2">
			<P ALIGN="CENTER"><I>Methods</I>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static int showInternalConfirmDialog(Component, Object)</TT></TD>
		<TD WIDTH="288">Displays an internal confirm dialog using the parameters to build the UI; the return
			value is the choice as selected by the user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static int showInternalConfirmDialog(Component, Object, String, int)</TT></TD>
		<TD WIDTH="288">Displays an internal confirm dialog using the parameters to build the UI; the return
			value is the choice as selected by the user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static int showInternalConfirmDialog(Component, Object, String, int, int)</TT></TD>
		<TD WIDTH="288">Displays an internal confirm dialog using the parameters to build the UI; the return
			value is the choice as selected by the user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static int showInternalConfirmDialog(Component, Object, String, int, int,
			Icon)</TT></TD>
		<TD WIDTH="288">Displays an internal confirm dialog using the parameters to build the UI; the return
			value is the choice as selected by the user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static String showInternalInputDialog(Component, Object)</TT></TD>
		<TD WIDTH="288">Shows an internal input dialog constructed using the parameters to build the UI;
			the return value is the value entered by the user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static String showInternalInputDialog(Component, Object, String, int)</TT></TD>
		<TD WIDTH="288">Shows an input dialog constructed using the parameters to build the UI; the return
			value is the value entered by the user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD COLSPAN="2">
			<P ALIGN="CENTER"><I>Methods</I>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static String showInternalInputDialog(Component, Object, String, int,
			Icon,Object[],Object)</TT></TD>
		<TD WIDTH="288">Shows an input dialog constructed using the parameters to build the UI; the return
			value is the value entered by the user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static void showInternalMessageDialog(Component, Object)</TT></TD>
		<TD WIDTH="288">Shows an internal message dialog with the UI built using the parameters</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static void showInternalMessageDialog(Component, Object, String, int)</TT></TD>
		<TD WIDTH="288">Shows an internal message dialog with the UI built using the parameters</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static void showInternalMessageDialog(Component, Object, String, int,
			Icon)</TT></TD>
		<TD WIDTH="288">Shows an internal message dialog with the UI built using the parameters</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static int showInternalOptionDialog(Component, Object, String, int, int,
			Icon, Object[], Object)</TT></TD>
		<TD WIDTH="288">Shows an internal option dialog with the UI built using the parameters; the return
			value is the value as selected by the user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static void showMessageDialog(Component, Object)</TT></TD>
		<TD WIDTH="288">Shows a message dialog with the UI built using the parameters</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static void showMessageDialog(Component, Object, String, int)</TT></TD>
		<TD WIDTH="288">Shows a message dialog with the UI built using the parameters</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static void showMessageDialog(Component, Object, String, int, Icon)</TT></TD>
		<TD WIDTH="288">Shows a message dialog with the UI built using the parameters</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static int showOptionDialog(Component, Object, String, int, int, Icon,
			Object[], Object)</TT></TD>
		<TD WIDTH="288">Shows an option dialog with the UI built using the parameters; the return value is
			the value as selected by the user</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static void updateUI()</TT></TD>
		<TD WIDTH="288">Invoked to indicate a change to the pluggable look-and-feel features of the UI</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJPanelFONTTT"></A><TT>javax.swing.JPanel</TT></H3>
<P><TT>public class JPanel extends JComponent implements Accessible</TT></P>

<P>The JPanel class is a simple container that can be used to build a variety of
screens. In many situations, you will build a series of JPanel objects that all house
different portions of a screen, and then add each of those objects to a larger parent
container.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JPanel</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public string getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains a string that specifies the name of the class that renders the panel</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="288">Invoked to indicate a change in the pluggable look and feel properties</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJPasswordFieldFONTTT"></A><TT>javax.swing.JPasswordField</TT></H3>
<P><TT>public class JPasswordField extends JTextField</TT></P>

<P>With most applications, fields in which one enters confidential data will not
display the actual text being entered. For example, when you enter your PIN number
at an ATM machine, a series of asterisks will usually appear instead of your actual
PIN number. The JPasswordField class is a utility class that shows an &quot;echo&quot;
character instead of the actual text entered into it.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JPasswordField</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void copy()</TT></TD>
		<TD WIDTH="288">Copies the currently selected range in the text model to the clipboard without removing
			the contents</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void cut()</TT></TD>
		<TD WIDTH="288">Cuts the currently selected range in the text model to the clipboard removing the
			contents</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean echoCharIsSet()</TT></TD>
		<TD WIDTH="288">Returns true if the echo character for this component has been set</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public char getEchoChar()</TT></TD>
		<TD WIDTH="288">Obtains the echo character for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public char[] getPassword()</TT></TD>
		<TD WIDTH="288">Obtains the text contained in the component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getText()</TT></TD>
		<TD WIDTH="288">Obtains the text contained in the component (deprecated, use getPassword())</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains a logical name describing the UI; always returns PasswordFieldUI</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setEchoChar(char)</TT></TD>
		<TD WIDTH="288">Sets the echo character for this component</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJPopupMenuFONTTT"></A><TT>javax.swing.JPopupMenu</TT></H3>
<P><TT>public class JPopupMenu extends JComponent implements Accessible, MenuElement</TT></P>

<P>The JPopupMenu class allows a user to make a menu dynamically appear on the screen.
In a text editor application, for example, a user could right-click on some highlighted
text and a menu offering Cut, Copy, Paste choices would appear.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JPopupMenu</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JMenuItem add(Action)</TT></TD>
		<TD WIDTH="288">Adds the specified <TT>Action</TT> to the component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JMenuItem add(String)</TT></TD>
		<TD WIDTH="288">Adds the specified text to the component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JMenuItem add(JmenuItem)</TT></TD>
		<TD WIDTH="288">Adds the specified <TT>JMenuItem</TT> to the component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addPopupMenuListener(PopupMenuListener)</TT></TD>
		<TD WIDTH="288">Adds the specified listener to the appropriate group of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addSeparator()</TT></TD>
		<TD WIDTH="288">Adds a separator to the end of the menu</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected PropertyChangeListener createActionChangeListener(JMenuItem)</TT></TD>
		<TD WIDTH="288">Obtains a specific<TT> PropertyChangeListener</TT> for the specified menu item</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void firePopupMenuCanceled()</TT></TD>
		<TD WIDTH="288">Used internally for handling pop-up menu events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void firePopupMenuWillBecomeInvisible()</TT></TD>
		<TD WIDTH="288">Used internally for handling pop-up menu events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void firePopupMenuWillBecomeVisible()</TT></TD>
		<TD WIDTH="288">Used internally for handling pop-up menu events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component getComponent()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the AWT component responsible for drawing this item</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component getComponentAtIndex(int)</TT></TD>
		<TD WIDTH="288">Obtains the component at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int etComponentIndex(Component)</TT></TD>
		<TD WIDTH="288">Obtains the index of the specified component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static boolean getDefaultLightWeightPopupEnabled()</TT></TD>
		<TD WIDTH="288">Obtains the default value for the<TT> LightWeightPopupEnabled</TT> property</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component getInvoker()</TT></TD>
		<TD WIDTH="288">Obtains the object that spawned this menu</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getLabel()</TT></TD>
		<TD WIDTH="288">Obtains the pop-up's label</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Insets getMargin()</TT></TD>
		<TD WIDTH="288">Obtains the margin between the border of the pop-up menu and its parent container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public SingleSelectionModel getSelectionModel()</TT></TD>
		<TD WIDTH="288">Obtains the selection model for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public PopupMenuUI getUI()</TT></TD>
		<TD WIDTH="288">Obtains the active pluggable look-and-feel properties</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains a logical description of the UI; always returns <TT>PopupMenuUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void insert(Action, int)</TT></TD>
		<TD WIDTH="288">Inserts the specified <TT>Action</TT> at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void insert(Component, int)</TT></TD>
		<TD WIDTH="288">Inserts the specified <TT>Component</TT> at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isBorderPainted()</TT></TD>
		<TD WIDTH="288">Returns true if the border should be painted</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isLightWeightPopupEnabled()</TT></TD>
		<TD WIDTH="288">Returns true if lightweight pop-ups are in use</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isVisible()</TT></TD>
		<TD WIDTH="288">Returns true if this component is currently visible</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void pack()</TT></TD>
		<TD WIDTH="288">Causes this component to take up only the space required by its children</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void paintBorder(protected void) paintBorder(Graphics)</TT></TD>
		<TD WIDTH="288">Invoked when the border should be painted into the specified <TT>Graphics</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void processKeyEvent(KeyEvent, MenuElement[],MenuSelectionManager)</TT></TD>
		<TD WIDTH="288">Processes keys events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void processMouseEvent(MouseEvent, MenuElement[],MenuSelectionManager)</TT></TD>
		<TD WIDTH="288">Processes mouse events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removePopupMenuListener(PopupMenuListener)</TT></TD>
		<TD WIDTH="288">Removes the specified listener from the group of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setBorderPainted(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether the border should be painted</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setInvoker(Component)</TT></TD>
		<TD WIDTH="288">Sets the component responsible for spawning this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setLabel(String label)</TT></TD>
		<TD WIDTH="288">Sets the label of the pop-up</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static void</TT></TD>
		<TD WIDTH="288">Set whether or not</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>setDefaultLightWeightPopupEnabled(boolean)</TT></TD>
		<TD WIDTH="288">lightweight pop-ups are used</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setLocation(int, int)</TT></TD>
		<TD WIDTH="288">Sets the physical location of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setPopupSize(Dimension)</TT></TD>
		<TD WIDTH="288">Sets the physical size of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setPopupSize(int, int)</TT></TD>
		<TD WIDTH="288">Sets the physical size of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setSelected(Component)</TT></TD>
		<TD WIDTH="288">Sets the active selection</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setSelectionModel(SingleSelectionModel)</TT></TD>
		<TD WIDTH="288">Sets the selection model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setUI(PopupMenuUI)</TT></TD>
		<TD WIDTH="288">Sets the active pluggable look-and-feel properties</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setVisible(boolean)</TT></TD>
		<TD WIDTH="288">Sets the current visibility</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void show(Component, int, int)</TT></TD>
		<TD WIDTH="288">Displays the pop-up menu with the specified parent at the specified location</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="288">Invoked to indicate a change in pluggable look-and-feel properties</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJProgressBarFONTTT"></A><TT>javax.swing.JProgressBar</TT></H3>
<P><TT>public class JProgressBar extends JComponent implements SwingConstants, Accessible</TT></P>

<P>The JProgressBar class is used to visually report on the progress of an action.
For example, when rendering a highly detailed screen, a progress bar might appear
to report on the status of the rendering.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JProgressBar</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addChangeListener(ChangeListener)</TT></TD>
		<TD WIDTH="288">Adds a <TT>ChangeListener</TT> to the collection of listeners; a<TT> ChangeListener</TT>
			is notified whenever the state of the component changes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected ChangeListener createChangeListener()</TT></TD>
		<TD WIDTH="288">Used internally for event management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void fireStateChanged()</TT></TD>
		<TD WIDTH="288">Used internally for event management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getMaximum()</TT></TD>
		<TD WIDTH="288">Obtains the maximum value for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getMinimum()</TT></TD>
		<TD WIDTH="288">Obtains the minimum value for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public BoundedRangeModel getModel()</TT></TD>
		<TD WIDTH="288">Sets the active model for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getOrientation()</TT></TD>
		<TD WIDTH="288">Obtains the orientation of this component; return value is either <TT>JProgressBar.HORIZONTAL</TT>
			or <TT>JProgressBar.VERTICAL</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public double getPercentComplete()</TT></TD>
		<TD WIDTH="288">Obtains the percentage complete for the progress bar</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getString()</TT></TD>
		<TD WIDTH="288">Obtains the current progress string</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public ProgressBarUI getUI()</TT></TD>
		<TD WIDTH="288">Obtains the active pluggable look and feel properties</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains a logical name for the UI; always returns <TT>ProgressBarUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getValue()</TT></TD>
		<TD WIDTH="288">Obtains the current value of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isBorderPainted()</TT></TD>
		<TD WIDTH="288">Returns true if the border should be painted for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void paintBorder(protected void</TT></TD>
		<TD WIDTH="288">Invoked when this component should</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>paintBorder(Graphics) public void</TT></TD>
		<TD WIDTH="288">paint its border into the specified <TT>Graphics</TT> object Removes the specified</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>removeChangeListener(ChangeListener)</TT></TD>
		<TD WIDTH="288"><TT>ChangeListener</TT> from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setBorderPainted(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether the border should be painted</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setMaximum(int)</TT></TD>
		<TD WIDTH="288">Sets the maximum value for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setMinimum(int)</TT></TD>
		<TD WIDTH="288">Sets the minimum value for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setModel(BoundedRangeModel)</TT></TD>
		<TD WIDTH="288">Sets the model for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setOrientation(int)</TT></TD>
		<TD WIDTH="288">Sets the current orientation of this component (either <TT>JprogressBar. HORIZONTAL</TT>
			or <TT>JprogressBar. VERTICAL</TT>)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setString(String s)</TT></TD>
		<TD WIDTH="288">Sets the value of the progress string</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setUI(ProgressBarUI)</TT></TD>
		<TD WIDTH="288">Sets the current pluggable look-and-feel properties for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setValue(int)</TT></TD>
		<TD WIDTH="288">Sets the current value of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="288">Invoked to indicate a change in pluggable look-and-feel properties</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJRadioButtonFONTTT"></A><TT>javax.swing.JRadioButton</TT></H3>
<P><TT>public class JRadioButton extends JToggleButton implements Accessible</TT></P>

<P>The JRadioButton class is used when a series of choices are to be presented and
only one may be selected. A radio button is not much use shown alone, and groups
of radio buttons are logically held together using a ButtonGroup object.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JRadioButton</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext</TT> <TT>getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Returns a logical description of the UI; always returns <TT>RadioButtonUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="288">Invoked to indicate a change in pluggable look-and-feel features</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JRadioButton</TT>: Example</H4>
<P>The <TT>JRadioButton</TT> is used to represent a binary state radio button.


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import java.awt.event.*;

import javax.swing.*;

import javax.swing.*;

import javax.swing.event.*;



public class JRadioButtonDemo extends JApplet { 



    JRadioButton     jradOption1;

    JRadioButton     jradOption2;

    ButtonGroup      group;



    public void init() { 

        resize(400, 400);



        // Create a new 2x1 Grid Layout object with

        // a 10 pixel gaps between all components.

        GridLayout gridLayout = new GridLayout(1,2,10,10);



        // Set the layout.

        getContentPane().setLayout(gridLayout);



        //create components to add to layout

        jradOption1 = new JRadioButton

        (&quot;Radio Button  1 is selected&quot;);

        jradOption1.setSelected(true);

        jradOption2 = new JRadioButton

        (&quot;Radio Button  2 is not selected&quot;);

        group = new ButtonGroup();



        // Add components.

        getContentPane().add(jradOption1);

        getContentPane().add(jradOption2);



        //add radio buttons to button group

        group.add(jradOption1);

        group.add(jradOption2);



        Action action = new Action();

        jradOption1.addActionListener(action);

        jradOption2.addActionListener(action);

    } 



    class Action implements java.awt.event.ActionListener { 

        public final void actionPerformed(ActionEvent ae) { 

            Object source = ae.getSource();



            if (source == jradOption1) { 

                jradOption1.setText

                (&quot;Radio Button  1 is selected&quot;);

                jradOption2.setText

                (&quot;Radio Button  2 is not selected&quot;);

} 

            else if (source == jradOption2) { 

                jradOption2.setText

                (&quot;Radio Button  2 is selected&quot;);

                jradOption1.setText

                (&quot;Radio Button  1 is not selected&quot;);

} 

        } 

    } 



} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJRadioButtonMenuItemFONTTT"></A><TT>javax.swing.JRadioButtonMenuItem</TT></H3>
<P><TT>public class JRadioButtonMenuItem extends JMenuItem implements Accessible</TT></P>

<P>The JRadioButtonMenuItem allows a radio button to be included as a menu item.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JRadioButtonMenuItem</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext</TT> <TT>getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains a logical description of the UI; always returns <TT>RadioButtonMenuItemUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void init(String, Icon)</TT></TD>
		<TD WIDTH="288">Used internally for initialization tasks</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void requestFocus()</TT></TD>
		<TD WIDTH="288">Requests that focus be given to this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setAction(Action)</TT></TD>
		<TD WIDTH="288">Sets the <TT>Action</TT> object associated with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="288">Invoked to indicate a change in pluggable look-and-feel attributes</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJRootPaneFONTTT"></A><TT>javax.swing.JRootPane</TT></H3>
<P><TT>public class JRootPane extends JComponent implements Accessible</TT></P>

<P>The JRootPane class is a container that always contains the following panes: GlassPane,
ContentPane, and LayeredPane. The GlassPane is the first child owned by this component
and can be optionally shown above all other components. The ContentPane is the area
in which all additional child components should be added. For example, never add
a child through a call like JRootPane.add(foo), but instead use JRootPane.getContentPane().add(foo).
The LayeredPane can be used if component layering is needed.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JRootPane</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void addImpl(Component, Object, int)</TT></TD>
		<TD WIDTH="288">Adds the specified component to the container at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addNotify()system event queue</TT></TD>
		<TD WIDTH="288">Registers root pane with the</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected Container createContentPane()</TT></TD>
		<TD WIDTH="288">Used internally to create the content pane</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected Component createGlassPane()</TT></TD>
		<TD WIDTH="288">Used internally to create the glass pane</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected JLayeredPane createLayeredPane()</TT></TD>
		<TD WIDTH="288">Used internally to create the layered pane</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected LayoutManager createRootLayout()</TT></TD>
		<TD WIDTH="288">Used internally to create the root layout manager</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext</TT></TD>
		<TD WIDTH="288">Obtains a reference to the</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>getAccessibleContext()</TT></TD>
		<TD WIDTH="288">AccessibleContext object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Container getContentPane()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the content pane</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JButton getDefaultButton()</TT></TD>
		<TD WIDTH="288">Obtains the default button for this root pane, or null if none exists</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component getGlassPane()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the glass pane</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component getJMenuBar()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the JMenuBar object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JLayeredPane getLayeredPane()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the layered pane</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JMenuBar getMenuBar()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the JMenuBar object; deprecated, use getJMenuBar</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isValidateRoot()</TT></TD>
		<TD WIDTH="288">Returns true if validations on this component will cause all children to be validated
			as well</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setContentPane(Container)</TT></TD>
		<TD WIDTH="288">Sets the content pane</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setDefaultButton(JButton)</TT></TD>
		<TD WIDTH="288">Sets the default button for the root pane</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setGlassPane(Component)</TT></TD>
		<TD WIDTH="288">Sets the glass pane</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public setJMenuBar(JMenuBar)</TT></TD>
		<TD WIDTH="288">Associates the specified menu bar with this pane</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setLayeredPane(JLayeredPane)</TT></TD>
		<TD WIDTH="288">Sets the layered pane</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setMenuBar(JMenuBar)</TT></TD>
		<TD WIDTH="288">Sets the menu bar; deprecated, use setJMenuBar(JMenuBar)</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJScrollBarFONTTT"></A><TT>javax.swing.JScrollBar</TT></H3>
<P><TT>public class JScrollBar extends JComponent implements Adjustable, Accessible</TT></P>

<P>The JScrollBar class is used to model a physical scrollbar. In most situations,
you will not deal directly with this class but instead will work with a class like
JScrollPane.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JScrollBar</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addAdjustmentListener(AdjustmentListener)</TT></TD>
		<TD WIDTH="288">Adds an<TT> AdjustmentListener</TT> to the collection of listeners; an <TT>AdjustmentListener</TT>
			is notified every time the scrollbar value changes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void fireAdjustmentValueChanged</TT> <TT>(AdjustmentEvent)</TT></TD>
		<TD WIDTH="288">Used internally for event management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext</TT> <TT>getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getBlockIncrement()</TT></TD>
		<TD WIDTH="288">Obtains the delta for which each movement of the scrollbar is responsible</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getBlockIncrement(int)</TT></TD>
		<TD WIDTH="288">Obtains the delta for which each movement of a scrollbar with the specified direction
			is responsible</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getMaximum()</TT></TD>
		<TD WIDTH="288">Obtains the maximum value this component can represent</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Dimension getMaximumSize()</TT></TD>
		<TD WIDTH="288">Obtains the maximum size of this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getMinimum()</TT></TD>
		<TD WIDTH="288">Obtains the minimum value this component can represent</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Dimension getMinimumSize()</TT></TD>
		<TD WIDTH="288">Obtains the minimum size this component can take up</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public BoundedRangeModel getModel()</TT></TD>
		<TD WIDTH="288">Obtains the value for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getOrientation()</TT></TD>
		<TD WIDTH="288">Obtains the orientation of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public ScrollBarUI getUI()</TT></TD>
		<TD WIDTH="288">Obtains the active pluggable look-and-feel features for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains a logical description of the active UI; always returns <TT>ScrollBarUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getUnitIncrement()</TT></TD>
		<TD WIDTH="288">Obtains the increment value associated with this scrollbar</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getUnitIncrement(int)</TT></TD>
		<TD WIDTH="288">Obtains the increment value associated with a scrollbar that has the specified orientation</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getValue()</TT></TD>
		<TD WIDTH="288">Obtains the current value of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean getValueIsAdjusting()</TT></TD>
		<TD WIDTH="288">Returns true if an adjustment is in progress</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getVisibleAmount()</TT></TD>
		<TD WIDTH="288">Obtains the active visible amount</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeAdjustmentListener(AdjustmentListener)</TT></TD>
		<TD WIDTH="288">Removes the specified<TT> AdjustmentListener</TT> from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setBlockIncrement(int)</TT></TD>
		<TD WIDTH="288">Sets the block increment associated with this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setEnabled(boolean)</TT></TD>
		<TD WIDTH="288">Sets the enabled status of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setMaximum(int)</TT></TD>
		<TD WIDTH="288">Sets the maximum value this component can take on</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setMinimum(int)</TT></TD>
		<TD WIDTH="288">Sets the minimum value this component can take on</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setModel(BoundedRangeModel)</TT></TD>
		<TD WIDTH="288">Set the model associated with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setOrientation(int)</TT></TD>
		<TD WIDTH="288">Sets the orientation of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setUnitIncrement(int)</TT></TD>
		<TD WIDTH="288">Sets the unit increment of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setValue(int)</TT></TD>
		<TD WIDTH="288">Sets the current value being displayed with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setValueIsAdjusting(boolean)</TT></TD>
		<TD WIDTH="288">Sets the active <TT>ValueIsAdjusting</TT> status</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setValues(int, int, int, int)</TT></TD>
		<TD WIDTH="288">Sets the specified value properties</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setVisibleAmount(int)</TT></TD>
		<TD WIDTH="288">Sets the active visible amount</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="288">Invoked to indicate a change in pluggable look and feel features</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJScrollPaneFONTTT"></A><TT>javax.swing.JScrollPane</TT></H3>
<P><TT>public class JScrollPane extends JComponent implements ScrollPaneConstants,
Accessible</TT></P>

<P>The JScrollPane component is a container that allows scrolling over a viewport.
That portion of the view not currently visible will be placed offscreen, and the
user can scroll to see it.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JScrollPane</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JScrollBar createHorizontalScrollBar()</TT></TD>
		<TD WIDTH="288">Used internally to build the UI</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JScrollBar createVerticalScrollBar()</TT></TD>
		<TD WIDTH="288">Used internally to build the UI</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected JViewport createViewport()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>JViewport</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext</TT> <TT>getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JViewport getColumnHeader()</TT></TD>
		<TD WIDTH="288">Obtains the column header</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component getCorner(String)</TT></TD>
		<TD WIDTH="288">Obtains the component with the specified key</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JScrollBar getHorizontalScrollBar()</TT></TD>
		<TD WIDTH="288">Obtains the horizontal scrollbar</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getHorizontalScrollBarPolicy()</TT></TD>
		<TD WIDTH="288">&nbsp;</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JViewport getRowHeader()</TT></TD>
		<TD WIDTH="288">Obtains the row header</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public ScrollPaneUI getUI()</TT></TD>
		<TD WIDTH="288">Obtains the active pluggable look-and-feel properties</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains a logical description of the UI; always returns <TT>ScrollPaneUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JScrollBar getVerticalScrollBar()</TT></TD>
		<TD WIDTH="288">Obtains the vertical scrollbar</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getVerticalScrollBarPolicy()</TT></TD>
		<TD WIDTH="288">Obtains the vertical scrollbar's policy</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JViewport getViewport()</TT></TD>
		<TD WIDTH="288">Obtains the viewport associated with this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Border getViewportBorder()</TT></TD>
		<TD WIDTH="288">Obtains the viewport border</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isValidateRoot()</TT></TD>
		<TD WIDTH="288">Returns true if validations on this component will cause all children to be validated
			as well</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setColumnHeader(JViewport)</TT></TD>
		<TD WIDTH="288">Sets the current column header</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setColumnHeaderView(Component)</TT></TD>
		<TD WIDTH="288">Sets the current column header view</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setCorner(String, Component)</TT></TD>
		<TD WIDTH="288">Sets the corner with the specified name</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void</TT> <TT>setHorizontalScrollBar(JscrollBar)</TT></TD>
		<TD WIDTH="288">Set the scrollbar which controls horizontal scrolling</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setLayout(LayoutManager)</TT></TD>
		<TD WIDTH="288">Sets the layout manager for this container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setHorizontalScrollBarPolicy(int)</TT></TD>
		<TD WIDTH="288">Sets the horizontal scrollbar's scroll policy</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setRowHeader(JViewport)</TT></TD>
		<TD WIDTH="288">Sets the row header</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setRowHeaderView(Component)</TT></TD>
		<TD WIDTH="288">Sets the row header view</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setUI(ScrollPaneUI)</TT></TD>
		<TD WIDTH="288">Sets the active pluggable look-and-feel properties</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void</TT> <TT>setVerticalScrollBar(JScrollBar)</TT></TD>
		<TD WIDTH="288">Set the scrollbar which controls vertical scrolling</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setVerticalScrollBarPolicy(int)</TT></TD>
		<TD WIDTH="288">Sets the vertical scrollbar scroll policy</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setViewport(JViewport)</TT></TD>
		<TD WIDTH="288">Sets the active viewport</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setViewportBorder(Border)</TT></TD>
		<TD WIDTH="288">Sets the viewport border</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setViewportView(Component)</TT></TD>
		<TD WIDTH="288">Sets the viewport view</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="288">Invoked to indicate a change in pluggable look and feel properties</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJSeparatorFONTTT"></A><TT>javax.swing.JSeparator</TT></H3>
<P><TT>public class JSeparator extends JComponent implements SwingConstants, Accessible</TT></P>

<P>The JSeparator class is a Swing implementation of a menu separator.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JSeparator</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext</TT> <TT>getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getOrientation()</TT></TD>
		<TD WIDTH="288">Obtains the orientation of the separator</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public SeparatorUI getUI()</TT></TD>
		<TD WIDTH="288">Obtains the active pluggable look-and-feel properties</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains a logical description of the active UI; always returns <TT>SeparatorUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setOrientation(int)</TT></TD>
		<TD WIDTH="288">Sets the orientation of the component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setUI(SeparatorUI)</TT></TD>
		<TD WIDTH="288">Sets the active pluggable look-and-feel properties</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="288">Invoked to indicate a change in pluggable look-and-feel properties</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJSliderFONTTT"></A><TT>javax.swing.JSlider</TT></H3>
<P><TT>public class JSlider extends JComponent implements SwingConstants, Accessible</TT></P>

<P>The JSlider class represents a slider control. It has a minimum and maximum value,
and also <I>n</I> number of ticks between each major number. Sliders are often used
when a user can choose between a wide range of bounded values (for example, the amount
of red, green, or blue in a color picker).</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JSlider</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addChangeListener(ChangeListener)</TT></TD>
		<TD WIDTH="288">Adds a <TT>ChangeListener</TT> to the collection of listeners; a<TT> ChangeListener</TT>
			is notified whenever the value of the slider changes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected ChangeListener createChangeListener()</TT></TD>
		<TD WIDTH="288">Used internally for event management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Hashtable createStandardLables</TT> <TT>(int, int)</TT></TD>
		<TD WIDTH="288">Makes a hashtable of text labels starting with specified increments, starting from
			the specified position</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Hashtable createStandardLables(int)</TT></TD>
		<TD WIDTH="288">Makes a hashtable of text labels starting with specified increments</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void fireStateChanged()</TT></TD>
		<TD WIDTH="288">Used internally for event management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext</TT> <TT>getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getExtent()</TT></TD>
		<TD WIDTH="288">Obtains the extent for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean getInverted()</TT></TD>
		<TD WIDTH="288">Returns true if the scale of the slider is inverted</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Dictionary getLabelTable()</TT></TD>
		<TD WIDTH="288">Obtains a dictionary of labels to draw at different values</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getMajorTickSpacing()</TT></TD>
		<TD WIDTH="288">Obtains the major tick spacing for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getMaximum()</TT></TD>
		<TD WIDTH="288">Obtains the maximum value displayed by this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getMinimum()</TT></TD>
		<TD WIDTH="288">Obtains the minimum value displayed by this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getMinorTickSpacing()</TT></TD>
		<TD WIDTH="288">Obtains the minor tick spacing displayed by this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public BoundedRangeModel getModel()</TT></TD>
		<TD WIDTH="288">Obtains the model for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getOrientation()</TT></TD>
		<TD WIDTH="288">Obtains the orientation of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean getPaintLabels()</TT></TD>
		<TD WIDTH="288">Returns true if labels should be painted</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean getPaintTicks()</TT></TD>
		<TD WIDTH="288">Returns true if ticks should be painted</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean getPaintTrack()</TT></TD>
		<TD WIDTH="288">Returns true if the track should be painted</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean getSnapToTicks()</TT></TD>
		<TD WIDTH="288">Returns true if the knob should only move in discreet increments</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public SliderUI getUI()</TT></TD>
		<TD WIDTH="288">Obtains the active pluggable look and feel attributes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains a logical description of this component; always returns <TT>SliderUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getValue()</TT></TD>
		<TD WIDTH="288">Obtains the current value displayed by this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean getValueIsAdjusting()public void</TT></TD>
		<TD WIDTH="288">Returns true if this component is currently adjusting Removes the specified</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>removeChangeListener(ChangeListener)</TT></TD>
		<TD WIDTH="288"><TT>ChangeListener</TT> from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setExtent(int)</TT></TD>
		<TD WIDTH="288">Sets the extent for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setInverted(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether or not to invert the slider's scale</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setMajorTickSpacing(int)</TT></TD>
		<TD WIDTH="288">Sets the major tick spacing for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setMaximum(int)</TT></TD>
		<TD WIDTH="288">Sets the maximum value this component can take on</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setMinimum(int)</TT></TD>
		<TD WIDTH="288">Sets the minimum value this component can take on</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setMinorTickSpacing(int)</TT></TD>
		<TD WIDTH="288">Sets the minor tick spacing</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setModel(BoundedRangeModel)</TT></TD>
		<TD WIDTH="288">Sets the model for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setOrientation(int)</TT></TD>
		<TD WIDTH="288">Sets the orientation of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setPaintLabels(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether this component should paint labels</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setPaintTicks(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether this component should paint ticks</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setPainttrack(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether this component should paint a track</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setSnapToTicks(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether this component should only allow discreet values</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setUI(SliderUI)</TT></TD>
		<TD WIDTH="288">Sets the active pluggable look-and-feel attributes for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setValue(int)</TT></TD>
		<TD WIDTH="288">Sets the active display value of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setValueIsAdjusting(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether the value is currently adjusting</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String toString()</TT></TD>
		<TD WIDTH="288">Obtains a <TT>String</TT> object that represents the current state of this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void updateLabelUIs()</TT></TD>
		<TD WIDTH="288">Used internally to update the <TT>Label</TT> UI's</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="288">Invoked to indicate a change in pluggable look-and-feel features</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJSplitPaneFONTTT"></A><TT>javax.swing.JSplitPane</TT></H3>
<P><TT>public class JSplitPane extends JComponent implements Accessible</TT></P>

<P>The JSplitPane class is used to split a single container into exactly two parts,
each of which can independently house a series of components. The dividing line between
the two containers can be moved by the user or can be done programmatically.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JSplitPane</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static String BOTTOM</TT></TD>
		<TD WIDTH="288">Used to add a component below existing components</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final String CONTINUOUS_LAYOUT_PROPERTY</TT></TD>
		<TD WIDTH="288">Property associated with<TT> continuousLayout</TT>; this property is bound</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected boolean continuousLayout</TT></TD>
		<TD WIDTH="288">True if views are actively redisplayed during a resize action</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static String DIVIDER</TT></TD>
		<TD WIDTH="288">Represents the component that acts as the physical divider</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final String DIVIDER_SIZE_PROPERTY</TT></TD>
		<TD WIDTH="288">Property associated with<TT> dividerSize</TT>; this property is bound</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected int dividerSize</TT></TD>
		<TD WIDTH="288">Indicates the size of the divider</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final int HORIZONTAL_SPLIT</TT></TD>
		<TD WIDTH="288">Indicates that the divider should be horizontal</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static String LAST_DIVIDER_LOCATION_PROPERTY</TT></TD>
		<TD WIDTH="288">Property associated with<TT> lastDividerLocation</TT>; this property is bound</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected int lastDividerLocation</TT></TD>
		<TD WIDTH="288">Location of the split pane prior to the last move</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static String LEFT</TT></TD>
		<TD WIDTH="288">Used to add a component to the left of the existing components</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected Component leftComponent</TT></TD>
		<TD WIDTH="288">Depending on the orientation of the split, this represents the component in the top
			or left position</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final String ONE_TOUCH_EXPANDABLE_PROPERTY</TT></TD>
		<TD WIDTH="288">Property associated with<TT> oneTouchExpandable</TT>; this property is bound</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected boolean oneTouchExpandable</TT></TD>
		<TD WIDTH="288">Indicates whether there is a widget to expand/collapse the split</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected int orientation</TT></TD>
		<TD WIDTH="288">Indicates the split orientation</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final String ORIENTATION_PROPERTY</TT></TD>
		<TD WIDTH="288">Property associated with orientation; this property is bound</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static String RIGHT</TT></TD>
		<TD WIDTH="288">Used to add a component to the right of existing components</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected Component rightComponent</TT></TD>
		<TD WIDTH="288">Depending on the orientation of the split, this represents the component in the bottom
			or right position</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static String TOP</TT></TD>
		<TD WIDTH="288">Used to add a component on top of existing components</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static int VERTICAL_SPLIT</TT></TD>
		<TD WIDTH="288">Used to indicate that the screen should have a vertical split</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void addImpl(Component, Object, int)</TT></TD>
		<TD WIDTH="288">Adds the specified component to the pane specified by the <TT>Object</TT> parameter
			at the specified index; if a component already exists at that location, the new component
			will take its place</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext</TT> <TT>getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component getBottomComponent()</TT></TD>
		<TD WIDTH="288">Depending on the orientation of the split, obtains the bottom or right component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getDividerLocation()</TT></TD>
		<TD WIDTH="288">Obtains the current divider location</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getDividerSize()</TT></TD>
		<TD WIDTH="288">Obtains the current size of the divider</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getLastDividerLocation()</TT></TD>
		<TD WIDTH="288">Obtains the location of the divider before the last resize</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component getLeftComponent()</TT></TD>
		<TD WIDTH="288">Depending on the orientation of the split, obtains the top or left component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getMaximumDividerLocation()</TT></TD>
		<TD WIDTH="288">Obtains the maximum location the divider can reach</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getMinimumDividerLocation()</TT></TD>
		<TD WIDTH="288">Obtains the minimum value the divider can take on</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getOrientation()</TT></TD>
		<TD WIDTH="288">Obtains the current orientation of the divider</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component getRightComponent()</TT></TD>
		<TD WIDTH="288">Depending on the orientation of the split, obtains the right or bottom component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component getTopComponent()</TT></TD>
		<TD WIDTH="288">Depending on the orientation of the split, obtains the left or top component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public SplitPaneUI getUI()</TT></TD>
		<TD WIDTH="288">Obtains the active pluggable look-and-feel properties</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains a logical description of the look-and-feel properties; always returns <TT>SplitPaneUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isContinuousLayout()</TT></TD>
		<TD WIDTH="288">Returns true if views are actively redisplayed during a resize action</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isOneTouchExpandable()</TT></TD>
		<TD WIDTH="288">Returns true if a widget exists to dynamically collapse/expand the divider</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void paintChildren(Graphics)</TT></TD>
		<TD WIDTH="288">Invoked when this component should paint its children into the specified <TT>Graphics</TT>
			object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void remove(Component)</TT></TD>
		<TD WIDTH="288">Removes the specified component from the view</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void remove(int)</TT></TD>
		<TD WIDTH="288">Removes the component at the specified index from the view</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeAll()</TT></TD>
		<TD WIDTH="288">Removes all components from the view</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void resetToPreferredSizes()</TT></TD>
		<TD WIDTH="288">Lays out the screen again such that each component takes up the space returned by
			its <TT>getPreferredSize()</TT> method</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setAccessibleValue(Number)</TT></TD>
		<TD WIDTH="288">Sets the <TT>Accessible</TT> value for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setBottomComponent(Component)</TT></TD>
		<TD WIDTH="288">Depending on the orientation of the split, sets either the bottom or right component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setDividerLocation(double)</TT></TD>
		<TD WIDTH="288">Sets the location of the divider as a percentage</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setContinuousLayout(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether this component should dynamically resize each container during a resize
			action</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setDividerLocation(int)</TT></TD>
		<TD WIDTH="288">Sets the current location of the divider</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setDividerSize(int)</TT></TD>
		<TD WIDTH="288">Sets the current size of the divider</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setLastDividerLocation(int)</TT></TD>
		<TD WIDTH="288">Sets the location of the divider prior to the last resize action</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setLeftComponent(Component)</TT></TD>
		<TD WIDTH="288">Depending on the orientation of the split, sets either the left or top component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setOneTouchExpandable(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether a widget exists to dynamically collapse/expand the split</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setOrientation(int)</TT></TD>
		<TD WIDTH="288">Sets the current orientation of the split</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setRightComponent(Component)</TT></TD>
		<TD WIDTH="288">Depending on the orientation of the split, sets either the right or bottom component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setTopComponent(Component)</TT></TD>
		<TD WIDTH="288">Depending on the orientation of the split, sets either the left or top component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setUI(SplitPaneUI)</TT></TD>
		<TD WIDTH="288">Sets the current look and feel properties for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="288">Invoked to indicate a change in the pluggable look and feel properties</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJTabbedPaneFONTTT"></A><TT>javax.swing.JTabbedPane</TT></H3>
<P><TT>public class JTabbedPane extends JComponent implements Serializable, Accessible,
SwingConstants</TT></P>

<P>The JTabbedPane class allows for switching between different components by clicking
on a title tab. This class controls information according to a folder model, in which
different bits of information are stored in each folder and users access a given
folder by clicking on its tab.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JTabbedPane</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>publc Component add(Component, int)</TT></TD>
		<TD WIDTH="288">Adds component at the specified tab index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component add(Component, Object)</TT></TD>
		<TD WIDTH="288">Adds a component with the specified constraints</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component add(Component)</TT></TD>
		<TD WIDTH="288">Adds a component to the tabbed pane</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component add(String, Component)</TT></TD>
		<TD WIDTH="288">Adds a component to the tabbed pane with the specified title</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addChangeListener(ChangeListener)</TT></TD>
		<TD WIDTH="288">Adds a <TT>ChangeListener</TT> to the collection of listeners; a<TT> ChangeListener</TT>
			is notified whenever the selected tab changes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addTab(String, Component)</TT></TD>
		<TD WIDTH="288">Adds the specified tab with the specified name</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addTab(String, Icon, Component)</TT></TD>
		<TD WIDTH="288">Adds the specified tab with the specified name and icon</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addTab(String, Icon, Component, String)</TT></TD>
		<TD WIDTH="288">Adds the specified tab with the specified name, icon, and tooltip</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected ChangeListener createChangeListener()</TT></TD>
		<TD WIDTH="288">Used internally for event management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void fireStateChanged()</TT></TD>
		<TD WIDTH="288">Used internally for event management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext</TT> <TT>getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Color getBackgroundAt(int)</TT></TD>
		<TD WIDTH="288">Obtains the background color of the specified tab</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Rectangle getBoundsAt(int)</TT></TD>
		<TD WIDTH="288">Obtains the bounds of the specified tab</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component getComponentAt(int)</TT></TD>
		<TD WIDTH="288">Obtains the component at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Icon getDisabledIconAt(int)</TT></TD>
		<TD WIDTH="288">Obtains the icon used to represent the specified tab when it is disabled</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Color getForegoundAt(int)</TT></TD>
		<TD WIDTH="288">Obtains the foreground color at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Icon getIconAt(int)</TT></TD>
		<TD WIDTH="288">Obtains the icon at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public SingleSelectionModel getModel()</TT></TD>
		<TD WIDTH="288">Obtains the model associated with this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component getSelectedComponent()</TT></TD>
		<TD WIDTH="288">Obtains the currently selected component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getSelectedIndex()</TT></TD>
		<TD WIDTH="288">Obtains the index of the currently selected component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getTabCount()</TT></TD>
		<TD WIDTH="288">Obtains the number of tabs currently in use</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getTabPlacement()</TT></TD>
		<TD WIDTH="288">Obtains the placement of tabs in the tab pane</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getTabRunCound()</TT></TD>
		<TD WIDTH="288">Obtains the number of rows of tabs</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getTitleAt(int)</TT></TD>
		<TD WIDTH="288">Obtains the title string at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getToolTipText(MouseEvent)</TT></TD>
		<TD WIDTH="288">Obtains the tooltip text associated with the specified event</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public TabbedPaneUI getUI()</TT></TD>
		<TD WIDTH="288">Obtains the active pluggable look-and-feel properties</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains a logical description of the current UI; always returns <TT>TabbedPaneUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int indexOfComponent(Component)</TT></TD>
		<TD WIDTH="288">Obtains the index of the first tab with the specified text</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int indexOfTab(String)</TT></TD>
		<TD WIDTH="288">Obtains the index of the specified tab</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int indexOfTab(Icon)</TT></TD>
		<TD WIDTH="288">Obtains the index of the first tab with the specified icon</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void insertTab(String, Icon, Component, String, int)</TT></TD>
		<TD WIDTH="288">Inserts the specified tab at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isEnabledAt(int)</TT></TD>
		<TD WIDTH="288">Returns true if the specified tab is enabled</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void remove(Component)</TT></TD>
		<TD WIDTH="288">Removes the tab asscociated with the specified component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeAll()</TT></TD>
		<TD WIDTH="288">Removes all tabs from the pane</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeChangeListener(ChangeListener)</TT></TD>
		<TD WIDTH="288">Removes the specified<TT> ChangeListener</TT> from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeTabAt(int)</TT></TD>
		<TD WIDTH="288">Removes the tab at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setBackgroundAt(int, Color)</TT></TD>
		<TD WIDTH="288">Sets background color of the specified tab to the specified color</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setComponentAt(int, Component)</TT></TD>
		<TD WIDTH="288">Replaces the component at the specified index with the specified component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setDisabledIconAt(int, Icon)</TT></TD>
		<TD WIDTH="288">Replaces the disabled icon at the specified index with the specified icon</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setEnabledAt(int, boolean)</TT></TD>
		<TD WIDTH="288">Sets whether or not the specified tab is enabled</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setForegroundAt(int, Color)</TT></TD>
		<TD WIDTH="288">Sets foreground color of the specified tab to the specified color</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setIconAt(int, Icon)</TT></TD>
		<TD WIDTH="288">Replaces the icon at the specified index with the specified icon</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setModel(SingleSelectionModel)</TT></TD>
		<TD WIDTH="288">Sets the model for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setSelectedComponent(Component)</TT></TD>
		<TD WIDTH="288">Selects the specified component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setSelectedIndex(int)</TT></TD>
		<TD WIDTH="288">Selects the component at the specified index</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setTabPlacement(int)</TT></TD>
		<TD WIDTH="288">Sets the tab placement for the pane</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setTitleAt(int, String)</TT></TD>
		<TD WIDTH="288">Sets the title of the specified component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setUI(TabbedPaneUI)</TT></TD>
		<TD WIDTH="288">Sets the active pluggable look-and-feel properties</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="288">Invoked to indicate a change in pluggable look-and-feel properties</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JTabbedPane</TT>: Example</H4>
<P>The <TT>JTabbedPane</TT> class is used to create a screen that leverages the tab
metaphor:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import javax.swing.*;

import javax.swing.border.*;

import javax.swing.event.*;





public class JTabbedPaneDemo extends JApplet { 

    JTabbedPane   tab;



    public void init() { 

        resize(400, 400);



        // Create a new GridLayout object with a 2x2 format and

        // a 10 pixel gaps between all components.

        BorderLayout borderLayout = new BorderLayout();

        BorderLayout borderLayoutTab1 = new BorderLayout();

        BorderLayout borderLayoutTab2 = new BorderLayout();



        // Set the layout.

        getContentPane().setLayout(borderLayout);



        //create components to add to layout



        JPanel jpnlTab1 = new JPanel();

        jpnlTab1.setLayout(borderLayoutTab1);

        JLabel jlblTab1 = new JLabel

        (&quot;This label appears in the panel on the first tab&quot;);



        JPanel jpnlTab2 = new JPanel();

        jpnlTab2.setLayout(borderLayoutTab2);

        JLabel jlblTab2 = new JLabel

        (&quot;This label appears in the panel on the second tab&quot;);



        tab = new JTabbedPane();

        tab.addTab(&quot;Tab 1&quot;, jpnlTab1);

        tab.addTab(&quot;Tab 2&quot;, jpnlTab2);







        // Add components.

        jpnlTab1.add(jlblTab1, BorderLayout.CENTER);

        jpnlTab2.add(jlblTab2, BorderLayout.CENTER);

        getContentPane().add(tab,&quot;Center&quot;);

        Change change = new Change();

        tab.addChangeListener(change);

    } 



    class Change implements ChangeListener { 

        public void stateChanged(ChangeEvent event) { 

            Object object = event.getSource();

            if (object == tab) { 

                if (tab.getTitleAt(tab.getSelectedIndex()).

                equals(&quot;Tab 1&quot;)) { 

//Tab 1 stuff

                }  else if (tab.getTitleAt(tab.getSelectedIndex()).

                  equals(&quot;Tab 2&quot;)) { 

//Tab 2 stuff

                } 

            } 

        } 

    } 



} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJTableFONTTT"></A><TT>javax.swing.JTable</TT></H3>
<P><TT>public class JTable extends JComponent implements TableModelListener, Scrollable,
TableColumnModelListener, ListSelectionListener, CellEditorListener, Accessible</TT></P>

<P>The JTable class is used to model data best shown in a grid. A spreadsheet is
the most obvious real-life example of an application that uses components similar
to JTable.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JTable</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final int AUTO_RESIZE_ALL_COLUMNS</TT></TD>
		<TD WIDTH="288">Indicates that a table resize should cause all columns to proportionally resize as
			well</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final int AUTO_RESIZE_LAST_COLUMN</TT></TD>
		<TD WIDTH="288">Indicates that a table resize should cause only the last column to resize</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final int AUTO_RESIZE_NEXT_COLUMN</TT></TD>
		<TD WIDTH="288">Indicates that a column resize causes the next column to resize in the opposite manner</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final int AUTO_RESIZE_OFF</TT></TD>
		<TD WIDTH="288">Indicates that a table resize should cause no columns to resize</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static final int AUTO_RESIZE_SUBSEQUENT_COLUMNS</TT></TD>
		<TD WIDTH="288">Indicates that a table resize should cause columns to resize in order to preserve
			total width</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected boolean autoCreateColumnsFromModel</TT></TD>
		<TD WIDTH="288">If true, the table model will provide the default column labels</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected int autoResizeMode</TT></TD>
		<TD WIDTH="288">Current policy for table resizing</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected transient TableCellEditor cellEditor</TT></TD>
		<TD WIDTH="288">Active cell editor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected boolean cellSelectionEnabled</TT></TD>
		<TD WIDTH="288">If true, then both row and column selection can be done at the same time</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected TableColumnModel columnModel</TT></TD>
		<TD WIDTH="288">Active column model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected TableModel dataModel</TT></TD>
		<TD WIDTH="288">Active table model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected Hashtable defaultEditorsByColumnClass</TT></TD>
		<TD WIDTH="288">Table of content editors</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected Hashtable defaultRenderersByColumnClass</TT></TD>
		<TD WIDTH="288">Table of content renderers</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int editingColumn</TT></TD>
		<TD WIDTH="288">If you are currently editing the table, contains the column number of the cell; otherwise,
			contains -1</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int editingRow</TT></TD>
		<TD WIDTH="288">If you are currently editing the table, contains the row number of the cell; otherwise,
			contains -1</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected transient Component editorComp</TT></TD>
		<TD WIDTH="288">If you are currently editing the table, contains the editor component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected Color gridColor</TT></TD>
		<TD WIDTH="288">The color of the grid</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected Dimension preferredViewportSize</TT></TD>
		<TD WIDTH="288">Preferred size</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected int rowHeight</TT></TD>
		<TD WIDTH="288">Height of all rows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected int rowMargin</TT></TD>
		<TD WIDTH="288">Margin between rows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected boolean rowSelectionAllowed</TT></TD>
		<TD WIDTH="288">True if a user can select an entire row</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected Color selectionBackground</TT></TD>
		<TD WIDTH="288">Background color for selected cells</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected Color selectionForeground</TT></TD>
		<TD WIDTH="288">Foreround color for selected cells</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected ListSelectionModel selectionModel</TT></TD>
		<TD WIDTH="288">ListSelectionModel object associated with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected boolean showHorizontalLines</TT></TD>
		<TD WIDTH="288">If true, table draws horizontal lines between components</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected boolean showVerticalLines</TT></TD>
		<TD WIDTH="288">If true, table draws vertical lines between components</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected JTableHeader tableHeader</TT></TD>
		<TD WIDTH="288">The <TT>JTableHeader</TT> object associated with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addColumn(TableColumn)</TT></TD>
		<TD WIDTH="288">Adds the specified column</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addColumnSelectionInterval(int, int)</TT></TD>
		<TD WIDTH="288">Increases the current selection to include the specified column range</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addNotify()</TT></TD>
		<TD WIDTH="288">Calls <TT>configureEnclosingScrollPane()</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addRowSelectionInterval(int, int)</TT></TD>
		<TD WIDTH="288">Increases the current selection to include the specified row range</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void clearSelection()</TT></TD>
		<TD WIDTH="288">Clears the active selection</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void columnAdded(TableColumnModelEvent)</TT></TD>
		<TD WIDTH="288">Invoked when a new column is added</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int columnAtPoint(Point)</TT></TD>
		<TD WIDTH="288">Obtains the column at the specified coordinates, or -1 if there is none</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void columnMarginChanged(ChangeEvent)</TT></TD>
		<TD WIDTH="288">Invoked when a column margin changes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void columnMoved(TableColumnModelEvent)</TT></TD>
		<TD WIDTH="288">Invoked when a column is moved</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void columnRemoved(TableColumnModelEvent)</TT></TD>
		<TD WIDTH="288">Invoked when a column is removed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void configureEnclosingScrollPane()</TT></TD>
		<TD WIDTH="288">If the table is a viewport for a<TT> JScrollPane</TT>, configure that <TT>ScrollPane</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int convertColumnIndexToModel(int)</TT></TD>
		<TD WIDTH="288">Obtains the index of the column in the model which is being displayed in the <TT>viewColumnIndex</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int convertColumnIndexToView(int)</TT></TD>
		<TD WIDTH="288">Obtains the index of the column in the model which is being displayed in the <TT>modelColumnIndex</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected TableColumnModel createDefaultColumnModel()</TT></TD>
		<TD WIDTH="288">Used internally to create the <TT>TableColumnModel</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void createDefaultColumnsFromModel()</TT></TD>
		<TD WIDTH="288">Clears the current table and creates a new one using the default values in the mode</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected TableModel createDefaultDataModel()</TT></TD>
		<TD WIDTH="288">Used internally to create the <TT>TableModel</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void createDefaultEditors()</TT></TD>
		<TD WIDTH="288">Used internally to create the cell editor objects</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void createDefaultRenderers()</TT></TD>
		<TD WIDTH="288">Used internally to create the cell rendering objects</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected ListSelectionModel createDefaultSelectionModel()</TT></TD>
		<TD WIDTH="288">Used internally to create the ListSelectionModel object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected JTableHeader createDefaultTableHeader()</TT></TD>
		<TD WIDTH="288">Used internally to create the JTableHeader object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public static JScrollPane createScrollPaneForTable(JTable)</TT></TD>
		<TD WIDTH="288">Convenience method used to create a new JScrollPane object that houses the specified
			JTable object; deprecated, use new JScrollPane(aTable)</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean editCellAt(int, int)</TT></TD>
		<TD WIDTH="288">Attempts to start editing the specified cell; returns false if editing is not possible
			or the cell does not exist</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean editCellAt(int, int, EventObject)</TT></TD>
		<TD WIDTH="288">Attempts to start editing the specified cell; returns false if editing is not possible
			or the cell does not exist</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void editingCanceled(ChangeEvent)</TT></TD>
		<TD WIDTH="288">Invoked when cell editing is cancelled</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void editingStopped(ChangeEvent)</TT></TD>
		<TD WIDTH="288">Invoked when editing of a cell is stopped</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the AccessibleContext object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean getAutoCreateColumnsFromModel()</TT></TD>
		<TD WIDTH="288">Returns true if the table model provides default columns</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getAutoResizeMode()</TT></TD>
		<TD WIDTH="288">Obtains the current resize policy</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public CellEditor getCellEditor()</TT></TD>
		<TD WIDTH="288">Obtains the cell editor for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public CellEditor getCellEditor(int, int) specified by row and column</TT></TD>
		<TD WIDTH="288">Obtains the cell editor for the cell</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getCellRect(int, int, boolean)</TT></TD>
		<TD WIDTH="288">Obtains the bounding box for the specified cell; if the <TT>boolean</TT> parameter
			is set to true, spacing is included</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public TableCellRenderer getCellRenderer(int, int)</TT></TD>
		<TD WIDTH="288">Obtain an appropriate renderer for the cell at the specified row and column</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean getCellSelectionEnabled()</TT></TD>
		<TD WIDTH="288">Returns true if simultaneous row and column selections are allowed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public TableColumn getColumn(Object)</TT></TD>
		<TD WIDTH="288">Obtains the column with the specified identifier</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Class getColumnClass(int)</TT></TD>
		<TD WIDTH="288">Obtains the class associated with the specified column</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getColumnCount()</TT></TD>
		<TD WIDTH="288">Obtains the number of columns</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public TableColumnModel getColumnModel()</TT></TD>
		<TD WIDTH="288">Obtains table column information</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getColumnName(int)</TT></TD>
		<TD WIDTH="288">Obtains the name of the specified column</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean getColumnSelectionAllowed()</TT></TD>
		<TD WIDTH="288">Returns true if column selection is allowed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public TableCellEditor</TT></TD>
		<TD WIDTH="288">Obtains the default</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>getDefaultEditor(Class)</TT></TD>
		<TD WIDTH="288">editor for a column</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getEditingColumn()</TT></TD>
		<TD WIDTH="288">Obtains the index of the editing column</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getEditingRow()</TT></TD>
		<TD WIDTH="288">Obtains the index of the editing row</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component getEditorComponent()</TT></TD>
		<TD WIDTH="288">If editing is currently active, returns the responsible component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Color getGridColor()</TT></TD>
		<TD WIDTH="288">Obtains the grid color</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Dimension getIntercellSpacing()</TT></TD>
		<TD WIDTH="288">Obtains the horizontal and vertical spacing between cells</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public TableModel getModel()</TT></TD>
		<TD WIDTH="288">Obtains the table model associated with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Dimension getPreferredScrollableViewportSize()</TT></TD>
		<TD WIDTH="288">Obtains the preferred size of the table</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getRowCount()</TT></TD>
		<TD WIDTH="288">Obtains the number of rows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getRowHeight()</TT></TD>
		<TD WIDTH="288">Obtains the total row height</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean getRowSelectionAllowed()</TT></TD>
		<TD WIDTH="288">Returns true if row selection is allowed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getScrollableBlockIncrement(Rectangle, int, int)</TT></TD>
		<TD WIDTH="288">Obtains the block increment for the specified data</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean getScrollableTracksViewportHeight()</TT></TD>
		<TD WIDTH="288">Returns true if the scroll pane tracks the table height</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean getScrollableTracksViewportWidth()</TT></TD>
		<TD WIDTH="288">Returns true if the scroll pane tracks the table width</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getScrollableUnitIncrement(Rectangle, int, int)</TT></TD>
		<TD WIDTH="288">Obtains the scrollable unit increment for the specified data</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getSelectedColumn()</TT></TD>
		<TD WIDTH="288">Obtains the selected column index, or -1 if there is none</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getSelectedColumnCount()</TT></TD>
		<TD WIDTH="288">Obtains the number of selected columns</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int[] getSelectedColumns()</TT></TD>
		<TD WIDTH="288">Obtains an array containing the indices of all selected columns</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getSelectedRow()</TT></TD>
		<TD WIDTH="288">Obtains the index of the selected row, or -1 if there is none</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getSelectedRowCount()</TT></TD>
		<TD WIDTH="288">Obtains the number of selected columns</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int[] getSelectedRows()</TT></TD>
		<TD WIDTH="288">Obtains an array containing the indices of all selected rows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public getSelectionBackground()</TT></TD>
		<TD WIDTH="288">Obtains the background color of the selected cells</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public getSelectionForeground()</TT></TD>
		<TD WIDTH="288">Obtains the foreround color of the selected cells</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public ListSelectionModel getSelectionModel()</TT></TD>
		<TD WIDTH="288">Obtains the current selection model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean getShowHorizontalLines()</TT></TD>
		<TD WIDTH="288">Obtains true if horizontal lines are drawn between cells</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean getShowVerticalLines()</TT></TD>
		<TD WIDTH="288">Obtains true if vertical lines are drawn between cells</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public JTableHeader getTableHeader()</TT></TD>
		<TD WIDTH="288">Obtains the table header associated with this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getToolTipText(MouseEvent)</TT></TD>
		<TD WIDTH="288">Obtains the tooltip text associated with the specified event</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public TableUI getUI()</TT></TD>
		<TD WIDTH="288">Obtains the active pluggable look-and-feel properties</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains a logical name for the active look-and-feel properties; always returns <TT>TableUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Object getValueAt(int, int)</TT></TD>
		<TD WIDTH="288">Obtains the value of the specified cell</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void initializeLocalVars()</TT></TD>
		<TD WIDTH="288">Invoked internally to initialize local variables</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isCellEditable(int, int)</TT></TD>
		<TD WIDTH="288">Returns true if the specified cell is editable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isCellSelected(int, int)</TT></TD>
		<TD WIDTH="288">Returns true if the specified cell is selected</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isColumnSelected(int)</TT></TD>
		<TD WIDTH="288">Returns true if the specified column is selected</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isEditing()</TT></TD>
		<TD WIDTH="288">Returns true if editing is in progress</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isRowSelected(int)</TT></TD>
		<TD WIDTH="288">Returns true if the specified row is selected</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void moveColumn(int, int)</TT></TD>
		<TD WIDTH="288">Moves the specified column from the original position to the target position</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Comment prepareEditor(TableCellEditor, int, int)</TT></TD>
		<TD WIDTH="288">Prepares the specified editor for editing the specified cell</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Component prepareRenderer (TableCellEditor, int, int)</TT></TD>
		<TD WIDTH="288">Prepares the specified renderer for rendering the specified cell</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeColumn(TableColumn)</TT></TD>
		<TD WIDTH="288">Removes the specified column</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeColumnSelectionInterval(int, int)</TT></TD>
		<TD WIDTH="288">Changes the active column selection to not include the specified interval</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeEditor()</TT></TD>
		<TD WIDTH="288">Removes the cell editor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeRowSelectionInterval(int, int)</TT></TD>
		<TD WIDTH="288">Changes the active row selection to not include the specified interval</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void resizeAndRepaint()</TT></TD>
		<TD WIDTH="288">Performs a resize and marks the change area as needing a repaint</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int rowAtPoint(Point)</TT></TD>
		<TD WIDTH="288">Obtains the index of the row at the specified point, or -1 if there is none</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void selectAll()</TT></TD>
		<TD WIDTH="288">Selects as much of the table as its rules allow</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setAutoCreateColumnsFromModel(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether the table model should provide default data to the columns</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setAutoResizeMode(int)</TT></TD>
		<TD WIDTH="288">Sets the auto resize policy</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setBounds(int, int, int, int)</TT></TD>
		<TD WIDTH="288">Sets the bounding box for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setCellEditor(TableCellEditor)</TT></TD>
		<TD WIDTH="288">Sets the cell editor for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setCellSelectionEnabled(boolean)</TT></TD>
		<TD WIDTH="288">Set whether row and column selection can be done simultaneously</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setColumnModel(TableColumnModel)</TT></TD>
		<TD WIDTH="288">Sets the column model for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setColumnSelectionAllowed(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether column selection is allowed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setColumnSelectionInterval(int, int)</TT></TD>
		<TD WIDTH="288">Sets the selected set</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setDefaultEditor(Class, TableCellEditor)</TT></TD>
		<TD WIDTH="288">Sets the default editor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setDefaultRenderer(Class, TableCellRenderer)</TT></TD>
		<TD WIDTH="288">Sets the default renderer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setEditingColumn(int)</TT></TD>
		<TD WIDTH="288">Sets the column being edited</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setEditingRow(int)</TT></TD>
		<TD WIDTH="288">Sets the row being edited</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setGridColor(Color)</TT></TD>
		<TD WIDTH="288">Sets the grid color</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setIntercellSpacing(Dimension)</TT></TD>
		<TD WIDTH="288">Sets the intercell spacing</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setModel(TableModel)</TT></TD>
		<TD WIDTH="288">Sets the table model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setPreferredScrollableViewportSize(Dimension)</TT></TD>
		<TD WIDTH="288">Sets the preferred size of the viewport</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setRowHeight(int)</TT></TD>
		<TD WIDTH="288">Sets the total row height</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setRowMargin(int)</TT></TD>
		<TD WIDTH="288">Sets the number of pixels between rows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setRowSelectionAllowed(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether row selection is allowed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setRowSelectionInterval(int, int)</TT></TD>
		<TD WIDTH="288">Sets the current selection set</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public setSelectionBackground()</TT></TD>
		<TD WIDTH="288">Sets the background color of the selected cells</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public setSelectionForeground()</TT></TD>
		<TD WIDTH="288">Sets the foreround color of the selected cells</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setSelectionMode(int)</TT></TD>
		<TD WIDTH="288">Sets the tables mode to allow for single selections, single contiguous selections,
			or multiple selections</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setSelectionModel(ListSelectionModel)</TT></TD>
		<TD WIDTH="288">Sets the selection model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setShowGrid(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether the grid is to be shown</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean setShowHorizontalLines()</TT></TD>
		<TD WIDTH="288">Sets whether or not horizontal lines are drawn between cells</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean setShowVerticalLines()</TT></TD>
		<TD WIDTH="288">Sets whether or not vertical lines are drawn between cells</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setTableHeader(JTableHeader)</TT></TD>
		<TD WIDTH="288">Sets the active table header</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setUI(TableUI)</TT></TD>
		<TD WIDTH="288">Sets the active pluggable look-and-feel properties</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setValueAt(Object, Object, int)</TT></TD>
		<TD WIDTH="288">Sets the value at the specified location</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void sizeColumnsToFit(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether columns should be sized to fit the viewable area</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void sizeColumnsToFit(int)</TT></TD>
		<TD WIDTH="288">Resizes columns as necessary to make the total width of all columns equal to the
			width of the table</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void tableChanged(TableModelEvent)</TT></TD>
		<TD WIDTH="288">Invoked when the table is changed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="288">Invoked to indicate a change in pluggable look-and-feel properties</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void valueChanged(ListSelectionEvent)</TT></TD>
		<TD WIDTH="288">Invoked when a value changes</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JTextArea</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void append(String)</TT></TD>
		<TD WIDTH="288">Appends the specified text onto the current text</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected Document createDefaultModel()</TT></TD>
		<TD WIDTH="288">Used internally to create the default data mode</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext</TT> <TT>getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getColumns()</TT></TD>
		<TD WIDTH="288">Obtains the number of columns currently in place</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getColumnWidth()</TT></TD>
		<TD WIDTH="288">Obtains the width of all columns</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getLineCount()</TT></TD>
		<TD WIDTH="288">Obtains the number of lines of text</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getLineEndOffset(int)</TT></TD>
		<TD WIDTH="288">Obtains the offset to the end of the specified line</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getLineStartOffset(int)</TT></TD>
		<TD WIDTH="288">Obtains the offset to the start of the specified line</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean getLineWrap()</TT></TD>
		<TD WIDTH="288">Returns true if lines are wrapped</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Dimension `getPreferredSize()</TT></TD>
		<TD WIDTH="288">Obtains the preferred size of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getRowHeight()</TT></TD>
		<TD WIDTH="288">Obtains the height of all rows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getRows()</TT></TD>
		<TD WIDTH="288">Obtains the number of rows in the component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getScrollableUnitIncrement</TT> <TT>(Rectangle, int, int)</TT></TD>
		<TD WIDTH="288">Obtains the scrollable unit increment for the specified data</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getTabSize()</TT></TD>
		<TD WIDTH="288">Obtains the number of spaces consumed by a single tab press</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains a logical description of the UI; always returns <TT>JTextAreaUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean getWrapStyleWord()</TT></TD>
		<TD WIDTH="288">Returns true if words are wrapped at word boundaries and false if wrapped at character
			boundaries</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void insert(String, int)</TT></TD>
		<TD WIDTH="288">Inserts the specified text at the specified position</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isManagingFocus()</TT></TD>
		<TD WIDTH="288">Returns true if this component is managing focus internally; allows tabs pressed
			inside a text area to not change focus, but instead to tab across the text area</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected String paramString()</TT></TD>
		<TD WIDTH="288">Obtains a parameter string for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void replaceRange(String, int, int)</TT></TD>
		<TD WIDTH="288">Replaces the text between the indices with the specified text</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setColumns(int)</TT></TD>
		<TD WIDTH="288">Sets the number of columns</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setFont(Font)</TT></TD>
		<TD WIDTH="288">Sets the current display font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setLineWrap(boolean)</TT></TD>
		<TD WIDTH="288">Sets whether or not lines are wrapped</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setRows(int)</TT></TD>
		<TD WIDTH="288">Sets the number of rows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setTabSize(int)</TT></TD>
		<TD WIDTH="288">Sets the number of spaces taken up when the Tab key is pressed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setWrapStyleWord(boolean)</TT></TD>
		<TD WIDTH="288">Set to true if words are wrapped at word boundaries and false if wrapped at character
			boundaries</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JTextArea</TT>: Example</H4>
<P>The <TT>JTextArea</TT> class allows for single-line input of text:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import javax.swing.*;

import javax.swing.border.*;

import javax.swing.event.*;





public class JTextAreaDemo extends JApplet { 



    JTextArea   jtxtaCenter;



    public void init() { 

        resize(400, 400);



        // Create a new Border Layout object with

        // a 10 pixel gaps between all components.

        BorderLayout borderLayout = new BorderLayout(10,10);



        // Set the layout.

        getContentPane().setLayout(borderLayout);



        // create components to add to layout

        jtxtaCenter = new JTextArea

        (&quot;The quick brown fox jumped over the lazy fox&quot;);

jtxtaCenter.setLineWrap(true);





        // Add components.

        getContentPane().add(jtxtaCenter,&quot;Center&quot;);

    } 



} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJTextFieldFONTTT"></A><TT>javax.swing.JTextField</TT></H3>
<P><TT>public class JTextField extends JTextComponent implements SwingConstants</TT></P>

<P>The JTextField class is used to display one line of potentially editable text.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JTextField</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addActionListener(ActionListener)</TT></TD>
		<TD WIDTH="288">Adds an <TT>ActionListener</TT> to the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected Document createDefaultModel()</TT></TD>
		<TD WIDTH="288">Used internally to create a default data model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected void fireActionPerformed()</TT></TD>
		<TD WIDTH="288">Used internally for event management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext</TT> <TT>getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Action[] getActions()</TT></TD>
		<TD WIDTH="288">Obtains the list of available actions</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getColumns()</TT></TD>
		<TD WIDTH="288">Obtains the number of columns in this text field</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getColumnWidth()</TT></TD>
		<TD WIDTH="288">Obtains the total width of all columns</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getHorizontalAlignment()</TT></TD>
		<TD WIDTH="288">Obtains the horizontal alignment of the text</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public BoundedRangeModel</TT> <TT>getHorizontalVisibility()</TT></TD>
		<TD WIDTH="288">Obtains the horizontal visibility of the text</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Dimension getPreferredSize()</TT></TD>
		<TD WIDTH="288">Obtains the preferred size of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public int getScrollOffset()</TT></TD>
		<TD WIDTH="288">Obtains the scroll offset</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean isValidateRoot()</TT></TD>
		<TD WIDTH="288">Returns true if validations on this component will cause all children to be validated
			as well</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains a logical description of the UI; always returns <TT>JTextFieldUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void paint(Graphics)</TT></TD>
		<TD WIDTH="288">Invoked when the component should draw itself into the specified <TT>Graphics</TT>
			object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected String paramString()</TT></TD>
		<TD WIDTH="288">Obtains the parameter string for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void postActionEvent()</TT></TD>
		<TD WIDTH="288">Dispatches action events; you will usually have no need to invoke this method</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeActionListener(ActionListener)</TT></TD>
		<TD WIDTH="288">Removes the specified<TT> ActionListener</TT> from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void scrollRectToVisible(Rectangle)</TT></TD>
		<TD WIDTH="288">Scrolls to make the specified area visible</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setActionCommand(String)</TT></TD>
		<TD WIDTH="288">Sets the string that will be used in action events</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setColumns(int)</TT></TD>
		<TD WIDTH="288">Sets the number of columns</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setFont(Font)</TT></TD>
		<TD WIDTH="288">Sets the display font</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setHorizontalAlignment(int)</TT></TD>
		<TD WIDTH="288">Sets the alignment along the x-axis for this component; parameter value is either
			<TT>SwingConstants.LEFT</TT>, <TT>SwingConstants.RIGHT</TT>, or <TT>SwingConstants.CENTER</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setScrollOffset(int)</TT></TD>
		<TD WIDTH="288">Sets the scroll offset</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JTextField</TT>: Example</H4>
<P>The <TT>JTextField</TT> class allows for multi-line text entry:


<BLOCKQUOTE>
	<PRE>import java.awt.*;

import javax.swing.*;

import javax.swing.border.*;

import javax.swing.event.*;





public class JTextFieldDemo extends JApplet { 



    JTextField   jtxtField;



    public void init() { 

        resize(400, 400);



        // Create a new GridLayout object with a 2x2 format and

        // a 10 pixel gaps between all components.

        BorderLayout borderLayout = new BorderLayout();



        // Set the layout.

        getContentPane().setLayout(borderLayout);



        //create components to add to layout

        jtxtField = new JTextField();





        // Add components.

        getContentPane().add(jtxtField,&quot;Center&quot;);

    } 



} 

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJTextPaneFONTTT"></A><TT>javax.swing.JTextPane</TT></H3>
<P><TT>public class JTextPane extends JEditorPane</TT></P>

<P>The JTextPane class is a text widget that has the capability to display rich text.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JTextPane</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void addStyle(String, Style)</TT></TD>
		<TD WIDTH="288">Adds the specified style and style name to the collection of styles</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>protected EditorKit createDefaultEditorKit()</TT></TD>
		<TD WIDTH="288">Called during initialization to create the default editor to use</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AttributeSet getCharacterAttributes()</TT></TD>
		<TD WIDTH="288">Obtains the character attributes in effect at the current caret position</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public MutableAttributeSet</TT> <TT>getInputAttributes()</TT></TD>
		<TD WIDTH="288">Obtains the input attribute set</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public Style getLogicalStyle()</TT></TD>
		<TD WIDTH="288">Obtains the logical style in effect at the current caret position</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AttributeSet getParagraphAttributes()</TT></TD>
		<TD WIDTH="288">Obtains the paragraph attributes in effect at the paragraph owned by the current
			caret position</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public boolean getScrollableTracksViewportWidth()</TT></TD>
		<TD WIDTH="288">Returns true if the width of the viewport should match the width of the scrollable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getStyle(String)</TT></TD>
		<TD WIDTH="288">Obtains the style with the specified name</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public StyledDocument getStyledDocument()</TT></TD>
		<TD WIDTH="288">Obtains the active model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public StyledEditorKit getStyledEditorKit()</TT></TD>
		<TD WIDTH="288">Obtains the active editor kit</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains a logical description of the UI; always returns <TT>TextUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void insertComponent(Component)</TT></TD>
		<TD WIDTH="288">Inserts the specified component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void insertIcon(Icon)</TT></TD>
		<TD WIDTH="288">Inserts the specified icon</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void removeStyle(String)</TT></TD>
		<TD WIDTH="288">Removes the style with the specified name</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void replaceSelection(String)</TT></TD>
		<TD WIDTH="288">Replaces the highlighted text with the specified text</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setCharacterAttributes(AttributeSet, boolean)</TT></TD>
		<TD WIDTH="288">Sets the active character attributes for either the whole document, or the selected
			text if it exists</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setDocument(Document)</TT></TD>
		<TD WIDTH="288">Sets the active text document</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setEditorKit(EditorKit)</TT></TD>
		<TD WIDTH="288">Sets the active editor kit</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setLogicalStyle(Style)</TT></TD>
		<TD WIDTH="288">Sets the logical style for the paragraph containing the current caret position</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setParagraphAttributes(AttributeSet, boolean)</TT></TD>
		<TD WIDTH="288">Sets the active character attributes for either the paragraph owned by the current
			caret position or the selected paragraph, if one exists</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void setStyledDocument(StyledDocument)</TT></TD>
		<TD WIDTH="288">Sets the active styled document</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJToggleButtonFONTTT"></A><TT>javax.swing.JToggleButton</TT></H3>
<P><TT>public class JToggleButton extends AbstractButton implements Accessible</TT></P>

<P>The JToggleButton represents a dual-state button. It is the parent class to both
JRadioButton and JCheckBox.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JToggleButton</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="288">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public AccessibleContext</TT> <TT>getAccessibleContext()</TT></TD>
		<TD WIDTH="288">Obtains a reference to the <TT>AccessibleContext</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="288">Obtains a logical description of the pluggable look-and-feel attributes; always returns
			<TT>ToggleButtonUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="288"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="288">Invoked to indicate a change in pluggable look-and-feel attributes</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJToolBarFONTTT"></A><TT>javax.swing.JToolBar</TT></H3>
<P><TT>public class JToolBar extends JComponent implements SwingConstants, Accessible</TT></P>

<P>The JToolBar class is an implementation of a toolbar class.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JToolBar</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void add(Action)</TT></TD>
		<TD WIDTH="295">Adds the specified <TT>Action</TT> to the toolbar</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void</TT> <TT>addImpl(Component, Object, int)</TT></TD>
		<TD WIDTH="295">Adds the specified component to the container at the specified index using the specified
			constraints</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addSeparator()</TT></TD>
		<TD WIDTH="295">Adds a separator to the toolbar</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addSeparator(Dimension)</TT></TD>
		<TD WIDTH="295">Adds a separator to the toolbar</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public AccessibleContext</TT> <TT>getAccessibleContext()</TT></TD>
		<TD WIDTH="295">Obtains a reference to the <TT>AccessibleContext</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Component getComponentAtIndex(int)</TT></TD>
		<TD WIDTH="295">Obtains the index of the specified component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getComponentIndex(Component)</TT></TD>
		<TD WIDTH="295">Obtains the index of the specified component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Insets getMargin()</TT></TD>
		<TD WIDTH="295">Obtains the margin between the toolbar's borders and its buttons</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public ToolBarUI getUI()</TT></TD>
		<TD WIDTH="295">Obtains the active pluggable look-and-feel properties</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="295">Obtains a logical name for the current UI; always returns <TT>ToolBarUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isBorderPainted()</TT></TD>
		<TD WIDTH="295">Checks whether a border should be painted for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void paintBorder(Graphics)</TT></TD>
		<TD WIDTH="295">Causes the border to be painted for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setBorderPainted(boolean)</TT></TD>
		<TD WIDTH="295">Sets whether a border is to be painted for this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setFloatable(boolean)</TT></TD>
		<TD WIDTH="295">Sets whether or not the toolbar can float</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setMargin(Insets)</TT></TD>
		<TD WIDTH="295">Sets the margin between the toolbar's borders and its buttons</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setOrientation(int)</TT></TD>
		<TD WIDTH="295">Sets the current orientation of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setUI(ToolBarUI)</TT></TD>
		<TD WIDTH="295">Sets the active pluggable look-and-feel properties</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="295">Invoked to indicate a change in pluggable look-and-feel properties</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJToolTipFONTTT"></A><TT>javax.swing.JToolTip</TT></H3>
<P><TT>public class JToolTip extends JComponent implements Accessible</TT></P>

<P>The JToolTip class is used to provide support for tooltips in Swing applications.
A tooltip is a short description of a widget's function that is displayed when the
mouse hovers over the widget for a certain period of time.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JToolTip</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>getAccessibleContext()</TT></TD>
		<TD WIDTH="295">Obtains a reference to the <TT>AccessibleContext</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public JComponent getComponent()</TT></TD>
		<TD WIDTH="295">Obtains the component described by this ToolTip</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getTipText()</TT></TD>
		<TD WIDTH="295">Obtains the text of this ToolTip</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public ToolTipUI getUI()</TT></TD>
		<TD WIDTH="295">Obtains the active pluggable look-and-feel properties</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getUIClassID()</TT></TD>
		<TD WIDTH="295">Obtains a logical description of the UI; always returns <TT>ToolTipUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setComponent(JComponent)</TT></TD>
		<TD WIDTH="295">Sets the component described by this ToolTip</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setTipText(String)</TT></TD>
		<TD WIDTH="295">Sets the text of this ToolTip</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="295">Invoked to indicate a change in pluggable look-and-feel properties</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingJTreeFONTTT"></A><TT>javax.swing.JTree</TT></H3>
<P><TT>public class JTree extends JComponent implements Scrollable, Accessible</TT></P>

<P>The JTree class is used to organize data in a hierarchical format. The obvious
example of a practical application of this tool is in a file system browser. The
top-level directory would be the root node, each folder beneath that would be its
own node, and so on.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.JTree</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Fields/Methods</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final String CELL_EDITOR_PROPERTY</TT></TD>
		<TD WIDTH="295">Bound property associated with the <TT>cellEditor</TT> variable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final String CELL_RENDERER_PROPERTY</TT></TD>
		<TD WIDTH="295">Bound property associated with the <TT>cellRenderer</TT> variable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected transient TreeCellEditor cellEditor</TT></TD>
		<TD WIDTH="295">Editor associated with different nodes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected transient TreeCellRenderer cellRenderer</TT></TD>
		<TD WIDTH="295">Renderer used to draw nodes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected boolean editable</TT></TD>
		<TD WIDTH="295">If true, the tree is editable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final String EDITABLE_PROPERTY</TT></TD>
		<TD WIDTH="295">Bound property associated with the editable variable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final String</TT> <TT>INVOKES_STOP_CELL_EDITING_PROPERTY</TT></TD>
		<TD WIDTH="295">Bound property associated with stopping cell editing</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected boolean invokesStopCellEditing</TT></TD>
		<TD WIDTH="295">True if, when editing is to be stopped, <TT>stopCellEditing</TT> is invoked and changes
			are made</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final String LARGE_MODEL_PROPERTY</TT></TD>
		<TD WIDTH="295">Bound property associated with the <TT>largeModel</TT> variable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected boolean largeModel</TT></TD>
		<TD WIDTH="295">True if the component is a large model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final String ROOT_VISIBLE_PROPERTY</TT></TD>
		<TD WIDTH="295">Bound property associated with the <TT>rootVisible</TT> variable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected boolean rootVisible</TT></TD>
		<TD WIDTH="295">True if the root node should be displayed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final String ROW_HEIGHT_PROPERTY</TT></TD>
		<TD WIDTH="295">Bound property associated with the <TT>rowHeight</TT> variable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected int rowHeight</TT></TD>
		<TD WIDTH="295">Height of each row</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD COLSPAN="2">
			<P ALIGN="CENTER"><I>Fields</I>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final String SCROLLS_ON_EXPAND_PROPERTY</TT></TD>
		<TD WIDTH="295">Bound property associated with the <TT>scrollsOnExpand</TT> variable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected int scrollsOnExpand</TT></TD>
		<TD WIDTH="295">True if scrolling occurs when a node is expanded</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final String SELECTION_MODEL_PROPERTY</TT></TD>
		<TD WIDTH="295">Bound property associated with the <TT>selectionModel</TT> variable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected transient TreeSelectionModel selectionModel</TT></TD>
		<TD WIDTH="295">Used to model actively selected nodes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected JTree.TreeSelectionRedirector selectionRedirector</TT></TD>
		<TD WIDTH="295">Used for event management</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final String SHOWS_ROOT_HANDLES_PROPERTY</TT></TD>
		<TD WIDTH="295">Bound property associated with the <TT>showsRootHandles</TT> variable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected boolean showsRootHandles</TT></TD>
		<TD WIDTH="295">True if there should be handles at the top level</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final String</TT> <TT>TOGGLE_CLICK_COUNT_PROPERTY</TT></TD>
		<TD WIDTH="295">Bound property associated with the <TT>toggleClickCount</TT> variable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected transient toggleClickCount</TT></TD>
		<TD WIDTH="295">Number of mouse clicks it takes to expand a node</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final String TREE_MODEL_PROPERTY</TT></TD>
		<TD WIDTH="295">Bound property associated with the <TT>treeModel</TT> variable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected transient TreeModel treeModel</TT></TD>
		<TD WIDTH="295">Models the active tree</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static final String VISIBLE_ROW_COUNT_PROPERTY</TT></TD>
		<TD WIDTH="295">Bound property associated with the <TT>visibleRowCount</TT> variable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected int visibleRowCount</TT></TD>
		<TD WIDTH="295">Number of currently visible rows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int addSelectionInterval(int, int)</TT></TD>
		<TD WIDTH="295">Sets the selected set to include the specified rows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addSelectionPath(TreePath)</TT></TD>
		<TD WIDTH="295">Sets the selected set to include the specified rows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addSelectionPaths(TreePath[])</TT></TD>
		<TD WIDTH="295">Sets the selected set to include the specified rows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addSelectionRow(int)</TT></TD>
		<TD WIDTH="295">Sets the selected set to include the specified rows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addSelectionRows(int[])</TT></TD>
		<TD WIDTH="295">Sets the selected set to include the specified rows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addTreeExpansionListener(TreeExpansionListener)</TT></TD>
		<TD WIDTH="295">Adds the specified<TT> TreeExpansionListener</TT> to the collection of listeners;
			a<TT> TreeExpansionListener</TT> is notified whenever a tree node is expanded or
			collapsed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addTreeSelectionListener(TreeSelectionListener)</TT></TD>
		<TD WIDTH="295">Adds the specified<TT> TreeSelectionListener</TT> to the collection of listeners;
			a<TT> TreeSelectionListener</TT> is notified whenever a node value changes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addTreeWillExpandListener</TT> <TT>(TreeWillExpandListener)</TT></TD>
		<TD WIDTH="295">Adds the specified<TT> TreeWillExpandListener</TT> to the collection of listeners;
			a<TT> TreeWillExpandListener</TT> is notified whenever a branch is about to be expanded</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void cancelEditing()</TT></TD>
		<TD WIDTH="295">Cancels the current editing</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void clearSelection()</TT></TD>
		<TD WIDTH="295">Sets the selected set to include exactly zero rows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void clearToggledPaths()</TT></TD>
		<TD WIDTH="295">Clears the toggled tree paths from the cache</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void collapsePath(TreePath)</TT></TD>
		<TD WIDTH="295">Collapses the row at the specified path</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void collapseRow(int)</TT></TD>
		<TD WIDTH="295">Collapses the specified row</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String convertValueToText(Object, boolean, boolean, boolean, int, boolean)</TT></TD>
		<TD WIDTH="295">Used internally to convert added data into readable text</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected static TreeModel createTreeModel(Object)</TT></TD>
		<TD WIDTH="295">Creates a tree model encasing the specified object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected TreeModelListener</TT> <TT>createTreeModelListener()</TT></TD>
		<TD WIDTH="295">Creates an instance of a<TT> TreeModelHandler</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void expandPath(TreePath)</TT></TD>
		<TD WIDTH="295">Ensures that all nodes housed under the specified path are visible</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void expandRow(int)</TT></TD>
		<TD WIDTH="295">Ensures that all nodes housed under the specified row are visible</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void fireTreeCollapsed(TreePath)</TT></TD>
		<TD WIDTH="295">Used to dispatch events; you will rarely (if ever) need to invoke this method</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void fireTreeExpanded(TreePath)</TT></TD>
		<TD WIDTH="295">Used to dispatch events; you will rarely (if ever) need to invoke this method</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void fireTreeWillCollapse(TreePath)</TT></TD>
		<TD WIDTH="295">Used to dispatch events; you will rarely (if ever) need to invoke this method</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void fireTreeWillExpand(TreePath)</TT></TD>
		<TD WIDTH="295">Used to dispatch events; you will rarely (if ever) need to invoke this method</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void fireValueChanged(TreeSelectionEvent)</TT></TD>
		<TD WIDTH="295">Used to dispatch events; you will rarely (if ever) need to invoke this method</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public AccessibleContext</TT> <TT>getAccessibleContext()</TT></TD>
		<TD WIDTH="295">Obtains a reference to the <TT>AccessibleContext</TT> object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public TreeCellEditor getCellEditor()</TT></TD>
		<TD WIDTH="295">Obtains the active cell editor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public TreeCellRenderer getCellRenderer()</TT></TD>
		<TD WIDTH="295">Obtains the active cell renderer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public TreePath getClosestPathForLocation(int, int)</TT></TD>
		<TD WIDTH="295">Obtains the closest path for the specified location</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getClosestRowForLocation(int, int)</TT></TD>
		<TD WIDTH="295">Obtains the closest row index for the specified location</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected static TreeModel</TT></TD>
		<TD WIDTH="295">Obtains a default tree</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>getDefaultTreeModel()</TT></TD>
		<TD WIDTH="295">model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public TreePath getEditingPath()</TT></TD>
		<TD WIDTH="295">Obtains the path to the node currently being edited</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Enumeration</TT> <TT>getExpandedDescendants(TreePath)</TT></TD>
		<TD WIDTH="295">Obtains an enumeration of the children of the specified path that are expanded</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean getInvokesStopCellEditing()</TT></TD>
		<TD WIDTH="295">Returns true if <TT>stopCellEditing</TT> is invoked when editing is interrupted</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Object getLastSelectedPathComponent()</TT></TD>
		<TD WIDTH="295">Obtains the last path in the active selection</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public TreePath getLeadSelectionPath()</TT></TD>
		<TD WIDTH="295">Obtains the lead path in the active selection</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getLeadSelectionRow()</TT></TD>
		<TD WIDTH="295">Obtains the lead row index in the active selection</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getMaxSelectionRow()</TT></TD>
		<TD WIDTH="295">Obtains the maximum row index in the active selection</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getMinSelectionRow()</TT></TD>
		<TD WIDTH="295">Obtains the minimum row index in the active selection</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public TreeModel getModel()</TT></TD>
		<TD WIDTH="295">Obtains the model currently providing data</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public TreePath getPathBetweenRows(int, int)</TT></TD>
		<TD WIDTH="295">Obtains the path between the specified rows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Rectangle getPathBounds(TreePath)</TT></TD>
		<TD WIDTH="295">Obtains the bounding box for the specified selection</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public TreePath getPathForLocation(int, int)</TT></TD>
		<TD WIDTH="295">Obtains the path corresponding to the specified location</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public TreePath getPathForRow(int)</TT></TD>
		<TD WIDTH="295">Obtains the path corresponding to the specified row</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension getPreferredScrollableViewportSize()</TT></TD>
		<TD WIDTH="295">Obtains the preferred size of this component</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Rectangle getRowBounds(int)</TT></TD>
		<TD WIDTH="295">Obtains the bounding box for the specified selection</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getRowCount()</TT></TD>
		<TD WIDTH="295">Obtains the number of rows currently being displayed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getRowForLocation(int, int)</TT></TD>
		<TD WIDTH="295">Obtains the row index at the specified location</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getRowForPath(TreePath)</TT></TD>
		<TD WIDTH="295">Obtains the row index at the last location identified by the <TT>TreePath</TT> variable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getRowHeight()</TT></TD>
		<TD WIDTH="295">Obtains the height of each row</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getScrollableBlockIncrement(Rectangle, int, int)</TT></TD>
		<TD WIDTH="295">Obtains the block increment for the specified region</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean getScrollableTracksViewportHeight()</TT></TD>
		<TD WIDTH="295">Returns true if the tree height is tied to the scrollable height</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean getScrollableTracksViewportWidth()</TT></TD>
		<TD WIDTH="295">Returns true if the tree width is tied to the scrollable width</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getScrollableUnitIncrement(Rectangle, int, int)</TT></TD>
		<TD WIDTH="295">Obtains the unit increment for the specified region</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean getScrollsOnExpand()</TT></TD>
		<TD WIDTH="295">Returns true if scrolling occurs when a node is expanded</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getSelectionCount()</TT></TD>
		<TD WIDTH="295">Obtains a count of selected items</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public TreeSelectionModel getSelectionModel()</TT></TD>
		<TD WIDTH="295">Obtains the active selection model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public TreePath getSelectionPath()</TT></TD>
		<TD WIDTH="295">Obtains the path to the first selected value</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public TreePath[] getSelectionPaths()</TT></TD>
		<TD WIDTH="295">Obtains the paths to all selected values</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int[] getSelectionRows()</TT></TD>
		<TD WIDTH="295">Obtains the indices of all selected rows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean getShowsRootHandles()</TT></TD>
		<TD WIDTH="295">Returns true if root handles are shown</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getToggleClickCount()</TT></TD>
		<TD WIDTH="295">Obtains the number of clicks required to expand a node</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getToolTipText(MouseEvent)</TT></TD>
		<TD WIDTH="295">Obtains the ToolTip displayed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public TreeUI getUI()</TT></TD>
		<TD WIDTH="295">Obtains the active pluggable look-and-feel model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public string getUIClassID()</TT></TD>
		<TD WIDTH="295">Obtains a logical description of the active UI; always returns <TT>TreeUI</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getVisibleRowCount()</TT></TD>
		<TD WIDTH="295">Obtains the number of visible rows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean hasBeenExpanded(TreePath)</TT></TD>
		<TD WIDTH="295">Returns true if the specified path has been expanded</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isCollapsed(int)</TT></TD>
		<TD WIDTH="295">Returns true if the specified row is collapsed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isCollapsed(TreePath)</TT></TD>
		<TD WIDTH="295">Returns true if the specified path is collapsed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isEditable()</TT></TD>
		<TD WIDTH="295">Returns true if the tree is editable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isEditing()</TT></TD>
		<TD WIDTH="295">Returns true if the tree is currently being edited</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isExpanded(int)</TT></TD>
		<TD WIDTH="295">Returns true if the specified row is expanded</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isExpanded(TreePath)</TT></TD>
		<TD WIDTH="295">Returns true if the specified path is expanded</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isFixedRowHeight()</TT></TD>
		<TD WIDTH="295">Returns true if the row height is fixed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isLargeModel()</TT></TD>
		<TD WIDTH="295">Returns true if this is a large data model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isPathEditable(TreePath)</TT></TD>
		<TD WIDTH="295">Returns true if the specified path is editable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isPathSelected(TreePath)</TT></TD>
		<TD WIDTH="295">Returns true if the specified path is selected</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isRootVisible()</TT></TD>
		<TD WIDTH="295">Returns true if the root is visible</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isRowSelected(int)</TT></TD>
		<TD WIDTH="295">Returns true if the specified row is selected</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isSelectionEmpty()</TT></TD>
		<TD WIDTH="295">Returns true if nothing is selected</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isVisible(TreePath)</TT></TD>
		<TD WIDTH="295">Returns true if the specified path is visible</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void makeVisible(TreePath)</TT></TD>
		<TD WIDTH="295">Ensures that the specified path is visible</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void</TT> <TT>removeDescendantToggledPaths(Enumeration)</TT></TD>
		<TD WIDTH="295">Removes descendants of the specified <TT>TreePaths</TT> that have been expanded</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeSelectionInterval(int, int)</TT></TD>
		<TD WIDTH="295">Modifies the selected set such that it does not contain any items in the specified
			interval</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeSelectionPath(TreePath)</TT></TD>
		<TD WIDTH="295">Modifies the selected set such that it does not contain any items in the specified
			path</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeSelectionPaths(TreePath[])</TT></TD>
		<TD WIDTH="295">Modifies the selected set such that it does not contain any items in the specified
			paths</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeSelectionRow(int)</TT></TD>
		<TD WIDTH="295">Modifies the selected set such that it does not contain any items in the specified
			row</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeSelectionRows(int[])</TT></TD>
		<TD WIDTH="295">Modifies the selected set such that it does not contain any items in the specified
			rows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeTreeExpansionListener(TreeExpansionListener)</TT></TD>
		<TD WIDTH="295">Removes the specified<TT> TreeExpansionListener</TT> from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeTreeSelectionListener(TreeSelectionListener)</TT></TD>
		<TD WIDTH="295">Removes the specified<TT> TreeSelectionListener</TT> from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeTreeWillExpandListener</TT> <TT>(TreeWillExpandListener)</TT></TD>
		<TD WIDTH="295">Removes the specified<TT> TreeWillExpandListener</TT> from the collection of listeners</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void scrollPathToVisible(TreePath)</TT></TD>
		<TD WIDTH="295">Ensures that the specified path is visible</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void scrollRowToVisible(int)</TT></TD>
		<TD WIDTH="295">Ensures that the specified row is visible</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setCellEditor(TreeCellEditor)</TT></TD>
		<TD WIDTH="295">Sets the editor</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setCellRenderer(TreeCellRenderer)</TT></TD>
		<TD WIDTH="295">Sets the renderer</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setEditable(boolean)</TT></TD>
		<TD WIDTH="295">Sets whether this tree is editable</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>protected void</TT> <TT>setExpandedState(TreePath, boolean)</TT></TD>
		<TD WIDTH="295">Sets the expanded state</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD COLSPAN="2">
			<P ALIGN="CENTER"><I>Methods</I>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setInvokesStopCellEditing()</TT></TD>
		<TD WIDTH="295">Set to true if <TT>stopCellEditing</TT> should be invoked when editing is interrupted</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setLargeModel(boolean)</TT></TD>
		<TD WIDTH="295">Sets whether this tree represents a large model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setModel(TreeModel)</TT></TD>
		<TD WIDTH="295">Sets the model for this tree</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setRootVisible(boolean)</TT></TD>
		<TD WIDTH="295">Sets whether the root node is visible</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setRowHeight(int)</TT></TD>
		<TD WIDTH="295">Set the height of one row</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean setScrollsOnExpand(boolean)</TT></TD>
		<TD WIDTH="295">Set to true if scrolling should occur when a node is expanded</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setSelectionInterval(int, int)</TT></TD>
		<TD WIDTH="295">Sets the selected set to be the specified interval</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setSelectionModel(TreeSelectionModel)</TT></TD>
		<TD WIDTH="295">Sets the selection model</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setSelectionPath(TreePath)</TT></TD>
		<TD WIDTH="295">Sets the selected set to be the specified path</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setSelectionPaths(TreePath[])</TT></TD>
		<TD WIDTH="295">Sets the selected set to be the specified paths</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setSelectionRow(int)</TT></TD>
		<TD WIDTH="295">Sets the selected set to be the specified row</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setSelectionRows(int[])</TT></TD>
		<TD WIDTH="295">Sets the selected set to be the specified rows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setShowsRootHandles(boolean)</TT></TD>
		<TD WIDTH="295">Sets whether handles are shown at the root level</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void</TT> <TT>setToggleClickCount(int)</TT></TD>
		<TD WIDTH="295">Sets the number of mouse clicks required to expand a node</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setUI(TreeUI)</TT></TD>
		<TD WIDTH="295">Sets the active pluggable look and feel attributes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setVisibleRowCount(int)</TT></TD>
		<TD WIDTH="295">Set the number of currently visible rows</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void startEditingAtPath(TreePath)</TT></TD>
		<TD WIDTH="295">Sets the location where editing is to start</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void stopEditing()</TT></TD>
		<TD WIDTH="295">Stops editing</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void treeDidChange()</TT></TD>
		<TD WIDTH="295">Invoked when the tree has changed enough that a resize is needed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void updateUI()</TT></TD>
		<TD WIDTH="295">Invoked to indicate a change in pluggable look-and-feel attributes</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.Jtree</TT>: Example</H4>
<P>The <TT>JTree</TT> class allows for display of hierarchical information:


<BLOCKQUOTE>
	<PRE>import java.awt.*;



import javax.swing.*;

import javax.swing.event.*;

import javax.swing.tree.*;



public class JTreeDemo extends JApplet { 



    JTree                   tree;

    DefaultMutableTreeNode  root;

    DefaultMutableTreeNode  folder;

    DefaultMutableTreeNode  node;





     public void init() { 

            resize(400, 400);



            // Create a new Border Layout object with

            // a 10 pixel gaps between all components.

            BorderLayout borderLayout = new BorderLayout(10,10);

         getContentPane().setLayout(borderLayout);



            //create tree components

            root = new DefaultMutableTreeNode(&quot;Root&quot;);

            DefaultTreeModel treeModelData = 

            new DefaultTreeModel(root);

         tree = new JTree(treeModelData);

         folder = new DefaultMutableTreeNode(&quot;Folder 1&quot;);

         treeModelData.insertNodeInto

                (folder, root, treeModelData.getChildCount(root));

         node = new DefaultMutableTreeNode(&quot;Leaf 1&quot;);

         treeModelData.insertNodeInto

                (node, folder, treeModelData.getChildCount(folder));





         folder = new DefaultMutableTreeNode(&quot;Folder 2&quot;);

         treeModelData.insertNodeInto

                (folder, root, treeModelData.getChildCount(root));

         node = new DefaultMutableTreeNode(&quot;Leaf 1&quot;);

         treeModelData.insertNodeInto

                (node, folder, treeModelData.getChildCount(folder));

         node = new DefaultMutableTreeNode(&quot;Leaf 2&quot;);

         treeModelData.insertNodeInto

                (node, folder, treeModelData.getChildCount(folder));

         node = new DefaultMutableTreeNode(&quot;Leaf 3&quot;);

         treeModelData.insertNodeInto

                (node, folder, treeModelData.getChildCount(folder));

         getContentPane().add

                (new JScrollPane(tree), BorderLayout.CENTER);

} 

} 



import java.util.Vector;

</PRE>

</BLOCKQUOTE>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingKeyStrokeFONTTT"></A><TT>javax.swing.KeyStroke</TT></H3>
<P><TT>public class KeyStroke extends Object implements Serializable</TT></P>

<P>The KeyStroke class models a unique keypress on the keyboard. Included in the
object is the key being pressed and any modifier keys pressed with it.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.KeyStroke</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean equals(Object)</TT></TD>
		<TD WIDTH="295">Returns true if the two objects represent identical keystrokes</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public char getKeyChar()</TT></TD>
		<TD WIDTH="295">Obtains the key pressed</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getKeyCode()</TT></TD>
		<TD WIDTH="295">Obtains the key code associated with the key <TT>char</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static KeyStroke getKeyStroke(char)</TT></TD>
		<TD WIDTH="295">Obtains the keystroke for the given <TT>char</TT>; note that this object is a shared
			instance</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static KeyStroke getKeyStroke(int, int)</TT></TD>
		<TD WIDTH="295">Obtains the keystroke for the given key and modifier code; note that this object
			is a shared instance</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static KeyStroke getKeyStroke(int, int, boolean)</TT></TD>
		<TD WIDTH="295">Obtains the keystroke for the given key and modifier code; note that this object
			is a shared instance</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static KeyStroke getKeyStroke(String)</TT></TD>
		<TD WIDTH="295">Obtains the keystroke for the given string; note that this object is a shared instance</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public static KeyStroke getKeyStrokeForEvent(KeyEvent)</TT></TD>
		<TD WIDTH="295">Obtains the key associated with the given event; note that this object is a shared
			instance</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getModifiers()</TT></TD>
		<TD WIDTH="295">Obtains any modifiers pressed with this key</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int hashCode()</TT></TD>
		<TD WIDTH="295">Obtains the hash code for this object</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isOnKeyRelease()</TT></TD>
		<TD WIDTH="295">Returns true if this keystroke was sent on the key release</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String toString()</TT></TD>
		<TD WIDTH="295">Obtains a <TT>String</TT> representation of the keystroke</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingOverlayLayoutFONTTT"></A><TT>javax.swing.OverlayLayout</TT></H3>
<P><TT>public class OverlayLayout extends Object implements LayoutManager2, Serializable</TT></P>

<P>The OverlayLayout class is a layout manager that allows components to be physically
placed on top of each other.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.OverlayLayout</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addLayoutComponent(Component, Object)</TT></TD>
		<TD WIDTH="295">Adds the specified component using the specified constraints</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void addLayoutComponent(String, Component)</TT></TD>
		<TD WIDTH="295">Adds the specified component, associating it with the specified name</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public float getLayoutAlignmentX(Container)</TT></TD>
		<TD WIDTH="295">Obtains the alignment along the x-axis of the specified container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public float getLayoutAlignmentY(Container)</TT></TD>
		<TD WIDTH="295">Obtains the alignment along the y-axis of the specified container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void invalidateLayout(Container)</TT></TD>
		<TD WIDTH="295">Invalidates the specified container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void layoutContainer(Container)</TT></TD>
		<TD WIDTH="295">Lays out the specified container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension maximumLayoutSize(Container)</TT></TD>
		<TD WIDTH="295">Obtains the maximum size for the specified container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension minimumLayoutSize(Container)</TT></TD>
		<TD WIDTH="295">Obtains the minimum size for the specified container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public Dimension preferredLayoutSize(Container)</TT></TD>
		<TD WIDTH="295">Obtains the preferred size for the specified container</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void removeLayoutComponent(Component)</TT></TD>
		<TD WIDTH="295">Removes the specified component</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingProgressMonitorFONTTT"></A><TT>javax.swing.ProgressMonitor</TT></H3>
<P><TT>public class ProgressMonitor extends Object</TT></P>

<P>The ProgressMonitor class is used to monitor the progress of an action that could
potentially take a long time to complete. After a specified period of time has elapsed
and the operation has not completed, the ProgressMonitor class will display a notification
that the action is still in progress.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.ProgressMonitor</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Methods/Events</B>
		</TD>
		<TD WIDTH="295">
			<P ALIGN="CENTER"><B>Description</B>
		</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void close()</TT></TD>
		<TD WIDTH="295">To be invoked when the operation in question is complete</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295">public int getMaximum()</TD>
		<TD WIDTH="295">Obtains the maximum amount of time the operation can take</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getMillisToDecideToPopup()</TT></TD>
		<TD WIDTH="295">Obtains the number of milliseconds that must pass before you decide whether this
			operation could take a long time; once this number of milliseconds passes, you will
			wait the amount of time returned by <TT>getMillisToPopup()</TT> and then present
			a dialog</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getMillisToPopup()</TT></TD>
		<TD WIDTH="295">The amount of time after <TT>getMillisToDecideToPopup()</TT> until you display a
			dialog</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public int getMinimum()</TT></TD>
		<TD WIDTH="295">Obtains the minimum amount of time this operation can take</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public String getNote()</TT></TD>
		<TD WIDTH="295">Obtains the text of the dialog</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public boolean isCancelled()</TT></TD>
		<TD WIDTH="295">Returns true if this operation has been cancelled</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setMaximum(int)</TT></TD>
		<TD WIDTH="295">Sets the maximum amount of time this operation can take</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setMillisToDecideToPopup(int)</TT></TD>
		<TD WIDTH="295">Sets the number of milliseconds that must pass before you decide whether this operation
			could take a long time; once this number of milliseconds passes, you will wait the
			amount of time returned by <TT>getMillisToPopup()</TT> and then present a dialog</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setMillisToPopup(int)</TT></TD>
		<TD WIDTH="295">Sets amount of time after <TT>getMillisToDecideToPopup()</TT> until you display a
			dialog</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setMinimum(int)</TT></TD>
		<TD WIDTH="295">Sets the minimum amount of time this operation can take</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setNote(String)</TT></TD>
		<TD WIDTH="295">Sets the text to display in the dialog</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD WIDTH="295"><TT>public void setProgress(int)</TT></TD>
		<TD WIDTH="295">Updates the progress of the operation</TD>
	</TR>
</TABLE>
</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H3><A NAME="TTFONTSIZEjavaxswingProgressMonitorInputStreamFONTTT"></A><TT>javax.swing.ProgressMonitorInputStream</TT></H3>
<P><TT>public class ProgressMonitorInputStream extends FilterInputStream</TT></P>

<P>The ProgressMonitorInputStream class is similar to ProgressMonitor in that it
monitors the progress of a potentially lengthy operation. The main difference is
that this class monitor reads from an input stream. Because this class sits on top
of the stream in question, users read directly from this stream.</P>

<P><IMG SRC="class.gif" WIDTH="63" HEIGHT="21" ALIGN="BOTTOM" BORDER="0">
<H4><TT>javax.swing.ProgressMonitorInputStream</TT>: Summary</H4>
<P>
<TABLE BORDER="1" BORDERCOLOR="#000000">
	<TR VALIGN="TOP">
		<TD><B>Methods/Events</B></TD>
		<TD><B>Description</B></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD><TT>public void close()</TT></TD>
		<TD>Closes the input stream</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD><TT>public ProgressMonitor getProgressMonitor()</TT></TD>
		<TD>Obtains the <TT>ProgressMonitor</TT> class responsible for monitoring progress</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD><TT>public int read()</TT></TD>
		<TD>Reads the next byte from the stream</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD><TT>public int read(byte[])</TT></TD>
		<TD>Fills the specified array with data from the stream</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD><TT>public int read(byte[], int, int)</TT></TD>
		<TD>Fills the specified array between the specified indices with data from the stream</TD>
	</TR>
	<TR VALIGN="TOP">
		<TD><TT>public void reset()</TT></TD>
		<TD>Moves the current stream reader position to the position of the last call to <TT>mark()</TT></TD>
	</TR>
	<TR VALIGN="TOP">
		<TD><TT>public void skip(long)</TT></TD>
		<TD>Skips over the specified number of bytes</TD>
	</TR>
</TABLE>
</P>
<CENTER>
<P>
<HR SIZE="4">
<A HREF="..\ch34\ch34.htm"><IMG SRC="..\button\previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" BORDER="0"></A> <A HREF="..\index.htm"><IMG SRC="..\button\contents.gif"
WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" BORDER="0"></A> <A HREF="..\apb\apb.htm"><IMG
SRC="..\button\next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" BORDER="0"></A></P>

<P>&copy; <A HREF="..\copy.htm">Copyright</A>, Macmillan Computer Publishing. All
rights reserved.
</CENTER>

</BODY>

</HTML>