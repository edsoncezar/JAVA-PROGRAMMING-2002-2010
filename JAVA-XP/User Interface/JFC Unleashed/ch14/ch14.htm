<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<SCRIPT LANGUAGE="JavaScript">


<!--

function popUp(pPage) {
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '<link rel="stylesheet" href="/includes/stylesheets/ebooks.css"></head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 figDoc.write(zhtm);
 figDoc.close();
 popUpWin.focus();
 }

//-->


</SCRIPT>
<link rel="stylesheet" href="http://www.szptt.net.cn/includes/stylesheets/ebooks.css">

        <META NAME="GENERATOR" Content="Symantec Visual Page 1.0.1">
        <META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
        <TITLE>JFC -- Chapter 14 - JTabbedPane Class</TITLE>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<CENTER>
<H1><IMG SRC="..\button\sams.gif" BORDER="0"></H1>

<P><A HREF="..\ch13\ch13.htm"><IMG SRC="..\button\previous.gif" BORDER="0"></A>
<A HREF="..\index.htm"><IMG SRC="..\button\contents.gif" BORDER="0"></A> 
<A HREF="..\ch15\ch15.htm"><IMG SRC="..\button\next.gif" BORDER="0"></A> 


<H1>JFC Unleashed</H1></CENTER>
<HR>


<H1>Chapter&nbsp;14<br>
JTabbedPane Class</H1>
<HR>
<p>


<UL>
<LI><A HREF="#TTFONTSIZEJTabbedPaneFONTTTFONTSIZEClassUsageFONT">
<TT>JTabbedPane</TT>Class
Usage</A>
<UL>
<LI><A HREF="#AddingComponentstotheTTFONTSIZEJTabbedPaneFONTTTFONTSIZEInstanceFONT">
Adding Components to the <TT>JTabbedPane</TT>
Instance</A>
<LI><A HREF="#RemovingComponentsfromtheTTFONTSIZEJTabbedPaneFONTTTFONTSIZEInstanceFONT">
Removing Components from the <TT>JTabbedPane</TT>
Instance</A>
<LI><A HREF="#AlteringExistingComponents">
Altering Existing Components</A>
<LI><A HREF="#DisplayingComponents">
Displaying Components</A>
<LI><A HREF="#ACompleteTTFONTSIZEJTabbedPaneFONTTTFONTSIZESampleApplicationFONT">
A Complete <TT>JTabbedPane</TT>
Sample Application</A>
</UL>
<LI><A HREF="#Summary">
Summary</A>
</UL>

<HR>
<P>
The <TT>JTabbedPane</TT> class provides a visual component that
allows multiple panels to be viewed one at a time in a single
area. Tabs are provided to change from panel to panel in the main
view. Tabbed panels are often used in configuration dialog boxes.
Related options are placed on the same panel. The tabs on the
tabbed panel represent the complete set of options available for
configuration. This allows a great deal of information to be presented
to the user in a relatively small amount of screen real estate.
Using tabs to switch from panel to panel utilizes the screen space
efficiently.
<P>
In this chapter you will learn how to
<UL>
<LI>Create and configure <TT>JTabbedPane</TT> class instances
<LI>Add and remove panels from instances of the <TT>JTabbedPane</TT>
class
<LI>Dynamically alter the component and tab's title and icon
<LI>Programmatically alter the panel displayed in the tabbed pane
</UL>
<H2><A NAME="TTFONTSIZEJTabbedPaneFONTTTFONTSIZEClassUsageFONT">
<TT>JTabbedPane</TT> Class
Usage</A></H2>
<P>
The <TT>JTabbedPane</TT> class is a container that allows multiple
components to be added but only displays one component at a time.
Tabs are located on one of the sides of the displayed component
that allow the user to choose which component is currently visible
in the center of the tabbed pane.
<P>
Creating an instance of the <TT>JTabbedPane</TT> class is a simple
matter. The class contains two constructors: an empty constructor
and one that takes a single parameter which specifies where the
tabs are located on the panel. You can position the tabs on any
side of the tabbed pane. The parameters to define the placement,
defined in the <TT>SwingConstants</TT> class, are <TT>TOP</TT>,
<TT>BOTTOM</TT>, <TT>RIGHT</TT>, and <TT>LEFT</TT>. The <TT>JTabbedPaneTest</TT>
application shown in Listing 14.1 creates a tabbed pane with the
tabs on the bottom and displays it in a frame. When using the
default constructor, the tabs are placed on the top of the tabbed
pane.
<P>
Tab placement is a bound property that can be changed after creation.
The <TT>setTabPlacement</TT> method sets the property and invalidates
the tabbed panel. The property name is <TT>tabPlacement</TT>.
See Table 14.1 for a complete list of bound properties defined
in the <TT>JTabbedPane</TT> class. You can query the current value
of the property by using the provided <TT>getTabPlacement</TT>
method. The number of tabs in a tabbed pane can be queried with
the <TT>getTabCount</TT> method, and the number of rows required
to display the tabs can be queried with the <TT>getTabRunCount</TT>
method.<P>
<HR>
<P>
<B>Listing 14.1&nbsp;&nbsp;</B><TT><B>JTABBEDPANETEST</B></TT><B>
Application<BR>
</B>
<BLOCKQUOTE>
<PRE>
package com.foley.test;

import java.awt.*;

import javax.swing.*;

import com.foley.utility.ApplicationFrame;


/**
 * An application that displays a JTabbedPane in a frame.
 *
 * @author Mike Foley
 **/
public class JTabbedPaneTest extends Object { 
    
    /**
     * Application entry point.
     * Create the frame, and display a tabbed pane in it.
     *
     * @param args Command line parameter. Not used.
     **/
    public static void main( String args[] ) { 

        JFrame frame = new ApplicationFrame( &quot;JTabbedPaneTest&quot; );

        JTabbedPane tabbedPane = new JTabbedPane( SwingConstants.BOTTOM );
        tabbedPane.setBorder( BorderFactory.createLoweredBevelBorder() );
        
        frame.getContentPane().add( tabbedPane, BorderLayout.CENTER );
        frame.pack();
        frame.setVisible( true );
        
    }  // main

}  // JtabbedPaneTest<BR>
</PRE>
</BLOCKQUOTE>
<P>
<CENTER><B>Table 14.1&nbsp;&nbsp;New Bound Properties in the </B><TT><B>JTABBEDPANE</B></TT><B>
Class</B></CENTER>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1>
<TR VALIGN=TOP><TD WIDTH=150><CENTER><B>Property Name</B></CENTER></TD><TD WIDTH=150><CENTER><B>Setter Method</B></CENTER>
</TD><TD WIDTH=150><CENTER><B>Getter Method</B></CENTER></TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=150><TT>model</TT></TD><TD WIDTH=150><TT>setModel</TT>
</TD><TD WIDTH=150><TT>getModel</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=150><TT>tabPlacement</TT></TD><TD WIDTH=150><TT>setTabPlacement</TT>
</TD><TD WIDTH=150><TT>getTabPlacement</TT></TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="AddingComponentstotheTTFONTSIZEJTabbedPaneFONTTTFONTSIZEInstanceFONT">
Adding Components to the <TT>JTabbedPane</TT>
Instance</A></H3>
<P>
The frame created by the <TT>JTabbedPaneTest</TT> application
is shown in Figure 14.1. In the figure, you see that an empty
tabbed pane is not very interesting. Components must be added
to the tabbed pane for the tabs to display. The original API for
the <TT>JTabbedPane</TT> class contained many versions of the
<TT>addTab</TT> and <TT>insertTab</TT> methods for adding components
to the tabbed pane. However, these method names do not follow
the JavaBeans standard naming convention for adding components
to a container. This caused visual design tools difficulty, because
the <TT>JTabbedPane</TT> class had to be handled with special
code. To address this issue, a set of overloaded <TT>add</TT>
methods were added to the <TT>JTabbedPane</TT> class that map
to the appropriate <TT>addTab</TT> or <TT>insertTab</TT> method.
The <TT>add</TT> method appends the given component to the existing
set of components in the tabbed panel. Using the <TT>add</TT>
method, the tabs will be displayed in the order the components
are added to the tabbed pane. When a component is added by using
the <TT>insertTab</TT> method, its placement can be specified.
These methods are consistent to the methods you saw in earlier
chapters for adding menu items to menus and items to a toolbar.
<P>
<A HREF="javascript:popUp('f14-1.gif')"><B>Figure 14.1 :</B> <I>The JTabbedPaneTest application</I>.</A>
<P>
Use the following code to add a component to a tabbed pane:
<P>
<TT>tabbedPane.add( new JLabel( &quot;Tab
1&quot; ) );</TT>
<P>
This version of the <TT>add</TT> method uses the name of the component
for the tab's label in the tabbed pane. It is often desirable
to specify the text for the tab's label when adding the component
to the tabbed pane. Due to a quirk in the various <TT>add</TT>
method implementations, both of the following lines perform this
task:
<BLOCKQUOTE>
<PRE>
tabbedPane.add( &quot;Tab 1&quot;, new JLabel( &quot;Tab 1&quot; ) );
tabbedPane.add( new JLabel( &quot;Tab 2&quot; ), &quot;Tab 2&quot; );
</PRE>
</BLOCKQUOTE>
<P>
This seemingly contradictory code is because the version of the
<TT>add</TT> method that takes an <TT>Object</TT> constraint as
its second parameter tests to see if the <TT>Object</TT> is an
instance of the <TT>String</TT> class. If so, the <TT>add</TT>
method calls the <TT>addTab</TT> method with the <TT>String</TT>
constraint used as the tab's name. There is also an <TT>add</TT>
method that takes the position of where the new tab is located.
To add the new tab at the start of the tabs, the following line
of code can be used. This version of the <TT>add</TT> method calls
the insert method with the specified index.
<P>
<TT>tabbedPane.add( new JLabel( &quot;Tab
3&quot; ), &quot;Tab 3 &quot;, 0 );</TT>
<P>
As was mentioned earlier, each version of the <TT>add</TT> method
calls either the <TT>addTab</TT> or <TT>insertTab</TT> method
contained in the <TT>JTabbedPane</TT> class. In fact, each variant
of the <TT>addTab</TT> method calls the <TT>insertTab</TT> method.
The signatures for these methods are shown next. Looking at the
signature, you see that an <TT>Icon</TT> can be added to the tab
for a component. The tab can contain an <TT>Icon</TT>, a <TT>String</TT>,
or both. Also, the ToolTip for a tab can be specified when adding
a component to the tabbed pane. However, there is no convenient
method to alter the ToolTip after the component has been added
to the tabbed pane.
<BLOCKQUOTE>
<PRE>
addTab( String title, Icon icon, Component component, String tip ) 
addTab( String title, Icon icon, Component component ) 
addTab( String title, Component component )
insertTab( String title, Icon icon, Component component, 
  String tip, int index )
</PRE>
</BLOCKQUOTE>
<H4>Adding Tabs to the <TT>JTabbedPaneTest</TT> Application</H4>
<P>
You can use any or all of the previously shown methods to add
tabs to the <TT>JTabbedPaneTest</TT> application. If the following
lines of code are added after the tabbed pane is created, the
window shown in Figure 14.2 will be created:
<P>
<A HREF="javascript:popUp('f14-2.gif')"><B>Figure 14.2 :</B> <I>Tabs added to the JTabbedPaneTest application</I>.</A>
<BR>
<BLOCKQUOTE>
<PRE>
//
// add some tabs to the tabbed pane instance.
//
tabbedPane.add( new JLabel( &quot;Tab 1&quot; ) );
tabbedPane.add( new JLabel( &quot;Tab 2&quot; ), &quot;Tab 2&quot; );
tabbedPane.add( new JLabel( &quot;Tab 3&quot; ), &quot;Tab 3 &quot;, 0 );
tabbedPane.addTab( &quot;Tab 4&quot;, new ImageIcon( &quot;red.gif&quot; ), 
                   new JLabel( &quot;Tab 4&quot; ), &quot;This is the tip&quot; );
</PRE>
</BLOCKQUOTE>
<P>
With the exception of the tab labeled Tab 3, the order of the
tabs in Figure 14.2 are the order in which they were added to
the tabbed pane. The version of the <TT>add</TT> method used for
this tab specified an index of 0 placing that tab first in the
tabbed panel. The last tab is the only tab for which a ToolTip
and an icon have been specified.
<H3><A NAME="RemovingComponentsfromtheTTFONTSIZEJTabbedPaneFONTTTFONTSIZEInstanceFONT">
Removing Components from the <TT>JTabbedPane</TT>
Instance</A></H3>
<P>
After adding components to an instance of the <TT>JTabbedPane</TT>
class, it may become necessary to remove one or more of the components.
The <TT>removeTabAt</TT> method removes the tab at the given index
from the tabbed pane. Indexes in the tabbed pane are zero-based
with a range from 0 to one less than the integer returned from
the <TT>getTabCount</TT> method. This method requires that the
numerical index of the component be removed. If you have a reference
to the component to be removed, the <TT>remove</TT> method can
be called. This method takes the component as its parameter.
<P>
You can clear the tabbed pane by calling the <TT>removeAll</TT>
method. This method will clear the tabbed pane and leave it in
the same state it was after being created.
<H3><A NAME="AlteringExistingComponents">
Altering Existing Components</A></H3>
<P>
Existing components or tabs in a tabbed pane can be altered. To
facilitate finding the index of a component, the <TT>indexOfComponent</TT>
method is provided. Similarly, the <TT>indexOfTab</TT> method
determines the index of a tab in the tabbed pane. These methods
search the tabbed pane to determine the index of the given component,
tag text, or icon. By using these methods, the application does
not need to store the index of components or tabs in the tabbed
pane. These methods are also useful to determine the index where
a new component should be added.
<P>
You can replace the tab at a given index with the <TT>setComponentAt</TT>
method. This method takes the index of the component to be replaced
and the component. The text or icon on the tab for the given index
is not changed. Passing a negative index, or an index greater
than the number of tabs in the view, will cause an <TT>ArrayIndexOutOfBoundsException</TT>
to be thrown. You can query the component at the given index by
using the <TT>getComponentAt</TT> method. The text or icon on
an existing tab can be updated with the <TT>setTitleAt</TT> and
<TT>setIconAt</TT> methods respectively. The current value for
these properties can be queried with the <TT>getTitleAt</TT> and
<TT>getIconAt</TT> methods. Once again, specifying an out of bounds
index will cause an <TT>ArrayIndexOutOfBoundsException</TT> to
be thrown.
<P>
The <TT>setForegroundAt</TT> and <TT>setBackgroundAt</TT> methods
set the foreground and background colors of the tabs at the given
index. Note that these methods alter the colors in the tab but
not the component itself. Thus, if you add the following lines
of code to the <TT>JTabbedPaneTest</TT> application, the tabbed
pane will look as shown in Figure 14.3. Notice that Tab 2 is selected
in the figure.
<P>
<A HREF="javascript:popUp('f14-3.gif')"><B>Figure 14.3 :</B> <I>Colored tabs in the JTabbedPaneTest application</I>.</A>
<BR>
<BLOCKQUOTE>
<PRE>
tabbedPane.setForegroundAt( 0, Color.red );
tabbedPane.setForegroundAt( 1, Color.yellow );
tabbedPane.setBackgroundAt( 0, Color.yellow );
tabbedPane.setBackgroundAt( 1, Color.red );
</PRE>
</BLOCKQUOTE>
<P>
You can query the bounds of a tab with the <TT>getBoundsAt</TT>
method. This method returns a <TT>Rectangle</TT> containing the
size of the tab at the given index. Once again, the size is of
the tab itself, not the component in the tabbed pane.
<P>
A tab can be enabled and disabled in the tabbed pane. The <TT>setEnableAt</TT>
method changes the enabled state of a tab, and the <TT>isEnabledAt</TT>
method queries the current state of this property. The <TT>setDisabledIconAt</TT>
method sets an icon for a disable tab. If a disabled icon has
not been set and the tab contains an icon, a disabled icon is
created by using the <TT>GrayFilter</TT> class as shown in Chapter
5, &quot;Basic Components.&quot; The currently defined disabled
icon for a tab can be queried with the <TT>getDisabledIconAt</TT>
method.
<H3><A NAME="DisplayingComponents">
Displaying Components</A></H3>
<P>
The <TT>JTabbedPane</TT> class employs a <TT>SingleSelectionModel</TT>
instance to track which component is currently displayed in the
container. The <TT>SingleSelectionModel</TT> interface, shown
in Listing 14.2, defines a selection model that allows only one
item to be selected at a given time. It contains methods for setting
and querying the selected index, as well as clearing the selection.
A <TT>ChangeListener</TT> can be added to the model to receive
notifications when the selection changes. The <TT>ChangeListener</TT>
interface and its associated <TT>ChangeEvent</TT> class are discussed
in <A HREF="..\ch06\ch06.htm" >Chapter 6</A> &quot;The Button Hierarchy.&quot; 
<P>
It is interesting to note that the comment before the <TT>clearSlection</TT>
method states that clearing the selection will set the selected
value to <TT>-1</TT>. This is an implementation detail that should
not be assumed by the user of the model. The <TT>DefaultSingleSelectionModel</TT>
class in the JFC does exhibit this behavior, but other implementations
of the model may not. The <TT>isSelected</TT> method is provided
to determine if there is currently a selected index in the model.
A <TT>ChangeListener</TT> can be added directly to the tabbed
pane itself instead of with the model. The <TT>JTabbedPane</TT>
class listens to the <TT>SingleSelectionModel</TT> and forwards
change messages to all <TT>ChangeListeners</TT> registered with
the <TT>JTabbedPane</TT> instance.
<P>
<HR>
<P>
<B>Listing 14.2&nbsp;&nbsp;The </B><TT><B>SINGLESELECTIONMODEL</B></TT><B>
Interface<BR>
</B>
<BLOCKQUOTE>
<PRE>
public interface SingleSelectionModel { 
    /**
     * @return  the model's selection, or -1 if there is no selection.
     * @see     #setSelectedIndex
     */
    public int getSelectedIndex();

    /**
     * Sets the model's selected index to &lt;I&gt;index&lt;/I&gt;.
     *
     * Notifies any listeners if the model changes
     *
     * @see   #getSelectedIndex
     * @see   #addChangeListener
     */
    public void setSelectedIndex(int index);

    /**
     * Clears the selection (to -1).
     */
    public void clearSelection();

    /**
     * Returns true if the selection model currently has a selected value
     */
    public boolean isSelected();

    /**
     * Adds &lt;I&gt;listener&lt;/I&gt; as a listener to changes in the model.
     */
    void addChangeListener(ChangeListener listener);

    /**
     * Removes &lt;I&gt;listener&lt;/I&gt; as a listener to changes in the model.
     */
    void removeChangeListener(ChangeListener listener);
}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
You can set the current <TT>SingleSelectionModel</TT> for the
tabbed pane with the <TT>setModel</TT> method, and query it with
the <TT>getModel</TT> method. Changing the selected index will
cause listeners to be notified of the change. The <TT>JTabbedPane</TT>
class contains the <TT>setSelectedIndex</TT> and <TT>getSelectedIndex</TT>
convenience methods for setting and querying the selected index
in the model. These methods simply call the equivalent methods
on the current model. The <TT>getSelectedComponent</TT> method
can be used to query the selected component. This method returns
<TT>null</TT> if there is not a selected component. Similarly,
you can set the displayed component by using the <TT>setSelectedComponent</TT>
method.
<H3><A NAME="ACompleteTTFONTSIZEJTabbedPaneFONTTTFONTSIZESampleApplicationFONT">
A Complete <TT>JTabbedPane</TT>
Sample Application</A></H3>
<P>
Listing 14.3 shows the <TT>DynamicTabbedPaneTest</TT> application
that allows tabs to be dynamically added and removed from the
test tabbed pane. The application consists of two view areas:
the tabbed pane to the left and the control panel to the right.
Upon application initialization, three tabs are added to the tabbed
pane. After that, clicking the Add Tab button will add a new tab
to the tabbed pane. Clicking the Remove Selected button will remove
the selected tab from the tabbed pane. The Select None button
will clear the selection in the tabbed pane when chosen. The final
component in the control panel displays the selected tab in the
tabbed pane. Notice that the selected tab is counted from 0.
<P>
Each tab contains a <TT>JLabel</TT> instance and a <TT>JTextField</TT>
instance. The label displays the number of the tab. Tabs are numbered
sequentially from the start of the application beginning with
zero. The <TT>JTextField</TT> instance contains the text of the
tab's title. This text can be edited, and will update the tab's
title to the string entered in the text field when the enter key
is typed in the text field. The initial title for the tab is its
number.
<P>
The <TT>DynamicTabbedPaneTest</TT> application is shown in Figure
14.4 after some tabs have been added and removed. The titles of
some of the tabs have also been edited. In this example, the location
of the tabs is not explicitly set, so the tabs are placed on top
of the components, in their default locations.
<P>
<A HREF="javascript:popUp('f14-4.gif')"><B>Figure 14.4 :</B> <I>The complete DynamicTabbedPane- Test application</I>.</A>
<P>
<HR>
<P>
<B>Listing 14.3&nbsp;&nbsp;The </B><TT><B>DYNAMICTABBEDPANETEST</B></TT><B>
Application<BR>
</B>
<BLOCKQUOTE>
<PRE>
package com.foley.test;

import java.awt.*;
import java.awt.event.*;

import javax.swing.*;
import javax.swing.event.*;

import com.foley.utility.JBox;
import com.foley.utility.ApplicationFrame;


/**
 * An application that displays a JTabbedPane in a frame.
 * New tabs may be added to the tab by pressing a button.
 * The title of a tab may be updated by hitting enter in the
 * textField contained in the tab.
 *
 * @author Mike Foley
 **/
public class DynamicTabbedPaneTest extends Object { 
    
    private JBox jBox;
    private JTabbedPane tabbedPane;
    private JLabel selectedLabel;
    
    private int addedTabCount;
    
    
    /**
     * Create the panel for the test application.
     * This panel contains a JTabbedPane to the left,
     * and some configuration controls to the right.
     **/
    public DynamicTabbedPaneTest() { 
        
        //
        // No tabs have been added yet.
        //
        addedTabCount = 0;
        
        tabbedPane = createTabbedPane();
        tabbedPane.setBorder( BorderFactory.createLoweredBevelBorder()  );

        jBox = JBox.createHorizontalJBox();
        jBox.add( tabbedPane );
        
        jBox.add( Box.createRigidArea( new Dimension( 10, 10 ) ) );
        
        JPanel controlPanel = createControlPanel();
        jBox.add( controlPanel );
    } 
    

    /**
     * Create the tabbed pane used in the application.
     * Add a few interesting tabs.
     * &lt;p&gt;
     * @return The tab pane instance for this application.
     **/
    protected JTabbedPane createTabbedPane() { 
        JTabbedPane tabbedPane = new JTabbedPane();

        addTab( tabbedPane );        
        addTab( tabbedPane );        
        addTab( tabbedPane );        
        
        tabbedPane.setForegroundAt( 0, Color.red );
        tabbedPane.setBackgroundAt( 0, Color.yellow );
        tabbedPane.setForegroundAt( 1, Color.yellow );
        tabbedPane.setBackgroundAt( 1, Color.red );
        
        return( tabbedPane );
    } 
    
    
    /**
     * Create the controls for adding and removing tabs.
     * &lt;p&gt;
     * @return The control panel.
     **/
    protected JPanel createControlPanel() { 
        JPanel controlPanel = new JPanel();
        BoxLayout boxLayout = new BoxLayout( controlPanel, 
                                             BoxLayout.Y_AXIS );
        controlPanel.setLayout( boxLayout );
        
        JButton addButton = new JButton( &quot;add tab&quot; );
        controlPanel.add( addButton );
        controlPanel.add( Box.createRigidArea( new Dimension(10,10) ) );
        addButton.addActionListener( new ActionListener() { 
            public void actionPerformed( ActionEvent event ) { 
                addTab( tabbedPane );
                getCenter().repaint();
            } 
        }  );
        
        JButton removeButton = new JButton( &quot;remove selected&quot; );
        controlPanel.add( removeButton );
        controlPanel.add( Box.createRigidArea( new Dimension(10,10) ) );
        removeButton.addActionListener( new ActionListener() { 
            public void actionPerformed( ActionEvent event ) { 
                removeSelectedTab();
            } 
        }  );
        
        JButton noneButton = new JButton( &quot;select none&quot; );
        controlPanel.add( noneButton );
        controlPanel.add( Box.createRigidArea( new Dimension(10,10) ) );
        noneButton.addActionListener( new ActionListener() { 
            public void actionPerformed( ActionEvent event ) { 
                tabbedPane.getModel().clearSelection();
            } 
        }  );
        
        selectedLabel = new JLabel();
        setSelectedLabel();
        controlPanel.add( selectedLabel );
        controlPanel.add( Box.createRigidArea( new Dimension(10,10) ) );
        tabbedPane.addChangeListener( new ChangeListener() { 
            public void stateChanged( ChangeEvent event ) { 
                setSelectedLabel();
            } 
        }  );
        return( controlPanel );
    } 

    
    /**
     * Update the text on the selectedLabel to the currently
     * selected tab in the tabbedPane.
     **/
    private void setSelectedLabel() { 
        if( tabbedPane.getModel().isSelected() )
            selectedLabel.setText( &quot;Selected Index: &quot; + 
                                   tabbedPane.getSelectedIndex() );
        else
            selectedLabel.setText( &quot;None Selected&quot; );
    }     
    
    
    /**
     * Create a JLabel and add it to the tabbed pane.
     * The text of the label matches the tab's text, and
     * is simply the number of tabs created during this
     * run of the application.
     * &lt;p&gt;
     * @return The index of the newly added tab.
     **/
    private int addTab( final JTabbedPane tabbedPane ) { 
        String name = &quot;Tab &quot; + addedTabCount;
        final JPanel panel = new JPanel();
        panel.setLayout( new BorderLayout() );
        
        panel.add( new JLabel( name ), BorderLayout.NORTH );
        final JTextField textField = new JTextField( name );
        textField.addActionListener( new ActionListener() { 
            public void actionPerformed( ActionEvent event ) { 
                //
                // Update the title of our tab to that entered.
                //
                String newTitle = textField.getText();
                int index = tabbedPane.indexOfComponent( panel );
                tabbedPane.setTitleAt( index, newTitle );
                //
                // validate and paint the tabs to display properly.
                //
                tabbedPane.revalidate();
                tabbedPane.repaint();
            }  
        }  );
        
        panel.add( textField, BorderLayout.SOUTH );
        
        tabbedPane.add( panel, name );
        tabbedPane.revalidate();

        //
        // Bump the number of tabs added.
        //
        addedTabCount += 1;

        return( tabbedPane.getTabCount() - 1 );
    }     
    
    
    /**
     * Remove the currently selected tab from the tabbed pane.
     **/
    private void removeSelectedTab() { 
        if( tabbedPane.getModel().isSelected() ) { 
            int selectedIndex = tabbedPane.getSelectedIndex();
            tabbedPane.removeTabAt( selectedIndex );
            tabbedPane.revalidate();
            getCenter().repaint();
        } 
    }     
    
    
    /**
     * @return The center component in this object.
     **/
    public JComponent getCenter() { 
        return( jBox );
    } 
    
    
    /**
     * Application entry point.
     * Create the frame, and display a tabbed pane in it.
     *
     * @param args Command line parameter. Not used.
     **/
    public static void main( String args[] ) { 

        JFrame frame = new ApplicationFrame( &quot;DynamicTabbedPaneTest&quot; );
        JTabbedPaneTest test = new JTabbedPaneTest();
                        
        frame.getContentPane().add( test.getCenter(), 
                                    BorderLayout.CENTER );
frame.pack();
        frame.setVisible( true );
        
    }  // main

}  // DynamicTabbedPaneTest
</PRE>
</BLOCKQUOTE>
<HR>
<H2><A NAME="Summary">
Summary</A></H2>
<P>
The <TT>JTabbedPane</TT> class provides a container that shows
one component in a set of components at a given time. Tabs are
provided to allow the user to switch the currently visible component.
The tabs can be placed on any side of the component display area.
Methods are provided to set the foreground and background colors
of the tabs. The component added to the tabbed pane itself controls
its colors. The class employs a <TT>SingleSelectionModel</TT>
to track which component is selected. If there is not a component
selected, the tabbed pane displays empty.
<P>
Methods are provided to dynamically alter the components in the
tabbed pane. You can insert a component at any given position
or append it to the end of the existing components in the tabbed
pane. A component can be removed dynamically from the tabbed pane,
or all components can be removed with a single method call. Each
of the add and remove types of methods can operate on a given
component or index. Methods are also provided to convert from
index to component, and vice versa.
<P>
Components and tabs already in the tabbed pane can be changed.
The component can be replaced, as well as the text and icon in
the tab.
<P>
To demonstrate the use of the <TT>JTabbedPane</TT> class, a complete
example using many of the methods in the <TT>JTabbedPane</TT>
class was presented. In this application, tabs can be added and
removed interactively from the tabbed pane. The title for the
tab also can be edited.
<P>
<CENTER>
<HR SIZE=4>

<A HREF="..\ch13\ch13.htm"><IMG SRC="..\button\previous.gif" BORDER="0"></A>
<A HREF="..\index.htm"><IMG SRC="..\button\contents.gif" BORDER="0"></A> 
<A HREF="..\ch15\ch15.htm"><IMG SRC="..\button\next.gif" BORDER="0"></A> 
</p>

<p>&#169; <A HREF="..\copy.htm">Copyright</A>, Macmillan Computer Publishing. All rights reserved.
</CENTER>
</BODY>
</HTML>
