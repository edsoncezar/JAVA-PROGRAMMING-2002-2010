<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<SCRIPT LANGUAGE="JavaScript">


<!--

function popUp(pPage) {
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '<link rel="stylesheet" href="/includes/stylesheets/ebooks.css"></head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 figDoc.write(zhtm);
 figDoc.close();
 popUpWin.focus();
 }

//-->


</SCRIPT>
<link rel="stylesheet" href="http://www.szptt.net.cn/includes/stylesheets/ebooks.css">

        <META NAME="GENERATOR" Content="Symantec Visual Page 1.0.1">
        <META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
        <TITLE>JFC -- Chapter 18 - JOptionPane </TITLE>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<CENTER>
<H1><IMG SRC="..\button\sams.gif" BORDER="0"></H1>

<P><A HREF="..\ch17\ch17.htm"><IMG SRC="..\button\previous.gif" BORDER="0"></A>
<A HREF="..\index.htm"><IMG SRC="..\button\contents.gif" BORDER="0"></A> 
<A HREF="..\ch19\ch19.htm"><IMG SRC="..\button\next.gif" BORDER="0"></A> 


<H1>JFC Unleashed</H1></CENTER>
<HR>


<H1>Chapter&nbsp;18<br>
JOptionPane </H1>
<HR>
<p>


<UL>
<LI><A HREF="#CommonTTFONTSIZEJOptionPaneFONTTTFONTSIZEConfigurationFONT">
Common <TT>JOptionPane</TT>
Configuration</A>
<UL>
<LI><A HREF="#ParentComponent">
Parent Component</A>
<LI><A HREF="#Message">
Message</A>
<LI><A HREF="#MessageType">
Message Type</A>
<LI><A HREF="#OptionType">
Option Type</A>
<LI><A HREF="#Properties">
Properties</A>
</UL>
<LI><A HREF="#PredefinedDialogBoxes">
Predefined Dialog Boxes</A>
<UL>
<LI><A HREF="#MessageandInformational">
Message and Informational</A>
<LI><A HREF="#YesNoCancel">
Yes/No/Cancel</A>
<LI><A HREF="#InputDialogBoxes">
Input Dialog Boxes</A>
<LI><A HREF="#Selection">
Selection</A>
<LI><A HREF="#ProvidingCustomOptions">
Providing Custom Options</A>
</UL>
<LI><A HREF="#RollingYourOwn">
Rolling Your Own</A>
<LI><A HREF="#InternalFrameVersions">
Internal Frame Versions</A>
<LI><A HREF="#Summary">
Summary</A>
</UL>

<HR>
<P>
The <TT>JOptionPane</TT> class is the workhorse class for predefined
dialog boxes contained in the JFC. In this chapter, you will learn
how to use the <TT>JOptionPane</TT> class to
<UL>
<LI>Display message dialog boxes.
<LI>Display and process confirmation dialog boxes.
<LI>Display and process input dialog boxes.
<LI>Display and process selection dialog boxes.
<LI>Display and run <TT>Action</TT>s.
<LI>Use internal frame versions of the dialog boxes.
</UL>
<P>
The <TT>JOptionPane</TT> class provides a robust dialog box framework.
It contains static methods for displaying simple dialog boxes
to display information or prompt the user for input. These methods
follow the naming convention <TT>show <I>XXX</I> Dialog</TT>,
where <TT><I>XXX</I></TT> is the type of
dialog box to display. All <TT>JOptionPane</TT> dialog boxes are
modal, meaning that they will block input to the rest of the application
until the user finishes with the dialog box.
<P>
A <TT>JOptionPane</TT> dialog box consists of four regions: the
icon, the message area, the input area, and the option button
area. Each of these regions might or might not be shown. The exact
size and placement of each region is dependent on the look-and-feel
being used. Typical placement for these regions is shown on a
sample dialog box shown in Figure 18.1.
<P>
<A HREF="javascript:popUp('f18-1.gif')"><B>Figure 18.1 :</B> <I>JOptionPane regions</I>.</A>
<P>
The remainder of this chapter describes the myriad of options
available in the JOptionPane, and gives examples of their use.
This is followed by examples showing the use of each dialog box
that can be constructed with the JOptionPane class.
<H2><A NAME="CommonTTFONTSIZEJOptionPaneFONTTTFONTSIZEConfigurationFONT">
Common <TT>JOptionPane</TT>
Configuration</A></H2>
<P>
Convenience methods are provided in the <TT>JOptionPane</TT> class
to display the predefined dialog boxes in the <TT>JOptionPane</TT>
class. These methods conform to the following naming convention:
<P>
<TT>Show <I>XXX</I> Dialog</TT>
<P>
where <TT><I>XXX</I></TT> is the type of
dialog box to display. Possible values for the type are <TT>Confirm</TT>,
<TT>Input</TT>, <TT>Message</TT>, and <TT>Option</TT>. The parameters
to the <TT>show</TT> method are dependent on the type of dialog
box. However, many parameters are common to one or more of the
dialog boxes. The remainder of this section will present the common
parameters used by dialog boxes created in the <TT>JOptionPane</TT>
class.
<H3><A NAME="ParentComponent">
Parent Component</A></H3>
<P>
The first parameter to each of the show methods of the <TT>JOptionPane</TT>
class is an AWT <TT>Component</TT> descendant used to determine
the parent of the dialog box. If the component is not <TT>null</TT>,
the frame of the component is used as the parent frame for the
dialog box. The parent's frame is also used for the placement
of the dialog box. The exact placement is dependent on the look-and-feel
being used. If the parent component is <TT>null</TT>, a default
parent frame will be used. The default frame can be set with the
static <TT>setRootFrame</TT> method. The frame given to this method
will be used as the parent for dialog boxes opened with a <TT>null</TT>
parent parameter. Finally, if the root frame has not been set
and a <TT>null</TT> parent is provided, the <TT>SwingUtilities</TT>
<TT>getSharedOwnerFrame</TT> method is used to get the shared
owner frame for the application. See the discussion of the <TT>SwingUtilities</TT>
class in <A HREF="..\ch32\ch32.htm" >Chapter 32</A>, &quot;Swing Utilities,&quot; for a complete
description of the shared owner frame.
<P>
The <TT>JOptionPane</TT> contains two static methods that are
useful in a wide variety of situations, not just for dialog boxes.
The first, named <TT>getFrameForComponent</TT>, will search the
component's lineage to find the <TT>Frame</TT> for a given component.
It will return <TT>null</TT> if the component doesn't have a <TT>Frame</TT>
in its ancestry. The second method, named <TT>getDesktopPaneForComponent</TT>,
performs a similar function except it looks for a <TT>JDesktopPane</TT>
in the component's lineage. Both these methods are static. As
such, they can be invoked from any class where the <TT>Frame</TT>
or <TT>JDesktopPane</TT> of a component is required.
<H3><A NAME="Message">
Message</A></H3>
<P>
Each of the predefined dialog boxes in the <TT>JOptionPane</TT>
class takes an <TT>Object</TT> as a message parameter. The <TT>JOptionPane</TT>
interprets the type of this <TT>Object</TT> and displays it accordingly.
The most common usage for this parameter is a <TT>String</TT>.
When a <TT>String</TT> is given for the message, it is displayed
as is in the dialog box. However, the message parameter of the
dialog box is far more powerful than a simple <TT>String</TT>
viewer. If an <TT>Icon</TT> instance is given for the message,
it is wrapped in an instance of the <TT>JLabel</TT> class and
placed in the dialog box. If a <TT>Component</TT> instance is
passed as the message, the <TT>Component</TT> is used directly.
If another type of <TT>Object</TT> is passed as the message, its
<TT>toString</TT> method will be called, and the returned <TT>String</TT>
will be placed in the dialog box. Finally, an array of <TT>Object</TT>
instances can be passed as the message. In this case, the logic
previously described will be applied to each element in the array,
and they will be stacked in the message area with lower array
indexes on top of higher indexes. This provides a simple mechanism
for a multi-line dialog box. An array of <TT>String</TT> instances
can be passed as the message parameter. In this case, the <TT>String</TT>
instances will be displayed in the dialog box one on top of the
other.
<H3><A NAME="MessageType">
Message Type</A></H3>
<P>
The message type parameter is used to define the category of the
dialog box. Possible values for this parameter are <TT>ERROR_MESSAGE</TT>,
<TT>INFORMATION_MESSAGE</TT>, <TT>WARNING_MESSAGE</TT>, <TT>QUESTION_MESSAGE</TT>,
and <TT>PLAIN_MESSAGE</TT>. The look-and-feel currently being
used can interpret this parameter to decide which icon to display
and modify the dialog accordingly. There might be differing layouts
and icons for each message type. The default icons for each message
type for a given look-and-feel are shown in Table 18.1. Notice
that the <TT>PLAIN_MESSAGE</TT> message type provides a dialog
box that does not contain an icon. Examples of each of the message
types will be given in the &quot;Predefined Dialog Boxes&quot;
section later in this chapter.<BR>
<P>
<CENTER><B>Table 18.1&nbsp;&nbsp;Icons for Message Types</B></CENTER>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1>
<TR VALIGN=TOP><TD WIDTH=224><CENTER><B>Message Type</B></CENTER></TD><TD WIDTH=118><CENTER><B>Java LAF</B></CENTER>
</TD><TD WIDTH=118><CENTER><B>Motif LAF</B></CENTER></TD><TD WIDTH=118><CENTER><B>Windows LAF</B></CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=224><TT>ERROR_MESSAGE</TT></TD><TD WIDTH=118><center><IMG SRC="tb18-1.gif">
</TD><TD WIDTH=118><center><IMG SRC="tb18-2.gif"></TD><TD WIDTH=118><center><IMG SRC="tb18-3.gif"></TD></TR>
<TR VALIGN=TOP><TD WIDTH=224><TT>INFORMATION_MESSAGE</TT></TD><TD WIDTH=118><center><IMG SRC="tb18-4.gif">
</TD><TD WIDTH=118><center><IMG SRC="tb18-5.gif"></TD><TD WIDTH=118><center><IMG SRC="tb18-6.gif"></TD></TR>
<TR VALIGN=TOP><TD WIDTH=224><TT>PLAIN_MESSAGE</TT></TD><TD WIDTH=118><center>None
</TD><TD WIDTH=118><center>None</TD><TD WIDTH=118><center>None</TD></TR>
<TR VALIGN=TOP><TD WIDTH=224><TT>QUESTION_MESSAGE</TT></TD><TD WIDTH=118><center><IMG SRC="tb18-7.gif">
</TD><TD WIDTH=118><center><IMG SRC="tb18-8.gif"></TD><TD WIDTH=118><center><IMG SRC="tb18-9.gif"></TD></TR>
<TR VALIGN=TOP><TD WIDTH=224><TT>WARNING_MESSAGE</TT></TD><TD WIDTH=118><center><IMG SRC="tb18-10.gif">
</TD><TD WIDTH=118><center><IMG SRC="tb18-11.gif"></TD><TD WIDTH=118><center><IMG SRC="tb18-12.gif"></TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="OptionType">
Option Type</A></H3>
<P>
The final common parameter to the show family of methods is the
option type. This parameter defines the set of buttons that will
appear in the dialog box. The <TT>JOptionPane</TT> class defines
constants for many typical use cases. The available constants,
and the buttons shown in the dialog box when each constant is
used, are shown in Table 18.2.<BR>
<P>
<CENTER><B>Table 18.2&nbsp;&nbsp;Option Types</B></CENTER><CENTER>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1>
<TR VALIGN=TOP><TD WIDTH=160><CENTER><B>Parameter</B></CENTER></TD><TD WIDTH=150><CENTER><B>Buttons</B></CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=160><TT>YES_NO_OPTION</TT></TD><TD WIDTH=150>Yes and No
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=160><TT>YES_NO_CANCEL_OPTION</TT></TD><TD WIDTH=150>Yes, No, and Cancel
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=160><TT>OK_CANCEL_OPTION</TT></TD><TD WIDTH=150>OK and Cancel
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=160><TT>DEFAULT_OPTION</TT></TD><TD WIDTH=150>OK
</TD></TR>
</TABLE></CENTER>
</CENTER>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1>
<TR VALIGN=TOP><TD WIDTH=600><B>NOTE</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=600>
<BLOCKQUOTE>
The text that appears on the buttons in the <TT>JOptionPane</TT> dialog box has been <TT>internationalized</TT>. The text is read from a resource file, and may not appear exactly as shown throughout this chapter when used with a JDK configured for a language other than English.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="Properties">
Properties</A></H3>
<P>
Instances of the <TT>JOptionPane</TT> class fire <TT>PropertyChangeEvent</TT>
messages when values of bound properties change. Interested parties
can add themselves as a property change listener to be notified
when the <TT>JOptionPane</TT> instance has been modified.
<P>
Table 18.3 gives a list of the bound properties contained in the
<TT>JOptionPane</TT> class, and the method used to alter the property.
<BR>
<P>
<CENTER><B>Table 18.3&nbsp;&nbsp;</B><TT><B>JOPTIONPANE</B></TT><B>
Property Types</B></CENTER>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1>
<TR VALIGN=TOP><TD WIDTH=192><CENTER><B>Property</B></CENTER></TD><TD WIDTH=192><CENTER><B>Setter Method</B></CENTER>
</TD><TD WIDTH=192><CENTER><B>Getter Method</B></CENTER></TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>ICON_PROPERTY</TT></TD><TD WIDTH=192><TT>setIcon</TT>
</TD><TD WIDTH=192><TT>getIcon</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>INITIAL_SELECTION_ VALUE_PROPERTY</TT></TD>
<TD WIDTH=192><TT>setInitialSelectionValue</TT></TD><TD WIDTH=192><TT>getInitialSelectionValue</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>INITIAL_VALUE_PROPERTY</TT></TD><TD WIDTH=192><TT>setInitialValue</TT>
</TD><TD WIDTH=192><TT>getInitialValue</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>INPUT_VALUE_PROPERTY</TT></TD><TD WIDTH=192><TT>setInputValue</TT>
</TD><TD WIDTH=192><TT>getInputValue</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>MESSAGE_PROPERTY</TT></TD><TD WIDTH=192><TT>setMessage</TT>
</TD><TD WIDTH=192><TT>getMessage</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>MESSAGE_TYPE_PROPERTY</TT></TD><TD WIDTH=192><TT>setMessageType</TT>
</TD><TD WIDTH=192><TT>getMessageType</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>OPTION_TYPE_PROPERTY</TT></TD><TD WIDTH=192><TT>setOptionType</TT>
</TD><TD WIDTH=192><TT>getOptionType</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>OPTIONS_PROPERTY</TT></TD><TD WIDTH=192><TT>setOptions</TT>
</TD><TD WIDTH=192><TT>getOptions</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>SELECTION_VALUES_PROPERTY</TT></TD><TD WIDTH=192><TT>setSelectionValues</TT>
</TD><TD WIDTH=192><TT>getSelectionValues</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>VALUE_PROPERTY</TT></TD><TD WIDTH=192><TT>setValue</TT>
</TD><TD WIDTH=192><TT>getValue</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>WANTS_INPUT_PROPERTY</TT></TD><TD WIDTH=192><TT>setWantsInput</TT>
</TD><TD WIDTH=192><TT>getWantsInput</TT></TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="PredefinedDialogBoxes">
Predefined Dialog Boxes</A></H2>
<P>
The <TT>JOptionPane</TT> class contains static methods for displaying
many predefined dialog boxes. These are the show methods that
were discussed earlier in the chapter. Using these methods allows
the application to present a dialog box to the user with a single
line of code. These methods encompass the most generally used
portions of the <TT>JOptionPane</TT> class. The following sections
present each of these methods in detail.
<H3><A NAME="MessageandInformational">
Message and Informational</A></H3>
<P>
The <TT>JOptionPane</TT> class can be used to present an informational
dialog box to the user. One of the overloaded variants of the
static <TT>showMessageDialog</TT> method can be used to do this.
The complete signature of this method is the following:
<P>
<TT>showMessageDialog(Component, Object, String,
int, Icon)</TT>
<P>
The <TT>Component</TT> and <TT>Object</TT> parameters are required.
The remaining parameters are optional. Default values for the
optional parameters display an informational dialog box with a
title of &quot;Message&quot; and an OK button. The following application
can be used to display the simple dialog box shown in Figure 18.2.
The following code provides a vivid example of the power of the
<TT>JOptionPane</TT> class. In a single line, a complete modal
dialog box is displayed. This simple application framework can
be used for the <TT>JOptionPane</TT> examples throughout this
chapter. The relevant <TT>JOptionPane</TT> method can be substituted
for the one in the main method of the <TT>JOptionTest</TT> application
shown next.
<P>
<A HREF="javascript:popUp('f18-2.gif')"><B>Figure 18.2 :</B> <I>Simple informational dialog box</I>.</A>
<BLOCKQUOTE>
<PRE>
package com.foley.test;

import javax.swing.*;

/**
 * An application that displays a JOptionPane dialog box.
 *
 * @author Mike Foley
 **/
public class JOptionTest extends Object { 

    
    /**
     * Application entry point.
     * Display a dialog box from the JoptionPane class.
     *
     * @param args Command line parameter. Not used.
     **/
    public static void main( String args[] ) { 
        JOptionPane.showMessageDialog( null, &quot;Invalid Entry&quot; );        
        System.exit(0);
    }  // main

}  // JOptionTest
</PRE>
</BLOCKQUOTE>
<P>
It is a simple matter to change the style of the dialog box. By
specifying the type parameter, the default icon and title for
the dialog box can be changed. This provides an easy method to
specify the urgency of the dialog box. For example, adding the
<TT>ERROR_MESSAGE</TT> message constant, the urgency of the dialog
box is considered to be greater than the informational dialog
box shown in Figure 18.2. The dialog box produced with the following
line of code is shown in Figure 18.3. Passing the <TT>showMessageDialog</TT>
a <TT>null</TT> parent causes the dialog box to be centered on
the screen. Passing a non-<TT>null</TT> parent parameter will
cause the dialog box to be centered relative to the frame containing
the component passed to the <TT>showMessageDialog</TT> method.
Notice how the given message parameter appears in the center of
the dialog box, and the title is used for the title of the dialog
box.
<P>
<A HREF="javascript:popUp('f18-3.gif')"><B>Figure 18.3 :</B> <I>Error message dialog box</I>.</A>
<BLOCKQUOTE>
<PRE>
JOptionPane.showMessageDialog( null, &quot;Invalid Entry&quot;, &quot;Error&quot;, JOptionPane.ERROR_MESSAGE );
</PRE>
</BLOCKQUOTE>
<P>
By changing the type of the dialog, the <TT>JOptionPane</TT> used
a different icon. This gives the user a visual cue for the type
of the information being presented.
<P>
If the default icons don't meet your requirements, the icon to
be placed in the dialog box can be specified. The following modification
to the <TT>showMessageDialog</TT> method call creates a dialog
box containing the stop icon (see Figure 18.4):
<BLOCKQUOTE>
<PRE>
JOptionPane.showMessageDialog( null, &quot;Invalid Entry&quot;, 
                               &quot;Error&quot;, JOptionPane.ERROR_MESSAGE, stop );
</PRE>
</BLOCKQUOTE>
<P>
<A HREF="javascript:popUp('f18-4.gif')"><B>Figure 18.4 :</B> <I>Dialog box with a custom icon</I>.</A>
<P>
This example assumes that the icon named stop has been previously
loaded. Loading images and creating icons was discussed in Chapter
5, &quot;Basic Components,&quot; and will not be repeated here.
<H3><A NAME="YesNoCancel">
Yes/No/Cancel</A></H3>
<P>
In many situations, you need a dialog box to ask the user for
confirmation before performing an action. The <TT>JOptionPane</TT>
class provides the <TT>showConfirmDialog</TT> method to present
the user with a modal dialog box asking for confirmation. A simple
invocation of this method is shown next. The dialog box created
by this method call is shown in Figure 18.5. In the figure notice
that the Yes button is selected by default. Once again, the power
of the <TT>JOptionPane</TT> is shown in this example. One simple
line of code produces a modal dialog box requesting user input.
<P>
<TT>JOptionPane.showConfirmDialog( null, &quot;Continue?&quot;
);</TT>
<P>
<A HREF="javascript:popUp('f18-5.gif')"><B>Figure 18.5 :</B> <I>Simple confirmation dialog box</I>.</A>
<P>
After presenting the dialog box, the thread in which the calling
code is executing waits for the user input. This allows the JOptionPane
method to return the selection the user makes. The returned value
is an integer that can be one of the option constants defined
in the JOptionPane class. Client code can check the returned value
against these constants and take the appropriate action. This
is demonstrated in the version of the JOptionTest application
shown in the following code:
<BLOCKQUOTE>
<PRE>
package com.foley.test;

import javax.swing.*;

/**
 * An application that displays a JOptionPane dialog box.
 *
 * @author Mike Foley
 **/
public class JOptionTest extends Object { 

    
    /**
     * Application entry point.
     * Display a dialog box from the JOptionPane class.
     *
     * @param args Command line parameter. Not used.
     **/
    public static void main( String args[] ) { 

        int result = JOptionPane.showConfirmDialog( null,
                                &quot;Continue?&quot;,
                                &quot;Confirmation Required&quot;,
                                JOptionPane.YES_NO_OPTION );
        switch( result ) { 
            case JOptionPane.YES_OPTION:
            // Yes button was pressed.
            System.out.println( &quot;Yes button&quot; );
            break;
                    
            case JOptionPane.NO_OPTION:
            // No button was pressed.
            System.out.println( &quot;No button&quot; );
            break;
                    
            case JOptionPane.CANCEL_OPTION:
            // Cancel button was pressed.
            // (Not possible with the YES_NO_OPTION parameter.
            System.out.println( &quot;Cancel button&quot; );
            break;

            case JOptionPane.CLOSED_OPTION:
            // Window was closed without a button being pressed.
            System.out.println( &quot;Closed button&quot; );
            break;

        }  // switch( result )
        
        System.exit(0);

    }  // main

}  // JOptionTest
</PRE>
</BLOCKQUOTE>
<P>
When executed, this code produces the dialog box shown in Figure
18.6. You may notice that the Cancel button is not shown in this
confirmation dialog box. This call to the <TT>showConfirmDialog</TT>
method supplied two additional parameters. The first is the title
for the dialog box, Confirmation Required in this example. The
second additional parameter specifies which buttons to display.
In this example, the <TT>YES_NO_OPTION</TT> was given, specifying
that only the Yes and No buttons should be displayed.
<P>
<A HREF="javascript:popUp('f18-6.gif')"><B>Figure 18.6 :</B> <I>Yes/No dialog box</I>.</A>
<P>
Table 18.4 lists the constants that can be given for the type
parameter to the showConfirmDialog method. The type parameter
determines which buttons are displayed as well as the possible
values returned. Each dialog box can return the CLOSED_OPTION
constant. This constant is returned if the user closes the dialog
box without selecting any of the buttons in the dialog box. The
CLOSED_OPTION will typically be handled in the same way as the
NO_OPTION or CANCEL_OPTION.<BR>
<P>
<CENTER><B>Table 18.4&nbsp;&nbsp;Confirmation Dialog Box Constants</B></CENTER><CENTER>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1>
<TR VALIGN=TOP><TD WIDTH=192><B><center>Parameter Values</center></b></TD><TD WIDTH=192><b><center>Buttons</center></b></TD>
<TD WIDTH=192><b><center>Possible Return</b></center></TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>YES_NO_OPTION</TT></TD><TD WIDTH=192><TT>Yes and No
</TD><TD WIDTH=192><TT>YES_OPTION</TT>, 
<BR>
<TT>NO_OPTION</TT>, <BR>
<TT>CLOSED_OPTION</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>YES_NO_CANCEL_OPTION</TD><TD WIDTH=192><TT>Yes, No, Cancel
</TD><TD WIDTH=192><TT>YES_OPTION, <BR>
NO_OPTION, <BR>
CANCEL_OPTION, <BR>
CLOSED_OPTION
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>OK_CANCEL_OPTION</TD><TD WIDTH=192><TT>OK and Cancel
</TD><TD WIDTH=192><TT>OK_OPTION, <BR>
CANCEL_OPTION, <BR>
CLOSED_OPTION
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>DEFAULT_OPTION</TT></TD><TD WIDTH=192><TT>OK
</TD><TD WIDTH=192><TT>OK_OPTION</TT>, <BR>
<TT>CLOSED_OPTION</TT>
</TD></TR>
</TABLE></CENTER>
</CENTER>
<P>
<P>
An example of a dialog box constructed with the <TT>OK_CANCEL_OPTION</TT>
is presented next. This code can be placed into the last <TT>JOptionTest</TT>
application. The resulting dialog box is shown in Figure 18.7.
In this example, an array of strings is given as the message parameter.
This creates a multiline dialog box. Notice that the second <TT>String</TT>
is a single character. This creates the blank line in the dialog
box. If an empty string is given, the dialog box does not show
the blank line.
<P>
<A HREF="javascript:popUp('f18-7.gif')"><B>Figure 18.7 :</B> <I>OK/Cancel dialog box</I>.</A>
<BLOCKQUOTE>
<PRE>
String[] message = new String[3];
message[0] = &quot;Selected objects will be deleted&quot;;
// Single space to cause blank line in dialog box.
message[1] = &quot; &quot;;                    
message[2] = &quot;Do you want to continue?&quot;;
int result = JOptionPane.showConfirmDialog( null,
                                          message,
                                          &quot;Confirmation Required&quot;,
JOptionPane.OK_CANCEL_OPTION );
</PRE>
</BLOCKQUOTE>
<P>
As with all the standard <TT>JOptionPane</TT> dialog boxes, the
<TT>showConfirmDialog</TT> method has a variant that allows the
icon to be specified with the message type parameter, or explicitly
by passing an <TT>Icon</TT> parameter. When the following code
is inserted into the <TT>JOptionTest</TT> application, the dialog
box shown in Figure 18.8 is displayed. The <TT>ERROR_MESSAGE</TT>
parameter is passed to the <TT>showConfirmDialog</TT> method,
telling the <TT>JOptionPane</TT> to use the error <TT>Icon</TT>
defined for the look-and-feel currently in use.
<P>
<A HREF="javascript:popUp('f18-8.gif')"><B>Figure 18.8 :</B> <I>Error confirmation dialog box</I>.</A>
<BLOCKQUOTE>
<PRE>
String[] message = new String[3];
message[0] = &quot;Connection timed out&quot;;
message[1] = &quot; &quot;;
message[2] = &quot;Do you wish to continue?&quot;;
int result = JOptionPane.showConfirmDialog( null,
                                            message,
                                            &quot;Line Time Out&quot;,
                                            JOptionPane.YES_NO_OPTION,
                                            JOptionPane.ERROR_MESSAGE );
</PRE>
</BLOCKQUOTE>
<H3><A NAME="InputDialogBoxes">
Input Dialog Boxes</A></H3>
<P>
There are many situations when a program needs to get input from
the user. The <TT>JOptionPane</TT> class provides the <TT>showInputDialog</TT>
to query the user for simple one-line input requirements. A simple
input dialog box can be displayed with the following single line
of code. The input dialog box displayed is shown in Figure 18.9.
In this example, the dialog box is displayed with the default
title, icon, and buttons. The default icon is the icon used with
the <TT>QUESTION_MESSAGE</TT> message type.
<P>
<A HREF="javascript:popUp('f18-9.gif')"><B>Figure 18.9 :</B> <I>Simple input dialog box</I>.</A>
<BLOCKQUOTE>
<PRE>
String reply = JOptionPane.showInputDialog( null, &quot;Enter your name:&quot; );
</PRE>
</BLOCKQUOTE>
<P>
Similar to the <TT>showConfirmDialog</TT> method, the <TT>showInputDialog</TT>
method blocks the calling thread until the user dismisses the
dialog box. The <TT>showInputDialog</TT> method returns a <TT>String</TT>
containing the text entered by the user. If the Cancel button
is clicked or the window is closed, a <TT>null</TT> <TT>sString</TT>
is returned. If the user clicks the &quot;OK&quot; button without
entering anything in the text area of the dialog box, an empty
<TT>String</TT> is returned. This allows the calling code to distinguish
between the various actions the user may have performed.
<P>
One of the overloaded versions of the <TT>showInputDialog</TT>
method takes a title <TT>String</TT>, and message type parameter.
A typical example of a warning input dialog box can be displayed
with the line of code presented in the main method of the following
version of the <TT>JOptionTest</TT> application. After the dialog
box is dismissed, the application echoes the user's input to the
console. The resulting dialog box is shown in Figure 18.10.
<P>
<A HREF="javascript:popUp('f18-10.gif')"><B>Figure 18.10:</B> <I>Warning input dialog box</I>.</A>
<BLOCKQUOTE>
<PRE>
package com.foley.test;

import javax.swing.*;

/**
 * An application that displays a JOptionPane dialog box.
 *
 * @author Mike Foley
 **/
public class JOptionTest extends Object { 

    
    /**
     * Application entry point.
     * Display a dialog box from the JOptionPane class.
     *
     * @param args Command line parameter. Not used.
     **/
    public static void main( String args[] ) { 

        String reply = JOptionPane.showInputDialog( null,
                                &quot;Enter log name:&quot;,
                                &quot;Database Troubles&quot;,
                                JOptionPane.WARNING_MESSAGE );
        System.out.println( &quot;User entered: &quot; + reply );

        System.exit(0);

    }  // main

}  // JOptionTest
</PRE>
</BLOCKQUOTE>
<H3><A NAME="Selection">
Selection</A></H3>
<P>
Perhaps the most interesting variant of the <TT>showInputDialog</TT>
methods takes an array of <TT>Object</TT> instances and an <TT>Object</TT>
reference as its last two parameters. The array parameter defines
a list of choices to be presented to the user. The single <TT>Object</TT>
parameter should be one of the items in the array. This will be
the initially selected item in the choice. The presentation of
the choice to the user is not defined in the JFC specification.
It is left for the look-and-feel implementation. However, each
of the look-and-feel implementations contained in the JFC use
a <TT>JComboBox</TT> for presentation.
<P>
An example of using an array of <TT>Object</TT> instances in an
input dialog box is presented next. An array of <TT>String</TT>
instances is created and initialized. In the call to <TT>showInputDialog</TT>,
the array is passed as the selection values, and the third item
in the array is specified as the initially selected item, the
string <TT>&quot;Green&quot;</TT> in this example. After the user
dismisses the dialog box, the test application echoes the user's
choice to the console. The dialog box is shown in Figure 18.11.
The dialog box created in this example does not contain an icon.
This is because the <TT>PLAIN_MESSAGE</TT> type was specified
for the dialog box.
<P>
<A HREF="javascript:popUp('f18-11.gif')"><B>Figure 18.11:</B> <I>Selection input dialog box</I>.</A>
<BLOCKQUOTE>
<PRE>
package com.foley.test;

import javax.swing.*;

/**
 * An application that displays a JOptionPane dialog box.
 *
 * @author Mike Foley
 **/
public class JOptionTest extends Object { 

    
    /**
     * Application entry point.
     * Display a dialog box from the JOptionPane class.
     *
     * @param args Command line parameter. Not used.
     **/
    public static void main( String args[] ) { 

        String[] colors = {  &quot;Red&quot;, &quot;Yellow&quot;, &quot;Green&quot;, &quot;Black&quot; } ;
        Object selected = JOptionPane.showInputDialog( null,
                                &quot;Enter log name:&quot;,
                                &quot;Database Troubles&quot;,
                                JOptionPane.PLAIN_MESSAGE,
                                null,
                                colors,
                                colors[2] );
        System.out.println( &quot;User selected: &quot; + selected );
        
        System.exit(0);

    }  // main

}  // JOptionTest
</PRE>
</BLOCKQUOTE>
<P>
Notice how the return value is an <TT>Object</TT>. The returned
<TT>Object</TT> is the selected item if the user clicks the &quot;OK&quot;
button. If &quot;Cancel&quot; is chosen, or the window is closed,
<TT>null</TT> is returned from the <TT>showInputDialog</TT> method.
<P>
Both the array of selection items and the initially selected items
are <TT>Objects</TT>. This allows any type of <TT>Object</TT>
to be selected in the dialog box. For most types of <TT>Objects</TT>,
the <TT>toString</TT> method is called to determine what is placed
in the choice for the user. However, if the array contains icons,
the icon itself is placed in the choice presented to the user.
<H3><A NAME="ProvidingCustomOptions">
Providing Custom Options</A></H3>
<P>
If the button combinations provided by the predefined option choice
constants don't meet the needs of a dialog box, the <TT>showOptionDialog</TT>
method is provided to customize the option buttons contained in
the dialog box. This variant of the show dialog method takes an
array of <TT>Object</TT> instances that are used as the options
presented to the user. It also takes an <TT>Object</TT> parameter
that is one of the items in the array. This <TT>Object</TT> is
the default option for the dialog box. If the items in the array
are <TT>Components</TT>, they are used directly. An <TT>Icon</TT>
option is placed on a <TT>JButton</TT> instance and added to the
dialog box. Other types of <TT>Objects</TT> have their <TT>toString</TT>
method called to determine the <TT>String</TT> that is used for
the text on a <TT>JButton</TT>. The instance of the <TT>JButton</TT>
is then added to the dialog box.
<P>
An example of the <TT>showOptionDialog</TT> method is to create
an Abort, Retry, Cancel dialog box. An array of <TT>Strings</TT>
can be used for the options and passed to the <TT>showOptionDialog</TT>
method. The following code creates this dialog box. The dialog
box created in this example is shown in Figure 18.12.
<P>
<A HREF="javascript:popUp('f18-12.gif')"><B>Figure 18.12:</B> <I>Abort, Retry, Cancel dialog</I>.</A>
<BLOCKQUOTE>
<PRE>
package com.foley.test;

import javax.swing.*;

/**
 * An application that displays a JOptionPane dialog box.
 *
 * @author Mike Foley
 **/
public class JOptionTest extends Object { 

    
    /**
     * Application entry point.
     * Display a dialog box from the JOptionPane class.
     *
     * @param args Command line parameter. Not used.
     **/
    public static void main( String args[] ) { 

        String[] options = {  &quot;Abort&quot;, &quot;Retry&quot;, &quot;Cancel&quot; } ;
        int choosen = JOptionPane.showOptionDialog( null,
                                &quot;The device is not ready&quot;,
                                &quot;Device Error&quot;,
                                JOptionPane.YES_NO_OPTION,
                                JOptionPane.ERROR_MESSAGE,
                                null,
                                options,
                                options[2] );
        //
        // Returned value depends on position of items in option
        // array parameter.  Changing this array forces this switch
        // statement to be changed as well.
        //
        switch( choosen ) { 
            
            case 0:
            // Abort selected
            System.out.println( &quot;Abort choosen&quot; );
            break;
                        
            case 1:
            // Retry selected
            System.out.println( &quot;Retry choosen&quot; );
            break;
                        
            case 2:
            // Cancel selected
            System.out.println( &quot;Cancel choosen&quot; );
            break;
                        
            case JOptionPane.CLOSED_OPTION:
            // User closed the box.  Nothing selected.
            System.out.println( &quot;Dialog Closed&quot; );
            break;
                        
        }  // switch( reply )

        System.exit(0);
    }  // main

}  // JOptionTest
</PRE>
</BLOCKQUOTE>
<P>
The integer returned from the dialog box can be used to determine
which option the user chose. The returned value is the offset
of the selected option in the option array parameter, or the <TT>CLOSED_OPTION</TT>
if the user closed the dialog box without making a selection.
<P>
Care must be taken when testing the return value from the <TT>showOptionDialog</TT>
method. Due to the fact that the returned value is the <TT>0</TT>-based
position of the selected object in the array of options, changing
the order of the options in the array forces the code that tests
the returned value to be changed. This is suspect in the design
of the <TT>showOptionDialog</TT> method. Any code using this method
should contain comments reflecting these details.
<H2><A NAME="RollingYourOwn">
Rolling Your Own</A></H2>
<P>
The various versions of the static <TT>show <I>XXX</I> Dialog</TT>
methods are adequate for a wide variety of dialog boxes. However,
they don't solve every situation. For situations where there is
not an appropriate canned dialog box, an instance of the <TT>JOptionPane</TT>
class can be created and used as desired. The <TT>JOptionPane</TT>
class contains a multitude of public constructors for this purpose.
Most of these map to one or more of the static <TT>show <I>XXX</I> Dialog</TT>
methods. In these cases, the <TT>show <I>XXX</I> Dialog</TT>
should be used.
<P>
If your application contains <TT>Actions</TT> to perform control
operations, it may be desirable to have an action-aware <TT>JOptionPane</TT>.
This dialog box would act similar to the action-aware <TT>JMenu</TT>
and <TT>JToolBar</TT> classes presented in <A HREF="..\ch09\ch09.htm" >Chapter 9</A> &quot;Menus
and Toolbars.&quot; This functionality can be accomplished by
creating the <TT>JOptionPane</TT> with the proper controls.
<P>
The following demonstrates how to make an action-aware <TT>JOptionPane</TT>
dialog box.
<BLOCKQUOTE>
<PRE>
JButton[] options = new JButton[2];
options[0] = new JButton( &quot;Exit&quot; );
options[0].addActionListener( new ExitAction() );
options[1] = new JButton( &quot;Cancel&quot; );
options[1].addActionListener( new NoOpAction() );

JOptionPane pane = new JOptionPane( &quot;Exit Application&quot;,
JOptionPane.QUESTION_MESSAGE,
JOptionPane.DEFAULT_OPTION,                                    null,
                                    options,
                                    options[1] );
for( int i = 0; i &lt; options.length; i++ )
    options[i].addActionListener( new OptionPaneActionListener( pane ) );
JDialog dialog = pane.createDialog( parent,
                                    &quot;Exit Confirmation&quot; );
dialog.setVisible( true );


class OptionPaneActionListener extends Object 
    implements ActionListener { 
 
    /**
     * The JOptionPane which the action source
     * we are listening on lives.
     **/
    JOptionPane optionPane;
    
    
    public OptionPaneActionListener( JOptionPane optionPane ) { 
        this.optionPane = optionPane;
    }  // OptionPaneActionListener
    
    public void actionPerformed( ActionEvent event ) { 
        optionPane.setValue( event.getSource() );
    }  // actionPerformed
    
}  // OptionPaneButton
</PRE>
</BLOCKQUOTE>
<P>
In this example, and array of buttons is created, one button for
each <TT>action</TT> in the dialog box. The <TT>Action</TT> is
added as an <TT>ActionListener</TT> for the button. This will
cause the <TT>Action</TT> to be executed when the button is pressed.
The array of buttons is passed as the options to the <TT>JOptionPane</TT>
constructor. When a <TT>Component</TT> is used as an option to
a <TT>JOptionPane</TT>, it is the responsibility of the <TT>Component</TT>
to call the <TT>setValue</TT> method of the <TT>JOptionPane</TT>
instance when activated. The <TT>value</TT> property is set to
the <TT>Component</TT> itself. This allows the caller to determine
which option the user chose. The value is a bound property, allowing
listeners to receive notifications when the <TT>value</TT> property
changes. To perform this function, another <TT>ActionListener</TT>
is added to each button. This <TT>ActionListener</TT> is a class
dedicated to calling the <TT>setValue</TT> method of the <TT>JOptionPane</TT>
it is given at construction time. The call is made when the listener
receives an <TT>actionPerformed</TT> message. The value is set
to the source of the <TT>ActionEvent</TT>.
<P>
After the <TT>ActionListeners</TT> are added, the <TT>createDialog</TT>
method of the <TT>JOptionPane</TT> class is called. This method
creates a <TT>JDialog</TT> instance with the given title. The
<TT>JOptionPane</TT> is added as the center component to the content
pane of the dialog box. The <TT>createDialog</TT> method also
adds an internal <TT>WindowListener</TT> to the <TT>JDialog</TT>
instance. The <TT>WindowListener</TT> catches <TT>WindowClosing</TT>
events, and sets the <TT>value</TT> property of the <TT>JOptionPane</TT>
to <TT>null</TT> when such an event is received. This allows clients
to know when the dialog box was closed without the user choosing
an option. The <TT>createDialog</TT> method also adds a property
change listener to the <TT>JOptionPane</TT>. When the <TT>INPUT_VALUE_PROPERTY</TT>
or <TT>VALUE_PROPERTY</TT> change, the window is closed and disposed
of. This is how a custom <TT>Component</TT> calling the <TT>setValue</TT>
method closes the dialog box. The custom <TT>Component</TT> does
not have to close the dialog box itself.
<P>
This example demonstrates the responsibilities of <TT>Component</TT>s
added to a <TT>JOptionPane</TT>. However, it is clumsy to use.
Instead of manually creating the buttons and adding the required
listeners, it would be more desirable to pass the <TT>JOptionPane</TT>
an array of <TT>Action</TT> instances, and have <TT>JOptionPane</TT>
do the work. This is not possible with the current implementation
of the <TT>JOptionPane</TT> class. However, it is a simple matter
to extend the <TT>JOptionPane</TT> class to provide the desired
functionality. The <TT>ActionOptionPane</TT> is such a class (see
Listing 18.1). It contains a constructor matching the full function
<TT>JOptionPane</TT> constructor and overrides the <TT>setOptions</TT>
method. In the constructor, the arguments are passed to the <TT>JOptionPane</TT>
constructor, with the exception of the <TT>options</TT> and <TT>initialValue</TT>
parameters. These are passed as <TT>null</TT>. This will cause
an instance of the <TT>JOptionPane</TT> class to be created and
configured with the proper message, message type, option type,
and icon. As before, an <TT>ActionListener</TT> is created to
call the <TT>setValue</TT> method when an option is selected.
Next, the <TT>setOptions</TT> method is called with the original
options array. Finally, the initial value is set to the given
<TT>Object</TT>.
<P>
The overridden <TT>setOptions</TT> method creates a new array
of options that it will pass to the <TT>setOptions</TT> method
contained in the <TT>JOptionPane</TT> class. Each instance in
the given array is checked to see if it is an <TT>Action</TT>
instance. When an <TT>Action</TT> is detected, a <TT>JButton</TT>
is created with the name of the <TT>Action</TT>. The <TT>Action</TT>
is added as an <TT>ActionListener</TT> to the new button to execute
the <TT>Action</TT> when the button is clicked. The <TT>ActionListener</TT>
created in the constructor is also added to each button. This
will call the <TT>setValue</TT> method of the dialog box when
the button is pressed. The <TT>JButton</TT> replaces the <TT>Action</TT>
in the options array that will be passed to the parent's <TT>setOptions</TT>
method. If the <TT>Object</TT> in the options array is not an
<TT>Action</TT>, it is not altered. When the processed array is
passed to the <TT>setOptions</TT> method in <TT>JOptionPane</TT>,
buttons will be added wherever <TT>Action</TT> instances were
in the original options array.
<P>
<HR>
<P>
<B>Listing 18.1&nbsp;&nbsp;</B><TT><B>ACTIONOPTIONPANE</B></TT><B>
Class<BR>
</B>
<BLOCKQUOTE>
<PRE>
package com.foley.dialogs;

import java.awt.event.*;

import javax.swing.*;


/**
 * An Action aware JOptionPane extension.
 *
 * @author Mike Foley
 **/
public class ActionOptionPane extends JOptionPane { 
 
    private final ActionListener setValueActionListener;
    
    /**
     * ActionOptionPane, constructor.
     *
     * Let the parent JOptionPane create and configure
     * the dialog. Set the options to the configured dialog
     * box using our version of the setOptions method.
     *
     * @param message The message for the dialog box.
     * @param messageType The type of the message.
     * @param optionType The type for the options.
     * @param icon The icon to use in the dialog box.
     * @param options The options to use for the dialog box.
* @param initialValue The initally selected option. 
     *                     Must be one of the options above.
     * @see JOptionPane
     **/
    public ActionOptionPane( Object message,
                    int messageType,
                    int optionType,
                    Icon icon,
                    Object options[],
                    Object initialValue) { 
                    
        super( message, messageType, optionType, icon, null, null );

        setValueActionListener = new ActionListener() { 
            public void actionPerformed( ActionEvent event ) { 
                setValue( event.getSource() );
            }  // actionPerformed
        } ;
        
        setOptions( options );
        setInitialValue( initialValue );
    } 

    /**
     * setOptions, overrided from JOptionPane
     *
     * Scan the list of options, and for each Action create
     * a JButton and add the Action as an ActionListener.
     * Then let the super class, JOptionPane, process the
     * new list of options.
     *
* @param options The options, that become buttons,
                      for the dialog box.
     **/
    public void setOptions( Object[] options) { 
        Object[] ourOptions = new Object[ options.length ];
        for( int i = 0; i &lt; options.length; i++ ) { 
            if( options[ i ] instanceof Action ) { 
                Action action = ( Action )options[ i ];
                JButton button = new JButton( 
                              ( String )action.getValue( Action.NAME ) );
                button.addActionListener( setValueActionListener );
                button.addActionListener( action );
                ourOptions[ i ] = button;
            }  else { 
                ourOptions[ i ] = options[ i ];
            } 
        } 
        super.setOptions( ourOptions );
    } 
    
}  // ActionOptionPane
</PRE>
</BLOCKQUOTE>
<HR>
<P>
A simple usage of the <TT>ActionOptionPane</TT> dialog class is
shown in Listing 18.2. In this example, an exit confirmation dialog
box is created and tied to the exit menu item. When the Exit menu
item is selected, the resulting dialog box is shown in Figure
18.13. Notice that the returned value of the <TT>ActionOptionPane</TT>
dialog box does not have to be checked. This is because the <TT>Action</TT>
performs the function when the button is clicked. However, if
the button that was clicked is required, it can be queried with
the <TT>getValue</TT> method on the created <TT>ActionOptionPane</TT>.
<P>
<A HREF="javascript:popUp('f18-13.gif')"><B>Figure 18.13:</B> <I>Action-aware dialog box</I>.</A>
<P>
If your application is designed with a rich collection of actions,
this is a very convenient method to manage dialog boxes. It also
provides an easy visual presentation that allows users to invoke
operations.
<P>
<HR>
<P>
<B>Listing 18.2&nbsp;&nbsp;Exit Dialog Box Using </B><TT><B>ACTIONOPTIONPANE
<BR>
</B></TT>
<BLOCKQUOTE>
<PRE>
package com.foley.test;

import java.awt.*;
import java.awt.event.*;
import java.util.*;

import javax.swing.*;

import com.foley.dialogs.*;
import com.foley.utility.*;


/**
 * An application that tests the ActionOptionPane dialog.
 *
 * @author Mike Foley
 **/
public class ActionOptionTest extends JFrame { 

    public static ActionOptionTest frame;


    /**
     * ActionOptionTest, null constructor.
     **/
    public ActionOptionTest() { 
        this( null );
    }  // ActionOptionTest


    /**
     * ActionOptionTest, constructor.
     *
     * @param title The title for the frame.
     **/
    public ActionOptionTest( String title ) { 
        super( title );
    }  // ActionOptionTest


    /**
     * frameInit, from JFrame
     *
     * Create the contrent for this frame.
     **/
    protected void frameInit() { 
        
        //
        // Let our super create the content and associated panes.
        //
        super.frameInit();
                
        JMenuBar menubar = createMenu();
        setJMenuBar( menubar );

    }  // frameInit


    /**
     * Create the menu for the frame.
     *
     * @return The menu for the frame.
     **/
    protected JMenuBar createMenu() { 
        
        //
        // Load the images used.
        //
        Icon exitIcon = new ImageIcon( &quot;exit.gif&quot; );

        JMenuBar menubar = new JMenuBar();
        
        JMenu file = new JMenu( &quot;File&quot; );        
        
        JMenuItem item = new JMenuItem( &quot;Exit&quot;, exitIcon );
        item.setHorizontalTextPosition( SwingConstants.RIGHT );
        item.setMnemonic( KeyEvent.VK_X );
        item.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_X, Event.CTRL_MASK ) );
        item.addActionListener( new ActionListener() { 
            public void actionPerformed( ActionEvent e ) { 
                showExitConfirmation( ( Component )e.getSource() );
            } 
        }  );
        file.add( item );

        menubar.add( file );
        
        return( menubar );

    }  // createMenu

    /**
     * Display the Action aware exit confirmation dialog.
     *
     * @param parent The parent for the dialog. May be null.
     **/
    private void showExitConfirmation( Component parent ) { 
    
        Action[] actions = new Action[2];
        actions[0] = new ExitAction( &quot;OK&quot; );
        actions[1] = new NoOpAction(&quot;Cancel&quot; );
        JOptionPane pane = new ActionOptionPane( &quot;Exit Application&quot;,
JOptionPane.QUESTION_MESSAGE,
JOptionPane.DEFAULT_OPTION,
                                    null, actions,
                                    actions[1] );

JDialog dialog = pane.createDialog( parent, 
                                            &quot;Exit Confirmation&quot; );
        dialog.setVisible( true ); 

        //
// The action has been executed.  
        // If the button which was pressed is needed,
        // it can be queried with the getValue method.
        //
        Object selected = pane.getValue();
    
    } 
    
    
    /**
     * Application entry point.
     * Create the frame, and display it.
     *
     * @param args Command line parameter. Not used.
     **/
    public static void main( String args[] ) { 

        JFrame frame = new ActionOptionTest( &quot;ActionOptionPane Test&quot; );
        frame.pack();
        frame.setVisible( true );
        
    }  // main

}  // ActionOptionTest



package com.foley.utility;

import java.awt.event.*;

import javax.swing.*;
 

/**
 * Class NoOpAction
 * &lt;p&gt;
 * An action which does nothing.  This is sometimes
 * needed for Action aware components.
 * &lt;p&gt;
 * @author Mike Foley
 * @version 1.2
 **/
public class NoOpAction extends AbstractAction { 

    /**
     * The default name used in a menu.
     **/
    private static final String DEFAULT_NAME = &quot;NoOp&quot;;
    
    
    /**
     * NoOpAction, default constructor.
     * &lt;p&gt;
     * Create the action with the default name.
     **/
 public NoOpAction() { 
        this( DEFAULT_NAME, null );
    }  // NoOpAction
    
    /**
     * NoOpAction, constructor.
     * &lt;p&gt;
     * Create the action with the given name.
     * &lt;p&gt;
     * @param name The name for the Action.
     **/
 public NoOpAction( String name ) { 
        this( name, null );
    }  // NoOpAction
    

    /**
     * putValue.
     *
     * The AbstractAction class putValue method may not
     * be passed a null newValue parameter. Filter those
     * call here.
     * @TODO Remove calls to putValue with a null newValue.
     *
     * @param key The key for the value.
     * @param newValue The value for the associated key.
     **/
    public void putValue(String key, Object newValue) { 
        if( key != null &amp;&amp; newValue != null )
            super.putValue( key, newValue );
    } 
    
    /**
     * actionPerformed, from ActionListener
     * &lt;p&gt;
     * Do nothing.
     * &lt;p&gt;
     * @param event The event causing the action to fire.
     **/
    public void actionPerformed( ActionEvent event ) { 
    }  // actionPerformed

}  // NoOpAction
</PRE>
</BLOCKQUOTE>
<HR>
<H2><A NAME="InternalFrameVersions">
Internal Frame Versions</A></H2>
<P>
Each of the methods presented thus far for displaying a dialog
box by using the <TT>JOptionPane</TT> class creates a dialog box
in its own frame. This allows the dialog box to be moved independently
from its parent frame. There are also versions of each of these
methods that create an internal frame version of the dialog box.
A complete guide to internal frames is given in <A HREF="..\ch17\ch17.htm" >Chapter 17</A>, &quot;Internal
Frames.&quot;
<P>
Table 18.5 shows the list of methods that create frames and the
corresponding internal frame version of the methods.<BR>
<P>
<CENTER><B>Table 18.5&nbsp;&nbsp;Internal Frame Method Names</B></CENTER><CENTER>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1>
<TR VALIGN=TOP><TD WIDTH=200><CENTER><B>Frame Version</B></CENTER></TD><TD WIDTH=200><CENTER><B>Internal Frame Version</B></CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=200><TT>CreateDialog</TT></TD><TD WIDTH=200><TT>CreateInternalFrame</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=200><TT>ShowConfirmDialog</TT></TD><TD WIDTH=200><TT>ShowInternalConfirmDialog</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=200><TT>ShowInputDialog</TT></TD><TD WIDTH=200><TT>ShowInternalInputDialog</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=200><TT>ShowMessageDialog</TT></TD><TD WIDTH=200><TT>ShowInternalMessageDialog</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=200><TT>showOptionDialog</TT></TD><TD WIDTH=200><TT>ShowInternalOptionDialog</TT>
</TD></TR>
</TABLE></CENTER>
</CENTER>
<P>
<P>
Just as the <TT>show <I>XXX</I> Dialog</TT>
methods contain many overloaded variants of each method, there
are many overloaded variants of the <TT>showInternal <I>XXX</I> Dialog</TT>
methods. The functionality of these methods is the same for the
external and internal frame versions. The primary difference is
in the presentation of the dialog box. The internal versions of
the dialog box cannot extend beyond the frame of their parent
component. At the present time, the internally framed dialog boxes
cannot be resized. However, there is no apparent reason for this
restriction, and it may be lifted in a future version of the internal
frame dialog boxes. The internal frame dialog boxes are the entire
width of their parent component. This appears to be a bug in these
dialog boxes. Unlike the non-internal dialog boxes in the <TT>JOptionPane</TT>
class, the <TT>showInternal <I>XXX</I> Dialog</TT>
methods must be passed a non-<TT>null</TT> parent. This parameter
defines the frame where the dialog box will be displayed. 
<P>
The <TT>JInternalOptionTest</TT> application shown in Listing
18.3 creates buttons in its content pane. Each button opens a
different variant of the internal message dialog box by using
the <TT>JOptionPane</TT> class. The application after being resized
larger than its packed size is shown in Figure 18.14. Figure 18.15
shows the application after the Warning Dialog Box button was
pressed. The internal dialog box is shown below the buttons in
the application. Notice how displaying the internal dialog box
also repositioned the buttons. The same undesirable behavior is
exhibited when using the Windows look-and-feel. This is shown
in Figure 18.16.
<P>
<A HREF="javascript:popUp('f18-14.gif')"><B>Figure 18.14:</B> <I>JInternalOption Test application before
displaying internal dialog box</I>.</A>
<P>
<A HREF="javascript:popUp('f18-15.gif')"><B>Figure 18.15:</B> <I>JInternalOption Test after displaying
internal warning dialog box</I>.</A>
<P>
<A HREF="javascript:popUp('f18-16.gif')"><B>Figure 18.16:</B> <I>JInternalOption Test after displaying
internal error dialog box using the Windows look-and-feel</I>.</A>
<P>
The initial implementation of the internal frame dialog boxes
contained in the JOptionPane class is of inferior quality to the
external frame versions of equivalent dialog boxes. The current
implementation throws many exceptions in the user interface classes.
The current state of these dialog boxes is unusable in a commercial
quality application.
<P>
<HR>
<P>
<B>Listing 18.3&nbsp;&nbsp;</B><TT><B>JINTERNALOPTIONTEST</B></TT><B>
Application <BR>

</B>
<BLOCKQUOTE>
<PRE>
package com.foley.test;

import java.awt.*;
import java.awt.event.*;

import javax.swing.*;
import com.foley.utility.ApplicationFrame;
import com.foley.utility.JBox;


/**
 * An application that displays an internal
 * JOptionPane dialog box.
 *
 * @author Mike Foley
 **/
public class JInternalOptionTest extends Object { 

    private JFrame frame;

    /**
     * JInternalOptionTest, default Constructor.
     * &lt;p&gt;
     * Create a frame. Add some buttons that display
     * an internal JOptionPane when activated.
     **/
    public JInternalOptionTest() { 
        frame = new ApplicationFrame( &quot;Internal Dialog Test&quot; );

        JComponent content = createContent();
        content.setBorder( BorderFactory.createLoweredBevelBorder() );
        frame.getContentPane().add( content );

        frame.pack();
        frame.setVisible( true );
    } 

    protected JComponent createContent() { 
        JBox box = JBox.createVerticalJBox();
        
        JButton errorMessageButton = new JButton( &quot;Error Dialog Box&quot; );
        errorMessageButton.addActionListener( new ActionListener() { 
            public void actionPerformed( ActionEvent event ) { 
                JOptionPane.showInternalMessageDialog( ( Component )event.getSource(), 
                                &quot;Message&quot;,
                                &quot;Error Message Dialog&quot;, 
                                JOptionPane.ERROR_MESSAGE );
            }  // actionPerformed
        }  );
        box.add( errorMessageButton );
        
        JButton informationMessageButton = new JButton(
  &quot;Information Dialog Box&quot; );
        informationMessageButton.
   addActionListener( new ActionListener() { 
            public void actionPerformed( ActionEvent event ) { 
Object[] message = {  &quot;TEST&quot;, &quot;If you have a lot of information&quot;,
                                     &quot;to display to the user, you may&quot;,
                                     &quot;give an array of objects to the&quot;,
                                     &quot;message box.&quot;,
                                     &quot; &quot;,
&quot;The dialog box will display each object&quot;,
                                     &quot;on its own line, and size&quot; 
                                     &quot;the dialog&quot;, properly to fit&quot;
                                     &quot;each object&quot; } ;
                JOptionPane.showInternalMessageDialog( ( Component )event.getSource(), 
                                message,
                                &quot;Information Message Dialog&quot;, 
                                JOptionPane.INFORMATION_MESSAGE );
            }  // actionPerformed
        }  );
        box.add( informationMessageButton );

JButton warningMessageButton = new JButton( &quot;Warning Dialog Box&quot; );
        warningMessageButton.addActionListener( new ActionListener() { 
            public void actionPerformed( ActionEvent event ) { 
                JOptionPane.showInternalMessageDialog( ( Component )event.getSource(), 
                                &quot;Something is bad&quot;,
                                &quot;Warning Message Dialog&quot;, 
                                JOptionPane.WARNING_MESSAGE );
            }  // actionPerformed
        }  );
        box.add( warningMessageButton );

JButton questionMessageButton = new JButton( &quot;Question Dialog Box&quot; );
        questionMessageButton.addActionListener( new ActionListener() { 
            public void actionPerformed( ActionEvent event ) { 
                Object[] nodes = {  &quot;Node1&quot;, &quot;Node2&quot;, &quot;Node3&quot; } ;
                JOptionPane.showInternalMessageDialog( ( Component )event.getSource(), 
                                new JTree( nodes ),
                                &quot;Question Message Dialog&quot;, 
                                JOptionPane.QUESTION_MESSAGE );
            } 
        }  );
        box.add( questionMessageButton );
                
        return( box );
    } 
    
    
    
    /**
     * Application entry point.
     * Create an instance of the test application.
     *
     * @param args Command line parameter. Not used.
     **/
    public static void main( String args[] ) { 

        //
        // Enable this code for the windows L&amp;F.
        // Only valid on the MS Windows platform.
        //
        /*
        try { 
            UIManager.setLookAndFeel(
&quot;com.sun.java.swing.plaf.windows.WindowsLookAndFeel&quot; );
        }  catch( Exception ex ) { 
System.err.println( &quot;Exception: &quot; + ex.getLocalizedMessage() );
        } 
        */
        new JInternalOptionTest();
    }  // main

}  // JInternalOptionTest
</PRE>
</BLOCKQUOTE>
<HR>
<H2><A NAME="Summary">
Summary</A></H2>
<P>
The <TT>JOptionPane</TT> class provides a rich set of predefined
dialog boxes. The static <TT>show <I>XXX</I> Dialog</TT>
methods provide one-line methods for displaying many common dialog
boxes. To further simplify application code, the dialog boxes
block, enabling the calling code to process the user's response
in the code immediately following the <TT>show <I>XXX</I> Dialog</TT>
method used to display the dialog box.
<P>
In this chapter you have seen how to display message dialog boxes.
The message type parameter allows the dialog to convey different
levels of severity in the message. You also saw how to query the
user for one-line of textual input. The <TT>JOptionPane</TT> class
can be configured to present a set of choices to the user. The
dialog box blocks until an option is selected or the user closes
the dialog box. You also saw how to extend the <TT>JOptionPane</TT>
class to create an action-aware dialog box.
<P>
There are internal versions of each of the pre-defined dialog
boxes contained in the <TT>JOptionPane</TT> class. These dialog
boxes are contained in its parent frame and do not extend beyond
it. Unfortunately, the internal versions of these dialog boxes
are of inferior quality and not usable at this time.
<P>
The predefined dialog boxes will suffice for many simple, and
not so simple, dialog boxes. However, if one of the predefined
dialog boxes doesn't meet your needs, the <TT>JOptionPane</TT>
class also provides for almost unlimited customization.
<P>
<CENTER>
<HR SIZE=4>

<A HREF="..\ch17\ch17.htm"><IMG SRC="..\button\previous.gif" BORDER="0"></A>
<A HREF="..\index.htm"><IMG SRC="..\button\contents.gif" BORDER="0"></A> 
<A HREF="..\ch19\ch19.htm"><IMG SRC="..\button\next.gif" BORDER="0"></A> 
</p>

<p>&#169; <A HREF="..\copy.htm">Copyright</A>, Macmillan Computer Publishing. All rights reserved.
</CENTER>
</BODY>
</HTML>
