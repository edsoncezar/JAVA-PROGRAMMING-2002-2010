<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<SCRIPT LANGUAGE="JavaScript">


<!--

function popUp(pPage) {
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '<link rel="stylesheet" href="/includes/stylesheets/ebooks.css"></head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 figDoc.write(zhtm);
 figDoc.close();
 popUpWin.focus();
 }

//-->


</SCRIPT>
<link rel="stylesheet" href="http://www.szptt.net.cn/includes/stylesheets/ebooks.css">

        <META NAME="GENERATOR" Content="Symantec Visual Page 1.0.1">
        <META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
        <TITLE>JFC  -- Introduction</TITLE>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<CENTER>
<H1><IMG SRC="..\button\sams.gif" BORDER="0"></H1>


<A HREF="..\index.htm"><IMG SRC="..\button\contents.gif" BORDER="0"></A> 
<A HREF="..\ch01\ch01.htm"><IMG SRC="..\button\next.gif" BORDER="0"></A> 

<br>
<FONT SIZE=+6><B>J F C</B><br><FONT SIZE=5><B><U>UNLEASHED</U></B></FONT></FONT></CENTER>
<HR SIZE=4>


<UL>
<LI><A HREF="#AbouttheAuthors">
About the Authors</A>
<LI><A HREF="#Acknowledgments">
Acknowledgments</A>
<LI><A HREF="#Introduction">
Introduction</A>
<li><A href="#WhoThisBookisWrittenFor">
Who This Book is Written For</a>

<LI><A HREF="#WhatThisBookCovers">
What This Book Covers</a>
<LI><A HREF="#TellUsWhatYouThink">
Tell Us What You Think!</a>
</UL>

<HR>


<H2><A NAME="AbouttheAuthors">
About the Authors</A></H2>
<P>
<B>Dr. Michael W. Foley </B>has been designing and developing
Java applications since the release of the first Java Developer's
Kit. He has also been using the JFC since the first beta releases
of the toolkit were released for review. He architected and led
the development of the JFC-based user interface for the System
Management Arts (SMARTS) InCharge server. Foley has collaborated
on other Java programming books and has written many technical
papers. Foley was previously president of his own consulting company.
He holds a Ph.D. in electrical engineering, and his research consisted
of object-oriented design and analysis of simulation applications
of electrical power distribution systems.
<P>
<B>Mark McCulley </B>works in the field of software engineering
both as a programmer and as a technical writer. In a previous
career, he designed CPUs and memory systems for microcomputers.
Always on the lookout for easier and better ways to do things,
he began learning Java in early 1997. Mark is especially interested
in music and multimedia software and created the first commercially
available MIDI sequencer for the Atari ST computer in 1986.

<H2><A NAME="Acknowledgments">
Acknowledgments</A></H2>


<P>
I would like to thank Christine Doerr and John Ellison for teaching
me all that I know about writing. You were great mentors and I
sure miss working with you. Thanks also to the staff at Macmillan
for giving me the opportunity to work on this project and for
turning the manuscript into a real book. And last but not least,
a heartfelt thanks to Jan, Tamara, Jenny, and Ian for bringing
joy and purpose to my life.


<H2><A NAME="Introduction">
Introduction</A></H2>
<P>
The Java Foundation Classes (JFC) provide a rich collection of
user interface classes. The most visible aspect of the JFC is
the Swing component toolkit. The Swing component toolkit is a
graphical user interface (GUI) toolkit consisting of lightweight
components. It contains replacement components for the AWT visual
components (such as menus, toolbars, dialog boxes, and so on)
that are used to build GUIs. It also contains complex components
such as trees and tables that do not have AWT equivalents.
<P>
The Swing components are JavaBean compliant. This allows the components
to be integrated easily in component design tools. It also allows
the Swing components to be integrated easily with other JavaBean-compliant
toolkits.
<P>
The Swing component toolkit is designed and built using the Model
View Controller (MVC) architecture. In this architecture, the
data to be displayed is contained in the model, the component
displaying the data in the model is the view, and the controller
mutates the data. The model sends messages to listeners, typically
views, when it changes. The views then update themselves to reflect
the current state of the model. The separation of the model from
the view allows multiple views to simultaneously display the same
data. The Swing visual components act as both the view and the
controller, simplifying the architecture.
<P>
The Swing visual components employ a pluggable look-and-feel.
Each visual component consists of two or more instances. One or
more classes define the API for the component, and another set
of classes acts as the user interface for the component. The collection
of user interface classes is known as a look-and-feel. The JFC
contains standard look-and-feel implementations for most popular
computer systems and a generic look-and-feel. This allows a program
designed and implemented by using Swing components to execute
without modification on any kind of computer and to always look
and feel just like a program written specifically for the particular
computer on which it is running. Conversely, it can also be implemented
to always look the same, regardless of what type of computer on
which it is running.
<P>
The fact that the Swing component toolkit is built on the MVC
and pluggable look-and-feel architecture makes the toolkit more
complex than traditional user interface toolkits. The visual components
contain convenience methods to hide this complexity for casual
usage. However, when using the toolkit for serious development,
the architecture must be understood. When it is understood, the
benefits far outweigh the extra effort required to learn and use
its capabilities.
<P>
As large and complex a body of work as the Swing component toolkit
is, it is only a portion of the JFC. The JFC also contains Java
2D, Drag and Drop (DND), and the Accessibility API. Java 2D is
a set of classes for advanced 2D graphics and imaging. DND provides
a technology that enables data transfer across Java and native
applications, across Java applications, and within a single Java
application. The Accessibility API is an interface that enables
the use of assistive technologies such as screen magnifiers and
audible text readers. These technologies are designed to help
people with disabilities interact and communicate more easily
and efficiently with JFC components. The Swing components are
the primary focus of this book; however, DND and the Accessibility
API are also discussed. Java 2D is not addressed in this book.

<H2><A NAME="WhoThisBookisWrittenFor">
Who This Book is Written For</a></H2>


<P>
This book is written for developers who are writing JFC-based
applications or applets. The book assumes the reader is familiar
with the Java language, particularly the AWT. After the first
part of the book, each chapter presents one or more component
or concept in its entirety. This allows these chapters to be read
out of order if desired. You can read the chapter presenting the
component you currently are working with and return to earlier
chapters when desired.

<H2><A NAME="WhatThisBookCovers">
What This Book Covers</a></H2>
<P>
This book consists of six sections. Each section contains multiple
chapters that describe related JFC concepts. Multiple example
applications are used to demonstrate the strengths and weaknesses
of the topic being presented. The JFC is a new toolkit. The vast
majority of the components are well designed and implemented.
However, there are still some rough edges. These are pointed out
so you know what to avoid when creating JFC applications. 
<P>
Part I, &quot;JFC Architecture,&quot; introduces the Swing component
toolkit. The MVC architecture and common design patterns used
throughout the toolkit are presented. The <TT>JComponent</TT>
class, which serves as the root of the visual components in the
Swing toolkit, is included.
<P>
In Part II, &quot;JFC Components,&quot; you will learn about the
basic Swing components. By the end of this section, you will be
able to create complete applications or applets containing menus
and toolbars. You will learn how to use the Swing components that
replace their AWT equivalents. You will be able to create graphical
user interfaces consisting of buttons, labels, lists, textual
components, and trees and tables. Each component is demonstrated
in multiple example applications, providing many hints to get
the most out of these components.
<P>
In Part III, &quot;Container Components,&quot; you will see the
container components that are part of the Swing component toolkit.
You will learn how to create complex user interfaces using tabbed
panes and split panes. You will see how any Swing component can
be placed in a scroll pane. You will also see how internal frames
can be used to create frames within frames. The internal frame
and its support classes provide a framework for building multidocument
user interfaces. Each container class is presented with working
applications that demonstrate a typical usage of the container.
The components from Part II of the book are often used in these
examples.
<P>
Part IV, &quot;Dialog Boxes,&quot; presents the dialog box support
contained in the JFC. The JFC contains a rich collection of preconfigured
dialog boxes. The <TT>JOptionPane</TT>
class allows you to present the user with a message, informational,
question, or arbitrary dialog box with a single line of code.
There are also more complex preconfigured dialog boxes. The file
chooser and color chooser dialog boxes allow a file or color to
be chosen. Once again, the implementation of these dialog boxes
can be achieved in one or two lines of application code. Numerous
examples for the use of each dialog box are presented.
<P>
As many preconfigured dialog boxes as the JFC contains, you will
often need to build custom dialog boxes. The support for arbitrary
dialog boxes contained in the JFC for modal and non-modal dialog
boxes is also presented in Part IV of this book.
<P>
In Part V, &quot;Extending JFC Components,&quot; you will learn
how to extend Swing components as well as create completely new
components. The pluggable architecture is dissected. The responsibilities
it imposes on a component to work within the architecture are
fully discussed and demonstrated. Various methods for customizing
Swing components are discussed. The properties contained in the
<TT>UIManager</TT> are presented.
Modifying these properties provides an easy technique for altering
the look for a class of component. How to replace the user interface
object of existing Swing components to change the look or the
feel of the component is also covered. Taking this method to its
extreme, a complete look-and-feel implementation is developed.
<P>
In this part of the book, you will also learn how to create a
new component that supports the pluggable look-and-feel and MVC
architectures. These techniques are demonstrated by the development
of a chart component that uses the same data model as the Swing
table component. The component is used in an application where
a single data model is shared between a table and a chart. When
data in the table is edited, the chart dynamically updates to
reflect the change.
<P>
Part VI, &quot;Advanced JFC Concepts,&quot; presents numerous
advanced JFC programming techniques. In this part of the book,
you will learn about the Accessibility API and Drag and Drop.
You will also learn about the undo/redo support built into the
JFC. The ToolTip and focus managers are presented in this part
of the book. You will learn how custom cursors can be used in
the JFC. You will also see how the <TT>UIManager</TT>
serves as the focal point for the pluggable look-and-feel architecture
introduced in Part V.
<P>
Each component and concept presented is supported by one or more
working example applications. As complete and educational as these
examples are, they do not demonstrate every API for each class
in the JFC. To fill in the gaps, a reference section is contained
at the end of the book. This section gives the complete API for
each Swing class.
<P>
After reading this book and going through the examples, you will
have the tools required to build complete arbitrary and complex
JFC applications and applets. When you arrive at this point, you
will truly appreciate the power and elegance of the architecture
on which the JFC is built.




<H2><A NAME="TellUsWhatYouThink">
Tell Us What You Think!</a></H2>
<P>
As the reader of this book, <I>you</I>
are our most important critic and commentator. We value your opinion
and want to know what we're doing right, what we could do better,
what areas you'd like to see us publish in, and any other words
of wisdom you're willing to pass our way. 
<P>
As the Executive Editor for the Java team at Macmillan Computer
Publishing, I welcome your comments. You can fax, email, or write
me directly to let me know what you did or didn't like about this
book-as well as what we can do to make our books stronger.
<BLOCKQUOTE>
<I>Please note that I cannot help you with technical problems
related to the topic of this book, and that due to the high volume
of mail I receive, I might not be able to reply to every message</I>.
</BLOCKQUOTE>
<P>
When you write, please be sure to include this book's title and
author as well as your name and phone or fax number. I will carefully
review your comments and share them with the author and editors
who worked on the book.<p>
<TABLE>
<TR valign=top><TD WIDTH=73><B>Fax :</B></TD><TD WIDTH=517>317-817-7070</TD>
</TR>
<TR valign=top><TD WIDTH=73><B>Email :</B></TD><TD WIDTH=517><A HREF="mailto:java@mcp.com">java@mcp.com
</TD></TR>
<TR valign=top><TD WIDTH=73><B>Mail :</B></TD><TD WIDTH=517>Tim Ryan<BR>
Executive Editor<BR>
Java<BR>
Macmillan Computer Publishing<BR>
201 West 103rd Street<BR>
Indianapolis, IN 46290 USA
</TD></TR>
</TABLE>
<P>
<CENTER>
<HR SIZE=4>


<A HREF="..\index.htm"><IMG SRC="..\button\contents.gif" BORDER="0"></A> 
<A HREF="..\ch01\ch01.htm"><IMG SRC="..\button\next.gif" BORDER="0"></A> 
</p>

<p>&#169; <A HREF="..\copy.htm">Copyright</A>, Macmillan Computer Publishing. All rights reserved.
</CENTER>
</BODY>
</HTML>
