<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<SCRIPT LANGUAGE="JavaScript">


<!--

function popUp(pPage) {
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '<link rel="stylesheet" href="/includes/stylesheets/ebooks.css"></head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 figDoc.write(zhtm);
 figDoc.close();
 popUpWin.focus();
 }

//-->


</SCRIPT>
<link rel="stylesheet" href="http://www.szptt.net.cn/includes/stylesheets/ebooks.css">

        <META NAME="GENERATOR" Content="Symantec Visual Page 1.0.1">
        <META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
        <TITLE>JFC -- Chapter 21 - Progress Monitor</TITLE>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<CENTER>
<H1><IMG SRC="..\button\sams.gif" BORDER="0"></H1>

<P><A HREF="..\ch20\ch20.htm"><IMG SRC="..\button\previous.gif" BORDER="0"></A>
<A HREF="..\index.htm"><IMG SRC="..\button\contents.gif" BORDER="0"></A> 
<A HREF="..\ch22\ch22.htm"><IMG SRC="..\button\next.gif" BORDER="0"></A> 


<H1>JFC Unleashed</H1></CENTER>
<HR>


<H1>Chapter&nbsp;21<br>
Progress Monitor</H1>
<HR>
<p>


<UL>
<LI><A HREF="#UsingtheTTFONTSIZEProgressMonitorFONTTT">
Using the <TT>ProgressMonitor</TT></A>
<LI><A HREF="#ExampleofTTFONTSIZEProgressMonitorFONTTTFONTSIZEUsageFONT">
Example of <TT>ProgressMonitor</TT>
Usage</A>
<LI><A HREF="#Summary">
Summary</A>
</UL>

<HR>
<P>
When a user-initiated operation may take a significant amount
of time, visual feedback should be provided to the user. A common
means for this visual feedback is by displaying the wait cursor.
If the operation can be run in a separate thread, the JFC provides
the <TT>ProgressMonitor</TT> class as another mechanism to provide
feedback to the user. The <TT>ProgressMonitor</TT> class contains
methods that the operation can use to inform the user about the
status of the operation. This makes the <TT>ProgressMonitor</TT>
class superior to the wait cursor when it can be used. In this
chapter, you will learn
<UL>
<LI>Timing considerations in the <TT>ProgressMonitor</TT> class
<LI>How to customize a <TT>ProgressMonitor</TT>
<LI>How to provide feedback with the <TT>ProgressMonitor</TT>
<LI>See a complete <TT>ProgressMonitor</TT> example
</UL>
<P>
The <TT>ProgressMonitor</TT> class provides a convenient mechanism
to display a dialog box showing the progress of an operation.
This class displays a dialog box that allows the operation to
update its status and provide a note to inform the user as to
what it is currently doing. An example of the dialog box displayed
by the <TT>ProgressMonitor</TT> class is shown in Figure 21.1.
This chapter will present examples of using the <TT>ProgressMonitor</TT>
class.
<P>
<A HREF="javascript:popUp('f21-1.gif')"><B>Figure 21.1 :</B> <I>The ProgressMonitor dialog box</I>.</A>
<H2><A NAME="UsingtheTTFONTSIZEProgressMonitorFONTTT">
Using the <TT>ProgressMonitor</TT></A></H2>
<P>
When constructing a <TT>ProgressMonitor</TT>, the first parameter
is the parent component. The second parameter is the message shown
on the dialog. This message is processed the same way as the message
parameter contained in the <TT>JOptionPane</TT> <TT>class</TT>.
For a complete description of this parameter, see the discussion
of the message parameter in <A HREF="..\ch18\ch18.htm" >Chapter 18</A>, &quot;<TT>JOptionPane</TT>.&quot;
<P>
The message that is given at construction is not changed for the
lifetime of the dialog box. The third parameter is a <TT>String</TT>
note. The note is to give the user feedback as to the current
processing in the operation. The note can be changed as the operation
progresses. The final parameters define a range that indicates
the progress of the operation. Any integer numeric range can be
specified. However, a typical range will be from 0-100 percent
completion.
<P>
The dialog box that the <TT>ProgressMonitor</TT> class creates
is not immediately shown. Indeed, it is not immediately created.
Instead, the progress of the operation is monitored and the dialog
box is only created and displayed if deemed necessary by the <TT>ProgressMonitor</TT>
class. Two parameters are used to determine if the dialog box
should be displayed. These are the time to decide to pop-up parameter,
and the time to pop-up parameter. These parameters work in conjunction
with the operation updating the progress. After the time to decide
has elapsed, the <TT>ProgressMonitor</TT> estimates how long the
operation will take to complete. If the completion time of the
operation is determined to be longer than the pop-up time, the
dialog box is created and displayed. A simple linear approximation
is used to estimate the duration of the action. The default values
for these parameters are .5 seconds to decide to pop up, and the
operation must be estimated to take more than 2 seconds for the
dialog box to be displayed. However, these values can be changed
by using the <TT>setMillisToDecideToPopup</TT> and <TT>setMillisToPopup</TT>
methods. The time in each of these methods is specified in milliseconds.
The values can be queried by using the <TT>get</TT> versions of
the two methods.
<P>
The <TT>setProgress</TT> method is used to update the progress
of the operation. The progress is an integer in the current operation
range. The operation range is specified in the <TT>ProgressMonitor</TT>'s
constructor and can be altered with the <TT>setMinimum</TT> and
<TT>setMaximum</TT> methods. The <TT>get</TT> versions of each
of these methods can be used to determine the current operation
range. It is in the <TT>setProgress</TT> method that the <TT>ProgressMonitor</TT>
determines if the dialog box is required. This implies that if
there is a long delay between calls to this method around the
decision time, there will be a delay before the dialog box is
displayed. This class will work best if the operation can supply
a consistent stream of calls to the <TT>setProgress</TT> method.
<P>
As the operation updates the progress, it can also update the
<TT>String</TT> note presented to the user using the <TT>setNote</TT>
method. For example, if the operation is processing a list of
customers, the name of the customer being operated on could be
presented in the note. A non-<TT>null</TT> note must be specified
before the dialog box is created if the operation is going to
update the note during the operation. If the note is <TT>null</TT>
when the dialog box is created, a note will not be included in
the dialog box. Subsequent calls to <TT>setNote</TT> will be ignored.
To ensure that a note will be available if required by the operation,
it is safest to specify a note during construction of the <TT>ProgressMonitor</TT>
instance.
<P>
The <TT>ProgressMonitor</TT> class will close the dialog box when
the progress is set to the maximum value of the operation range.
The operation can also use the <TT>close</TT> method to tell the
<TT>ProgressMonitor</TT> that the operation is complete, and the
dialog box should be closed and disposed of.
<P>
The dialog box presented by the <TT>ProgressMonitor</TT> contains
a Cancel button. The operation should periodically query the <TT>ProgressMonitor</TT>
by using the <TT>isCancelled</TT> method to determine if the user
wants to cancel the operation. This method returns <TT>true</TT>
if the Cancel button has been clicked. The operation should stop
if this is the case. To force the dialog box to be disposed of,
the operation should set the progress to the maximum value, or
call the <TT>close</TT> method of the <TT>ProgressMonitor</TT>
during its cancel processing.
<P>
The final caveat to using the <TT>ProgressMonitor</TT> is that
the operation should be executing in a thread other than the user
interface thread. If this is not the case, the progress meter
or note will not be updated when their values are set.
<H2><A NAME="ExampleofTTFONTSIZEProgressMonitorFONTTTFONTSIZEUsageFONT">
Example of <TT>ProgressMonitor</TT>
Usage</A></H2>
<P>
The previous section gave the responsibilities of an operation
to successfully use a <TT>ProgressMonitor</TT>. This section will
present a working example of each of these responsibilities.
<P>
The example of <TT>ProgressMonitor</TT> usage is presented in
Listing 21.1. The <TT>ProgressMonitor</TT> is created with an
operation range of 0-100. A multiline message is specified. A
note is given in the constructor because the sample operation
will update the note as it progresses. The <TT>ProgressMonitor</TT>
does not immediately show the dialog box. It waits for the progress
to be set by the operation. It then estimates the duration of
the operation, and, if this time is longer than the operation
duration threshold, the dialog box will be displayed. In the example,
the default values of 0.5 seconds and 2 seconds for the pop-up
decision time and operation duration threshold times are used.
<P>
The operation in this example is a simple loop with a delay. Hopefully
your programs will have more significant operations to perform.
During each iteration through the loop, the progress and note
of the <TT>ProgressMonitor</TT> are updated. Using the <TT>isCancelled</TT>
method, the operation checks if the user has requested that the
operation terminate. If so, the progress is set to the maximum
value to dispose of the dialog box, and the operation terminates.
If the user has not cancelled the operation, the operation sleeps.
After the operation has iterated the desired number of times,
the operation is complete and the <TT>close</TT> method is called
to tell the <TT>ProgressMonitor</TT> that the operation has completed.
<P>
The example application creates a single button in a frame. When
the button is pressed, a thread is created to run the operation.
In this simple test application, a single progress monitor is
shared between all operations. Thus, there will be multiple threads
updating the progress monitor if the Start button is clicked when
the progress meter is displayed.
<P>
From this example you will notice that there is a tight coupling
between the progress monitor and the operation. The operation
must update the progress monitor as it progresses, and ensure
that the monitor is closed when the operation terminates. Also,
the operation must periodically check if the user requested that
the operation be cancelled. If it does not perform this check,
when the Cancel button is clicked, the progress monitor will be
removed from the screen but the operation will continue to execute,
resulting in a condition that is obviously not what the user intended.
It would enhance the design of the <TT>ProgressMonitor</TT> class
if this coupling were defined in an interface. This would allow
operations to interact with any class that implements the <TT>Progress</TT>
interface rather than the concrete <TT>ProgressMonitor</TT> class.
If this were the case, different types of progress monitors could
be used without altering the operations that update the monitor.
A progress monitor shown at the bottom of many frame windows comes
to mind.
<P>
<HR>
<P>
<B>Listing 21.1&nbsp;&nbsp;</B><TT><B>PROGRESSMONITOR</B></TT><B>
Example<BR>
</B>
<BLOCKQUOTE>
<PRE>
package com.foley.test;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;



/**
 * An application that displays a ProgressMonitor 
 * when the 'start' button is pressed. A simple 
 * 'operation' to update the monitor
 *
 * @author Mike Foley
 **/
public class ProgressTest extends Object { 

    /**
     * Application entry point.
     * Create the splash window, and display it.
     *
     * @param args Command line parameter. Not used.
     **/
    public static void main( String args[] ) { 

        //
        // Create a frame with a single button in it.
        // When the button is pressed, a thread is spawned
        // to run out sample operation.
        //
        JFrame frame = new JFrame( &quot;ProgressMonitor Test&quot; );
        JButton button = new JButton( &quot;Start&quot; );
        frame.getContentPane().add( button, BorderLayout.CENTER );

        //
        // Create a ProgressMonitor. This will be started
        // when the button is pressed.
        //
        int min = 0;
        int max = 100;
        String[] message = new String[2];
        message[0] = &quot;Performing Operation.&quot;;
        message[1] = &quot;This may take some time...&quot;;
        final ProgressMonitor monitor = new  ProgressMonitor( frame,
                                                      message,
                                                      &quot;Iteration&quot;,
                                                      min,
                                                      max );

        //
        // This is our sample operation.
        //
        final Runnable runnable = new Runnable() { 
            public void run() { 
                int sleepTime = 500;
                for( int i = 1; i &lt; 100; i++ ) { 
                    try {                         
                        monitor.setNote( &quot;Iteration &quot; + i );
                        monitor.setProgress( i );
                        if( monitor.isCancelled() ) { 
                            monitor.setProgress( 100 );
                            break;
                        } 
                        Thread.sleep( sleepTime );
                    }  catch( InterruptedException dontcare ) {                     
                    } 
                } 
                monitor.close();
            } 
        } ;
        
        button.addActionListener( new ActionListener() { 
            public void actionPerformed( ActionEvent event ) { 
                //
                // Run the operation in its own thread.
                //
                Thread thread = new Thread( runnable );
                thread.start();

            } 
        }  );
        
        //
        // Show the frame.
        //
        frame.pack();
        frame.setVisible( true );

    }  // main

}  // ProgressTest
</PRE>
</BLOCKQUOTE>
<HR>
<P>
In this example, the progress is updated twice a second. This
will cause the <TT>ProgressMonitor</TT> to determine that the
operation should take approximately 50 seconds to complete, and
the dialog box is required the first time the progress is set.
The dialog box will be displayed at that time. The note and slider
in the dialog box will be updated twice a second as the operation
executes. If the user clicks the Cancel button, the dialog box
will immediately be hidden. However, the operation will not terminate
until the next time through the loop when the operation calls
the <TT>isCancelled</TT> method. When the operation determines
that the user cancelled the operation, it sets the progress to
the maximum value to allow the dialog box to be disposed.
<P>
If the user doesn't click the Cancel button, the operation iterates
through the loop. When the loop is finished, the <TT>close</TT>
method is called to tell the <TT>ProgressMonitor</TT> that the
operation has completed. The <TT>ProgressMonitor</TT> will close
and dispose of the dialog box at that time.
<H2><A NAME="Summary">
Summary</A></H2>
<P>
The <TT>ProgressMonitor</TT> class provides a familiar visual
feedback component for complex operations that meet its usage
requirements. When the user initiates an operation that is going
to take a substantial amount of time to complete, visual feedback
should be provided to the user. If the operation can be divided
into multiple processing chunks and be executed in a separate
thread, it is an ideal candidate for <TT>ProgressMonitor</TT>
usage. This allows the user to monitor the operations progress
and cancel the operation if desired.
<P>
<CENTER>
<HR SIZE=4>

<A HREF="..\ch20\ch20.htm"><IMG SRC="..\button\previous.gif" BORDER="0"></A>
<A HREF="..\index.htm"><IMG SRC="..\button\contents.gif" BORDER="0"></A> 
<A HREF="..\ch22\ch22.htm"><IMG SRC="..\button\next.gif" BORDER="0"></A> 
</p>

<p>&#169; <A HREF="..\copy.htm">Copyright</A>, Macmillan Computer Publishing. All rights reserved.
</CENTER>
</BODY>
</HTML>
