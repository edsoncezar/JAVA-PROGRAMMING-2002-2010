<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<SCRIPT LANGUAGE="JavaScript">


<!--

function popUp(pPage) {
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '<link rel="stylesheet" href="/includes/stylesheets/ebooks.css"></head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 figDoc.write(zhtm);
 figDoc.close();
 popUpWin.focus();
 }

//-->


</SCRIPT>
<link rel="stylesheet" href="http://www.szptt.net.cn/includes/stylesheets/ebooks.css">

        <META NAME="GENERATOR" Content="Symantec Visual Page 1.0.1">
        <META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
        <TITLE>JFC -- Chapter 27 - Custom Cursors</TITLE>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<CENTER>
<H1><IMG SRC="..\button\sams.gif" BORDER="0"></H1>

<P><A HREF="..\ch26\ch26.htm"><IMG SRC="..\button\previous.gif" BORDER="0"></A>
<A HREF="..\index.htm"><IMG SRC="..\button\contents.gif" BORDER="0"></A> 
<A HREF="..\ch28\ch28.htm"><IMG SRC="..\button\next.gif" BORDER="0"></A> 


<H1>JFC Unleashed</H1></CENTER>
<HR>


<H1>Chapter&nbsp;27<br>
Custom Cursors</H1>
<HR>
<p>

<UL>
<LI><A HREF="#ToolkitMethodsforCustomCursors">
Toolkit Methods for Custom Cursors</A>
<LI><A HREF="#ComponentMethodsforCursors">
Component Methods for Cursors</A>
<LI><A HREF="#ExampleUsingaCustomCursor">
Example Using a Custom Cursor</A>
<LI><A HREF="#OverviewofTTFONTSIZECustomCursorDemoFONTTTFONTSIZEExampleFONT">
Overview of <TT>CustomCursorDemo</TT>
Example</A>
<UL>
<LI><A HREF="#QueryingforCustomCursorSupport">
Querying for Custom Cursor Support</A>
<LI><A HREF="#CreatingtheCustomCursorfromanImage">
Creating the Custom Cursor from an Image</A>
</UL>
<LI><A HREF="#CreatingImagesforCustomCursors">
Creating Images for Custom Cursors</A>
<UL>
<LI><A HREF="#Transparency">
Transparency</A>
<LI><A HREF="#HotSpots">
Hot Spots</A>
</UL>
<LI><A HREF="#Summary">
Summary</A>
</UL>

<HR>
<P>
Applications, especially those that are user-interface intensive
with many different types of interface elements, can benefit from
the use of unique, custom cursors. Although previous versions
of AWT allowed cursors to be changed, applications were limited
to a collection of predefined cursors. The Java Foundation Classes
include full support for custom cursors on any component.
<P>
In this chapter you will learn:
<UL>
<LI>How to use the <TT>Toolkit</TT> class to query for custom
cursor support.<BR>
Support for custom cursors is inherently dependent on the underlying
platform. You may have to supply multiple images for each custom
cursor if want to take full advantage of the various levels of
support available on different platforms.
<LI>How to create a custom cursor from an <TT>Image</TT> object
and set a custom cursor for a component.<BR>
After querying for custom cursor support, you can load the appropriate
graphic file into an <TT>Image</TT> object and create a custom
cursor from the image. You can then set this cursor to be the
cursor for any AWT or Swing component.
</UL>
<H2><A NAME="ToolkitMethodsforCustomCursors">
Toolkit Methods for Custom Cursors</A></H2>
<P>
Support for custom cursors is manifested in the <TT>java.awt.Toolkit</TT>
class. The <TT>Toolkit</TT> class includes three methods for custom
cursors.
<BLOCKQUOTE>
<PRE>
public Cursor createCustomCursor(Image cursor, Point hotSpot, 
                                 String description);
public Dimension getBestCursorSize(int preferredWidth, 
                                   int preferredHeight);
public int getMaximumCursorColors();
</PRE>
</BLOCKQUOTE>
<P>
The <TT>getBestCursorSize</TT> and <TT>getMaximumCursorColors</TT>
methods query the underlying operating system for the size and
color depth that the system supports for cursors. <TT>getBestCursorSize</TT>
returns the supported cursor dimension that is closest to the
preferred size. If a system supports only a single cursor size,
<TT>getBestCursorSize</TT> will return that size. If the underlying
system doesn't support custom cursors, <TT>getBestCursorSize</TT>
will return a (<TT>0, 0</TT>) dimension.
<P>
<CENTER>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1>
<TR VALIGN=TOP><TD WIDTH=600><B>NOTE</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=600><BLOCKQUOTE>
The <TT>Toolkit</TT> class exists to bind the platform-independent portion of AWT with the native (peer) implementation on each platform. On many operating systems, cursor support is intertwined very closely with the hardware. This is the reason that custom cursor support must be somewhat platform-dependent.
</BLOCKQUOTE>
<BLOCKQUOTE>
If you try to create a custom cursor from an image whose dimensions or number of colors aren't supported by the underlying operating system, the <TT>Toolkit</TT> implementation will attempt to resize the image and/or reduce the number of colors used by the image. It's best not to depend on <TT>Toolkit</TT> to convert images though-unless the conversion is a really simple one, you probably won't be satisfied with the results.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
</CENTER>
<P>
<P>
The <TT>createCustomCursor</TT> method creates a cursor from a
given <TT>Image</TT> object, hot spot coordinate, and a localized
description of the cursor for Java Accessibility purposes. If
the hot spot coordinate is outside the bounds of the cursor, <TT>createCustomCursor</TT>
throws an <TT>IndexOutOfBoundsException</TT> exception. Refer
to <A HREF="..\ch33\ch33.htm" >Chapter 33</A>, &quot;Accessibility,&quot; for more information
on Java accessibility.
<H2><A NAME="ComponentMethodsforCursors">
Component Methods for Cursors</A></H2>
<P>
You use the <TT>Component.setCursor</TT> method to set a custom
cursor for a component. This is not a new method-it was available
in previous versions of the JDK to set predefined cursors (<TT>WAIT_CURSOR</TT>,
<TT>TEXT_CURSOR</TT>, and so on). The <TT>getCursor</TT> method
is provided to get the cursor that was previously set for a component.
<P>
Cursors are set on a per-component basis. If you want a container
and all of its children to use a particular cursor (regardless
of whether the cursor is a predefined or a custom cursor), you
must call <TT>setCursor</TT> for the container and all of its
children.
<H2><A NAME="ExampleUsingaCustomCursor">
Example Using a Custom Cursor</A></H2>
<P>
Listing 27.1 is the complete source for <TT>CustomCursorDemo</TT>,
an example that uses a custom cursor for a button component. To
run this example, you will need to obtain or create a GIF file
to represent the image used for the custom cursor. The image should
be a 32 <FONT FACE="Symbol">&#180;</FONT> 32 two-color image stored
in GIF Format 89a. The filename for the image should be <TT>&quot;Cursor_X_32_32.gif&quot;</TT>.
<P>
<HR>
<P>
<B>Listing 27.1&nbsp;&nbsp;</B><TT><B>CUSTOMCURSORDEMO.JAVA
<P>
</B></TT>
<BLOCKQUOTE>
<PRE>
/* CustomCursorDemo.java
 *
 * Illustrates how to use a custom cursor.
 */

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
   
/* App class
 */
public class CustomCursorDemo { 

    // Main entry point
    public static void main(String s[]) { 
        // Create app panel
        CustomCursorDemoPanel panel = new CustomCursorDemoPanel();

        // Create a frame for app
        JFrame frame = new JFrame(&quot;CustomCursorDemo&quot;);

        // Add a window listener for window close events
        frame.addWindowListener(new WindowAdapter() { 
             public void windowClosing(WindowEvent e) { System.exit(0);} 
        } );

        // Add app panel to content pane
        frame.getContentPane().add(panel);

        // Set initial frame size and make visible
        frame.setSize (100, 100);
        frame.setVisible(true);
    } 
} 

/* App panel class
 */
class CustomCursorDemoPanel extends JPanel { 
    // Constructor
    public CustomCursorDemoPanel() { 
        super();

        // Create a quit button and add to panel
        JButton button = new JButton(&quot;Quit&quot;);
        button.addActionListener (new ActionListener () { 
            public void actionPerformed (ActionEvent e) { 
                System.exit (0);
            } 
        } );
        add(button);
        
        // Query for custom cursor support
        Toolkit tk = getToolkit();
        Dimension d = tk.getBestCursorSize(32, 32);
        int colors = tk.getMaximumCursorColors();
        if (!d.equals(new Dimension(0, 0)) &amp;&amp; (colors != 0)) { 
            // If getBestCursorSize returns a non-zero size and
            // getmaximumCursorColors returns a non-zero value,
            // then platform supports custom cursors
            
            // You can now load the appropriate image file (GIF or JPEG)
            // for the supported cursor size and number of colors
            // Most platforms will support 32x32, 2-color cursors
            // We assume here that Cursor_X_32_32.gif is a 32x32 2-color
            // gif file. For transparency, use 89a-format gifs.
            Image image = tk.getImage(&quot;Cursor_X_32_32.gif&quot;);

            if (image != null) { 
                try { 
                    // Create a custom cursor from the image
                    // Specify hot spot coordinates and a string
                    // containing a description of the cursor
                    // for use with Java Accessibility
                    Cursor cursor = tk.createCustomCursor(image, new Point(16, 16),
                        &quot;crosshair cursor&quot;);

                    // Set the custom cursor for button
                    button.setCursor(cursor);
                } 
                catch(Exception exc) { 
                    // Catch exceptions so that we
                    // don't try to set a null cursor
                    System.err.println(&quot;Unable to create custom cursor.&quot;);
                } 
            } 
        } 
    } 
}
</PRE>
</BLOCKQUOTE>
<HR>
<H2><A NAME="OverviewofTTFONTSIZECustomCursorDemoFONTTTFONTSIZEExampleFONT">
Overview of <TT>CustomCursorDemo</TT>
Example</A></H2>
<P>
The <TT>CustomCursorDemo</TT> example consists of two classes.
<UL>
<LI><TT>CustomCursorDemo</TT> is a public class that contains
the <TT>main</TT> entry point method.
<LI><TT>CustomCursorDemoPanel</TT> is a panel that contains a
button that uses a custom cursor.
</UL>
<P>
The main entry point in <TT>CustomCursorDemo</TT> creates a frame
(<TT>JFrame</TT>) to contain the application and an instance of
<TT>CustomCursorDemoPanel</TT>. After adding the panel to the
content pane of the frame, <TT>main</TT> sets the initial size
of the frame and calls <TT>setVisible</TT> to make the frame visible.
<P>
The constructor for <TT>CustomCursorDemoPanel</TT> creates a button
(<TT>JButton</TT>) with an action listener implemented in an anonymous
inner class.
<H3><A NAME="QueryingforCustomCursorSupport">
Querying for Custom Cursor Support</A></H3>
<P>
After adding the button to the panel, the constructor queries
the <TT>Toolkit</TT> to determine the dimensions and color depth
the platform supports for custom cursors.
<BLOCKQUOTE>
<PRE>
// Query for custom cursor support
Toolkit tk = getToolkit();
Dimension d = tk.getBestCursorSize(32, 32);
int colors = tk.getMaximumCursorColors();
</PRE>
</BLOCKQUOTE>
<P>
If you intend to create custom cursors that use colors or are
a size other than 32<FONT FACE="Symbol">&#180;</FONT>32 pixels,
you should supply and load alternate images for platforms that
do not support these features. You can then use <TT>getBestCursorSize</TT>
and <TT>getMaximumCursorColors</TT> to determine which images
to load.
<H3><A NAME="CreatingtheCustomCursorfromanImage">
Creating the Custom Cursor from an Image</A></H3>
<P>
After querying the <TT>Toolkit</TT> for custom cursor support,
the code then tests the results of the queries to ensure that
the platform supports custom cursors. If the queries return a
non-zero size and non-zero number of colors, the constructor proceeds
to load an image named <TT>&quot;Cursor_X_32_32.gif&quot;</TT>.
If the image loads properly, the code calls <TT>createCustomCursor</TT>
to create a custom cursor and then calls <TT>setCursor</TT> to
set the cursor for the button created earlier.
<BLOCKQUOTE>
<PRE>
if (!d.equals(new Dimension(0, 0)) &amp;&amp; (colors != 0)) { 
    // load cursor image
    Image image = tk.getImage(&quot;Cursor_X_32_32.gif&quot;);

    if (image != null) { 
        try { 
            // Create custom cursor from the image
            Cursor cursor = tk.createCustomCursor(image, 
                                                  new Point(16, 16),
                                                  &quot;crosshair cursor&quot;);

            // Set the custom cursor for button
            button.setCursor(cursor);
        } 
        catch(Exception exc) { 
            // Catch exceptions so that we don't try to set a null cursor
            System.err.println(&quot;Unable to create custom cursor.&quot;);
        } 
    } 
} 
</PRE>
</BLOCKQUOTE>
<P>
Note that the cursor is set for the button only if there is no
exception when creating the custom cursor. This prevents the application
from trying to set a null cursor.
<H2><A NAME="CreatingImagesforCustomCursors">
Creating Images for Custom Cursors</A></H2>
<P>
<TT>Image</TT> objects are a platform-independent representation
of displayable images. Although you can create <TT>Image</TT>
objects from different types of graphics files, GIF files are
probably the best choice to use for custom cursors because they
are the most portable across the different platforms that support
Java.
<H3><A NAME="Transparency">
Transparency</A></H3>
<P>
Cursors require graphic images that use <I>transparency</I>,
a technique in which a color is defined as the transparent color
and pixels of that color are not painted onto the screen. The
result is an image that can have any shape and can &quot;float&quot;
above whatever image is in the background. In JFC, there is no
provision for a mask image to define transparent pixels-you must
load the image from a file or resource that is in a format that
supports transparency. The GIF89a format is a commonly used format
that supports transparency. 
<H3><A NAME="HotSpots">
Hot Spots</A></H3>
<P>
In addition to transparency, another attribute of cursors is that
they have a <I>hot spot</I>. A hot
spot is a coordinate that you specify within the bounds of the
cursor image to define precisely the position on the screen to
which the cursor is pointing. For example, for an arrowhead-shaped
cursor you would set the hot spot to be the point of the arrowhead.
You must specify a hot spot coordinate when you call the <TT>createCustomCursor</TT>
method to create a custom cursor. If you specify a hot spot that
is outside the bounds of the image you supply, <TT>createCustomCursor</TT>
will throw an <TT>IndexOutOfBoundsException</TT> exception.
<P>
<A HREF="javascript:popUp('f27-1.gif')"><B>Figure 27.1 :</B> <I>A 32 x 32 cursor image</I>.</A>
<H2><A NAME="Summary">
Summary</A></H2>
<P>
JFC enhances AWT cursor support by adding the ability to use custom
cursors with components. Custom cursors are inherently platform-dependent
and may not be supported on all platforms. Custom cursors require
peer support-you create them with methods in the <TT>Toolkit</TT>
class. 
<P>
You can create a custom cursor from a GIF file or any other image
file format that is supported by the toolkit on the platform running
the application. GIF format 89a is one of the most widely supported
image formats that supports transparency, an attribute essential
to cursor images. Once you've created a custom cursor, you can
install it using the same <TT>Component.setCursor</TT> method
that you use to set predefined cursors. The <TT>CustomCursorDemo</TT>
example illustrates how to create and set a custom cursor. Cursors
are set on a component-by-component basis. If you want to use
a custom cursor with an object and all of its children, you must
explicitly set the cursor for each object that you want to use
the custom cursor.

<P>
<CENTER>
<HR SIZE=4>

<A HREF="..\ch26\ch26.htm"><IMG SRC="..\button\previous.gif" BORDER="0"></A>
<A HREF="..\index.htm"><IMG SRC="..\button\contents.gif" BORDER="0"></A> 
<A HREF="..\ch28\ch28.htm"><IMG SRC="..\button\next.gif" BORDER="0"></A> 
</p>

<p>&#169; <A HREF="..\copy.htm">Copyright</A>, Macmillan Computer Publishing. All rights reserved.
</CENTER>
</BODY>
</HTML>
