<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<link REL="stylesheet" TYPE="text/css" HREF="../cursos.css" />
<title>A ArquiteturaJ2EE</title>
</head>

<body>

<h1 align="center">A Arquitetura J2EE</h1>

<h2>Componentes de Aplicação</h2>

<ul>
  <li>Aplicações J2EE são compostas de <font color="#0080FF">componentes</font></li>
  <li>Para nós, um componente é uma unidade autocontida de software que pode ser composta
    numa aplicação em tempo de design (sem compilação)</li>
  <li>Componentes J2EE são escritos em Java</li>
</ul>

<h3>Componentes J2EE na Camada de Apresentação</h3>

<ul>
  <li>Os seguintes componentes podem existir na camada de apresentação:<ul>
      <li>&quot;Application client&quot; (cliente não-Web)<ul>
          <li>Tipicamente usa Swing como User Interface (UI)</li>
          <li>Também chamado &quot;Console Application&quot;</li>
        </ul>
      </li>
      <li>Applets</li>
    </ul>
  </li>
</ul>

<h3>Componentes J2EE na Camada Web</h3>

<ul>
  <li>Componentes da camada Web podem incluir vários módulos, incluindo:<ul>
      <li>Páginas HTML/XML estáticas</li>
      <li>Servlets<ul>
          <li>Programas em Java que rodam no servidor Web e que processam pedidos gerando respostas
            dinâmicas</li>
        </ul>
      </li>
      <li>Java Server pages (JSP)<ul>
          <li>Templates HTML mais fáceis de criar, mas contendo &quot;scriplets&quot; (trechos em
            Java) para a geração de conteúdo dinâmico</li>
          <li>São convertidas em servlets quando acessadas pela primeira vez</li>
        </ul>
      </li>
      <li>JavaBeans<ul>
          <li>Componentes tradicionais em Java que podem ser usados em servlets e JSPs</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3>Componentes J2EE na Camada de Aplicação</h3>

<ul>
  <li>Componentes da camada de aplicação são chamados Enterprise Java Beans (EJB)</li>
  <li>Há vários tipos de EJBs:<ul>
      <li>Session Beans<ul>
          <li>Representam uma conversação transiente com um cliente</li>
          <li>Quando o cliente termina, a session bean some</li>
        </ul>
      </li>
      <li>Entity Bean<ul>
          <li>Representam dados persistentes gravados num banco de dados (tipicamente uma linha de uma
            tabela)</li>
        </ul>
      </li>
      <li>Message-Driven Bean<ul>
          <li>Uma combinação de um session bean com um Listener de mensagem Java Message
            Service (JMS)</li>
          <li>Permite que um componente de aplicação (o message bean) receba mensagens assíncronas</li>
          <li>Isso significa que podemos acoplamento muito fraco entre pedaços
            da aplicação: importante quando máquinas remotas estão
            envolvidas e podem nem estar no ar, ou pelo menos, poderão não
            responder de forma síncrona a chamadas remotas</li>
          <li>Não falaremos desse tipo de Bean nesta disciplina</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3>A camada de dados</h3>

<ul>
  <li>Observe que a camada de chamamos &quot;de dados&quot; pode ser um banco de dados ou
    outra coisa:<ul>
      <li>Por exemplo, pode ser um sistema ERP, CRM ou outro sistema legado</li>
      <li>Por esse motivo, a camada freqüentemente é chamada de &quot;camada EIS&quot;</li>
    </ul>
  </li>
</ul>

<h2>A Arquitetura J2EE</h2>

<h3>Containers e Serviços</h3>

<ul>
  <li>A chave da arquitetura J2EE é que muito trabalho normalmente feito pelo programador é
    poupado, já que é feito automaticamente pelo middleware<ul>
      <li>O programador se concentra no Business Logic</li>
    </ul>
  </li>
  <li>A entidade que faz essa mágica é o <font color="#0080FF">Container</font></li>
  <li>Um container &quot;envolve&quot; um componente de forma a capturar mensagens dirigidas
    ao componente e fornecer serviços automáticos a este</li>
  <li>Portanto, antes de ser usado, um componente (seja cliente, Web ou EJB) deve:<ul>
      <li>Ser montado numa aplicação</li>
      <li>Ser &quot;deployed&quot; (implantado) dentro de um container</li>
    </ul>
  </li>
  <li>O container pode ser configurado em tempo de deployment<ul>
      <li>Com declarative programming, isto é, mudança de atributos</li>
    </ul>
  </li>
  <li>Exemplos do que se faz no deployment ao configurar um container:<ul>
      <li>Estabelecer segurança</li>
      <li>Estabelecer o tratamento transacional</li>
      <li>Mapear nomes entre a aplicação e os recursos disponíveis</li>
    </ul>
  </li>
  <li>O container também gerencia serviços não configuráveis:<ul>
      <li>O lifecycle dos componentes (achar, criar, destruir, ...)</li>
      <li>Pooling de recursos (conexões de bancos de dados, por exemplo)</li>
      <li>Persistência de dados</li>
    </ul>
  </li>
</ul>

<h3>Tipos de Containers</h3>

<ul>
  <li>Os seguintes tipos de containers existem e executam no servidor J2EE:<ul>
      <li>Container EJB: um tal container para acolher algumas ou todas as Enterprise Beans (EJBs) de uma
        aplicação</li>
      <li>Web container: um tal container para acolher algumas ou todas as JSPs e servlets de uma aplicação</li>
    </ul>
  </li>
  <li>Os seguintes tipos de containers existem e executam na máquina cliente:<ul>
      <li>Application Client Container: para executar uma aplicação &quot;console&quot;</li>
    </ul>
  </li>
  <li>Observe que servlets e JSPs podem executar sem um &quot;J2EE server&quot; completo<ul>
      <li>Podem executar num servidor Web com suporte especial sem ter suporte a EJB</li>
      <li>Por exemplo: Apache Tomcat</li>
    </ul>
  </li>
  <li>Portanto, na figura abaixo, onde se vê &quot;J2EE server&quot;, podemos ter, na
    realidade, máquinas diferentes</li>
</ul>

<p align="center"><img src="j2ee-11.jpg" width="593" height="320"
alt="wpe1.jpg (21883 bytes)"></p>

<h3>As APIs do J2EE</h3>

<ul>
  <li>Java 2 Platform, Standard Edition (J2SE&#153;)<ul>
      <li>O antigo JDK</li>
    </ul>
  </li>
  <li>Enterprise JavaBeans Technology</li>
  <li>JDBC API<ul>
      <li>Para acessar Bancos de Dados</li>
    </ul>
  </li>
  <li>Java Servlet Technology</li>
  <li>JavaServer Pages (JSP) Technology</li>
  <li>Java Message Service (JMS)<ul>
      <li>Para comunicação assíncrona distribuída, fracamente acoplada e confiável</li>
    </ul>
  </li>
  <li>Java Transaction API (JTA)<ul>
      <li>Para a demarcação de transações</li>
    </ul>
  </li>
  <li>JavaMail&#153; Technology<ul>
      <li>Para que aplicações possam enviar mail</li>
    </ul>
  </li>
  <li>Java API for XML Processing (JAXP)<ul>
      <li>Para implementar B2B, relatório XML, etc.</li>
    </ul>
  </li>
  <li>J2EE Connector Architecture<ul>
      <li>Para se conectar de forma simples a vários sistemas de informação corporativos (ERP,
        BD</li>
    </ul>
  </li>
  <li>Java Authentication and Authorization Service (JAAS)<ul>
      <li>Para prover serviços de autenticação e autorização</li>
    </ul>
  </li>
</ul>

<p class="botref">j2ee-1 <a href="../j2ee-2.htm">programa</a> </p>
</body>
</html>
