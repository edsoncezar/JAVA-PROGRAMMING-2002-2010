<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<link REL="stylesheet" TYPE="text/css" HREF="../cursos.css" />
<title>Desenvolvimento de Aplicações J2EE: Papeis, Composição e Deployment</title>
</head>

<body>

<h1 align="center">Desenvolvimento de Aplicações J2EE:</h1>

<h1 align="center">Papeis, Composição e Deployment</h1>

<h2>Desenvolvimento de Aplicações J2EE</h2>

<ul>
  <li>Para desenvolver aplicações J2EE, deve-se:<ul>
      <li>Desenvolver componentes de aplicação</li>
      <li>Compor os componentes em módulos<ul>
          <li>Adicionando outros recursos e um Deployment Descriptor</li>
        </ul>
      </li>
      <li>Compor módulos em aplicações</li>
      <li>Deployment da aplicação<ul>
          <li>Instalação e customização da aplicação, incluindo seus módulos</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Observe que o deployment de módulos é feito e não de componentes<ul>
      <li>Isso vai contra as definições normais de componente</li>
      <li>Porém, pense num módulo como sendo um arquivo podendo conter mais de um componente</li>
      <li>Exemplo: um módulo (arquivo) contendo vários EJBs</li>
    </ul>
  </li>
</ul>

<h2>Papeis</h2>

<ul>
  <li>Devido à construção de aplicações com a composição de componentes, temos novos
    papeis a considerar</li>
</ul>

<p align="center"><img src="roles.gif" width="732" height="487"
alt="roles.gif (14855 bytes)"></p>

<h3>J2EE Server Provider</h3>

<ul>
  <li>Provê o Middleware contendo os serviços não automáticos (Naming usando JNDI,
    Transações usando JTS, ...) </li>
  <li>O J2EE Server deve ser capaz de aceitar vários EJB Containers e Web Containers</li>
  <li>J2EE Servers podem ser construídos em cima de <ul>
      <li>SGBDR </li>
      <li>SGBDOO </li>
      <li>Monitores de Transação </li>
      <li>Web Application Servers </li>
      <li>etc. </li>
    </ul>
  </li>
  <li>Exemplos: IBM WebSphere, BEA WebLogic, Sun iPlanet, Oracle Application Server, JBoss<ul>
      <li>Devem ser especialistas em Gerência de Transações Distribuídas, Objetos
        Distribuídos, etc. </li>
    </ul>
  </li>
</ul>

<h3>EJB/Web Container Provider</h3>

<ul>
  <li>Provê o software para receber componentes e fornecer os serviços automáticos</li>
  <li>Alguma ferramenta deve fornecer a geração automática dos Containers (que obedecem à
    interface dos Beans ou Web components, já que interceptam as chamadas) <ul>
      <li>No final das contas, um Container é um monte de classes em Java geradas automaticamente
      </li>
    </ul>
  </li>
  <li>Deve também se registrar junto ao serviço de Naming para que os clientes possam achar
    objetos que obedeçam às interfaces desejadas </li>
  <li>Os containers rodam dentro do J2EE Server e/ou no servidor Web e/ou na máquina cliente</li>
  <li>Como não há (ainda) padronização de interface entre o J2EE Server e os Containers,
    quem é fornecedor de servidores também provê os Containers</li>
  <li>Exemplos: IBM, BEA, Sun, Oracle </li>
</ul>

<h3>Application Component Developer</h3>

<ul>
  <li>Um programador que produz EJBs e Web components</li>
  <li>EJBs capturam o <font color="#0080ff">Business Logic reutilizável </font>da empresa <ul>
      <li>Sendo reutilizável, vale a pena colocar num Bean</li>
    </ul>
  </li>
  <li>Pode ser um programador da empresa cliente ou de uma empresa especializada em construir
    EJBs </li>
</ul>

<h3>Deployer</h3>

<ul>
  <li>Faz tudo que tem a ver com o <font color="#0080ff">ambiente run-time final</font> </li>
  <li>Um técnico da empresa cliente final </li>
  <li>Vai instalar os Beans e Web components no J2EE Server e configurá-los no ambiente
    run-time <ul>
      <li>Através do Deployment Descriptor</li>
      <li>Usando Programação Declarativa</li>
    </ul>
  </li>
  <li>Não precisa saber Java, nem o Business Logic </li>
  <li>Deve saber quais são os bancos de dados, os usuários, etc. </li>
  <li>O que é configurado: <ul>
      <li>O nome dos Beans, Web components</li>
      <li>Os nomes das interfaces dos Beans, Web components</li>
      <li>Valores de timeout de sessão </li>
      <li>Lista de campos mantidos pelo container (persistência automática) </li>
      <li>Access Control List para segurança </li>
      <li>Controle de Transação (Not Supported, Supported, Required, Requires-New, Bean-Managed,
        ...) <ul>
          <li>Nem sempre o Deployer mexe com isso </li>
        </ul>
      </li>
      <li>Transaction Isolation Level (Serializable, Read Uncommitted, Read Committed, Repeatable
        Read) <ul>
          <li>Nem sempre o Deployer mexe com isso </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3>Application Developer</h3>

<ul>
  <li>Junta todos os tiers para criar a aplicação final </li>
  <li>Escreve a aplicação usando Componentes prontos </li>
  <li>A aplicação pode envolver: <ul>
      <li>Aplicação console em Java</li>
      <li>Applet </li>
      <li>Servlet </li>
      <li>Aplicação CORBA</li>
      <li>Controle ActiveX (usando o bridge COM-CORBA) </li>
    </ul>
  </li>
  <li>O desenvolvedor se preocupa mais com a funcionalidade de muito alto nível <ul>
      <li>Tipicamente Apresentação de Dados </li>
    </ul>
  </li>
</ul>

<h3>System Administrator</h3>

<ul>
  <li>Gerencia o ambiente e faz o afinamento (<em>fine tuning</em>) </li>
  <li>Monitoração em tempo real de <ul>
      <li>Servidores de aplicação </li>
      <li>Componentes </li>
      <li>Containers</li>
      <li>Clientes </li>
    </ul>
  </li>
  <li>Pode definir o número concorrente de usuários que executam um cliente ou Container ou
    componente específico </li>
  <li>Pode ter visão instantânea ou histórica de eventos, cargas, etc. </li>
</ul>

<h2>Criação, composição e packaging de componentes</h2>

<ul>
  <li>Um módulo é uma unidade de empacotamento</li>
  <li>Empacota um ou mais componentes do mesmo tipo</li>
  <li>Há 3 tipos de módulos:</li>
</ul>

<h3>Web Modules</h3>

<ul>
  <li>Unidade instalável (deployable) contendo<ul>
      <li>Servlets</li>
      <li>Páginas JSP</li>
      <li>Bibliotecas de tags JSP</li>
      <li>Arquivos JAR de biblioteca Java</li>
      <li>Documentos HTML/XML</li>
      <li>Outros recursos (imagens, arquivos de classes, applets, ...)</li>
    </ul>
  </li>
  <li>O arquivo é chamado &quot;Web ARchive file&quot; (WAR file)</li>
  <li>WAR = arquivo JAR mas com diretório WEB-INF contendo um deployment descriptor num
    arquivo web.xml<ul>
      <li>O servidor J2EE examina o Deployment Descriptor para saber como tratar o componente ou
        aplicação</li>
    </ul>
  </li>
</ul>

<h3>EJB Modules</h3>

<ul>
  <li>Unidade instalável (deployable) contendo<ul>
      <li>EJBs</li>
      <li>Arquivos JAR de biblioteca Java</li>
      <li>Outros recursos, etc.</li>
    </ul>
  </li>
  <li>O arquivo é um arquivo JAR mas com deployment descriptor ejb-jar.xml no diretório
    META-INF</li>
</ul>

<h3>Java Modules</h3>

<ul>
  <li>Um grupo de classes clientes empacotados em arquivos JAR</li>
  <li>O deployment descriptor de um Java Module está num arquivo chamado
    application-client.xml</li>
</ul>

<h2>Criação, composição e packaging de aplicações</h2>

<ul>
  <li>Módulos podem ser agrupados em aplicações num pacote chamado &quot;EAR file&quot;
    (Enterprise ARchive)</li>
  <li>O deployment descriptor de uma aplicação está num arquivo chamado application.xml</li>
  <li>Observe que os vários deployment descriptors envolvidos permitem um melhor reuso dos
    módulos</li>
</ul>

<p align="center"><img src="ear.gif" width="713" height="353" alt="ear.gif (10390 bytes)"></p>

<h2>Deployment de Aplicações</h2>

<ul>
  <li>Deployment é o processo de instalar e customizar módulos numa plataforma J2EE</li>
  <li>Envolve várias etapas:<ul>
      <li>Copiar o arquivo apropriado no servidor de aplicações</li>
      <li>Configurar a aplicação através do deployment descriptor<ul>
          <li>O deployment descriptor contém informação que pode variar entre duas instalações</li>
          <li>Exemplos: nomes de bancos de dados, de tabelas, de campos, papeis para segurança, etc.</li>
        </ul>
      </li>
      <li>Deixar o módulo sob controle de um container<ul>
          <li>Isso freqüentemente envolve a criação dinâmica de um container usando uma ferramenta
            especial</li>
          <li>Isso é necessário quando o container está intimamente relacionado
            com os
            componentes do módulo (veremos exemplos adiante)</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p class="botref">j2ee-2 <a href="../j2ee-2.htm">programa</a> </p>
</body>
</html>
