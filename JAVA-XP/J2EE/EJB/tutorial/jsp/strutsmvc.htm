<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<link REL="stylesheet" TYPE="text/css" HREF="../cursos.css" />
<title>Servlets e JSP juntos: A Arquitetura MVC</title>
</head>

<body>

<h1 align="center">Struts e a Arquitetura MVC:<br>
Servlets e JSP juntos</h1>

<h2>Introdução</h2>

<h3>Struts e Custom Tags</h3>

<ul>
  <li>O problema principal com JSP
    <ul>
      <li>Misturar scriptlets com HTML/XML</li>
    </ul>
  </li>
  <li>Resultado:
    <ul>
      <li>Scriptlets misturam lógica com apresentação</li>
      <li>Scriptlets quebram a separação de papeis desenvolvedor/web designer</li>
      <li>Páginas JSP ficam mais difíceis de ler e manter com a presença de scriptlets</li>
    </ul>
  </li>
  <li>Solução
    <ul>
      <li>Custom Tags (ou JSP Tags Extension)
        <ul>
          <li>Extensão da tecnologia JSP para criação de novos tags</li>
        </ul>
      </li>
      <li>Struts contém muitos tags, juntados em &quot;tag libraries&quot; para
        ajudar a reduzir scriptlets
        <ul>
          <li>&quot;Struts&quot; = Esteio ou Escora (Suporte para construir
            aplicações Web)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Portanto, veja onde struts entra na arquitetura J2EE:</li>
</ul>

<p align="center"><span lang="EN-US" style="font-size:10.0pt;font-family:
Times;mso-fareast-font-family:&quot;Times New Roman&quot;;mso-bidi-font-family:&quot;Times New Roman&quot;;
color:black;mso-ansi-language:EN-US;mso-fareast-language:EN-US;mso-bidi-language:
AR-SA"><!--[if gte vml 1]><v:shapetype id="_x0000_t75" coordsize="21600,21600"
 o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f"
 stroked="f">
 <v:stroke joinstyle="miter"/>
 <v:formulas>
  <v:f eqn="if lineDrawn pixelLineWidth 0"/>
  <v:f eqn="sum @0 1 0"/>
  <v:f eqn="sum 0 0 @1"/>
  <v:f eqn="prod @2 1 2"/>
  <v:f eqn="prod @3 21600 pixelWidth"/>
  <v:f eqn="prod @3 21600 pixelHeight"/>
  <v:f eqn="sum @0 0 1"/>
  <v:f eqn="prod @6 1 2"/>
  <v:f eqn="prod @7 21600 pixelWidth"/>
  <v:f eqn="sum @8 21600 0"/>
  <v:f eqn="prod @7 21600 pixelHeight"/>
  <v:f eqn="sum @10 21600 0"/>
 </v:formulas>
 <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" aspectratio="t"/>
</v:shapetype><v:shape id="_x0000_i1025" type="#_x0000_t75" style='width:468.75pt;
 height:252pt'>
 <v:imagedata src="file:///C:/DOCUME~1/jacques/CONFIG~1/Temp/msoclip1/01/clip_image001.png"
  o:href="figures\str_0202.bmp"/>
</v:shape><![endif]-->
<img src="struts1.jpg" v:shapes="_x0000_i1025" width="625" height="336"></span></p>
<ul>
  <li>Quais são os tag libraries?
    <ul>
      <li><font color="#0080FF">Bean tags</font> definir novos beans (em
        qualquer escopo) a partir de uma variedade de fontes e para imprimir
        beans e suas propriedades na resposta
        <ul>
          <li>Exemplo: <font color="#0080FF">&lt;bean:write name=&quot;user&quot;
            property=&quot;fullName&quot;/&gt;</font></li>
        </ul>
      </li>
      <li><font color="#0080FF">HTML tags </font>para ajudar a montar páginas
        JSP mais rapidamente, principalmente forms
        <ul>
          <li>Exemplo: montar um Select HTML a partir de uma coleção<br>
            <font color="#0080FF">      &lt;html:select property=&quot;type&quot;&gt;<br>
            &nbsp;&nbsp;&nbsp;        &lt;html:options collection=&quot;serverTypes&quot;
            property=&quot;value&quot;<br>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            labelProperty=&quot;label&quot;/&gt;<br>
      &lt;/html:select&gt;</font></li>
        </ul>
      </li>
      <li><font color="#0080FF">Logic tags </font>para fazer um pouco de lógica
        sem scriptlets, mas apenas através de parâmetros apropriados
        <ul>
          <li>Exemplo: Iterar uma coleção e produzir HTML<br>
            <font color="#0080FF">&lt;logic:iterate id="subscription" name="user" property="subscriptions"><br>
            &nbsp;&nbsp;&nbsp;  &lt;tr><br>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    &lt;td align="left"><br>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      &lt;bean:write
            name=&quot;subscription&quot; property=&quot;host&quot;<br>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            filter=&quot;true&quot;/&gt;<br>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    &lt;/td><br>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    &lt;td align="left"><br>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      &lt;bean:write name="subscription" property="username" filter="true"/><br>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    &lt;/td&gt;<br>
            &nbsp;&nbsp;&nbsp; &lt;/tr&gt;<br>
            &lt;/logic:iterate&gt;</font></li>
        </ul>
      </li>
      <li><font color="#0080FF">Template tags</font> para criar páginas HTML
        com formato comum</li>
    </ul>
  </li>
</ul>
<h3>Struts e a Arquitetura Model-View-Controller (MVC)</h3>

<ul>
  <li>Você já se perguntou se é melhor usar servlets ou JSP?</li>
  <li>A resposta é que JSPs devem ser usados para apresentar informação mas
    não para misturar lógica de negócio</li>
  <li>Como separar bem essas coisas?
    <ul>
      <li>Use a arquitetura MVC</li>
      <li>Também chamada &quot;Model 2 Architecture&quot; em J2EE</li>
    </ul>
  </li>
</ul>

<p align="center"><span lang="EN-US" style="font-size:10.0pt;font-family:
Times;mso-fareast-font-family:&quot;Times New Roman&quot;;mso-bidi-font-family:&quot;Times New Roman&quot;;
color:black;mso-ansi-language:EN-US;mso-fareast-language:EN-US;mso-bidi-language:
AR-SA"><!--[if gte vml 1]><v:shapetype id="_x0000_t75" coordsize="21600,21600"
 o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f"
 stroked="f">
 <v:stroke joinstyle="miter"/>
 <v:formulas>
  <v:f eqn="if lineDrawn pixelLineWidth 0"/>
  <v:f eqn="sum @0 1 0"/>
  <v:f eqn="sum 0 0 @1"/>
  <v:f eqn="prod @2 1 2"/>
  <v:f eqn="prod @3 21600 pixelWidth"/>
  <v:f eqn="prod @3 21600 pixelHeight"/>
  <v:f eqn="sum @0 0 1"/>
  <v:f eqn="prod @6 1 2"/>
  <v:f eqn="prod @7 21600 pixelWidth"/>
  <v:f eqn="sum @8 21600 0"/>
  <v:f eqn="prod @7 21600 pixelHeight"/>
  <v:f eqn="sum @10 21600 0"/>
 </v:formulas>
 <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" aspectratio="t"/>
</v:shapetype><v:shape id="_x0000_i1025" type="#_x0000_t75" style='width:503.25pt;
 height:180pt'>
 <v:imagedata src="file:///C:/DOCUME~1/jacques/CONFIG~1/Temp/msoclip1/01/clip_image001.png"
  o:href="figures\str_0104.bmp"/>
</v:shape><![endif]-->
<img src="struts3.jpg" v:shapes="_x0000_i1025" width="671" height="240"></span></p>

<ul>
  <li>O <font color="#0080ff">Model</font> é tudo que envolve o Business Logic,
    sem considerações de interface</li>
  <li>O <font color="#0080ff">View</font> representa numa interface o estado corrente
    do Model</li>
  <li>O <font color="#0080ff">Controller</font> é usado para alimentar o
        Model quando ocorrem entradas na interface par o usuário</li>
  <li>Com struts:
    <ul>
      <li>Usamos JavaBeans (ou EJBs) para o Business Logic (Model)
        <ul>
          <li>Struts nos ajuda a manipular beans com facilidade usando tags</li>
        </ul>
      </li>
      <li>Usamos páginas JSP para o View
        <ul>
          <li>Struts nos ajuda a montar formulários com tags especiais</li>
          <li>Struts nos ajuda a validar formulários com classes &quot;Form&quot;</li>
        </ul>
      </li>
      <li>O Controller é um servlet que já vem pronto em struts
        <ul>
          <li>Podemos estender o controller com classes &quot;Action&quot;
            <ul>
              <li>Essencialmente para mapear entre o servlet e o mundo de
                Business Logic</li>
            </ul>
          </li>
          <li>O servlet é configurado, incluindo ações de roteamento (ou mapeamento), com um
            arquivo XML</li>
          <li>O que o Controller faz:
            <ul>
              <li>Intercepta requests HTTP vindo de um cliente</li>
              <li>Cada request recebe seu próprio thread</li>
              <li>Traduz o request numa operação específica a ser feita</li>
              <li>Chama a operação diretamente (ou delega para um Action
                Object)
                <ul>
                  <li>O servlet roteia o request para o destino correto (o
                    objeto Action)</li>
                </ul>
              </li>
              <li>Ajuda a selecionar a próxima View a mostrar para o cliente</li>
              <li>Retorna a View para o cliente</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Resumo:</li>
</ul>

<p align="center"><img border="0" src="model2.gif" width="738" height="415"></p>

<h3>Alguns links úteis</h3>
    <ul>
      <li>
        <p align="left"><a href="http://jakarta.apache.org/struts">The Struts Web Application Framework</a></li>
      <li><a href="http://anjinho.dsc.ufpb.br:8080/struts-documentation/index.html">Documentação
        struts</a></li>
      <li><a href="http://anjinho.dsc.ufpb.br:8080/struts-documentation/userGuide/resources.html">Mais
        recursos sobre struts</a></li>
      <li><a href="../../recursos/livrostruts.zip">O &quot;livro struts&quot;</a></li>
      <li>Outros frameworks semelhantes (+-) a Struts
        <ul>
          <li><a href="http://barracuda.enhydra.org">Barracuda</a></li>
          <li><a href="http://xml.apache.org/cocoon">Cocoon</a></li>
          <li><a href="http://www.jcorporate.com">Expresso</a></li>
          <li><a href="http://freemarker.sourceforge.net">Freemaker</a></li>
          <li><a href="http://jakarta.apache.org/velocity">Velocity</a></li>
          <li><a href="http://www.webmacro.org">Webmacro</a></li>
          <li><a href="http://mav.sourceforge.ne">Maverick MVC</a></li>
          <li><a href="http://www.opensymphony.com/sitemesh">Sitemesh</a></li>
          <li><a href="http://jakarta.apache.org/turbine">Jakarta Turbine</a></li>
          <li><a href="http://sourceforge.net/projects/webwork">Webwork</a></li>
          <li><a href="http://www.jcp.org/jsr/detail/127.jsp">Jave Server Faces</a></li>
        </ul>
      </li>
    </ul>

<h2>Struts by Example</h2>

<ul>
  <li>Você pode achar um outro exemplo introdutório de Struts no <a href="../../recursos/struts/struts-chapter3-apr17.zip">capítulo 3</a> do livro
    Struts</li>
  <li>A aplicação que veremos aqui é apresentada como exemplo no pacote
    Struts&nbsp;&nbsp;</li>
  <li>Exercite a aplicação <a href="http://anjinho.dsc.ufpb.br:8000/struts-example/index.jsp">aqui</a>
    <ul>
      <li>Se não estiver no ar, coloque <a href="../../recursos/struts-example.war">este
        arquivo WAR</a> no diretório webapps do Tomcat e faça deploy</li>
    </ul>
  </li>
  <li>Algumas telas:</li>
</ul>

<p align="center">Primeira tela:</p>
<p align="center"><img border="0" src="struts4.gif" width="750" height="449"></p>
<p align="center">Register:</p>
<p align="center"><img border="0" src="struts6.gif" width="750" height="449"></p>
<p align="center">Depois de salvar cadastro:</p>
<p align="center"><img border="0" src="struts7.gif" width="750" height="449"></p>
<p align="center">Edit:</p>
<p align="center"><img border="0" src="struts9.gif" width="757" height="571"></p>
<p align="center">Add:</p>
<p align="center"><img border="0" src="struts10.gif" width="757" height="571"></p>
<p align="center">Depois de salvar:</p>
<p align="center"><img border="0" src="struts11.gif" width="757" height="571"></p>
<p align="center">Se fizer login com user/pass:</p>
<p align="center"><img border="0" src="struts12.gif" width="757" height="571"></p>
<h3 align="left">Uma tournê do exemplo</h3>
<ul>
  <li>
    <p align="left">O que é a aplicação?
    <ul>
      <li>
        <p align="left">&quot;This example is the beginnings of a portal
        application that would allow users to register themselves, and maintain
        a set of subscriptions they own to mail servers elsewhere on the
        Internet. When completed, this application will provide the ability to
        read mail from various mail servers, through the application.&quot;</li>
      <li>
        <p align="left">Como está, a aplicação só mantém o cadastro dos
        servidores
        <ul>
          <li>
            <p align="left">Ela não lê mail</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
<h3 align="left">A página index.jsp</h3>
<div align="left">
  <pre align="left" class="clsCode">&lt;%@ page language=&quot;java&quot; %&gt;
<font color="#0080FF">&lt;%@ taglib uri=&quot;/WEB-INF/struts-bean.tld&quot; prefix=&quot;bean&quot; %&gt;
&lt;%@ taglib uri=&quot;/WEB-INF/struts-html.tld&quot; prefix=&quot;html&quot; %&gt;
&lt;%@ taglib uri=&quot;/WEB-INF/struts-logic.tld&quot; prefix=&quot;logic&quot; %&gt;
</font>
<font color="#0080FF">&lt;html:html locale=&quot;true&quot;&gt;
</font>&lt;head&gt;
<font color="#0080FF">&lt;title&gt;&lt;bean:message key=&quot;index.title&quot;/&gt;&lt;/title&gt;
</font>&lt;html:base/&gt;
&lt;/head&gt;
&lt;body bgcolor=&quot;white&quot;&gt;

&lt;logic:notPresent name=&quot;database&quot; scope=&quot;application&quot;&gt;
  &lt;font color=&quot;red&quot;&gt;
    ERROR:  User database not loaded -- check servlet container logs
    for error messages.
  &lt;/font&gt;
  &lt;hr&gt;
&lt;/logic:notPresent&gt;

&lt;logic:notPresent name=&quot;org.apache.struts.action.MESSAGE&quot; scope=&quot;application&quot;&gt;
  &lt;font color=&quot;red&quot;&gt;
    ERROR:  Application resources not loaded -- check servlet container
    logs for error messages.
  &lt;/font&gt;
&lt;/logic:notPresent&gt;

&lt;h3&gt;&lt;bean:message key=&quot;index.heading&quot;/&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;html:link page=&quot;/editRegistration.do?action=Create&quot;&gt;&lt;bean:message key=&quot;index.registration&quot;/&gt;&lt;/html:link&gt;&lt;/li&gt;
&lt;li&gt;&lt;html:link page=&quot;/logon.jsp&quot;&gt;&lt;bean:message key=&quot;index.logon&quot;/&gt;&lt;/html:link&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;html:link page=&quot;/tour.do&quot;&gt;
&lt;font size=&quot;-1&quot;&gt;&lt;bean:message key=&quot;index.tour&quot;/&gt;&lt;/font&gt;
&lt;/html:link&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;html:img page=&quot;/struts-power.gif&quot; alt=&quot;Powered by Struts&quot;/&gt;

&lt;/body&gt;
&lt;/html:html&gt;</pre>
</div>
<ul>
  <li>
    <p align="left">As 3 linhas taglib dão informação sobre onde estão as
    &quot;taglib descriptors&quot; e como as tags serão prefixadas (bean, html,
    logic)
    <ul>
      <li>
        <p align="left">Struts tem mais uma taglib (template) que não está
        sendo usada aqui</li>
    </ul>
  </li>
  <li>
    <p align="left">A linha com tag &lt;html:html&gt; é usada para gerar um
    elemento &lt;HTML&gt; com indicação de locale
    <ul>
      <li>
        <p align="left">O HTML gerado pelo Struts e mandando na reposta seria
        algo como:</li>
    </ul>
  </li>
</ul>
<div align="left">
  <pre align="left" class="clsCode">&lt;html lang=&quot;pt&quot;&gt;</pre>
</div>
<ul>
  <li>
    <p align="left">A seguinte linha é usada para mostrar mensagens
    internacionalizadas
    <ul>
      <li>
        <p align="left">O servlet de controle já vai ter instanciado dois
        objetos antes de chegar a index.jsp
        <ul>
          <li>
            <p align="left">Um database Servlet</li>
          <li>
            <p align="left">Um Message Resource (usado com &lt;bean:message
            ...&gt;)</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
<div align="left">
  <pre align="left" class="clsCode">&lt;title&gt;&lt;bean:message key=&quot;index.title&quot;/&gt;&lt;/title&gt;</pre>
</div>
<ul>
  <li>
    <p align="left">Na página acima, os erros estão &quot;hardcoded&quot; para
    que apareçam caso o Message Resource não seja localizado</li>
  <li>
    <p align="left">Voltaremos a index.jsp, já, já ...</li>
</ul>
<h4 align="left">web.xml e ApplicationResource.properties</h4>
<ul>
  <li>
    <p align="left">... Para saber como esses dois objetos são carregados, veja
    o arquivo web.xml:
    <ul>
      <li>
        <p align="left">Dois servlets são carregados no startup</li>
      <li>
        <p align="left">Um deles (&quot;action&quot;, nosso servlet de controle)
        tem como parâmetro &quot;application&quot; uma referência a
        ApplicationResource
        <ul>
          <li>
            <p align="left">Desta forma, o arquivo &quot;ApplicationResources.properties&quot;
            será analisado e disponibilizado como recurso</li>
          <li>
            <p align="left">Veja este arquivo <a href="../../recursos/dir-struts-example.war/WEB-INF/classes/org/apache/struts/webapp/example/ApplicationResources.properties">aqui</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
<div align="left">
  <pre align="left" class="clsCode">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;

&lt;!DOCTYPE web-app
  PUBLIC &quot;-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN&quot;
  &quot;http://java.sun.com/j2ee/dtds/web-app_2_2.dtd&quot;&gt;

&lt;web-app&gt;


  &lt;!-- Database Initialization Servlet Configuration --&gt;
  &lt;servlet&gt;
    &lt;servlet-name&gt;database&lt;/servlet-name&gt;
    &lt;servlet-class&gt;org.apache.struts.webapp.example.DatabaseServlet&lt;/servlet-class&gt;
    &lt;init-param&gt;
      &lt;param-name&gt;debug&lt;/param-name&gt;
      &lt;param-value&gt;2&lt;/param-value&gt;
    &lt;/init-param&gt;
<b> </b><font color="#0080FF">   &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
</font>  &lt;/servlet&gt;


  &lt;!-- Action Servlet Configuration --&gt;
<font color="#0080FF">  &lt;servlet&gt;
    &lt;servlet-name&gt;action&lt;/servlet-name&gt;
    &lt;servlet-class&gt;org.apache.struts.action.ActionServlet&lt;/servlet-class&gt;
    &lt;init-param&gt;
      &lt;param-name&gt;application&lt;/param-name&gt;
      &lt;param-value&gt;org.apache.struts.webapp.example.ApplicationResources&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;init-param&gt;
      &lt;param-name&gt;config&lt;/param-name&gt;
      &lt;param-value&gt;/WEB-INF/struts-config.xml&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;init-param&gt;
      &lt;param-name&gt;debug&lt;/param-name&gt;
      &lt;param-value&gt;2&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;init-param&gt;
      &lt;param-name&gt;detail&lt;/param-name&gt;
      &lt;param-value&gt;2&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;init-param&gt;
      &lt;param-name&gt;validate&lt;/param-name&gt;
      &lt;param-value&gt;true&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;load-on-startup&gt;2&lt;/load-on-startup&gt;
  &lt;/servlet&gt;
</font>

  &lt;!-- Action Servlet Mapping --&gt;
  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;action&lt;/servlet-name&gt;
    &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;


  &lt;!-- The Welcome File List --&gt;
  &lt;welcome-file-list&gt;
    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;
  &lt;/welcome-file-list&gt;

  &lt;!-- Application Tag Library Descriptor --&gt;
  &lt;taglib&gt;
    &lt;taglib-uri&gt;/WEB-INF/app.tld&lt;/taglib-uri&gt;
    &lt;taglib-location&gt;/WEB-INF/app.tld&lt;/taglib-location&gt;
  &lt;/taglib&gt;

  &lt;!-- Struts Tag Library Descriptors --&gt;
  &lt;taglib&gt;
    &lt;taglib-uri&gt;/WEB-INF/struts-bean.tld&lt;/taglib-uri&gt;
    &lt;taglib-location&gt;/WEB-INF/struts-bean.tld&lt;/taglib-location&gt;
  &lt;/taglib&gt;

  &lt;taglib&gt;
    &lt;taglib-uri&gt;/WEB-INF/struts-html.tld&lt;/taglib-uri&gt;
    &lt;taglib-location&gt;/WEB-INF/struts-html.tld&lt;/taglib-location&gt;
  &lt;/taglib&gt;

  &lt;taglib&gt;
    &lt;taglib-uri&gt;/WEB-INF/struts-logic.tld&lt;/taglib-uri&gt;
    &lt;taglib-location&gt;/WEB-INF/struts-logic.tld&lt;/taglib-location&gt;
  &lt;/taglib&gt;

&lt;/web-app&gt;</pre>
</div>
<h4 align="left">DatabaseServlet.java</h4>
<ul>
  <li>
    <p align="left">Vimos acima que o database servlet tem seu próprio bloco de
    inicialização:</li>
</ul>
<div align="left">
  <pre align="left" class="clsCode">  &lt;!-- Database Initialization Servlet Configuration --&gt;
  &lt;servlet&gt;
    &lt;servlet-name&gt;database&lt;/servlet-name&gt;
    &lt;servlet-class&gt;org.apache.struts.webapp.example.DatabaseServlet&lt;/servlet-class&gt;
    &lt;init-param&gt;
      &lt;param-name&gt;debug&lt;/param-name&gt;
      &lt;param-value&gt;2&lt;/param-value&gt;
    &lt;/init-param&gt;
<b> </b>   &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;<font color="#0080FF">
</font>  &lt;/servlet&gt;</pre>
</div>
<ul>
  <li>
    <p align="left">O código do servlet está <a href="../../recursos/dir-struts-example.war/WEB-INF/src/org/apache/struts/webapp/example/DatabaseServlet.java">aqui</a>,
    mas não será examinado em detalhes
    <ul>
      <li>
        <p align="left">O conteúdo do banco de dados é mantido em XML e
        analisado pelo &quot;digester&quot; do struts</li>
      <li>
        <p align="left">Na memória, o banco de dados consiste de tabelas hash
        aninhadas
        <ul>
          <li>
            <p align="left">A tabela externa mantém o cadastro de usuários e
            é armazenada no escopo de aplicação (no servlet context)</li>
          <li>
            <p align="left">Cada usuário (classe <a href="../../recursos/dir-struts-example.war/WEB-INF/src/org/apache/struts/webapp/example/User.java">User</a>)
            tem uma tabela hash de assinaturas</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p align="left">Quando você se cadastra, um objeto <a href="../../recursos/dir-struts-example.war/WEB-INF/src/org/apache/struts/webapp/example/User.java">User</a>
    é adicionado à tabela hash externa
    <ul>
      <li>
        <p align="left">Veremos o código para isso depois</li>
    </ul>
  </li>
  <li>
    <p align="left">Quando você faz login, o objeto User é localizado e
    guardado na sessão
    <ul>
      <li>
        <p align="left">Veremos o código para isso depois</li>
    </ul>
  </li>
</ul>
<ul>
  <li>
    <p align="left">O banco de dados inicial está em <a href="../../recursos/dir-struts-example.war/WEB-INF/database.xml">database.xml</a>
    <ul>
      <li>
        <p align="left">Eis seu conteúdo:</li>
    </ul>
  </li>
</ul>
<div align="left">
  <pre align="left" class="clsCode">&lt;database&gt;
  &lt;user username=&quot;user&quot;
        password=&quot;pass&quot;
        fullName=&quot;John Q. User&quot;
     fromAddress=&quot;John.User@somewhere.com&quot;&gt;

     &lt;subscription host=&quot;mail.yahoo.com&quot;     type=&quot;imap&quot;
                   username=&quot;jquser&quot;     password=&quot;foo&quot;/&gt;
     &lt;subscription host=&quot;mail.hotmail.com&quot;   type=&quot;pop3&quot;
                   username=&quot;user1234&quot;   password=&quot;bar&quot;/&gt;

  &lt;/user&gt;
&lt;/database&gt;</pre>
</div>
<h4 align="left">index.jsp, novamente</h4>
<ul>
  <li>
    Examinando <a href="../../recursos/dir-struts-example.war/index.jsp">index.jsp</a>
    novamente, podemos ver o uso de alguns tags de Struts</li>
  <li>
    &quot;base tag&quot;
    <ul>
      <li>Isso vai gerar a linha<br>
        &lt;base href=&quot;http://anjinho.dsc.ufpb.br:8080/struts-example/index.jsp&quot;&gt;<br>
        que indica a URL corrente para que hyperlinks relativos possam funcionar
        corretamente</li>
    </ul>
  </li>
</ul>
<pre class="clsCode">&lt;html:html locale=&quot;true&quot;&gt;
&lt;head&gt;
&lt;title&gt;&lt;bean:message key=&quot;index.title&quot;/&gt;&lt;/title&gt;
<font color="#0080FF">&lt;html:base/&gt;</font>
&lt;/head&gt;</pre>
<ul>
  <li>
    &quot;link tag&quot;
    <ul>
      <li>Uma maneira rápida de gerar um link com &quot;URL encoding&quot;
        sendo feito automaticamente (para manter a sessão do cliente nas URLs
        quando cookies não são aceitos)</li>
      <li>Desligue cookies no seu browser a verifique como ficaram os links da
        aplicação
        <ul>
          <li>Para Internet Explorer, remova cookies da zona de segurança
            apropriada e desabilite &quot;per-session cookies&quot;</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
<pre class="clsCode">&lt;html:link page=&quot;/editRegistration.do?action=Create&quot;&gt;</pre>
<ul>
  <li>
    Numa página simples, Struts já fez um bocado de coisas:
    <ul>
      <li>Criou objetos necessários na inicialização (Database, Resource)</li>
      <li>Fornece strings a partir de um &quot;message resource&quot;
        internacionalizado</li>
      <li>Fornece a URL base da página</li>
      <li>Faz codificação de URLs quando necessário</li>
    </ul>
  </li>
</ul>
<h3 align="left">A página logon.jsp</h3>
<ul>
  <li>
    Na primeira página, escolha o link de logon</li>
  <li>
    Brinque com informação errada antes de usar o login/senha=user/pass</li>
  <li>
    Você vai verificar que:
    <ol>
      <li>Ao retornar para logon.jsp, a URL indica logon.do e não login.jsp</li>
      <li>Struts mostra um erro de validação antes do form de logon
      <li>O username fornecido já vem preenchido no novo formulário</li>
    </ol>
  </li>
  <li>Como isso funciona?</li>
</ul>
<h4 align="left">struts-config.xml e LogonForm.java</h4>
<ul>
  <li>
    <p align="left">A página logon.jsp é mostrada a seguir</li>
</ul>
<div align="left">
    <pre align="left" class="clsCode">&lt;%@ page language=&quot;java&quot; %&gt;
&lt;%@ taglib uri=&quot;/WEB-INF/struts-bean.tld&quot; prefix=&quot;bean&quot; %&gt;
&lt;%@ taglib uri=&quot;/WEB-INF/struts-html.tld&quot; prefix=&quot;html&quot; %&gt;

&lt;html:html locale=&quot;true&quot;&gt;
&lt;head&gt;
&lt;title&gt;&lt;bean:message key=&quot;logon.title&quot;/&gt;&lt;/title&gt;
&lt;html:base/&gt;
&lt;/head&gt;
&lt;body bgcolor=&quot;white&quot;&gt;

<font color="#0080FF">&lt;html:errors/&gt;
</font>
<font color="#0080FF">&lt;html:form action=&quot;/logon&quot; focus=&quot;username&quot;&gt;
</font>&lt;table border=&quot;0&quot; width=&quot;100%&quot;&gt;

  &lt;tr&gt;
    &lt;th align=&quot;right&quot;&gt;
      &lt;bean:message key=&quot;prompt.username&quot;/&gt;
    &lt;/th&gt;
    &lt;td align=&quot;left&quot;&gt;
      &lt;html:text property=&quot;username&quot; size=&quot;16&quot; maxlength=&quot;16&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;th align=&quot;right&quot;&gt;
      &lt;bean:message key=&quot;prompt.password&quot;/&gt;
    &lt;/th&gt;
    &lt;td align=&quot;left&quot;&gt;
      &lt;html:password property=&quot;password&quot; size=&quot;16&quot; maxlength=&quot;16&quot;
                    redisplay=&quot;false&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td align=&quot;right&quot;&gt;
      &lt;html:submit property=&quot;submit&quot; value=&quot;Submit&quot;/&gt;
    &lt;/td&gt;
    &lt;td align=&quot;left&quot;&gt;
      &lt;html:reset/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

&lt;/table&gt;

&lt;/html:form&gt;

&lt;/body&gt;
&lt;/html:html&gt;</pre>
</div>
<ul>
  <li>
    <p align="left">A página logon.jsp usa o tag &quot;html:form&quot;:</li>
</ul>
<div align="left">
    <pre align="left" class="clsCode">&lt;html:form action=&quot;/logon&quot; focus=&quot;username&quot;&gt;</pre>
</div>
<ul>
  <li>
    Com isso, Struts vai gerar o seguinte HTML:</li>
</ul>
<pre class="clsCode">&lt;form   name=&quot;logonForm&quot;
      method=&quot;POST&quot;
      action=&quot;/struts-example/logon.do&quot;&gt;</pre>
<ul>
  <li>
    Este tag verifica a configuração da aplicação (que veremos adiante)
    procurando um bean especial (&quot;Form bean&quot;) relacionado com /logon.jsp</li>
  <li>
    Neste caso, o tag acha um tal Form bean e verifica se já foi instanciado</li>
  <li>
    Como não foi instanciado, um novo objeto é criado</li>
  <li>
    Quando o form é submetido via HTTP, Struts automaticamente transfere todos
    os campos do form (no request) par o Form bean</li>
  <li>
    O que você tem que fazer para que isso ocorra:
    <ul>
      <li>Definir uma classe para o Form bean (com getters e setters para os
        campos)</li>
      <li>Adicionar a classe à configuração da aplicação</li>
      <li>Ligar a classe ao mapeamento da ação, usando o mesmo nome (name=&quot;logonForm&quot;)</li>
    </ul>
  </li>
  <li>Isso pode ser visto no arquivo <a href="../../recursos/dir-struts-example.war/WEB-INF/struts-config.xml">struts-config.xml</a>
    (em <font color="#0080FF">azul</font>)</li>
</ul>
<pre class="clsCode">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot; ?&gt;

&lt;!DOCTYPE struts-config PUBLIC
          &quot;-//Apache Software Foundation//DTD Struts Configuration 1.0//EN&quot;
          &quot;http://jakarta.apache.org/struts/dtds/struts-config_1_0.dtd&quot;&gt;

&lt;struts-config&gt;

  &lt;!-- ========== Form Bean Definitions =================================== --&gt;
  &lt;form-beans&gt;

<font color="#0080FF">    &lt;!-- Logon form bean --&gt;
    &lt;form-bean      name=&quot;logonForm&quot;
                    type=&quot;org.apache.struts.webapp.example.LogonForm&quot;/&gt;
</font>
    &lt;!-- Registration form bean --&gt;
    &lt;form-bean      name=&quot;registrationForm&quot;
                    type=&quot;org.apache.struts.webapp.example.RegistrationForm&quot;/&gt;

    &lt;!-- Subscription form bean --&gt;
    &lt;form-bean      name=&quot;subscriptionForm&quot;
                    type=&quot;org.apache.struts.webapp.example.SubscriptionForm&quot;/&gt;

  &lt;/form-beans&gt;


  &lt;!-- ========== Global Forward Definitions ============================== --&gt;
  &lt;global-forwards&gt;
    &lt;forward   name=&quot;logoff&quot;               path=&quot;/logoff.do&quot;/&gt;
    &lt;forward   name=&quot;logon&quot;                path=&quot;/logon.jsp&quot;/&gt;
    &lt;forward   name=&quot;success&quot;              path=&quot;/mainMenu.jsp&quot;/&gt;
  &lt;/global-forwards&gt;


  &lt;!-- ========== Action Mapping Definitions ============================== --&gt;
  &lt;action-mappings&gt;

    &lt;!-- Edit user registration --&gt;
    &lt;action    path=&quot;/editRegistration&quot;
               type=&quot;org.apache.struts.webapp.example.EditRegistrationAction&quot;
               name=&quot;registrationForm&quot;
              scope=&quot;request&quot;
           validate=&quot;false&quot;&gt;
      &lt;forward name=&quot;success&quot;              path=&quot;/registration.jsp&quot;/&gt;
    &lt;/action&gt;

    &lt;!-- Edit mail subscription --&gt;
    &lt;action    path=&quot;/editSubscription&quot;
               type=&quot;org.apache.struts.webapp.example.EditSubscriptionAction&quot;
               name=&quot;subscriptionForm&quot;
              scope=&quot;request&quot;
           validate=&quot;false&quot;&gt;
      &lt;forward name=&quot;failure&quot;              path=&quot;/mainMenu.jsp&quot;/&gt;
      &lt;forward name=&quot;success&quot;              path=&quot;/subscription.jsp&quot;/&gt;
    &lt;/action&gt;

    &lt;!-- Process a user logoff --&gt;
    &lt;action    path=&quot;/logoff&quot;
               type=&quot;org.apache.struts.webapp.example.LogoffAction&quot;&gt;
      &lt;forward name=&quot;success&quot;              path=&quot;/index.jsp&quot;/&gt;
    &lt;/action&gt;

<font color="#0080FF">    &lt;!-- Process a user logon --&gt;
    &lt;action    path=&quot;/logon&quot;
               type=&quot;org.apache.struts.webapp.example.LogonAction&quot;
               name=&quot;logonForm&quot;
              scope=&quot;request&quot;
              input=&quot;/logon.jsp&quot;&gt;
    &lt;/action&gt;
</font>
    &lt;!-- Save user registration --&gt;
    &lt;action    path=&quot;/saveRegistration&quot;
               type=&quot;org.apache.struts.webapp.example.SaveRegistrationAction&quot;
               name=&quot;registrationForm&quot;
              scope=&quot;request&quot;
              input=&quot;/registration.jsp&quot;/&gt;

    &lt;!-- Save mail subscription --&gt;
    &lt;action    path=&quot;/saveSubscription&quot;
               type=&quot;org.apache.struts.webapp.example.SaveSubscriptionAction&quot;
               name=&quot;subscriptionForm&quot;
              scope=&quot;request&quot;
              input=&quot;/subscription.jsp&quot;&gt;
      &lt;forward name=&quot;success&quot;         path=&quot;/editRegistration.do?action=Edit&quot;/&gt;
    &lt;/action&gt;


    &lt;!-- Display the &quot;walking tour&quot; documentation --&gt;
    &lt;action    path=&quot;/tour&quot;
            forward=&quot;/tour.htm&quot;&gt;
    &lt;/action&gt;
  &lt;/action-mappings&gt;
&lt;/struts-config&gt;</pre>
<ul>
  <li>
    O &quot;Form tag&quot; tem muitas opções adicionais e pode tratar de
    eventos JavaScript (focus, onsubmit, ...), pode usar cascading stylesheets,
    etc.</li>
  <li>
    Durante a validação do Form, mensagens de erro podem ser adicionadas ao
    uma coleção-padrão do Struts
    <ul>
      <li>Depois, o tag &quot;&lt;html:errors/&gt;&quot; é tudo que você
        precisa para imprimir os erros e zerar a fila de mensagens</li>
      <li>Pode ter qualquer número de mensagens</li>
    </ul>
  </li>
  <li>Veja como a validação é feita com o Form bean, abaixo
    <ul>
      <li>É no método validate()</li>
      <li>Observe que LogonForm herda de ActionForm: é uma das formas para
        estender o
        framework Struts</li>
    </ul>
  </li>
</ul>
<pre class="clsCode">public final class LogonForm extends ActionForm {
    // ----------------------- Instance Variables
    /**
     * The password.
     */
    private String password = null;

    /**
     * The username.
     */
    private String username = null;


    // ----------------------- Properties
    /**
     * Return the password.
     */
    public String getPassword() {
        return (this.password);
    }

    /**
     * Set the password.
     *
     * @param password The new password
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * Return the username.
     */
    public String getUsername() {
        return (this.username);
    }

    /**
     * Set the username.
     *
     * @param username The new username
     */
    public void setUsername(String username) {
        this.username = username;
    }

    // ----------------------- Public Methods
    /**
     * Reset all properties to their default values.
     *
     * @param mapping The mapping used to select this instance
     * @param request The servlet request we are processing
     */
    public void reset(ActionMapping mapping, HttpServletRequest request) {
        this.password = null;
        this.username = null;
    }

    /**
     * Validate the properties that have been set from this HTTP request,
     * and return an &lt;code&gt;ActionErrors&lt;/code&gt; object that encapsulates any
     * validation errors that have been found.  If no errors are found, return
     * &lt;code&gt;null&lt;/code&gt; or an &lt;code&gt;ActionErrors&lt;/code&gt; object with no
     * recorded error messages.
     *
     * @param mapping The mapping used to select this instance
     * @param request The servlet request we are processing
     */
    public ActionErrors validate(ActionMapping mapping,
                 HttpServletRequest request) {

        ActionErrors errors = new ActionErrors();
        if ((username == null) || (username.length() &lt; 1))
            errors.add(&quot;username&quot;, new ActionError(&quot;error.username.required&quot;));
        if ((password == null) || (password.length() &lt; 1))
            errors.add(&quot;password&quot;, new ActionError(&quot;error.password.required&quot;));
        return errors;
    }
}</pre>
<ul>
</ul>
<h4 align="left">LogonAction.java</h4>
<ul>
  <li>
    No tag html:form, a ação (action=&quot;/logon&quot;) vai submeter o
    formulário a &quot;/logon.do&quot;
    <ul>
      <li>É o tag html:form que faz isso automaticamente</li>
    </ul>
  </li>
  <li>Você pode verificar que, no web.xml, qualquer menção a &quot;*.do&quot;
    vai ativar o servlet &quot;action&quot;
    <ul>
      <li>Este é o nosso servlet de controle que é configurado com
        struts-config.xml</li>
      <li>Por convenção, se um link deve passar por um &quot;ação struts&quot;
        configurada em struts-config.xml, use &quot;.do&quot; na terminação
        <ul>
          <li>Isso é o caso quando queremos tratamento com um Action Bean que
            struts faz automaticamente (com &lt;action ... type=ActionBean&gt;)</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
<pre class="clsCode">  &lt;!-- Action Servlet Mapping --&gt;
  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;action&lt;/servlet-name&gt;
    &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;</pre>
<ul>
  <li>
    No arquivo struts-config.xml, já vimos que temos a seguinte informação:</li>
</ul>
<pre class="clsCode"><font color="#0080FF">    &lt;!-- Logon form bean --&gt;
    &lt;form-bean      name=&quot;logonForm&quot;
                    type=&quot;org.apache.struts.webapp.example.LogonForm&quot;/&gt;
...
    &lt;!-- Process a user logon --&gt;
    &lt;action    path=&quot;/logon&quot;
               type=&quot;org.apache.struts.webapp.example.LogonAction&quot;
               name=&quot;logonForm&quot;
              scope=&quot;request&quot;
              input=&quot;/logon.jsp&quot;&gt;
    &lt;/action&gt;</font></pre>
<ul>
  <li>
    O mapeamento de ação (action mapping) diz que um request para logon.do vai ser
    entregue ao objeto LogonAction
    <ul>
      <li>Objetos de ação são os objetos que vão processar o request</li>
      <li>Essencialmente, vão fazer a ponte para o business logic</li>
      <li>Eles não devem conter business logic, só fazer a ponte</li>
      <li>Portanto, dizemos que eles são uma extensão do crontroller (ajudam a
        mapear a entrada para ativar o business logic)</li>
    </ul>
  </li>
  <li>
    Se alguma entrada do usuário for necessária, o LogonAction vai ativar a
    página &quot;/logon.jsp&quot; devido ao campo &quot;input&quot;</li>
  <li>
    O objeto LogonAction vai obter os parâmetros do objeto LogonForm</li>
  <li>
    Podemos examinar <a href="../../recursos/dir-struts-example.war/WEB-INF/src/org/apache/struts/webapp/example/LogonAction.java">LogonAction.java</a></li>
</ul>
<pre class="clsCode">public final class LogonAction extends Action {
    // ------------------------- Public Methods
    /**
     * Process the specified HTTP request, and create the corresponding HTTP
     * response (or forward to another web component that will create it).
     * Return an &lt;code&gt;ActionForward&lt;/code&gt; instance describing where and how
     * control should be forwarded, or &lt;code&gt;null&lt;/code&gt; if the response has
     * already been completed.
     *
     * @param mapping The ActionMapping used to select this instance
     * @param actionForm The optional ActionForm bean for this request (if any)
     * @param request The HTTP request we are processing
     * @param response The HTTP response we are creating
     *
     * @exception IOException if an input/output error occurs
     * @exception ServletException if a servlet exception occurs
     */
    public ActionForward perform(ActionMapping mapping,
                 ActionForm form,
                 HttpServletRequest request,
                 HttpServletResponse response)
           throws IOException, ServletException {

        // Extract attributes we will need
        Locale locale = getLocale(request);
        MessageResources messages = getResources();
        User user = null;
    
        // Validate the request parameters specified by the user
        ActionErrors errors = new ActionErrors();
        String username = ((LogonForm) form).getUsername();
        String password = ((LogonForm) form).getPassword();
        Hashtable database = (Hashtable)
          servlet.getServletContext().getAttribute(Constants.DATABASE_KEY);
        if (database == null)
            errors.add(ActionErrors.GLOBAL_ERROR,
                           new ActionError(&quot;error.database.missing&quot;));
        else {
            user = (User) database.get(username);
            if ((user != null) &amp;&amp; !user.getPassword().equals(password))
                user = null;
            if (user == null)
                errors.add(ActionErrors.GLOBAL_ERROR,
                               new ActionError(&quot;error.password.mismatch&quot;));
        }
    
        // Report any errors we have discovered back to the original form
        if (!errors.empty()) {
            saveErrors(request, errors);
            return (new ActionForward(mapping.getInput()));
        }
    
        // Save our logged-in user in the session
        HttpSession session = request.getSession();
        session.setAttribute(Constants.USER_KEY, user);
        if (servlet.getDebug() &gt;= 1)
            servlet.log(&quot;LogonAction: User '&quot; + user.getUsername() +
                        &quot;' logged on in session &quot; + session.getId());
    
         // Remove the obsolete form bean
        if (mapping.getAttribute() != null) {
             request.removeAttribute(mapping.getAttribute());
         }
    
        // Forward control to the specified success URI
        return (mapping.findForward(&quot;success&quot;));
    }
}</pre>
<ul>
  <li>
    Observe que LogonAction usa o DatabaseServlet para verificar usuário e
    senha</li>
  <li>
    Se o logon não estiver ok, erros são adicionados e encaminhamos o controle
    para o formulário de entrada:</li>
</ul>
<pre class="clsCode">	    return (new ActionForward(mapping.getInput()));</pre>
<ul>
  <li>
    Veja que aqui LogonAction está fazendo business logic!
    <ul>
      <li>Isso deveria estar em outro lugar (o autor do programa reconhece)</li>
    </ul>
  </li>
  <li>
    Se não houver erro, LogonAction coloca o User bean no contexto de sessão e
    encaminha o controle para a ação &quot;success&quot;
    <ul>
      <li>Veremos onde isso vai daqui a pouco</li>
    </ul>
  </li>
</ul>
<pre class="clsCode">	return (mapping.findForward(&quot;success&quot;));</pre>
<ul>
  <li>
    Agora, faça um logon bem sucedido com nome/senha=user/pass&nbsp;</li>
</ul>
<h4 align="left">struts-config.xml, novamente</h4>
<ul>
  <li>
    struts-config.xml diz onde o controle realmente vai:
    <ul>
      <li>Como não há indicação no próprio mapeamento da ação, verifique
        o &quot;global-forward&quot;:</li>
    </ul>
    <pre class="clsCode">  &lt;global-forwards&gt;
    &lt;forward   name=&quot;logoff&quot;               path=&quot;/logoff.do&quot;/&gt;
    &lt;forward   name=&quot;logon&quot;                path=&quot;/logon.jsp&quot;/&gt;
<font color="#0080FF">    &lt;forward   name=&quot;success&quot;              path=&quot;/mainMenu.jsp&quot;/&gt;
</font>  &lt;/global-forwards&gt;</pre>
  </li>
  <li>Você deve estar olhando para o menu principal</li>
  <li>Observe que a URL no seu browser é logon.do e não mainMenu.jsp
    <ul>
      <li>A última coisa que seu browser fez foi fazer uma submissão de
        formulário para logon.do</li>
      <li>Ele não sabe que depois houve um desvio para mainMenu.jsp</li>
      <li>É por isso que o tag html:base é importante
        <ul>
          <li>Paths serão relativos à página retornada e não à URL
            submetida</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
<h3 align="left">A página mainMenu.jsp</h3>
<ul>
  <li>
    <p align="left">Aqui está a página <a href="../../recursos/dir-struts-example.war/mainMenu.jsp">mainMenu.jsp</a></li>
</ul>
<div align="left">
    <pre align="left" class="clsCode">&lt;%@ page language=&quot;java&quot; %&gt;
&lt;%@ taglib uri=&quot;/WEB-INF/app.tld&quot; prefix=&quot;app&quot; %&gt;
&lt;%@ taglib uri=&quot;/WEB-INF/struts-bean.tld&quot; prefix=&quot;bean&quot; %&gt;
&lt;%@ taglib uri=&quot;/WEB-INF/struts-html.tld&quot; prefix=&quot;html&quot; %&gt;
<font color="#0080FF">&lt;app:checkLogon/&gt;
&lt;jsp:useBean id=&quot;user&quot; scope=&quot;session&quot; type=&quot;org.apache.struts.webapp.example.User&quot;/&gt;
</font>
&lt;html:html&gt;
&lt;head&gt;
&lt;title&gt;&lt;bean:message key=&quot;mainMenu.title&quot;/&gt;&lt;/title&gt;
&lt;html:base/&gt;
&lt;/head&gt;
&lt;body bgcolor=&quot;white&quot;&gt;

&lt;h3&gt;&lt;bean:message key=&quot;mainMenu.heading&quot;/&gt;
<font color="#0080FF">&lt;jsp:getProperty name=&quot;user&quot; property=&quot;username&quot;/&gt;</font>&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;html:link page=&quot;/editRegistration.do?action=Edit&quot;&gt;&lt;bean:message key=&quot;mainMenu.registration&quot;/&gt;&lt;/html:link&gt;&lt;/li&gt;
&lt;li&gt;&lt;html:link forward=&quot;logoff&quot;&gt;&lt;bean:message key=&quot;mainMenu.logoff&quot;/&gt;&lt;/html:link&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html:html&gt;</pre>
</div>
<ul>
  <li>
    <p align="left">A primeira coisa interessante é:</li>
</ul>
<div align="left">
  <pre align="left" class="clsCode">&lt;app:checkLogon/&gt;</pre>
</div>
<ul>
  <li>
    <p align="left">Isso é um custom tag só desta aplicação
    <ul>
      <li>
        <p align="left">Não veremos como é implementado agora porque não
        sabemos como criar custom tags (ainda :-))</li>
      <li>
        <p align="left">Porém, é um excelente exemplo do poder de custom tags
        para encapsular lógica de aplicação</li>
      <li>
        <p align="left">Este tag verifica se um usuário está logado</li>
      <li>
        <p align="left">Se não tiver, o controle vai para &quot;/logon.jsp&quot;</li>
      <li>
        <p align="left">Se quiser ter certeza que uma página é acessada apenas
        quando há um logon, use &quot;&lt;app:checkLogon/&gt;&quot; no início
        da página JSP</li>
    </ul>
  </li>
  <li>
    <p align="left">A segunda coisa interessante é que a mensagem inicial da
    página contém o nome do usuário
    <ul>
      <li>
        <p align="left">Isso foi feito com um jsp:useBean normal (não é Struts)</li>
    </ul>
  </li>
</ul>
<div align="left">
  <pre align="left" class="clsCode">&lt;jsp:useBean id=&quot;user&quot; scope=&quot;session&quot; type=&quot;org.apache.struts.webapp.example.User&quot;/&gt;
...
&lt;jsp:getProperty name=&quot;user&quot; property=&quot;username&quot;/&gt;</pre>
</div>
<ul>
  <li>
    <p align="left">Finalmente, tem dois tags html:link sem novidades</li>
  <li>
    <p align="left">Vejamos o que struts-config.xml diz sobre editRegistration:</li>
</ul>
<div align="left">
  <pre align="left" class="clsCode">&lt;!-- Registration form bean --&gt;
  &lt;form-bean name=&quot;registrationForm&quot;
             type=&quot;org.apache.struts.webapp.example.RegistrationForm&quot;/&gt;
...
&lt;!-- Edit user registration --&gt;
  &lt;action    path=&quot;/editRegistration&quot;
             type=&quot;org.apache.struts.webapp.example.EditRegistrationAction&quot;
             name=&quot;registrationForm&quot;
            scope=&quot;request&quot;
<font color="#0080FF">         validate=&quot;false&quot;&gt;</font>
    &lt;forward name=&quot;success&quot; path=&quot;/registration.jsp&quot;/&gt;
  &lt;/action&gt;</pre>
</div>
<ul>
  <li>
    <p align="left">Nada de novo: a ação /editRegistration:
    <ul>
      <li>
        <p align="left">Está mapeada para EditRegistrationAction</li>
      <li>
        <p align="left">Usa um bean de validação de formulário
        RegistrationForm</li>
      <li>
        <p align="left">usa registration.jsp como input</li>
    </ul>
  </li>
  <li>
    <p align="left">Observe que nem toda página precisa usar um Form bean.
    <ul>
      <li>
        <p align="left">É interessante para validar dados digitados pelo usuário</li>
      <li>
        <p align="left">É interessante também para juntar dados de um
        formulário, como é o caso aqui
        <ul>
          <li>
            <p align="left">Observe a linha <font color="#0080FF">validate=&quot;false&quot;</font>,
            acima</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
<h4 align="left">EditRegistrationAction.java</h4>
<ul>
  <li>
    O objeto EditRegistrationAction faz duas coisas
    <ul>
      <li>Cria uma nova assinatura (link com ?Create)</li>
      <li>Edita uma assinatura (link com ?Edit)</li>
    </ul>
  </li>
  <li>Veja <a href="../../recursos/dir-struts-example.war/WEB-INF/src/org/apache/struts/webapp/example/EditRegistrationAction.java">EditRegistrationAction.java</a>
    <ul>
      <li>Examine o código com cuidado</li>
      <li>O propósito deste objeto é popular o RegistrationForm para permitir
        a edição (na página registration.jsp que veremos depois)&nbsp;</li>
    </ul>
  </li>
</ul>
<pre class="clsCode">public final class EditRegistrationAction extends Action {


    // --------------------------------------------------------- Public Methods


    /**
     * Process the specified HTTP request, and create the corresponding HTTP
     * response (or forward to another web component that will create it).
     * Return an &lt;code&gt;ActionForward&lt;/code&gt; instance describing where and how
     * control should be forwarded, or &lt;code&gt;null&lt;/code&gt; if the response has
     * already been completed.
     *
     * @param mapping The ActionMapping used to select this instance
     * @param actionForm The optional ActionForm bean for this request (if any)
     * @param request The HTTP request we are processing
     * @param response The HTTP response we are creating
     *
     * @exception IOException if an input/output error occurs
     * @exception ServletException if a servlet exception occurs
     */
    public ActionForward perform(ActionMapping mapping,
                 ActionForm form,
                 HttpServletRequest request,
                 HttpServletResponse response)
           throws IOException, ServletException {

        // Extract attributes we will need
        Locale locale = getLocale(request);
        MessageResources messages = getResources();
        HttpSession session = request.getSession();
        String action = request.getParameter(&quot;action&quot;);
        if (action == null)
            action = &quot;Create&quot;;
        if (servlet.getDebug() &gt;= 1)
            servlet.log(&quot;EditRegistrationAction:  Processing &quot; + action +
                        &quot; action&quot;);
    
        // Is there a currently logged on user?
        User user = null;
        if (!&quot;Create&quot;.equals(action)) {
            user = (User) session.getAttribute(Constants.USER_KEY);
            if (user == null) {
                if (servlet.getDebug() &gt;= 1)
                    servlet.log(&quot; User is not logged on in session &quot;
                                + session.getId());
                return (servlet.findForward(&quot;logon&quot;));
            }
        }
    
        // Populate the user registration form
        if (form == null) {
            if (servlet.getDebug() &gt;= 1)
                servlet.log(&quot; Creating new RegistrationForm bean under key &quot;
                            + mapping.getAttribute());
            form = new RegistrationForm();
            if (&quot;request&quot;.equals(mapping.getScope()))
                request.setAttribute(mapping.getAttribute(), form);
            else
                session.setAttribute(mapping.getAttribute(), form);
        }
        RegistrationForm regform = (RegistrationForm) form;
        if (user != null) {
            if (servlet.getDebug() &gt;= 1)
                servlet.log(&quot; Populating form from &quot; + user);
            try {
                PropertyUtils.copyProperties(regform, user);
                regform.setAction(action);
                regform.setPassword(null);
                regform.setPassword2(null);
            } catch (InvocationTargetException e) {
                Throwable t = e.getTargetException();
                if (t == null)
                    t = e;
                servlet.log(&quot;RegistrationForm.populate&quot;, t);
                throw new ServletException(&quot;RegistrationForm.populate&quot;, t);
            } catch (Throwable t) {
                servlet.log(&quot;RegistrationForm.populate&quot;, t);
                throw new ServletException(&quot;RegistrationForm.populate&quot;, t);
            }
        }
    
        // Set a transactional control token to prevent double posting
        if (servlet.getDebug() &gt;= 1)
            servlet.log(&quot; Setting transactional control token&quot;);
        saveToken(request);
    
        // Forward control to the edit user registration page
        if (servlet.getDebug() &gt;= 1)
            servlet.log(&quot; Forwarding to 'success' page&quot;);
        return (mapping.findForward(&quot;success&quot;));
    }
}</pre>
<h3 align="left">A página registration.jsp</h3>
<ul>
  <li>
    No mainMenu, clique em &quot;Edit your user registration profile&quot; e
    chegamos ao coração da aplicação: a página de manipulação de cadastro
    das assinaturas</li>
  <li>
    Aqui está a página <a href="../../recursos/dir-struts-example.war/registration.jsp">registration.jsp</a></li>
</ul>
<pre class="clsCode">&lt;%@ page language=&quot;java&quot; %&gt;
&lt;%@ taglib uri=&quot;/WEB-INF/app.tld&quot;    prefix=&quot;app&quot; %&gt;
&lt;%@ taglib uri=&quot;/WEB-INF/struts-bean.tld&quot; prefix=&quot;bean&quot; %&gt;
&lt;%@ taglib uri=&quot;/WEB-INF/struts-html.tld&quot; prefix=&quot;html&quot; %&gt;
&lt;%@ taglib uri=&quot;/WEB-INF/struts-logic.tld&quot; prefix=&quot;logic&quot; %&gt;
&lt;logic:equal name=&quot;registrationForm&quot; property=&quot;action&quot;
            scope=&quot;request&quot; value=&quot;Edit&quot;&gt;
  &lt;app:checkLogon/&gt;
&lt;/logic:equal&gt;

&lt;html:html&gt;
&lt;head&gt;
&lt;logic:equal name=&quot;registrationForm&quot; property=&quot;action&quot;
            scope=&quot;request&quot; value=&quot;Create&quot;&gt;
  &lt;title&gt;&lt;bean:message key=&quot;registration.title.create&quot;/&gt;&lt;/title&gt;
&lt;/logic:equal&gt;
&lt;logic:equal name=&quot;registrationForm&quot; property=&quot;action&quot;
            scope=&quot;request&quot; value=&quot;Edit&quot;&gt;
  &lt;title&gt;&lt;bean:message key=&quot;registration.title.edit&quot;/&gt;&lt;/title&gt;
&lt;/logic:equal&gt;
&lt;html:base/&gt;
&lt;/head&gt;
&lt;body bgcolor=&quot;white&quot;&gt;

&lt;html:errors/&gt;

&lt;html:form action=&quot;/saveRegistration&quot;&gt;
&lt;html:hidden property=&quot;action&quot;/&gt;
&lt;table border=&quot;0&quot; width=&quot;100%&quot;&gt;

  &lt;tr&gt;
    &lt;th align=&quot;right&quot;&gt;
      &lt;bean:message key=&quot;prompt.username&quot;/&gt;
    &lt;/th&gt;
    &lt;td align=&quot;left&quot;&gt;
<font color="#0080FF">      &lt;logic:equal name=&quot;registrationForm&quot; property=&quot;action&quot;
                  scope=&quot;request&quot; value=&quot;Create&quot;&gt;
        &lt;html:text property=&quot;username&quot; size=&quot;16&quot; maxlength=&quot;16&quot;/&gt;
</font>      &lt;/logic:equal&gt;
      &lt;logic:equal name=&quot;registrationForm&quot; property=&quot;action&quot;
                  scope=&quot;request&quot; value=&quot;Edit&quot;&gt;
        &lt;bean:write name=&quot;registrationForm&quot; property=&quot;username&quot;
                   scope=&quot;request&quot; filter=&quot;true&quot;/&gt;
<font color="#0080FF">	&lt;html:hidden property=&quot;username&quot;/&gt;
</font>      &lt;/logic:equal&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;th align=&quot;right&quot;&gt;
      &lt;bean:message key=&quot;prompt.password&quot;/&gt;
    &lt;/th&gt;
    &lt;td align=&quot;left&quot;&gt;
<font color="#0080FF">      &lt;html:password property=&quot;password&quot; size=&quot;16&quot; maxlength=&quot;16&quot;/&gt;
</font>    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;th align=&quot;right&quot;&gt;
      &lt;bean:message key=&quot;prompt.password2&quot;/&gt;
    &lt;/th&gt;
    &lt;td align=&quot;left&quot;&gt;
      &lt;html:password property=&quot;password2&quot; size=&quot;16&quot; maxlength=&quot;16&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;th align=&quot;right&quot;&gt;
      &lt;bean:message key=&quot;prompt.fullName&quot;/&gt;
    &lt;/th&gt;
    &lt;td align=&quot;left&quot;&gt;
      &lt;html:text property=&quot;fullName&quot; size=&quot;50&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;th align=&quot;right&quot;&gt;
      &lt;bean:message key=&quot;prompt.fromAddress&quot;/&gt;
    &lt;/th&gt;
    &lt;td align=&quot;left&quot;&gt;
      &lt;html:text property=&quot;fromAddress&quot; size=&quot;50&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;th align=&quot;right&quot;&gt;
      &lt;bean:message key=&quot;prompt.replyToAddress&quot;/&gt;
    &lt;/th&gt;
    &lt;td align=&quot;left&quot;&gt;
      &lt;html:text property=&quot;replyToAddress&quot; size=&quot;50&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td align=&quot;right&quot;&gt;
<font color="#0080FF">      &lt;html:submit&gt;
</font>        &lt;bean:message key=&quot;button.save&quot;/&gt;
      &lt;/html:submit&gt;
    &lt;/td&gt;
    &lt;td align=&quot;left&quot;&gt;
<font color="#0080FF">      &lt;html:reset&gt;
</font>        &lt;bean:message key=&quot;button.reset&quot;/&gt;
      &lt;/html:reset&gt;
      &amp;nbsp;
 <font color="#0080FF">     &lt;html:cancel&gt;
</font>        &lt;bean:message key=&quot;button.cancel&quot;/&gt;
      &lt;/html:cancel&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

&lt;/table&gt;
&lt;/html:form&gt;

&lt;logic:equal name=&quot;registrationForm&quot; property=&quot;action&quot;
            scope=&quot;request&quot; value=&quot;Edit&quot;&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;h3&gt;&lt;bean:message key=&quot;heading.subscriptions&quot;/&gt;&lt;/h3&gt;
&lt;/div&gt;

&lt;table border=&quot;1&quot; width=&quot;100%&quot;&gt;

  &lt;tr&gt;
    &lt;th align=&quot;center&quot; width=&quot;30%&quot;&gt;
      &lt;bean:message key=&quot;heading.host&quot;/&gt;
    &lt;/th&gt;
    &lt;th align=&quot;center&quot; width=&quot;25%&quot;&gt;
      &lt;bean:message key=&quot;heading.user&quot;/&gt;
    &lt;/th&gt;
    &lt;th align=&quot;center&quot; width=&quot;10%&quot;&gt;
      &lt;bean:message key=&quot;heading.type&quot;/&gt;
    &lt;/th&gt;
    &lt;th align=&quot;center&quot; width=&quot;10%&quot;&gt;
      &lt;bean:message key=&quot;heading.autoConnect&quot;/&gt;
    &lt;/th&gt;
    &lt;th align=&quot;center&quot; width=&quot;15%&quot;&gt;
      &lt;bean:message key=&quot;heading.action&quot;/&gt;
    &lt;/th&gt;
  &lt;/tr&gt;

&lt;logic:iterate id=&quot;subscription&quot; name=&quot;user&quot; property=&quot;subscriptions&quot;&gt;
  &lt;tr&gt;
    &lt;td align=&quot;left&quot;&gt;
      &lt;bean:write name=&quot;subscription&quot; property=&quot;host&quot; filter=&quot;true&quot;/&gt;
    &lt;/td&gt;
    &lt;td align=&quot;left&quot;&gt;
      &lt;bean:write name=&quot;subscription&quot; property=&quot;username&quot; filter=&quot;true&quot;/&gt;
    &lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;
      &lt;bean:write name=&quot;subscription&quot; property=&quot;type&quot; filter=&quot;true&quot;/&gt;
    &lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;
      &lt;bean:write name=&quot;subscription&quot; property=&quot;autoConnect&quot;/&gt;
    &lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;
      &lt;app:linkSubscription page=&quot;/editSubscription.do?action=Delete&quot;&gt;
        &lt;bean:message key=&quot;registration.deleteSubscription&quot;/&gt;
      &lt;/app:linkSubscription&gt;
      &lt;app:linkSubscription page=&quot;/editSubscription.do?action=Edit&quot;&gt;
        &lt;bean:message key=&quot;registration.editSubscription&quot;/&gt;
      &lt;/app:linkSubscription&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/logic:iterate&gt;

&lt;/table&gt;

&lt;html:link page=&quot;/editSubscription.do?action=Create&quot; paramId=&quot;username&quot;
 paramName=&quot;registrationForm&quot; paramProperty=&quot;username&quot;&gt;
  &lt;bean:message key=&quot;registration.addSubscription&quot;/&gt;
&lt;/html:link&gt;
                     

&lt;/logic:equal&gt;

&lt;/body&gt;
&lt;/html:html&gt;</pre>
<ul>
  <li>
    Primeira coisa interessante: o tag &lt;logic:equal&gt;
    <ul>
      <li>registration.jsp pode ser usado para criar um novo usuário (?action=&quot;Create&quot;)
        ou para editar os dados de um usuário existente (?action=&quot;Edit&quot;)</li>
      <li>Só queremos verificar se alguém está logado no caso de Edit</li>
      <li>Veja como fazer isso (inserir uma decisão no JSP) abaixo:</li>
    </ul>
  </li>
</ul>
<pre class="clsCode">&lt;logic:equal name=&quot;registrationForm&quot; property=&quot;action&quot;
             scope=&quot;request&quot; value=&quot;Edit&quot;&gt;
  &lt;app:checkLogon/&gt;
&lt;/logic:equal&gt;</pre>
<ul>
  <li>O tag &lt;html:equal&gt; é usado em muito lugares para decidir o que
    colocar na página</li>
  <li>Segunda coisa interessante
    <ul>
      <li>Struts fornece tags para ajudar a criar campos de entrada num
        formulário:</li>
    </ul>
  </li>
</ul>
<pre class="clsCode">        &lt;html:text property=&quot;username&quot; size=&quot;16&quot; maxlength=&quot;16&quot;/&gt;
...
      &lt;html:password property=&quot;password&quot; size=&quot;16&quot; maxlength=&quot;16&quot;/&gt;
...
      &lt;html:submit&gt;
...
      &lt;html:reset&gt;
...
      &lt;html:cancel&gt;</pre>
<ul>
  <li>Terceira coisa interessante
    <ul>
      <li>A forma padrão de escrever propriedades de beans na saída:</li>
    </ul>
  </li>
</ul>
<pre class="clsCode">        &lt;bean:write name=&quot;registrationForm&quot; property=&quot;username&quot;
                   scope=&quot;request&quot; filter=&quot;true&quot;/&gt;</pre>
<h4 align="left">logic:iterate</h4>
<ul>
  <li>
    <p align="left">Mais uma coisa interessante&nbsp; em registration.jsp é a
    forma de fazer um laço para exibir as assinaturas</li>
  <li>
    <p align="left">Usa-se o tag &quot;&lt;logic:iterate&gt;</li>
</ul>
<div align="left">
  <pre align="left" class="clsCode">&lt;logic:iterate id=&quot;subscription&quot; 
             name=&quot;user&quot; 
         property=&quot;subscriptions&quot;&gt;</pre>
</div>
<ul>
  <li>
    <p align="left">Este tag diz: itera na coleção &quot;subscriptions&quot;
    que é propriedade do bean &quot;user&quot; e chame cada objeto da coleção
    &quot;subscription&quot; para ser referenciado no laço</li>
  <li>
    <p align="left">Podemos agora fazer referência ao objeto da coleção:</li>
</ul>
<div align="left">
  <pre align="left" class="clsCode">      &lt;bean:write name=&quot;subscription&quot; property=&quot;host&quot; filter=&quot;true&quot;/&gt;</pre>
</div>
<ul>
  <li>
    <p align="left">filter=&quot;true&quot; significa transformar caracteres
    especiais tais como &quot;&lt;&quot; para &quot;&amp;lt;&quot;</li>
  <li>
    <p align="left">A coleção de um tag iterate pode ser:
    <ul>
      <li>
        <p align="left">Um array de objetos</li>
      <li>
        <p align="left">Um Iterator</li>
      <li>
        <p align="left">Uma Collection (incluindo Lists, Sets e Vectors)</li>
      <li>
        <p align="left">Um Map (incluindo tabelas hash)</li>
    </ul>
  </li>
</ul>
<h4 align="left">LinkSubscriptionTag.java e LinkUserTag.java</h4>
<ul>
  <li>
    <p align="left">Em registration.jsp, há dois custom tags, &lt;app:linkSubscription&gt;
    e &lt;app:linkUser&gt;, que não estudaremos</li>
  <li>
    <p align="left">São usados para encapsular a forma de gerar um link meio
    complicado</li>
</ul>
<h4 align="left">EditSubscriptionAction.java</h4>
<ul>
  <li>
    <p align="left">Agora, vamos adicionar uma assinatura</li>
  <li>
    <p align="left">struts-config.xml trata editSubscription assim:
    <ul>
      <li>
        <p align="left">Nada de novo aqui</li>
    </ul>
  </li>
</ul>
<div align="left">
    <pre align="left" class="clsCode">&lt;!-- Subscription form bean --&gt;
    &lt;form-bean name=&quot;subscriptionForm&quot;
               type=&quot;org.apache.struts.webapp.example.SubscriptionForm&quot;/&gt;
...
&lt;!-- Edit mail subscription --&gt;
    &lt;action    path=&quot;/editSubscription&quot;
               type=&quot;org.apache.struts.webapp.example.EditSubscriptionAction&quot;
               name=&quot;subscriptionForm&quot;
              scope=&quot;request&quot;
           validate=&quot;false&quot;&gt;
      &lt;forward name=&quot;failure&quot; path=&quot;/mainMenu.jsp&quot;/&gt;
      &lt;forward name=&quot;success&quot; path=&quot;/subscription.jsp&quot;/&gt;
    &lt;/action&gt;</pre>
</div>
<ul>
  <li>
    De acordo com as instruções em struts-config.xml, o controlador:
    <ul>
      <li>Se assegura de que haja um bean subscriptionForm</li>
      <li>Chama o método perform do EditSubscriptionAction</li>
    </ul>
  </li>
  <li>
    <p align="left">O arquivo <a href="../../recursos/dir-struts-example.war/WEB-INF/src/org/apache/struts/webapp/example/EditSubscriptionAction.java">EditSubscriptionAction.java</a>
    é mostrado abaixo</li>
</ul>
<div align="left">
  <pre align="left" class="clsCode">/**
 * Implementation of &lt;strong&gt;Action&lt;/strong&gt; that populates an instance of
 * &lt;code&gt;SubscriptionForm&lt;/code&gt; from the currently specified subscription.
 *
 * @author Craig R. McClanahan
 * @version $Revision: 1.1 $ $Date: 2003/04/25 13:04:37 $
 */

public final class EditSubscriptionAction extends Action {


    // --------------------------------------------------------- Public Methods


    /**
     * Process the specified HTTP request, and create the corresponding HTTP
     * response (or forward to another web component that will create it).
     * Return an &lt;code&gt;ActionForward&lt;/code&gt; instance describing where and how
     * control should be forwarded, or &lt;code&gt;null&lt;/code&gt; if the response has
     * already been completed.
     *
     * @param mapping The ActionMapping used to select this instance
     * @param actionForm The optional ActionForm bean for this request (if any)
     * @param request The HTTP request we are processing
     * @param response The HTTP response we are creating
     *
     * @exception IOException if an input/output error occurs
     * @exception ServletException if a servlet exception occurs
     */
    public ActionForward perform(ActionMapping mapping,
                 ActionForm form,
                 HttpServletRequest request,
                 HttpServletResponse response)
           throws IOException, ServletException {

        // Extract attributes we will need
        Locale locale = getLocale(request);
        MessageResources messages = getResources();
        HttpSession session = request.getSession();
        String action = request.getParameter(&quot;action&quot;);
        if (action == null)
            action = &quot;Create&quot;;
        String host = request.getParameter(&quot;host&quot;);
            if (servlet.getDebug() &gt;= 1)
                servlet.log(&quot;EditSubscriptionAction:  Processing &quot; + action +
                            &quot; action&quot;);
    
        // Is there a currently logged on user?
        User user = (User) session.getAttribute(Constants.USER_KEY);
        if (user == null) {
            if (servlet.getDebug() &gt;= 1)
                servlet.log(&quot; User is not logged on in session &quot;
                            + session.getId());
            return (servlet.findForward(&quot;logon&quot;));
        }
    
        // Identify the relevant subscription
        Subscription subscription = null;
        if (action.equals(&quot;Create&quot;)) {
            subscription = new Subscription();
            subscription.setUser(user);
        } else {
            subscription = user.findSubscription(host);
        }
        if (subscription == null) {
            if (servlet.getDebug() &gt;= 1)
            servlet.log(&quot; No subscription for user &quot; +
                    user.getUsername() + &quot; and host &quot; + host);
            return (mapping.findForward(&quot;failure&quot;));
        }
        session.setAttribute(Constants.SUBSCRIPTION_KEY, subscription);
    
        // Populate the subscription form
        if (form == null) {
            if (servlet.getDebug() &gt;= 1)
                servlet.log(&quot; Creating new SubscriptionForm bean under key &quot;
                            + mapping.getAttribute());
            form = new SubscriptionForm();
            if (&quot;request&quot;.equals(mapping.getScope()))
                request.setAttribute(mapping.getAttribute(), form);
            else
                session.setAttribute(mapping.getAttribute(), form);
        }
        SubscriptionForm subform = (SubscriptionForm) form;
        subform.setAction(action);
        if (servlet.getDebug() &gt;= 1)
            servlet.log(&quot; Populating form from &quot; + subscription);
        try {
            PropertyUtils.copyProperties(subform, subscription);
            subform.setAction(action);
        } catch (InvocationTargetException e) {
            Throwable t = e.getTargetException();
            if (t == null)
                t = e;
            servlet.log(&quot;SubscriptionForm.populate&quot;, t);
            throw new ServletException(&quot;SubscriptionForm.populate&quot;, t);
        } catch (Throwable t) {
            servlet.log(&quot;SubscriptionForm.populate&quot;, t);
            throw new ServletException(&quot;SubscriptionForm.populate&quot;, t);
        }
    
        // Forward control to the edit subscription page
        if (servlet.getDebug() &gt;= 1)
            servlet.log(&quot; Forwarding to 'success' page&quot;);
        return (mapping.findForward(&quot;success&quot;));
    }
}</pre>
</div>
<ul>
  <li>O método perform verifica que o usuário fez logon
    <ul>
      <li>Caso não tenha feito, o controle passa para logon:</li>
    </ul>
  </li>
</ul>
<pre class="clsCode">        return (servlet.findForward(&quot;logon&quot;));</pre>
<ul>
  <li>
    Quando a tarefa é &quot;Create&quot;, um novo objeto Subscription é criado
    <ul>
      <li>Caso contrário, com tarefa &quot;Edit&quot;, o objeto de assinaturas
        vem de <font color="#0080FF">user.findSubscription(host)</font></li>
    </ul>
  </li>
  <li>
    Finalmente, EditSubscriptionAction popula o Form bean (SubscriptionForm) a
    partir da assinatura (subscription, que é o banco de dados)
    <ul>
      <li>&quot;subform&quot; é a mesma coisa de &quot;form&quot;, mas com cast
        para não ter que&nbsp; fazer cast sempre</li>
      <li>A ação do Form bean é setada para &quot;Create&quot; ou &quot;Edit&quot;
        e o controle passa ao formulário de sucesso: subscription.jsp
        <ul>
          <li>Isso mostra como usar um Form Bean para passar informação entre servlets</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    Observe que o servlet cria apenas um objeto para cada ação
    <ul>
      <li>Já que cada request será executado num thread diferente mas usará
        este objeto único de ação, os objetos de ação devem ser &quot;multi-thread
        safe&quot;</li>
    </ul>
  </li>
</ul>
<h3 align="left">A página subscription.jsp</h3>
<ul>
  <li>
    <p align="left">Eis a página <a href="../../recursos/dir-struts-example.war/subscription.jsp">subscription.jsp</a></li>
</ul>
<div align="left">
    <pre align="left" class="clsCode">&lt;%@ page language=&quot;java&quot; %&gt;
&lt;%@ taglib uri=&quot;/WEB-INF/app.tld&quot;    prefix=&quot;app&quot; %&gt;
&lt;%@ taglib uri=&quot;/WEB-INF/struts-bean.tld&quot; prefix=&quot;bean&quot; %&gt;
&lt;%@ taglib uri=&quot;/WEB-INF/struts-html.tld&quot; prefix=&quot;html&quot; %&gt;
&lt;%@ taglib uri=&quot;/WEB-INF/struts-logic.tld&quot; prefix=&quot;logic&quot; %&gt;
&lt;app:checkLogon/&gt;

&lt;%-- In real life, these would be loaded from a database --%&gt;
<font color="#0080FF">&lt;%
  java.util.ArrayList list = new java.util.ArrayList();
  list.add(new org.apache.struts.webapp.example.LabelValueBean(&quot;IMAP Protocol&quot;, &quot;imap&quot;));
  list.add(new org.apache.struts.webapp.example.LabelValueBean(&quot;POP3 Protocol&quot;, &quot;pop3&quot;));
  pageContext.setAttribute(&quot;serverTypes&quot;, list);
%&gt;</font>

&lt;html:html&gt;
&lt;head&gt;
&lt;logic:equal name=&quot;subscriptionForm&quot; property=&quot;action&quot;
            scope=&quot;request&quot; value=&quot;Create&quot;&gt;
  &lt;title&gt;&lt;bean:message key=&quot;subscription.title.create&quot;/&gt;&lt;/title&gt;
&lt;/logic:equal&gt;
&lt;logic:equal name=&quot;subscriptionForm&quot; property=&quot;action&quot;
            scope=&quot;request&quot; value=&quot;Delete&quot;&gt;
  &lt;title&gt;&lt;bean:message key=&quot;subscription.title.delete&quot;/&gt;&lt;/title&gt;
&lt;/logic:equal&gt;
&lt;logic:equal name=&quot;subscriptionForm&quot; property=&quot;action&quot;
            scope=&quot;request&quot; value=&quot;Edit&quot;&gt;
  &lt;title&gt;&lt;bean:message key=&quot;subscription.title.edit&quot;/&gt;&lt;/title&gt;
&lt;/logic:equal&gt;
&lt;html:base/&gt;
&lt;/head&gt;
&lt;body bgcolor=&quot;white&quot;&gt;

&lt;html:errors/&gt;

&lt;html:form action=&quot;/saveSubscription&quot; focus=&quot;host&quot;&gt;
&lt;html:hidden property=&quot;action&quot;/&gt;
&lt;table border=&quot;0&quot; width=&quot;100%&quot;&gt;

  &lt;tr&gt;
    &lt;th align=&quot;right&quot;&gt;
      &lt;bean:message key=&quot;prompt.username&quot;/&gt;
    &lt;/th&gt;
    &lt;td align=&quot;left&quot;&gt;
        &lt;bean:write name=&quot;user&quot; property=&quot;username&quot; filter=&quot;true&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;th align=&quot;right&quot;&gt;
      &lt;bean:message key=&quot;prompt.mailHostname&quot;/&gt;
    &lt;/th&gt;
    &lt;td align=&quot;left&quot;&gt;
      &lt;html:textarea property=&quot;host&quot; cols=&quot;50&quot; rows=&quot;1&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;th align=&quot;right&quot;&gt;
      &lt;bean:message key=&quot;prompt.mailUsername&quot;/&gt;
    &lt;/th&gt;
    &lt;td align=&quot;left&quot;&gt;
      &lt;html:text property=&quot;username&quot; size=&quot;50&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;th align=&quot;right&quot;&gt;
      &lt;bean:message key=&quot;prompt.mailPassword&quot;/&gt;
    &lt;/th&gt;
    &lt;td align=&quot;left&quot;&gt;
      &lt;html:password property=&quot;password&quot; size=&quot;50&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;th align=&quot;right&quot;&gt;
      &lt;bean:message key=&quot;prompt.mailServerType&quot;/&gt;
    &lt;/th&gt;
    &lt;td align=&quot;left&quot;&gt;
<font color="#0080FF">      &lt;html:select property=&quot;type&quot;&gt;
        &lt;html:options collection=&quot;serverTypes&quot; property=&quot;value&quot;
                   labelProperty=&quot;label&quot;/&gt;
      &lt;/html:select&gt;
</font>    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;th align=&quot;right&quot;&gt;
      &lt;bean:message key=&quot;prompt.autoConnect&quot;/&gt;
    &lt;/th&gt;
    &lt;td align=&quot;left&quot;&gt;
<font color="#0080FF">      &lt;html:checkbox property=&quot;autoConnect&quot;/&gt;
</font>    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td align=&quot;right&quot;&gt;
      &lt;logic:equal name=&quot;subscriptionForm&quot; property=&quot;action&quot;
                  scope=&quot;request&quot; value=&quot;Create&quot;&gt;
        &lt;html:submit&gt;
          &lt;bean:message key=&quot;button.save&quot;/&gt;
        &lt;/html:submit&gt;
      &lt;/logic:equal&gt;
      &lt;logic:equal name=&quot;subscriptionForm&quot; property=&quot;action&quot;
                  scope=&quot;request&quot; value=&quot;Delete&quot;&gt;
        &lt;html:submit&gt;
          &lt;bean:message key=&quot;button.confirm&quot;/&gt;
        &lt;/html:submit&gt;
      &lt;/logic:equal&gt;
      &lt;logic:equal name=&quot;subscriptionForm&quot; property=&quot;action&quot;
                  scope=&quot;request&quot; value=&quot;Edit&quot;&gt;
        &lt;html:submit&gt;
          &lt;bean:message key=&quot;button.save&quot;/&gt;
        &lt;/html:submit&gt;
      &lt;/logic:equal&gt;
    &lt;/td&gt;
    &lt;td align=&quot;left&quot;&gt;
      &lt;logic:notEqual name=&quot;subscriptionForm&quot; property=&quot;action&quot;
                     scope=&quot;request&quot; value=&quot;Delete&quot;&gt;
        &lt;html:reset&gt;
          &lt;bean:message key=&quot;button.reset&quot;/&gt;
        &lt;/html:reset&gt;
      &lt;/logic:notEqual&gt;
      &amp;nbsp;
      &lt;html:cancel&gt;
        &lt;bean:message key=&quot;button.cancel&quot;/&gt;
      &lt;/html:cancel&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

&lt;/table&gt;

&lt;/html:form&gt;

&lt;/body&gt;
&lt;/html:html&gt;</pre>
</div>
<ul>
  <li>
    Observe que as tarefas aqui são &quot;Create&quot;, &quot;Delete&quot;,
    &quot;Edit&quot;</li>
  <li>
    Primeira coisa interessante: o tag <font color="#0080FF">html:options</font>
    <ul>
      <li>Struts pode iterar automaticamente numa coleção para construir uma
        lista de opções em HTML</li>
      <li>Veja o bloco &lt;html:options&gt; acima</li>
      <li>Aqui, a mesma coleção mantém labels e valores (em propriedades
        &quot;label&quot; e &quot;value&quot; de LabelValueBean) mas poderia ser
        duas coleções</li>
      <li>A fonte pode ser Collection, Iterator ou Map</li>
      <li>Para fins de demonstração, o array serverTypes foi criado no início
        da página, mas tipicamente seria carregado de um banco de dados</li>
    </ul>
  </li>
  <li>Segunda coisa interessante: o tag <font color="#0080FF">&lt;html:checkbox&gt;</font></li>
</ul>
<h4 align="left">SubscriptionForm.java</h4>
<ul>
  <li>
    <p align="left">Podemos ver alguns detalhes adicionais sobre validação de
    formulários em <a href="../../recursos/dir-struts-example.war/WEB-INF/src/org/apache/struts/webapp/example/SubscriptionForm.java">SubscriptionForm.java</a></li>
</ul>
<div align="left">
    <pre align="left" class="clsCode">public final class SubscriptionForm extends ActionForm  {
    // --------------------------------------------------- Instance Variables
    /**
     * The maintenance action we are performing (Create or Edit).
     */
    private String action = &quot;Create&quot;;

    /**
     * Should we auto-connect at startup time?
     */
    private boolean autoConnect = false;

    /**
     * The host name.
     */
    private String host = null;

    /**
     * The password.
     */
    private String password = null;

    /**
     * The subscription type.
     */
    private String type = null;

    /**
     * The username.
     */
    private String username = null;

    // ----------------------------------------------------------- Properties
    /**
     * Return the maintenance action.
     */
    public String getAction() {
        return (this.action);
    }

    /**
     * Set the maintenance action.
     *
     * @param action The new maintenance action.
     */
    public void setAction(String action) {
        this.action = action;
    }

    /**
     * Return the auto-connect flag.
     */
    public boolean getAutoConnect() {
        return (this.autoConnect);
    }

    /**
     * Set the auto-connect flag.
     *
     * @param autoConnect The new auto-connect flag
     */
    public void setAutoConnect(boolean autoConnect) {
        this.autoConnect = autoConnect;
    }

    /**
     * Return the host name.
     */
    public String getHost() {
        return (this.host);
    }

    /**
     * Set the host name.
     *
     * @param host The host name
     */
    public void setHost(String host) {
        this.host = host;
    }

    /**
     * Return the password.
     */
    public String getPassword() {
        return (this.password);
    }

    /**
     * Set the password.
     *
     * @param password The new password
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * Return the subscription type.
     */
    public String getType() {
        return (this.type);
    }

    /**
     * Set the subscription type.
     *
     * @param type The subscription type
     */
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Return the username.
     */
    public String getUsername() {
        return (this.username);
    }

    /**
     * Set the username.
     *
     * @param username The new username
     */
    public void setUsername(String username) {
        this.username = username;
    }

    // --------------------------------------------------------- Public Methods
    /**
     * Reset all properties to their default values.
     *
     * @param mapping The mapping used to select this instance
     * @param request The servlet request we are processing
     */
<font color="#0080FF">    public void reset(ActionMapping mapping, HttpServletRequest request) {
        this.action = &quot;Create&quot;;
        this.autoConnect = false;
        this.host = null;
        this.password = null;
        this.type = null;
        this.username = null;
    }
</font>
    /**
     * Validate the properties that have been set from this HTTP request,
     * and return an &lt;code&gt;ActionErrors&lt;/code&gt; object that encapsulates any
     * validation errors that have been found.  If no errors are found, return
     * &lt;code&gt;null&lt;/code&gt; or an &lt;code&gt;ActionErrors&lt;/code&gt; object with no
     * recorded error messages.
     *
     * @param mapping The mapping used to select this instance
     * @param request The servlet request we are processing
     */
<font color="#0080FF">    public ActionErrors validate(ActionMapping mapping,
                                 HttpServletRequest request) {

        ActionErrors errors = new ActionErrors();
</font>        <font color="#0080FF">if ((host == null) || (host.length() &lt; 1))
            errors.add(&quot;host&quot;,
                       new ActionError(&quot;error.host.required&quot;));
</font>        <font color="#0080FF">if ((username == null) || (username.length() &lt; 1))
            errors.add(&quot;username&quot;,
                       new ActionError(&quot;error.username.required&quot;));
</font>        <font color="#0080FF">if ((password == null) || (password.length() &lt; 1))
            errors.add(&quot;password&quot;,
                       new ActionError(&quot;error.password.required&quot;));
</font>        <font color="#0080FF">if ((type == null) || (type.length() &lt; 1))
            errors.add(&quot;type&quot;,
                       new ActionError(&quot;error.type.required&quot;));
</font>        <font color="#0080FF">else if (!&quot;imap&quot;.equals(type) &amp;&amp; !&quot;pop3&quot;.equals(type))
            errors.add(&quot;type&quot;,
                       new ActionError(&quot;error.type.invalid&quot;, type));
</font>        <font color="#0080FF">return (errors);
    }</font>
}</pre>
</div>
<ul>
  <li>
    Struts chama <font color="#0080FF">reset </font>antes de popular o formulário
    e chama <font color="#0080FF"> validate</font>
 depois de populá-lo mas antes de chamar o método <font color="#0080FF"> perform</font>
    da ação
    <ul>
      <li>reset deve atribuir valores default aos campos do formulário,
        normalmente null</li>
      <li>Para checkboxes, use false, não null</li>
    </ul>
  </li>
  <li>Exemplos adicionais de validação de formulários podem ser vistos em <a href="../../recursos/dir-struts-example.war/WEB-INF/src/org/apache/struts/webapp/example/LogonForm.java">LogonForm.java</a>
    e <a href="../../recursos/dir-struts-example.war/WEB-INF/src/org/apache/struts/webapp/example/RegistrationForm.java">RegistrationForm.java</a></li>
</ul>
<h4 align="left">SaveSubscriptionAction.java</h4>
<ul>
  <li>
    <p align="left">O fim do trabalho é feito em <a href="../../recursos/dir-struts-example.war/WEB-INF/src/org/apache/struts/webapp/example/SaveSubscriptionAction.java">SaveSubscriptionAction.java</a></li>
  <li>
    <p align="left">Examine o código:
    <ul>
      <li>
        <p align="left">isCancelled() é um método da classe Action que permite
        saber se usuário clicou no botão Cancel gerado pelo CancelTag
        <ul>
          <li>
            <p align="left">Quando retorna true, a validação feita pelo
            método validate() do ActionForm terá sido pulada pelo controlador</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<div align="left">
    <pre align="left" class="clsCode">/**
 * Implementation of &lt;strong&gt;Action&lt;/strong&gt; that validates and creates or
 * updates the mail subscription entered by the user.
 *
 * @author Craig R. McClanahan
 * @version $Revision: 1.1 $ $Date: 2003/04/25 13:04:37 $
 */

public final class SaveSubscriptionAction extends Action {


    // --------------------------------------------------------- Public Methods


    /**
     * Process the specified HTTP request, and create the corresponding HTTP
     * response (or forward to another web component that will create it).
     * Return an &lt;code&gt;ActionForward&lt;/code&gt; instance describing where and how
     * control should be forwarded, or &lt;code&gt;null&lt;/code&gt; if the response has
     * already been completed.
     *
     * @param mapping The ActionMapping used to select this instance
     * @param actionForm The optional ActionForm bean for this request (if any)
     * @param request The HTTP request we are processing
     * @param response The HTTP response we are creating
     *
     * @exception IOException if an input/output error occurs
     * @exception ServletException if a servlet exception occurs
     */
    public ActionForward perform(ActionMapping mapping,
                 ActionForm form,
                 HttpServletRequest request,
                 HttpServletResponse response)
           throws IOException, ServletException {

        // Extract attributes and parameters we will need
        Locale locale = getLocale(request);
        MessageResources messages = getResources();
        HttpSession session = request.getSession();
        SubscriptionForm subform = (SubscriptionForm) form;
        String action = request.getParameter(&quot;action&quot;);
        if (action == null)
            action = &quot;?&quot;;
        if (servlet.getDebug() &gt;= 1)
            servlet.log(&quot;SaveSubscriptionAction:  Processing &quot; + action +
                        &quot; action&quot;);
    
        // Is there a currently logged on user?
        User user = (User) session.getAttribute(Constants.USER_KEY);
        if (user == null) {
            if (servlet.getDebug() &gt;= 1)
                servlet.log(&quot; User is not logged on in session &quot;
                            + session.getId());
            return (servlet.findForward(&quot;logon&quot;));
        }
    
        // Is there a related Subscription object?
        Subscription subscription =
          (Subscription) session.getAttribute(Constants.SUBSCRIPTION_KEY);
        if (subscription == null) {
            servlet.log(&quot; Missing subscription for user '&quot; +
                         user.getUsername() + &quot;'&quot;);
            response.sendError(HttpServletResponse.SC_BAD_REQUEST,
                               messages.getMessage(&quot;error.noSubscription&quot;));
            return (null);
        }
    
        // Was this transaction cancelled?
        if (isCancelled(request)) {
            if (servlet.getDebug() &gt;= 1)
                servlet.log(&quot; Transaction '&quot; + action +
                            &quot;' was cancelled&quot;);
            if (mapping.getAttribute() != null)
                session.removeAttribute(mapping.getAttribute());
            session.removeAttribute(Constants.SUBSCRIPTION_KEY);
            return (mapping.findForward(&quot;success&quot;));
        }
    
        // Was this transaction a Delete?
        if (action.equals(&quot;Delete&quot;)) {
            if (servlet.getDebug() &gt;= 1)
                servlet.log(&quot; Deleting mail server '&quot; +
                            subscription.getHost() + &quot;' for user '&quot; +
                            user.getUsername() + &quot;'&quot;);
            subscription.setHost(null);
            subscription.setUser(null);
            if (mapping.getAttribute() != null)
                session.removeAttribute(mapping.getAttribute());
            session.removeAttribute(Constants.SUBSCRIPTION_KEY);
            return (mapping.findForward(&quot;success&quot;));
        }
    
        // All required validations were done by the form itself
    
        // Update the persistent subscription information
            if (servlet.getDebug() &gt;= 1)
                servlet.log(&quot; Populating database from form bean&quot;);
            try {
                PropertyUtils.copyProperties(subscription, subform);
            } catch (InvocationTargetException e) {
                Throwable t = e.getTargetException();
                if (t == null)
                    t = e;
                servlet.log(&quot;Subscription.populate&quot;, t);
                throw new ServletException(&quot;Subscription.populate&quot;, t);
            } catch (Throwable t) {
                servlet.log(&quot;Subscription.populate&quot;, t);
                throw new ServletException(&quot;Subscription.populate&quot;, t);
            }
    
        // Remove the obsolete form bean and current subscription
        if (mapping.getAttribute() != null) {
            if (&quot;request&quot;.equals(mapping.getScope()))
                request.removeAttribute(mapping.getAttribute());
            else
                session.removeAttribute(mapping.getAttribute());
        }
        session.removeAttribute(Constants.SUBSCRIPTION_KEY);
    
        // Forward control to the specified success URI
        if (servlet.getDebug() &gt;= 1)
            servlet.log(&quot; Forwarding to success page&quot;);
        return (mapping.findForward(&quot;success&quot;));
    }
}</pre>
</div>

<h2>Finalmente ...</h2>

<ul>
  <li>Struts faz mais do que mostrei aqui, principalmente nas taglibs</li>
  <li>Examine a documentação das taglibs <a href="http://anjinho.dsc.ufpb.br:8080/struts-documentation/index.html">aqui</a></li>
</ul>

<p class="botref">strutsmvc <a href="../j2ee-2.htm">programa</a></p>
</body>
</html>
