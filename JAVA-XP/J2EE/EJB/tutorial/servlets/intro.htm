<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<link REL="stylesheet" TYPE="text/css" HREF="../cursos.css" />
<title>Introdução a Containers Web: A Primeira Aplicação Web com Servlets</title>
</head>

<body>

<h1 align="center">Introdução a Containers Web: A Primeira Aplicação Web com Servlets</h1>

<h2>Tipos&nbsp; de Clientes</h2>

<ul>
  <li>Há dois tipos básicos de clientes:<ul>
      <li>Clientes tipo &quot;Aplicação&quot;<ul>
          <li>Arquitetura em 2 camadas</li>
          <li>&quot;Fat client&quot;</li>
          <li>São instalados em cada desktop</li>
        </ul>
      </li>
      <li>Clientes Web<ul>
          <li>Browser como cliente universal fornecendo a interface com o usuário (UI)</li>
          <li>Uso de HTML (talvez com Javascript ou DHTML), ou XHTML ou XML/XSL para definir as telas</li>
          <li>Uso de HTTP ou HTTPS como protocolo</li>
          <li>A lógica de negócio (Business Logic) roda no servidor</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>J2EE permite criar aplicações Web dinâmicas (com conteúdo dinâmico)<ul>
      <li>J2EE provê <font color="#0080FF">Web Containers</font> e duas API para escrever
        aplicações<ul>
          <li>API servlets</li>
          <li>API Java Server Pages (JSP)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Nesta seção, veremos:<ul>
      <li>A anatomia de um Web Container</li>
      <li>Uma aplicação Web simples</li>
      <li>Detalhes sobre o funcionamento dessa aplicação</li>
    </ul>
  </li>
</ul>

<h2>O Protocolo HTTP</h2>

<ul>
  <li>Supõe-se que o aluno esteja familiarizado com o protocolo HTTP, em especial:<ul>
      <li>O cliente inicia a conversa pedindo uma página<ul>
          <li>Não há callback do servidor para o cliente</li>
        </ul>
      </li>
      <li>GET request Method<ul>
          <li>Para pedir páginas estáticas ou dinâmicas<ul>
              <li>http://www.dominio.com.br?nome=jacques</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>POST Request Method<ul>
          <li>Para pedir páginas dinâmicas</li>
        </ul>
      </li>
      <li>Formulários em páginas HTML podem usar o método GET ou POST</li>
      <li>Response HTTP com a página pedida</li>
      <li>Tipos MIME (Multi-Purpose Internet Mail Extensions)<ul>
          <li>text/html</li>
          <li>image/gif</li>
        </ul>
      </li>
      <li>Originalmente, a forma de obter informação dinâmica com HTTP é de usar CGI (Common
        Gateway Interface), uma forma de ativar um programa externo que gera uma página de
        resposta</li>
    </ul>
  </li>
</ul>

<h2>Containers Web e Aplicações Web</h2>

<ul>
  <li>Aplicações Web rodam no servidor</li>
  <li>Para fazer aplicações no servidor, previsamos de:<ul>
      <li>Um modelo de programação e uma API</li>
      <li>Suporte de runtime no servidor<ul>
          <li>Para executar aplicações</li>
        </ul>
      </li>
      <li>Suporte de deployment<ul>
          <li>Para instalar aplicações no servidor e customizá-las</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>J2EE oferece:<ul>
      <li><font color="#0080FF">Web Components</font><ul>
          <li>Java Servlets e Java Server Pages</li>
        </ul>
      </li>
      <li><font color="#0080FF">Web Applications</font><ul>
          <li>Uma coleção de servlets, páginas JSP, outras classes, bibliotecas e recursos
            estáticos tais como páginas HTML, XML, etc.</li>
        </ul>
      </li>
      <li>Um <font color="#0080FF">Web Container</font><ul>
          <li>Para hospedar aplicações Web</li>
          <li>Essencialmente uma JVM com API especial de servlets e suporte para JSP</li>
          <li>O container é responsável pelo ciclo de vida dos componentes Web (inicialização,
            chamada, destruição, ..)</li>
        </ul>
      </li>
      <li>Uma estrutura de <font color="#0080FF">packaging</font> e um <font color="#0080FF">Deployment
        Descriptor</font><ul>
          <li>Arquivos com formato especial para armazenar um Web Component (arquivo WAR) ou Web
            Application (arquivo EAR)</li>
          <li>O Deployment Descriptor é um arquivo XML que permite customizar a aplicação em tempo
            de deployment (instalação)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Veja a figura abaixo:</li>
</ul>

<p align="center"><img src="webcontainer.gif" width="520" height="544"
alt="webcontainer.gif (12544 bytes)"></p>

<h3>Servlets</h3>

<ul>
  <li>Servlets permitem que a lógica de aplicação seja embutida no processo
    request-response<ul>
      <li>Um servlet é um programa Java que roda do lado servidor e que estende a funcionalidade
        do servidor Web</li>
      <li>A API de servlets provê um framework simples para construir aplicações em servidores
        Web que dão suporte a servlets</li>
    </ul>
  </li>
  <li>Um exemplo de um servlet está <a href="#srcservlet">aqui</a></li>
  <li>Exemplos de servidor Web que dão suporte a servlets<ul>
      <li>Tomcat do projeto Apache</li>
      <li>WebLogic da BEA</li>
      <li>Inprise Application Server da Borland</li>
      <li>iPlanet Application Server da Sun</li>
      <li>WebSphere Application Server da IBM</li>
      <li>Servidores completos J2EE grátis tais como JBoss</li>
    </ul>
  </li>
  <li>Internet Information Server (IIS) da Microsoft não tem suporte a Web Containers<ul>
      <li>Use Tomcat, JRun ou ServletExec como plug-in no IIS</li>
    </ul>
  </li>
  <li>Quando o Web server entende que uma URL deve ser atendida por um Web Container, ele
    passa o controle para o container<ul>
      <li>Este container decide qual Web Application deve executar</li>
      <li>Quando é um servlet, o container controla a execução do servlet</li>
      <li>Através da API de servlets, o servlet pode acessar a informação do Request, fornecer
        uma Response, etc.</li>
    </ul>
  </li>
</ul>

<p align="center"><img src="servlet1.gif" width="722" height="343"
alt="servlet1.gif (8422 bytes)"></p>

<h3>Java Server Pages</h3>

<ul>
  <li>A geração de informação dinâmica pode ser feita de duas formas:<ul>
      <li>Programaticamente (servlets)</li>
      <li>Através de templates (Java Server Pages ou JSP)</li>
    </ul>
  </li>
  <li>O uso de templates é melhor pois deixa o Web Designer com possibilidade de criar as
    páginas</li>
  <li>JSP é uma extensão da tecnologia de servlets<ul>
      <li>Uma página JSP contém código HTML (ou XML)</li>
      <li>Tags especiais ou &quot;scriplets&quot; especiais são embutidos no HTML para execução
        para produzir o conteúdo final</li>
      <li>Um exemplo de página JSP&nbsp; está <a href="../jsp/livros.htm#srcjsp">aqui</a></li>
      <li>A página JSP é traduzida para um servlet automaticamente pelo servidor J2EE</li>
      <li>O servlet é compilado (apenas uma vez)</li>
      <li>A partir daí, o servlet é executado para gerar o conteúdo dinâmico</li>
      <li>Observe que, depois que a página JSP foi transformada em servlet, a situação é
        idêntica à execução de um servlet</li>
    </ul>
  </li>
</ul>

<p align="center"><img src="jsp1.gif" width="722" height="487"
alt="jsp1.gif (10870 bytes)"></p>

<ul>
  <li>Active Server Pages (ASP) da Microsoft é semelhante mas:<ul>
      <li>É interpretado, não compilado</li>
      <li>A linguagem é VBScript</li>
    </ul>
  </li>
</ul>

<h3>Servlets ou Java Server Pages?</h3>

<ul>
  <li>Temos várias alternativas para a geração de páginas dinâmicas<ul>
      <li>Servlets contêm a lógica de aplicação e geram o conteúdo das páginas</li>
      <li>JSP contêm a lógica de aplicação e geram o conteúdo das páginas</li>
      <li>Servlets contêm a lógica de aplicação e JSP geram o conteúdo das páginas</li>
    </ul>
  </li>
</ul>

<h3>Deployment Descriptors</h3>

<ul>
  <li>Deployment Descriptors ajudam a configurar a aplicação Web durante a instalação
    (deployment)</li>
  <li>O Deployment Descriptor é um arquivo chamado web.xml que tem os seguintes propósitos:<ul>
      <li>Prover valores iniciais para parâmetros de Web Applications<ul>
          <li>Exemplo: servidor de Banco de Dados, etc.</li>
          <li>Usado para inicializar qualquer valor que poderá mudar entre duas instalações</li>
          <li>Exemplo: não é um bom lugar para colocar a taxa de câmbio do dólar</li>
          <li>Permite configurar as aplicações sem alterar código e recompilar os servlets</li>
        </ul>
      </li>
      <li>Definir servlets e JSPs<ul>
          <li>Cada servlet e JSP usado pela aplicação deve ser descrito para permitir que seu
            deployment seja feito</li>
        </ul>
      </li>
      <li>Especificar mapeamentos de servlets e JSPs<ul>
          <li>Define como URLs que chegam do cliente serão mapeadas para servlets e JSPs</li>
        </ul>
      </li>
      <li>Especificar MIME types usados por cada aplicação</li>
      <li>Especificar dados de segurança<ul>
          <li>Pode especificar quais páginas precisam de um login, qual é a página de login, que
            papel o usuário deve ter para acessar a página, etc.</li>
        </ul>
      </li>
      <li>Customizar páginas de boas vindas, páginas de erro, configuração de sessão, etc.</li>
    </ul>
  </li>
</ul>

<h2>Nossa Primeira Aplicação Web</h2>

<ul>
  <li>Vamos programar?</li>
  <li>O problema:<ul>
      <li>Escreva uma aplicação que peça ao usuário seu nome e email</li>
      <li>Imprima uma página de boas vindas dependente do horário do dia</li>
    </ul>
  </li>
  <li>A solução: usaremos<ul>
      <li>Uma página HTML fixa com um formulário para pedir a informação</li>
      <li>Um servlet para processar o request e gerar a página de boas vindas</li>
      <li>Um Deployment Descriptor</li>
    </ul>
  </li>
</ul>

<h3>O arquivo EAR</h3>

<ul>
  <li>No final das contas, nossa aplicação Web será contida no arquivo
    &quot;CadastromailApp.ear&quot;<ul>
      <li>Um arquivo &quot;ear&quot; é um arquivo com formato JAR contendo uma aplicação J2EE
        (Enterprise Application Archive)</li>
    </ul>
    <ul>
      <li>Dado este arquivo, podemos rodar em <em>qualquer</em> servidor J2EE</li>
      <li>Basta, para tanto, passar por um processo de deployment</li>
    </ul>
  </li>
  <li>Podemos criar este arquivo &quot;na mão&quot;, mas é mais simples usar uma ferramenta
    de deployment<ul>
      <li>A ferramenta de deployment vai ser usada para 2 coisas:<ul>
          <li>Criar o arquivo ear</li>
          <li>Fazer o deployment da aplicação junto ao servidor</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Tudo isso depende do servidor J2EE que estaremos usando<ul>
      <li>Cada um tem um deployment tool diferente</li>
    </ul>
  </li>
  <li>Usaremos o servidor grátis fornecido no &quot;J2EE SDK&quot;<ul>
      <li>Em particular, usaremos o &quot;j2sdkee1.3&quot;, o último disponível em outubro 2001</li>
    </ul>
  </li>
  <li>Siga os passos dados abaixo, depois que tiver instalado:<ul>
      <li>O J2SE (antigo JDK): <a href="http://java.sun.com/j2se/1.3/">http://java.sun.com/j2se/1.3/</a></li>
      <li>O J2EE SDK: <a href="http://java.sun.com/j2ee/download.html#sdk">http://java.sun.com/j2ee/download.html#sdk</a></li>
      <li>O utilitário ant: <a
        href="http://jakarta.apache.org/builds/jakarta-ant/release/v1.3/bin">http://jakarta.apache.org/builds/jakarta-ant/release/v1.3/bin</a><ul>
          <li>Semelhante a make, mas independente de plataforma</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Para ver como instalar tudo isso, veja o tutorial J2EE em <a
    href="http://java.sun.com/j2ee/download.html#tutorial">http://java.sun.com/j2ee/download.html#tutorial</a></li>
</ul>

<h3>Criação do arquivo HTML</h3>

<ul>
  <li>Escolha um diretório para colocar todo o código fonte da aplicação<ul>
      <li>Chamaremos este diretório de &quot;src/cadastromail&quot;</li>
    </ul>
  </li>
  <li>Crie o seguinte arquivo <a href="../src/cadastromail/index.html">src/cadastromail/index.html</a></li>
</ul>

<pre class="clsCode">&lt;html&gt;

&lt;head&gt;
&lt;title&gt;Cadastro de Mail&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;h1&gt;Bem-vindo!&lt;/h1&gt;
&lt;form method=&quot;POST&quot; action=&quot;/cadastromail/cadastra&quot;&gt;
  &lt;p&gt;Seu nome &lt;input type=&quot;text&quot; name=&quot;nome&quot; size=&quot;40&quot;&gt;&lt;/p&gt;
  &lt;p&gt;Seu email &lt;input type=&quot;text&quot; name=&quot;email&quot; size=&quot;40&quot;&gt;&lt;/p&gt;
  &lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt; &lt;input type=&quot;reset&quot; value=&quot;Reset&quot;&gt;&lt;/p&gt;
&lt;/form&gt;
&lt;/body&gt;

&lt;/html&gt;</pre>

<h3><a name="srcservlet">Criação do servlet</a></h3>

<ul>
  <li>Agora, crie o servlet no arquivo <a href="../src/cadastromail/CadastroServlet.java">src/cadastromail/CadastroServlet.java</a></li>
</ul>

<pre class="clsCode">import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;
import java.util.*;

public class CadastroServlet extends HttpServlet {
  protected void doPost(HttpServletRequest request,
                        HttpServletResponse response)
                        throws ServletException, IOException {

    // pega parâmetros do request
    String nome = request.getParameter(&quot;nome&quot;);
    String email = request.getParameter(&quot;email&quot;);
    
    GregorianCalendar calendário = new GregorianCalendar();
    String mensagem = calendário.get(Calendar.AM_PM) == Calendar.AM ?
                      &quot;Bom dia&quot; : &quot;Boa Tarde&quot;;

    // acerta tipo MIME para a resposta
    response.setContentType(&quot;text/html&quot;);

    PrintWriter out = response.getWriter();
    out.println(&quot;&lt;HTML&gt;&quot;);
    out.println(&quot;&lt;BODY&gt;&quot;);
    out.println(&quot;&lt;P&gt;&quot; + mensagem + &quot;, &quot; + nome + &quot;&lt;/P&gt;&quot;);
    out.println(&quot;&lt;P&gt;Obrigado por cadastrar seu email (&quot; + email + &quot;) conosco.&lt;/P&gt;&quot;);
    out.println(&quot;&lt;P&gt;- A Galera Java&lt;/P&gt;&quot;);
    out.println(&quot;&lt;/BODY&gt;&quot;);
    out.println(&quot;&lt;/HTML&gt;&quot;);
    out.close();
  }
}</pre>

<ul>
  <li>Não se preocupe com a forma de funcionamento do servlet ainda</li>
  <li>Usaremos &quot;ant&quot; para compilar nossas aplicações</li>
  <li>Por enquanto, o arquivo <a href="../src/build.xml">src/build.xml</a> deve conter:</li>
</ul>

<pre class="clsCode">&lt;project name=&quot;disciplina-j2ee-exemplos&quot; default=&quot;all&quot; basedir=&quot;.&quot;&gt;
  &lt;target name=&quot;init&quot;&gt;
    &lt;tstamp/&gt;
    &lt;property name=&quot;build&quot; value=&quot;../build&quot; /&gt;
    &lt;property name=&quot;cadastromail&quot; value=&quot;cadastromail&quot; /&gt;
    &lt;property environment=&quot;myenv&quot; /&gt;
    &lt;property name=&quot;j2eepath&quot;  value=&quot;${myenv.J2EE_HOME}/lib/j2ee.jar&quot; /&gt;
  &lt;/target&gt;

  &lt;target name=&quot;prepare&quot; depends=&quot;init&quot;&gt;
    &lt;mkdir dir=&quot;${build}&quot; /&gt;
  &lt;/target&gt;

  &lt;target name=&quot;clean&quot; depends=&quot;init&quot;&gt;
    &lt;delete dir=&quot;${build}&quot; /&gt;
  &lt;/target&gt;
      
  &lt;target name=&quot;all&quot; depends=&quot;init,cadastromail&quot;&gt;
  &lt;/target&gt;

  &lt;target name=&quot;cadastromail&quot; depends=&quot;init&quot;&gt;
    &lt;mkdir dir=&quot;${build}/${cadastromail}&quot; /&gt;
    &lt;copy todir=&quot;${build}/${cadastromail}&quot; &gt;
      &lt;fileset dir=&quot;${cadastromail}&quot;  &gt;
        &lt;include name=&quot;**/*.html&quot; /&gt;
      &lt;/fileset&gt;
    &lt;/copy&gt;
    &lt;javac srcdir=&quot;${cadastromail}&quot;
      destdir=&quot;${build}/${cadastromail}&quot;
      classpath=&quot;${j2eepath}&quot; &gt;
      &lt;include name=&quot;**/*.java&quot; /&gt;
    &lt;/javac&gt;
  &lt;/target&gt;
&lt;/project&gt;</pre>

<ul>
  <li>Compile a aplicação:</li>
</ul>

<pre class="clsCode">C:\...\src&gt;ant cadastromail
Buildfile: build.xml

init:

cadastromail:
    [mkdir] Created dir: C:\...\build\cadastromail
     [copy] Copying 1 file to C:\...\build\cadastromail
    [javac] Compiling 1 source file to C:\...\build\cadastromail

BUILD SUCCESSFUL

Total time: 4 seconds</pre>

<ul>
  <li>Isso automaticamente criará o diretório &quot;build&quot;, no mesmo nível de
    &quot;src&quot;</li>
</ul>

<h3>Construção da aplicação</h3>

<ul>
  <li>Inicie o servidor J2EE (na máquina local ou outra)</li>
</ul>

<pre class="clsCode">j2ee -verbose</pre>

<ul>
  <li>O servidor poderá ser terminado depois com &quot;j2ee -stop&quot;</li>
  <li>Inicie a ferramenta de deployment</li>
</ul>

<pre class="clsCode">deploytool</pre>

<ul>
  <li>Você deve ver a seguinte tela</li>
</ul>

<p align="center"><img src="intro.1.jpg" width="614" height="537"
alt="wpeA6.jpg (26221 bytes)"></p>

<ul>
  <li>Passos a executar:<ul>
      <li>Escolha File/New/Application</li>
      <li>Clique em Browse e vá até src/cadastromail</li>
      <li>No campo &quot;File name&quot;, digite CadastromailApp e clique em &quot;New
        Application&quot;</li>
      <li>Clique em OK<ul>
          <li>Agora, queremos criar um &quot;Web Component&quot; para adicionar à aplicação<ul>
              <li>Um Web Component é armazenado num arquivo .WAR</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Clique em File/New/Web Component</li>
      <li>Leia a tela inicial de explicações e clique em Next</li>
      <li>Escolha o radio button &quot;Create New WAR File in Application&quot; e selecione
        CadastromailApp no combo box</li>
      <li>Digite CadastromailWAR no campo &quot;WAR Display Name&quot;</li>
      <li>Clique em Edit para adicionar arquivos ao WAR</li>
      <li>Navegue até build/cadastromail e adicione os arquivos CadastroServlet.class e
        index.html</li>
      <li>Clique em OK e Next</li>
      <li>Escolha o radio button Servlet e clique em Next</li>
      <li>No combo box &quot;Servlet Class&quot;, escolha CadastroServlet</li>
      <li>Clique em Next e novamente em Next</li>
      <li>Clique em Add, digite &quot;/cadastra&quot; no campo Aliases</li>
      <li>Clique em Finish</li>
      <li>Clique em CadastromailApp e clique na orelha &quot;Web Context&quot;</li>
      <li>Informe &quot;/cadastromail&quot; no &quot;Context Root&quot;</li>
      <li>Clique em File/Save</li>
      <li>A aplicação está pronta em CadastromailApp.ear</li>
    </ul>
  </li>
  <li>O arquivo CadastromailApp.ear foi criado com a seguinte estrutura:<ul>
      <li>META-INF<ul>
          <li><a href="conteudo-CadastromailApp-ear/META-INF/application.xml">application.xml</a></li>
          <li><a href="conteudo-CadastromailApp-ear/META-INF/MANIFEST.MF">MANIFEST.MF</a></li>
          <li><a href="conteudo-CadastromailApp-ear/META-INF/sun-j2ee-ri.xml">sun-j2ee-ri.xml</a></li>
        </ul>
      </li>
      <li>war-ic.war<ul>
          <li>META-INF<ul>
              <li><a href="conteudo-CadastromailApp-ear/conteudo-war-ic-war/META-INF/MANIFEST.MF">MANIFEST.MF</a></li>
            </ul>
          </li>
          <li>WEB-INF<ul>
              <li><a href="conteudo-CadastromailApp-ear/conteudo-war-ic-war/WEB-INF/web.xml">web.xml</a></li>
              <li>classes<ul>
                  <li>CadastroServlet.class</li>
                </ul>
              </li>
            </ul>
          </li>
          <li><a href="conteudo-CadastromailApp-ear/conteudo-war-ic-war/index.html">index.html</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="conteudo-CadastromailApp-ear/META-INF/application.xml">application.xml</a> é o
    Deployment Descriptor da aplicação como um todo</li>
</ul>

<pre class="clsCode">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;!DOCTYPE application PUBLIC '-//Sun Microsystems, Inc.//DTD J2EE Application 1.3//EN' 'http://java.sun.com/dtd/application_1_3.dtd'&gt;

&lt;application&gt;
  &lt;display-name&gt;CadastromailApp&lt;/display-name&gt;
  &lt;description&gt;Application description&lt;/description&gt;
  &lt;module&gt;
    &lt;web&gt;
      &lt;web-uri&gt;war-ic.war&lt;/web-uri&gt;
      &lt;context-root&gt;/cadastromail&lt;/context-root&gt;
    &lt;/web&gt;
  &lt;/module&gt;
&lt;/application&gt;</pre>

<ul>
  <li><a href="conteudo-CadastromailApp-ear/META-INF/sun-j2ee-ri.xml">sun-j2ee-ri.xml</a>
    descreve informação não transportável aplicável apenas ao servidor sendo usado (J2EE
    SDK)<ul>
      <li>É uma extensão do Deployment Descriptor da aplicação</li>
    </ul>
  </li>
</ul>

<pre class="clsCode">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;!DOCTYPE j2ee-ri-specific-information PUBLIC '-//Sun Microsystems Inc.//DTD J2EE Reference Implementation 1.3//EN' 'http://localhost:8000/sun-j2ee-ri_1_3.dtd'&gt;

&lt;j2ee-ri-specific-information&gt;
  &lt;server-name&gt;&lt;/server-name&gt;
  &lt;rolemapping /&gt;
  &lt;web&gt;
    &lt;module-name&gt;war-ic.war&lt;/module-name&gt;
    &lt;context-root&gt;/cadastromail&lt;/context-root&gt;
  &lt;/web&gt;
&lt;/j2ee-ri-specific-information&gt;</pre>

<ul>
  <li><a href="conteudo-CadastromailApp-ear/conteudo-war-ic-war/WEB-INF/web.xml">web.xml</a>
    é o Deployment Descriptor do Web component (o servlet)</li>
</ul>

<pre class="clsCode">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;!DOCTYPE web-app PUBLIC '-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN' 'http://java.sun.com/dtd/web-app_2_3.dtd'&gt;

&lt;web-app&gt;
  &lt;display-name&gt;CadastromailWAR&lt;/display-name&gt;
  &lt;servlet&gt;
    &lt;servlet-name&gt;CadastroServlet&lt;/servlet-name&gt;
    &lt;display-name&gt;CadastroServlet&lt;/display-name&gt;
    &lt;servlet-class&gt;CadastroServlet&lt;/servlet-class&gt;
  &lt;/servlet&gt;
  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;CadastroServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/cadastra&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
  &lt;session-config&gt;
    &lt;session-timeout&gt;30&lt;/session-timeout&gt;
  &lt;/session-config&gt;
&lt;/web-app&gt;</pre>

<ul>
  <li>Podemos agora fazer o deployment da aplicação<ul>
      <li>Clique em Tools/Deploy</li>
      <li>Escolha CadastromailApp e o servidor adequado</li>
      <li>Clique em Finish</li>
    </ul>
  </li>
</ul>

<p align="center"><img src="intro.2.jpg" width="409" height="358"
alt="wpeA7.jpg (23542 bytes)"></p>

<ul>
  <li>Podemos agora rodar a aplicação:<ul>
      <li>http://&lt;host&gt;:8000/cadastromail/index.html</li>
    </ul>
  </li>
</ul>

<p align="center"><img src="intro.3.jpg" width="396" height="329"
alt="wpeA9.jpg (27320 bytes)"></p>

<ul>
  <li>O resultado deve ser o seguinte (pelo menos, à tarde):</li>
</ul>

<p align="center"><img src="intro.4.jpg" width="396" height="329"
alt="wpeAA.jpg (25198 bytes)"></p>

<h2>Como a Aplicação Funciona</h2>

<ul>
  <li>Explicação rápida da sequência de eventos (ver figura)</li>
</ul>

<p align="center"><img src="servlet2.gif" width="581" height="280"
alt="servlet2.gif (6269 bytes)"></p>

<ul>
  <li>Explicação rápida do código do servlet<ul>
      <li>doPost<ul>
          <li>Ponto de entrada no servlet, chamado pelo Web Container</li>
        </ul>
      </li>
      <li>HttpServletRequest<ul>
          <li>De onde se pode acessar o request</li>
          <li>String nome = request.getParameter(&quot;nome&quot;);</li>
        </ul>
      </li>
      <li>HttpServletResponse<ul>
          <li>Para onde se encaminha a resposta</li>
          <li>response.setContentType(&quot;text/html&quot;);
            <ul>
              <li>Default é &quot;text/html&quot;, portanto essa linha é
                opcional</li>
            </ul>
          </li>
          <li>PrintWriter out = response.getWriter();</li>
          <li>out.println(&quot;...&quot;);</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p class="botref">intro <a href="../j2ee-2.htm">programa</a> </p>
</body>
</html>
