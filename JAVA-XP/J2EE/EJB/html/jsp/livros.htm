<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<link REL="stylesheet" TYPE="text/css" HREF="../cursos.css" />
<title>A Technologia Java Server Pages: Revendo a Aplicação de Compras Online</title>
</head>

<body>

<h1 align="center">A Technologia Java Server Pages</h1>

<h1 align="center">Revendo a Aplicação de Compras On-line</h1>

<h2>O que é uma Página JSP?</h2>

<ul>
  <li>Uma página JSP é uma página contendo HTML, WML, XML, ... com trechos de programas
    Java (elementos JSP) embutidos<ul>
      <li>Simplificam a geração de conteúdo dinâmico porque Web Designers pode manipular as
        páginas com mais facilidade do que manipulando servlets</li>
      <li>A página JSP é automaticamente transformada em servlet e o servlet executa no servidor
        para gerar a resposta</li>
    </ul>
  </li>
</ul>

<p align="center"><img src="../servlets/jsp1.gif" width="722" height="487"
alt="jsp1.gif (10870 bytes)"></p>

<ul>
  <li>Segue abaixo um exemplo de uma aplicação com uma única página JSP<ul>
      <li>Execute a aplicação aqui: <a href="http://anjinho.dsc.ufpb.br:8000/data">http://anjinho.dsc.ufpb.br:8000/data</a></li>
      <li>A aplicação mostra a data de acordo com várias locales</li>
      <li>Seu browser poderá pedir a instalação do alfabeto Cirílico (ISO-8859-5)</li>
    </ul>
  </li>
</ul>

<p align="center"><img src="data1.jpg" width="440" height="237"
alt="wpe1.jpg (24371 bytes)"></p>

<ul>
  <li><a name="srcjsp">O código fonte da página JSP segue abaixo</a><ul>
      <li>Ela contém HTML e elementos JSP (<font color="#0080FF">destacados</font>)</li>
    </ul>
  </li>
</ul>

<pre class="clsCode"><font color="#0080FF">&lt;%@ page import=&quot;java.util.*&quot; %&gt;
&lt;%@ page import=&quot;MyLocales&quot; %&gt;
&lt;%@ page contentType=&quot;text/html; charset=ISO-8859-5&quot; %&gt;</font>
&lt;html&gt;
&lt;head&gt;&lt;title&gt;Localized Dates&lt;/title&gt;&lt;/head&gt;
&lt;body bgcolor=&quot;white&quot;&gt;
<font
color="#0080FF">&lt;jsp:useBean id=&quot;locales&quot; scope=&quot;application&quot; class=&quot;MyLocales&quot;/&gt;</font>
&lt;form name=&quot;localeForm&quot; action=&quot;index.jsp&quot; method=&quot;post&quot;&gt;
&lt;b&gt;Locale:&lt;/b&gt;
&lt;select name=locale&gt;
<font
color="#0080FF">&lt;% 
  Iterator i = locales.getLocaleNames().iterator();
  String selectedLocale = request.getParameter(&quot;locale&quot;);
  while (i.hasNext()) {
    String locale = (String)i.next();
    if (selectedLocale != null &amp;&amp; selectedLocale.equals(locale) ) {
%&gt;</font>
      &lt;option selected&gt;<font
color="#0080FF">&lt;%=locale%&gt;</font>&lt;/option&gt;
<font color="#0080FF">&lt;%
    } else {
%&gt;</font>
      &lt;option&gt;<font
color="#0080FF">&lt;%=locale%&gt;</font>&lt;/option&gt;
<font color="#0080FF">&lt;%
    } 
  }
%&gt;</font>
&lt;/select&gt;
&lt;input type=&quot;submit&quot; name=&quot;Submit&quot; value=&quot;Get Date&quot;&gt;
&lt;/form&gt;
&lt;p&gt;
<font
color="#0080FF">&lt;jsp:include page=&quot;date.jsp&quot; flush=&quot;true&quot; /&gt;</font>
&lt;/body&gt;
&lt;/html&gt;</pre>

<ul>
  <li>Alguns comentários:<ul>
      <li>Diretivas (<font color="#0080FF">&lt;%@ page ... %&gt;</font>) importam classes do
        package java.util e a classe MyLocales class e estabeleçam o &quot;content type&quot;
        returnado pela página</li>
      <li>O elemento <font color="#0080FF">jsp:useBean</font> cria um objeto contendo uma
        coleção de locales e inicializa uma variável que referencia este objeto</li>
      <li>Scriptlets (<font color="#0080FF">&lt;% ... %&gt;</font>):<ul>
          <li>Recuperam o valor do parâmetro &quot;locale&quot;</li>
          <li>Iteram na coleção de nomes de locales</li>
          <li>Inserem texto HTML condicional na saída</li>
        </ul>
      </li>
      <li>Expressões (<font color="#0080FF">&lt;%= ... %&gt;</font>) inserem o valor de uma
        variável como string na resposta</li>
      <li>O elemento <font color="#0080FF">jsp:include</font> envia um pedido para outra página
        (date.jsp) inclui sua resposta na resposta da página que faz a chamada</li>
    </ul>
  </li>
  <li>Segue o conteúdo de date.jsp</li>
</ul>

<pre class="clsCode">&lt;%@ page import=&quot;java.util.*&quot; %&gt;
&lt;%@ page import=&quot;MyDate,MyLocales&quot; %&gt;
&lt;html&gt;
&lt;body bgcolor=&quot;white&quot;&gt;
&lt;jsp:useBean id=&quot;date&quot; class=&quot;MyDate&quot;/&gt;
&lt;jsp:useBean id=&quot;locales&quot; scope=&quot;application&quot; class=&quot;MyLocales&quot;/&gt;
&lt;% 
  Locale locale = locales.getLocale(request.getParameter(&quot;locale&quot;)); 
  if (locale != null) {
%&gt;
&lt;jsp:setProperty name=&quot;date&quot; property=&quot;locale&quot; value=&quot;&lt;%=locale%&gt;&quot;/&gt;
The date in &lt;b&gt;&lt;%=locale.getDisplayName()%&gt;&lt;/b&gt; is &lt;b&gt;&lt;%=date.getDate()%&gt;&lt;/b&gt;
&lt;% } %&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>

<ul>
  <li>Segue o código de MyLocales.java</li>
</ul>

<pre class="clsCode">import java.util.*;
import java.text.DateFormat;

public class MyLocales {
  HashMap locales;
  ArrayList localeNames;
  DateFormat dateFormatter;

  public MyLocales() {
    locales = new HashMap();
    localeNames = new ArrayList();
    Locale list[] = DateFormat.getAvailableLocales();
    for (int i = 0; i &lt; list.length; i++) {     
      locales.put(list[i].getDisplayName(), list[i]);
      localeNames.add(list[i].getDisplayName());
    }
    Collections.sort(localeNames);
  }
  public Collection getLocaleNames() {
    return localeNames;
  }
     
  public Locale getLocale(String displayName) {
    return (Locale)locales.get(displayName);
  }
}</pre>

<h3>Composição da aplicação DataApp</h3>

<ul>
  <li>Compile tudo</li>
</ul>

<pre class="clsCode">C:\... &gt;ant data
Buildfile: build.xml

init:

data:
    [mkdir] Created dir: C:\...\build\data
     [copy] Copying 3 files to C:\...\build\data
    [javac] Compiling 2 source files to C:\...\build\data


BUILD SUCCESSFUL

Total time: 11 seconds</pre>

<ul>
  <li>Chame o deploytool e execute as seguintes ações<ul>
      <li>Criar a aplicação chamada DataApp<ul>
          <li>Selecione File-&gt;New-&gt;Application</li>
          <li>No file chooser, navegue até to src/data</li>
          <li>No campo &quot;File Name&quot;, digite DataApp</li>
          <li>Clique em &quot;New Application&quot;</li>
          <li>Clique em &quot;OK&quot;</li>
        </ul>
      </li>
      <li>Criar o WAR e adicionar o Web Component à aplicação DataApp<ul>
          <li>Selecione File-&gt;New-&gt;Web Component</li>
          <li>Selecione &quot;DataApp&quot; no combo box &quot;Create new WAR File in
            Application&quot;</li>
          <li>Digite DataWAR no campo &quot;WAR Display Name&quot;</li>
          <li>Clique em &quot;Edit&quot;</li>
          <li>Navegue até build/data. Selecione index.jsp, date.jsp, MyDate.class e MyLocales.class e
            clique em &quot;Add&quot; e então em &quot;Finish&quot;</li>
          <li>Clique em &quot;Next&quot;</li>
          <li>Clique em &quot;JSP&quot; no radio button &quot;Web Component&quot; e clique em
            &quot;Next&quot;</li>
          <li>Selecione index.jsp no combo box &quot;JSP Filename&quot; e clique em &quot;Finish&quot;</li>
        </ul>
      </li>
      <li>Fornecer a raiz do contexto (context root)<ul>
          <li>Selecione DataApp</li>
          <li>Selecione a orelha &quot;Web Context&quot;</li>
          <li>Digite &quot;data&quot;</li>
        </ul>
      </li>
      <li>Salve</li>
    </ul>
  </li>
</ul>

<h3>Deployment da aplicação DataApp</h3>

<ul>
  <li>Selecionar Tools/Deploy e faça o deployment da aplicação no servidor desejado</li>
</ul>

<h3>Execução da aplicação DataApp</h3>

<ul>
  <li>Execute a aplicação aqui: <a href="http://anjinho.dsc.ufpb.br:8000/data">http://anjinho.dsc.ufpb.br:8000/data</a></li>
</ul>

<h2>Composição e Deployment da Aplicação de Compras On-line</h2>

<ul>
  <li>Os exemplos de páginas JSP que veremos são baseados na aplicação de compras
    on-line
    (Duke's Bookstore), refeita para usar páginas JSP</li>
  <li>As páginas usadas são mostradas na tabela abaixo</li>
</ul>

<table border="1" width="100%">
  <tr>
    <td width="50%" align="center"><big><strong>Funcionalidade</strong></big></td>
    <td width="50%" align="center"><big><strong>Páginas JSP</strong></big></td>
  </tr>
  <tr>
    <td width="50%">Entrar na livraria</td>
    <td width="50%">bookstore.jsp</td>
  </tr>
  <tr>
    <td width="50%">Criar o banner da livraria</td>
    <td width="50%">banner.jsp</td>
  </tr>
  <tr>
    <td width="50%">Examinar o catálogo</td>
    <td width="50%">catalog.jsp</td>
  </tr>
  <tr>
    <td width="50%">Adicionar um livro à cesta de compras</td>
    <td width="50%">catalog.jsp<br>
    bookdetails.jsp</td>
  </tr>
  <tr>
    <td width="50%">Receber informação detalhada sobre um livro</td>
    <td width="50%">bookdetails.jsp</td>
  </tr>
  <tr>
    <td width="50%">Mostrar a cesta de compras</td>
    <td width="50%">showcart.jsp</td>
  </tr>
  <tr>
    <td width="50%">Remover um ou mais livros da cesta de compras</td>
    <td width="50%">showcart.jsp</td>
  </tr>
  <tr>
    <td width="50%">Comprar os livros presentes na cesta de compras</td>
    <td width="50%">cashier.jsp</td>
  </tr>
  <tr>
    <td width="50%">Receber uma confirmação de pedido</td>
    <td width="50%">receipt.jsp</td>
  </tr>
</table>

<ul>
  <li>Continuamos usando o banco de dados jdbc/BookDB<ul>
      <li>Porém database.BookDB foi reescrito para ser um JavaBean (não EJB)<ul>
          <li>Desta forma, podemos usar melhor os recursos JSP (usebean)</li>
        </ul>
      </li>
      <li>database.BookDB não acessa o banco de dados diretamente mas através de um Enterprise
        Bean (EJB)<ul>
          <li>Veremos como EJBs funcionam adiante</li>
          <li>Por enquanto, esqueça da parte de acesso ao BD</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Outra mudança é que a aplicação usa um applet para exibir um relógio digital</li>
  <li>Antes de ver o código, vamos fazer a aplicação rodar ...</li>
</ul>

<h3>Composição da Aplicação</h3>

<ul>
  <li>Compile tudo</li>
</ul>

<pre class="clsCode"><a href="file:///C:/...">C:\...&gt;</a>ant livrosjsp
Buildfile: build.xml

init:

web-ejb:
    [mkdir] Created dir: C:\...\build\webejb
    [javac] Compiling 6 source files to C:\...\build\webejb

livrosjsp:
    [mkdir] Created dir: C:\...\build\livrosjsp
     [copy] Copying 11 files to C:\...\build\livrosjsp
    [javac] Compiling 8 source files to C:\...\build\livrosjsp
      [war] Building war: C:\...\build\livrosjsp\livrosjsp.war

BUILD SUCCESSFUL

Total time: 11 seconds</pre>

<ul>
  <li>Inicie o servidor J2EE (j2ee -verbose)</li>
  <li>Inicie o banco de dados (cloudscape -start)<ul>
      <li>Caso não tenha criado o banco de dados de livros, veja <a
        href="file:///C:/Documents%20and%20Settings/JACQUES/Meus%20documentos/Cursos/Hp/j2ee/html/servlets/livros.htm#deployment">aqui</a></li>
      <li>Este é o mesmo banco de dados usado com servlets (BookDB)</li>
    </ul>
  </li>
  <li>Inicie o deploytool</li>
  <li>Criar uma aplicação J2EE chamada LivrosJSPApp<ul>
      <li>Selecione File-&gt;New-&gt;Application</li>
      <li>No file chooser, navigue até src/livrosjsp</li>
      <li>No campo &quot;File Name&quot;, digite LivrosJSPApp</li>
      <li>Clique em &quot;New Application&quot;</li>
      <li>Clique em OK</li>
    </ul>
  </li>
  <li>Adicione Livrosjsp.war à aplicação LivrosJSPApp<ul>
      <li>Selecione File-&gt;Add to application-&gt;Web WAR</li>
      <li>No dialogo, navegue até build/livrosjsp. Selecione livrosjsp.war. Clique em &quot;Add
        Web WAR&quot;</li>
    </ul>
  </li>
  <li>Adicione o Enterprise Bean BookDBEJB à aplicação<ul>
      <li>Selecione File-&gt;New Enterprise Bean ou o botão &quot;New Enterprise Bean&quot;</li>
      <li>Na combo box &quot;Create New JAR File in Application&quot;, selecione LisvrosJSPApp</li>
      <li>No campo &quot;JAR Display Name&quot;, digite BookDBJAR</li>
      <li>Clique em Edit para adicionar arquivos ao conteúdo</li>
      <li>Neste dialog box (Edit Contents), navegue até o diretório build/webejb e adicione os
        packages database e exception. Clique em OK e clique em Next</li>
      <li>Escolha Session e Stateless como tipo de Bean</li>
      <li>Em Enterprise Bean Class, selecione database.BookDBEJBImpl</li>
      <li>Na caixa &quot;Remote Interfaces&quot;, selecione database.BookDBEJBHome para<br>
        &quot;Remote Home Interface&quot; e database.BookDBEJB para &quot;Remote Interface&quot;</li>
      <li>No campo &quot;Enterprise Bean Name&quot;, digite BookDBEJB</li>
      <li>Clique em Next e Clique em Finish</li>
    </ul>
  </li>
  <li>Adicione a BookDBEJB uma referência de recurso para o banco de dados<ul>
      <li>Selecione o enterprise bean BookDBEJB</li>
      <li>Selecione a orelha &quot;Resource Refs&quot;</li>
      <li>Clique em Add</li>
      <li>Selecione javax.sql.DataSource na coluna Type</li>
      <li>Digite jdbc/BookDB no campo &quot;Coded Name&quot;</li>
      <li>Digite jdbc/BookDB no campo &quot;JNDI Name&quot;</li>
    </ul>
  </li>
  <li>Salve o BookDBJAR<ul>
      <li>Selecione BookDBJAR</li>
      <li>Selecione &quot;File-Save As&quot;</li>
      <li>Navegue até o diretório build/webejb</li>
      <li>Digite bookDB.jar no campo &quot;File name&quot;</li>
      <li>Clique em &quot;Save EJB JAR As&quot;</li>
    </ul>
  </li>
  <li>Adicione uma referência á Enterprise Bean BookDBEJB<ul>
      <li>Selecione LivrosJSPWAR</li>
      <li>Selecione a orelha &quot;EJB Refs&quot;</li>
      <li>Clique em Add</li>
      <li>Digite ejb/BookDBEJB na coluna &quot;Coded Name&quot;</li>
      <li>Selecione Session na coluna Type</li>
      <li>Selecione Remote na coluna Interfaces</li>
      <li>Digite database.BookDBEJBHome na coluna &quot;Home Interface&quot;</li>
      <li>Digite database.BookDBEJB na coluna &quot;Local/Remote Interface&quot;</li>
    </ul>
  </li>
  <li>Especifique nomes JNDI<ul>
      <li>Selecione LivrosJSPApp</li>
      <li>Selecione a orelha &quot;JNDI Names&quot;</li>
      <li>Na tabela &quot;Application&quot;, localize o componente EJB e digite BookDBEJB na
        coluna &quot;JNDI Name&quot;</li>
      <li>Na tabela &quot;References&quot;, localize &quot;EJB Ref&quot;, e digite BookDBEJB na
        coluna &quot;JNDI Name&quot;</li>
      <li>Na tabela &quot;References&quot;, locate o componente &quot;Resource&quot;&nbsp; e
        digite jdbc/BookDB na coluna &quot;JNDI Name&quot;</li>
    </ul>
  </li>
  <li>Forneça o &quot;context root&quot;<ul>
      <li>Selecione a orelha &quot;Web Context&quot;</li>
      <li>Enter ireallylovebooks</li>
    </ul>
  </li>
  <li>Salve</li>
  <li>Faça deployment da aplicação<ul>
      <li>Selecione Tools-&gt;Deploy</li>
      <li>Clique em Finish</li>
    </ul>
  </li>
  <li>Abra a URL da livraria <a href="http://anjinho.dsc.ufpb.br:8000/ireallylovebooks/enter">http://anjinho.dsc.ufpb.br:8000/ireallylovebooks/enter</a><ul>
      <li>A primeira navegação numa página JSP é mais lenta pois o servlet está sendo criado
        e compilado, antes da execução</li>
    </ul>
  </li>
</ul>

<h2>O Ciclo de Vida de uma Página JSP</h2>

<ul>
  <li>Ao chamar uma página JSP, um servlet especial verifica se página é mais nova do que o
    servlet que a representa<ul>
      <li>Se for, o servlet é regerado a partir da JSP e recompilado</li>
      <li>Isso ocorre automaticamente</li>
      <li>Necessário para alterar aplicações sem desligar o servidor para aplicações de
        missão crítica (24x7)</li>
    </ul>
  </li>
  <li>Portanto, uma página JSP é, na realidade, um servlet e muito da discussão sobre
    servlets se aplica aqui</li>
</ul>

<h3>Tradução e Compilação</h3>

<ul>
  <li>A tradução de uma página JSP para um servlet ocorre de acordo com as seguintes regras
    básicas:<ul>
      <li>Texto fora dos elementos JSp são impressos com out.println(...)</li>
      <li>Diretivas <font color="#0080FF">&lt;%@ ... %&gt;</font> controlam como o Web Container
        &nbsp; traduz e executa a página JSP<ul>
          <li>&quot;Executar a página&quot; significa &quot;executar o servlet gerado a partir da
            página&quot;</li>
        </ul>
      </li>
      <li>Elementos de script são inseridos em Java no código fonte do servlet<ul>
          <li>Veja detalhes adiante</li>
        </ul>
      </li>
      <li>Elementos como <font color="#0080FF">&lt;jsp:XXX ... /&gt;</font> são convertidos em
        chamadas de métodos para componentes JavaBeans (não EJB) ou chamadas à API de servlet</li>
    </ul>
  </li>
  <li>Depois da tradução, compilação da página e carga do servlet:<ul>
      <li>O método jspInit() é chamado<ul>
          <li>É comum fornecer código para este método para inicializar a página</li>
          <li>Vide adiante</li>
        </ul>
      </li>
      <li>O método _jspService() é chamado</li>
      <li>Quando o servlet é removido, jspDestroy() é chamado</li>
    </ul>
  </li>
</ul>

<h3>Execução</h3>

<ul>
  <li>As diretivas &quot;page&quot; podem controlar a execução da página</li>
</ul>

<h4>Bufferização</h4>

<ul>
  <li>Há bufferização automática</li>
  <li>O seguinte método pode alterar o parâmetros do buffer</li>
</ul>

<pre class="clsCode">&lt;%@ page buffer=&quot;none|xxxkb&quot; %&gt;</pre>

<h4>Tratamento de erros</h4>

<ul>
  <li>Exceções podem ocorrer durante a execução da páginas JSP</li>
  <li>A diretiva seguinte diz o que deve ser feito quando ocorre um erro</li>
</ul>

<pre class="clsCode">&lt;%@ page errorPage=&quot;file_name&quot; %&gt;</pre>

<ul>
  <li>Nossa aplicação usa a seguinte diretiva:</li>
</ul>

<pre class="clsCode">&lt;%@ page errorPage=&quot;errorpage.jsp&quot;%&gt;</pre>

<ul>
  <li>No início de errorpage.jsp, há a diretiva seguinte que diz que a página está
    tratando um erro</li>
</ul>

<pre class="clsCode">&lt;%@ page isErrorPage=&quot;true&quot; %&gt;</pre>

<ul>
  <li>Esta diretiva disponibiliza o objeto de exceção (da classe
    javax.servlet.jsp.JspException) para a página de erro para que você possa tratar a
    exceção adequadamente</li>
  <li>A errorpage.jsp completa aparece abaixo<ul>
      <li>A variável &quot;exception&quot; representa um objeto implícito disponibilizado pelo
        container</li>
    </ul>
  </li>
</ul>

<pre class="clsCode">&lt;%--
 
  Copyright 2001 Sun Microsystems, Inc. All Rights Reserved.
  
  This software is the proprietary information of Sun Microsystems, Inc.  
  Use is subject to license terms.
  
--%&gt;

&lt;%@ page isErrorPage=&quot;true&quot; %&gt;
&lt;%@ page import=&quot;java.util.*&quot; %&gt;
&lt;%
   ResourceBundle messages = (ResourceBundle)session.getAttribute(&quot;messages&quot;);
   if (messages == null) {
      Locale locale=null;
      String language = request.getParameter(&quot;language&quot;);

      if (language != null) { 
         if (language.equals(&quot;English&quot;)) { 
          locale=new Locale(&quot;en&quot;, &quot;&quot;); 
         } else { 
          locale=new Locale(&quot;pt&quot;, &quot;&quot;); 
         }
      } else 
         locale=new Locale(&quot;en&quot;, &quot;&quot;);

      messages = ResourceBundle.getBundle(&quot;BookStoreMessages&quot;, locale); 
      session.setAttribute(&quot;messages&quot;, messages);
   }
%&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;&lt;%=messages.getString(&quot;ServerError&quot;)%&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body bgcolor=&quot;white&quot;&gt;
&lt;h3&gt;
&lt;%=messages.getString(&quot;ServerError&quot;)%&gt;
&lt;/h3&gt;
&lt;p&gt;
&lt;%= exception.getMessage() %&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>

<h2>Inicialização e Finalização de uma Página JSP</h2>

<ul>
  <li>A inicialização é feita em jspInit() e a finalização em jspDestroy()</li>
  <li>Os servlets que precisam acessar o banco de dados (catalog.jsp, bookdetails,
    showcart.jsp, bookstore.jsp) incluem uma página de inicialização</li>
</ul>

<pre class="clsCode">&lt;%@ include file=&quot;initdestroy.jsp&quot; %&gt;</pre>

<ul>
  <li>Esta página define os métodos jspInit() e jspDestroy()<ul>
      <li>jspInit obtém acesso a um EJB que acessa o banco de dados</li>
      <li>Detalhes sobre EJB serão vistos em outro capítulo</li>
    </ul>
  </li>
</ul>

<pre class="clsCode">&lt;%@ page import=&quot;database.*&quot; %&gt;
&lt;%@ page errorPage=&quot;errorpage.jsp&quot; %&gt;
&lt;%@ page import=&quot;javax.ejb.*, javax.naming.*,
                 javax.rmi.PortableRemoteObject, java.rmi.RemoteException,
                 database.BookDB, database.BookDBEJB, database.BookDBEJBHome&quot;
%&gt;
&lt;%!
    private BookDBEJB bookDBEJB;

    public void jspInit() {  

      bookDBEJB =
          (BookDBEJB)getServletContext().getAttribute(&quot;bookDBEJB&quot;);

      if (bookDBEJB == null) {
        try {
          InitialContext ic = new InitialContext();
          Object objRef = ic.lookup(&quot;java:comp/env/ejb/BookDBEJB&quot;);
          BookDBEJBHome home = (BookDBEJBHome)PortableRemoteObject.narrow(objRef, 
                               database.BookDBEJBHome.class);
          bookDBEJB = home.create();
          getServletContext().setAttribute(&quot;bookDBEJB&quot;, bookDBEJB);
        } catch (RemoteException ex) {
          System.out.println(&quot;Couldn't create database bean.&quot; + ex.getMessage());
        } catch (CreateException ex) {
          System.out.println(&quot;Couldn't create database bean.&quot; + ex.getMessage());
        } catch (NamingException ex) {
          System.out.println(&quot;Unable to lookup home: &quot;+ &quot;java:comp/env/ejb/BookDBEJB.&quot;+ ex.getMessage());
        }
      }  
    }

   public void jspDestroy() {      
      bookDBEJB = null;
   }
%&gt;</pre>

<ul>
  <li>É também possível tratar a inicialização usando ContextListener como fizemos com
    servlets<ul>
      <li>Exercício para casa: altere a aplicação para usar um ContextListener</li>
    </ul>
  </li>
</ul>

<h2>Criação de Conteúdo Estático</h2>

<ul>
  <li>Conteúdo estático (digamos HTML) é simplesmente escrito na página JSP</li>
  <li>O default é HTML, mas o atributo contentType pode ser mudado para informar o formato
    adequado</li>
  <li>Por exemplo, para gerar WML:</li>
</ul>

<pre class="clsCode">&lt;%@ page contentType=&quot;text/vnd.wap.wml&quot;%&gt;</pre>

<h2>Criação de Conteúdo Dinâmico</h2>

<ul>
  <li>Para gerar conteúdo dinâmico, acessam-se objetos Java usando elementos de script</li>
</ul>

<h3>Usando Objetos em Páginas JSP</h3>

<ul>
  <li>Vários objetos podem ser acessados a partir de uma página JSP<ul>
      <li>Alguns desses objetos são automaticamente disponibilizados pelo container (objetos
        implícitos)</li>
      <li>Outros objetos são específicos para sua aplicação</li>
    </ul>
  </li>
</ul>

<h4>Objetos implícitos</h4>

<ul>
  <li>São criados pelo container</li>
  <li>Contêm informação relacionada com um pedido, uma página, uma sessão ou uma
    aplicação inteira</li>
  <li>A tabela abaixo sumariza esses objetos</li>
</ul>

<table border="1" width="100%">
  <tr>
    <td width="33%" align="center"><big><strong>Variável</strong></big></td>
    <td width="33%" align="center"><big><strong>Classe</strong></big></td>
    <td width="34%" align="center"><big><strong>Descrição</strong></big></td>
  </tr>
  <tr>
    <td width="33%">application</td>
    <td width="33%">javax.servlet.ServletContext</td>
    <td width="34%">O contexto do servlet da página JSP e de qualquer Web Component contidos
    na mesma aplicação</td>
  </tr>
  <tr>
    <td width="33%">config</td>
    <td width="33%">javax.servlet.ServletConfig</td>
    <td width="34%">Informação de inicialização para o servlet da página JSP</td>
  </tr>
  <tr>
    <td width="33%">exception</td>
    <td width="33%">java.lang.Throwable</td>
    <td width="34%">Acessível apenas a partir de uma página de erro</td>
  </tr>
  <tr>
    <td width="33%">out</td>
    <td width="33%">javax.servlet.jsp.JspWriter</td>
    <td width="34%">O stream de saída</td>
  </tr>
  <tr>
    <td width="33%">page</td>
    <td width="33%">java.lang.Object</td>
    <td width="34%">A instância do servlet da página JSP processando o pedido atual.
    Raramente usado por autores de páginas JSP</td>
  </tr>
  <tr>
    <td width="33%">pageContext</td>
    <td width="33%">javax.servlet.jsp.PageContext</td>
    <td width="34%">O contexto de uma página JSP. Provê uma API única para gerenciar
    atributos com escopo. Esta API é muito usada ao implementar &quot;tag handlers&quot; (ver
    em outro capítulo)</td>
  </tr>
  <tr>
    <td width="33%">request</td>
    <td width="33%">subtipo de javax.servlet.ServletRequest</td>
    <td width="34%">O pedido gatilhando a execução da página JSP</td>
  </tr>
  <tr>
    <td width="33%">response</td>
    <td width="33%">subtipo de javax.servlet.ServletResponse</td>
    <td width="34%">A resposta retornada ao cliente. Raramente usado por autores de páginas
    JSP</td>
  </tr>
  <tr>
    <td width="33%">session</td>
    <td width="33%">javax.servlet.http.HttpSession</td>
    <td width="34%">O objeto de sessão com o cliente</td>
  </tr>
</table>

<h4>Objetos específicos de aplicação</h4>

<ul>
  <li>Não coloque business logic na página JSP!</li>
  <li>É melhor encapsular o business logic em objetos<ul>
      <li>Melhor que sejam beans para facilitar a escrita de página JSP</li>
    </ul>
  </li>
  <li>Isso permite que Page Designers se concentrem em questões de apresentação</li>
  <li>Há 4 formas de criar objetos numa página JSP<ul>
      <li>A classe de servlet da página JSP pode ter, como qualquer classe, variáveis de
        instância (atributos) e variáveis de classe (estáticas)<ul>
          <li>Tais variáveis são declaradas em declarações (vide adiante) e acessadas em
            scriptlets e expressões (vide adiante)</li>
        </ul>
      </li>
      <li>Atributos de objetos de escopo (nos escopos ServletContext, HttpSession, ServletRequest
        e PageContext) são criados e usados em scriptlets e expressões</li>
      <li>Componentes JavaBeans podem ser criados e acessados usando elementos JSP<ul>
          <li>Ver próximo capítulo</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4>Objetos compartilhados</h4>

<ul>
  <li>O container pode iniciar páginas JSPs em servlets multithreaded ou não</li>
  <li>Isso é indicado na sua página com a diretiva</li>
</ul>

<pre class="clsCode">&lt;%@ page isThreadSafe=&quot;true|false&quot; %&gt;</pre>

<ul>
  <li>Com &quot;true&quot;, o container poderá despachar pedidos de clientes diferentes para
    essa página em threads diferentes</li>
  <li>O default é &quot;true&quot;</li>
  <li>Cuidado! Com &quot;false&quot;, você não precisa se preocupar com o acesso simultâneo
    a objetos com escopo de página mas deve continuar a tratar da concorrência em objetos em
    escopos de sessão e aplicação</li>
</ul>

<h3>Elementos de Script JSP</h3>

<ul>
  <li>Elementos de scripts são usados para:<ul>
      <li>Criar e acessar objetos</li>
      <li>Definir métodos</li>
      <li>Gerenciar o controle de fluxo</li>
    </ul>
  </li>
  <li>Um dos objetivos da tecnologia JSP é de separar os dados estáticos de templates HTML e
    o código necessário para gerar conteúdo dinâmico<ul>
      <li>Portanto, evite programar na página JSP</li>
      <li>O uso de &quot;custom tags&quot;, visto à frente, ajuda a minimizar a programação</li>
    </ul>
  </li>
  <li>A linguagem de script é Java mas pode ser qualquer outra que possa chamar objetos Java</li>
</ul>

<pre class="clsCode">&lt;%@ page language=&quot;linguagem de script&quot; %&gt;</pre>

<ul>
  <li>Se precisar importar classes ou pacotes:</li>
</ul>

<pre class="clsCode">&lt;%@ page import=&quot;packagename.*, fully_qualified_classname&quot; %&gt;</pre>

<ul>
  <li>Por exemplo, na nossa aplicação, showcart.jsp faz o seguinte:</li>
</ul>

<pre class="clsCode">&lt;%@ page import=&quot;java.util.*, cart.*&quot; %&gt;</pre>

<h4>Declarações</h4>

<ul>
  <li>Usadas para declarar variáveis e métodos</li>
  <li>A sintaxe é:</li>
</ul>

<pre class="clsCode">&lt;%! declaração na linguagem de script %&gt;</pre>

<ul>
  <li>Exemplo: aqui está (novamente) o arquivo initdestroy.jsp, incluído em várias páginas
    JSP</li>
</ul>

<pre class="clsCode">&lt;%--
 
  Copyright 2001 Sun Microsystems, Inc. All Rights Reserved.
  
  This software is the proprietary information of Sun Microsystems, Inc.  
  Use is subject to license terms.
  
--%&gt;

&lt;%@ page import=&quot;database.*&quot; %&gt;
&lt;%@ page errorPage=&quot;errorpage.jsp&quot; %&gt;
&lt;%@ page import=&quot;javax.ejb.*, javax.naming.*,
                 javax.rmi.PortableRemoteObject, java.rmi.RemoteException,
                 database.BookDB, database.BookDBEJB, database.BookDBEJBHome&quot;
%&gt;
&lt;%!
    private BookDBEJB bookDBEJB;

    public void jspInit() {  

      bookDBEJB =
          (BookDBEJB)getServletContext().getAttribute(&quot;bookDBEJB&quot;);

      if (bookDBEJB == null) {
        try {
          InitialContext ic = new InitialContext();
          Object objRef = ic.lookup(&quot;java:comp/env/ejb/BookDBEJB&quot;);
          BookDBEJBHome home = (BookDBEJBHome)PortableRemoteObject.narrow(objRef, 
                               database.BookDBEJBHome.class);
          bookDBEJB = home.create();
          getServletContext().setAttribute(&quot;bookDBEJB&quot;, bookDBEJB);
        } catch (RemoteException ex) {
          System.out.println(&quot;Couldn't create database bean.&quot; + ex.getMessage());
        } catch (CreateException ex) {
          System.out.println(&quot;Couldn't create database bean.&quot; + ex.getMessage());
        } catch (NamingException ex) {
          System.out.println(&quot;Unable to lookup home: &quot;+ &quot;java:comp/env/ejb/BookDBEJB.&quot;+ ex.getMessage());
        }
      }  
    }

   public void jspDestroy() {      
      bookDBEJB = null;
   }
%&gt;</pre>

<h4>Scriptlets</h4>

<ul>
  <li>Um scriptlet contém um fragmento de código</li>
</ul>

<pre class="clsCode">&lt;%
  comandos na linguagem de script
%&gt;</pre>

<ul>
  <li>Uma variável criada num scriptlet pode ser acessada em qualquer lugar da página JSP</li>
  <li>Exemplo: observe como showcart.jsp itera nos itens que estão na cesta de compras
    (trecho em <font color="#0080FF">destaque</font>)</li>
</ul>

<pre class="clsCode">&lt;%@ include file=&quot;initdestroy.jsp&quot; %&gt;
&lt;%@ page import=&quot;java.util.*, cart.*&quot; %&gt;
&lt;%
   ResourceBundle messages = (ResourceBundle)session.getAttribute(&quot;messages&quot;);
%&gt;

&lt;jsp:useBean id=&quot;bookDB&quot; class=&quot;database.BookDB&quot; scope=&quot;page&quot; &gt;
  &lt;jsp:setProperty name=&quot;bookDB&quot; property=&quot;database&quot; value=&quot;&lt;%=bookDBEJB%&gt;&quot; /&gt;
&lt;/jsp:useBean&gt;


&lt;jsp:useBean id=&quot;cart&quot; scope=&quot;session&quot; class=&quot;cart.ShoppingCart&quot;/&gt;
&lt;jsp:useBean id=&quot;currency&quot; class=&quot;util.Currency&quot; scope=&quot;session&quot;&gt;
  &lt;jsp:setProperty name=&quot;currency&quot; property=&quot;locale&quot; value=&quot;&lt;%=request.getLocale()%&gt;&quot;/&gt;
&lt;/jsp:useBean&gt;

&lt;html&gt;
&lt;head&gt;&lt;title&gt;&lt;%=messages.getString(&quot;TitleShoppingCart&quot;)%&gt;&lt;/title&gt;&lt;/head&gt;
&lt;%@ include file=&quot;banner.jsp&quot; %&gt;
&lt;%
  String bookId = request.getParameter(&quot;Remove&quot;);
  if (bookId != null) {
    cart.remove(bookId);
    bookDB.setBookId(bookId);
      BookDetails book = bookDB.getBookDetails();
%&gt;

&lt;font color=&quot;red&quot; size=&quot;+2&quot;&gt;&lt;%=messages.getString(&quot;CartRemoved&quot;)%&gt;&lt;em&gt;&lt;%=book.getTitle()%&gt;
&lt;/em&gt; 
&lt;br&gt;&amp;nbsp;&lt;br&gt; 
&lt;/font&gt;

&lt;%
  } 

if (request.getParameter(&quot;Clear&quot;) != null) {
  cart.clear();
%&gt;

&lt;font color=&quot;red&quot; size=&quot;+2&quot;&gt;&lt;strong&gt; 
&lt;%=messages.getString(&quot;CartCleared&quot;)%&gt;
&lt;/strong&gt;&lt;br&gt;&amp;nbsp;&lt;br&gt;&lt;/font&gt;

&lt;%
  }
  // Print a summary of the shopping cart
  int num = cart.getNumberOfItems();
  if (num &gt; 0) {
%&gt;


&lt;font size=&quot;+2&quot;&gt;&lt;%=messages.getString(&quot;CartContents&quot;)%&gt;&lt;%=num%&gt; &lt;%=(num==1 ? messages.getString(&quot;CartItem&quot;) : messages.getString(&quot;CartItems&quot;))%&gt;
&lt;/font&gt;&lt;br&gt;&amp;nbsp;

&lt;table&gt; 
&lt;tr&gt; 
&lt;th align=left&gt;&lt;%=messages.getString(&quot;ItemQuantity&quot;)%&gt;&lt;/TH&gt; 
&lt;th align=left&gt;&lt;%=messages.getString(&quot;ItemTitle&quot;)%&gt;&lt;/TH&gt; 
&lt;th align=left&gt;&lt;%=messages.getString(&quot;ItemPrice&quot;)%&gt;&lt;/TH&gt; 
&lt;/tr&gt;

<font
color="#0080FF">&lt;% 
    Iterator i = cart.getItems().iterator();
    while (i.hasNext()) {
      ShoppingCartItem item = (ShoppingCartItem)i.next();
      BookDetails book = (BookDetails)item.getItem();
%&gt;

&lt;tr&gt; 
&lt;td align=&quot;right&quot; bgcolor=&quot;#ffffff&quot;&gt; 
&lt;%=item.getQuantity()%&gt;
&lt;/td&gt; 

&lt;td bgcolor=&quot;#ffffaa&quot;&gt; 
&lt;strong&gt;&lt;a href=&quot;&lt;%=request.getContextPath()%&gt;/bookdetails?bookId=&lt;%=book.getBookId()%&gt;&quot;&gt;
&lt;%=book.getTitle()%&gt;&lt;/a&gt;&lt;/strong&gt; 
&lt;/td&gt; 

&lt;td bgcolor=&quot;#ffffaa&quot; align=&quot;right&quot;&gt; 
&lt;jsp:setProperty name=&quot;currency&quot; property=&quot;amount&quot; value=&quot;&lt;%=book.getPrice()%&gt;&quot;/&gt;
&lt;jsp:getProperty name=&quot;currency&quot; property=&quot;format&quot;/&gt;&amp;nbsp;&lt;/td&gt;  

&lt;td bgcolor=&quot;#ffffaa&quot;&gt; 
&lt;strong&gt; 
&lt;a href=&quot;&lt;%=request.getContextPath()%&gt;/showcart?Remove=&lt;%=book.getBookId()%&gt;&quot;&gt;&lt;%=messages.getString(&quot;RemoveItem&quot;)%&gt;&lt;/a&gt;&lt;/strong&gt; 
&lt;/td&gt;&lt;/tr&gt;

&lt;%
    // End of while
      }
%&gt;
</font>
&lt;tr&gt;&lt;td colspan=&quot;5&quot; bgcolor=&quot;#ffffff&quot;&gt; 
&lt;br&gt;&lt;/td&gt;&lt;/tr&gt; 

&lt;tr&gt; 
&lt;td colspan=&quot;2&quot; align=&quot;right&quot; &quot;bgcolor=&quot;#ffffff&quot;&gt; 
&lt;%=messages.getString(&quot;Subtotal&quot;)%&gt;&lt;/td&gt; 
&lt;td bgcolor=&quot;#ffffaa&quot; align=&quot;right&quot;&gt; 
&lt;jsp:setProperty name=&quot;currency&quot; property=&quot;amount&quot; value=&quot;&lt;%=cart.getTotal()%&gt;&quot;/&gt;
&lt;jsp:getProperty name=&quot;currency&quot; property=&quot;format&quot;/&gt;
&lt;/td&gt; 
&lt;/td&gt;&lt;td&gt;&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 

&lt;p&gt;&amp;nbsp;&lt;p&gt;
&lt;strong&gt;&lt;a href=&quot;&lt;%=request.getContextPath()%&gt;/catalog&quot;&gt;&lt;%=messages.getString(&quot;ContinueShopping&quot;)%&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;  
&lt;a href=&quot;&lt;%=request.getContextPath()%&gt;/cashier&quot;&gt;&lt;%=messages.getString(&quot;Checkout&quot;)%&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;a href=&quot;&lt;%=request.getContextPath()%&gt;/showcart?Clear=clear&quot;&gt;&lt;%=messages.getString(&quot;ClearCart&quot;)%&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;% 
} else { 
%&gt;

&lt;font size=&quot;+2&quot;&gt;&lt;%=messages.getString(&quot;CartEmpty&quot;)%&gt;&lt;/font&gt; 
&lt;br&gt;&amp;nbsp;&lt;br&gt; 
&lt;center&gt;&lt;a href=&quot;&lt;%=request.getContextPath()%&gt;/catalog&quot;&gt;&lt;%=messages.getString(&quot;Catalog&quot;)%&gt;&lt;/a&gt; &lt;/center&gt;

&lt;%
  // End of if
  }
%&gt;

&lt;/body&gt;
&lt;/html&gt;</pre>

<h4>Expressões</h4>

<ul>
  <li>Usadas parar inserir no stream de saída um string correspondendo a uma expressão</li>
</ul>

<pre class="clsCode">&lt;%= expressão na linguagem de script %&gt;</pre>

<ul>
  <li>Como exemplos, identifique o uso de expressões na página showcart.jsp, acima</li>
</ul>

<h2>Inclusão de Conteúdo numa Página JSP</h2>

<ul>
  <li>Há duas formas de incluir conteúdo numa página JSP<ul>
      <li>Durante a tradução da página</li>
      <li>Durante a execução da página</li>
    </ul>
  </li>
  <li>A inclusão durante a tradução é feita através de diretiva como já visto:</li>
</ul>

<pre class="clsCode">&lt;%@ include file=&quot;initdestroy.jsp&quot; %&gt;
// ...
&lt;%@ include file=&quot;banner.jsp&quot; %&gt;</pre>

<ul>
  <li>A inclusão durante a execução é feita com elemento JSP:</li>
</ul>

<pre class="clsCode">&lt;jsp:include page=&quot;date.jsp&quot;/&gt;</pre>

<ul>
  <li>Este exemplo foi usado no exemplo &quot;data&quot;, acima</li>
  <li>Quando usar a diretiva e quando usar o elemento JSP para incluir?
    <ul>
      <li>Nos casos acima, qualquer um serve</li>
      <li>Usar o elemento JSP é um pouco mais lento</li>
      <li>A decisão tem a ver com a freqüência de atualização do recurso
        incluído (a página)
        <ul>
          <li>Se você vai alterar o conteúdo da página incluída com
            frequência, é melhor usar o elemento JSP pois a última versão
            sempre vai ser incluída</li>
          <li>Isso só aconteceria com a diretiva se houvesse recompilação da
            página, o que não vai ocorrer automaticamente, porque a página
            original (que faz a inclusão) não foi alterada</li>
          <li>Se a informação incluída mudar infrequentemente, pode usar a
            diretiva</li>
        </ul>
      </li>
      <li>Exemplo: se você tiver uma página mensagemDoDia.jsp, com uma
        mensagem que muda todos os dias e que é incluída em várias outras
        páginas JSP, pode ser mais conveniente usar o elemento JSP</li>
    </ul>
  </li>
</ul>

<h2>Transferência de Controle para Outro Web Component</h2>

<ul>
  <li>Antes de retornar informação para o cliente, uma página JSP pode transferir o
    controle para outra página:</li>
</ul>

<pre class="clsCode">&lt;jsp:forward page=&quot;/main.jsp&quot; /&gt;</pre>

<h3>Elemento Param</h3>

<ul>
  <li>Num elemento &quot;include&quot; ou &quot;forward&quot;, parâmetros adicionais (al´pem
    dos disponíveis no pedido original) podem ser passados:</li>
</ul>

<pre class="clsCode">&lt;jsp:include page=&quot;...&quot; &gt;
  &lt;jsp:param name=param1 value=&quot;value1&quot;/&gt;
&lt;/jsp:include&gt;</pre>

<ul>
  <li>Nossa aplicação usa &lt;jsp:param ...&gt;, mas em outro contexto que não veremos aqui
    (a inclusão de um applet)</li>
</ul>

<h2>Finalmente ...</h2>

<ul>
  <li>Não mostraremos todo o código fonte da aplicação aqui: as novidades já foram
    tratadas</li>
  <li>É responsabilidade do aluno estudar o código completo da aplicação</li>
</ul>

<p class="botref">livros <a href="../j2ee-2.htm">programa</a> </p>
</body>
</html>
