<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<link REL="stylesheet" TYPE="text/css" HREF="../cursos.css" />
<title>Introdução e Motivação: Arquiteturas em n Camadas</title>
</head>

<body>

<h1 align="center">Introdução e Motivação: Arquiteturas em n Camadas</h1>

<h2>Um Problema: Pressões do negócio</h2>

<ul>
  <li>Steve Jobs fala: &quot;Few companies have the luxury of reinventing themselves when they
    compete on <font color="#0080ff">Internet time</font>&quot; <ul>
      <li>&quot;Internet time&quot; é um novo conceito (final dos anos 1990) e significa que as empresas
        devem implementar novos sistemas <em>muito</em> rapidamente </li>
    </ul>
  </li>
  <li>Muitos sistemas de empresas devem migrar para Internet/Intranet/Extranet </li>
  <li>Novos tipos de sistemas devem ser desenvolvidos para usar a tecnologia como <font
    color="#0080FF"><em>business advantage</em></font>, dando um diferencial nos negócios </li>
  <li>Muitos sistemas devem mudar devido a mudanças nos negócios <ul>
      <li>Fusões e aquisições </li>
    </ul>
  </li>
  <li>Resultado: tem <font color="#0080FF"> <em>muito</em>  mais software </font> a fazer, <em><font color="#0080FF">muito
    mais rapidamente</font></em> <ul>
      <li>Mas há pressões para manter custos de IT (<em>Information Technology</em>) baixos </li>
      <li>Hoje (início dos anos 2000), de 4 a 6% da receita é gasta com TI! É altíssimo! </li>
    </ul>
  </li>
</ul>

<h2>Outro Problema: Pressões Tecnológicas</h2>

<ul>
  <li>O desenvolvimento de software ficou muito mais complexo nos últimos anos <ul>
      <li>Pelos motivos acima </li>
      <li>Porque usuários querem funcionalidade mais sofisticada </li>
    </ul>
  </li>
  <li>Problemas de complexidade <ul>
      <li>O desenvolvimento de muitos grandes sistemas tem fracassado recentemente </li>
      <li>A figura mais citada: 80% dos projetos são fracassos! </li>
    </ul>
  </li>
  <li>Resumindo: fazer sistemas de produção customizados do zero in-house: <ul>
      <li>É muito <font color="#0080ff">caro</font> </li>
      <li>Demora muito <font color="#0080ff">tempo</font> </li>
      <li>Não produz boa <font color="#0080ff">qualidade</font></li>
    </ul>
  </li>
</ul>

<h2>Requisitos da Solução: O que queremos com a TI?</h2>

<ul>
  <li>O que grandes empresas, com grandes problemas de desenvolvimento de sistemas, querem,
    tecnologicamente?</li>
  <li>Melhor <font color="#0080ff">flexibilidade</font> <ul>
      <li>Possibilitando satisfazer novos requisitos do negócio (=funcionalidade) rapidamente </li>
    </ul>
  </li>
  <li>Melhor <font color="#0080ff">adaptabilidade</font> <ul>
      <li>Possibilitando customizar uma aplicação para vários usuários, usando várias
        alternativas de <em>delivery</em> dos serviços da aplicação com impacto mínimo ao
        núcleo da aplicação </li>
    </ul>
  </li>
  <li>Melhor <font color="#0080ff">manutenabilidade</font> <ul>
      <li>Possibilitando atualizar uma aplicação, mas minimizando o impacto da maioria das
        mudanças </li>
    </ul>
  </li>
  <li>Melhor <font color="#0080ff">reusabilidade</font> <ul>
      <li>Possibilitando rapidamente montar aplicações únicas e dinâmicas </li>
    </ul>
  </li>
  <li>Melhor <font color="#0080ff">aproveitamento do legado</font><ul>
      <li>Possibilitando reusar a funcionalidade de sistemas legados em novas aplicações </li>
    </ul>
  </li>
  <li>Melhor <font color="#0080ff">interoperabilidade</font><ul>
      <li>Possibilitando integrar 2 aplicações executando em plataformas diferentes </li>
    </ul>
  </li>
  <li>Melhor <font color="#0080ff">escalabilidade</font><ul>
      <li>Possibilitando distribuir e configurar a execução da aplicação para satisfazer
        vários volumes de transação </li>
    </ul>
  </li>
  <li>Menor <font color="#0080ff">tempo de desenvolvimento</font> <ul>
      <li>Possibilitando viver em &quot;Internet time&quot; e com baixo orçamento</li>
      <li>Equivalente a querer Produtividade do Programador</li>
    </ul>
  </li>
  <li>Melhor <font color="#0080ff">robustez</font> <ul>
      <li>Possibilitando ter soluções com menos defeitos</li>
      <li>Possibilitando ter confiabilidade e disponibilidade</li>
    </ul>
  </li>
  <li>Menor <font color="#0080ff">risco</font> <ul>
      <li>Possibilitando tudo que falamos acima e ainda não se arriscar a ter projetos
        fracassados </li>
    </ul>
  </li>
  <li>Resumindo: tudo que ISO 9126 caracteriza como &quot;<font color="#0080ff">qualidade de
    software</font>&quot; <ul>
      <li>Funcionalidade, Manutenibilidade, Usabilidade, Eficiência, Confiabilidade,
        Portabilidade </li>
      <li>E mais algumas coisinhas ... </li>
    </ul>
  </li>
</ul>

<h2>Solução: Aplicações Multicamadas Distribuídas</h2>

<ul>
  <li>Faremos um resumo histórico das arquiteturas de aplicações</li>
</ul>

<h3>Arquitetura centralizada</h3>

<ul>
  <li>Dominantes até década de 80 como arquitetura corporativa</li>
  <li>Problema básico: interface não amigável</li>
</ul>

<h3>Arquitetura em 2 camadas</h3>

<ul>
  <li>Sistemas em camadas surgiram para:<ul>
      <li>Melhor aproveitar os PCs da empresa</li>
      <li>Oferecer sistemas com interfaces gráficas amigáveis</li>
      <li>Integrar o desktop e os dados corporativos</li>
    </ul>
  </li>
  <li>Em outras palavras, permitiram aumentar a escalabilidade de uso de Sistemas de
    Informação</li>
  <li>Os primeiros sistemas cliente-servidor eram de duas camadas<ul>
      <li>Camada cliente trata da lógica de negócio e da UI</li>
      <li>Camada servidor trata dos dados (usando um SGBD)</li>
    </ul>
  </li>
</ul>

<p align="center"><img src="2camadas.gif" width="556" height="339"
alt="2camadas.gif (5988 bytes)"></p>

<h3>Arquitetura em 3 camadas</h3>

<ul>
  <li>A arquitetura cliente/servidor em 2 camadas sofria de vários problemas:<ul>
      <li>Falta de escalabilidade (conexões a bancos de dados) </li>
      <li>Enormes problemas de manutenção (mudanças na lógica de aplicação forçava
        instalações)</li>
      <li>Dificuldade de acessar fontes heterogêneas (legado CICS, 3270, ...)</li>
    </ul>
  </li>
  <li>Inventou-se a arquitetura em 3 camadas<ul>
      <li>Camada de apresentação (UI)</li>
      <li>Camada de aplicação (business logic)</li>
      <li>Camada de dados</li>
    </ul>
  </li>
</ul>

<p align="center"><img src="3camadas.gif" width="796" height="339"
alt="3camadas.gif (8442 bytes)"></p>

<ul>
  <li>Problemas de manutenção foram reduzidos, pois mudanças às camadas de aplicação e de
    dados não necessitam de novas instalações no desktop</li>
  <li>Observe que as camadas são lógicas<ul>
      <li>Fisicamente, várias camadas podem executar na mesma máquina</li>
      <li>Quase sempre, há separação física de máquinas</li>
    </ul>
  </li>
</ul>

<h3>Arquitetura em 3/4 camadas Web-Based</h3>

<ul>
  <li>A arquitetura em 3 camadas original sofre de problemas:<ul>
      <li>A instalação inicial dos programas no desktop é cara</li>
      <li>O problema de manutenção ainda persiste quando há mudanças à camada de
        apresentação</li>
      <li>Não se pode instalar software facilmente num desktop que não está sob seu controle
        administrativo<ul>
          <li>Em máquinas de parceiros</li>
          <li>Em máquinas de fornecedores</li>
          <li>Em máquinas de grandes clientes</li>
          <li>Em máquinas na Internet</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Então, usamos o Browser como Cliente Universal<ul>
      <li>Conceito de Intranet</li>
      <li>A camada de aplicação se quebra em duas: Web e Aplicação</li>
      <li>Evitamos instalar qualquer software no desktop e portanto, problemas de manutenção</li>
      <li>Evitar instalação em computadores de clientes, parceiros, fornecedores, etc.</li>
    </ul>
  </li>
  <li>Às vezes, continua-se a chamar isso de 3 camadas porque as camadas Web e Aplicação
    freqüentemente rodam na mesma máquina (para pequenos volumes)</li>
</ul>

<p align="center"><img src="3camadas-web.gif" width="796" height="339"
alt="3camadas-web.gif (8603 bytes)"></p>

<h3>Arquitetura distribuída em n camadas</h3>

<ul>
  <li>Os problemas remanescentes:<ul>
      <li>Não há suporte a Thin Clients (PDA, celulares, smart cards, quiosques, ...) pois
        preciso usar um browser (pesado) no cliente</li>
      <li>Dificuldade de criar software reutilizável: cadê a componentização?</li>
      <li>Fazer aplicações distribuídas multicamadas é difícil. Tem que:<ul>
          <li>Implementar persistência (<i>impedance mismatch </i> entre o mundo OO e o mundo dos BDs
            relacionais)</li>
          <li>Implementar tolerância a falhas com fail-over</li>
          <li>Implementar gerência de transações distribuídas</li>
          <li>Implementar balanceamento de carga</li>
          <li>Implementar <i> resource pooling</i></li>
          <li>etc.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>As empresas não querem contratar PhDs para implementar sistemas de informação!</li>
  <li>O truque é introduzir <i> middleware</i> num servidor de aplicação que ofereça esses
    serviços <font color="#0080FF">automaticamente</font></li>
  <li>Além do mais, as soluções oferecidas (J2EE, .Net) são baseadas em componentes</li>
</ul>

<p align="center"><img src="ncamadas.gif" width="808" height="508"
alt="ncamadas.gif (13873 bytes)"></p>

<ul>
  <li>As camadas podem ter vários nomes:<ul>
      <li>Apresentação, interface, cliente</li>
      <li>Web</li>
      <li>Aplicação, Business</li>
      <li>Dados, Enterprise Information System (EIS)</li>
    </ul>
  </li>
</ul>

<p class="botref">intro-1 <a href="../j2ee-2.htm">programa</a> </p>
</body>
</html>
