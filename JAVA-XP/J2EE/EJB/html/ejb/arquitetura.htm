<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<link REL="stylesheet" TYPE="text/css" HREF="../cursos.css" />
<title>EJB: Arquitetura</title>
</head>

<body>

<h1 align="center">EJB: Arquitetura</h1>

<h2>Introdução</h2>

<ul>
  <li>Quais são os <font color="#0080FF">Serviços de Suporte</font> (ou <font
    color="#0080FF">Middleware</font>) da Camada de Aplicação?<ul>
      <li>Persistência de componentes e acesso a dados</li>
      <li>Gerência de transações distribuídas</li>
      <li>Directory/Naming<ul>
          <li>Para achar serviços, componentes, etc.</li>
        </ul>
      </li>
      <li>Segurança</li>
      <li>Tolerância a falha com Failover</li>
      <li>Prover escalabilidade com truques para aumentar a performance<ul>
          <li>Balanceamento de carga</li>
          <li>Resource pooling<ul>
              <li>Exemplo: Conexões aos SGBDs</li>
            </ul>
          </li>
          <li>Multithreading</li>
        </ul>
      </li>
      <li>Monitoring, logging</li>
    </ul>
  </li>
  <li>Mas todo isso tem que ser feito dentro de um <font color="#0080FF">paradigma de
    componentes</font><ul>
      <li>Para maximizar a reusabilidade</li>
      <li><font color="#0080FF">Server Components</font></li>
    </ul>
  </li>
  <li>Os problemas básicos que precisamos resolver no uso de Server Components são aqueles
    listados acima como Serviços de Suporte da Camada de Aplicação<ul>
      <li><font color="#0080FF">Help</font>! Programadores normais não sabem como resolver essas
        questões (difíceis)</li>
      <li>E nem deveriam! Eu, como empresário, quero que meus programadores se concentrem no
        Business Logic, não em acertar transações distribuídas!</li>
    </ul>
  </li>
  <li><font color="#0080FF">Server Component Model</font><ul>
      <li>Precisamos de um modelo de componentes que simplifique o processo de mover Business
        Logic para o servidor</li>
      <li>Para tanto, o modelo deve implementar um conjunto de <font color="#0080FF">serviços
        automáticos </font>para gerenciar os componentes</li>
      <li>Em outras palavras, queremos um framework que ofereça serviços automáticos e permita
        que o Business Logic seja plugado facilmente com componentes que obedeçam ao modelo</li>
    </ul>
  </li>
</ul>

<h2>Overview de Enterprise JavaBeans (EJB)</h2>

<ul>
  <li>EJB não é um produto: é uma <font color="#0080FF">especificação</font><ul>
      <li>Para ter suporte multifornecedor</li>
      <li>Sistemas Abertos continuam ...</li>
    </ul>
  </li>
  <li>O objetivo maior é deixar o programador se concentrar no Business Logic</li>
  <li>Isso é feito de duas grandes formas:<ul>
      <li>Programação Declarativa</li>
      <li>Serviços Automáticos</li>
    </ul>
  </li>
</ul>

<h3>Programação Declarativa</h3>

<ul>
  <li>Cada Bean tem um <font color="#0080FF">Deployment Descriptor</font> que permite
    configurá-lo visualmente durante a implantação<ul>
      <li>Sem ter código fonte e sem programar</li>
    </ul>
  </li>
</ul>

<h3>Serviços Automáticos</h3>

<ul>
  <li><font color="#000000">Implementados por um <em>Container</em></font></li>
</ul>

<p align="center"><img src="Container-Bean.gif" width="391" height="251"
alt="Container-Bean.gif (6553 bytes)"></p>

<ul>
  <li><font color="#0080FF">Lifecycle</font><ul>
      <li><font color="#000000">Bean não precisa se preocupar com criação de processos,
        threads, ativação ou destruição de objetos</font></li>
    </ul>
  </li>
  <li><font color="#0080FF">Gerência de estado</font><ul>
      <li><font color="#000000">O estado conversacional de Beans (se houver) é gerenciado
        (salvo/recuperado) automaticamente</font></li>
    </ul>
  </li>
  <li><font color="#0080FF">Segurança</font><ul>
      <li><font color="#000000">Beans não precisam autenticar os usuários ou verificar o nível
        de autorização</font></li>
    </ul>
  </li>
  <li><font color="#0080FF">Transações</font><ul>
      <li><font color="#000000">Não precisa colocar código de demarcação de transações nos
        Beans para que possam participar de transações distribuídas</font></li>
      <li><font color="#000000">O Container automaticamente gerencia o início, enrollment,
        commitment e rollback de transações</font></li>
    </ul>
  </li>
  <li><font color="#0080FF">Persistência</font><ul>
      <li><font color="#000000">Beans não precisam se preocupar com sua persistência num Banco
        de Dados</font></li>
    </ul>
  </li>
  <li><font color="#000000">Outros</font><ul>
      <li><font color="#000000">Outros serviços podem ser oferecidos dependendo do fornecedor
        (Fail-over, Load-Balancing, ...)</font></li>
    </ul>
  </li>
</ul>

<ul>
  <li>A implementação dessas idéias depende de 3 coisas:<ul>
      <li>Uma arquitetura</li>
      <li>Um novo processo de desenvolvimento (para favorecer o reuso)</li>
      <li>Novos papéis para os desenvolvedores (que já vimos antes)</li>
    </ul>
  </li>
</ul>

<h2>Arquitetura</h2>

<ul>
  <li>A Arquitetura se baseia num EJB Container que roda num EJB Server e <em>intercepta </em>as
    chamadas ao Bean feitas pelos clientes<ul>
      <li>O cliente nunca acessa o Bean diretamente</li>
      <li>Vários &quot;Wire Protocols&quot; podem ser usados pelos clientes<ul>
          <li>Default: Remote Method Invocation (RMI)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>O <font color="#0080FF">EJB Container </font>implementa os Serviços Automáticos<ul>
      <li>Em termos de Design Pattern, é uma combinação de:<ul>
          <li>Proxy (controla o acesso a um Bean, ex. segurança)</li>
          <li>Decorador (adiciona funcionalidade a um Bean)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>O <font color="#0080FF">EJB Server</font><ul>
      <li>Permite que vários containers executem</li>
      <li>Implementa outros serviços (não transparentes) tais como:<ul>
          <li>Naming</li>
          <li>Segurança (Cadastro de usuários, grupos, etc.)</li>
          <li>Serviços de transação (chamados automaticamente pelo Container)</li>
          <li>etc.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p align="center"><img src="ejb1.gif" width="383" height="389" alt="ejb1.gif (6860 bytes)"></p>

<p>&nbsp;</p>

<h2>Novo processo, Novos papéis</h2>

<ul>
  <li>Isso já foi visto <a href="../intro/j2ee-2.htm">aqui</a></li>
</ul>

<p class="botref">arquitetura <a href="../j2ee-2.htm">programa</a> </p>
</body>
</html>
