<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE taglib
  PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN"
  "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">

<!-- a tag library descriptor -->

<taglib>
  <!-- after this the default space is
	"http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd"
   -->

  <!-- The version number of this tag library -->
  <tlibversion>1.0</tlibversion>

  <!-- The JSP specification version required to function -->
  <jspversion>1.1</jspversion>

  <!-- The short name of this tag library -->
  <shortname>jdbc</shortname>

  <!-- Public URI that uniquely identifies this version of the tag library -->
  <uri>http://jakarta.apache.org/taglibs/jdbc</uri>

  <!-- General information about this tag library -->
  <info>
    The JDBC custom tag library contains tags that can retrieve data from 
    and insert data into databases.
  </info>

  <!-- ******************** Defined Custom Tags *************************** -->


  <!-- connection tags -->

  <tag>
    <name>connection</name>
    <tagclass>org.apache.taglibs.jdbc.connection.ConnectionTag</tagclass>
    <teiclass>org.apache.taglibs.jdbc.connection.ConnectionTEI</teiclass>
    <bodycontent>JSP</bodycontent>
    <info>Opens a connection based on either a url in the body of the tag 
    or by using the "datasource" tag attribute to reference to a 
    javax.sql.DataSource page attribute.  driver (optional),
    userid (optional), and password (optional) are also set in the
    body of the tag.</info>
    <attribute>
      <name>id</name>
      <required>true</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>jndiName</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>dataSource</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
  </tag>
  
  <tag>
    <name>url</name>
    <tagclass>org.apache.taglibs.jdbc.connection.DatabaseURLTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>Sets the database URL of the enclosing connection tag
according to the initParameter, if specified, or from the body of
the tag.</info>
    <attribute>
      <name>initParameter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
  </tag>

  <tag>
    <name>driver</name>
    <tagclass>org.apache.taglibs.jdbc.connection.DriverTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>Sets the java.sql.Driver class name for the enclosing
connection tag according to the initParameter, if specified, or the
body of the tag.  The tag body will be trimmed.</info>
    <attribute>
      <name>initParameter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
  </tag>

  <tag>
    <name>jndiName</name>
    <tagclass>org.apache.taglibs.jdbc.connection.JndiNameTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>Sets the jndi named javax.sql.DataSource for the enclosing
connection tag according to the initParameter, if specified, or the
body of the tag.  The tag body will be trimmed.</info>
    <attribute>
      <name>initParameter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
  </tag>

  <tag>
    <name>userId</name>
    <tagclass>org.apache.taglibs.jdbc.connection.UserIdTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>JSP tag userid, sets the database user id for the
enclosing connection tag.  This tag is optional if the user name has
been encoded inside the database URL, or if the database does not
require a user name.  The user name is read from the indicated
initParameter, if the attribute is set, or from the body of the tag
if it is not.  The tag body will be trimmed.</info>
    <attribute>
      <name>initParameter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
  </tag>
  
  <tag>
    <name>password</name>
    <tagclass>org.apache.taglibs.jdbc.connection.PasswordTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>JSP tag password, sets the password for the
enclosing connection tag.  This tag is optional if the password has
been encoded inside the database URL, or if the database does not
require a password.  The password is read from the indicated
initParameter, if the parameter is set, or from the body of the tag
if it is not.  The tag body will be trimmed.</info>
    <attribute>
      <name>initParameter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
  </tag>
  
  <tag>
    <name>closeConnection</name>
    <tagclass>org.apache.taglibs.jdbc.connection.CloseConnectionTag</tagclass>
    <bodycontent>empty</bodycontent>
    <info>Close the specified connection.  The "conn" attribute is the name of a
connection object in the page context.</info>
    <attribute>
      <name>conn</name>
      <required>true</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
  </tag>


  <!-- statement only tags -->

  <tag>
    <name>statement</name>
    <tagclass>org.apache.taglibs.jdbc.statement.StatementImplTag</tagclass>
    <teiclass>org.apache.taglibs.jdbc.statement.StatementTEI</teiclass>
    <bodycontent>JSP</bodycontent>
    <info>JSP tag statement, uses the enclosed query, resultset or
execute tags to perform a database operation.</info>
    <attribute>
      <name>id</name>
      <required>true</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>conn</name>
      <required>true</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
  </tag>
  
  <tag>
    <name>escapeSql</name>
    <tagclass>org.apache.taglibs.jdbc.statement.EscapeSQLTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>Replaces each single quote in the tag body
with a pair of single quotes.  Body content will not be trimmed.</info>
  </tag>
  
  <!-- statement and prepared statement tags -->

  <tag>
    <name>query</name>
    <tagclass>org.apache.taglibs.jdbc.statement.QueryTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>Sets the SQL query for the enclosing statement or
preparedstatement tag.</info>
  </tag>
    
  <tag>
    <name>execute</name>
    <tagclass>org.apache.taglibs.jdbc.statement.ExecuteTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>Executes the query for the enclosing statement or
preparedstatement tag.</info>
    <attribute>
      <name>ignoreErrors</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
  </tag>

  <tag>
    <name>wasEmpty</name>
    <tagclass>org.apache.taglibs.jdbc.statement.WasEmptyTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>
      Executes its body if the last ResultSet tag received 0 rows
      from the database.  You must be after a ResultSet tag and inside
      a StatementTag or PreparedStatementTag, or an error will be generated.
    </info>
  </tag>
  
  <tag>
    <name>wasNotEmpty</name>
    <tagclass>org.apache.taglibs.jdbc.statement.WasNotEmptyTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>
      Executes its body if the last ResultSet tag received more than 0 rows
      from the database.  You must be after a ResultSet tag and inside
      a StatementTag or PreparedStatementTag, or an error will be generated.
    </info>
  </tag>
  
  <tag>
    <name>rowCount</name>
    <tagclass>org.apache.taglibs.jdbc.statement.RowCountTag</tagclass>
    <bodycontent>empty</bodycontent>
    <info>Prints out the number of rows retrieved from the database.
It can be used inside a ResultSet tag to provide a running
count of rows retreived, or after the ResultSet tag to
display the total number.  Using the tag before the ResultSet
or outside of a Statement or PreparedStatement will
produce an error.</info>
  </tag>
  
  <!-- prepared statement only tags -->
  <tag>
    <name>preparedStatement</name>
    <tagclass>org.apache.taglibs.jdbc.preparedstatement.PreparedStatementImplTag</tagclass>
    <teiclass>org.apache.taglibs.jdbc.preparedstatement.PreparedStatementTEI</teiclass>
    <bodycontent>JSP</bodycontent>
    <info>JSP tag preparedstatement, used the enclosed query, 
    resultset/execute, and set* tags to perform a database operation.</info>
    <attribute>
      <name>id</name>
      <required>true</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>conn</name>
      <required>true</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
  </tag>

  <tag>
    <name>setColumn</name>
    <tagclass>org.apache.taglibs.jdbc.preparedstatement.SetColumnTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>Setter for the enclosing preparedstatement tag.  Set the String 
      inside the tag body.  Body content will
      not be trimmed.</info>
    <attribute>
      <name>position</name>
      <required>true</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
  </tag>
  
  <!-- resultset tags -->
  
  <tag>
    <name>resultSet</name>
    <tagclass>org.apache.taglibs.jdbc.resultset.ResultSetTag</tagclass>
    <teiclass>org.apache.taglibs.jdbc.resultset.ResultSetTEI</teiclass>
    <bodycontent>JSP</bodycontent>
    <info>JSP tag resulset, executes the query and loops through the results
for the enclosing statement or preparedstatement tag.  The body of
this tag is executed once per row in the resultset.  The optional
"loop" attribute, which default to true, specifies whether to execute
the tag body once per row "true", or to simply assign the ResultSet
to the page attribute specified by "id".</info>
    <attribute>
      <name>id</name>
      <required>true</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>loop</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
  </tag>

  <tag> 
    <name>wasNull</name>
    <tagclass>org.apache.taglibs.jdbc.resultset.WasNullTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>Executes its body if the last getColumn tag received a null value
from the database.  You must be inside a resultset tag and there must
be a previous getColumn tag, or an error will be generated.</info>
  </tag>
  
  <tag> 
    <name>wasNotNull</name>
    <tagclass>org.apache.taglibs.jdbc.resultset.WasNotNullTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <info>Executes its body if the last getColumn tag did not receive a null value
from the database.  You must be inside a resultset tag and there must
be a previous getColumn tag, or an error will be generated.</info>
  </tag>
  
  <tag>
    <name>getColumn</name>
    <tagclass>org.apache.taglibs.jdbc.resultset.GetColumnTag</tagclass>
    <teiclass>org.apache.taglibs.jdbc.resultset.BaseGetterTEI</teiclass>
    <bodycontent>empty</bodycontent>
    <info>Gets the value, as a String, of a coulmn in the enclosing
resultset.  Either set the column number via the "position" attribute,
or set the column name with the "colName" attribute.
You can optionally set the value, as a String, to a serlvet attribute 
instead of the tag body with the "to" attribute.  The scope of the servlet
attribute is specified by the "scope" XML attribute (default = page).  Dates,
times, timestamps and numbers are output according to the JVM's defaults.</info>
    <attribute>
      <name>position</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>colName</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>to</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>scope</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
  </tag>

  <tag>
    <name>getNumber</name>
    <tagclass>org.apache.taglibs.jdbc.resultset.GetNumberTag</tagclass>
    <teiclass>org.apache.taglibs.jdbc.resultset.BaseGetterTEI</teiclass>
    <bodycontent>empty</bodycontent>
    <info>
    Similar to getColumn, but provides more precise control over
    number formatting.  
    
    The "format" attribute can be either a pattern as
    accepted by the DecimalFormat constructor or a style: "CURRENCY", 
    "PERCENT" or "NUMBER".  
    
    The "locale" attribute can have one to three 
    components as accepted by the Locale constructor: language,
    country and variant. They are separated by "_".
    
    If neither the format nor locale attribute is set, output should be
    identical to getColumn.
    </info>
    <attribute>
      <name>position</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>colName</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>to</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>scope</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>locale</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
    <attribute>
      <name>format</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
  </tag>
  
  <tag>
    <name>getTime</name>
    <tagclass>org.apache.taglibs.jdbc.resultset.GetTimeTag</tagclass>
    <teiclass>org.apache.taglibs.jdbc.resultset.BaseGetterTEI</teiclass>
    <bodycontent>empty</bodycontent>
    <info>
    Similar to getColumn, but provides more precise control over
    java.sql.Time formatting.  
    
    The "format" attribute can be either a pattern as
    accepted by SimpleDateFormat or a style: "FULL",
    "LONG", "MEDIUM" or "SHORT".  
    
    The "locale" attribute can have one to three 
    components as accepted by the Locale constructor: language,
    country and variant. They are separated by "_".
    
    If neither the format nor locale attribute is set, output should be
    identical to getColumn.
    </info>
    <attribute>
      <name>position</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>colName</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>to</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>scope</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>locale</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
    <attribute>
      <name>format</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
  </tag>

  <tag>
    <name>getDate</name>
    <tagclass>org.apache.taglibs.jdbc.resultset.GetDateTag</tagclass>
    <teiclass>org.apache.taglibs.jdbc.resultset.BaseGetterTEI</teiclass>
    <bodycontent>empty</bodycontent>
    <info>
    Similar to getColumn, but provides more precise control over
    java.sql.Date formatting.  
    
    The "format" attribute can be either a pattern as
    accepted by SimpleDateFormat or a style: "FULL",
    "LONG", "MEDIUM" or "SHORT".  
    
    The "locale" attribute can have one to three 
    components as accepted by the Locale constructor: language,
    country and variant. They are separated by "_".
    
    If neither the format nor locale attribute is set, output should be
    identical to getColumn.
    </info>
    <attribute>
      <name>position</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>colName</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>to</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>scope</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>locale</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
    <attribute>
      <name>format</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
  </tag>

  <tag>
    <name>getTimestamp</name>
    <tagclass>org.apache.taglibs.jdbc.resultset.GetTimestampTag</tagclass>
    <teiclass>org.apache.taglibs.jdbc.resultset.BaseGetterTEI</teiclass>
    <bodycontent>empty</bodycontent>
    <info>
    Similar to getColumn, but provides more precise control over
    java.sql.Timestamp formatting.  
    
    The required "format" attribute can be either a pattern as
    accepted by SimpleDateFormat or a style: "FULL",
    "LONG", "MEDIUM" or "SHORT".  It can also can be a comma separated 
    list of two styles, one for date and one for time.
    
    The "locale" attribute can have one to three 
    components as accepted by the Locale constructor: language,
    country and variant. They are separated by "_".
    </info>
    <attribute>
      <name>position</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>colName</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>to</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>scope</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>locale</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
    <attribute>
      <name>format</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    </attribute>
  </tag>
  
</taglib>

