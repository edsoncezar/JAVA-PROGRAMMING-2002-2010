/* *******************************************************
 * File: hangman.wmls
 * Purpose: Contains the WMLScript code associated with
 *          the hangman application  example.
 *
 * Functions:
 *      matchChar() -- Compares the character in the
 *                     global variable "guess" to the
 *                     characters in the hidden word
 *                     represented by the "word" global
 *                     variable.  If the character matches,
 *                     the word display is updated to
 *                     show the location(s) of the
 *                     guessed letter in the word.
 * 
 *      guessWord() -- Takes the user's word guess
 *                     and compares it to the real word.
 *                     If he guessed  right, he wins.
 * *******************************************************
 */
 extern function matchChar() {
   var _guess =  WMLBrowser.getVar("guess");
   var _word =   WMLBrowser.getVar("word");
   var _score = Lang.parseInt(WMLBrowser.getVar("score"));
   var _resultold = WMLBrowser.getVar("result");
   var _result;

   for (var i = 0; i < String.length(_word); i++) {
     if (_guess == String.charAt(_word, i)) {
       _result = _result + _guess;
     }
     else {
       _result = _result + String.charAt(_resultold, i);
     }
   }
   _score += 1;
   WMLBrowser.setVar("result", _result);
   WMLBrowser.setVar("score", _score);
   WMLBrowser.go("#Play");
 }

 extern function guessWord(guess) {
   var _word = WMLBrowser.getVar("word");
   var _score = WMLBrowser.getVar("score");

   if (String.compare(_word, guess) == 0) {  //User wins!
      Dialogs.alert("You Won!  You guessed the word in " + _score + " tries");
      WMLBrowser.go("#Hangman");  //Return user to start of game
   }
   else {
      Dialogs.alert("Your guess " + guess + " is incorrect!");
      WMLBrowser.go("#Play");
   }
 }