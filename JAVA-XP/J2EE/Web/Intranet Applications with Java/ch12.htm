<HTML>

<HEAD>
   <TITLE>Chapter 12 -- Putting Them All Together</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">










<H1><FONT COLOR=#FF0000>Chapter 12</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Putting Them All Together</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>



<UL>
<LI><A HREF="#Introduction" >Introduction</A>
<LI><A HREF="#JavaCompilationBasics" >Java Compilation Basics</A>
<UL>
<LI><A HREF="#JavaSourceCodeFiles" >Java Source Code Files</A>
<LI><A HREF="#HaveYouGotthePackage" >Have You Got the Package?</A>
<LI><A HREF="#MakingJavaPackages" >Making Java Packages</A>
</UL>
<LI><A HREF="#IntroducingtheJavaIntranetFramework" >Introducing the Java Intranet Framework</A>
<UL>
<LI><A HREF="#PackagingtheJIFClasses" >Packaging the JIF Classes</A>
</UL>
<LI><A HREF="#ExtendingtheFramework" >Extending the Framework</A>
<UL>
<LI><A HREF="#JavaApplets" >Java Applets</A>
<LI><A HREF="#MakingJIFEasytoUse" >Making JIF Easy to Use</A>
</UL>
<LI><A HREF="#TheJifApplicationInterface" >The JifApplication Interface</A>
<LI><A HREF="#TheJifletClass" >The Jiflet Class</A>
<UL>
<LI><A HREF="#InstanceVariables" >Instance Variables</A>
<LI><A HREF="#Constructors" >Constructors</A>
<LI><A HREF="#Methods" >Methods</A>
<LI><A HREF="#WrappingUpJiflets" >Wrapping Up Jiflets</A>
</UL>
<LI><A HREF="#ProgrammingwithJiflets" >Programming with Jiflets</A>
<UL>
<LI><A HREF="#TheSmallestJiflet" >The Smallest Jiflet</A>
<LI><A HREF="#TheHelloWorldJiflet" >The HelloWorld Jiflet</A>
</UL>
<LI><A HREF="#ExtendingJifletsforRealWorldUse" >Extending Jiflets for Real-World Use</A>
<UL>
<LI><A HREF="#DBRecord" >DBRecord</A>
<LI><A HREF="#SimpleDBUI" >SimpleDBUI</A>
<LI><A HREF="#SimpleDBJiflet" >SimpleDBJiflet</A>
</UL>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
<I><B><FONT SIZE=5 COLOR=#000000>framework \fram-wurk\ n:</FONT></B><FONT SIZE=5 COLOR=#000000>
a basic structure</FONT></I>
<H2><A NAME="Introduction"><FONT SIZE=5 COLOR=#FF0000>Introduction</FONT></A>
</H2>
<P>
The previous four chapters have introduced you to some new and
exciting Java classes, all of which can be used in the development
of intranet applications. However, as individual classes, they
have no context, no greater purpose in life. You're probably wondering
how you can use all of their features in your own applications
as well. This chapter gives you the direction you need to use
the classes.
<P>
First, the concept of Java <I>packages </I>is discussed. These
allow you to bundle classes together in a manner that is easily
maintained and (re)used. The classes then have a purpose. They
are no longer individual classes; together they become a class
library.
<P>
You then explore a few new classes that draw upon the power of
the new package. These new classes, in conjunction with the foundation
classes discussed in the previous chapters, become the <I>Java
Intranet Framework</I>, or <I>JIF</I>. JIF applications implement
the model intranet application as discussed in <A HREF="ch7.htm" >Chapter 7</A>,
&quot;A Model Intranet Application.&quot; As you see, this framework
does much of the drudgery for you and allows you to concentrate
your efforts on the content of the application.
<H2><A NAME="JavaCompilationBasics"><FONT SIZE=5 COLOR=#FF0000>Java
Compilation Basics</FONT></A></H2>
<P>
Programming languages typically exist at a higher level. This
means that after you create source code, it is translated or <I>compiled</I>
into a language that the computer can understand. After all of
your source code has been translated, the final result is assembled
or <I>linked</I> into a single entity. This entity is your program.
It has been translated from the higher-level language into a language
your computer can read and execute for you. Figure 12.1 illustrates
this concept.
<P>
<A HREF="http://docs.rinet.ru/Jintra/f12-1.gif" ><B>Figure 12.1 : </B><I>The creation of a program.</I></A>
<P>
The files created in this intermediate step are typically called
<I>object modules</I>. These modules are pockets of CPU instructions
that are created from your source code. These modules are then
concatenated and massaged to produce your program.
<H3><A NAME="JavaSourceCodeFiles">Java Source Code Files</A></H3>
<P>
Creating Java programs entails writing a set of classes. You create
Java classes in source code format. These files have the <TT>.java</TT>
extension on them. Typically, each <TT>.java</TT>
file contains the source code for a single class. This class name
is also the name of the file. For example, if you have a class
called <TT>LightBulb</TT>, it is stored
in a file called <TT>LightBulb.java</TT>.
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=558><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=558>
<BLOCKQUOTE>
A <TT>.java</TT> file might contain the source code for more than one class. However, only one of the classes in the source code file can be declared <TT>public</TT>.
</BLOCKQUOTE>
<BLOCKQUOTE>
This allows you to bundle a private class with another class that uses it. A good example of this bundling is for manager classes. You can create a class that manages a collection of objects. The objects can be represented by an entire class. Because it is 
a private class, you can store it in the same source code file with your manager class.</BLOCKQUOTE>
<BLOCKQUOTE>
Look in the <TT>java.sql.DriverManager</TT> class on the CD-ROM for an example of this.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Some languages such as Visual Basic or PowerBuilder actually compile
your program into tokens or pseudocode. These instructions are
used to tell an interpreter what to do. The final result of these
languages is actually an interpreter bundled with the tokenized
code.
<P>
Java is different from typical languages but similar to languages
such as Visual Basic. Your Java source code is compiled into a
pseudocode format called <I>byte code format</I>. But instead
of creating object modules, the Java compiler creates <I>class</I>
files that hold this byte code format. These files end with a
<TT>.class</TT> extension. Using the
<TT>LightBulb</TT> class as an example,
it is compiled into a file called <TT>LightBulb.class</TT>.
<P>
Each of these class files contains the byte code for a single
Java class. These class files can then be executed by the <I>Java
Virtual Machine</I> or <I>JVM</I>. It might seem like a fancy
name for an interpreter but it truly is a machine. Think of the
JVM as a software engine. Your Java classes are the gasoline that
makes it run. But unlike typical programming languages, the final
linkage is not performed for Java programs.
<H4>What? No Linker?</H4>
<P>
That's right, Java performs <I>runtime linking</I>. This is a
function of the JVM. As your Java program runs, the JVM loads
each class as it needs it. When your class no longer exists in
your program, the JVM discards the memory copy. But how can it
find all those classes? They can be stored almost anywhere.
<P>
The JVM searches for these classes on your hard disk using a predefined
set of directories. These directories are specified using an environment
variable called <TT>CLASSPATH</TT>.
It holds the list of places to look for your classes.
<H4><TT>CLASSPATH</TT></H4>
<P>
In order for the JVM to find your classes, you must tell it where
to start looking. This is done with the <TT>CLASSPATH</TT>
environment variable. This variable contains a list of the directories
on your hard drive that contain Java <TT>.class</TT>
files. The list is separated by a colon (<TT>:</TT>)
or a semicolon (<TT>;</TT>) depending
on your computer platform.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
UNIX systems use the colon (<TT>:</TT>), and Microsoft Windows-based systems use the semicolon (<TT>;</TT>).
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Here is an example of a Microsoft Windows platform <TT>CLASSPATH</TT>:
<BLOCKQUOTE>
<TT>.;c:\jdk\lib\classes.zip;c:\JavaWork\Classes;</TT>
</BLOCKQUOTE>
<P>
This tells the JVM to look in the current directory first (<TT>.</TT>),
then search in the ZIP file <TT>c:\jdk\lib\classes.zip</TT>,
and then look in the <TT>c:\JavaWork\Classes</TT>
directory.
<P>
A similar <TT>CLASSPATH</TT> for UNIX
looks like this:
<BLOCKQUOTE>
<TT>.:/jdk/lib/classes.zip:/JavaWork/Classes</TT>
</BLOCKQUOTE>
<P>
The JVM searches in the current directory and then searches in
the <TT>/jdk/lib/classes.zip</TT>
file, and finally searches in the <TT>/JavaWork/Classes</TT>
directory.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=569><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=569>
<BLOCKQUOTE>
It is possible to specify the <TT>CLASSPATH</TT> without using an environment variable. To do this, you must use the <TT>-classpath</TT> argument when running the Java interpreter <TT>java</TT>. For example, the command
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>java -classpath </TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>.;c:\jdk\lib\classes.zip;c:\JavaWork\Classes LightBulb<BR>
</TT>sets the <TT>CLASSPATH</TT> and runs the program <TT>LightBulb</TT>
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
If you stick with this model and make 500 classes, you have to
store them in the <TT>c:\JavaWork\Classes</TT>
directory. This becomes cluttered and very disorganized. Isn't
there a better way to organize the classes? Glad you asked, because
there is.
<P>
You can organize your code into <I>packages</I>.
<H3><A NAME="HaveYouGotthePackage">Have You Got the Package?</A>
</H3>
<P>
In typical programming environments, object modules can be stored
in what are known as <I>code libraries</I>. These libraries can
consist of any object module you really care to place into them.
Libraries are excellent places to store reusable code, because
many linkers can read code out of code libraries in addition to
reading the object modules themselves.
<P>
But because Java doesn't really have any object module per se,
it must use a different method for archiving classes. Enter the
Java package.
<P>
A package is a collection of Java classes. These classes usually
have nothing in common but their purpose because Java packages
are used to bundle functionality. You really shouldn't place utility
classes in a graphics package.
<P>
Java itself comes bundled in six major packages. These are shown
in Table 12.1.<BR>
<P>
<CENTER><B>Table 12.1. The Java packages</B>.</CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=144><I>Package</I></TD><TD WIDTH=252><I>Description</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=144><TT>java.applet</TT>
</TD><TD WIDTH=252>Applet classes</TD></TR>
<TR VALIGN=TOP><TD WIDTH=144><TT>java.awt</TT>
</TD><TD WIDTH=252>Advanced Windowing Toolkit classes</TD></TR>
<TR VALIGN=TOP><TD WIDTH=144><TT>java.io</TT>
</TD><TD WIDTH=252>Input and Output classes</TD></TR>
<TR VALIGN=TOP><TD WIDTH=144><TT>java.lang</TT>
</TD><TD WIDTH=252>The Java language classes</TD></TR>
<TR VALIGN=TOP><TD WIDTH=144><TT>java.net</TT>
</TD><TD WIDTH=252>Networking classes</TD></TR>
<TR VALIGN=TOP><TD WIDTH=144><TT>java.util</TT>
</TD><TD WIDTH=252>Utility classes</TD></TR>
</TABLE></CENTER>
<P>
<P>
The name of the package is very important. As you can see in Table
12.1, all of the Java packages start with <TT>java</TT>
followed by a period and then the rest of the package name. Not
only does this clarify the name of the package, but it defines
the placement of these classes within the <TT>CLASSPATH</TT>.
<H4>A Sample Package</H4>
<P>
For example, suppose you create a set of packages for producing
music. The set consists of three packages: a utilities package,
a user interface package, and a sound package. These are named
<TT>music.util</TT>, <TT>music.ui</TT>,
and <TT>music.sound</TT>, respectively.
<P>
When the JVM looks for these classes, it replaces the period with
a slash and appends the result to each directory in the <TT>CLASSPATH</TT>
variable. It then tries to load this file. The name of the package
additionally defines where it is stored in the <TT>CLASSPATH</TT>.
<P>
In this example, the music classes are under the <TT>c:\JavaWork\Classes</TT>
directory. Then they are stored as follows:
<P>
<TT>music.util</TT><FONT SIZE=2> is
stored in </FONT><TT>c:\JavaWork\Classes\music\util
<BR>
music.ui</TT><FONT SIZE=2> is stored in </FONT><TT>c:\JavaWork\Classes\music\ui
<BR>
</FONT><FONT COLOR=#000000 FACE="Courier">music.sound</TT></FONT><FONT SIZE=2 COLOR=#000000>
is stored in </FONT><TT><FONT COLOR=#000000 FACE="Courier">c:\JavaWork\Classes\music\sound</TT></FONT>
<P>
The classes that make up each package are then stored in their
respective directories.
<H3><A NAME="MakingJavaPackages">Making Java Packages</A></H3>
<P>
Creating packages out of your source code is quite simple. The
first step is to create a directory structure that is like the
package name you use. Using the preceding example, you create
the <TT>c:\JavaWork\Classes\music</TT>
directory and then the three directories-<TT>util</TT>,
<TT>ui</TT>, and <TT>sound</TT>-underneath
it.
<P>
All of the source code that belongs in each package is then moved
to its appropriate directory. All of the utility classes move
to <TT>util</TT>, user interface classes
move to <TT>ui</TT>, and sound classes
move to <TT>sound</TT>.
<P>
The final step is to add a <TT>package</TT>
statement at the top of your source code file that tells the compiler
which package your class belongs to. This statement must be the
first non-comment or blank line in your source code.
<P>
The format for a <TT>package</TT>
statement is as follows:
<BLOCKQUOTE>
<TT>package <I>package_name</I></TT>
</BLOCKQUOTE>
<P>
<TT><I>package_name</FONT></I></TT> is the
fully qualified name of the package. For example, classes in the
<TT>music.ui</TT> class have the following
<TT>package</TT> statement:
<BLOCKQUOTE>
<TT>package music_ui</TT>
</BLOCKQUOTE>
<P>
Placing your class into a package has a very important implication.
Your class now has access to all <TT>public</TT>
and non-<TT>public</TT> classes in
its package. Your class also has access to all non-<TT>private</TT>
methods and instance variables of each other class in the package.
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=529><B>Caution</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=529>
<BLOCKQUOTE>
When you define an instance variable and do not assign it an access modifier (for example, <TT>private</TT>, <TT>protected</TT>, <TT>public</TT>), it defaults to <TT>package</TT>. This is essentially <TT>private</TT> but all classes within the same package 
can see it.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
A similar arrangement exists in the C++ programming language.
You can optionally declare a class to be a <TT>friend</TT>
of another class. This allows it access to any non-<TT>private</TT>
methods or instance variables in the target class. Think of packages
as automatic friends.
<H2><A NAME="IntroducingtheJavaIntranetFramework"><FONT SIZE=5 COLOR=#FF0000>Introducing
the Java Intranet Framework</FONT></A></H2>
<P>
<A HREF="ch7.htm" >Chapter 7</A>, &quot;A Model Intranet Application,&quot;
defines the functionality that a typical intranet application
has. To recap, here are the features:
<UL>
<LI><FONT COLOR=#000000>Standard configuration file processing</FONT>
<LI><FONT COLOR=#000000>Standard logging to screen or disk</FONT>
<LI><FONT COLOR=#000000>Standard database connectivity</FONT>
<LI><FONT COLOR=#000000>Standard look and feel</FONT>
</UL>
<P>
In <A HREF="ch8.htm" >Chapters 8 </A>through 10, you designed
and created many classes that implement these features. For instance,
the <TT>ConfigProperties</TT> class
implements the configuration file processing. And the <TT>DiskLog</TT>
class implements your standard logging.
<P>
If you take a step back and look at what you've created, it's
really a framework for developing intranet applications with Java.
It truly is a Java intranet framework! Therefore, you name this
collection of classes the <I>Java Intranet Framework</I>. And
like any good programming toolkit or library, it has a unique
and pronounceable acronym: JIF.
<P>
But now that you've created all of these classes, you need to
organize them into a usable set of packages. This helps you to
document, use, and later extend, JIF to its fullest potential.
So how do you package the classes in JIF?
<H3><A NAME="PackagingtheJIFClasses">Packaging the JIF Classes</A>
</H3>
<P>
The best way to package JIF is in groups of functionality. As
you recall, you have four functionality groups: utilities, logging,
database, and user interface. These fit perfectly into four functionality
packages.
<P>
Naming your packages is quite simple. You use <TT>jif</TT>
as your base package name and then add on the specifics. For example,
the utilities package is called <TT>util</TT>,
as in <TT>java.util</TT>. Table 12.2
shows the package names you have chosen and the class functionality
that is contained within them.<BR>
<P>
<CENTER><B>Table 12.2. The Java Intranet Framework packages.</B></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=132><I>Package</I></TD><TD WIDTH=458><I>Description</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=132><TT>jif.awt</TT>
</TD><TD WIDTH=458>Standard user interface classes and <TT>java.awt</TT> extensions
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=132><TT>jif.log</TT>
</TD><TD WIDTH=458>Standard logging classes</TD></TR>
<TR VALIGN=TOP><TD WIDTH=132><TT>jif.sql</TT>
</TD><TD WIDTH=458>Standard database connectivity classes and <TT>java.sql</TT> extensions
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=132><TT>jif.util</TT>
</TD><TD WIDTH=458>Standard utility classes and <TT>java.util</TT> extensions
</TD></TR>
</TABLE></CENTER>
<P>
<P>
The <TT>jif.sql</TT> package name
does not really contain SQL functionality. However, the name is
chosen to be consistent with the JDBC class hierarchy that lives
in the <TT>java.sql</TT> package.
<P>
To package your classes, you must go back and edit each Java source
code file. In each file you add a line of code that defines the
package to which the class belongs. These statements are <TT>package</TT>
statements, as discussed earlier in this chapter.
<P>
In addition to adding the <TT>package</TT>
statements to our source code, you must also move all of the classes
into a directory hierarchy that represents your package hierarchy.
This hierarchy is illustrated in Figure 12.2.
<P>
<A HREF="http://docs.rinet.ru/Jintra/f12-2.gif" ><B>Figure 12.2 : </B><I>The JIF class/directory hierarchy.</I></A>
<P>
Remember that the base of this hierarchy can live anywhere. It
can be a root directory or a subdirectory. However, the directory
that contains it must be in your <TT>CLASSPATH</TT>
variable in order for the JVM to find the JIF classes.
<H2><A NAME="ExtendingtheFramework"><FONT SIZE=5 COLOR=#FF0000>Extending
the Framework</FONT></A></H2>
<P>
Now that you've sorted your classes into usable packages, you
can start building intranet applications. However, the classes
really give you no direction or structure.
<P>
An excellent implementation of application direction and structure
is Java's own <TT>Applet</TT> class.
This class is a self-contained mini-application that runs in a
special applet-viewer program or from an HTML World Wide Web page.
<H3><A NAME="JavaApplets">Java Applets</A></H3>
<P>
Creating applets is an easy task. Granted, the more complex your
program is, the more <BR>
complex your applet is. However, applets can be quite simple because
they have an entire <BR>
framework beneath them to support their simplicity. The smallest
applet possible is shown in Listing 12.1. The HTML file that launches
the small applet is shown in Listing 12.2, and the output of the
applet is shown in Figure 12.3.
<P>
<A HREF="http://docs.rinet.ru/Jintra/f12-3.gif" ><B>Figure 12.3 : </B><I>The smallest applet</I></A><I>.</I>
<HR>
<BLOCKQUOTE>
<B>Listing 12.1. The smallest applet.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
Imports&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Java Imports...<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java.applet.Applet;
<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java.awt.Label;
<BR>
<BR>
//****************************************************************************
<BR>
//* 
SmallApplet&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
public class<BR>
SmallApplet<BR>
extends Applet<BR>
{<BR>
<BR>
//****************************************************************************
<BR>
//* 
init&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;init()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add( new Label(
&quot;I'm a small applet&quot; ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
run&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;run()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<P>
As you can see, the <TT>init()</TT>
method is used to implement the user interface for your applet.
After the <TT>init()</TT> method is
called by the applet framework, the applet framework then calls
the <TT>run()</TT> method. In the
preceding example, the <TT>run()</TT>
method does nothing more than show the applet on the screen.
<HR>
<BLOCKQUOTE>
<B>Listing 12.2. The smallest applet's HTML page.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>&lt;HTML&gt;<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt; A small applet &lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
&lt;BODY&gt;<BR>
<BR>
&lt;APPLET CODE=&quot;SmallApplet.class&quot; WIDTH=200 HEIGHT=60&gt;&lt;/APPLET&gt;
<BR>
<BR>
&lt;/BODY&gt;<BR>
<BR>
&lt;/HTML&gt;</TT>
</BLOCKQUOTE>
<HR>
<P>
The applet framework provides several other useful facilities.
One feature is the <TT>getParameter()</TT>
method. This retrieves a parameter from the HTML file that launches
the applet.
<P>
For example, consider the HTML file shown in Listing 12.2. It
contains two parameters, <TT>WIDTH</TT>
and <TT>HEIGHT</TT>. Through the use
of the <TT>getParameter()</TT> method,
you can retrieve the value specified after the equal sign (<TT>=</TT>),
like this:
<BLOCKQUOTE>
<TT>int myWidth = Integer.parseInt( getParameter(
&quot;WIDTH&quot; ) );</TT>
</BLOCKQUOTE>
<P>
This holds true for any property pair that appears in the HTML
file. This is a convenient way to pass parameters to applets with
an equally easy method of retrieving them.
<P>
What if you make JIF as easy to use as an applet? What if you
create intranet applications that implement the model application
features as easily as creating applets? Let's explore that possibility.
<H3><A NAME="MakingJIFEasytoUse">Making JIF Easy to Use</A></H3>
<P>
The first and most important thing you need to do is choose a
name for your new bundle of joy. Let's call it a <I>jiflet</I>.
Because you basically take many of the applet ideas from Java
and place them into your own new class, it seems rather appropriate.
Now that you have that out of the way, you define what your jiflet
does.
<P>
The jiflet is a Java application that provides the features of
your model intranet application in an easy-to-use wrapper. These
features include your model features outlined earlier, plus many
of the features in a standard Java applet.
<P>
One such feature is an <TT>init()</TT>
method that is called automatically by the framework. This is
a centralized location to place all of the initialization code.
<P>
Another feature is getting configuration parameters. You are able
to retrieve parameters from the configuration file with a method
such as the <TT>java.Applet.getParameter()</TT>
method.
<P>
In fact, the following methods are available in both applets and
jiflets:
<UL>
<LI><TT>public void init()</TT>
<LI><TT>public boolean isActive()</TT>
<LI><TT>public void destroy()</TT>
<LI><TT>public String getParameter( String
name )</TT>
<LI><TT>public void resize(Dimension d)</TT>
<LI><TT>public void resize(int width, int
height)</TT>
<LI><TT>public void showStatus(String msg)</TT>
</UL>
<P>
The only features really missing from jiflets that appear in applets
are the multimedia <BR>
methods. These methods provide a clean way for applets to load
images and sound files off of a network. Because jiflets represent
intranet applications, these features are not usually necessary.
<P>
With the design goals laid out, let's look into implementation
of the classes.
<H2><A NAME="TheJifApplicationInterface"><FONT SIZE=5 COLOR=#FF0000>The
</FONT><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">JifApplication</TT></FONT><FONT SIZE=5 COLOR=#FF0000>
Interface</FONT></A></H2>
<P>
To implement the jiflet, you employ the use of an interface. This
interface defines the pattern or template to which all jiflets
must adhere. There is a single method defined in <TT>JifApplication</TT>.
In fact, Listing 12.3 shows the source code for <TT>JifApplication</TT>.
<HR>
<BLOCKQUOTE>
<B>Listing 12.3. The </B><TT><B>JifApplication</FONT></B></TT><B>
interface.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
JifApplication&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
public interface<BR>
JifApplication<BR>
{<BR>
<BR>
//****************************************************************************
<BR>
//* 
init&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;init();<BR>
<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<P>
This interface requires all jiflets to have an <TT>init()</TT>
method. The rest of the methods that you've designed into the
class exist in the <TT>Jiflet</TT>
class. However, the <TT>init()</TT>
method must be created by the user of the class. Using this interface
allows you to declare your <TT>Jiflet</TT>
class <TT>abstract</TT>. This means
that you cannot instantiate the <TT>Jiflet</TT>
class alone. You must always derive a class from it.
<H2><A NAME="TheJifletClass"><FONT SIZE=5 COLOR=#FF0000>The </FONT><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">Jiflet</TT></FONT><FONT SIZE=5 COLOR=#FF0000>
Class</FONT></A></H2>
<P>
The <TT>Jiflet</TT> class is the intranet
application version of Java's own <TT>Applet</TT>.
It provides you with a framework to develop intranet applications
quickly and easily. It brings together all of the usefulness of
the other JIF packages into a single, easy-to-use, component.
<P>
The <TT>Jiflet</TT> class implements
the <TT>JifApplication</TT> interface
as well as the <TT>Log</TT> interface
(described in <A HREF="ch9.htm" >Chapter 9</A>, &quot;Logging
Classes&quot;). This allows it to have an <TT>init()</TT>
method and adhere to the standard log interface.
<P>
Let's take a look at the <TT>Jiflet</TT>
class in detail. You start with the instance variables. You then
move to the constructors and then on to each of the methods. After
finishing this chapter, you should have a good understanding of
the <TT>Jiflet</TT> class and how
to use it.
<H3><A NAME="InstanceVariables">Instance Variables</A></H3>
<P>
The <TT>Jiflet</TT> class contains
the following instance variables:
<BLOCKQUOTE>
<TT>protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;activeFlag
= false;<BR>
protected DiskLog&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;appLogFile;
<BR>
protected String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;appName;
<BR>
protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;appVerbosity
= false;<BR>
protected ConfigProperties&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;configProperties;
<BR>
protected ScreenLog&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;defaultLog;
<BR>
private DBConnector&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myConnector
= null;<BR>
protected StatusBar&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myStatusBar
= null;<BR>
private int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldCursor
= -1;</TT>
</BLOCKQUOTE>
<P>
The following sections look at each one and how it is used.
<H4><TT>activeFlag</TT></H4>
<BLOCKQUOTE>
<TT>protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;activeFlag
= false;</TT>
</BLOCKQUOTE>
<P>
The <TT>activeFlag</TT> is used to
denote the activity of a jiflet. Its state can be queried by way
of the <TT>Jiflet.isActive()</TT>
method. It is set to true right before the <TT>run()</TT>
method is called and set to false after the <TT>destroy()</TT>
method is called.
<H4><TT>appLogFile</TT></H4>
<BLOCKQUOTE>
<TT>protected DiskLog&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;appLogFile;</TT>
</BLOCKQUOTE>
<P>
The <TT>appLogFile</TT> is the log
file object for the jiflet. During construction, this object is
created like so:
<BLOCKQUOTE>
<TT>appLogFile = new DiskLog( logPath, DiskLog.createLogFileName(),
appName );</TT>
</BLOCKQUOTE>
<P>
<TT>logPath</TT> is a configurable
location in which to place all log files. The <TT>DiskLog.createLogFileName()</TT>
method creates a standard log file name. Finally, <TT>appName</TT>
is used on the standard log entry to identify the application
that generates it.
<H4><TT>appName</TT></H4>
<BLOCKQUOTE>
<TT>protected String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;appName;</TT>
</BLOCKQUOTE>
<P>
This string holds the name of the application that is running.
This is usually passed in at construction.
<H4><TT>appVerbosity</TT></H4>
<BLOCKQUOTE>
<TT>protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;appVerbosity
= false;</TT>
</BLOCKQUOTE>
<P>
If you choose, your jiflet can be configured to report more information
about certain things. This <I>verbosity</I> level is turned on
or off with this Boolean instance variable. It defaults to <TT>false</TT>
and can be set with the <TT>Jiflet.setVerboseMode()</TT>
method.
<H4><TT>configProperties</TT></H4>
<BLOCKQUOTE>
<TT>protected ConfigProperties&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;configProperties;</TT>
</BLOCKQUOTE>
<P>
This object holds the combined program arguments and the configuration
parameters <BR>
read from the application's configuration file. Access to this
variable is through the <TT>Jiflet.getParameter()</TT>
methods.
<H4><TT>defaultLog</TT></H4>
<BLOCKQUOTE>
<TT>protected ScreenLog&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;defaultLog;</TT>
</BLOCKQUOTE>
<P>
This variable is a default log in case the real application log
cannot be created. This log writes its entries to the standard
out of the operating system.
<H4><TT>myConnector</TT></H4>
<BLOCKQUOTE>
<TT>private DBConnector&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myConnector
= null;</TT>
</BLOCKQUOTE>
<P>
This variable holds the <TT>DBConnector</TT>
object that is associated with this jiflet. You can set and get
this variable with the <TT>Jiflet.setConnector()</TT>
and <TT>Jiflet.getConnector()</TT>
methods.
<H4><TT>myStatusBar</TT></H4>
<BLOCKQUOTE>
<TT>protected StatusBar&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myStatusBar
= null;</TT>
</BLOCKQUOTE>
<P>
This variable holds the instance of the <TT>StatusBar</TT>
object that is created for the jiflet. The status can be set or
cleared with the <TT>Jiflet.showStatus()</TT>
and <TT>Jiflet.clearStatus()</TT>
methods.
<H4><TT>oldCursor</TT></H4>
<BLOCKQUOTE>
<TT>private int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldCursor
= -1;</TT>
</BLOCKQUOTE>
<P>
This private variable is used to store the value of the cursor
while a &quot;wait&quot; cursor is displayed. This variable is
used by the <TT>Jiflet.startWait()</TT>
and <TT>Jiflet.endWait()</TT> methods.
<H3><A NAME="Constructors">Constructors</A></H3>
<P>
There are four ways to construct a jiflet. These are defined by
four separate constructors. A constructor is the function that
is called when an instance of your object is being created. Each
of them are useful for different purposes. For the most part,
most of your jiflets use the fourth incarnation. Let's take a
look at each constructor.
<P>
Three of the constructors call the fourth constructor. This master
constructor is where all the jiflet initialization takes place.
The following is the complete source code for this constructor:
<BLOCKQUOTE>
<TT>/**<BR>
&nbsp;* Creates a Jiflet with a title, a name, arguments, and
optionally<BR>
&nbsp;* verbose.<BR>
&nbsp;*<BR>
&nbsp;* @param title The window title<BR>
&nbsp;* @param name The name of the application<BR>
&nbsp;* @param args The arguments passed in to the program<BR>
&nbsp;* @param verbosity On/Off setting indicating verbosity of
log entries<BR>
&nbsp;* @see #setVerboseMode<BR>
&nbsp;*/<BR>
public<BR>
Jiflet( String title, String name, String args[], boolean verbosity
)<BR>
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Call the superclass...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;super( title );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Copy title to
name...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if ( name.equals( &quot;&quot; ) )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name = title;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Set the color...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setBackground( Color.lightGray );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Center and show
our window!<BR>
&nbsp;&nbsp;&nbsp;&nbsp;center();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Add a status
bar...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;enableStatusBar();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Save my application
name...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;appName = name;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Create a default
log....<BR>
&nbsp;&nbsp;&nbsp;&nbsp;defaultLog = new ScreenLog( appName );
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Parse any passed
in arguments...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Parse the configuration
file if available...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;configProperties = new ConfigProperties(
args, appName + &quot;.cfg&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Reset the title...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setTitle( getParameter( &quot;Title&quot;,
title ) );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Construct a
log file name...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String logPath = getParameter( &quot;LogPath&quot;,
&quot;&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Open the log
file...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;try<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( logPath.equals(
&quot;&quot; ) )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;appLogFile
= new DiskLog( appName );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;appLogFile
= new DiskLog( logPath,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DiskLog.createLogFileName(),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;appName
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;catch ( IOException e )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Write
errors to the screen...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errorLog( &quot;Error
opening log file for [&quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;appName
+ &quot;] (&quot; + e.toString() + &quot;)&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;appLogFile = null;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Turn on verbose
mode...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setVerboseMode( verbosity );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Denote construction...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;log( &quot;Application [&quot; + appName
+ &quot;] started at &quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( new Date() ).toString()
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Call my init!
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;init();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;We are now active!
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;activeFlag = true;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Call my run...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;run();<BR>
}</TT>
</BLOCKQUOTE>
<P>
Because the <TT>Jiflet</TT> class
descends from Java's <TT>Frame</TT>
class, you need to call the superclass's constructor with a title,
which is what you do first.
<P>
The following are done next:
<UL>
<LI><FONT COLOR=#000000>The background color is set to light gray.</FONT>
<LI><FONT COLOR=#000000>The jiflet is centered on the screen.</FONT>
<LI><FONT COLOR=#000000>The status bar is created and enabled.</FONT>
<LI><FONT COLOR=#000000>The default log is opened.</FONT>
<LI><FONT COLOR=#000000>The configuration file is read into memory
and combined with the program arguments.</FONT>
<LI><FONT COLOR=#000000>The </FONT><TT>LogPath</TT>
configuration option is retrieved from the configuration.
<LI><FONT COLOR=#000000>The actual disk log file is created.</FONT>
<LI><FONT COLOR=#000000>Verbose mode is turned on or off depending
on the value passed in.</FONT>
<LI><FONT COLOR=#000000>A message is written to the log stating
that the jiflet has started.</FONT>
<LI><FONT COLOR=#000000>The user's implemented </FONT><TT>init()</TT>
method is called.
<LI><FONT COLOR=#000000>The </FONT><TT>run()</TT>
method is called. By default, the <TT>show()</TT>
method of the <TT>Frame</TT> is called
to display the jiflet on the screen.
</UL>
<P>
The following are the other three constructors available for creating
<TT>Jiflet</TT> objects:
<BLOCKQUOTE>
<TT>public<BR>
Jiflet()<BR>
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;this( &quot;Generic Jiflet&quot;, &quot;Jiflet&quot;,
null, false );<BR>
}<BR>
<BR>
public<BR>
Jiflet( String title )<BR>
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;this( title, &quot;&quot;, null, false
);<BR>
}<BR>
<BR>
public<BR>
Jiflet( String title, String name, String args[] )<BR>
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;this( title, name, args, false );<BR>
}</TT>
</BLOCKQUOTE>
<P>
As you see, they all call the main constructor, setting some values
to <TT>null</TT> or blanks.
<H3><A NAME="Methods">Methods</A></H3>
<P>
There are many methods available in the <TT>Jiflet</TT>
class. The following sections document their arguments and the
purposes they serve.
<H4><TT>setVerboseMode</TT></H4>
<BLOCKQUOTE>
<TT>public void<BR>
setVerboseMode( boolean whichWay )</TT>
</BLOCKQUOTE>
<P>
This method turns on or off verbose mode. If verbose mode is turned
on, all log entries created with the <TT>Jiflet.verboseLog()</TT>
method are actually passed to the log object. If verbose mode
is turned off, all log entries created this way are ignored.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=590><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=590>
<BLOCKQUOTE>
This, in conjunction with <TT>Jiflet.verboseLog()</TT>, offers an excellent debugging tool. Simply enable verbose mode when you need more detail, and in your code provide that detail with the <TT>Jiflet.verboseLog()</TT> method.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H4><TT>verboseLog</TT></H4>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
verboseLog&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;verboseLog( char logLevel, String logEntry
)<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;verboseLog( String logEntry )</TT>
</BLOCKQUOTE>
<P>
This method creates a log entry that is written to the log file
only if the verbose mode flag is set to true.
<P>
The second constructor defaults to a log level of <TT>I</TT>
for informational.
<H4><TT>errorLog</TT></H4>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
errorLog&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;errorLog( String logEntry )</TT>
</BLOCKQUOTE>
<P>
This method allows you to create error log entries without specifying
the <TT>Log.ERROR</TT> logging level
each time. It is simply a convenience method.
<H4><TT>log</TT></H4>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
log&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;log( char logLevel, String logEntry )
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;log( String logEntry )</TT>
</BLOCKQUOTE>
<P>
This method creates a log entry that is written to the log file.
If there is an error or the log file is not open, the output goes
to the screen.
<P>
The second constructor defaults to a log level of <TT>I</TT>
for informational.
<H4><TT>handleEvent</TT></H4>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
handleEvent&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;handleEvent( Event anEvent )</TT>
</BLOCKQUOTE>
<P>
This overrides the default <TT>Frame.handleEvent()</TT>
method. It listens for destruction events so that the jiflet can
close itself down cleanly.
<H4><TT>action</TT></H4>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
action&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;action( Event event, Object arg )</TT>
</BLOCKQUOTE>
<P>
This method receives <TT>ACTION_EVENT</TT>
events from the event system. It listens for menu events and passes
them to <TT>Jiflet.handleMenuEvent()</TT>.
<H4><TT>handleMenuEvent</TT></H4>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
handleMenuEvent&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;handleMenuEvent( Event event, Object arg
)</TT>
</BLOCKQUOTE>
<P>
This is a placeholder for menu events. This does nothing in the
<TT>Jiflet</TT> class. It must be
overridden by derived classes to include any functionality.
<H4><TT>shutDown</TT></H4>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
shutDown&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;shutDown( int level )</TT>
</BLOCKQUOTE>
<P>
This method is the central point of exit for the jiflet. With
the exception of a program crash, the jiflet always exits through
this method. It is responsible for writing a log entry for the
application ending, and it calls the <TT>Jiflet.destroy()</TT>
method. The <TT>level</TT> argument
is passed to the operating system as a return value for the calling
program.
<H4><TT>suicide</TT></H4>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
suicide&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;suicide( Exception e, String logLine,
int level )<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;suicide( String logLine )<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;suicide( String logLine, int level )<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;suicide( Exception e )<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;suicide( Exception e, String logLine )</TT>
</BLOCKQUOTE>
<P>
This method allows a jiflet to gracefully kill itself. Depending
on the circumstances, you may or might not want a log entry written,
and you may or may not have an <TT>Exception</TT>
that caused your death.
<H4><TT>center</TT></H4>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
center&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;center()</TT>
</BLOCKQUOTE>
<P>
This method centers the jiflet window on the screen.
<H4><TT>enableStatusBar</TT></H4>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
enableStatusBar&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;enableStatusBar( String text )<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;enableStatusBar()</TT>
</BLOCKQUOTE>
<P>
This method creates a status bar with or without text and adds
it to the jiflet's layout.
<H4><TT>clearStatus</TT></H4>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
clearStatus&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;clearStatus()</TT>
</BLOCKQUOTE>
<P>
This method clears the text in the status bar.
<H4><TT>showStatus</TT></H4>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
showStatus&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;showStatus( String text )</TT>
</BLOCKQUOTE>
<P>
This method sets the text in the status bar.
<H4><TT>setConnector</TT></H4>
<BLOCKQUOTE>
<TT>//***************************************************************************
<BR>
//* 
setConnector&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
*<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setConnector( DBConnector aConnector )</TT>
</BLOCKQUOTE>
<P>
This method sets the <TT>DBConnector</TT>
object that is associated with this jiflet.
<H4><TT>getConnector</TT></H4>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
getConnector&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public DBConnector<BR>
&nbsp;&nbsp;&nbsp;&nbsp;getConnector()</TT>
</BLOCKQUOTE>
<P>
This method returns the previously associated <TT>DBConnector</TT>
object to the caller.
<H4><TT>startWait</TT></H4>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
startWait&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;startWait()</TT>
</BLOCKQUOTE>
<P>
This is a luxury method. It changes the cursor to the system default
&quot;wait&quot; cursor, which is usually an hourglass to indicate
that a lengthy process is occurring.
<H4><TT>endWait</TT></H4>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
endWait&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;endWait()</TT>
</BLOCKQUOTE>
<P>
This method returns the cursor to its previous state if called
after a <TT>Jiflet.startWait()</TT>
call. Otherwise, this method does nothing.
<H4><TT>getParameter</TT></H4>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
getParameter&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String<BR>
&nbsp;&nbsp;&nbsp;&nbsp;getParameter( String key )<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String<BR>
&nbsp;&nbsp;&nbsp;&nbsp;getParameter( String key, String defaultValue
)</TT>
</BLOCKQUOTE>
<P>
This method is identical to Java's <TT>Applet.getParameter()</TT>
method. It returns the value associated with the key passed. You
can also pass in a default value in case the key is not found.
These parameters are looked for in the <TT>configProperties</TT>
instance variable.
<H4><TT>canClose</TT></H4>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
canClose&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;canClose()</TT>
</BLOCKQUOTE>
<P>
This method is called before the jiflet is allowed to close. It
allows you to have a place to catch an unwanted departure. The
default implementation returns true. Override this method to add
your own functionality. An example of its use is to catch users
before exiting if they haven't saved their work.
<P>
Within your overridden copy, you can ask users whether they want
to save their work. If they say no, return <TT>true</TT>,
closing the jiflet. If they say yes, save their work and then
return <TT>true</TT>, closing the
jiflet. You can also offer them a cancel option, which returns
<TT>false</TT>.
<H4><TT>isActive</TT></H4>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
isActive&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;isActive()</TT>
</BLOCKQUOTE>
<P>
This method returns <TT>true</TT>
or <TT>false</TT> if the jiflet is
currently active. This is similar to the <TT>Applet.isActive()</TT>
method. A jiflet is considered active right before its <TT>run()</TT>
method is called.
<H3><A NAME="WrappingUpJiflets">Wrapping Up Jiflets</A></H3>
<P>
Because you have these two new classes, you need to place them
somewhere. Again you borrow from the example set by Sun and place
them in a package called <TT>jif.jiflet</TT>.
This package contains the <TT>JifApplication</TT>
and <TT>Jiflet</TT> classes.
<H2><A NAME="ProgrammingwithJiflets"><FONT SIZE=5 COLOR=#FF0000>Programming
with Jiflets</FONT></A></H2>
<P>
Now that you've created a class that implements the design goals,
let's take it for a test drive. Remember your simple small applet
earlier in this chapter? Let's see if you can make a jiflet just
as easily.
<H3><A NAME="TheSmallestJiflet">The Smallest Jiflet</A></H3>
<P>
The smallest possible jiflet is similar to the smallest possible
applet. It simply prints a string on the screen and does nothing
else. Let's look at the source code for your smallest jiflet:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
Imports&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jif.jiflet.Jiflet;
<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java.awt.Label;
<BR>
<BR>
//****************************************************************************
<BR>
//* 
SmallJiflet&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
public class<BR>
SmallJiflet<BR>
extends Jiflet<BR>
{<BR>
<BR>
//****************************************************************************
<BR>
//* 
main&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;main( String[] args )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new SmallJiflet();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
init&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;init()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add( &quot;Center&quot;,
new Label( &quot;I'm a small jiflet&quot; ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
run&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;run()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
}</TT>
</BLOCKQUOTE>
<P>
It is very similar to the small applet in Listing 12.1. The only
additions are a <TT>main()</TT> method
and a call to the jiflet's <TT>pack()</TT>
method.
<P>
The <TT>main()</TT> method is called
by the Java interpreter to run your program. It is required to
create the class that is your program. Here you create an instance
of <TT>SmallJiflet</TT>.
<P>
The <TT>pack()</TT> method readjusts
the size of the jiflet to accommodate all the user interface objects
that are contained within it. This is necessary because, unlike
an applet, you have no predefined width or height.
<P>
The output of your small jiflet is shown in Figure 12.4.
<P>
<A HREF="http://docs.rinet.ru/Jintra/f12-4.gif" ><B>Figure 12.4 : </B><I>The output of </I>SmallJiflet.</A>
<H3><A NAME="TheHelloWorldJiflet">The <TT><FONT SIZE=4 FACE="Courier">HelloWorld</TT></FONT><FONT SIZE=4>
Jiflet</FONT></A></H3>
<P>
Do you think that you aren't going to get a <TT>Hello
World</TT> jiflet? Think again. It is one of the simplest
of all jiflets. All programming languages start with a program
that prints <TT>Hello World!</TT>,
so why is Java any different?
<P>
The source code in Listing 12.4 is the complete source code for
the <TT>HelloWorld</TT> application
that is on the CD-ROM. This is the smallest jiflet possible.
<P>
This jiflet is a bit more complex than the previous smallest jiflet.
In <TT>HelloWorld</TT> you add a menu
and an About box. You also take advantage of the <TT>handleMenuEvent()</TT>
functionality in your base class.
<HR>
<BLOCKQUOTE>
<B>Listing 12.4. The </B><TT><B>HelloWorld</FONT></B></TT><B>
application.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
Imports&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;JIF Imports<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jif.jiflet.*;<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jif.awt.*;
<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Java Imports...<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java.awt.*;
<BR>
<BR>
//****************************************************************************
<BR>
//* 
HelloWorld&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
public class<BR>
HelloWorld<BR>
extends Jiflet<BR>
{<BR>
<BR>
//****************************************************************************
<BR>
//* 
Members&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;A message for
the about box...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;copyright
= &quot;HelloWorld v1.00\n&quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Copyright
(c) 1996 by Jerry Ablan\n&quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;All Rights
Reserved&quot;;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Menu stuff...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Menu&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
helpMenu;<BR>
<BR>
//****************************************************************************
<BR>
//* 
main&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;main( String args[] )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new HelloWorld(
args );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
Constructor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public<BR>
&nbsp;&nbsp;&nbsp;&nbsp;HelloWorld( String args[] )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super( &quot;Hello
World!&quot;, &quot;HelloWorld&quot;, args );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
init&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;init()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Initialize
my menus...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; initializeMenus();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Initialize
my UI...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initializeUI();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
initializeMenus&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;initializeMenus()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MenuBar mb = new MenuBar();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; helpMenu = new Menu( &quot;&amp;Help&quot;
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; helpMenu.add( new MenuItem(
&quot;&amp;About...&quot; ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mb.add( helpMenu );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb.setHelpMenu(
helpMenu );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setMenuBar( mb
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
initializeUI&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;initializeUI()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JifPanel ap =
new JifPanel( Effects.RAISED, &quot;Hello World!&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ap.setFont( new
Font( &quot;Helvetica&quot;, Font.BOLD, 18 ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add( &quot;Center&quot;,
ap );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
handleMenuEvent&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;handleMenuEvent( Event event, Object arg
)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String label =
( String ) arg;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( label.equalsIgnoreCase(
&quot;&amp;About...&quot; ) )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageBox
id = new MessageBox( this, &quot;About...&quot;, copyright );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id.center(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Didn't
handle it!<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( false
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<P>
Figure 12.5 shows the output of the <TT>HelloWorld</TT>
program.
<P>
<A HREF="http://docs.rinet.ru/Jintra/f12-5.gif" ><B>Figure 12.5 : </B><I>Someone says hi!</I></A>
<P>
The program is simple. First of all, it extends the <TT>Jiflet</TT>
class. This gives you access to the functionality of the base
class. Second, it provides an <TT>init()</TT>
method. This method is called when the jiflet is initialized and
ready for the user portion to be initialized. After that, all
that is left is to respond to events that come up.
<H2><A NAME="ExtendingJifletsforRealWorldUse"><FONT SIZE=5 COLOR=#FF0000>Extending
Jiflets for Real-World Use</FONT></A></H2>
<P>
Now that you have a basic understanding of the Java Intranet Framework
or JIF, the rest of this chapter extends the jiflet concept into
a form that can easily be used for building database-aware intranet
applications.
<P>
A jiflet, as you know, is the smallest application that can be
built with JIF. However, it does absolutely nothing but look pretty.
After building several applications with JIF, it becomes apparent
that they all share much of the same code. Each application goes
through the following life cycle:
<OL>
<LI>Construct the jiflet.
<LI>Construct the user interface.
<LI>Handle events until program ends.
</OL>
<P>
Pretty boring, but such is life when you are only binary information.
The pattern that becomes evident to you is that each application
has a monotonous bunch of initialization code and a user interface
that needs to be copied from application to application. But this
base initialization is not in the <TT>Jiflet</TT>
class. Jiflets need to remain pure.
<P>
The result is three new abstract classes: <TT>SimpleDBJiflet</TT>,
<TT>SimpleDBUI</TT>, and <TT>DBRecord</TT>.
<P>
The philosophy is that a <TT>SimpleDBJiflet</TT>
has a user interface that is defined by a <TT>SimpleDBUI</TT>.
They work together to present a pleasant atmosphere for the user.
Together, they allow the user to manipulate a single set of database
data. This database information is represented by the <TT>DBRecord</TT>
class.
<P>
By extending these three abstract classes and basically filling
in the blanks, you can create powerful database applications in
a matter of hours!
<H3><A NAME="DBRecord"><TT><FONT SIZE=4 FACE="Courier">DBRecord</TT></FONT></A>
</H3>
<P>
The <TT>DBRecord</TT> class is the
smallest portion of the three new classes. This class represents
a single set of database data. The data that is represented by
this class is defined in its subclasses; therefore, it is an abstract
class. The source code for this class is shown in Listing 12.5.
<HR>
<BLOCKQUOTE>
<B>Listing 12.5. The </B><TT><B>DBRecord</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
Package&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
package&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jif.sql;
<BR>
<BR>
//****************************************************************************
<BR>
//* 
Imports&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;JIF imports<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jif.sql.*;
<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jif.awt.*;
<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Java imports<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
java.sql.*;<BR>
<BR>
//****************************************************************************
<BR>
//* 
DBRecord&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
public abstract class<BR>
DBRecord<BR>
{<BR>
<BR>
//****************************************************************************
<BR>
//* 
Members&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;An indicator
for data changes...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataChange
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isNewRecord
= false;<BR>
<BR>
//****************************************************************************
<BR>
//* 
Constructor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public<BR>
&nbsp;&nbsp;&nbsp;&nbsp;DBRecord()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clear();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public<BR>
&nbsp;&nbsp;&nbsp;&nbsp;DBRecord( ResultSet rs )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parseResultSet(
rs );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
parseResultSet&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/**<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* Parses a &quot;SELECT * ...&quot; result
set into itself<BR>
&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;parseResultSet( ResultSet rs )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isNewRecord =
false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( isNewRecord
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
update&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/**<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* Requests update SQL from the JifPanel
and sends it to the database<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* via the DBConnector object passed in.
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;update( DBConnector theConnector, JifPanel
ap );<BR>
<BR>
//****************************************************************************
<BR>
//* 
deleteRow&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/**<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* Constructs delete SQL for the current
row<BR>
&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;deleteRow( DBConnector theConnector );
<BR>
<BR>
//****************************************************************************
<BR>
//* 
setDataChange&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/**<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* Sets a flag indicating that data has
changed...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setDataChange( boolean onOff )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataChange = onOff;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( dataChange
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
clear&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/**<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* Clears all the variables...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;clear()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isNewRecord =
true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setDataChange(
false );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
<BR>
//****************************************************************************
<BR>
//* 
canSave&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/**<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* Checks to see if all required fields
are filled in<BR>
&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;canSave()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Everything
is filled in!<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( true );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
didDataChange&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;didDataChange()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( dataChange
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
setNewStatus&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setNewStatus( boolean how )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isNewRecord =
how;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
getNewStatus&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;getNewStatus()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( isNewRecord
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT>DBRecord</TT> class can be
constructed with or without data. The data required to construct
this class is a JDBC <TT>ResultSet</TT>
object. This object is passed to the <TT>parseResultSet()</TT>
method. In your derived class, you must override this method to
read the data from the <TT>ResultSet</TT>
into instance variables.
<P>
To complete the class, you must provide two additional methods
in your derived class: <TT>update()</TT>
and <TT>deleteRow()</TT>. <TT>update()</TT>
is called to when someone wants you to save the information contained
within yourself. <TT>deleteRow()</TT>
is called when someone wants you to delete yourself from the database.
<P>
The class provides a <TT>clear()</TT>
method, which you override to clear out your instance variables.
This is called, for example, when the user presses the New or
Clear buttons.
<P>
The <TT>DBRecord</TT> class has two
indicators: <TT>dataChange</TT> and
<TT>isNewRecord</TT>. These <TT>boolean</TT>s
indicate that the data has changed in the record and whether the
record exists in the database.
<P>
The <TT>dataChange</TT> value must
be manually set and reset. This is done to some degree by the
<TT>SimpleDBJiflet</TT> class. For
example, when a record is saved to the database, the <TT>dataChange</TT>
value is set to <TT>false</TT>. This
setting is done by way of the <TT>setDataChange()</TT>
method.
<P>
Access methods are provided for you to get at these indicators.
<TT>getNewStatus()</TT> and <TT>setNewStatus()</TT>
allow access to the <TT>isNewRecord</TT>
indicator. <TT>setDataChange()</TT>
and <TT>didDataChange()</TT> provide
access to the <TT>dataChange</TT>
indicator.
<P>
Finally, the class provides a method called <TT>canSave()</TT>.
This method returns a Boolean indicating that the record is eligible
for saving to the database. This eligibility depends completely
on the table that it is representing. This method allows you to
validate the data that the user has entered and give it the thumbs
up or down.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
The <TT>DBRecord</TT> class is part of the <TT>jif.sql</TT> package.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
A complete example is in order. Listing 12.6 is a complete <TT>DBRecord</TT>
derivation for a table that represents Conference Rooms. This
is an actual class created for the Conference Room Scheduling
application in this book.
<HR>
<BLOCKQUOTE>
<B>Listing 12.6. A </B><TT><B>DBRecord</FONT></B></TT><B>
subclass.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
Package&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
package&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jif.common;
<BR>
<BR>
//****************************************************************************
<BR>
//* 
Imports&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;JIF imports<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jif.sql.*;
<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jif.awt.*;
<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Java imports<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
java.sql.*;<BR>
<BR>
//****************************************************************************
<BR>
//* 
ConfRoomRecord&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
/**<BR>
* A class that encapsulates a row in the conference room table...
<BR>
*/<BR>
public class<BR>
ConfRoomRecord<BR>
extends DBRecord<BR>
{<BR>
<BR>
//****************************************************************************
<BR>
//* 
Constants&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static String&nbsp;&nbsp;&nbsp;&nbsp;
TABLE_NAME = &quot;conf_room&quot;;<BR>
<BR>
//****************************************************************************
<BR>
//* 
Members&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;A variable for
each table column...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;room_nbr
= -1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;floor_nbr
= -1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;desc_text
= &quot;&quot;;<BR>
<BR>
//****************************************************************************
<BR>
//* 
Constructor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public<BR>
&nbsp;&nbsp;&nbsp;&nbsp;ConfRoomRecord()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clear();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public<BR>
&nbsp;&nbsp;&nbsp;&nbsp;ConfRoomRecord( ResultSet rs )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parseResultSet(
rs );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
parseResultSet&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;parseResultSet( ResultSet rs )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clear();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Suck
out the data...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;room_nbr
= rs.getInt( &quot;room_nbr&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;floor_nbr
= rs.getInt( &quot;floor_nbr&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;desc_text
= rs.getString( &quot;desc_text&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
super.parseResultSet( rs ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch ( SQLException
e )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Signal
an error...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clear();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
false );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
update&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/**<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* Requests update SQL from the JifPanel
and sends it to the database<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* via the DBConnector object passed in.
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;update( DBConnector theConnector, JifPanel
ap )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success
= true;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;No
update if nothing to do...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( dataChange )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;sql;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Generate
some SQL!<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( getNewStatus() )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sql
= ap.generateInsertSQL( TABLE_NAME );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sql
= ap.generateUpdateSQL( TABLE_NAME );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( !sql.equals( &quot;&quot; ) )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theConnector.getStatement().executeUpdate(
sql );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch ( SQLException
e )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theConnector.errorLog(
e.toString() );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( success
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
deleteRow&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/**<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* Removes this record from the database...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;deleteRow( DBConnector theConnector )
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success
= true;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Nothing
to do...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( getNewStatus()
)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
false );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String sql = &quot;delete
from &quot; + TABLE_NAME + &quot; where room_nbr &quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;=
&quot; + Integer.toString( room_nbr ) + &quot; and floor_nbr &quot;
+<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;=
&quot; + Integer.toString( floor_nbr );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theConnector.getStatement().executeUpdate(
sql );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch ( SQLException
e )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theConnector.errorLog(
e.toString() );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( success
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
clear&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/**<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* Clears all the variables...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;clear()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.clear();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;room_nbr = -1;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;floor_nbr = -1;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;desc_text = &quot;&quot;;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="SimpleDBUI"><TT><FONT SIZE=4 FACE="Courier">SimpleDBUI</TT></FONT></A>
</H3>
<P>
The <TT>SimpleDBUI</TT> class encapsulates
the nonvisual side of the user interface that is necessary for
proper application functionality. It extends the <TT>JifPanel</TT>
class providing some default buttons and methods for moving data
to and from the user interface components.
<P>
The source code for this class is shown in Listing 12.7.
<HR>
<BLOCKQUOTE>
<B>Listing 12.7. The </B><TT><B>SimpleDBUI</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
Package&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
package&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jif.awt;
<BR>
<BR>
//****************************************************************************
<BR>
//* 
imports&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
java.awt.*;<BR>
<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jif.sql.*;
<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jif.jiflet.*;
<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jif.common.*;
<BR>
<BR>
//****************************************************************************
<BR>
//* 
SimpleDBUI&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
public abstract class<BR>
SimpleDBUI<BR>
extends JifPanel<BR>
{<BR>
<BR>
//****************************************************************************
<BR>
//* 
Members&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;SimpleDBJiflet&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
myJiflet;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Some standard
buttons...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Button&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;saveButton
= new Button( &quot;Save&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Button&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearButton
= new Button( &quot;Clear&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Button&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newButton
= new Button( &quot;New&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Button&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deleteButton
= new Button( &quot;Delete&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Button&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chooseButton
= new Button( &quot;Choose&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Button&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;closeButton
= new Button( &quot;Close&quot; );<BR>
<BR>
//****************************************************************************
<BR>
//* 
Constructor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public<BR>
&nbsp;&nbsp;&nbsp;&nbsp;SimpleDBUI( SimpleDBJiflet jiflet )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setJiflet( jiflet
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setFont( new Font(
&quot;Dialog&quot;, Font.PLAIN, 12 ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
getJiflet&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public SimpleDBJiflet<BR>
&nbsp;&nbsp;&nbsp;&nbsp;getJiflet()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( myJiflet
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
setJiflet&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setJiflet( SimpleDBJiflet jiflet )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myJiflet = jiflet;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
moveToScreen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/**<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Moves data from a DBRecord object
to the fields on the screen<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* for editing.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public abstract void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;moveToScreen();<BR>
<BR>
//****************************************************************************
<BR>
//* 
clearScreen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/**<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* Clears the screen fields<BR>
&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public abstract void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;clearScreen();<BR>
<BR>
//****************************************************************************
<BR>
//* 
moveFromScreen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/**<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Moves data from the fields on
the screen to a DBRecord object.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public abstract void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;moveFromScreen();<BR>
<BR>
//****************************************************************************
<BR>
//* 
action&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;action( Event event, Object arg )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Smart
JIF components generate ACTION_EVENTs when changed...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( event.target
instanceof SQLFactoru )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Notify
dad...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sendJifMessage(
event, DATA_chANGE );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;User
pressed Save...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( event.target
== saveButton )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Notify
dad...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sendJifMessage(
event, SAVE );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;User
pressed New...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( event.target
== newButton )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Notify
dad...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sendJifMessage(
event, NEW );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;User
pressed Choose<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( event.target
== chooseButton )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Notify
dad...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sendJifMessage(
event, chOOSE );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;User
pressed Close<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( event.target
== closeButton )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Notify
dad...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sendJifMessage(
event, CLOSE );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;User
pressed Delete<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( event.target
== deleteButton )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Notify
dad...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sendJifMessage(
event, DELETE );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;User
pressed Clear<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( event.target
== clearButton )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Notify
dad...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sendJifMessage(
event, CLEAR );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Not
handled...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( false
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<P>
Because it is <TT>abstract</TT>, this
class is not very complex. The first thing you notice is that
you create a slew of buttons:
<BLOCKQUOTE>
<TT>public Button&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;saveButton
= new Button( &quot;Save&quot; );<BR>
public Button&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearButton
= new Button( &quot;Clear&quot; );<BR>
public Button&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newButton
= new Button( &quot;New&quot; );<BR>
public Button&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deleteButton
= new Button( &quot;Delete&quot; );<BR>
public Button&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chooseButton
= new Button( &quot;Choose&quot; );<BR>
public Button&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;closeButton
= new Button( &quot;Close&quot; );</TT>
</BLOCKQUOTE>
<P>
These are the standard buttons that the <TT>SimpleDBUI</TT>
knows about. They are defined as <TT>public</TT>
so that you can access them outside of the user interface. Unless
they are placed upon a panel or shown in some manner on the screen,
they are really never used; therefore, they do not generate messages.
<P>
When these buttons are shown on the screen and subsequently pressed
by the user, an <TT>ACTION_EVENT</TT>
event is generated. This event is translated into a <TT>JifMessage</TT>
by the <TT>action()</TT> event handler
method. The message is then sent on to the parent, presumably
a <TT>SimpleDBJiflet</TT>, and processed
there.
<P>
The <TT>SimpleDBUI</TT> class is expected
to move data in and out of a <TT>DBRecord</TT>
class. It does this in three methods: <TT>moveToScreen()</TT>,
<TT>moveFromScreen()</TT>, and <TT>clearScreen()</TT>.
This class has access to the current <TT>DBRecord</TT>
by way of the jiflet. By calling the <TT>SimpleDBJiflet</TT>'s
<TT>getDBRecord()</TT> method, a reference
to the current <TT>DBRecord</TT> is
provided.
<P>
<TT>moveToScreen()</TT> moves data
from the <TT>DBRecord</TT> to the
screen components. <TT>moveFromScreen()</TT>
moves data from the screen components to the <TT>DBRecord</TT>.
A <TT>clearScreen()</TT> clears out
the screen components. This last method does not touch the <TT>DBRecord</TT>
really, but a <TT>clearScreen()</TT>
followed by a <TT>moveFromScreen()</TT>
clears out the <TT>DBRecord</TT>.
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
The <TT>SimpleDBUI</TT> class is part of the <TT>jif.awt</TT> package.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
A simple <TT>SimpleDBUI</TT> derivation
is shown in Listing 12.8. This is from the Online In/Out Board
application from <A HREF="ch16.htm" >Chapter 16</A>, &quot;Online
In/Out Board.&quot;
<HR>
<BLOCKQUOTE>
<B>Listing 12.8. A </B><TT><B>SimpleDBUI</FONT></B></TT><B>
subclass.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
imports&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
java.awt.*;<BR>
<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jif.awt.*;
<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jif.sql.*;
<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jif.jiflet.*;
<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jif.common.*;
<BR>
<BR>
//****************************************************************************
<BR>
//* 
InOutBoardUI&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
public class<BR>
InOutBoardUI<BR>
extends SimpleDBUI<BR>
{<BR>
<BR>
//****************************************************************************
<BR>
//* 
Members&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;List&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;empList;
<BR>
<BR>
//****************************************************************************
<BR>
//* 
Constructor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public<BR>
&nbsp;&nbsp;&nbsp;&nbsp;InOutBoardUI( SimpleDBJiflet jiflet )
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super( jiflet
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout( new
BorderLayout() );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;empList = new
List();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;empList.setFont(
new Font( &quot;Helvetica&quot;, Font.BOLD, 14 ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add( &quot;Center&quot;,
empList );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;empList.enable();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JifPanel p = new
JifPanel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.setLayout( new
FlowLayout( FlowLayout.CENTER, 5, 5 ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;saveButton.setLabel(
&quot;Toggle&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;saveButton.disable();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.add( saveButton
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add( &quot;South&quot;,
p );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Set
the focus to the first field...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setFocus( empList
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
moveToScreen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/**<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Moves data from an InOutBoardRecord
object to the fields on the screen<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* for editing.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;moveToScreen()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( getJiflet().getDBRecord()
== null )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Cast
one off...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EmployeeRecord
er = ( EmployeeRecord )getJiflet().getDBRecord();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String s = er.first_name
+ &quot; &quot; + er.last_name + &quot; is &quot;;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( er.in_out_ind.equalsIgnoreCase(
&quot;Y&quot; ) )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s
+= &quot;in&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s
+= &quot;out&quot;;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;empList.addItem(
s );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
clearScreen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/**<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* Clears the record out...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;clearScreen()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;empList.clear();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
moveFromScreen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/**<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Moves data from the fields on
the screen to an EmployeeRecord object.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;moveFromScreen()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Does
nothing&#133;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="SimpleDBJiflet"><TT><FONT SIZE=4 FACE="Courier">SimpleDBJiflet</TT></FONT></A>
</H3>
<P>
The <TT>SimpleDBJiflet</TT> class
pulls together the <TT>DBRecord</TT>
and <TT>SimpleDBUI</TT> classes into
a cool little hunk of code. This class encapsulates much of the
necessary menu and database initialization that must be done for
each application.
<P>
The <TT>SimpleDBJiflet</TT> class
extends the <TT>Jiflet</TT> class
and adds the following functionality:
<UL>
<LI><FONT COLOR=#000000>File menu with standard database connectivity</FONT>
<LI><FONT COLOR=#000000>Help menu with working About box</FONT>
<LI><FONT COLOR=#000000>A standard method of communicating with
the user interface</FONT>
<LI><FONT COLOR=#000000>Record saving and deleting</FONT>
<LI><FONT COLOR=#000000>Data modification notification</FONT>
</UL>
<P>
Although they are not functional on their own, these features
offer quite a bit of legwork that you have to cut and paste from
app to app. The beauty of object-oriented programming and Java
is that you can stuff all of this functionality into an abstract
base class and fill in the blanks. That is all that has been done
here.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
The <TT>SimpleDBJiflet</TT> class is part of the <TT>jif.jiflet</TT> package.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H4>File and Help Menu</H4>
<P>
The <TT>SimpleDBJiflet</TT> class
creates two menus: a File menu, and a Help menu. The File menu
contains two items: Connect and Exit.
<P>
The first option, Connect, connects and disconnects the application
with the database. This functionality is provided completely as
long as the jiflet has a valid <TT>DBConnector</TT>
set for itself.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
For more information about the <TT>DBConnector</TT> class, <A HREF="ch10.htm" >see Chapter 10</A>, &quot;Database Classes.&quot;
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
After a database connection is established, this menu option changes
to Disconnect automatically. When selected, it disconnects your
application from the database and changes back to Connect.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=590><B>Caution</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=590>
<BLOCKQUOTE>
The JDK v1.0.2 for 32-bit Microsoft Windows systems has a bug that prevents a menu item from changing the text after it is displayed. This should be fixed in the JDK v1.1 release.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The second menu option, Exit, disconnects any connected <TT>DBConnector</TT>
and closes the application. This can include writing information
to a log file or to the screen. It depends on the configuration
of the jiflet.
<P>
The Help menu has a single menu item. This item brings up an About
box. If you are not familiar with these boxes, they are simply
brag boxes for the authors of programs. Some actually show useful
information but most just show the program name and a fancy icon
along with some copyright information.
<P>
Should your jiflet be any different? You're just as proud of your
creation as other authors are! Well, set a copyright message with
the method <TT>setCopyright()</TT>
and an About box displays automagically! Figure 12.6 shows the
About box for the employee maintenance program-nothing too fancy,
just the text and a little icon.
<P>
<A HREF="http://docs.rinet.ru/Jintra/f12-6.gif" ><B>Figure 12.6 : </B><I>The employee maintenance About box.</I></A>
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=590><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=590>
<BLOCKQUOTE>
A nice extension to the <TT>Jiflet</TT> class allows custom icons to be associated with the application. Then in their About boxes, the custom icon displays instead of the stock information icon.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The only code required to get that nice About box in the derived
<TT>Employee</TT> program is the following:
<BLOCKQUOTE>
<TT>setCopyright( &quot;Employee Maintenance
v1.00\n&quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;Copyright (c) 1996 by Jerry Ablan\n&quot;
+<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;All Rights Reserved&quot; );</TT>
</BLOCKQUOTE>
<P>
Not a lot of code for such a nice feature! By the way, the About
menu item is disabled until you call the <TT>setCopyright()</TT>
method.
<H4>Standard Communications: <TT>JifMessage</TT>
</H4>
<P>
In object-oriented programming, objects communicate with each
other by way of messages. But at what point should objects know
about the inside workings of other objects? Some purists argue
never! Some argue sometimes. However, it is usually a matter of
convenience.
<P>
While designing many of the applications for this book, I felt
that the user interface should be able to manage itself, not knowing
about the application driving it. However, I felt that the application
needed to know a little about the user interface. Otherwise, you
really can't provide any nice bells and whistles. One such feature
is to enable and disable the Save button when a data item is modified.
This is an excellent visual clue to the user that a change has
been made, intentionally or not.
<P>
In order to feel politically correct OOP-wise, and to not let
my user interface design creep into my application design, I created
the <TT>JifMessage</TT> interface.
Listing 12.9 is the source code for the <TT>JifMessage</TT>
interface.
<HR>
<BLOCKQUOTE>
<B>Listing 12.9. The </B><TT><B>JifMessage</FONT></B></TT><B>
interface.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
Package&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
package&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jif.jiflet;
<BR>
<BR>
//****************************************************************************
<BR>
//* 
Imports&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java.awt.Event;
<BR>
<BR>
//****************************************************************************
<BR>
//* 
JifMessage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
public interface<BR>
JifMessage<BR>
{<BR>
<BR>
//****************************************************************************
<BR>
//* 
Members&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;NEW
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
CLEAR = 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
SAVE = 2;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
DELETE = 3;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
CUT = 4;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
COPY = 5;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
PASTE = 6;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
HELP_WINDOW = 7;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
HELP_CONTEXT = 8;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
HELP_ABOUT = 9;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
HELP_HELP = 10;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
DATA_chANGE = 11;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
chOOSE = 12;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
CLOSE = 13;<BR>
<BR>
//****************************************************************************
<BR>
//* 
sendJifMessage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sendJifMessage( Event event, int msg );
<BR>
<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<P>
Again, it is nothing fancy-simply a list of constants and a consistent
method of sending them, which is up to the implementor of this
interface. As you can see, many standard actions are represented
by the constants in this class: New, Save, Delete, Close, and
so on.
<P>
After creating this interface, it needs to be implemented somewhere.
The <TT>JifPanel</TT> class is an
excellent spot. Because most user interfaces are created with
<TT>JifPanel</TT>s, this provides
a consistent and standard method of communication with its parent.
Listing 12.10 is the code that is added to the <TT>JifPanel</TT>
class to implement this interface.
<HR>
<BLOCKQUOTE>
<B>Listing 12.10. Sending a </B><TT><B>JifMessage</FONT></B></TT><B>.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
sendJifMessage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sendJifMessage( Event event, int msg )
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event.target =
this;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event.arg = new
Integer( msg );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getParent().postEvent(
event );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<HR>
<P>
Nothing too tricky here either. The <TT>sendJifMessage()</TT>
method takes as arguments an event and the message to send. It
changes the target of the event to itself (the <TT>JifPanel</TT>
instance) and sets the argument of the event to the message. It
then sends the message along to the parent.
<P>
Here's a quick example of how it is used. In the <TT>SimpleDBUI</TT>,
there is a built-in Save button. When the user clicks on this
button, the class automatically sends a <TT>JifMessage.SAVE</TT>
event to its parent. The parent needs only to listen for these
<TT>JifMessage</TT> events to know
what the child wants it to do.
<P>
The code for sending from the child looks exactly like this:
<BLOCKQUOTE>
<TT>//&nbsp;&nbsp;&nbsp;&nbsp;User pressed
Save...<BR>
if ( event.target == saveButton )<BR>
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Notify dad...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sendJifMessage( event, JifMessage.SAVE
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return( true );<BR>
}</TT>
</BLOCKQUOTE>
<P>
The code for receiving in the parent looks something like this:
<BLOCKQUOTE>
<TT>public boolean<BR>
action( Event event, Object arg )<BR>
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;switch ( ( ( Integer )arg ).intValue()
)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case JifMessage.DELETE:
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delDlg
= new ResponseDialog( this,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Delete
Confirmation&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Are
you sure you want to delete this record?&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Yes,No&quot;
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delDlg.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</TT>
</BLOCKQUOTE>
<P>
Now that there is a standard way of communicating, you can add
some standard features such as saving and deleting.
<H4>Record Saving and Deleting</H4>
<P>
A nice feature for a program to have is a standard method of saving
and deleting. Now that you know when the user wants you to save
or delete (by way of a <TT>JifMessage</TT>),
you only need some standard methods for doing this.
<P>
Enter <TT>saveRecord()</TT> and <TT>deleteRecord()</TT>.
These two methods provide a method for saving and deleting the
information that is stored in the <TT>DBRecord</TT>
of the jiflet. When the <TT>SimpleDBUI</TT>
sends the <TT>SAVE</TT> or <TT>DELETE</TT>
<TT>JifMessage</TT> to the jiflet,
these methods are called.
<P>
They are declared as follows:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
saveRecord&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;saveRecord()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;If
we are not connected, do nothing...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( !getConnector().connected()
)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageBox
mb = new MessageBox( this, &quot;Hold on there!&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;You
must connect with the database\n&quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;before
you can save any data.\n\n&quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Connect
first, then try this again!&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageBox.EXCLAMATION
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
false );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Move
the data back to the DBRecord...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getUIPanel().moveFromScreen();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Check
to see if all fields are filled in...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( getDBRecord().canSave()
)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Save
it...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( getDBRecord().update( getConnector(), getUIPanel() ) )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Indicate
that it was saved...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getDBRecord().setDataChange(
false );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setStatus(
&quot;Record saved...&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setStatus(
&quot;Record not saved...&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageBox
mb = new MessageBox( this, &quot;Cannot Save!&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;All
required fields must be entered!&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageBox.EXCLAMATION
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( false
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
deleteRecord&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;deleteRecord()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;If
we are not connected, do nothing...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( !getConnector().connected()
)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageBox
mb = new MessageBox( this, &quot;Hold on there!&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;You
must connect with the database\n&quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;before
you can delete any data.\n\n&quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Connect
first, then try this again!&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageBox.EXCLAMATION
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
false );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Move
the data back to the DBRecord...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getUIPanel().moveFromScreen();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Kill
it!<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( getDBRecord().deleteRow(
getConnector() ) )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Indicate
that it was saved...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getDBRecord().clear();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getUIPanel().moveToScreen();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setStatus(
&quot;Record deleted...&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setStatus(
&quot;Record not deleted...&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( false
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
This allows you to override them in your derived classes, thus
enhancing the functionality. One functionality is to modify two
tables instead of one. Or perhaps your jiflet does not save any
data but you use the save button and mechanism for some other
sort of notification. It is up to you. Be creative!
<H4>Data Change Notification</H4>
<P>
The last function that the <TT>SimpleDBJiflet</TT>
provides is data change notification.
<P>
When the <TT>SimpleDBUI</TT> contains
one of the JIF <TT>Component</TT>
extensions (such as <TT>JifTextField</TT>),
it is notified when the user changes the data. This notification
is passed along to the <TT>SimpleDBJiflet</TT>.
The <TT>SimpleDBJiflet</TT> then manages
the enabling and disabling of the Save, New, and Delete buttons.
<P>
The status depends on the state of the <TT>DBRecord</TT>
at the time. If the record is new, it can't be deleted but it
can be saved and cleared (New). If the record has not been changed
and is not new, it can be saved, deleted, or cleared. This is
not a very complex set of rules but is a hassle to code for each
application. You'll find it refreshing when your Save button lights
up after you type in your first character.
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
This chapter covered every bit of the foundation from the smallest
class to the largest. In this chapter, you have an intimate encounter
with the <TT>Jiflet</TT> package.
This package combines much of the other packages into a simple,
usable application base for creating intranet applications. This
application base is the goal set out in <A HREF="ch7.htm" >Chapter 7</A>,
&quot;A Model Intranet Application.&quot;
<P>
This new base is the foundation for the rest of the book. You
see that you create jiflets for each of the sample applications
that are discussed in the following chapters.
<P>
In <A HREF="ch13.htm" >Chapter 13</A>, &quot;Employee Files,&quot;
you discuss the first sample intranet application: Employee Files.
This application allows you to maintain your employee information.
It's not much, but it is a great starting point for the sample
applications.

<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch11.htm"><IMG SRC="http://docs.rinet.ru/Jintra/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="http://docs.rinet.ru/Jintra/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/Jintra/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch13.htm"><IMG 
SRC="http://docs.rinet.ru/Jintra/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>
