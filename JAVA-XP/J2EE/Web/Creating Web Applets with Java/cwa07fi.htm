<HTML>

<HEAD>

<TITLE>Creating Web Applets with Java cwa07fi.htm</TITLE>

<LINK REL="ToC" HREF="index.htm">

<LINK REL="Next" HREF="cwa08fi.htm">

<LINK REL="Previous" HREF="cwa06fi.htm"></HEAD>

<BODY TEXT="#000000" LINK="#0000FF" VLINK="#FF0000"  bgcolor=white >









<P><A HREF="cwa06fi.htm"><IMG SRC="http://docs.rinet.ru/WebApp/bluprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/WebApp/blutoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="cwa08fi.htm"><IMG SRC="http://docs.rinet.ru/WebApp/blunext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


</P><UL>

<LI>

<A HREF="#I1">&#151; 7 &#151;The Java Developer's Kit</A></LI>

<UL>

<UL>

<LI>

<A HREF="#I3">The Components of the Java Developer's Kit</A></LI>

<UL>

<LI>

<A HREF="#I4">javac</A></LI>

<LI>

<A HREF="#I5">java</A></LI>

<LI>

<A HREF="#I6">jdb</A></LI>

<LI>

<A HREF="#I7">javah</A></LI>

<LI>

<A HREF="#I8">javap</A></LI>

<LI>

<A HREF="#I9">javadoc</A></LI>

<LI>

<A HREF="#I10">appletviewer</A></LI>

<LI>

<A HREF="#I11">Sample Applets</A></LI></UL>

<LI>

<A HREF="#I12">Where to Find the JDK</A></LI>

<LI>

<A HREF="#I13">Installing the JDK</A></LI>

<UL>

<LI>

<A HREF="#I14">Installing on UNIX</A></LI>

<LI>

<A HREF="#I15">Installing on Windows (NT, 95)</A></LI>

<LI>

<A HREF="#I16">Installing on the Macintosh</A></LI></UL>

<LI>

<A HREF="#I17">Where to Find Documentation</A></LI>

<UL>

<LI>

<A HREF="#I18">The Java Tool Documentation</A></LI>

<LI>

<A HREF="#I19">The API Documentation</A></LI></UL>

<LI>

<A HREF="#I20">How to Compile Java Code</A></LI>

<LI>

<A HREF="#I21">Summary</A></LI></UL></UL></UL>



<H1 ALIGN="CENTER">

<CENTER><A ID="I1" NAME="I1">

<BR>

<FONT SIZE=5><A ID="I2" NAME="I2"></A><B>&#151; 7 &#151;</B>

<BR><B>The Java Developer's Kit</B>

<BR></FONT></A></CENTER></H1>

<P>The Java Developer's Kit (JDK) is an assemblage of all the components you need to produce your own applets. The JDK is available on a variety of platforms, and you will need to obtain and understand the JDK in order to start producing applets. This 
chapter talks about the elements that make up the JDK and how you can use them to start building your own applets. Once you get started with the JDK, the chapter provides the first applet you can enter from scratch: HelloWorld.

<BR></P>

<H3 ALIGN="CENTER">

<CENTER><A ID="I3" NAME="I3">

<FONT SIZE=4><B>The Components of the Java Developer's Kit</B>

<BR></FONT></A></CENTER></H3>

<P>At the heart of developing applets is the Java Developer's Kit. The Java Developer's Kit combines all of the tools and information that you need to program your own applets into one package. The JDK contains a number of components designed to help you 
compile, debug, and view your applets on a variety of different platforms.

<BR></P>

<P>Currently, the JDK is available for the following platforms:

<BR></P>

<UL>

<LI>Sun Solaris 2.3, 2.4, and 2.5 SPARC-based machines

<BR>

<BR></LI>

<LI>Microsoft Windows NT and Windows 95

<BR>

<BR></LI>

<LI>Macintosh System 7.5

<BR>

<BR></LI></UL>

<P>In the future, the JDK may be available for more UNIX platforms, and eventually various aspects of the JDK may be assembled into commercial packages. A number of companies are already developing Integrated Development Environments (IDEs) for Java with 
their own compilers, which are designed to replace the Sun Java compiler. However, for the beginner, the JDK represents a good starting place and provides all the tools you need to write and compile your applets.

<BR></P>

<P>Each of the components provided in the JDK exists as a separate program with its own function. Unfortunately, not much integration exists among the elements in the JDK, which can make using the JDK a bit confusing at first. The following sections 
describe the JDK's components and how they function.

<BR></P>

<HR ALIGN=CENTER>

<NOTE>

<IMG SRC="http://docs.rinet.ru/WebApp/caution.gif" WIDTH = 37 HEIGHT = 35>Caution: Keep in mind that each version of the Java Developer's Kit is platform-specific. The individual commands you use to evoke each component may vary. There also might be subtle variations from platform to 

platform based on the interface model you are using (for example, Windows versus Macintosh). The JDK elements generally function like other programs in the operating system you choose, but you can also consult the JDK documentation to find out about 
specific differences in the JDK for each platform.

<BR></NOTE>

<HR ALIGN=CENTER>

<H4 ALIGN="CENTER">

<CENTER><A ID="I4" NAME="I4">

<FONT SIZE=3><B>javac</B>

<BR></FONT></A></CENTER></H4>

<P>The Java compiler is javac. The javac compiler reads in the Java code you have written and converts it to the bytecode that can be run on any platform using the Java Virtual Machine. The code you write must be contained in a file called 
<I>filename</I>.java in order to be compiled properly. The compiler produces a file called <I>filename</I>.class, which contains the compiled bytecode. Normally, the compiler creates the .class file in the same directory as the .java file; however, you can 

specify a different directory.

<BR></P>

<P>The compiler is invoked with the following command:

<BR></P>

<PRE>     javac [ options ] filename.java ...</PRE>

<P>The compiler takes a number of options to enable you to tweak its behavior. The -classpath option enables you to specify a directory in which the standard Java classes are stored. The javac compiler uses a number of classes that are provided with the 
JDK, and generally these are all stored in a common directory, such as C:\jdk\java\classes. If you have stored the classes in a different directory and want to override the default installation, you can use this option to specify the path to the new 
directory:

<BR></P>

<PRE>-classpath <I>path</I></PRE>

<P>The -d option enables you to specify a specific output directory for the compiler. When the compiler produces the .class file, it stores the file in the directory specified. The syntax for this option is as follows:

<BR></P>

<PRE>-d directory</PRE>

<P>The -g option enables you to turn on the compiler's debug tables. The Java debugging tools can then use the debug tables to help you debug your code. The syntax for this option is as follows:

<BR></P>

<PRE>-g</PRE>

<P>The -nowarn option disables warning output from the compiler. Warnings are errors in your code that do not prevent the code from executing, but might create unpredictable behavior or errors once the code is running. If you are aware of the warnings your 

code is producing, you might disable the warnings to concentrate on serious bugs, but keep in mind that the warnings still apply. The -nowarn option can help cut down the clutter of text generated when you compile the code, but keep in mind that the 
warnings can be useful as well. The syntax for this option is as follows:

<BR></P>

<PRE>-nowarn</PRE>

<P>The -O option is designed to optimize your code to run a bit faster. Optimization generally causes your files to be a bit larger, which might be a factor when considering download time. The syntax for this option is as follows:

<BR></P>

<PRE>-O</PRE>

<P>The -verbose option causes the compiler to print out a variety of information about what source code is being compiled and what class libraries are being loaded. This information can be useful for optimizing and debugging your code. The syntax for this 

option is as follows:

<BR></P>

<PRE>-verbose</PRE>

<H4 ALIGN="CENTER">

<CENTER><A ID="I5" NAME="I5">

<FONT SIZE=3><B>java</B>

<BR></FONT></A></CENTER></H4>

<P>In the Java Developer's Kit, java is the Java interpreter, also known as the Java Virtual Machine. This program enables you to run Java bytecode by translating between the Java code and your operating system. If you are programming standalone 
applications with Java, you can use java to execute your application. You do not need to use java directly if you are programming applets, however, because applets are designed to be used in conjunction with a browser. If you do not have access to a 
Java-capable browser, you can use the appletviewer (which is also part of the JDK) instead of java to view applets.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I6" NAME="I6">

<FONT SIZE=3><B>jdb</B>

<BR></FONT></A></CENTER></H4>

<P>The jdb is the Java debugger, and you use it to help you locate errors in your programs. It can be invoked in conjunction with an applet or browser and will provide you with output regarding errors in your program. Unfortunately, the debugger is only a 

command-line debugger. You can invoke it using a command such as the following:

<BR></P>

<PRE>          C:\&gt; jdb browser.hotjava</PRE>

<P>This command launches the debugger in conjunction with the HotJava browser. The jdb debugger also can accept the commands listed in Table 7.1.

<BR></P>

<UL>

<LH><B>Table 7.1. Commands for use with jdb.</B>

<BR></LH></UL>

<TABLE BORDER>

<TR>

<TD>

<PRE><I>Command</I>

<BR></PRE>

<TD>

<PRE><I>What it does</I>

<BR></PRE>

<TR>

<TD>

<P>help</P>

<TD>

<P>Provides help on how to use the jdb, an extremely useful command</P>

<TR>

<TD>

<P>print</P>

<TD>

<P>Enables you to print out Java objects and view their contents</P>

<TR>

<TD>

<P>dump</P>

<TD>

<P>Dumps all of an object's instance variables</P>

<TR>

<TD>

<P>threads</P>

<TD>

<P>Lists all the current threads</P>

<TR>

<TD>

<P>where</P>

<TD>

<P>Dumps the stack of the current thread, or specified thread</P></TABLE>

<P>For a novice programmer, the debugger can be very hard to use. As it so happens, when you use the javac compiler to compile a program that contains errors, the compiler provides you with information regarding the bug anyway. For example, the following 
code contains an error:

<BR></P>

<PRE>import java.awt.Graphics;

public class HelloWorld extends java.applet.Applet {

     public void init() {

          resize(150,25)

     }

     public void paint(Graphics g) {

          g.drawString(&quot;Hello world!&quot;, 50, 25);

     }

}</PRE>

<P>Suppose you don't realize that there is an error in the code and you try to compile it using the javac compiler:

<BR></P>

<PRE>C:\java\bin\javac&gt; javac HelloWorld.java</PRE>

<P>When you invoke the compiler, it generates the following text:

<BR></P>

<PRE>HelloWorld.java:4: ';' expected.

                       resize(150,25)

                                     ^

1 error

C:\java\bin&gt; </PRE>

<P>This information is quite useful. The compiler has informed you that there is one error in the code, and it has even given you the information necessary to find the error. The :4: following the filename indicates that the error is in line 4 of your 
code. The compiler also points out that the error was caused because it expected a semi-colon at the end of the line. Now you can go back and change the line to read as follows:

<BR></P>

<PRE>resize(150, 25);</PRE>

<P>Your code will now compile without any problems. Of course, most commercial products have compilers that automatically take you to the error in the code by launching an editor and highlighting the error, but Java still has a way to go. As Integrated 
Development Environments become available, debugging options will likely increase, and debugging will become much easier.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I7" NAME="I7">

<FONT SIZE=3><B>javah</B>

<BR></FONT></A></CENTER></H4>

<P>As previously mentioned, Java has the capability to incorporate native methods from other programming languages, such as C. With javah, you can create C language header and source files from your Java code so that you can then compile those methods 
using C on your machine to create the native method. For beginning applet programming, this procedure is not necessary; In fact, because applets are designed to be platform-independent, native methods are not generally necessary.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I8" NAME="I8">

<FONT SIZE=3><B>javap</B>

<BR></FONT></A></CENTER></H4>

<P>The Java Class File Disassembler that enables you to examine compiled source code is javap. You can use it to print out various methods and variables in a class in order to obtain information about the construction of a program.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I9" NAME="I9">

<FONT SIZE=3><B>javadoc</B>

<BR></FONT></A></CENTER></H4>

<P>One of the more useful features of Java is javadoc. It is the Java API Documentation Generator, a program that enables you to generate documentation for your applets based on the comments contained within your code. This program makes it easy to 
generate an immediate guide on how to use your applet that is accurate and doesn't involve much extra work on your part.

<BR></P>

<P>Suppose your code were commented as follows:

<BR></P>

<PRE>/**

* The text in this comment will be turned into documentation

*

* &lt;pre&gt;

*    An example of code.

* &lt;/pre&gt;

*

* @version        1.0

* @author         John Doe

*/

class Example extends Applet {

...

}</PRE>

<P>Document comments begin with /** and can contain embedded HTML tags (such as &lt;PRE&gt;) and special comment tags designated by the @ symbol. Chapter 8 talks more about the specifics of using comments. When you then run javadoc with your source file,

<BR></P>

<PRE>javadoc <I>filename</I>.java</PRE>

<P>javadoc produces a formatted HTML file that contains the documentation specified in your code. You can then use that HTML file as accompanying documentation for your applet.

<BR></P>

<P>To understand how javadoc works, take a look at the TicTacToe sample applet provided with the JDK. First, you need to be in the same directory as the code file because javadoc reads the code and gets its information from the comments in the code. To 
produce the documentation for the TicTacToe applet, invoke the javadoc program with the following line:

<BR></P>

<PRE>C:\java\demos\TicTacToe&gt; javadoc TicTacToe.java</PRE>

<P>This line should launch javadoc, which will produce output that resembles the following:

<BR></P>

<PRE>Generating packages.html

generating documentation for the class TicTacToe

Generating index

Sorting 5 items . . . done

Generating tree

C:\java\demos\TicTacToe&gt;</PRE>

<P>That's it! Now there should be a file called TicTacToe.html in the directory; this file is the main page for the TicTacToe applet documentation (see Figure 7.1). This documentation includes a breakdown of the applet classes used in the applet and the 
comments found in the applet's code. Running this program can be an excellent way to learn more about the structure or usage of an applet.

<BR></P>

<P><B><A HREF="http://docs.rinet.ru/WebApp/07cwa01.gif">Figure 7.1. The javadoc application produces </B><B>HTML-based documentation from the comments in the program code.</A></B></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I10" NAME="I10">

<FONT SIZE=3><B>appletviewer</B>

<BR></FONT></A></CENTER></H4>

<P>The appletviewer is a program that enables you to run your applets without having a Java-capable Web browser handy. The appletviewer is invoked by calling a file that contains the HTML code for your applet. The appletviewer then reads the HTML code and 

launches your applet in its own window on your machine.

<BR></P>

<P>Using the applet viewer can have several advantages over using a browser. First, the appletviewer is a relatively small program that launches very quickly. Because Web browsers do a whole lot more than just show applets, they take longer to launch and 
might prevent you from running an applet in the background while you tweak the code.

<BR></P>

<P>Second, because the appletviewer does not incorporate browser-specific features, it can be a good way to check your applet for generic compatibility issues. As discussed previously, browsers restrict applets in certain ways. The appletviewer can provide 

you with information about how your applet runs outside of any particular browser context. You can launch the appletviewer by typing in appletviewer, followed by the name of the HTML file for the applet you want to view:

<BR></P>

<PRE>c:\java&gt; appletviewer example.html</PRE>

<P>This example causes the appletviewer to display the example.html file, which in turn launches an sample applet. The appletviewer then opens its own window and runs the applet ( see Figure 7.2).

<BR></P>

<P><B><A HREF="http://docs.rinet.ru/WebApp/07cwa02.gif">Figure 7.2. An applet viewed in the </B><B>appletviewer.</A></B></P>

<HR ALIGN=CENTER>

<NOTE>

<IMG SRC="http://docs.rinet.ru/WebApp/note.gif" WIDTH = 35 HEIGHT = 35>Note: The Java Developer's Kit does not contain a Java-specific text editor. Many IDEs may contain a text editor with features geared toward writing code, but you are free to use any text editor you choose for 
writing code with the JDK. Keep in mind that the editor must be able to save files as plain text, but beyond that you are free to use any program you choose.

<BR></NOTE>

<HR ALIGN=CENTER>

<H4 ALIGN="CENTER">

<CENTER><A ID="I11" NAME="I11">

<FONT SIZE=3><B>Sample Applets</B>

<BR></FONT></A></CENTER></H4>

<P>In addition to these development tools, the JDK also contains a number of sample applets that are designed to showcase the abilities of Java. The sample applets are provided complete with source code and any supplementary files, so you can run them 
straight off your machine using the appletviewer or your Web browser. Also, because the examples include source code, you can use the code to see how specific features were implemented, which can be a very valuable learning experience.

<BR></P>

<P>The applets provided with the JDK 1.0 release are the following:

<BR></P>

<UL>

<LI>The Animator applet is a simple animator that displays a series of images to create a flipbook animation effect.

<BR>

<BR></LI>

<LI>ArcTest is an applet that enables you to specify an arc and draw it on-screen. It provides a good example of advanced graphics techniques.

<BR>

<BR></LI>

<LI>BarChart is a simple bar chart example.

<BR>

<BR></LI>

<LI>Blink is an applet of text blinking out of control.

<BR>

<BR></LI>

<LI>Bouncing Heads is just what it sounds like: disembodied heads bouncing around in an area on the screen.

<BR>

<BR></LI>

<LI>Card Test is an example of various object layouts in Java.

<BR>

<BR></LI>

<LI>Dither Test is an advanced graphics test showing the results of different dithers in Java.

<BR>

<BR></LI>

<LI>Draw Test is a simple drawing applet. It enables you to draw lines or points with a selection of colors. It also is a good example of some advanced graphics techniques.

<BR>

<BR></LI>

<LI>Fractal is an applet of some fractal figures in Java.

<BR>

<BR></LI>

<LI>Graphics Test is an example of some graphics manipulations; it is designed for the advanced programmer.

<BR>

<BR></LI>

<LI>Graph Layout is an example of an interactive graph showing relationships between objects.

<BR>

<BR></LI>

<LI>Image Map is an example of an image map that provides real-time feedback rather than cryptic coordinates.

<BR>

<BR></LI>

<LI>Image Test provides examples of advanced image manipulations and transformations.

<BR>

<BR></LI>

<LI>Jumping Box is a box that jumps around based on your mouse movement.

<BR>

<BR></LI>

<LI>Molecule Viewer displays a molecule and enables the user to rotate the view of the molecule in real time.

<BR>

<BR></LI>

<LI>Nervous Text is text that hops around like jumping beans.

<BR>

<BR></LI>

<LI>Scrolling Images is an applet that scrolls a series of images across the screen.

<BR>

<BR></LI>

<LI>Simple Graph is a very simple graph example.

<BR>

<BR></LI>

<LI>Spread Sheet is an example of a spreadsheet application.

<BR>

<BR></LI>

<LI>TicTacToe is a game of tic-tac-toe played against the computer. (This applet is deliberately flawed so you can win once in a while.)

<BR>

<BR></LI>

<LI>Tumbling Duke is a variation of the Animator applet that shows a tumbling duke (the Java mascot).

<BR>

<BR></LI>

<LI>Under Construction is an animated Under Construction applet featuring a construction worker duke.

<BR>

<BR></LI>

<LI>Wire Frame displays a wireframe shape that the user can manipulate with the mouse.

<BR>

<BR></LI></UL>

<H3 ALIGN="CENTER">

<CENTER><A ID="I12" NAME="I12">

<FONT SIZE=4><B>Where to Find the JDK</B>

<BR></FONT></A></CENTER></H3>

<P>The official source for the Java Developer's Kit is Javasoft; the JDK is also on the CD-ROM accompanying this book. You can get the JDK from the CD, or you can download the JDK directly from the Web at the following URL (see Figure 7.3):

<BR></P>

<PRE><A HREF="http://www.javasoft.com/JDK-1.0/index.html">http://www.javasoft.com/JDK-1.0/index.html</A></PRE>

<P><B><A HREF="http://docs.rinet.ru/WebApp/07cwa03.gif">Figure 7.3. The Javasoft site contains a page with </B><B>links to download the Java Developer's Kit.</A></B></P>

<P>Keep in mind that this site is often very busy, and it can take up to 20 minutes to download the JDK during peak usage times. You can also obtain the files from the Javasoft FTP site:

<BR></P>

<PRE><A HREF="ftp://ftp.javasoft.com/">ftp.javasoft.com</A>        in the /pub directory</PRE>

<P>The filenames are as follows:

<BR></P>

<PRE>JDK-beta1-mac.sea.bin             Macintosh System 7.5 binary format

JDK-beta1-mac.sea.hqx             Macintosh System 7.5 HQX format

JDK-1_0-win32-x86.exe             Windows 95 and NT version

JDK-1_0-solaris2-sparc.tar.Z      Sun Solaris (SPARC) 2.3, 2.4, and 2.5</PRE>

<HR ALIGN=CENTER>

<NOTE>

<IMG SRC="http://docs.rinet.ru/WebApp/caution.gif" WIDTH = 37 HEIGHT = 35>Caution: Make sure that your FTP client is set to binary when downloading these files or they will not decompress properly.

<BR></NOTE>

<HR ALIGN=CENTER>

<H3 ALIGN="CENTER">

<CENTER><A ID="I13" NAME="I13">

<FONT SIZE=4><B>Installing the JDK</B>

<BR></FONT></A></CENTER></H3>

<P>After you download the archive of the JDK, you must install it on your machine. The specifics of how you complete the installation vary from platform to platform, so the section divides the steps depending on your type of machine: UNIX, Windows 95/NT, 
or the Macintosh.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I14" NAME="I14">

<FONT SIZE=3><B>Installing on UNIX</B>

<BR></FONT></A></CENTER></H4>

<P>First, use FTP to obtain the compressed archive of the JDK, as shown in the following FTP session:

<BR></P>

<PRE>   $ ftp ftp.javasoft.com

    Name (ftp.javasoft.com): anonymous

    331 Guest login ok, send your complete e-mail address as password.

    Password: user@machine

        &lt;&lt; informational messages &lt;&lt;

    ftp&gt; binary

    200 Type set to I.

    ftp&gt; cd pub

        &lt;&lt; more informational messages &lt;&lt;

    250 CWD command successful.

    ftp&gt; get JDK-1_0-solaris2-sparc.tar.Z

    200 PORT command successful.

    150 Opening BINARY mode data connection for JDK-1_0-solaris2-sparc.tar.Z (4595974 bytes).

    226 Transfer complete.

    local: JDK-1_0-solaris2-sparc.tar.Z remote: JDK-1_0-solaris2-sparc.tar.Z

    4595974 bytes received in 1.4e+02 seconds (30 Kbytes/s)

    ftp&gt; quit</PRE>

<P>After you have used FTP to obtain the file JDK-1_0-solaris2-sparc.tar.Z, decompress the archive using the following command:

<BR></P>

<PRE>     zcat JDK-1_0-solaris2-sparc.tar.Z | tar xf -</PRE>

<P>This command creates a java directory in the current directory. The java directory will have all the tools you need to begin working with Java. Before you begin though, be sure to delete the .tar file (to clean up file space) and add the java/bin 
directory to your path (specified in your shell .rc file).

<BR></P>

<HR ALIGN=CENTER>

<NOTE>

<IMG SRC="http://docs.rinet.ru/WebApp/caution.gif" WIDTH = 37 HEIGHT = 35>Caution: When you uncompress the JDK archive, <B>do not </B><B>unzip </B>the file lib/classes.zip. Doing so will adversely affect the operation of Java.

<BR></NOTE>

<HR ALIGN=CENTER>

<H4 ALIGN="CENTER">

<CENTER><A ID="I15" NAME="I15">

<FONT SIZE=3><B>Installing on Windows (NT, 95)</B>

<BR></FONT></A></CENTER></H4>

<P>The Windows versions of the JDK are self-extracting archives. Once you have downloaded the binary, you should have an executable file (with a .EXE extension) that you can run to extract the archive. Run the executable in your root directory to begin 
extracting the JDK. The archive creates a Java directory named C:\java that contains all the necessary files. Before running any of the applets, you need to update your environment variables for the path in your autoexec.bat file.

<BR></P>

<HR ALIGN=CENTER>

<NOTE>

<IMG SRC="http://docs.rinet.ru/WebApp/caution.gif" WIDTH = 37 HEIGHT = 35>Caution: When you uncompress the JDK archive, <B>do not </B><B>unzip</B> the file lib/classes.zip. Doing so will adversely affect the operation of Java.

<BR></NOTE>

<HR ALIGN=CENTER>

<H4 ALIGN="CENTER">

<CENTER><A ID="I16" NAME="I16">

<FONT SIZE=3><B>Installing on the Macintosh</B>

<BR></FONT></A></CENTER></H4>

<P>The Macintosh version of the JDK is available in the binary and HQX formats. When downloading, if you choose the binary format, be sure that you have MacBinary enabled in your FTP client. If you download the HQX, make sure that you have a compression 
utility such as StuffIt or are using an FTP client that supports the HQX format, such as Fetch. The binary (or converted HQX document) produces a self-extracting archive that contains all the elements of the JDK. Double-click on the archive to extract it 
to your hard drive and begin using Java.

<BR></P>

<H3 ALIGN="CENTER">

<CENTER><A ID="I17" NAME="I17">

<FONT SIZE=4><B>Where to Find Documentation</B>

<BR></FONT></A></CENTER></H3>

<P>Keep in mind that Java is a full-featured programming language. Although it may seem as though this chapter has listed everything there is to know about Java, it has only scratched the surface of available information. Soon Sun will be releasing a 
multivolume set of complete documentation for Java, but the information will be too technical and too lengthy to be useful for most people's needs. However, a variety of documents are available at Javasoft that can help you as you learn Java and answer 
some more advanced questions you might have.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I18" NAME="I18">

<FONT SIZE=3><B>The Java Tool Documentation</B>

<BR></FONT></A></CENTER></H4>

<P>The Java Developer's Kit tools have their own documentation that can provide you with the complete set of instructions and options available for each tool. This chapter provides you with the basic commands and options you need to get started, but you 
might find it useful to consult the official documentation as you progress with Java programming. You can find the JDK tools documentation at http://java.sun.com/JDK-1.0/tools/.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I19" NAME="I19">

<FONT SIZE=3><B>The API Documentation</B>

<BR></FONT></A></CENTER></H4>

<P>The Java Application Programming Interface (API) is the specification by which all Java programs are written. Many functions that you will want to use in your applets have already been written for you by one of the Java developers, and these functions 
have been categorized into packages. The API packages contain a variety of classes, objects, and methods that you will need to program anything in Java. You need to be aware of what programming resources are available and how those resources are used, and 

this information is in the Java API. Keep in mind that the API is a fairly technical document, and you should have an understanding of the Java basics before consulting it. But once you have a solid grasp of basic Java programming, the API will prove to be 

an invaluable resource.

<BR></P>

<P>You can find the Java 1.0 API documentation at the following URL:

<BR></P>

<PRE><A HREF="http://www.javasoft.com/JDK-1.0/api/packages.html">http://www.javasoft.com/JDK-1.0/api/packages.html</A></PRE>

<P>The documentation exists as a HTML document to make it easier to cross-reference section, and is a useful document to have handy when embarking on a large programming project.

<BR></P>

<H3 ALIGN="CENTER">

<CENTER><A ID="I20" NAME="I20">

<FONT SIZE=4><B>How to Compile Java Code</B>

<BR></FONT></A></CENTER></H3>

<P>Now that you have the Java Developer's Kit downloaded and installed on your machine, it's time to start working with some Java code. The first applet you are going to work with is the Hello World applet. This applet displays the words &quot;Hello 
world!&quot; on your screen and is the simplest applet you could have that actually does something. For the time being, don't worry if you don't understand what the code for this applet means. This exercise is supposed to make you comfortable with 
compiling Java code and using the appletviewer before you launch into writing Java applets. You'll start with the basics of Java programming in Chapter 8 and advance from there.

<BR></P>

<P>First, you can either set up a directory to keep your Java code in or work straight from the Java directory. Once you start to write a lot of code, you will most likely want to keep your applets separate for organization, but for now, do things your 
way.

<BR></P>

<P>The first step to creating an applet is writing the Java code. Fire up your text editor and create a file called HelloWorld.java. The HelloWorld.java file is the source code for your first applet. Remember, this code must be in a plain text file, and it 

also must be named HelloWorld.java in order to compile correctly. Enter the following code into your file:

<BR></P>

<PRE>import java.awt.Graphics;

public class HelloWorld extends java.applet.Applet {

     public void init() {

          resize(150,25);

     }

     public void paint(Graphics g) {

          g.drawString(&quot;Hello world!&quot;, 50, 25);

     }

}</PRE>

<P>In the code you just typed in, notice this line:

<BR></P>

<PRE>     public class HelloWorld extends java.applet.Applet {</PRE>

<P>This line tells the compiler that you are creating a new class called HelloWorld, which extends an existing class called java.applet.Applet. All applets are classes, which is why you use the public class statement. The name of your class is going to be 

HelloWorld, which also must be the name of our file. If you were to change the line to public class MyFirstApplet, then your source code file would have to be called MyFirstApplet.java.

<BR></P>

<P>After you have established your applet, you need to set up your applet with the following:

<BR></P>

<PRE>     public void init() {

          resize(150,25);

     }</PRE>

<P>This code enables you to create a graphics area that is 150 by 25 pixels where you can then draw your text with the following code:

<BR></P>

<PRE>     public void paint(Graphics g) {

          g.drawString(&quot;Hello world!&quot;, 50, 25);

     }</PRE>

<P>All this code does is use the Graphics context drawString to draw the specified text string at the given coordinates. Chapter 8 talks more about the syntax of Java, but for now, you have a simple, functioning applet that you are ready to compile.

<BR></P>

<HR ALIGN=CENTER>

<NOTE>

<IMG SRC="http://docs.rinet.ru/WebApp/imp.gif" WIDTH = 68 HEIGHT = 35>Tip: If you receive errors during the first time you try to compile code, don't be discouraged. The compiler is very sensitive to typographic errors in code, so double-check to make sure all of the { and } are in 
the correct places.

<BR></NOTE>

<HR ALIGN=CENTER>

<P>The next step is to use the javac compiler to turn your source code into a compiled Java applet that you can put on a home page. Run the Java compiler with the following command:

<BR></P>

<PRE>          javac HelloWorld.java</PRE>

<P>This command should produce a file called HelloWorld.class in the same directory. This file is your compiled applet.

<BR></P>

<HR ALIGN=CENTER>

<NOTE>

<IMG SRC="http://docs.rinet.ru/WebApp/note.gif" WIDTH = 35 HEIGHT = 35>Note: Macintosh users should note that the JDK components are drag-and-drop within the Macintosh OS. Instead of using a command line, you can just drag your code onto the javac icon to compile it.

<BR></NOTE>

<HR ALIGN=CENTER>

<P>As with any applet, you have to have an HTML file associated with your applet in order to view the applet with the appletviewer or a Web browser. Using your text editor, create a new file in the same directory as your code called HelloWorld.html that 
contains the following information:

<BR></P>

<PRE>&lt;html&gt;

&lt;title&gt;Hello World Applet&lt;/title&gt;

&lt;applet code=&quot;HelloWorld.class&quot; width=150 height=25&gt;

&lt;/applet&gt;

&lt;/html&gt;</PRE>

<P>Once you've saved this file, you are ready to view your applet in action. You can view it by opening the HTML file from your Java-capable Web browser or with the following appletviewer command:

<BR></P>

<PRE>          appletviewer HelloWorld.html</PRE>

<P>You should then see output similar to that in Figure 7.4. Keep in mind that the way an applet looks is influenced by the method you use to view it, so if you are viewing the applet with a Web browser, it might look slightly different.

<BR></P>

<P><B><A HREF="http://docs.rinet.ru/WebApp/07cwa04.gif">Figure 7.4. The HelloWorld Applet.</A></B></P>

<P>That's it! You've now created your first Web applet from scratch! You might want to get some more experience compiling applets before moving on to the following chapters. Remember, the JDK comes with a variety of sample applets, including the source 
code, which you can use to recompile the applets and gain some practice. When you feel comfortable compiling code, move on to Chapter 8 to learn more about the Java language.

<BR></P>

<H3 ALIGN="CENTER">

<CENTER><A ID="I21" NAME="I21">

<FONT SIZE=4><B>Summary</B>

<BR></FONT></A></CENTER></H3>

<P>Learning how to use the tools in the JDK is the first step in applet programming. Now you have the tools to create applets at your disposal, and you know how to use them. Keep in mind that other development environments exist; some will provide a much 
better programming interface, and some won't. But the JDK is the official environment from Sun and is a great way to start creating applets without investing a lot of money. You've seen how to use the JDK tools, and now you've even used those tools to 
create the HelloWorld applet. The next chapter moves on to discuss some more details about the Java programming language.

<BR></P>

<P><A HREF="cwa06fi.htm"><IMG SRC="http://docs.rinet.ru/WebApp/bluprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/WebApp/blutoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="cwa08fi.htm"><IMG SRC="http://docs.rinet.ru/WebApp/blunext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


</P></BODY></HTML>

