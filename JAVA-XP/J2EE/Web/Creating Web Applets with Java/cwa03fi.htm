<HTML>

<HEAD>

<TITLE>Creating Web Applets with Java cwa03fi.htm</TITLE>

<LINK REL="ToC" HREF="index.htm">

<LINK REL="Next" HREF="cwa04fi.htm">

<LINK REL="Previous" HREF="cwa02fi.htm"></HEAD>

<BODY TEXT="#000000" LINK="#0000FF" VLINK="#FF0000"  bgcolor=white >









<P><A HREF="cwa02fi.htm"><IMG SRC="http://docs.rinet.ru/WebApp/bluprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/WebApp/blutoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="cwa04fi.htm"><IMG SRC="http://docs.rinet.ru/WebApp/blunext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


</P><UL>

<LI>

<A HREF="#I1">&#151; 3 &#151;Java Browsers</A></LI>

<UL>

<UL>

<LI>

<A HREF="#I3">HotJava</A></LI>

<UL>

<LI>

<A HREF="#I4">Java's Java Browser</A></LI>

<LI>

<A HREF="#I5">Feature-Rich and Flexible</A></LI>

<UL>

<LI>

<A HREF="#I6">Dynamic Content Types and Protocols</A></LI></UL>

<LI>

<A HREF="#I7">Configuration</A></LI>

<LI>

<A HREF="#I8">Security</A></LI>

<LI>

<A HREF="#I9">Sun's Commitment to HotJava</A></LI>

<LI>

<A HREF="#I10">Availability</A></LI></UL>

<LI>

<A HREF="#I11">appletviewer</A></LI>

<UL>

<LI>

<A HREF="#I12">Special Capabilities</A></LI>

<LI>

<A HREF="#I13">Configuration</A></LI>

<LI>

<A HREF="#I14">Security</A></LI>

<LI>

<A HREF="#I15">Availability</A></LI></UL>

<LI>

<A HREF="#I16">Netscape Navigator</A></LI>

<UL>

<LI>

<A HREF="#I17">Special Capabilities</A></LI>

<LI>

<A HREF="#I18">Imposing New Standards</A></LI>

<LI>

<A HREF="#I19">Configuration</A></LI>

<LI>

<A HREF="#I20">Security</A></LI>

<LI>

<A HREF="#I21">Availability</A></LI></UL></UL></UL></UL>



<H1 ALIGN="CENTER">

<CENTER><A ID="I1" NAME="I1">

<BR>

<FONT SIZE=5><A ID="I2" NAME="I2"></A><B>&#151; 3 &#151;</B>

<BR><B>Java Browsers</B>

<BR></FONT></A></CENTER></H1>

<P>In order to view Java applets, either a Java-capable browser or an application specifically written to run applets is required. Three programs currently fall into this category:

<BR></P>

<UL>

<LI>HotJava, Sun's original &quot;proof of concept&quot; Java-capable browser

<BR>

<BR></LI>

<LI>appletviewer, the &quot;official&quot; way to view applets

<BR>

<BR></LI>

<LI>Netscape Navigator, the first commercial Java-capable browser

<BR>

<BR></LI></UL>

<P>This chapter explores the capabilities and restrictions of all three of these Java environments. Java allows a great deal of latitude in deciding how much extensibility and security is necessary, and each of these programs takes a different approach.

<BR></P>

<H3 ALIGN="CENTER">

<CENTER><A ID="I3" NAME="I3">

<FONT SIZE=4><B>HotJava</B>

<BR></FONT></A></CENTER></H3>

<P>When Sun decided to target Java at the World Wide Web through applets, it needed a Java-capable Web browser as a prototype to work with. This prototype was necessary to prove that Sun's hope of being able to run programs in Web pages was a realistic 
possibility. HotJava was the result and became a surprisingly good browser (see Figure 3.1).

<BR></P>

<P><B><A HREF="http://docs.rinet.ru/WebApp/03cwa01.gif">Figure 3.1. The HotJava browser.</A></B></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I4" NAME="I4">

<FONT SIZE=3><B>Java's Java Browser</B>

<BR></FONT></A></CENTER></H4>

<P>One of the most impressive things about HotJava is the fact that it is almost entirely written in Java. Java has a somewhat undeserved reputation for being slow and limited in its capabilities. HotJava shows that Java is more than capable of producing 
high-quality applications that run reasonably well.

<BR></P>

<P>For the most part, HotJava looks and functions much like a typical Web browser. It has most of the expected features that other modern browsers have, such as hotlists, the ability to show sources, and the ability to set up proxies. For a browser 
originally meant solely as a showcase for Java, HotJava is surprisingly usable for general Web browsing.

<BR></P>

<P>HotJava is meant to display Java applets, and that area is where it really shines (see Figure 3.2). Most other Java browsers give the impression that Java was tacked on as an afterthought, but HotJava was built around Java from the beginning&#151;and it 

shows. HotJava starts up quickly and runs applets more smoothly than other browsers.

<BR></P>

<P><B><A HREF="http://docs.rinet.ru/WebApp/03cwa02.gif">Figure 3.2. HotJava running a Java applet.</A></B></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I5" NAME="I5">

<FONT SIZE=3><B>Feature-Rich and Flexible</B>

<BR></FONT></A></CENTER></H4>

<P>HotJava is special because it sees Java not just as a way to run applets inside a Web browser; it aims to make the core browser much simpler by not having much built into it and having the browser download new &quot;intelligence&quot; when necessary. 
This design makes HotJava much more flexible than other browsers because it makes the browser itself very simple and open to change.

<BR></P>

<P>How is this flexibility achieved? In addition to applets, which HotJava refers to as Interactive Content, HotJava also contains two other innovations: dynamic content types and protocols.

<BR></P>

<H5 ALIGN="CENTER">

<CENTER><A ID="I6" NAME="I6">

<FONT SIZE=3><B>Dynamic Content Types and Protocols</B>

<BR></FONT></A></CENTER></H5>

<P>Most Web browsers directly support a limited number ways to communicate over the network and file types that they understand. Moreover, most browsers' capabilities are set in stone from the beginning( see Figure 3.3), much like an all-in-one stereo 
system that has features you like, but no way to add new ones. Unfortunately, this means that when one browser starts supporting a new type before others there is a period of time when other browsers do not support that type.

<BR></P>

<P>This kind of situation occurred when Netscape Navigator started supporting inline JPEG files before other browsers of the time (such as Mosaic). Before this time, people needed an external viewer to view a JPEG picture. Because Navigator was so popular, 

many people started using inline JPEGs, which would show up as broken links on browsers other than Netscape Navigator.

<BR></P>

<P><B><A HREF="http://docs.rinet.ru/WebApp/03cwa03.gif">Figure 3.3. Most browsers have a fixed amount of </B><B>functionality.</A></B></P>

<P>HotJava is more like a component stereo system where pieces can be attached and detached at will. HotJava aims to make sure that users never have to upgrade their browsers again just to support a new capability. When HotJava encounters a content type 
(picture, animation, and so on) or protocol (a way to transmit information) that it doesn't understand, it reconfigures itself to be able to work with that type (see Figure 3.4). HotJava reconfigures itself by first scanning the page it just received to 
find out whether the page contains anything that it cannot understand. If the page does contain something that's not understandable, HotJava then asks whether the server has the Java code to enable it to decode the content it does not understand. If the 
server does have the code, HotJava downloads it and integrates it to add this functionality.

<BR></P>

<P>When it comes to the Web (and any technology in general), predicting the future is difficult, but you can be sure of one thing: there will always be new protocols and content types. HotJava adapts itself to these changes instead of forcing users to 
repeatedly install new versions of the software.

<BR></P>

<P><B><A HREF="http://docs.rinet.ru/WebApp/03cwa04.gif">Figure 3.4. HotJava can reconfigure itself to </B><B>handle new functionality.</A></B></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I7" NAME="I7">

<FONT SIZE=3><B>Configuration</B>

<BR></FONT></A></CENTER></H4>

<P>One drawback to HotJava is that although it's very good at reconfiguring itself to respond to new and changing environments, it doesn't have a tremendous amount of configurability from the user's perspective.

<BR></P>

<P>The basics are available (see Figure 3.5); users can define proxies and default write and read directories on the hard drive. Most importantly, users can delay images or applets from loading if they are running HotJava over a slow network link. 
Unfortunately, many of the configuration options that are normally expected are missing, such as the capability to modify the appearance of the screen by changing fonts and colors and the capability to control how links are displayed.

<BR></P>

<P>This overall lack of configurability is a huge drawback compared to other browsers. Netscape Navigator, for instance, lets you configure almost every aspect of the way it works, even down to what colors to show Web links in. For HotJava to ever be 
considered a serious browser, it needs major improvements in this area.

<BR></P>

<P><B><A HREF="http://docs.rinet.ru/WebApp/03cwa05.gif">Figure 3.5. Configuring HotJava.</A></B></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I8" NAME="I8">

<FONT SIZE=3><B>Security</B>

<BR></FONT></A></CENTER></H4>

<P>One of the main issues with security in Java is what machines an applet should be able to connect to in order to transmit and receive information. Many Java applets will involve some sort of communication with other machines on the Internet. If an 
applet were allowed to communicate with any machine it wanted to, major security problems would result. 

<BR></P>

<P>Still, it is often desirable to allow an applet to communicate with other machines. For instance, if you had a stock ticker applet that displayed current stock prices, it would make sense to allow it to check back for updated prices on a regular basis.

<BR></P>

<P>HotJava allows users to specify which machines(also called hosts) the applet can communicate with. The user can select one of four options (Figure 3.6):

<BR></P>

<UL>

<LI>No Access means the applet cannot connect to any host.

<BR>

<BR></LI>

<LI>Applet Host means the applet can connect only to the machine it came from.

<BR>

<BR></LI>

<LI>Firewall means the applet can connect only to hosts outside of your firewall(if one is configured).

<BR>

<BR></LI>

<LI>Unrestricted means the applet can connect to any host it wishes.

<BR>

<BR></LI></UL>

<P>For most situations, the Applet Host option makes the most sense. However, if you have serious concerns about security, make No Access the standard choice and make exceptions when needed. For example, if you are running Java applets inside of a 
corporation, you might have concerns about a rogue applet somehow transmitting sensitive information outside of the company. To ensure that this situation doesn't happen, you might choose the No Access option so applets cannot contact any hosts at all.

<BR></P>

<P>In any circumstance, think carefully before allowing the applet Unrestricted access to any other machine on the network. This means that the entire Internet is wide open to connect to whatever the applet wishes.

<BR></P>

<P><B><A HREF="http://docs.rinet.ru/WebApp/03cwa06.gif">Figure 3.6. Setting security options in </B><B>HotJava.</A></B></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I9" NAME="I9">

<FONT SIZE=3><B>Sun's Commitment to HotJava</B>

<BR></FONT></A></CENTER></H4>

<P>HotJava was the centerpiece of Sun's promotion of Java for quite a while and until early Fall 1995 was synonymous with Java. It was generally accepted that HotJava was the platform on which the majority of applets would run. Shortly after Sun moved from 

the Alpha version to the Beta 1 version of Java, however, Netscape released a version of their browser that supported Java as well. Unfortunately, Sun did not release another version of HotJava through the entire beta test of Java, nor had it been updated 

by the time of the official 1.0 release of Java. This situation is especially unfortunate because the version of HotJava available as of this writing will not execute current applets, only those written in the older Alpha version of the language.

<BR></P>

<P>Since Netscape has taken the lead in writing browsers that are Java-capable, Sun seems to have decided to focus its energies elsewhere. Although this change in focus is understandable, it is also unfortunate as HotJava was quite promising. Hopefully, 
Sun will continue developing HotJava, but for now it seems to have been relegated to obscurity.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I10" NAME="I10">

<FONT SIZE=3><B>Availability</B>

<BR></FONT></A></CENTER></H4>

<P>HotJava is available via FTP at ftp.javasoft.com in the /pub directory. There are currently versions available for Windows 95, Windows NT, and Solaris 2.x.

<BR></P>

<H3 ALIGN="CENTER">

<CENTER><A ID="I11" NAME="I11">

<FONT SIZE=4><B>appletviewer</B>

<BR></FONT></A></CENTER></H3>

<P>The appletviewer, included in the Java Developer's Kit, is the bare-bones way to run and test applets (see Figure 3.7). It makes no pretense of trying to be a browser; all it does is run applets. That said, you may be wondering why you would ever need 
to use the appletviewer instead of Netscape Navigator or another Java-capable browser. Well, there are two circumstances in which the appletviewer is a useful tool: applet development and standards testing.

<BR></P>

<P><B><A HREF="http://docs.rinet.ru/WebApp/03cwa07.gif">Figure 3.7. The Java Developer's Kit's </B><B>appletviewer.</A></B></P>

<P>First, when developing applets, the amount of time required to start up the appletviewer is much less than the time required to launch a full-featured browser. During development, you might want to test your applet many times, and the time saved by 
using the appletviewer can be substantial.

<BR></P>

<P>Second, it always makes sense to check your applets with the appletviewer to make sure that they are compatible with standard Java. In a perfect world, all versions of Java would be identical, but as more and more companies integrate Java into their 
products, there is bound to be some deviation. Using the appletviewer ensures that you are not relying on one of those deviations.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I12" NAME="I12">

<FONT SIZE=3><B>Special Capabilities</B>

<BR></FONT></A></CENTER></H4>

<P>As mentioned before, the appletviewer is pretty basic. However, it does have one very nice feature. By selecting Tag in the Applet menu, you can get the correct &lt;APPLET&gt; tag for the running applet, even after resizing the applet (see Figure 3.8). 

This feature is invaluable when you're trying to figure out how large to make your applets. The &lt;APPLET&gt; tag is discussed in detail in Chapter 6.

<BR></P>

<P><B><A HREF="http://docs.rinet.ru/WebApp/03cwa08.gif">Figure 3.8. Getting the HTML tag for an </B><B>applet.</A></B></P>

<P>The appletviewer also can reload an applet as if it were being loaded for the first time, whereas most Java-capable browsers only allow the applet to be started and stopped.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I13" NAME="I13">

<FONT SIZE=3><B>Configuration</B>

<BR></FONT></A></CENTER></H4>

<P>You can set four properties in the appletviewer: the HTTP proxy server, the firewall proxy server, the applet's ability to connect to hosts, and the applet's ability to access other areas of Java code. To change these properties, select Properties from 

the Applet menu (see Figure 3.9).

<BR></P>

<P><B><A HREF="http://docs.rinet.ru/WebApp/03cwa09.gif">Figure 3.9. Configuring appletviewer.</A></B></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I14" NAME="I14">

<FONT SIZE=3><B>Security</B>

<BR></FONT></A></CENTER></H4>

<P>The appletviewer has a security setup very similar to HotJava, with one exception. The appletviewer omits the option that allows applets to connect only to hosts that are outside the firewall, although the appletviewer does allow configuration to work 
behind a firewall.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I15" NAME="I15">

<FONT SIZE=3><B>Availability</B>

<BR></FONT></A></CENTER></H4>

<P>The appletviewer is included with the Java Developer's Kit (see Chapter 7, &quot;The Java Developer's Kit&quot;).

<BR></P>

<H3 ALIGN="CENTER">

<CENTER><A ID="I16" NAME="I16">

<FONT SIZE=4><B>Netscape Navigator</B>

<BR></FONT></A></CENTER></H3>

<P>Although there is a bit of sorrow at Sun's apparent neglect of HotJava, the amount of credibility that Netscape's licensing of Java in August 1995 gave to Java is almost incalculable. Until then, Java had been generally seen as an interesting sideshow, 

but the integration of Java into Netscape Navigator placed it firmly in the Web mainstream.

<BR></P>

<P>Netscape Navigator 2.0 (see Figure 3.10), released in February 1996, is the first version to support Java. It went through a public beta test for several months and appears to be quite stable. It is unquestionably the most feature-rich browser currently 

available. In addition to providing support for Java, it integrates support for JavaScript (see Appendix B), a general standard for Plug-Ins (programs that extend the functionality of Navigator), and the addition of frames (which allow the main browser 
window to be split into multiple partitions).

<BR></P>

<P><B><A HREF="http://docs.rinet.ru/WebApp/03cwa10.gif">Figure 3.10. The Netscape Navigator browser.</A></B></P>

<P>Unlike HotJava, which was designed around Java from the very beginning, Java support was integrated into Navigator after it was already a solid and shipping product. Thus, Java doesn't feel quite as integral to Navigator as it does in HotJava. (For 
example, Navigator lacks HotJava's ability to automatic reconfigure itself to handle new types of content.) However, this seems to be a small price to pay to have Java alongside all of Navigator's other numerous capabilities.

<BR></P>

<P>Also, Netscape has clearly taken a major role in the ongoing development on Java. The JavaScript scripting language was originally developed by Netscape under the name LiveScript and was later renamed and jointly released by Sun and Netscape. It seems 
that the leading proponent of Java outside of Sun will be Netscape for the foreseeable future, and that Navigator should stay at the forefront of Java-capable browsers.

<BR></P>

<P>JavaScript is a simple scripting language that allows small programs to be added within a Web page (see Figure 3.11). Although similar in purpose to Java, JavaScript is meant for smaller tasks such as validating that correct information was entered into 

a form (by making sure that numbers instead of characters are entered into a form that expects numbers, for example). Eventually, JavaScript will be able to directly control Java applets and make them work together, but this capability is not available in 

version 2.0 of Navigator.

<BR></P>

<P><B><A HREF="http://docs.rinet.ru/WebApp/03cwa11.gif">Figure 3.11. A JavaScript program.</A></B></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I17" NAME="I17">

<FONT SIZE=3><B>Special Capabilities</B>

<BR></FONT></A></CENTER></H4>

<P>Navigator attempts to seamlessly add basic support for Java applets into Web pages and does an admirable job. While applets are loading, a light gray box indicates where the applet will appear, and a report of the applets starting and stopping appears 
in the status bar (see Figure 3.12).

<BR></P>

<P><B><A HREF="http://docs.rinet.ru/WebApp/03cwa12.gif">Figure 3.12. Netscape loading an applet.</A></B></P>

<P>If you want to see any information that the applet may be sending to the Java Console (things like debugging data, information on the current state of the applet, and so on), choose the Show Java Console command under the Options menu. This command 
displays a window that shows any console output (see Figure 3.13). The Java Console allows programs to output simple text for debugging information. This capability is important because applets are by their nature graphic and it would be difficult to relay 

this information any other way.

<BR></P>

<P><B><A HREF="http://docs.rinet.ru/WebApp/03cwa13.gif">Figure 3.13. Netscape's Java Console.</A></B></P>

<P>Although Navigator does not include many of the automatic integration features of HotJava, it does have support for most current protocols, and version 2.0 has added support for electronic mail and a much improved Usenet newsreader. With the addition of 

all these features, the ability of a browser to reconfigure itself seems less important. Moreover, Netscape has conditioned users to upgrade their browser to the new version on a regular basis anyway, to the point where many people see it as a normal and 
expected occurrence.

<BR></P>

<P>Netscape did not attempt to add many additional special Java-related capabilities to Navigator, and in many ways this a good thing. Java is seamlessly integrated into Navigator&#151;you don't even know it is there until an applet appears.

<BR></P>

<P>However, one new capability that has been announced is enabling JavaScript to be able to use Java applets. Because JavaScript is much simpler than Java, this capability will let people who do not have the time to learn Java use applets that have already 

been written by scripting them. For instance, a JavaScript script could use a Java applet that lets you pick a style of a car and then give the price of the car. This capability would be advantageous because learning to program Java is nontrivial, whereas 

JavaScript has been designed to be programmed by the end user. Although not available in version 2.0, the capability to script applets has been announced for the next release of Navigator.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I18" NAME="I18">

<FONT SIZE=3><B>Imposing New Standards</B>

<BR></FONT></A></CENTER></H4>

<P>Even before Netscape adopted Java, it contributed a great deal to the advancement of the World Wide Web. Netscape has been on the leading edge of adding new features to its browser and has contributed extensions to HTML. For instance, Netscape was 
responsible for bringing both tables and frames to the Web, which are two of the most appreciated additions to HTML. Unfortunately, there is also a growing sense that Netscape feels free to do things in a proprietary manner in order to make its browser 
more attractive to users. This strategy has worked well for Netscape, but there is always the danger that it will go too far.

<BR></P>

<P>Up to this point, Netscape has remained pretty faithful to the Java standard without adding functionality that applets can access only on the Netscape browser. If this fact changes in the future, you may see Java applets that have messages next to them 

stating, &quot;Works best with Netscape Navigator,&quot; as seen in many current Web pages. For better or for worse, Netscape Navigator is the standard on the Web and is the default choice for anyone that wants to browse the Web.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I19" NAME="I19">

<FONT SIZE=3><B>Configuration</B>

<BR></FONT></A></CENTER></H4>

<P>Netscape Navigator is easily the most configurable of any current browser; it allows users to configure almost every aspect of the browser. For example, users can fine-tune how pages are displayed, including the language to display them in. Four 
distinct areas are customizable in Netscape Navigator through their respective menu items:

<BR></P>

<UL>

<LI>The General Preferences dialog box (see Figure 3.14) lets the user choose how pages will look (by choosing fonts, colors, how images are displayed, and so on), what foreign languages the browser should recognize, and what external programs should be 
set up as helper applications (for new sound formats, graphics formats, and so on).

<BR>

<BR></LI></UL>

<P><B><A HREF="http://docs.rinet.ru/WebApp/03cwa14.gif">Figure 3.14. Netscape General Preferences dialog </B><B>box.</A></B></P>

<UL>

<LI>The Mail &amp; News Preferences dialog box (see Figure 3.15) allows the user to choose how the browser will interact with both electronic mail and Usenet news. Most importantly, the identity of the user can be configured, and the servers to use for 
electronic mail and news can be set up.

<BR>

<BR></LI></UL>

<P><B><A HREF="http://docs.rinet.ru/WebApp/03cwa15.gif">Figure 3.15. Netscape's Mail &amp; News Preferences </B><B>dialog box.</A></B></P>

<UL>

<LI>A user can configure three main options through the Network Preferences dialog box (see Figure 3.16). First, the user can set the amount of cache. A <I>cache</I> is used to store images and text that have already been loaded once to keep from having to 

load them again. Second, the user can configure the maximum number of network connections. The more connections that are set up, the more images and text can be brought in at once, but also the slower they come in. Finally, the user can configure proxies. 

A <I>proxy</I> allows network connections through a firewall.

<BR>

<BR></LI></UL>

<P><B><A HREF="http://docs.rinet.ru/WebApp/03cwa16.gif">Figure 3.16. Netscape's Network Preferences dialog </B><B>box.</A></B></P>

<UL>

<LI>The Security Preferences dialog box (see Figure 3.17) is mainly concerned with whether to show alerts when loading a document that could be insecure and setting up site certificate(a <I>site </I><I>certificate</I> is a way to verify that the server you 

are talking to is who it says it is). A user also can enable or disable Java in this dialog box. This feature is covered in the next section.

<BR>

<BR></LI></UL>

<P><B><A HREF="http://docs.rinet.ru/WebApp/03cwa17.gif">Figure 3.17. Netscape's Security Preferences dialog </B><B>box.</A></B></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I20" NAME="I20">

<FONT SIZE=3><B>Security</B>

<BR></FONT></A></CENTER></H4>

<P>Netscape has prided itself on security for quite a while. When Netscape announced Java would be integrated into Navigator, there was a great deal of concern that Java would cause security problems. Netscape has gone to great pains to make sure that 
doesn't happen by limiting what applets are allowed to do.

<BR></P>

<P>Unlike HotJava, where the user can choose a variety of Java applet security modes, Navigator 2.0 only has one option: disable or enable Java (see Figure 3.17). Note that there is no way to set what machines an applet is allowed to communicate with. 
Navigator allows an applet to communicate only with the server that the applet was downloaded from (the HTML server that provided the page on which the applet resides).

<BR></P>

<P>Unlike HotJava, you cannot setup Netscape Navigator to only connect to machines outside your firewall. More importantly, you cannot configure Navigator to not allow applets to communicate with other machines at all. With Navigator, Java is an all or 
nothing proposition. This is expected to change in later versions of Navigator, but Netscape has not outlined how exactly this will change.

<BR></P>

<P>Netscape Navigator has another level of built-in security called Secure Sockets Layer(or SSL). SSL is a way for Web sites to ensure that the communication that has transpired between the Web site and your machine has not been tampered with. Netscape has 

been a leader in this area, mainly due to the desire to facilitate electronic commerce.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I21" NAME="I21">

<FONT SIZE=3><B>Availability</B>

<BR></FONT></A></CENTER></H4>

<P>Netscape Navigator is available via FTP at ftp.netscape.com in the /pub/2.0 directory (the most current version can always be found in /pub/netscape). Java-capable versions are available for the following platforms:

<BR></P>

<TABLE>

<TR>

<TD>

<TD>

<P>Windows 95</P>

<TR>

<TD>

<TD>

<P>Windows NT</P>

<TR>

<TD>

<TD>

<P>Solaris 2</P>

<TR>

<TD>

<TD>

<P>Dec Alpha OSF2</P>

<TR>

<TD>

<TD>

<P>HP PA-Risc HPUX</P>

<TR>

<TD>

<TD>

<P>Linux</P>

<TR>

<TD>

<TD>

<P>386BSD</P>

<TR>

<TD>

<TD>

<P>SGI Irix</P>

<TR>

<TD>

<TD>

<P>IBM AIX</P>

<TR>

<TD>

<TD>

<P>SunOS 4</P></TABLE>

<BR>

<P>Versions without Java are currently available for Windows 3.1 and Apple Macintosh, but Java-capable versions for these products should be available in the near future.

<BR></P>

<P><B>Summary</B>

<BR></P>

<P>This chapter discussed all the currently available ways to view Java applets. HotJava holds a great deal of promise, but it seems as though Sun has lost interest in it. The appletviewer  is really only useful for development in Java. Netscape Navigator 

currently holds the distinction of being the most useful Java-enabled Web browser. Its high level of configurability and numerous features make it the obvious choice.

<BR></P>

<P>This status could change, however, in the not too distant future. Microsoft has recently challenged Netscape's dominance of the Web browser market with the release of its Internet Explorer. In December 1995, Microsoft announced an intent to license 
Java, fueling speculation that they would soon be incorporating it into their browser. In addition, Spyglass, a company that provides Web browser technology for over 45 companies who embed the technology in more than 120 products, has licensed Java. These 

developments should make the Java-enabled Web browser market very interesting for a long time to come.

<BR></P>

<P><A HREF="cwa02fi.htm"><IMG SRC="http://docs.rinet.ru/WebApp/bluprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/WebApp/blutoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="cwa04fi.htm"><IMG SRC="http://docs.rinet.ru/WebApp/blunext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


</P></BODY></HTML>

