<HTML>

<HEAD>

<TITLE>Creating Web Applets with Java cwa10fi.htm</TITLE>

<LINK REL="ToC" HREF="index.htm">

<LINK REL="Next" HREF="cwa11fi.htm">

<LINK REL="Previous" HREF="cwa09fi.htm"></HEAD>

<BODY TEXT="#000000" LINK="#0000FF" VLINK="#FF0000"  bgcolor=white >









<P><A HREF="cwa09fi.htm"><IMG SRC="http://docs.rinet.ru/WebApp/bluprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/WebApp/blutoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="cwa11fi.htm"><IMG SRC="http://docs.rinet.ru/WebApp/blunext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


</P><UL>

<LI>

<A HREF="#I1">&#151; 10 &#151;Applet Structure and Design</A></LI>

<UL>

<UL>

<LI>

<A HREF="#I3">The Applet Package</A></LI>

<UL>

<LI>

<A HREF="#I4">getDocumentBase()</A></LI>

<LI>

<A HREF="#I5">getAudioClip(URL, String)</A></LI>

<LI>

<A HREF="#I6">getImage(URL, String)</A></LI></UL>

<LI>

<A HREF="#I7">Applet Lifecycles</A></LI>

<UL>

<LI>

<A HREF="#I8">init()</A></LI>

<LI>

<A HREF="#I9">start()</A></LI>

<LI>

<A HREF="#I10">stop()</A></LI>

<LI>

<A HREF="#I11">destroy()</A></LI></UL>

<LI>

<A HREF="#I12">Building an Applet</A></LI>

<UL>

<LI>

<A HREF="#I13">Parameters</A></LI>

<LI>

<A HREF="#I14">Finishing the Applet</A></LI>

<LI>

<A HREF="#I15">Putting It All Together</A></LI></UL>

<LI>

<A HREF="#I16">Summary</A></LI></UL></UL></UL>



<H1 ALIGN="CENTER">

<CENTER><A ID="I1" NAME="I1">

<BR>

<FONT SIZE=5><A ID="I2" NAME="I2"></A><B>&#151; 10 &#151;</B>

<BR><B>Applet Structure and Design</B>

<BR></FONT></A></CENTER></H1>

<P>Chapter 9 presented an overview of object-oriented programming and discussed how it applied to Java. The applet is the best example of how object-oriented programming and Java intermix. In terms of functionality, you know that an applet is basically a 
small, focused application. But what is an applet in terms of programming? An applet is an object class: class java.applet.Applet.

<BR></P>

<P>The idea behind applets being objects is really quite simple. An applet as an object inherits the properties of its parent object, the applet template. If you look at the class hierarchy for Java ( see Figure 10.1), you can see how inheritance works to 

your advantage when programming applets. OOP becomes a practical implementation rather than just theory.

<BR></P>

<P>

<BR><B><A HREF="http://docs.rinet.ru/WebApp/10cwa01.gif">Figure 10.1. The Java class hierarchy.</A></B>

<BR></P>

<P>Take a look at the first line in the HelloWorld applet from Chapter 7:

<BR></P>

<PRE>public class HelloWorld extends java.applet.Applet {</PRE>

<P>This line establishes the HelloWorld applet. Notice, however, that after the class HelloWorld is declared, the line says extends java.applet.Applet. This phrase is how you specify that your applet is based on the original applet class and therefore will 

receive all the functionality of that class, which is quite a bit.

<BR></P>

<P>This chapter discusses the practical elements of building an applet. This chapter also discusses some of the more advanced programming topics, such as the methods and classes that make up the Java language. By the end of the chapter, you should have a 
better understanding of how applets are constructed and should finish your second applet, the Speaker applet.

<BR></P>

<H3 ALIGN="CENTER">

<CENTER><A ID="I3" NAME="I3">

<FONT SIZE=4><B>The Applet Package</B>

<BR></FONT></A></CENTER></H3>

<P>As you begin to program with Java, you will find that the language has an structure designed around the idea of objects. In keeping with this design strategy, many methods that perform similar functions have been grouped together in packages. For 
example, the Abstract Window Toolkit as a package of methods that are useful for drawing images on the screen, working with windows, and building user interfaces. The Applet Package is a package that is specifically designed for working with applets.

<BR></P>

<P>The Applet Package contains a number of methods that are designed to be used in the construction of applets and in the special circumstances that arise with applets. For example, applets need to be able to load images and audio clips from a server, so 
the methods getImage() and getAudioClip() are part of the Applet Package.

<BR></P>

<P>The Applet Package contains a number of useful methods. As you begin to program your own applets, you will use a number of them to control the applet and its characteristics. Table 10.1 is a summary of the most useful methods in the Applet Package. 
Remember that you can find the full documentation for the Applet Package on the Javasoft Web site at<A HREF="http://www.javasoft.com/">http://www.javasoft.com</A>.

<BR></P>

<UL>

<LH><B>Table 10.1. A summary of methods in the Applet Package.</B>

<BR></LH></UL>

<TABLE BORDER>

<TR>

<TD>

<PRE><I>Method</I>

<BR></PRE>

<TD>

<PRE><I>Function</I>

<BR></PRE>

<TR>

<TD>

<P>public String getAppletInfo()</P>

<TD>

<P>Returns information about the applet, such as author</P>

<TR>

<TD>

<P>public URL getDocumentBase()</P>

<TD>

<P>Returns the URL of the HTML document</P>

<TR>

<TD>

<P>public String getParameter(String name)</P>

<TD>

<P>Returns the parameters for an applet</P>

<TR>

<TD>

<P>public String [][] getParameterInfo()</P>

<TD>

<P>Returns a summary of what the parameters control</P>

<TR>

<TD>

<P>public AudioClip getAudioClip(URL)</P>

<TD>

<P>Used to load an audio clip</P>

<TR>

<TD>

<P>public Image getImage(URL)</P>

<TD>

<P>Used to load an image file</P>

<TR>

<TD>

<P>public void play(URL)</P>

<TD>

<P>Used to play a previously loaded audio clip</P>

<TR>

<TD>

<P>public boolean isActive()</P>

<TD>

<P>Lets you know whether an applet is active</P>

<TR>

<TD>

<P>public void resize(int, int)</P>

<TD>

<P>Used to resize the applet</P>

<TR>

<TD>

<P>public void showStatus(String msg)</P>

<TD>

<P>Displays a status string in the applet's browser</P>

<TR>

<TD>

<P>public void init()</P>

<TD>

<P>Initializes the applet</P>

<TR>

<TD>

<P>public void start()</P>

<TD>

<P>Starts the applet when it's finished initializing</P>

<TR>

<TD>

<P>public void stop()</P>

<TD>

<P>Stops the applet when you leave the applet's page</P>

<TR>

<TD>

<P>public void destroy()</P>

<TD>

<P>Destroys the applet when you leave the browser</P></TABLE>

<P>Some of the methods in the Applet Package seem pretty self- explanatory, such as getImage(URL). The getImage() method does just what you would think it would do; it enables you to get an image from the applet's server. The following sections describe a 

few of the methods in the Applet Package and how they are used.

<BR></P>

<HR ALIGN=CENTER>

<NOTE>

<IMG SRC="http://docs.rinet.ru/WebApp/more.gif" WIDTH = 35 HEIGHT = 35><B>Reading the API Documentation</B>

<BR>

<BR>As you begin to use the methods in any of the Java packages, you will find that the API documentation is invaluable for showing how those methods are used and what they do. The API does a fair job of explaining the methods, but it is a document written 

for programmers, so making sense of the API documentation takes some work.

<BR>

<BR>You can find the API documentation at the following URL: 

<BR>

<BR><A HREF="http://www.javasoft.com/JDK-1.0/api/packages.html">http://www.javasoft.com/JDK-1.0/api/packages.html</A>

<BR>

<BR>This documentation is a general index to all the packages that are part of the Application Programming Interface. You will find a listing of all the packages that contain Java methods, and you can go to specific package documentation. Don't worry about 

all the packages that you see listed. In general, the ones you will use most often are described in the following list: 

<BR></NOTE>

<HR ALIGN=CENTER>

<UL>

<LI>The java.lang package contains all the essentials of the Java language. It has the definitions for all the data types, security features, and threads that you will need in your applets. It is the foundation of the language. Fortunately, because you 
can't code anything without this package, it is automatically imported into all of your applets.

<BR>

<BR></LI>

<LI>The java.net package contains some useful methods for creating applets that communicate back to their servers. It is very useful for creating complex applets that need to use network services, but it also contains the very important URL definition. 
Without URL, your applets would not be able to load anything off of the server, which means that you could not use images or sound files. So although you might not use the java.net package to the fullest, you will almost always have the following line in 
your applets:

<BR>

<BR>import java.net.URL;

<BR>

<BR></LI>

<LI>The java.applet package contains all the methods that are useful in creating applets. The specifics of this package are covered in this chapter.

<BR>

<BR></LI>

<LI>The java.awt package, otherwise known as the Abstract Window Toolkit, contains all the graphics methods, all the windowing methods, and the components needed to create user interfaces. The AWT is one of the most complex packages and is the subject of 
Chapter 11.

<BR>

<BR></LI></UL>

<HR ALIGN=CENTER>

<NOTE>

<IMG SRC="http://docs.rinet.ru/WebApp/more.gif" WIDTH = 35 HEIGHT = 35>When you look up methods in the API documentation, they are listed in the following formats:

<BR>

<BR>getImage(URL, String)

<BR>

<BR>or

<BR>

<BR>public Image getImage(URL) 

<BR>

<BR>The name of the method is getImage(), which is also the text you would place in your code to use this method. The terms inside the parentheses are the arguments accepted by the method. The <I>arguments</I> are the information the method needs to 
perform its task. In this case, getImage() requires both a URL and a string in order to work properly. The URL gives the location of the image files on the server, and the string is the name of the image file. In the second listing example, the words 
public Image indicate the type of information that is returned by this method. In the case of getImage(), the returned information is a public class, Image. You might also notice something like the following:

<BR>

<BR>public void init()

<BR>

<BR>In this case, the return type for this method is void, which means that the method returns no data at all, it simply performs a task.

<BR>

<BR>A method that doesn't contain anything inside the parentheses, such as

<BR>

<BR>getDocumentBase() 

<BR>

<BR>does not require any arguments, but still returns a value. The getDocumentBase() method, for example, returns the URL of the current applet.

<BR>

<BR>The API is the best authority on what methods do and how they are used. So if you have questions about a method, the first place you should look is the API. Now that you can make a little better sense of how information there is organized, you should 
be able to use the API to your advantage.

<BR></NOTE>

<HR ALIGN=CENTER>

<H4 ALIGN="CENTER">

<CENTER><A ID="I4" NAME="I4">

<FONT SIZE=3><B>getDocumentBase()</B>

<BR></FONT></A></CENTER></H4>

<P>Although the getDocumentBase() method simply returns the URL of the document your applet is embedded in, this URL comes in very handy with other methods. For example, the methods discussed in the next two sections take a URL as one of their arguments. 
Instead of hard coding a URL, you can use the getDocumentBase() method to pass the URL to any methods that require a URL, such as getAudioClip() and getImage(), as in the following example:

<BR></P>

<PRE>graphic = getParameter(&quot;graphic&quot;);

clip = getParameter(&quot;clip&quot;);

image = getImage(getDocumentBase(), graphic);

sound = getAudioClip(getDocumentBase(), clip);</PRE>

<H4 ALIGN="CENTER">

<CENTER><A ID="I5" NAME="I5">

<FONT SIZE=3><B>getAudioClip(</B><B><I>URL</I></B><B>, </B><B><I>String</I></B><B>)</B>

<BR></FONT></A></CENTER></H4>

<P>The getAudioClip() method accepts a URL, which specifies the location of sound files on the server, and a string to represent the name of the file. Keep in mind that you can use the getDocumentBase() method to provide the URL, so if you move your 
applet, you don't have to recode the getAudioClip() method. If you wanted to load an audio file called soundfile.au, you could use the following code:

<BR></P>

<PRE>AudioClip clip;

clip = getAudioClip(getDocumentBase(), &quot;soundfile.au&quot;);</PRE>

<P>This code just defines a variable called clip for the audio file and then makes clip equal to the result of the getAudioClip() method. The getAudioClip() method uses the getDocumentBase() method to supply the URL, and then you give the getAudioClip() 
method the name of the sound file directly. You could also use a variable for the name of the sound file, which would make the filename a little more flexible.

<BR></P>

<P>Audio methods are contained with the Applet Package within the AudioClip interface. An <I>interface</I> is a specification the ensures that certain methods will be defined for a class. For example, the AudioClip interface ensures that the 
getAudioClip(), play(), and loop() methods will be defined. Table 10.2 summarizes the available audio methods.

<BR></P>

<UL>

<LH><B>Table 10.2. Audio methods.</B>

<BR></LH></UL>

<TABLE BORDER>

<TR>

<TD>

<PRE><I>Method</I>

<BR></PRE>

<TD>

<PRE><I>Function</I>

<BR></PRE>

<TR>

<TD>

<P>getAudioClip()</P>

<TD>

<P>Loads an audio file from the server</P>

<TR>

<TD>

<P>play()</P>

<TD>

<P>Plays the audio file once through</P>

<TR>

<TD>

<P>loop()</P>

<TD>

<P>Plays the audio file in a continuous loop</P>

<TR>

<TD>

<P>stop()</P>

<TD>

<P>Stops a play() or loop() method that is in progress</P></TABLE>

<H4 ALIGN="CENTER">

<CENTER><A ID="I6" NAME="I6">

<FONT SIZE=3><B>getImage(</B><B><I>URL</I></B><B>, </B><B><I>String</I></B><B>)</B>

<BR></FONT></A></CENTER></H4>

<P>The getImage() method functions identically to getAudioClip(), but it enables you to retrieve an image file rather than a sound file. The image files can be in GIF or JPEG format, and you must first declare an Image variable, with something like the 
following code:

<BR></P>

<PRE>Image picture;</PRE>

<P>The preceding code defines an Image variable called picture that you can then load an image file into. As with any method that takes a URL, you can use getDocumentBase() to pass the URL to make your applet more flexible. Because of the nature of 
image-processing methods, all the image methods are in the AWT except for getImage().

<BR></P>

<H3 ALIGN="CENTER">

<CENTER><A ID="I7" NAME="I7">

<FONT SIZE=4><B>Applet Lifecycles</B>

<BR></FONT></A></CENTER></H3>

<P>The Applet Package contains a few methods that have some very special functions. These methods, called the lifecycle methods, control how an applet behaves during the course of execution.

<BR></P>

<P>When you load a Web page that contains an applet, the applet goes through several stages during the time you see it on-screen. During each of these stages, the applet performs very different tasks, although most of these tasks are invisible to the 
end-user. These stages are initialization, running, and exiting.

<BR></P>

<P>During the initialization stage, the applet is loading the images, sound clips, and other resources that it needs to run. Sometimes the applet displays messages such as Loading Images. . .to inform you of what might be going on behind the scenes and why 

you are waiting. When the applet has all the resources it needs to run, the initialization stage is over, and the applet is ready to run.

<BR></P>

<P>When the applet is running, it is performing whatever tasks it has been designed to perform. Conversely, when an applet is not running, it is just sitting idle, waiting for a user to re-enter the Web page. For example, a TickerTape applet that scrolls 
text across the screen would load the text during the initialization stage, and then start scrolling the text when the applet began to run. Because applets start and stop when you enter and leave a Web page, running consists of two distinct states, 
starting and stopping. These states could really be thought of as two separate stages, and in fact, each has a corresponding lifecycle method. You can control what an applet does during both starting and stopping.

<BR></P>

<P>Because applets are loaded into your machine's memory and use CPU time, you wouldn't want the applet to remain in memory once you've left the Web browser. During the final exiting stage, the Java Virtual Machine completes some garbage collecting 
functions, making sure that the resources the applet used are removed from memory and that the applet is completely destroyed when you quit.

<BR></P>

<P>Breaking up applets into these stages has some very distinct advantages. For example, if you were writing an animator that used a large number of images, you would want to make sure the images were loaded before the applet started running. Otherwise, 
your animation might seem jerky or have frames missing. Manipulating these stages can come in handy, and fortunately the Applet Package contains methods to do just that.

<BR></P>

<P>The Applet Package has four lifecycle methods, each of which corresponds directly to the stages of an applet. Figure 10.2 shows how these cycles relate to each other and an applet.

<BR></P>

<P><B><A HREF="http://docs.rinet.ru/WebApp/10cwa02.gif">Figure 10.2. The applet lifecycle methods.</A></B></P>

<P>Each of these methods is automatically called as the applet loads, runs, and exits, so you might not always use each of these methods in your own applets. Also, you only need to use these methods if you need something specific to occur during a 
particular stage, like stopping a sound when you leave the page. Often, you will use one or two lifecycle methods, but not all of them. The decision to use a lifecycle method depends largely on what you are trying to do with your applet. You will find that 

init(), start(), and stop() are all used fairly commonly because these stages each have practical implications for applets. You want to make sure images and sounds load first, you want to make sure sounds stop playing, and so on. Evaluating the need to use 

one of these methods is a part of the planning process when writing your applets.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I8" NAME="I8">

<FONT SIZE=3><B>init()</B>

<BR></FONT></A></CENTER></H4>

<P>The first method called by an applet once it has been loaded by the browser is init(). Because the applet is not running when init() is called, this method is an excellent place to take care of any groundwork that must be laid for the applet to carry 
out its goals. Some good tasks to take care of during init() include loading images or establishing the user interface. Take, for example, an applet that plays an audio clip at the click of a button. In such an applet, you would need to load the audio clip 

and set up the button before the applet began to run. You would use the following code to do these tasks:

<BR></P>

<PRE>public void init() {

    clip = getAudioClip(getDocumentBase(), soundfile.au);

    setLayout(new FlowLayout());

    play = new Button(&quot;Play Clip&quot;);

    add(play);

    } </PRE>

<P>This code defines a new audio clip, called clip, and uses another method from the Applet Package, getAudioClip(), to load the audio clip from the server. It then sets up a Play button using some methods for user interface layout in the Abstract Window 
Toolkit. (Chapter 11 discusses the AWT in more detail.). Now when the applet is loaded into the browser, it establishes the Play button and downloads the audio clip to prepare the applet to play the clip.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I9" NAME="I9">

<FONT SIZE=3><B>start()</B>

<BR></FONT></A></CENTER></H4>

<P>After the applet has been loaded into the browser and is ready to begin, the start() method is called automatically. The start() method generally contains the meat of your applets. After all, this method is what you want the applet to do. In most 
applets, you will define the init() and start() methods. For example, in an applet that plays an audio clip defined as clip, you might have a start() method that looks like the following:

<BR></P>

<PRE>public void start() {

     

        clip.play();

}</PRE>

<P>Quite simply, this code tells the applet to play the clip sound as soon as it is loaded. You can put any kind of code in the start() method; you could draw images, play sounds, and accept user input, essentially any of the functions you might expect a 
program to perform.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I10" NAME="I10">

<FONT SIZE=3><B>stop()</B>

<BR></FONT></A></CENTER></H4>

<P>The stop() method is the counterpart to the start() method. It is called automatically when an applet should stop execution, when you leave an applet's Web page for example. If you use the start() method to start some functions that need to be stopped 
before the user moves on, you stop them with the stop() method. For example, if your applet plays a sound file, you would want to make sure the sound file didn't keep playing when someone left the page. You can use the stop() method to stop a sound file 
that is playing in a loop or to stop any threads that might be executing when the user moves on. A <I>thread</I> is another piece of code outside of the main program that is executed simultaneously with the main program. You can think of threads as an 
applet within an applet. The following example shows how you could use the stop() method to suspend a playing audio clip:

<BR></P>

<PRE>public void stop() {

        clip.stop();

}</PRE>

<P>You don't necessarily have to redefine the stop() method in all your applets. If an applet is simple enough, you could let the stop() method automatically terminate any methods that might be running. But if you have any sounds playing, or especially if 

you have any threads running, it is a good idea to invoke the stop() method on your own to keep your applet under control. For example, if you don't stop an active thread, it may interfere with other applets or cause other strange problems with your 
machine, such as poor performance.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I11" NAME="I11">

<FONT SIZE=3><B>destroy()</B>

<BR></FONT></A></CENTER></H4>

<P>The destroy() method is essentially the death of an applet. When you leave your browser, this method is called automatically to do any cleanup that might be necessary. Just as the name would imply, the destroy() method eliminates any trace of your 
applet. It purges any memory that was used by your applet, and it stops any running threads or methods. Generally speaking, you do not have to do anything to use the destroy() method, a base destroy() method is predefined and automatically called, so all 
you have to do is sit back and let it do the dirty work.

<BR></P>

<H3 ALIGN="CENTER">

<CENTER><A ID="I12" NAME="I12">

<FONT SIZE=4><B>Building an Applet</B>

<BR></FONT></A></CENTER></H3>

<P>So are you ready to build an applet? You now have all the tools you need to build an applet that you can add to your home pages. This section uses a simple applet, the Speaker applet, to demonstrate the structure of applets.

<BR></P>

<P>The Speaker applet is a very straightforward applet that enables you to place an image on the screen and play a sound file at the same time (see Figure 10.3). This applet is a good way to see how the various components from various packages fit together 

and how a complete applet is constructed.

<BR></P>

<P><B><A HREF="http://docs.rinet.ru/WebApp/10cwa03.gif">Figure 10.3. The Speaker applet displays an image </B><B>and plays a sound file.</A></B></P>

<P>An applet is a compiled program based on the source code that you run through the compiler, as discussed in Chapter 7. If you remember, your applet code has to be called <I>something</I>.java in order for it to be compiled correctly, and the resulting 
file is called <I>something</I>.class. These extensions help you distinguish between code and compiled applets, but they also contribute to class structure. This naming system is yet another result of Java's object-oriented nature. Every applet can 
function as an object and therefore needs to be structured so that it can be used as an object. That is why a compiled applet has a name in the form of <I>something</I>.class. The .class extension lets the Java compiler know that the information contained 

in that file is a class definition. That way, if you wanted to include your applet within another applet, you could use it just as you would any other class in the Java language because the compiler would recognize it. Although this system does put some 
minor restrictions on naming, it is to the benefit of the entire language.

<BR></P>

<P>Take look at the first section of code in the Speaker applet:

<BR></P>

<PRE>/*  Speaker

    This Applet displays a gif or jpeg while playing a sound (.au) file.

*/

import java.awt.*;

import java.applet.*;

import java.lang.*;

import java.net.URL;

public class Speaker extends java.applet.Applet {

}</PRE>

<P>The code starts off with a comment that provides a name and a brief description of what the applet does. It's always a good idea to put some comments in your code so that if you pass it on to others, they can understand it better, or if you need to come 

back to the code at a later date, you have a refresher.

<BR></P>

<P>Next, notice a series of statements in the form of import java.awt.*; These import statements enables you to use methods from various packages within your applet. Remember that different methods in Java are broken up into packages, and you need to tell 

the compiler what packages you will be using. By using import statements, you can use the entire package with a statement like import java.awt.*; or a single method from a package, such as import java.net.URL;. Generally, if you are only going to use one 
method from a package, as is the case with URL in the Speaker applet, you can name the method explicitly. However, if you are going to use many methods, you can use the wildcard * to specify the whole package, so you don't have to keep a long list of 
methods at the beginning of your code.

<BR></P>

<P>After instructing the compiler of all the packages you want to include in your applet, you need to set up the applet class itself with the following line:

<BR></P>

<PRE>public class Speaker extends java.applet.Applet {

}</PRE>

<P>This line states that you want a public class called Speaker that is going to be an extension of the Applet class. Because you've chosen the name Speaker for your class in this definition, the file that you store this applet in will have to be called 
Speaker.java. Now the naming conventions become a little clearer; you have an applet, class Speaker, in a file called Speaker.java. When it is compiled, the applet will be called Speaker.class. This name allows the compiler to keep track of the new applet 

as if it were just another class, and find everything by its name. If you try to change the names around, you will probably run into compiling problems. That's the basic framework for your first applet. Now everything that you want the applet to do will 
need to be added in between the two brackets {}.

<BR></P>

<P>You need to declare the variables that you will need to use in this applet. For this applet, you need three types of: Image, AudioClip, and String. Image and AudioClip are very straightforward; these types are the image you display and the audio clip 
you play. The Strings will be used so that you can set up parameters to allow the user of your applet to change the image and sound file with parameters, without editing the code:

<BR></P>

<PRE>public class Speaker extends java.applet.Applet {

    Image image;

    AudioClip sound;

    String graphic, clip;

}</PRE>

<P>So now you've told the compiler that you need an Image type called image, an AudioClip type called sound, and two Strings, graphic and clip, which you will use for your parameters.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I13" NAME="I13">

<FONT SIZE=3><B>Parameters</B>

<BR></FONT></A></CENTER></H4>

<P>Chapter 6 talks about the HTML &lt;PARAM&gt; tag that allows the user to pass parameters to an applet with the HTML file. Now you are building an applet that could use parameters to add flexibility. Because this applet shows an image and plays a sound 
file, you could assume that users would want to be able to change the image and the sound file. Otherwise, the applet wouldn't be useful on any pages but your own. So for this applet, you are going to allow the user to specify the graphic and clip 
parameters.

<BR></P>

<P>Applets use parameters by using some special methods to get the parameters from the HTML file, and then assigning values to the parameters based on the information the file provides. You can then use that information in your applet, say in place of an 
image file name, so that your applet is flexible. The following code establishes the parameters:

<BR></P>

<PRE>public String[][] getParameterInfo() {

    String[][] info = {

        {&quot;graphic&quot;,    &quot;string&quot;,    &quot;The image file to be displayed.&quot;},

        {&quot;clip&quot;,       &quot;string&quot;,    &quot;The sound file to be played.&quot;},

    };

return info;

}</PRE>

<P>This code is pretty standard for establishing variables. It basically establishes an array that will contain the name of each parameter, what type of parameter it is, and an information string that describes that parameter. For example, the following 
code defines a parameter that will be called clip, which is a string (the filename of the sound file) and a description of what that parameter controls:

<BR></P>

<PRE>{&quot;clip&quot;,    &quot;string&quot;,    &quot;The sound file to be played.&quot;},</PRE>

<P>The name of this parameter is the same as the variable clip you declared as a string earlier. Keep in mind that you can use any valid data type here, such as int or float. For example, you could have used the following code to establish a volume 
parameter that would be an integer number:

<BR></P>

<PRE>{&quot;volume&quot;,    &quot;int&quot;,    &quot;The volume of the sound from 1-10&quot;},</PRE>

<P>Parameters can be as flexible and as detailed as you want, but remember that each parameter should perform a specific function in your applet to make it easier to use, not harder.

<BR></P>

<P>So now that you've established these parameters, look at how they are used in the applet code:

<BR></P>

<PRE>public void init() {

    graphic = getParameter(&quot;graphic&quot;);

    clip = getParameter(&quot;clip&quot;);

    image = getImage(getDocumentBase(), graphic);

    sound = getAudioClip(getDocumentBase(), clip);

}</PRE>

<P>You can use the init() method to put your parameters into action before your applet fires up. This amounts to a two-step process:

<BR></P>

<OL>

<LI>Read the parameter information into your variable.

<BR>

<BR></LI>

<LI>Use the variable to get your support files.

<BR>

<BR></LI></OL>

<P>In the code, you use the getParameter() function to get the value of the parameter from the HTML file:

<BR></P>

<PRE>graphic = getParameter(&quot;graphic&quot;);

clip = getParameter(&quot;clip&quot;);</PRE>

<P>Now the graphic variable is the same as the graphic parameter string. This might seem a bit confusing, but what you are doing is using the getParameter() function to read the HTML file and look for a tag in the following form:

<BR></P>

<PRE>&lt;param name=graphic value=&quot;image.gif&quot;&gt; </PRE>

<P>The getParameter() function then returns the filename image.gif to your applet, where it is assigned to the graphic variable. Now if you use the graphic variable anywhere in your program, it will be as if you were using image.gif.

<BR></P>

<P>So now you have the filenames you need for the image and sound. Now you need to load the image and sound into memory so you can display and play them. Assign the information to your image and sound variables. Keep in mind that up to this point you've 
only been dealing with the String data type. That's because you haven't been manipulating any files, only the filenames. Now you are ready to use the Image and AudioClip data types to read in the actual files themselves, and then use them in your applet.

<BR></P>

<P>The following lines use two methods from the Applet Package, getImage() and getAudioClip(), to read the files into memory:

<BR></P>

<PRE>image = getImage(getDocumentBase(), graphic);

sound = getAudioClip(getDocumentBase(), clip);</PRE>

<P>If you recall these methods from before, you need to give them a URL for the file and the name of the file. So when you call these methods, substitute getDocumentBase() for the URL and your parameter variables for the filename. Now you have your files 
in memory and are ready to finish off your applet!

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I14" NAME="I14">

<FONT SIZE=3><B>Finishing the Applet</B>

<BR></FONT></A></CENTER></H4>

<P>Most of the work in this applet is in the preparation. The code used to complete the applet is pretty small, but it does quite a bit. This code can be broken down into three sections. First, you need to refine the method for painting the applet 
on-screen. Then you need to display the image and play the sound. And last, you need to make sure your sound stops if the person leaves your page.

<BR></P>

<P>To get the image onto the screen, you need to redefine the paint() method that Java provides for you with the following code:

<BR></P>

<PRE>public void paint(Graphics g) {

            g.drawImage(image, 0, 0, this);

}</PRE>

<P>All you are doing in this code is letting the compiler know that if you use the paint() method, you want it to draw your image on the screen. You start out declaring the paint() method and setting a context (Graphics g) in which this method will perform 

its task.

<BR></P>

<P>The next line of the code uses the g. before drawImage to specify what graphics context (in this case g) you specified earlier. A <I>context</I> specifies where you want these graphics methods to perform their tasks. By providing paint() with the 
graphics context g, you then need to specify that graphics methods use that context when they are called. Then you let the applet know that you want it to draw image (your image variable) at the coordinates 0,0 . The this at the end of the method specifies 

a special interface called an image observer. The <I>image </I><I>observer </I>monitors the image to make sure there aren't any special problems with the image, such as an incomplete file. The keyword this refers to <I>this</I> image observer, as opposed 
to an image observer defined elsewhere.

<BR></P>

<P>Now you are ready to finish off the applet. When the applet is ready to start, you want to draw the image on-screen and play the sound file, so you define the start() method as follows:

<BR></P>

<PRE>public void start() {

    repaint();

    sound.play();

}</PRE>

<P>The method used to display the image on-screen is a bit odd. Even though you just redefined the paint() method to draw your image on-screen instead of calling the paint() method directly, the code calls the repaint() method. The repaint() method calls 
the new paint() method, so the end result is the same. This roundabout way of doing things is largely attributed to some quirks in the Java language.

<BR></P>

<P>This example also uses the play() method, in the form of sound.play(), to play the audio file. This method is similar in function to the g.drawImage line. The sound.play() method just lets the play() method know what sound file to play, just as the g. 
lets drawImage know what graphics context to use.

<BR></P>

<P>Now that you have your start() method, which displays your image and plays an audio file, it might be a good idea to have a stop() method:

<BR></P>

<PRE>public void stop() {

    sound.stop();

}</PRE>

<P>The stop() method just makes sure that your sound file stops playing if the user should leave your page. Obviously, if a user leaves the page, the image will vanish, so you don't need to worry about stopping its display.

<BR></P>

<H4 ALIGN="CENTER">

<CENTER><A ID="I15" NAME="I15">

<FONT SIZE=3><B>Putting It All Together</B>

<BR></FONT></A></CENTER></H4>

<P>Now you have all the pieces for a completed applet. Your applet fits the following structure:

<BR></P>

<OL>

<LI>Comment information, such as author and revision dates

<BR>

<BR></LI>

<LI>Any import statements to utilize other classes

<BR>

<BR></LI>

<LI>The Applet class definition, which includes the following:

<BR>

<BR></LI>

<LI>Variable declarations

<BR>

<BR></LI>

<LI>Parameter information

<BR>

<BR></LI>

<LI>The init() method, which defines variables and loads support files

<BR>

<BR></LI>

<LI>The redefined paint() method

<BR>

<BR></LI>

<LI>The start() method to perform the applet's tasks

<BR>

<BR></LI>

<LI>A stop() method to make sure the applet stops properly

<BR>

<BR></LI></OL>

<P>Listing 10.1 has the complete code for the applet.

<BR></P>

<UL>

<LH><B>Listing 10.1. The completed Speaker applet.</B></LH></UL>

<PRE>/*    Speaker

    This Applet displays a gif or jpeg while playing a sound (.au) file.

*/

import java.awt.*;

import java.applet.*;

import java.lang.*;

import java.net.URL;

public class Speaker extends java.applet.Applet {

    Image image;

    AudioClip sound;

    String graphic, clip;

    public String[][] getParameterInfo() {

        String[][] info = {

            {&quot;graphic&quot;,    &quot;string&quot;,    &quot;The image file to be displayed.&quot;},

            {&quot;clip&quot;,    &quot;string&quot;,    &quot;The sound file to be played.&quot;},

        };

    return info;

    }

    public void init() {

        graphic = getParameter(&quot;graphic&quot;);

        clip = getParameter(&quot;clip&quot;);

        image = getImage(getDocumentBase(), graphic);

        sound = getAudioClip(getDocumentBase(), clip);

    }

    public void paint(Graphics g) {

                g.drawImage(image, 0, 0, this);

        }

    public void start() {

        repaint();

        // This could also be sound.loop(); to loop the sound.

        sound.play();

    }

    public void stop() {

        sound.stop();

    }

}</PRE>

<P>The HTML file for the Speaker applet contains the following code:

<BR></P>

<PRE>&lt;html&gt;

&lt;applet code=Speaker.class width=100 height=150&gt; 

&lt;param name=&quot;graphic&quot; Value=&quot;me.gif&quot;&gt; 

&lt;param name=&quot;clip&quot; Value=&quot;hi.au&quot;&gt; 

&lt;/applet&gt; 

&lt;/html&gt;</PRE>

<P>You can now compile this code by using the javac compiler to produce an applet called Speaker.java. You can view this applet using the appletviewer or add it to a Web page.

<BR></P>

<H3 ALIGN="CENTER">

<CENTER><A ID="I16" NAME="I16">

<FONT SIZE=4><B>Summary</B>

<BR></FONT></A></CENTER></H3>

<P>This chapter has shown the basic structure of an applet. The Speaker applet is a simple applet, but it does contain many of the basic structure elements that you will find in many applets. All applets contain import statements, variable declarations, 
and a class structure. Most applets also use parameters to some extent. But there are still many things that this applet doesn't do; it doesn't deal with user input, for example.

<BR></P>

<P>The Speaker applet is a good starting point and illustrates the basics of applet construction in the context of a working applet. As you begin to program applets, you will be surprised how common some of these elements are. For example, the parameter 
code used in this chapter does not usually vary much from applet to applet, and the techniques for assigning variables, using getImage(), and so forth are the same in any applet. These methods provide a solid foundation for more advanced applets, and 
having a firm grasp of the basics will help you as your applets become more advanced.

<BR></P>

<P>Now you are ready to move on to some more functional applets. Chapter 11 discusses some of the issues surrounding user interfaces and how to use the tools in the Abstract Window Toolkit to create user interfaces for your applets. Then you'll have all 
the tools to create fully functional applets. In Chapters 12 and 13, you will develop a TickerTape applet and a SlideShow applet to understand how some real-world applets function. These chapters also discuss issues of application development in more 
detail.

<BR></P>

<P><A HREF="cwa09fi.htm"><IMG SRC="http://docs.rinet.ru/WebApp/bluprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/WebApp/blutoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="cwa11fi.htm"><IMG SRC="http://docs.rinet.ru/WebApp/blunext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


</P></BODY></HTML>

