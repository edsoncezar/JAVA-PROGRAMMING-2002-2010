<HTML>

<HEAD>

<TITLE>Creating Web Applets with Java cwaxbfi.htm</TITLE>

<LINK REL="ToC" HREF="index.htm">

<LINK REL="Next" HREF="cwaxcfi.htm">

<LINK REL="Previous" HREF="cwaxafi.htm"></HEAD>

<BODY TEXT="#000000" LINK="#0000FF" VLINK="#FF0000"  bgcolor=white >









<P><A HREF="cwaxafi.htm"><IMG SRC="http://docs.rinet.ru/WebApp/bluprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/WebApp/blutoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="cwaxcfi.htm"><IMG SRC="http://docs.rinet.ru/WebApp/blunext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


</P><UL>

<LI>

<A HREF="#I1">&#151; Appendix B &#151;JavaScript and Java Language Reference</A></LI>

<UL>

<UL>

<LI>

<A HREF="#I3">Reserved Words</A></LI>

<LI>

<A HREF="#I4">Comments</A></LI>

<LI>

<A HREF="#I5">Literals</A></LI>

<LI>

<A HREF="#I6">Variable Declaration</A></LI>

<LI>

<A HREF="#I7">Variable Assignment</A></LI>

<LI>

<A HREF="#I8">Operators</A></LI>

<LI>

<A HREF="#I9">Objects</A></LI>

<LI>

<A HREF="#I10">Arrays</A></LI>

<LI>

<A HREF="#I11">Loops and Conditionals</A></LI>

<LI>

<A HREF="#I12">Class Definitions</A></LI>

<LI>

<A HREF="#I13">Method and Constructor Definitions</A></LI>

<LI>

<A HREF="#I14">Packages, Interfaces, and Importing</A></LI>

<LI>

<A HREF="#I15">Exceptions and Guarding</A></LI></UL></UL></UL>



<H1 ALIGN="CENTER">

<CENTER><A ID="I1" NAME="I1">

<BR>

<FONT SIZE=5><A ID="I2" NAME="I2"></A><B>&#151; Appendix B &#151;</B>

<BR><B>JavaScript and Java Language Reference</B>

<BR></FONT></A></CENTER></H1>

<P><B>by John J Kottler</B>

<BR></P>

<P>This appendix contains a summary or quick reference for the Java language.

<BR></P>

<HR ALIGN=CENTER>

<NOTE>

<IMG SRC="http://docs.rinet.ru/WebApp/note.gif" WIDTH = 35 HEIGHT = 35>Note: This is not a grammar, nor is it a technical overview of the language itself. It's a quick reference to be used after you already know the basics of how the language works. If you need a technical 
description of the language, your best bet is to visit the Java Web site (<A HREF="http://java.sun.com/">http://java.sun.com</A>) and download the specification, which includes a full BNF grammar.

<BR></NOTE>

<HR ALIGN=CENTER>

<P>Language keywords and symbols are shown in a monospace font. Arguments and other parts to be substituted are in italic monospace.

<BR></P>

<P>Optional parts are indicated by brackets (except in the array syntax section). If there are several options that are mutually exclusive, they are shown separated by pipes (||) like this:

<BR></P>

<PRE>[ public | private | protected ] <I>type varname</I></PRE>

<H3 ALIGN="CENTER">

<CENTER><A ID="I3" NAME="I3">

<FONT SIZE=4><B>Reserved Words</B>

<BR></FONT></A></CENTER></H3>

<TABLE BORDER>

<TR>

<TD>

<P>abstract</P>

<TD>

<P>do</P>

<TD>

<P>implements</P>

<TD>

<P>package</P>

<TD>

<P>throw</P>

<TR>

<TD>

<P>boolean</P>

<TD>

<P>double</P>

<TD>

<P>import</P>

<TD>

<P>private</P>

<TD>

<P>throws</P>

<TR>

<TD>

<P>break</P>

<TD>

<P>else</P>

<TD>

<P>inner</P>

<TD>

<P>protected</P>

<TD>

<P>transient</P>

<TR>

<TD>

<P>byte</P>

<TD>

<P>extends</P>

<TD>

<P>instanceof</P>

<TD>

<P>public</P>

<TD>

<P>try</P>

<TR>

<TD>

<P>case</P>

<TD>

<P>final</P>

<TD>

<P>int</P>

<TD>

<P>rest</P>

<TD>

<P>var</P>

<TR>

<TD>

<P>cast</P>

<TD>

<P>finally</P>

<TD>

<P>interface</P>

<TD>

<P>return</P>

<TD>

<P>void</P>

<TR>

<TD>

<P>catch</P>

<TD>

<P>float</P>

<TD>

<P>long</P>

<TD>

<P>short</P>

<TD>

<P>volatile</P>

<TR>

<TD>

<P>char</P>

<TD>

<P>for</P>

<TD>

<P>native</P>

<TD>

<P>static</P>

<TD>

<P>while</P>

<TR>

<TD>

<P>class</P>

<TD>

<P>future</P>

<TD>

<P>new</P>

<TD>

<P>sure</P>

<TD>

<P><BR></P>

<TR>

<TD>

<P>const</P>

<TD>

<P>generic</P>

<TD>

<P>null</P>

<TD>

<P>switch</P>

<TD>

<P><BR></P>

<TR>

<TD>

<P>continue</P>

<TD>

<P>goto</P>

<TD>

<P>operator</P>

<TD>

<P>synchronized</P>

<TD>

<P><BR></P>

<TR>

<TD>

<P>default</P>

<TD>

<P>if</P>

<TD>

<P>outer</P>

<TD>

<P>this</P>

<TD>

<P><BR></P></TABLE>

<H3 ALIGN="CENTER">

<CENTER><A ID="I4" NAME="I4">

<FONT SIZE=4><B>Comments</B>

<BR></FONT></A></CENTER></H3>

<PRE>/* this is a multiline cpmment */

// this is a single-line comment

/** Javadoc comment */</PRE>

<H3 ALIGN="CENTER">

<CENTER><A ID="I5" NAME="I5">

<FONT SIZE=4><B>Literals</B>

<BR></FONT></A></CENTER></H3>

<TABLE>

<TR>

<TD>

<P><I>number</I></P>

<TD>

<P>Type int</P>

<TR>

<TD>

<P><I>number</I>[l || L]</P>

<TD>

<P>Type long</P>

<TR>

<TD>

<P>0x<I>hex</I></P>

<TD>

<P>Hex integer</P>

<TR>

<TD>

<P>0X<I>hex</I></P>

<TD>

<P>Hex integer</P>

<TR>

<TD>

<P>0octal</P>

<TD>

<P>Octal integer</P>

<TR>

<TD>

<P>[ <I>number</I> ].<I>number</I></P>

<TD>

<P>Type double</P>

<TR>

<TD>

<P><I>number</I>[ f || f]</P>

<TD>

<P>Type float</P>

<TR>

<TD>

<P><I>number</I>[ d || D]</P>

<TD>

<P>Type double</P>

<TR>

<TD>

<P>[ + || - ] <I>number</I></P>

<TD>

<P>Signed</P>

<TR>

<TD>

<P><I>number</I>e<I>number</I></P>

<TD>

<P>Exponent</P>

<TR>

<TD>

<P><I>number</I>E<I>number</I></P>

<TD>

<P>Exponent</P>

<TR>

<TD>

<P>'<I>character</I>'</P>

<TD>

<P>Single character</P>

<TR>

<TD>

<P>&quot;<I>characters</I>&quot;</P>

<TD>

<P>String</P>

<TR>

<TD>

<P>&quot;&quot;</P>

<TD>

<P>Empty string</P>

<TR>

<TD>

<P>\b</P>

<TD>

<P>backspace</P>

<TR>

<TD>

<P>\t</P>

<TD>

<P>Tab</P>

<TR>

<TD>

<P>\n</P>

<TD>

<P>Line feed</P>

<TR>

<TD>

<P>\f</P>

<TD>

<P>Form feed</P>

<TR>

<TD>

<P>\r</P>

<TD>

<P>Carriage return</P>

<TR>

<TD>

<P>\&quot;</P>

<TD>

<P>Double quote</P>

<TR>

<TD>

<P>\'</P>

<TD>

<P>Single quote</P>

<TR>

<TD>

<P>\\</P>

<TD>

<P>Backslash</P>

<TR>

<TD>

<P>\uNNNN</P>

<TD>

<P>Unicode escape (NNNN is hex)</P>

<TR>

<TD>

<P>true</P>

<TD>

<P>Boolean</P>

<TR>

<TD>

<P>false</P>

<TD>

<P>Boolean</P></TABLE>

<H3 ALIGN="CENTER">

<CENTER><A ID="I6" NAME="I6">

<FONT SIZE=4><B>Variable Declaration</B>

<BR></FONT></A></CENTER></H3>

<TABLE>

<TR>

<TD>

<P>[ byte || short || int || long ] <I>varname</I></P>

<TD>

<P>Integers (pick one type)</P>

<TR>

<TD>

<P>[ float || double ] <I>varname</I></P>

<TD>

<P>Floats (pick one type)</P>

<TR>

<TD>

<P>char <I>varname</I>;</P>

<TD>

<P>Characters</P>

<TR>

<TD>

<P>boolean <I>varname</I></P>

<TD>

<P>Boolean</P>

<TR>

<TD>

<P>classname <I>varname</I>;</P>

<TD>

<P>Class types</P>

<TR>

<TD>

<P>type <I>varname</I>, <I>varname</I>, <I>varname</I>;</P>

<TD>

<P>Multiple variables</P></TABLE>

<P>The following options are available only for class and instance variables. Any of these options can be used with a variable declaration:

<BR></P>

<TABLE>

<TR>

<TD>

<P>[ static ] <I>variableDeclaration</I></P>

<TD>

<P>Class variable</P>

<TR>

<TD>

<P>[ final ] <I>variableDeclaration</I></P>

<TD>

<P>Constants</P>

<TR>

<TD>

<P>[ public || private || protected ] <I>variableDeclaration</I></P>

<TD>

<P>Access control</P></TABLE>

<H3 ALIGN="CENTER">

<CENTER><A ID="I7" NAME="I7">

<FONT SIZE=4><B>Variable Assignment</B>

<BR></FONT></A></CENTER></H3>

<TABLE>

<TR>

<TD>

<P><I>variable</I> = <I>value</I></P>

<TD>

<P>Assignment</P>

<TR>

<TD>

<P><I>variable</I>++</P>

<TD>

<P>Postfix Increment</P>

<TR>

<TD>

<P>++<I>variable</I></P>

<TD>

<P>Prefix Increment</P>

<TR>

<TD>

<P><I>variable</I>--</P>

<TD>

<P>Postfix Decrement</P>

<TR>

<TD>

<P>--<I>variable</I></P>

<TD>

<P>Prefix Decrement</P>

<TR>

<TD>

<P><I>variable</I> += <I>value</I></P>

<TD>

<P>Add and assign</P>

<TR>

<TD>

<P><I>variable</I> -+ <I>value</I></P>

<TD>

<P>Subtract and assign</P>

<TR>

<TD>

<P><I>variable</I>*= <I>value</I></P>

<TD>

<P>Multiply and assign</P>

<TR>

<TD>

<P><I>variable</I> ||= <I>value</I></P>

<TD>

<P>Divide and assign</P>

<TR>

<TD>

<P><I>variable</I> %= <I>value</I></P>

<TD>

<P>Modulus and assign</P>

<TR>

<TD>

<P><I>variable</I> &amp;= <I>value</I></P>

<TD>

<P>AND and assign</P>

<TR>

<TD>

<P><I>variable</I> ||= <I>value</I></P>

<TD>

<P>OR and assign</P>

<TR>

<TD>

<P><I>variable</I> ^= <I>value</I></P>

<TD>

<P>XOR and assign</P>

<TR>

<TD>

<P><I>variable</I> &lt;&lt;= <I>value</I></P>

<TD>

<P>Left-shift and assign</P>

<TR>

<TD>

<P><I>variable</I> &gt;&gt;= <I>value</I></P>

<TD>

<P>Right-shift and assign</P>

<TR>

<TD>

<P><I>variable</I> &lt;&lt;&lt;= <I>value</I></P>

<TD>

<P>Zero-fill right-shift and assign</P></TABLE>

<H3 ALIGN="CENTER">

<CENTER><A ID="I8" NAME="I8">

<FONT SIZE=4><B>Operators</B>

<BR></FONT></A></CENTER></H3>

<TABLE>

<TR>

<TD>

<P><I>arg</I> + <I>arg</I></P>

<TD>

<P>Addition</P>

<TR>

<TD>

<P><I>arg</I> - <I>arg</I></P>

<TD>

<P>Subtraction</P>

<TR>

<TD>

<P><I>arg</I> * <I>arg</I></P>

<TD>

<P>Multiplication</P>

<TR>

<TD>

<P><I>arg</I> || <I>arg</I></P>

<TD>

<P>Division</P>

<TR>

<TD>

<P><I>arg</I> % <I>arg</I></P>

<TD>

<P>Modulus</P>

<TR>

<TD>

<P><I>arg</I> &lt; <I>arg</I></P>

<TD>

<P>Less than</P>

<TR>

<TD>

<P><I>arg</I> &gt; <I>arg</I></P>

<TD>

<P>Greater than</P>

<TR>

<TD>

<P><I>arg</I> &lt;= <I>arg</I></P>

<TD>

<P>Less than or equal to</P>

<TR>

<TD>

<P><I>arg</I> &gt;= <I>arg</I></P>

<TD>

<P>Greater than or equal to</P>

<TR>

<TD>

<P><I>arg</I> == <I>arg</I></P>

<TD>

<P>Equal</P>

<TR>

<TD>

<P><I>arg</I>  <I>arg</I></P>

<TD>

<P>Not equal</P>

<TR>

<TD>

<P><I>arg</I> &amp;&amp; <I>arg</I></P>

<TD>

<P>Logical AND</P>

<TR>

<TD>

<P><I>arg</I> |||| <I>arg</I></P>

<TD>

<P>Logical OR</P>

<TR>

<TD>

<P>! <I>arg</I></P>

<TD>

<P>Logical NOT</P>

<TR>

<TD>

<P><I>arg</I> &amp; <I>arg</I></P>

<TD>

<P>AND</P>

<TR>

<TD>

<P><I>arg</I> || <I>arg</I></P>

<TD>

<P>OR</P>

<TR>

<TD>

<P><I>arg</I> ^ <I>arg</I></P>

<TD>

<P>XOR</P>

<TR>

<TD>

<P><I>arg</I> &lt;&lt; <I>arg</I></P>

<TD>

<P>Left-shift</P>

<TR>

<TD>

<P><I>arg</I> &gt;&gt; <I>arg</I></P>

<TD>

<P>Right-shift</P>

<TR>

<TD>

<P><I>arg</I> &gt;&gt;&gt; <I>arg</I></P>

<TD>

<P>Zero-fill right-shift</P>

<TR>

<TD>

<P><I>arg</I></P>

<TD>

<P>Complement</P>

<TR>

<TD>

<P>(<I>type</I>)<I>thing</I></P>

<TD>

<P>Casting</P>

<TR>

<TD>

<P><I>arg</I> instanceof class</P>

<TD>

<P>Instance of</P>

<TR>

<TD>

<P><I>test</I> ? <I>trueOp</I> : <I>falseOp</I></P>

<TD>

<P>Tenary (if) operator</P></TABLE>

<H3 ALIGN="CENTER">

<CENTER><A ID="I9" NAME="I9">

<FONT SIZE=4><B>Objects</B>

<BR></FONT></A></CENTER></H3>

<TABLE>

<TR>

<TD>

<P><I>new class</I>();</P>

<TD>

<P>Create new instance</P>

<TR>

<TD>

<P><I>new class</I> (<I>arg</I>,<I>arg</I>,<I>arg</I>...)</P>

<TD>

<P>New instance with parameters</P>

<TR>

<TD>

<P><I>object</I>.<I>variable</I></P>

<TD>

<P>Instance variable</P>

<TR>

<TD>

<P><I>object</I>.<I>classvar</I></P>

<TD>

<P>Class variable</P>

<TR>

<TD>

<P><I>Class</I>.<I>classvar</I></P>

<TD>

<P>Class variable</P>

<TR>

<TD>

<P><I>object</I>.<I>method</I>()</P>

<TD>

<P>Instance method (no args)</P>

<TR>

<TD>

<P><I>object</I>.<I>method</I>(<I>arg</I>,<I>arg</I>,<I>arg</I>...)</P>

<TD>

<P>Instance method</P>

<TR>

<TD>

<P><I>object</I>.<I>classmethod</I>()</P>

<TD>

<P>Class method (no args)</P>

<TR>

<TD>

<P><I>object</I>.<I>classmethod</I>(<I>arg</I>,<I>arg</I>,<I>arg</I>...)</P>

<TD>

<P>Class method</P>

<TR>

<TD>

<P><I>Class</I>.<I>classmethod</I>()</P>

<TD>

<P>Class method (no args)</P>

<TR>

<TD>

<P><I>Class</I>.<I>classmethod</I>(<I>arg</I>,<I>arg</I>,<I>arg</I>...)</P>

<TD>

<P>Class method</P></TABLE>

<H3 ALIGN="CENTER">

<CENTER><A ID="I10" NAME="I10">

<FONT SIZE=4><B>Arrays</B>

<BR></FONT></A></CENTER></H3>

<HR ALIGN=CENTER>

<NOTE>

<IMG SRC="http://docs.rinet.ru/WebApp/note.gif" WIDTH = 35 HEIGHT = 35>Note: The brackets in this section are parts of the array creation or access statements. They do not denote optional parts as they do in other parts of this appendix.

<BR></NOTE>

<HR ALIGN=CENTER>

<TABLE>

<TR>

<TD>

<P><I>type varname</I>[]</P>

<TD>

<P>Array variable</P>

<TR>

<TD>

<P><I>type</I>[] <I>varname</I></P>

<TD>

<P>Array variable</P>

<TR>

<TD>

<P>new <I>type</I>[<I>numElements</I>]</P>

<TD>

<P>New array object</P>

<TR>

<TD>

<P><I>array</I>[<I>index</I>]</P>

<TD>

<P>Element access</P>

<TR>

<TD>

<P><I>array</I>.<I>length</I></P>

<TD>

<P>Length of array</P></TABLE>

<H3 ALIGN="CENTER">

<CENTER><A ID="I11" NAME="I11">

<FONT SIZE=4><B>Loops and Conditionals</B>

<BR></FONT></A></CENTER></H3>

<TABLE>

<TR>

<TD>

<P>if ( <I>test</I>) <I>block</I></P>

<TD>

<P>Conditional</P>

<TR>

<TD>

<TD>

<TR>

<TD>

<P>if (<I>test</I> ) <I>block</I></P>

<TD>

<TR>

<TD>

<P>else <I>block</I></P>

<TD>

<P>Conditional with else</P>

<TR>

<TD>

<TD>

<TR>

<TD>

<P>switch (<I>test</I>) {</P>

<TD>

<P>switch (only with integer or char types)</P>

<TR>

<TD>

<P>    case <I>value</I> : <I>block</I></P>

<TD>

<TR>

<TD>

<P>    ...</P>

<TD>

<TR>

<TD>

<P>    default : <I>block</I></P>

<TD>

<TR>

<TD>

<P>}</P>

<TD>

<TR>

<TD>

<TD>

<TR>

<TD>

<P>for (<I>initializer</I>, <I>test</I>, <I>change</I> ) <I>block</I></P>

<TD>

<P>for loop</P>

<TR>

<TD>

<TD>

<TR>

<TD>

<P>while ( <I>test</I> ) <I>block</I></P>

<TD>

<P>while loop</P>

<TR>

<TD>

<TD>

<TR>

<TD>

<P>do <I>block</I></P>

<TD>

<P>do loop</P>

<TR>

<TD>

<P>while (<I>test</I>)</P>

<TD>

<TR>

<TD>

<TD>

<TR>

<TD>

<P>break [ <I>label</I> ]</P>

<TD>

<P>break from loop or switch</P>

<TR>

<TD>

<P>continue [ <I>label</I> ]</P>

<TD>

<P>continue loops</P>

<TR>

<TD>

<TD>

<TR>

<TD>

<P ALIGN="CENTER">

<CENTER>label:</CENTER></P>

<TD>

<P ALIGN="CENTER">

<CENTER>Labeled loops</CENTER></P></TABLE>

<H3 ALIGN="CENTER">

<CENTER><A ID="I12" NAME="I12">

<FONT SIZE=4><B>Class Definitions</B>

<BR></FONT></A></CENTER></H3>

<TABLE>

<TR>

<TD>

<P>class classname <I>block</I></P>

<TD>

<P>Simple class definition</P></TABLE>

<P>Any of the following optional modifiers can be added to the class definition:

<BR></P>

<TABLE>

<TR>

<TD>

<P>[ final ] class <I>classname block</I></P>

<TD>

<P>No subclasses</P>

<TR>

<TD>

<P>[ abstract ] class <I>classname block</I></P>

<TD>

<P>Cannot be instantiated</P>

<TR>

<TD>

<P>[ public ] class <I>classname block</I></P>

<TD>

<P>Accessible outside package</P>

<TR>

<TD>

<P>class <I>classname</I> [ extends <I>Superclass</I> ] <I>block</I></P>

<TD>

<P>Define superclass</P>

<TR>

<TD>

<P>class <I>classname</I> [ implements <I>interfaces</I> ] <I>block</I></P>

<TD>

<P>Implement one or more interfaces</P></TABLE>

<H3 ALIGN="CENTER">

<CENTER><A ID="I13" NAME="I13">

<FONT SIZE=4><B>Method and Constructor Definitions</B>

<BR></FONT></A></CENTER></H3>

<P>The basic method looks like this, where returnType is a type name, a class name, or void.

<BR></P>

<TABLE>

<TR>

<TD>

<P><I>returnType methodName</I>() <I>block</I></P>

<TD>

<P>Basic method</P>

<TR>

<TD>

<P><I>returnType methodName</I>(<I>parameter</I>, <I>parameter</I>, <I>block</I></P>

<TD>

<P>Method with parameters</P>

<TR>

<TD>

<P>...)</P>

<TD></TABLE>

<P>Method parameters look like this:

<BR></P>

<TABLE>

<TR>

<TD>

<P>type parameter</P>

<TD>

<P>Name</P></TABLE>

<P>Method variations can include any of the following optional keywords:

<BR></P>

<TABLE>

<TR>

<TD>

<P>[ abstract ] <I>returnType methodName</I>() <I>block</I></P>

<TD>

<P>Abstract method</P>

<TR>

<TD>

<P>[ static ] <I>returnType methodName</I>() <I>block</I></P>

<TD>

<P>Class method</P>

<TR>

<TD>

<P>[ native] <I>returnType methodName</I>() <I>block</I></P>

<TD>

<P>Native method</P>

<TR>

<TD>

<P>[ final <I>returnType methodName</I>() <I>block</I></P>

<TD>

<P>Final method</P>

<TR>

<TD>

<P>[ synchronized ] <I>returnType methodName</I>() <I>block</I></P>

<TD>

<P>Thread lock before executing</P>

<TR>

<TD>

<P>[ public || private || protected ] <I>returnType </I><I>methodName</I>()</P>

<TD>

<P>Block access control</P></TABLE>

<P>Constructors look like this:

<BR></P>

<TABLE>

<TR>

<TD>

<P><I>classname</I>() <I>block</I></P>

<TD>

<P>Basic constructor</P>

<TR>

<TD>

<P><I>classname</I>(<I>parameter</I>, <I>parameter</I>, <I>parameter</I>...)<I>block</I></P>

<TD>

<P> Constructor with parameters</P>

<TR>

<TD>

<P>[ public || private || protected] <I>classname</I>()<I>block</I></P>

<TD>

<P>Access control</P></TABLE>

<P>In the method/constructor body you can use these references and methods:

<BR></P>

<TABLE>

<TR>

<TD>

<P>this</P>

<TD>

<P>Refers to current object</P>

<TR>

<TD>

<P>super</P>

<TD>

<P>Refers to superclass</P>

<TR>

<TD>

<P>super.<I>methodName</I>()</P>

<TD>

<P>Call a superclass's method</P>

<TR>

<TD>

<P>this(...)</P>

<TD>

<P>Calls class's constructor</P>

<TR>

<TD>

<P>super(...)</P>

<TD>

<P>Calls superclass's constructor</P>

<TR>

<TD>

<P>return [ <I>value</I> ]</P>

<TD>

<P>Returns a value</P></TABLE>

<H3 ALIGN="CENTER">

<CENTER><A ID="I14" NAME="I14">

<FONT SIZE=4><B>Packages, Interfaces, and Importing</B>

<BR></FONT></A></CENTER></H3>

<TABLE>

<TR>

<TD>

<P>import <I>package</I>.<I>className</I></P>

<TD>

<P>Imports specific class name</P>

<TR>

<TD>

<P>import <I>package</I>.*</P>

<TD>

<P>Imports all classes in package</P>

<TR>

<TD>

<P>package <I>packagename</I></P>

<TD>

<P>Classes in this file belong to this package</P>

<TR>

<TD>

<TD>

<TR>

<TD>

<P>interface <I>interfaceName</I> [ extends <I>anotherInterface</I> ] <I>block</I></P>

<TD>

<TR>

<TD>

<P>[ public ] interface <I>interfaceName block</I></P>

<TD>

<TR>

<TD>

<P>[ abstract ] interface <I>interfaceName block</I></P>

<TD></TABLE>

<H3 ALIGN="CENTER">

<CENTER><A ID="I15" NAME="I15">

<FONT SIZE=4><B>Exceptions and Guarding</B>

<BR></FONT></A></CENTER></H3>

<TABLE>

<TR>

<TD>

<P>synchronized ( <I>object</I> ) <I>block</I></P>

<TD>

<P>Waits for lock on object</P>

<TR>

<TD>

<TD>

<TR>

<TD>

<P>try <I>block</I></P>

<TD>

<P>Guarded statements</P>

<TR>

<TD>

<P>catch ( <I>exception</I> ) <I>block</I></P>

<TD>

<P>Executed if exception is thrown</P>

<TR>

<TD>

<P>[ finally <I>block</I> ]</P>

<TD>

<P>Always executed</P>

<TR>

<TD>

<TD>

<TR>

<TD>

<P>try block</P>

<TD>

<P>Same as previous example (can use optional)</P>

<TR>

<TD>

<P>[ catch ( <I>exception</I> ) <I>block</I> ]</P>

<TD>

<P>catch or finally, but not both)</P>

<TR>

<TD>

<P>finally <I>block</I></P>

<TD></TABLE>

<P><A HREF="cwaxafi.htm"><IMG SRC="http://docs.rinet.ru/WebApp/bluprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>

<A HREF="index.htm"><IMG SRC="http://docs.rinet.ru/WebApp/blutoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>

<A HREF="cwaxcfi.htm"><IMG SRC="http://docs.rinet.ru/WebApp/blunext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>


</P></BODY></HTML>

