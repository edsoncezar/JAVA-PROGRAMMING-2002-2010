<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META>
<H1><FONT COLOR=#FF0000>Chapter 22</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Text and Fonts</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#TheTextClasses" >The Text Classes</A>
<LI><A HREF="#FontBasics" >Font Basics</A>
<UL>
<LI><A HREF="#UsingtheToolkitClass" >Using the Toolkit Class</A>
<LI><A HREF="#TheFontAppProgram" >The FontApp Program</A>
</UL>
<LI><A HREF="#WYSIWYGEditors" >WYSIWYG Editors</A>
<UL>
<LI><A HREF="#TheEditAppProgram" >The EditApp Program</A>
<LI><A HREF="#TheFontDialogClass" >The FontDialog Class</A>
<LI><A HREF="#TheColorDialogClass" >The ColorDialog Class</A>
</UL>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
This chapter covers the details of Java's text- and font-related
classes. It shows how to use the <TT><FONT FACE="Courier">TextComponent</FONT></TT>
subclasses and how to display text with the canvas. It explains
Java's use of fonts and shows how the <TT><FONT FACE="Courier">Font</FONT></TT>
and <TT><FONT FACE="Courier">FontMetrics</FONT></TT> classes are
used to provide custom control of text display. When you finish
this chapter, you will be able to effectively use text and fonts
in your Java window programs.
<P>
<A NAME="TheTextClasses"><B><FONT SIZE=5 COLOR=#FF0000>The Text
Classes</FONT></B></A>
<P>
You are now fairly familiar with the text-related classes supported
by Java because you've used <TT><FONT FACE="Courier">TextArea</FONT></TT>
and <TT><FONT FACE="Courier">TextField</FONT></TT> objects in
the examples presented so far. Let's review these classes and
then you can learn how to use font-related classes to alter the
way text is presented to the user.
<P>
The <TT><FONT FACE="Courier">TextComponent</FONT></TT> class is
the superclass of the <TT><FONT FACE="Courier">TextField</FONT></TT>
and <TT><FONT FACE="Courier">TextArea</FONT></TT> classes. It
extends the <TT><FONT FACE="Courier">Component</FONT></TT> class
to support text-related processing. <TT><FONT FACE="Courier">TextComponent</FONT></TT>
provides several methods that are used to process text that is
selected by the user. The <TT><FONT FACE="Courier">setEditable()</FONT></TT>
method determines whether a <TT><FONT FACE="Courier">TextComponent</FONT></TT>
object is read-only or can be edited. The <TT><FONT FACE="Courier">getText()</FONT></TT>
and <TT><FONT FACE="Courier">setText()</FONT></TT> methods are
its most popular methods and are used with all text-related classes.
<P>
The <TT><FONT FACE="Courier">TextField</FONT></TT> class implements
a simple, one-line text field. The visible length of the field
(in characters) can be specified. Character echoing can be disabled
to implement password-like text fields.
<P>
The <TT><FONT FACE="Courier">TextArea</FONT></TT> class implements
a multiple-line text field and supports a number of methods for
updating the field by inserting, appending, and replacing text.
The number of rows and columns associated with a text field can
be specified.
<P>
<A NAME="FontBasics"><B><FONT SIZE=5 COLOR=#FF0000>Font Basics</FONT></B></A>
<P>
The <TT><FONT FACE="Courier">Font</FONT></TT> class provides a
platform-independent method of specifying and using fonts. The
<TT><FONT FACE="Courier">Font</FONT></TT> class constructor constructs
<TT><FONT FACE="Courier">Font</FONT></TT> objects using the font's
name, style (<TT><FONT FACE="Courier">PLAIN</FONT></TT>, <TT><FONT FACE="Courier">BOLD</FONT></TT>,
<TT><FONT FACE="Courier">ITALIC</FONT></TT>, or <TT><FONT FACE="Courier">BOLD
+ ITALIC</FONT></TT>), and point size. Java's fonts are named
in a platform-independent manner and then mapped to local fonts
that are supported by the operating system on which it executes.
The <TT><FONT FACE="Courier">getName()</FONT></TT> method returns
the logical Java font name of a particular font and the <TT><FONT FACE="Courier">getFamily()</FONT></TT>
method returns the operating system-specific name of the font.
The standard Java font names are Dialog, DialogInput, Courier,
Helvetica, TimesRoman, and ZapfDingbats. You'll see examples of
these fonts shortly.
<P>
The <TT><FONT FACE="Courier">FontMetrics</FONT></TT> class is
used to return the specific parameters for a particular <TT><FONT FACE="Courier">Font</FONT></TT>
object. An object of this class is created using the <TT><FONT FACE="Courier">getFontMetrics()</FONT></TT>
methods supported by the <TT><FONT FACE="Courier">Component</FONT></TT>
class and other classes, such as the <TT><FONT FACE="Courier">Graphics</FONT></TT>
and <TT><FONT FACE="Courier">Toolkit</FONT></TT> classes. The
<TT><FONT FACE="Courier">FontMetrics</FONT></TT> access methods
provide access to the details of the implementation of a <TT><FONT FACE="Courier">Font</FONT></TT>
object.
<P>
The <TT><FONT FACE="Courier">bytesWidth()</FONT></TT>, <TT><FONT FACE="Courier">charWidth()</FONT></TT>,
<TT><FONT FACE="Courier">charsWidth()</FONT></TT>, <TT><FONT FACE="Courier">getWidths()</FONT></TT>,
and <TT><FONT FACE="Courier">stringWidth()</FONT></TT> methods
are used to determine the width of a text object in pixels. These
methods are essential for determining the horizontal position
of text on the screen.
<P>
When text characters are displayed, they are displayed relative
to a baseline. The <I>baseline</I> is the line drawn through the
bottom of non-descending characters. For example, if you drew
a line at the bottom of most text displayed on this line, you
would get the text's baseline. Some characters, such as <I>g</I>
and <I>y</I>, descend below the baseline. The number of pixels
that the characters of a font descend below the baseline are known
as the font's <I>descent</I>. The number of pixels that the characters
of a font extend above the baseline are known as the font's <I>ascent</I>.
In addition to a font's ascent and descent, a third parameter,
referred to as the font's <I>leading</I>, is used to describe
the amount of vertical spacing, in pixels, used between the descent
of a line of text and the ascent of the line of text below it.
The overall height of a font is the sum of its leading, ascent,
and spacing and is equal to the distance between baselines (in
pixels) of vertically adjacent lines of text. The <TT><FONT FACE="Courier">getLeading()</FONT></TT>,
<TT><FONT FACE="Courier">getAscent()</FONT></TT>, <TT><FONT FACE="Courier">getDescent()</FONT></TT>,
and <TT><FONT FACE="Courier">getHeight()</FONT></TT> methods of
the <TT><FONT FACE="Courier">FontMetrics</FONT></TT> class are
used to access these important font-related parameters.
<P>
The <TT><FONT FACE="Courier">getMaxAdvance()</FONT></TT>, <TT><FONT FACE="Courier">getMaxAscent()</FONT></TT>,
and <TT><FONT FACE="Courier">getMaxDescent()</FONT></TT> methods
are provided for backward compatibility with earlier Java versions.
<H3><A NAME="UsingtheToolkitClass">Using the <TT><FONT SIZE=4 FACE="Courier">Toolkit</FONT></TT><FONT SIZE=4>
Class</FONT></A></H3>
<P>
The <TT><FONT FACE="Courier">Toolkit</FONT></TT> class provides
a link between the platform-independent Java implementation and
its platform-specific characteristics. Among the many uninteresting
methods implemented by this class are the <TT><FONT FACE="Courier">getFontList()</FONT></TT>,
<TT><FONT FACE="Courier">getFontMetrics()</FONT></TT>, <TT><FONT FACE="Courier">getScreenSize()</FONT></TT>,
and <TT><FONT FACE="Courier">getScreenResolution()</FONT></TT>
methods. The <TT><FONT FACE="Courier">getFontList()</FONT></TT>
method returns a list of fonts that are accessible from Java.
The <TT><FONT FACE="Courier">getFontMetrics()</FONT></TT> method
identifies the font metrics for a particular font. The <TT><FONT FACE="Courier">getScreenSize()</FONT></TT>
method identifies the screen dimension in terms of horizontal
and vertical dots. The <TT><FONT FACE="Courier">getScreenResolution()</FONT></TT>
method identifies the screen resolution in dots per inch.
<P>
<TT><FONT FACE="Courier">getFontList()</FONT></TT> is the method
of interest for this chapter. You'll use it to get a list of the
fonts available to Java in the next section.
<H3><A NAME="TheFontAppProgram">The <TT><FONT SIZE=4 FACE="Courier">FontApp</FONT></TT><FONT SIZE=4>
Program</FONT></A></H3>
<P>
The <TT><FONT FACE="Courier">FontApp</FONT></TT> program illustrates
the use of the <TT><FONT FACE="Courier">Font</FONT></TT>, <TT><FONT FACE="Courier">FontMetrics</FONT></TT>,
and <TT><FONT FACE="Courier">Toolkit</FONT></TT> classes and shows
how to draw text on a <TT><FONT FACE="Courier">Graphics</FONT></TT>
object. Its source code is shown in Listing 22.1.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 22.1. The source code of the </B><TT><B><FONT FACE="Courier">FontApp</FONT></B></TT><B>
program.</B><P>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
import jdg.ch20.*;<BR>
<BR>
public class FontApp extends Frame {<BR>
&nbsp;MyMenuBar menuBar;<BR>
&nbsp;Toolkit toolkit;<BR>
&nbsp;Font defaultFont;<BR>
&nbsp;String fontNames[];<BR>
&nbsp;int screenWidth = 400;<BR>
&nbsp;int screenHeight = 400;<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;FontApp app = new FontApp();<BR>
&nbsp;}<BR>
&nbsp;public FontApp() {<BR>
&nbsp;&nbsp;super(&quot;FontApp&quot;);<BR>
&nbsp;&nbsp;setup();<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(screenWidth,screenHeight);<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void setup() {<BR>
&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;setupMenuBar();<BR>
&nbsp;&nbsp;setMenuBar(menuBar);<BR>
&nbsp;&nbsp;setupFonts();<BR>
&nbsp;}<BR>
&nbsp;void setupMenuBar() {<BR>
&nbsp;&nbsp;String menuItems[][] = {{&quot;File&quot;,&quot;Exit&quot;}};
<BR>
&nbsp;&nbsp;menuBar = new MyMenuBar(menuItems);<BR>
&nbsp;}<BR>
&nbsp;void setupFonts() {<BR>
&nbsp;&nbsp;toolkit = getToolkit();<BR>
&nbsp;&nbsp;defaultFont = getFont();<BR>
&nbsp;&nbsp;fontNames = toolkit.getFontList();<BR>
&nbsp;}<BR>
&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;int styles[] = {Font.PLAIN,Font.BOLD,Font.ITALIC,Font.BOLD+Font.ITALIC};
<BR>
&nbsp;&nbsp;String styleNames[] = {&quot;Plain&quot;,&quot;Bold&quot;,&quot;Italic&quot;,&quot;Bold
and Italic&quot;};<BR>
&nbsp;&nbsp;int y = 0;<BR>
&nbsp;&nbsp;int size = 14;<BR>
&nbsp;&nbsp;for(int i=0;i&lt;fontNames.length;++i) {<BR>
&nbsp;&nbsp;&nbsp;for(int j=0;j&lt;styles.length;++j) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Font newFont = new Font(fontNames[i],styles[j],size);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;FontMetrics fm = g.getFontMetrics(newFont);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.setFont(newFont);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String text = fontNames[i]+&quot;-&quot;+styleNames[j];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int x = (screenWidth - fm.stringWidth(text))/2;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(text,x,y+fm.getLeading()+fm.getAscent());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;y += fm.getHeight();<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.ACTION_EVENT){<BR>
&nbsp;&nbsp;&nbsp;if(event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(&quot;Exit&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">FontApp</FONT></TT> program does
not provide much functionality. Just run it and it will display
a list of the fonts that are currently available to Java, with
each name written in its font. <A HREF="f22-1.gif" >Figure 22.1</A>
shows its display. The program's importance is not what it does,
but in how it does it. By closely examining this program, you'll
be able to quickly come up to speed on working with Java fonts.
<P>
<A HREF="f22-1.gif"><B>Figure 22.1 :</B><I> The <TT>FontApp</TT> opening window.</I></A>
<P>
The <TT><FONT FACE="Courier">FontApp</FONT></TT> class declares
a number of field variables. The <TT><FONT FACE="Courier">toolkit</FONT></TT>
variable is used to refer to the <TT><FONT FACE="Courier">Toolkit</FONT></TT>
object associated with the program window. The <TT><FONT FACE="Courier">defaultFont</FONT></TT>
variable identifies the default font used by the program. The
<TT><FONT FACE="Courier">fontNames[]</FONT></TT> array is used
to store the names of the fonts that are accessible to Java.
<P>
The <TT><FONT FACE="Courier">setupFonts()</FONT></TT> method obtains
the <TT><FONT FACE="Courier">Toolkit</FONT></TT> object associated
with the program's window using the <TT><FONT FACE="Courier">getToolkit()</FONT></TT>
method and assigns this object to the <TT><FONT FACE="Courier">toolkit</FONT></TT>
variable. The current font used by the program is accessed by
<TT><FONT FACE="Courier">getFont()</FONT></TT> and assigned to
the <TT><FONT FACE="Courier">defaultFont</FONT></TT> variable.
The <TT><FONT FACE="Courier">Toolkit</FONT></TT> object is then
used to obtain the current list of font names via the <TT><FONT FACE="Courier">getFontList()</FONT></TT>
method of the <TT><FONT FACE="Courier">Toolkit</FONT></TT> class.
That's all for the program's setup. The program's event handling
is the standard Exit menu item and <TT><FONT FACE="Courier">WINDOW_DESTROY</FONT></TT>
event processing.
<P>
The <TT><FONT FACE="Courier">paint()</FONT></TT> method is where
the primary processing of interest takes place. The <TT><FONT FACE="Courier">styles[]</FONT></TT>
and <TT><FONT FACE="Courier">styleNames[]</FONT></TT> arrays are
used to identify the various text styles and their associated
string descriptions. The <TT><FONT FACE="Courier">y</FONT></TT>
variable identifies the vertical screen position where text is
displayed. The <TT><FONT FACE="Courier">size</FONT></TT> variable
identifies the point size used to display a font.
<P>
The <TT><FONT FACE="Courier">paint()</FONT></TT> method uses two
<TT><FONT FACE="Courier">for</FONT></TT> statements. The outer
statement iterates through the list of font names, and the inner
statement iterates through the font styles. At each passes through
the inner loop, a new font is created with the specified name,
style, and size. The <TT><FONT FACE="Courier">getFontMetrics()</FONT></TT>
method of the <TT><FONT FACE="Courier">Graphics</FONT></TT> class
is used to obtain the <TT><FONT FACE="Courier">FontMetrics</FONT></TT>
object associated with the newly created font and this object
is assigned to the <TT><FONT FACE="Courier">fm</FONT></TT> variable.
The <TT><FONT FACE="Courier">setFont()</FONT></TT> method of the
<TT><FONT FACE="Courier">Graphics</FONT></TT> class is used to
set the current font to the new font.
<P>
The next line of text to be displayed is created by concatenating
the font name and its style name. The horizontal position at which
the text is to be displayed in order for it to be centered is
calculated based on the width of the text (in pixels) returned
by the <TT><FONT FACE="Courier">stringWidth()</FONT></TT> method
of the <TT><FONT FACE="Courier">FontMetrics</FONT></TT> class
and the initial width of the program window. The vertical position
where the text is to be displayed is its baseline and is determined
by adding the leading and ascent values of the font with the <TT><FONT FACE="Courier">y</FONT></TT>
variable. These values are obtained using the <TT><FONT FACE="Courier">getLeading()</FONT></TT>
and <TT><FONT FACE="Courier">getAscent()</FONT></TT> methods of
the current <TT><FONT FACE="Courier">FontMetric</FONT></TT> object.
The <TT><FONT FACE="Courier">y</FONT></TT> variable identifies
the point of maximum descent of the previously displayed line
of text. It is then updated for the current line of text by adding
the height of the current font returned by the <TT><FONT FACE="Courier">getHeight()</FONT></TT>
method of the <TT><FONT FACE="Courier">FontMetric</FONT></TT>
class.
<P>
<A NAME="WYSIWYGEditors"><B><FONT SIZE=5 COLOR=#FF0000>WYSIWYG
Editors</FONT></B></A>
<P>
The <TT><FONT FACE="Courier">Font</FONT></TT> and <TT><FONT FACE="Courier">FontMetrics</FONT></TT>
classes are not confined to text that is drawn on <TT><FONT FACE="Courier">Graphics</FONT></TT>
objects. These classes can also be used with the <TT><FONT FACE="Courier">TextField</FONT></TT>
and <TT><FONT FACE="Courier">TextArea</FONT></TT> classes. These
classes automatically calculate the correct text-display locations
using the native text objects supported by the local operating-system
platform. In addition to changing text fonts, the <TT><FONT FACE="Courier">TextField</FONT></TT>
and <TT><FONT FACE="Courier">TextArea</FONT></TT> classes also
support the display of text using different foreground and background
colors. The following program shows how fonts and colors can be
quickly incorporated into a Java program to implement features
associated with what-you-see-is-what-you-get (WYSIWYG) editors.
<H3><A NAME="TheEditAppProgram">The <TT><FONT SIZE=4 FACE="Courier">EditApp</FONT></TT><FONT SIZE=4>
Program</FONT></A></H3>
<P>
The <TT><FONT FACE="Courier">EditApp</FONT></TT> program shows
how the <TT><FONT FACE="Courier">Font</FONT></TT> and <TT><FONT FACE="Courier">Color</FONT></TT>
classes can be incorporated into the <TT><FONT FACE="Courier">TextEdit</FONT></TT>
program introduced in <A HREF="ch18.htm" >Chapter 18</A>, &quot;Opening
Windows.&quot; Its source code is shown in Listing 22.2.
<P>
The <TT><FONT FACE="Courier">EditApp</FONT></TT> program uses
the <TT><FONT FACE="Courier">FontDialog</FONT></TT> and <TT><FONT FACE="Courier">ColorDialog</FONT></TT>
classes that are introduced in subsequent sections. In order to
compile and run <TT><FONT FACE="Courier">EditApp.java</FONT></TT>,
you will need to type in the <TT><FONT FACE="Courier">FontDialog.java
</FONT></TT>and <TT><FONT FACE="Courier">ColorDialog.java</FONT></TT>
files. Java will automatically compile the <TT><FONT FACE="Courier">FontDialog.java</FONT></TT>
and <TT><FONT FACE="Courier">ColorDialog.java</FONT></TT> files
when <TT><FONT FACE="Courier">EditApp.java</FONT></TT> is compiled.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 22.2. The source code of the </B><TT><B><FONT FACE="Courier">EditApp</FONT></B></TT><B>
program.</B><P>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
import java.io.*;<BR>
import jdg.ch20.*;<BR>
import jdg.ch22.FontDialog;<BR>
import jdg.ch22.ColorDialog;<BR>
<BR>
public class EditApp extends Frame {<BR>
&nbsp;String programName;<BR>
&nbsp;Object menuItems[][] = {<BR>
&nbsp;&nbsp;{&quot;File&quot;,&quot;New&quot;,&quot;Open&quot;,&quot;-&quot;,&quot;Save
As&quot;,&quot;-&quot;,&quot;Exit&quot;},<BR>
&nbsp;&nbsp;{&quot;Format&quot;,&quot;Font&quot;,&quot;Color&quot;}
<BR>
&nbsp;};<BR>
&nbsp;MyMenuBar menuBar = new MyMenuBar(menuItems);<BR>
&nbsp;TextArea text;<BR>
&nbsp;FileDialog openFile = new FileDialog(this,&quot;Open File&quot;,FileDialog.LOAD);
<BR>
&nbsp;FileDialog saveFile = new FileDialog(this,&quot;Save File
As&quot;,FileDialog.SAVE);<BR>
&nbsp;FontDialog fd;<BR>
&nbsp;ColorDialog cd;<BR>
&nbsp;Font currentFont = new Font(&quot;Courier&quot;,Font.PLAIN,12);
<BR>
&nbsp;Color currentColor = Color.black;<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;EditApp app = new EditApp();<BR>
&nbsp;}<BR>
&nbsp;public EditApp() {<BR>
&nbsp;&nbsp;super(&quot;WYSIWYG Text Editor&quot;);<BR>
&nbsp;&nbsp;programName = getTitle();<BR>
&nbsp;&nbsp;setup();<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(text.preferredSize());<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void setup() {<BR>
&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;text = new TextArea(25,80);<BR>
&nbsp;&nbsp;text.setFont(currentFont);<BR>
&nbsp;&nbsp;add(&quot;Center&quot;,text);<BR>
&nbsp;&nbsp;setMenuBar(menuBar);<BR>
&nbsp;&nbsp;setCursor(TEXT_CURSOR);<BR>
&nbsp;}<BR>
&nbsp;public void readFile(String file) {<BR>
&nbsp;&nbsp;DataInputStream inStream;<BR>
&nbsp;&nbsp;try{<BR>
&nbsp;&nbsp;&nbsp;inStream = new DataInputStream(new FileInputStream(file));
<BR>
&nbsp;&nbsp;}catch (IOException ex){<BR>
&nbsp;&nbsp;&nbsp;notifyUser(&quot;Error opening file&quot;);
<BR>
&nbsp;&nbsp;&nbsp;return;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;try{<BR>
&nbsp;&nbsp;&nbsp;String newText=&quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;String line;<BR>
&nbsp;&nbsp;while((line=inStream.readLine())!=null)<BR>
&nbsp;&nbsp;&nbsp;newText=newText+line+&quot;\n&quot;;<BR>
&nbsp;&nbsp;text.setText(newText);<BR>
&nbsp;&nbsp;&nbsp;inStream.close();<BR>
&nbsp;&nbsp;}catch (IOException ex){<BR>
&nbsp;&nbsp;&nbsp;notifyUser(&quot;Error reading file&quot;);
<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;public void writeFile(String file) {<BR>
&nbsp;&nbsp;DataOutputStream outStream;<BR>
&nbsp;&nbsp;try{<BR>
&nbsp;&nbsp;&nbsp;outStream = new DataOutputStream(new FileOutputStream(file));
<BR>
&nbsp;&nbsp;}catch (IOException ex){<BR>
&nbsp;&nbsp;&nbsp;notifyUser(&quot;Error opening file&quot;);
<BR>
&nbsp;&nbsp;&nbsp;return;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;try{<BR>
&nbsp;&nbsp;&nbsp;outStream.writeBytes(text.getText());<BR>
&nbsp;&nbsp;&nbsp;outStream.close();<BR>
&nbsp;&nbsp;}catch (IOException ex){<BR>
&nbsp;&nbsp;&nbsp;notifyUser(&quot;Error writing file&quot;);
<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;public void notifyUser(String s) {<BR>
&nbsp;&nbsp;String text[] = {s};<BR>
&nbsp;&nbsp;String buttons[] = {&quot;OK&quot;};<BR>
&nbsp;&nbsp;new Notification(this,&quot;Error&quot;,true,text,buttons);
<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;return true;<BR>
&nbsp;}else if(event.id==Event.GOT_FOCUS &amp;&amp; !(event.target
instanceof TextArea)) {<BR>
&nbsp;&nbsp;setCursor(DEFAULT_CURSOR);<BR>
&nbsp;&nbsp;return true;<BR>
&nbsp;}else if(event.id==Event.LOST_FOCUS) {<BR>
&nbsp;&nbsp;setCursor(TEXT_CURSOR);<BR>
&nbsp;&nbsp;return true;<BR>
&nbsp;}else if(event.id==Event.ACTION_EVENT){<BR>
&nbsp;&nbsp;String arg = (String) event.arg;<BR>
&nbsp;&nbsp;if(event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;if(processFileMenu(arg)) return true;<BR>
&nbsp;&nbsp;&nbsp;if(processFormatMenu(arg)) return true;<BR>
&nbsp;&nbsp;}else if(event.target instanceof Button){<BR>
&nbsp;&nbsp;if(&quot;Select&quot;.equals(arg)){<BR>
&nbsp;&nbsp;&nbsp;if(fd != null) {<BR>
&nbsp;&nbsp;&nbsp;if(fd.isChanged()) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;currentFont = fd.getFont();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;fd.dispose();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;text.setFont(currentFont);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;if(cd != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(cd.isChanged()) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentColor = cd.getColor();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cd.dispose();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text.setForeground(currentColor);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text.setText(text.getText());<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
}<BR>
return false;<BR>
}<BR>
public boolean processFileMenu(String s) {<BR>
&nbsp;if(&quot;New&quot;.equals(s)){<BR>
&nbsp;&nbsp;text.setText(&quot;&quot;);<BR>
&nbsp;&nbsp;return true;<BR>
&nbsp;}else if(&quot;Open&quot;.equals(s)){<BR>
&nbsp;&nbsp;openFile.show();<BR>
&nbsp;&nbsp;String inFile = openFile.getFile();<BR>
&nbsp;&nbsp;readFile(inFile);<BR>
&nbsp;&nbsp;return true;<BR>
&nbsp;}else if(&quot;Save As&quot;.equals(s)){<BR>
&nbsp;&nbsp;saveFile.show();<BR>
&nbsp;&nbsp;String outFile = saveFile.getFile();<BR>
&nbsp;&nbsp;writeFile(outFile);<BR>
&nbsp;&nbsp;return true;<BR>
&nbsp;}else if(&quot;Exit&quot;.equals(s)){<BR>
&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;return true;<BR>
&nbsp;}<BR>
&nbsp;return false;<BR>
&nbsp;}<BR>
&nbsp;public boolean processFormatMenu(String s) {<BR>
&nbsp;if(&quot;Font&quot;.equals(s)){<BR>
&nbsp;&nbsp;fd = new FontDialog(this,currentFont);<BR>
&nbsp;&nbsp;fd.show();<BR>
&nbsp;&nbsp;return true;<BR>
&nbsp;}else if(&quot;Color&quot;.equals(s)){<BR>
&nbsp;&nbsp;cd = new ColorDialog(this,currentColor);<BR>
&nbsp;&nbsp;cd.show();<BR>
&nbsp;&nbsp;return true;<BR>
&nbsp;}<BR>
&nbsp;return false;<BR>
&nbsp;}<BR>
}<BR>
class Notification extends MessageDialog {<BR>
&nbsp;public Notification(Frame parent,String title,boolean modal,String
text[],<BR>
&nbsp;String buttons[]) {<BR>
&nbsp;super(parent,title,modal,text,buttons);<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;dispose();<BR>
&nbsp;&nbsp;return true;<BR>
&nbsp;}else if(event.id==Event.ACTION_EVENT &amp;&amp; event.target
instanceof Button){<BR>
&nbsp;&nbsp;dispose();<BR>
&nbsp;&nbsp;return true;<BR>
&nbsp;}<BR>
&nbsp;return false;<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">EditApp</FONT></TT> program displays
the opening window shown in <A HREF="f22-2.gif" >Figure 22.2</A>.
<P>
<A HREF="f22-2.gif"><B>Figure 22.2 :</B><I> The <TT>EditApp</TT> opening window.</I></A>
<P>
Select Open from the File menu as shown in <A HREF="f22-3.gif" >Figure 22.3</A>
and use the Open File dialog box, shown in <A HREF="f22-4.gif" >Figure 22.4</A>,
to open the <TT><FONT FACE="Courier">EditApp.java</FONT></TT>
source code file.
<P>
<A HREF="f22-3.gif"><B>Figure 22.3 :</B><I> The File menu.</I></A>
<P>
<P>
<A HREF="f22-4.gif"><B>Figure 22.4 :</B><I> The Open File dialog box.</I></A>
<P>
The text of the <TT><FONT FACE="Courier">EditApp.java</FONT></TT>
source file is read into the program and displayed in the window
using a 12-point Courier font, as shown in <A HREF="f22-5.gif" >Figure 22.5</A>.
<P>
<A HREF="f22-5.gif"><B>Figure 22.5 :</B><I> Editing <TT>EditApp.java</TT></I></A>
<P>
Select the Font menu item from the Format menu to change the current
font used to display the text, as shown in <A HREF="f22-6.gif" >Figure 22.6</A>.
<P>
<A HREF="f22-6.gif"><B>Figure 22.6 :</B><I> The Format menu.</I></A>
<P>
The Select a font: dialog box is displayed, as shown in <A HREF="f22-7.gif" >Figure 22.7</A>.
Use this dialog box to select a 14-point Bold Italic Helvetica
font, as shown in <A HREF="f22-8.gif" >Figure 22.8</A>.
<P>
<A HREF="f22-7.gif"><B>Figure 22.7 :</B><I> The Font dialog box.</I></A>
<P>
<P>
<A HREF="f22-8.gif"><B>Figure 22.8 :</B><I> Selecting a new font.</I></A>
<P>
The text's display is updated, as shown in <A HREF="f22-9.gif" >Figure 22.9</A>.
<P>
<A HREF="f22-9.gif"><B>Figure 22.9 :</B><I> Updated text.</I></A>
<P>
Select the Color menu item from the Format menu. The Select a
color: dialog box is displayed, as shown in <A HREF="f22-10.gif" >Figure 22.10</A>.
Use this dialog box to change the color associated with the text's
display. Try using primary colors such as blue or yellow. Other
colors might not display correctly, depending on the number of
colors supported by your video card and the current color map
associated with the display.
<P>
<A HREF="f22-10.gif"><B>Figure 22.10 :</B><I> The color dialog box.</I></A>
<P>
The <TT><FONT FACE="Courier">EditApp</FONT></TT> program makes
use of the <TT><FONT FACE="Courier">FontDialog</FONT></TT> and
<TT><FONT FACE="Courier">ColorDialog</FONT></TT> classes, which
are covered in the following sections. The basic functionality
of the <TT><FONT FACE="Courier">EditApp</FONT></TT> program remains
the same as the <TT><FONT FACE="Courier">TextEdit</FONT></TT>
program. It has been streamlined to use the <TT><FONT FACE="Courier">MyMenuBar</FONT></TT>
and <TT><FONT FACE="Courier">MyMenu</FONT></TT> classes and adds
the <TT><FONT FACE="Courier">fd</FONT></TT> and <TT><FONT FACE="Courier">cd</FONT></TT>
variables to refer to the <TT><FONT FACE="Courier">FontDialog</FONT></TT>
and <TT><FONT FACE="Courier">ColorDialog</FONT></TT> objects created
by the program.
<P>
The <TT><FONT FACE="Courier">setup()</FONT></TT> method specifies
that <TT><FONT FACE="Courier">TEXT_CURSOR</FONT></TT> should be
used, by default, and extra event-handling code has been added
to switch between <TT><FONT FACE="Courier">TEXT_CURSOR</FONT></TT>
and <TT><FONT FACE="Courier">DEFAULT_CURSOR</FONT></TT>, depending
on whether the text is in the locus of the text area or the menu
bar.
<P>
The <TT><FONT FACE="Courier">Notification</FONT></TT> class has
also been updated to take advantage of the <TT><FONT FACE="Courier">MessageDialog</FONT></TT>
class.
<P>
The main changes to the <TT><FONT FACE="Courier">EditApp</FONT></TT>
program are to its event handling. The <TT><FONT FACE="Courier">GOT_FOCUS</FONT></TT>
event is handled by checking the target of the event to determine
whether it is the <TT><FONT FACE="Courier">TextArea</FONT></TT>
object. If it is not, the cursor is changed to <TT><FONT FACE="Courier">DEFAULT_CURSOR</FONT></TT>.
The cursor is changed back to <TT><FONT FACE="Courier">TEXT_CURSOR</FONT></TT>
when it handles the <TT><FONT FACE="Courier">LOST_FOCUS</FONT></TT>
event. This event is handled when the object getting the focus
is the <TT><FONT FACE="Courier">TextArea</FONT></TT> object.
<P>
When an <TT><FONT FACE="Courier">ACTION_EVENT</FONT></TT> occurs
whose target is an instance of the <TT><FONT FACE="Courier">MenuItem</FONT></TT>
class, the <TT><FONT FACE="Courier">processFileMenu()</FONT></TT>
and <TT><FONT FACE="Courier">processFormatMenu()</FONT></TT> methods
are invoked to process the associated menu items. When <TT><FONT FACE="Courier">ACTION_EVENT</FONT></TT>
is an instance of the <TT><FONT FACE="Courier">Button</FONT></TT>
class, signifying a <TT><FONT FACE="Courier">FontDialog</FONT></TT>
or <TT><FONT FACE="Courier">ColorDialog</FONT></TT> selection,
the current objects associated with the <TT><FONT FACE="Courier">fd</FONT></TT>
and <TT><FONT FACE="Courier">cd</FONT></TT> variables are checked
to see which one is associated with an object. The <TT><FONT FACE="Courier">isChanged()</FONT></TT>
methods of the dialog boxes are used to determine whether a font
or color change occurred. The <TT><FONT FACE="Courier">getFont()</FONT></TT>
and <TT><FONT FACE="Courier">getColor()</FONT></TT> methods are
used to set the <TT><FONT FACE="Courier">currentFont</FONT></TT>
and <TT><FONT FACE="Courier">currentColor</FONT></TT> variables,
the dialog boxes are disposed of using the <TT><FONT FACE="Courier">dispose()</FONT></TT>
method of the <TT><FONT FACE="Courier">Window</FONT></TT> class,
and the font, color, and text are set appropriately.
<P>
The <TT><FONT FACE="Courier">processFileMenu()</FONT></TT> method
checks to see if the currently selected menu item is a File menu
item and processes it using the same approach as in the <TT><FONT FACE="Courier">TextEdit</FONT></TT>
program. The <TT><FONT FACE="Courier">processFormatMenu()</FONT></TT>
method checks for a Font or Color menu item and processes the
menu item by creating a new <TT><FONT FACE="Courier">FontDialog</FONT></TT>
or <TT><FONT FACE="Courier">ColorDialog</FONT></TT> object and
then displaying the dialog box using the <TT><FONT FACE="Courier">show()</FONT></TT>
method of the <TT><FONT FACE="Courier">Window</FONT></TT> class.
<H3><A NAME="TheFontDialogClass">The <TT><FONT SIZE=4 FACE="Courier">FontDialog</FONT></TT><FONT SIZE=4>
Class</FONT></A></H3>
<P>
The <TT><FONT FACE="Courier">FontDialog</FONT></TT> class provides
a handy encapsulation of the dialog boxes commonly used to select
a font from the list of available fonts provided by the system.
The source code of the <TT><FONT FACE="Courier">FontDialog</FONT></TT>
class is shown in Listing 22.3.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 22.3. The source code of the </B><TT><B><FONT FACE="Courier">FontDialog</FONT></B></TT><B>
class.</B><P>
<TT><FONT FACE="Courier">package jdg.ch22;<BR>
<BR>
import java.awt.*;<BR>
import jdg.ch21.MyList;<BR>
<BR>
public class FontDialog extends Dialog {<BR>
&nbsp;String fontName;<BR>
&nbsp;int fontStyle;<BR>
&nbsp;int fontSize;<BR>
&nbsp;String fontNames[];<BR>
&nbsp;String styleNames[] = {&quot;Plain&quot;,&quot;Bold&quot;,&quot;Italic&quot;,&quot;Bold
Italic&quot;};<BR>
&nbsp;String sizeNames[] = {&quot;10&quot;,&quot;12&quot;,&quot;14&quot;,&quot;18&quot;,&quot;24&quot;,&quot;36&quot;,&quot;72&quot;};
<BR>
&nbsp;int styles[] = {Font.PLAIN,Font.BOLD,Font.ITALIC,Font.BOLD+Font.ITALIC};
<BR>
&nbsp;int sizes[] = {10,12,14,18,24,36,72};<BR>
&nbsp;MyList fontList;<BR>
&nbsp;MyList styleList = new MyList(5,false,styleNames);<BR>
&nbsp;MyList sizeList = new MyList(5,false,sizeNames);<BR>
&nbsp;Toolkit toolkit;<BR>
&nbsp;Font newFont;<BR>
&nbsp;boolean fontChanged;<BR>
&nbsp;public FontDialog(Frame parent,Font currentFont) {<BR>
&nbsp;super(parent,&quot;Select a font:&quot;,true);<BR>
&nbsp;toolkit = parent.getToolkit();<BR>
&nbsp;newFont = currentFont;<BR>
&nbsp;setupFonts();<BR>
&nbsp;setupPanels();<BR>
&nbsp;setBackground(Color.lightGray);<BR>
&nbsp;setForeground(Color.black);<BR>
&nbsp;pack();<BR>
&nbsp;resize(preferredSize());<BR>
&nbsp;}<BR>
&nbsp;void setupFonts() {<BR>
&nbsp;fontName=newFont.getName();<BR>
&nbsp;fontStyle=newFont.getStyle();<BR>
&nbsp;fontSize=newFont.getSize();<BR>
&nbsp;fontNames = toolkit.getFontList();<BR>
&nbsp;fontList = new MyList(5,false,fontNames);<BR>
&nbsp;}<BR>
&nbsp;void setupPanels() {<BR>
&nbsp;Panel mainPanel = new Panel();<BR>
&nbsp;mainPanel.setLayout(new GridLayout(1,3));<BR>
&nbsp;Panel fontPanel = new Panel();<BR>
&nbsp;fontPanel.setLayout(new BorderLayout());<BR>
&nbsp;Label fontLabel = new Label(&quot;Font:&quot;);<BR>
&nbsp;fontPanel.add(&quot;North&quot;,fontLabel);<BR>
&nbsp;fontPanel.add(&quot;Center&quot;,fontList);<BR>
&nbsp;Panel stylePanel = new Panel();<BR>
&nbsp;stylePanel.setLayout(new BorderLayout());<BR>
&nbsp;Label styleLabel = new Label(&quot;Style:&quot;);<BR>
&nbsp;stylePanel.add(&quot;North&quot;,styleLabel);<BR>
&nbsp;stylePanel.add(&quot;Center&quot;,styleList);<BR>
&nbsp;Panel sizePanel = new Panel();<BR>
&nbsp;sizePanel.setLayout(new BorderLayout());<BR>
&nbsp;Label sizeLabel = new Label(&quot;Size:&quot;);<BR>
&nbsp;sizePanel.add(&quot;North&quot;,sizeLabel);<BR>
&nbsp;sizePanel.add(&quot;Center&quot;,sizeList);<BR>
&nbsp;mainPanel.add(fontPanel);<BR>
&nbsp;mainPanel.add(stylePanel);<BR>
&nbsp;mainPanel.add(sizePanel);<BR>
&nbsp;Font plainFont = new Font(&quot;Helvetica&quot;,Font.PLAIN,12);
<BR>
&nbsp;Font boldFont = new Font(&quot;Helvetica&quot;,Font.BOLD,12);
<BR>
&nbsp;mainPanel.setFont(plainFont);<BR>
&nbsp;fontLabel.setFont(boldFont);<BR>
&nbsp;styleLabel.setFont(boldFont);<BR>
&nbsp;sizeLabel.setFont(boldFont);<BR>
&nbsp;Panel buttonPanel = new Panel();<BR>
&nbsp;buttonPanel.setLayout(new FlowLayout());<BR>
&nbsp;buttonPanel.add(new Button(&quot;Select&quot;));<BR>
&nbsp;buttonPanel.add(new Button(&quot;Cancel&quot;));<BR>
&nbsp;buttonPanel.setFont(boldFont);<BR>
&nbsp;add(&quot;Center&quot;,mainPanel);<BR>
&nbsp;add(&quot;South&quot;,buttonPanel);<BR>
&nbsp;}<BR>
&nbsp;public boolean isChanged() {<BR>
&nbsp;return fontChanged;<BR>
&nbsp;}<BR>
&nbsp;public Font getFont() {<BR>
&nbsp;return newFont;<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;dispose();<BR>
&nbsp;&nbsp;return true;<BR>
&nbsp;}else if(event.id==Event.ACTION_EVENT) {<BR>
&nbsp;&nbsp;if(event.target instanceof Button) {<BR>
&nbsp;&nbsp;if(&quot;Select&quot;.equals(event.arg)) {<BR>
&nbsp;&nbsp;&nbsp;updateNewFont();<BR>
&nbsp;&nbsp;&nbsp;show(false);<BR>
&nbsp;&nbsp;&nbsp;return false;<BR>
&nbsp;&nbsp;}else if(&quot;Cancel&quot;.equals(event.arg)) {<BR>
&nbsp;&nbsp;&nbsp;dispose();<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
return false;<BR>
}<BR>
void updateNewFont() {<BR>
&nbsp;if(fontList.getSelectedIndex() != -1) fontName = fontList.getSelectedItem();
<BR>
&nbsp;if(styleList.getSelectedIndex() != -1) <BR>
&nbsp;&nbsp;fontStyle = styles[styleList.getSelectedIndex()];
<BR>
&nbsp;if(sizeList.getSelectedIndex() != -1) <BR>
&nbsp;&nbsp;fontSize = sizes[sizeList.getSelectedIndex()];<BR>
&nbsp;newFont = new Font(fontName,fontStyle,fontSize);<BR>
&nbsp;fontChanged = true;<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">FontDialog</FONT></TT> class creates
the Font dialog box shown in <A HREF="f22-7.gif" >Figure 22.7</A>.
This type of dialog box is used in most text-processing applications.
You can reuse the <TT><FONT FACE="Courier">FontDialog</FONT></TT>
class, as it is currently defined, in your Java programs. You
can also subclass <TT><FONT FACE="Courier">FontDialog</FONT></TT>
and add your own custom enhancements.
<P>
The <TT><FONT FACE="Courier">FontDialog</FONT></TT> class declares
a number of variables that are used in the generation and processing
of the Font dialog box. The <TT><FONT FACE="Courier">fontName</FONT></TT>,
<TT><FONT FACE="Courier">fontStyle</FONT></TT>, and <TT><FONT FACE="Courier">fontSize</FONT></TT>
variables are used to keep track of the parameters of the currently
selected font. The <TT><FONT FACE="Courier">fontNames[]</FONT></TT>
array identifies the names of the fonts that are currently supported
by the system. The <TT><FONT FACE="Courier">styles[]</FONT></TT>,
<TT><FONT FACE="Courier">styleNames[]</FONT></TT>, <TT><FONT FACE="Courier">sizes[]</FONT></TT>,
and <TT><FONT FACE="Courier">sizeNames[]</FONT></TT> arrays are
used to maintain <TT><FONT FACE="Courier">int</FONT></TT> and
<TT><FONT FACE="Courier">String</FONT></TT> lists of the font
styles and sizes that are displayed in the dialog box. The <TT><FONT FACE="Courier">fontList</FONT></TT>,
<TT><FONT FACE="Courier">styleList</FONT></TT>, and <TT><FONT FACE="Courier">sizeList</FONT></TT>
variables refer to the <TT><FONT FACE="Courier">MyList</FONT></TT>
objects displayed in the dialog box. The <TT><FONT FACE="Courier">toolkit</FONT></TT>
variable refers to the <TT><FONT FACE="Courier">Toolkit</FONT></TT>
object of the window containing the Font dialog box. The <TT><FONT FACE="Courier">fontChanged</FONT></TT>
variable keeps track of whether the user has selected a new font,
and the <TT><FONT FACE="Courier">newFont</FONT></TT> variable
maintains the <TT><FONT FACE="Courier">Font</FONT></TT> object
that is selected by the user.
<P>
The <TT><FONT FACE="Courier">FontDialog</FONT></TT> constructor
uses the superclass constructor call statement to create a modal
dialog box with the title Select a font:. The toolkit associated
with the window containing the dialog box is obtained using the
<TT><FONT FACE="Courier">getToolkit()</FONT></TT> method of the
<TT><FONT FACE="Courier">Window</FONT></TT> class. The <TT><FONT FACE="Courier">newFont</FONT></TT>
variable, representing the user's font selection, is set to the
default value of the currently selected font. This font is passed
to the <TT><FONT FACE="Courier">FontDialog</FONT></TT> constructor
using the <TT><FONT FACE="Courier">currentFont</FONT></TT> parameter.
The <TT><FONT FACE="Courier">FontDialog</FONT></TT> constructor
invokes the <TT><FONT FACE="Courier">setupFonts()</FONT></TT>
and <TT><FONT FACE="Courier">setupPanels()</FONT></TT> methods
to perform the bulk of the dialog box setup. It then packs the
dialog box window and resizes it. Note that the constructor does
not invoke the <TT><FONT FACE="Courier">show()</FONT></TT> method
to display the dialog box. The actual display of the dialog box
must be performed by the containing window.
<P>
The <TT><FONT FACE="Courier">setupFonts()</FONT></TT> method assigns
default values to the <TT><FONT FACE="Courier">fontName</FONT></TT>,
<TT><FONT FACE="Courier">fontStyle</FONT></TT>, and <TT><FONT FACE="Courier">fontSize</FONT></TT>
variables based on the values of the current font stored in the
<TT><FONT FACE="Courier">newFont</FONT></TT> variable. The <TT><FONT FACE="Courier">getFontList()</FONT></TT>
method of the <TT><FONT FACE="Courier">Toolkit</FONT></TT> class
is used to set the <TT><FONT FACE="Courier">fontNames[]</FONT></TT>
array to the list of fonts currently supported by the system.
These names are converted to a list using the <TT><FONT FACE="Courier">MyList()</FONT></TT>
constructor.
<P>
The <TT><FONT FACE="Courier">setupPanels()</FONT></TT> method
performs all the grunt work, adding the lists to the dialog box
and rearranging them in an appealing fashion. The <TT><FONT FACE="Courier">mainPanel</FONT></TT>
variable is used to refer to the overall panel into which the
<TT><FONT FACE="Courier">fontPanel</FONT></TT>, <TT><FONT FACE="Courier">stylePanel</FONT></TT>,
and <TT><FONT FACE="Courier">sizePanel</FONT></TT> objects are
inserted. The <TT><FONT FACE="Courier">mainPanel</FONT></TT> is
laid out as a three-column set of subpanels. These subpanels are
identified by the <TT><FONT FACE="Courier">fontPanel</FONT></TT>,
<TT><FONT FACE="Courier">stylePanel</FONT></TT>, and <TT><FONT FACE="Courier">sizePanel</FONT></TT>
variables. Each of these subpanels is laid out using a <TT><FONT FACE="Courier">BorderLayout</FONT></TT>
object. The label identifying the contents of the panel is added
to the top of the panel. The center of each panel contains the
three <TT><FONT FACE="Courier">MyList</FONT></TT> objects identified
by the <TT><FONT FACE="Courier">fontList</FONT></TT>, <TT><FONT FACE="Courier">styleList</FONT></TT>,
and <TT><FONT FACE="Courier">sizeList</FONT></TT> variables.
<P>
The Helvetica font is used for the contents of the Font dialog
box. The labels at the top of each column are set in a boldface
style. A second panel, referred to by the <TT><FONT FACE="Courier">buttonPanel</FONT></TT>
variable, is created with two buttons: Select and Cancel. These
buttons provide the user controls needed to accept or abort a
font selection. The <TT><FONT FACE="Courier">mainPanel</FONT></TT>
is added to the center of the Font dialog box and the <TT><FONT FACE="Courier">buttonPanel</FONT></TT>
is added to the bottom.
<P>
Two access methods are provided with the <TT><FONT FACE="Courier">FontDialog</FONT></TT>
class. The <TT><FONT FACE="Courier">isChanged()</FONT></TT> method
is used to query a <TT><FONT FACE="Courier">FontDialog</FONT></TT>
object to determine whether the user made a font selection. The
<TT><FONT FACE="Courier">getFont()</FONT></TT> method returns
the font selected by the user.
<P>
The events handled by <TT><FONT FACE="Courier">FontDialog</FONT></TT>
consist of the <TT><FONT FACE="Courier">WINDOW_DESTROY</FONT></TT>
event and the <TT><FONT FACE="Courier">ACTION_EVENT</FONT></TT>
events associated with the Select and Cancel buttons. The use
of the <TT><FONT FACE="Courier">WINDOW_DESTROY</FONT></TT> event
and Cancel button result in the destruction of the <TT><FONT FACE="Courier">FontDialog</FONT></TT>
object. The object is destroyed using the <TT><FONT FACE="Courier">dispose()</FONT></TT>
method of the <TT><FONT FACE="Courier">Window</FONT></TT> class.
The Select button invokes the <TT><FONT FACE="Courier">updateNewFont()</FONT></TT>
method to create a font based on the user's current list selections
and assign that font to the <TT><FONT FACE="Courier">newFont</FONT></TT>
variable. The Font dialog box is then hidden but not destroyed.
The <TT><FONT FACE="Courier">show()</FONT></TT> method of the
<TT><FONT FACE="Courier">Component</FONT></TT> class is used to
hide the dialog box.
<P>
The <TT><FONT FACE="Courier">updateNewFont()</FONT></TT> method
checks the <TT><FONT FACE="Courier">MyList</FONT></TT> objects
referred to by the <TT><FONT FACE="Courier">fontList</FONT></TT>,
<TT><FONT FACE="Courier">styleList</FONT></TT>, and <TT><FONT FACE="Courier">sizeList</FONT></TT>
variables to update the <TT><FONT FACE="Courier">fontName</FONT></TT>,
<TT><FONT FACE="Courier">fontStyle</FONT></TT>, and <TT><FONT FACE="Courier">fontSize</FONT></TT>
variables based on the user's selection. These variables are then
used to construct a new <TT><FONT FACE="Courier">Font</FONT></TT>
object, which is assigned to the <TT><FONT FACE="Courier">newFont</FONT></TT>
variable. The <TT><FONT FACE="Courier">fontChanged</FONT></TT>
flag is then set to indicate that a user font selection has occurred.
<H3><A NAME="TheColorDialogClass">The <TT><FONT SIZE=4 FACE="Courier">ColorDialog</FONT></TT><FONT SIZE=4>
Class</FONT></A></H3>
<P>
The <TT><FONT FACE="Courier">ColorDialog</FONT></TT> class is
very similar to, but simpler than, the <TT><FONT FACE="Courier">FontDialog</FONT></TT>
class. It allows the user to select a color from the list of colors
defined in the <TT><FONT FACE="Courier">Color</FONT></TT> class.
It provides a dialog box that is similar to that of <TT><FONT FACE="Courier">FontDialog</FONT></TT>,
but is much simpler because only one list-the list of available
color-is supported. The source code of the <TT><FONT FACE="Courier">ColorDialog</FONT></TT>
class is shown in Listing 22.4.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 22.4. The source code of the </B><TT><B><FONT FACE="Courier">ColorDialog</FONT></B></TT><B>
class.</B><P>
<TT><FONT FACE="Courier">package jdg.ch22;<BR>
<BR>
import java.awt.*;<BR>
import jdg.ch21.MyList;<BR>
<BR>
public class ColorDialog extends Dialog {<BR>
&nbsp;Color colors[] = {Color.black,Color.blue,Color.cyan,Color.darkGray,Color.gray,
<BR>
&nbsp;&nbsp;&nbsp;Color.green,Color.lightGray,Color.magenta,Color.orange,Color.pink,Color.red,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Color.white,Color.yellow};<BR>
&nbsp;&nbsp;String colorNames[] = {&quot;black&quot;,&quot;blue&quot;,&quot;cyan&quot;,&quot;darkGray&quot;,&quot;gray&quot;,&quot;green&quot;,
<BR>
&nbsp;&nbsp;&nbsp;&quot;lightGray&quot;,&quot;magenta&quot;,&quot;orange&quot;,&quot;pink&quot;,&quot;red&quot;,
<BR>
&nbsp;&nbsp;&nbsp;&quot;white&quot;,&quot;yellow&quot;};<BR>
&nbsp;&nbsp;MyList colorList = new MyList(5,false,colorNames);
<BR>
&nbsp;&nbsp;Color newColor;<BR>
&nbsp;&nbsp;boolean colorChanged;<BR>
&nbsp;public ColorDialog(Frame parent,Color currentColor) {<BR>
&nbsp;&nbsp;super(parent,&quot;Select a color:&quot;,true);<BR>
&nbsp;&nbsp;setupPanels();<BR>
&nbsp;&nbsp;setBackground(Color.lightGray);<BR>
&nbsp;&nbsp;setForeground(Color.black);<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(preferredSize());<BR>
&nbsp;}<BR>
&nbsp;void setupPanels() {<BR>
&nbsp;&nbsp;Panel colorPanel = new Panel();<BR>
&nbsp;&nbsp;colorPanel.setLayout(new BorderLayout());<BR>
&nbsp;&nbsp;Label colorLabel = new Label(&quot;Color:&quot;);
<BR>
&nbsp;&nbsp;colorPanel.add(&quot;North&quot;,colorLabel);<BR>
&nbsp;&nbsp;colorPanel.add(&quot;Center&quot;,colorList);<BR>
&nbsp;&nbsp;Font plainFont = new Font(&quot;Helvetica&quot;,Font.PLAIN,12);
<BR>
&nbsp;&nbsp;Font boldFont = new Font(&quot;Helvetica&quot;,Font.BOLD,12);
<BR>
&nbsp;&nbsp;colorLabel.setFont(boldFont);<BR>
&nbsp;&nbsp;colorList.setFont(plainFont);<BR>
&nbsp;&nbsp;Panel buttonPanel = new Panel();<BR>
&nbsp;&nbsp;buttonPanel.setLayout(new FlowLayout());<BR>
&nbsp;&nbsp;buttonPanel.add(new Button(&quot;Select&quot;));<BR>
&nbsp;&nbsp;buttonPanel.add(new Button(&quot;Cancel&quot;));<BR>
&nbsp;&nbsp;buttonPanel.setFont(boldFont);<BR>
&nbsp;&nbsp;add(&quot;Center&quot;,colorPanel);<BR>
&nbsp;&nbsp;add(&quot;South&quot;,buttonPanel);<BR>
&nbsp;}<BR>
&nbsp;public boolean isChanged() {<BR>
&nbsp;&nbsp;return colorChanged;<BR>
&nbsp;}<BR>
&nbsp;public Color getColor() {<BR>
&nbsp;&nbsp;return newColor;<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;dispose();<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.ACTION_EVENT) {<BR>
&nbsp;&nbsp;&nbsp;if(event.target instanceof Button) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(&quot;Select&quot;.equals(event.arg))
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(colorList.getSelectedIndex()
!= -1) <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newColor = colors[colorList.getSelectedIndex()];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colorChanged = true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;show(false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;Cancel&quot;.equals(event.arg))
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">ColorDialog</FONT></TT> class declares
the <TT><FONT FACE="Courier">colors[]</FONT></TT> array as an
array of color constants and the <TT><FONT FACE="Courier">colorNames[]</FONT></TT>
array as the names associated with these color constants. The
<TT><FONT FACE="Courier">colorList</FONT></TT> variable refers
to the <TT><FONT FACE="Courier">MyList</FONT></TT> object that
presents the <TT><FONT FACE="Courier">colorNames[]</FONT></TT>
array to the user. The <TT><FONT FACE="Courier">newColor</FONT></TT>
variable identifies the color selected by the user, and the <TT><FONT FACE="Courier">colorChanged</FONT></TT>
variable indicates whether a user color selection has been made.
<P>
The <TT><FONT FACE="Courier">ColorDialog</FONT></TT> constructor
invokes the <TT><FONT FACE="Courier">Dialog</FONT></TT> constructor
to set the title of the dialog box. It then invokes the <TT><FONT FACE="Courier">setupPanels()</FONT></TT>
method to perform most of the setup of the dialog box's internal
components. The foreground and background colors are set and then
the dialog box is packed and resized.
<P>
The <TT><FONT FACE="Courier">setupPanels()</FONT></TT> method
creates and adds two panels to the dialog box. These panels are
identified by the <TT><FONT FACE="Courier">colorPanel</FONT></TT>
and <TT><FONT FACE="Courier">buttonPanel</FONT></TT> variables.
The panel identified by the <TT><FONT FACE="Courier">colorPanel</FONT></TT>
variable contains the Color: label and the <TT><FONT FACE="Courier">MyList</FONT></TT>
object referred to by the <TT><FONT FACE="Courier">colorList</FONT></TT>
variable. The button panel is implemented in the same manner as
in the <TT><FONT FACE="Courier">FontDialog</FONT></TT> class.
<P>
The <TT><FONT FACE="Courier">isChanged()</FONT></TT> and <TT><FONT FACE="Courier">getColor()</FONT></TT>
methods are used to determine whether the user has selected a
color and, if so, to return the color selected.
<P>
The <TT><FONT FACE="Courier">WINDOW_DESTROY</FONT></TT> event
and the clicking of the Cancel button are handled by invoking
the <TT><FONT FACE="Courier">dispose()</FONT></TT> method of the
<TT><FONT FACE="Courier">Window</FONT></TT> class. This causes
the dialog box to be destroyed and its resources to be returned
to the system. The clicking of the Select button is handled by
invoking the <TT><FONT FACE="Courier">getSelectedIndex()</FONT></TT>
method of the <TT><FONT FACE="Courier">List</FONT></TT> class
to see if a color was selected and setting the <TT><FONT FACE="Courier">newColor</FONT></TT>
variable to the selected color. The <TT><FONT FACE="Courier">colorChanged</FONT></TT>
flag is updated to indicate that a color has been selected and
the <TT><FONT FACE="Courier">show()</FONT></TT> method causes
the dialog box to be hidden.
<P>
<A NAME="Summary"><B><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></B></A>
<P>
This chapter covers the details of using the text- and font-related
classes. It shows you how to use the text-based classes provided
by Java and how to display text with the canvas. It also explains
how the <TT><FONT FACE="Courier">Font</FONT></TT> and <TT><FONT FACE="Courier">FontMetrics</FONT></TT>
classes are used to provide custom control of text display. <A HREF="ch23.htm" >Chapter 23</A>,
&quot;The Canvas,&quot; covers the <TT><FONT FACE="Courier">Canvas</FONT></TT>
and <TT><FONT FACE="Courier">Graphics</FONT></TT> classes.
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



