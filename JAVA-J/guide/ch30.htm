<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META>
<H1><FONT COLOR=#FF0000>Chapter 30</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Sample Applets</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#HelloWeb" >Hello Web!</A>
<LI><A HREF="#AnAudioPlayer" >An Audio Player</A>
<LI><A HREF="#BlackJackRevisited" >BlackJack Revisited</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
This chapter is the first of six chapters that cover applet programming.
It introduces you to Java applets by way of several examples that
illustrate different aspects of the classes and methods used to
implement simple applets. Its purpose is to quickly get you up
to speed in developing applets. Subsequent chapters fill in the
details of the classes and methods that are introduced here. You
should approach this chapter by trying to get a good general understanding
of what is going on in the sample applets without dwelling on
the details. You will learn the details when you study them in
later chapters. This chapter assumes that you have covered the
window-programming examples in Part IV, &quot;Window Programming.&quot;
<H2><A NAME="HelloWeb"><FONT SIZE=5 COLOR=#FF0000>Hello Web!</FONT></A>
</H2>
<P>
The first program that you wrote in <A HREF="ch4.htm" >Chapter 4</A>,
&quot;First Programs: Hello World! to BlackJack,&quot; was the
<TT><FONT FACE="Courier">HelloWorldApp</FONT></TT> program. It
displayed the traditional <TT><FONT FACE="Courier">Hello World!</FONT></TT>
text to the console window. The main purpose of the program was
to show you how to develop a simple Java program that actually
produced some noticeable effect. The same rationale applies to
the <TT><FONT FACE="Courier">HelloWeb</FONT></TT> applet that
you'll develop shortly. The program shows you how to write a simple
applet that displays the text <TT><FONT FACE="Courier">Hello Web!</FONT></TT>
to the browser window. The code for the <TT><FONT FACE="Courier">HelloWeb</FONT></TT>
applet is shown in Listing 30.1.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 30.1. The source code of the </B><TT><B><FONT FACE="Courier">HelloWeb</FONT></B></TT><B>
applet.</B>
<P>
<TT><FONT FACE="Courier">import java.applet.*;<BR>
import java.awt.*;<BR>
<BR>
public class HelloWeb extends Applet {<BR>
&nbsp;&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;g.setFont(new Font(&quot;TimesRoman&quot;,Font.BOLD+Font.ITALIC,36));
<BR>
&nbsp;&nbsp;g.setColor(Color.blue);<BR>
&nbsp;&nbsp;g.drawString(&quot;Hello Web!&quot;,10,80);<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Create the <TT><FONT FACE="Courier">HelloWeb.java</FONT></TT>
file in the <TT><FONT FACE="Courier">\java\jdg\ch30</FONT></TT>
directory and compile it using <TT><FONT FACE="Courier">javac
HelloWeb.java</FONT></TT>.
<P>
In order to run the <TT><FONT FACE="Courier">HelloWeb</FONT></TT>
applet, you need to include it in a Web page. Using a text editor,
create the HTML file shown in Listing 30.2 and save it as <TT><FONT FACE="Courier">\java\jdg\ch30\helloweb.htm</FONT></TT>.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 30.2. The </B><TT><B><FONT FACE="Courier">helloweb.htm</FONT></B></TT><B>
file.</B>
<P>
<TT><FONT FACE="Courier">&lt;HTML&gt;<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt;Hello Web!&lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
&lt;BODY&gt;<BR>
&lt;APPLET CODE=&quot;HelloWeb.class&quot; WIDTH=200 HEIGHT=200&gt;
<BR>
[HelloWeb applet]<BR>
&lt;/APPLET&gt;<BR>
&lt;/BODY&gt;<BR>
&lt;/HTML&gt;</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Now open the <TT><FONT FACE="Courier">helloweb.htm</FONT></TT>
file with your Java-enabled browser. I use Netscape 2.0; my browser
display appears as shown in <A HREF="f30-1.gif" >Figure 30.1</A>.
<P>
<A HREF="f30-1.gif"><B>Figure 30.1 : </B><I>The <TT>hell.htm</TT> file, as displayed by a browser.</I></A>
<P>
Although this example is rather trivial-you could have created
the same results just using HTML-it provides a basic starting
point from which to embark on your study of applets. Let's cover
the <TT><FONT FACE="Courier">HelloWeb.java</FONT></TT> applet
first, and then examine the <TT><FONT FACE="Courier">helloweb.htm</FONT></TT>
file.
<P>
The <TT><FONT FACE="Courier">HelloWeb</FONT></TT> applet, like
all Java applets, extends the <TT><FONT FACE="Courier">Applet</FONT></TT>
class or one of its subclasses. <TT><FONT FACE="Courier">HelloWeb</FONT></TT>
consists of a single method-the <TT><FONT FACE="Courier">paint()</FONT></TT>
method, which you encountered several times in Part IV. Because
the <TT><FONT FACE="Courier">Applet</FONT></TT> class is a subclass
of <TT><FONT FACE="Courier">Panel</FONT></TT>, many of the window-programming
techniques that you studied in Part IV come into play. The <TT><FONT FACE="Courier">paint()</FONT></TT>
method is passed a <TT><FONT FACE="Courier">Graphics</FONT></TT>
object that it uses to paint the screen. In this case, I set the
current font to a bold, italic, 36-point TimesRoman font and set
the drawing color to blue. I then use the <TT><FONT FACE="Courier">drawString()</FONT></TT>
method of the <TT><FONT FACE="Courier">Graphics</FONT></TT> class
to draw the text <TT><FONT FACE="Courier">Hello Web!</FONT></TT>
on the screen at position 10,80.
<P>
The <TT><FONT FACE="Courier">helloweb.htm</FONT></TT> file is
the Web page that is used to contain the <TT><FONT FACE="Courier">HelloWeb</FONT></TT>
applet. Web pages are written in the <I>Hypertext Markup Language</I>
(HTML). Learning HTML, in itself, is the subject of many books.
Here I'll use a common HTML document to hold the applets and not
go off on a tangent about learning HTML.
<P>
The <TT><FONT FACE="Courier">helloweb.htm</FONT></TT> file begins
and ends with the <TT><FONT FACE="Courier">&lt;HTML&gt;</FONT></TT>
and <TT><FONT FACE="Courier">&lt;/HTML&gt;</FONT></TT> tags. These
tags signify the start and finish of an HTML file. The HTML file
consists of a head and a body. The <I>head</I> is contained between
the <TT><FONT FACE="Courier">&lt;HEAD&gt;</FONT></TT> and <TT><FONT FACE="Courier">&lt;/HEAD&gt;</FONT></TT>
tags. Within the head is the <I>title</I>, which is displayed
at the top of the browser window. The title is contained within
the <TT><FONT FACE="Courier">&lt;TITLE&gt;</FONT></TT> and <TT><FONT FACE="Courier">&lt;/TITLE&gt;</FONT></TT>
tags.
<P>
The <I>body</I> of an HTML file is where all the Web page descriptions
are located. The body is enclosed within the <TT><FONT FACE="Courier">&lt;BODY&gt;</FONT></TT>
and <TT><FONT FACE="Courier">&lt;/BODY</FONT></TT>&gt; tags. The
body of this document, and of those used in the other examples
of this chapter, consists of a single applet. The applet is denoted
by the <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT> and
<TT><FONT FACE="Courier">&lt;/APPLET&gt;</FONT></TT> tags.
<P>
Within the opening <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT>
tag are several attributes. The <TT><FONT FACE="Courier">CODE</FONT></TT>
attribute has the value <TT><FONT FACE="Courier">HelloWeb.class</FONT></TT>,
which identifies the class file for this applet. Its <TT><FONT FACE="Courier">WIDTH</FONT></TT>
and <TT><FONT FACE="Courier">HEIGHT</FONT></TT> attributes specify
the dimensions of the applet, as displayed on the browser window.
<P>
The text <TT><FONT FACE="Courier">[HelloWeb applet]</FONT></TT>,
appearing between the <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT>
and <TT><FONT FACE="Courier">&lt;/APPLET&gt;</FONT></TT> tags,
is displayed by browsers that are not capable of loading Java
applets.
<H2><A NAME="AnAudioPlayer"><FONT SIZE=5 COLOR=#FF0000>An Audio
Player</FONT></A></H2>
<P>
The <TT><FONT FACE="Courier">Applet</FONT></TT> class, as small
as it is, provides a few very useful features for developing attractive
Web pages. Among these are the capability to load and play audio
files and to easily load and display images. The <TT><FONT FACE="Courier">AudioPlayer</FONT></TT>
applet, developed in this section, shows off these features. The
source code for the <TT><FONT FACE="Courier">AudioPlayer</FONT></TT>
applet is shown in Listing 30.3.<BR>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=421>
<BLOCKQUOTE>
You need a sound board and speakers to run this applet.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 30.3. The source code of the </B><TT><B><FONT FACE="Courier">AudioPlayer</FONT></B></TT><B>
applet.</B>
<P>
<TT><FONT FACE="Courier">import java.applet.*;<BR>
import java.awt.*;<BR>
import java.net.*;<BR>
<BR>
public class AudioPlayer extends Applet {<BR>
&nbsp;AudioClip music;<BR>
&nbsp;Image background;<BR>
&nbsp;public void init() {<BR>
&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;music = getAudioClip(new URL(&quot;file:///spacemusic.au&quot;));
<BR>
&nbsp;&nbsp;&nbsp;background = getImage(new URL(&quot;file:///space.gif&quot;));
<BR>
&nbsp;&nbsp;}catch (MalformedURLException ex) {<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;setLayout(new BorderLayout());<BR>
&nbsp;&nbsp;Panel buttons = new Panel();<BR>
&nbsp;&nbsp;buttons.add(new Button(&quot;Play&quot;));<BR>
&nbsp;&nbsp;buttons.add(new Button(&quot;Stop&quot;));<BR>
&nbsp;&nbsp;buttons.add(new Button(&quot;Loop&quot;));<BR>
&nbsp;&nbsp;add(&quot;South&quot;,buttons);<BR>
&nbsp;}<BR>
&nbsp;public void stop() {<BR>
&nbsp;&nbsp;&nbsp;music.stop();<BR>
&nbsp;}<BR>
&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;g.drawImage(background,0,0,this);<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.target instanceof Button) {<BR>
&nbsp;&nbsp;&nbsp;if(&quot;Play&quot;.equals(event.arg)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;music.play();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}else if(&quot;Stop&quot;.equals(event.arg))
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;music.stop();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}else if(&quot;Loop&quot;.equals(event.arg))
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;music.loop();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Create and compile <TT><FONT FACE="Courier">AudioPlayer.java</FONT></TT>
in the same manner as you did <TT><FONT FACE="Courier">HelloWeb.java</FONT></TT>.
The HTML file that is used to display the applet is shown in Listing
30.4. Note that the <TT><FONT FACE="Courier">CODE</FONT></TT>,
<TT><FONT FACE="Courier">WIDTH</FONT></TT>, and <TT><FONT FACE="Courier">HEIGHT</FONT></TT>
attributes of the applet have been changed. You will need two
additional files to run the applet. Copy the <TT><FONT FACE="Courier">spacemusic.au</FONT></TT>
file from the \<TT><FONT FACE="Courier">java\demo\Animator\audio</FONT></TT>
directory to your <TT><FONT FACE="Courier">\java\jdg\ch30</FONT></TT>
directory. This is an audio file that is supplied with the Java
Developer's Kit. It contains music that is described as &quot;space
music.&quot; Also copy the <TT><FONT FACE="Courier">space.gif</FONT></TT>
file from the <TT><FONT FACE="Courier">\jdg\ch30</FONT></TT> directory
of the CD-ROM to your <TT><FONT FACE="Courier">\java\jdg\ch30</FONT></TT>
directory.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 30.4. The </B><TT><B><FONT FACE="Courier">audio.htm</FONT></B></TT><B>
file.</B>
<P>
<TT><FONT FACE="Courier">&lt;HTML&gt;<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt;Audio Player&lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
&lt;BODY&gt;<BR>
&lt;APPLET CODE=&quot;AudioPlayer.class&quot; WIDTH=300 HEIGHT=350&gt;
<BR>
[AudioPlayer applet]<BR>
&lt;/APPLET&gt;<BR>
&lt;/BODY&gt;<BR>
&lt;/HTML&gt;</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Open the <TT><FONT FACE="Courier">audio.htm</FONT></TT> file with
your Java-enabled browser. Your screen display should look similar
to the one shown in <A HREF="f30-2.gif" >Figure 30.2</A>.
<P>
<A HREF="f30-2.gif"><B>Figure 30.2 : </B><I>The <TT>audio.htm</TT> file, as displayed by a Web browser.</I></A>
<P>
Your browser loads the <TT><FONT FACE="Courier">audio.htm</FONT></TT>
file and then the <TT><FONT FACE="Courier">AudioPlayer.class</FONT></TT>
file. The applet itself loads the background image and an audio
file. To play the audio file, click on the Play button. The space
music will be played, using your sound board and speakers. When
the end of the music file is reached, the sound ends. If you click
on the Loop button, the music will be continuously played in a
never-ending fashion. Clicking on the Stop button causes the music
to cease.
<P>
The <TT><FONT FACE="Courier">AudioPlayer</FONT></TT> class, for
all its additional capabilities, is only slightly longer than
the <TT><FONT FACE="Courier">HelloWeb</FONT></TT> class. It declares
two field variables, <TT><FONT FACE="Courier">music</FONT></TT>
and <TT><FONT FACE="Courier">background</FONT></TT>, which are
used to hold the audio file and background image. The <TT><FONT FACE="Courier">music</FONT></TT>
variable is declared as type <TT><FONT FACE="Courier">AudioClip</FONT></TT>,
which is an interface defined in the <TT><FONT FACE="Courier">Java.applet</FONT></TT>
package.
<P>
The <TT><FONT FACE="Courier">AudioPlayer</FONT></TT> class contains
four access methods: <TT><FONT FACE="Courier">init()</FONT></TT>,
<TT><FONT FACE="Courier">stop()</FONT></TT>, <TT><FONT FACE="Courier">paint()</FONT></TT>,
and <TT><FONT FACE="Courier">handleEvent()</FONT></TT>. You are
already familiar with the purpose of <TT><FONT FACE="Courier">paint()</FONT></TT>
and <TT><FONT FACE="Courier">handleEvent()</FONT></TT> from Part
IV.
<P>
The <TT><FONT FACE="Courier">init()</FONT></TT> method is invoked
by the browser's runtime system when an applet is initially loaded.
It performs any initialization required before the main part of
the applet is executed. The <TT><FONT FACE="Courier">stop()</FONT></TT>
method is invoked when the execution of an applet is terminated
as the result of an applet's Web page no longer being displayed
by the browser. You never need to invoke <TT><FONT FACE="Courier">init()</FONT></TT>
or <TT><FONT FACE="Courier">stop()</FONT></TT> directly. They
are invoked by the runtime system.
<P>
The <TT><FONT FACE="Courier">init()</FONT></TT> method of <TT><FONT FACE="Courier">AudioPlayer</FONT></TT>
begins by loading the audio and image files. The <TT><FONT FACE="Courier">getAudioClip()</FONT></TT>
method of the <TT><FONT FACE="Courier">Applet</FONT></TT> class
loads an audio file that is referenced by an URL. The <TT><FONT FACE="Courier">file:///spacemusic.au</FONT></TT>
URL is used to load the <TT><FONT FACE="Courier">spacemusic.au</FONT></TT>
file from the directory in which the <TT><FONT FACE="Courier">audio.htm</FONT></TT>
and <TT><FONT FACE="Courier">AudioPlayer.class</FONT></TT> files
are located. The <TT><FONT FACE="Courier">file:///space.gif</FONT></TT>
URL is used in a similar manner.
<P>
After the audio and image files are loaded, the layout of the
applet is set to a <TT><FONT FACE="Courier">BorderLayout</FONT></TT>
object. A <TT><FONT FACE="Courier">Panel</FONT></TT> object is
created and assigned to the <TT><FONT FACE="Courier">buttons</FONT></TT>
variable. The Play, Stop, and Loop buttons are created and added
to the <TT><FONT FACE="Courier">buttons</FONT></TT> panel. The
<TT><FONT FACE="Courier">buttons</FONT></TT> panel is then added
to the bottom of the applet display area.
<P>
The <TT><FONT FACE="Courier">stop()</FONT></TT> method uses the
<TT><FONT FACE="Courier">stop()</FONT></TT> method of the <TT><FONT FACE="Courier">AudioClip</FONT></TT>
interface to stop the music when the applet is no longer being
displayed by the browser.
<P>
The <TT><FONT FACE="Courier">paint()</FONT></TT> method draws
the <TT><FONT FACE="Courier">space.gif</FONT></TT> image assigned
to the background variable on the <TT><FONT FACE="Courier">Graphics</FONT></TT>
context of the applet's display area.
<P>
The <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
handles the three prominent events associated with the applet.
These events are the clicking of the Play, Stop, and Loop buttons.
When the Play button is clicked, the <TT><FONT FACE="Courier">play()</FONT></TT>
method of the <TT><FONT FACE="Courier">AudioClip</FONT></TT> interface
is invoked to play the audio clip. When the Stop button is clicked,
the <TT><FONT FACE="Courier">stop()</FONT></TT> method of the
<TT><FONT FACE="Courier">AudioClip</FONT></TT> interface is invoked
to stop the music. Finally, when the Loop button is clicked, the
<TT><FONT FACE="Courier">loop()</FONT></TT> method of the <TT><FONT FACE="Courier">AudioClip</FONT></TT>
interface is invoked to cause the music to be played in a never-ending,
looping fashion.
<H2><A NAME="BlackJackRevisited"><FONT SIZE=5 COLOR=#FF0000>BlackJack
Revisited</FONT></A></H2>
<P>
From the previous example, you have probably surmised that it's
very easy to convert Java window programs to applets. This is
possible because of the fact that an applet is nothing more than
a souped-up panel. It is also relatively easy to convert console
programs to applets.
<P>
One of the first Java programs that you wrote, way back in <A HREF="ch4.htm" >Chapter 4</A>,
was the <TT><FONT FACE="Courier">BlackJackApp</FONT></TT> program.
This program allowed you to play blackjack on the console display.
Because you used a class- and object-oriented approach to developing
<TT><FONT FACE="Courier">BlackJackApp</FONT></TT> (even before
you were formally introduced to classes and objects), this program
is relatively easy to convert to a simple applet. The source code
of the converted applet is shown in Listing 30.5.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 30.5. The source code of the </B><TT><B><FONT FACE="Courier">Blackjack.java</FONT></B></TT><B>
applet.</B>
<P>
<TT><FONT FACE="Courier">import java.applet.*;<BR>
import java.awt.*;<BR>
import java.util.Random;<BR>
<BR>
public class Blackjack extends Applet {<BR>
&nbsp;static final int BET = 0;<BR>
&nbsp;static final int PLAY = 1;<BR>
&nbsp;static final int DEALER = 2;<BR>
&nbsp;int state = BET;<BR>
&nbsp;int money = 1000;<BR>
&nbsp;int bet = 0;<BR>
&nbsp;Deck deck = new Deck();<BR>
&nbsp;Hand playersHand;<BR>
&nbsp;Hand dealersHand;<BR>
&nbsp;Label topLine = new Label(&quot;Welcome to Blackjack!&quot;,Label.CENTER);
<BR>
&nbsp;Label totalLine = new Label(&quot;You have $1000.&quot;,Label.CENTER);
<BR>
&nbsp;Label dealersLabel = new Label(&quot;Dealer's Hand&quot;,Label.CENTER);
<BR>
&nbsp;Label playersLabel = new Label(&quot;Your Hand&quot;,Label.CENTER);
<BR>
&nbsp;TextArea dealerText = new TextArea(9,20);<BR>
&nbsp;TextArea playerText = new TextArea(9,20);<BR>
&nbsp;Button hitButton = new Button(&quot;Hit&quot;);<BR>
&nbsp;Button stayButton = new Button(&quot;Stay&quot;);<BR>
&nbsp;Label betLabel = new Label(&quot;Enter your bet: &quot;,Label.RIGHT);
<BR>
&nbsp;TextField betField = new TextField();<BR>
&nbsp;GridBagLayout gridbag  = new GridBagLayout();;<BR>
&nbsp;GridBagConstraints constraints = new GridBagConstraints();
<BR>
&nbsp;public void init() {<BR>
&nbsp;&nbsp;setLayout(gridbag);<BR>
&nbsp;&nbsp;constraints.fill = GridBagConstraints.BOTH;<BR>
&nbsp;&nbsp;addComponent(topLine,0,0);<BR>
&nbsp;&nbsp;addComponent(totalLine,0,1);<BR>
&nbsp;&nbsp;addComponent(dealersLabel,1,0);<BR>
&nbsp;&nbsp;addComponent(playersLabel,1,1);<BR>
&nbsp;&nbsp;dealerText.setEditable(false);<BR>
&nbsp;&nbsp;playerText.setEditable(false);<BR>
&nbsp;&nbsp;addComponent(dealerText,2,0);<BR>
&nbsp;&nbsp;addComponent(playerText,2,1);<BR>
&nbsp;&nbsp;addComponent(hitButton,3,0);<BR>
&nbsp;&nbsp;addComponent(stayButton,3,1);<BR>
&nbsp;&nbsp;addComponent(betLabel,4,0);<BR>
&nbsp;&nbsp;addComponent(betField,4,1);<BR>
&nbsp;}<BR>
&nbsp;void addComponent(Component c,int y,int x) {<BR>
&nbsp;&nbsp;constraints.gridx = x;<BR>
&nbsp;&nbsp;constraints.gridy = y;<BR>
&nbsp;&nbsp;gridbag.setConstraints(c, constraints);<BR>
&nbsp;&nbsp;add(c);<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.target instanceof TextField &amp;&amp; event.id
== Event.ACTION_EVENT) {<BR>
&nbsp;&nbsp;&nbsp;if(state == BET){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;updateBet();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}else if(event.target instanceof Button &amp;&amp;
event.id == Event.ACTION_EVENT) {<BR>
&nbsp;&nbsp;&nbsp;if(state == PLAY) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(&quot;Hit&quot;.equals(event.arg))
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;playersHand.addCard(deck.deal());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;playersHand.show(playerText,false);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!playersHand.under(22)) state
= DEALER;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;Stay&quot;.equals(event.arg))
state = DEALER;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(state == DEALER) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(dealersHand.mustHit())<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dealersHand.addCard(deck.deal());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dealersHand.show(dealerText,false);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showResults();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
&nbsp;public void updateBet() {<BR>
&nbsp;&nbsp;betField.setEditable(false);<BR>
&nbsp;&nbsp;betLabel.setText(&quot;Bet: &quot;);<BR>
&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;Integer i = new Integer(betField.getText());
<BR>
&nbsp;&nbsp;&nbsp;bet = i.intValue();<BR>
&nbsp;&nbsp;} catch (NumberFormatException ex) {<BR>
&nbsp;&nbsp;&nbsp;bet = 1;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;betField.setText(String.valueOf(bet));<BR>
&nbsp;&nbsp;initialDeal();<BR>
&nbsp;&nbsp;if(playersHand.blackjack()) playerWins();<BR>
&nbsp;&nbsp;else state = PLAY;<BR>
&nbsp;}<BR>
&nbsp;void initialDeal() {<BR>
&nbsp;&nbsp;playersHand = new Hand();<BR>
&nbsp;&nbsp;dealersHand = new Hand();<BR>
&nbsp;&nbsp;for(int i = 0;i&lt;2;++i) {<BR>
&nbsp;&nbsp;&nbsp;playersHand.addCard(deck.deal());<BR>
&nbsp;&nbsp;&nbsp;dealersHand.addCard(deck.deal());<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;dealersHand.show(dealerText,true);<BR>
&nbsp;&nbsp;playersHand.show(playerText,false);<BR>
&nbsp;}<BR>
&nbsp;void openBetting() {<BR>
&nbsp;&nbsp;betLabel.setText(&quot;Enter your bet: &quot;);<BR>
&nbsp;&nbsp;betField.setText(&quot;&quot;);<BR>
&nbsp;&nbsp;betField.setEditable(true);<BR>
&nbsp;&nbsp;state = BET;<BR>
&nbsp;}<BR>
&nbsp;void playerWins() {<BR>
&nbsp;&nbsp;money += bet;<BR>
&nbsp;&nbsp;topLine.setText(&quot;Player wins $&quot;+bet+&quot;.&quot;);
<BR>
&nbsp;&nbsp;totalLine.setText(&quot;You have $&quot;+money+&quot;.&quot;);
<BR>
&nbsp;&nbsp;openBetting();<BR>
&nbsp;}<BR>
&nbsp;void dealerWins() {<BR>
&nbsp;&nbsp;money -= bet;<BR>
&nbsp;&nbsp;topLine.setText(&quot;Player loses $&quot;+bet+&quot;.&quot;);
<BR>
&nbsp;&nbsp;totalLine.setText(&quot;You have $&quot;+money+&quot;.&quot;);
<BR>
&nbsp;&nbsp;openBetting();<BR>
&nbsp;}<BR>
&nbsp;void tie() {<BR>
&nbsp;&nbsp;topLine.setText(&quot;Tie.&quot;);<BR>
&nbsp;&nbsp;totalLine.setText(&quot;You have $&quot;+money+&quot;.&quot;);
<BR>
&nbsp;&nbsp;openBetting();<BR>
&nbsp;}<BR>
&nbsp;void showResults() {<BR>
&nbsp;&nbsp;if(playersHand.busted() &amp;&amp; dealersHand.busted())
tie();<BR>
&nbsp;&nbsp;else if(playersHand.busted()) dealerWins();<BR>
&nbsp;&nbsp;else if(dealersHand.busted()) playerWins();<BR>
&nbsp;&nbsp;else if(playersHand.bestScore() &gt; dealersHand.bestScore())
playerWins();<BR>
&nbsp;&nbsp;else if(playersHand.bestScore() &lt; dealersHand.bestScore())
dealerWins();<BR>
&nbsp;&nbsp;else tie();<BR>
&nbsp;}<BR>
}<BR>
<BR>
class Deck {<BR>
&nbsp;// Variable declarations<BR>
&nbsp;int cards[];     // Array of 52 cards<BR>
&nbsp;int topCard;     // 0-51 (index of card in deck)<BR>
&nbsp;Random random;<BR>
<BR>
&nbsp;// Method declarations<BR>
&nbsp;public Deck() { // Constructor<BR>
&nbsp;&nbsp;cards = new int[52];<BR>
&nbsp;&nbsp;for(int i = 0;i&lt;52;++i) cards[i] = i;<BR>
&nbsp;&nbsp;topCard = 0;<BR>
&nbsp;&nbsp;random = new Random();<BR>
&nbsp;&nbsp;shuffle();<BR>
&nbsp;}<BR>
<BR>
&nbsp;public void shuffle() {<BR>
&nbsp;&nbsp;// Repeat 52 times<BR>
&nbsp;&nbsp;for(int i = 0;i&lt;52;++i) {<BR>
&nbsp;&nbsp;&nbsp;// Randomly exchange two cards in the deck.
<BR>
&nbsp;&nbsp;&nbsp;int j = randomCard();<BR>
&nbsp;&nbsp;&nbsp;int k = randomCard();<BR>
&nbsp;&nbsp;&nbsp;int temp = cards[j];<BR>
&nbsp;&nbsp;&nbsp;cards[j] = cards[k];<BR>
&nbsp;&nbsp;&nbsp;cards[k] = temp;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
<BR>
&nbsp;int randomCard() {<BR>
&nbsp;&nbsp;int r = random.nextInt();<BR>
&nbsp;&nbsp;if(r&lt;0) r = 0-r;<BR>
&nbsp;&nbsp;return r%52;<BR>
&nbsp;}<BR>
<BR>
&nbsp;Card deal() {<BR>
&nbsp;&nbsp;if(topCard&gt;51) {<BR>
&nbsp;&nbsp;&nbsp;shuffle();<BR>
&nbsp;&nbsp;&nbsp;topCard = 0;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;Card card = new Card(cards[topCard]);<BR>
&nbsp;&nbsp;++topCard;<BR>
&nbsp;&nbsp;return card;<BR>
&nbsp;}<BR>
} // End of Deck class<BR>
<BR>
class Hand {<BR>
&nbsp;// Variable declarations<BR>
&nbsp;int numCards;<BR>
&nbsp;Card cards[];<BR>
&nbsp;static int MaxCards = 12;<BR>
<BR>
&nbsp;//Method declarations<BR>
&nbsp;public Hand() { // Constructor<BR>
&nbsp;&nbsp;numCards = 0;<BR>
&nbsp;&nbsp;cards = new Card[MaxCards];<BR>
&nbsp;}<BR>
<BR>
&nbsp;void addCard(Card c) {<BR>
&nbsp;&nbsp;cards[numCards] = c;<BR>
&nbsp;&nbsp;++numCards;<BR>
&nbsp;}<BR>
<BR>
&nbsp;void show(TextArea t,boolean hideFirstCard) {<BR>
&nbsp;&nbsp;String results = &quot;&quot;;<BR>
&nbsp;&nbsp;for(int i = 0;i&lt;numCards;++i) {<BR>
&nbsp;&nbsp;&nbsp;if(i == 0 &amp;&amp; hideFirstCard) results
+= &quot;Hidden\n&quot;;<BR>
&nbsp;&nbsp;&nbsp;else results += cards[i].value+&quot; of &quot;+cards[i].suite+&quot;\n&quot;;
<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;t.setText(results);<BR>
&nbsp;}<BR>
<BR>
boolean blackjack() {<BR>
&nbsp;if(numCards == 2) {<BR>
&nbsp;&nbsp;if(cards[0].iValue == 1 &amp;&amp; cards[1].iValue
== 10) return true;<BR>
&nbsp;&nbsp;if(cards[1].iValue == 1 &amp;&amp; cards[0].iValue
== 10) return true;<BR>
&nbsp;}<BR>
&nbsp;return false;<BR>
}<BR>
<BR>
boolean under(int n) {<BR>
&nbsp;int points = 0;<BR>
&nbsp;for(int i = 0;i&lt;numCards;++i) points += cards[i].iValue;
<BR>
&nbsp;if(points&lt;n) return true;<BR>
&nbsp;else return false;<BR>
}<BR>
<BR>
int bestScore() {<BR>
&nbsp;int points = 0;<BR>
&nbsp;boolean haveAce = false;<BR>
&nbsp;for(int i = 0;i&lt;numCards;++i) {<BR>
&nbsp;&nbsp;points += cards[i].iValue;<BR>
&nbsp;&nbsp;if(cards[i].iValue == 1) haveAce = true;<BR>
&nbsp;}<BR>
&nbsp;if(haveAce) {<BR>
&nbsp;&nbsp;if(points+10 &lt; 22) points += 10;<BR>
&nbsp;}<BR>
&nbsp;return points;<BR>
}<BR>
<BR>
boolean mustHit() {<BR>
&nbsp;if(bestScore()&lt;17) return true;<BR>
&nbsp;else return false;<BR>
}<BR>
<BR>
&nbsp;boolean busted() {<BR>
&nbsp;&nbsp;if(!under(22)) return true;<BR>
&nbsp;&nbsp;else return false;<BR>
&nbsp;}<BR>
} // End of Hand class<BR>
<BR>
class Card {<BR>
&nbsp;// Variable declarations<BR>
&nbsp;int iValue;   // Numeric value corresponding to card.<BR>
&nbsp;String value; // &quot;A&quot; &quot;2&quot; through &quot;9&quot;
&quot;T&quot; &quot;J&quot; &quot;Q&quot; &quot;K&quot;<BR>
&nbsp;String suite; // &quot;S&quot; &quot;H&quot; &quot;C&quot;
&quot;D&quot;<BR>
<BR>
&nbsp;// Method declarations<BR>
&nbsp;public Card(int n) { // Constructor<BR>
&nbsp;&nbsp;int iSuite = n/13;<BR>
&nbsp;&nbsp;iValue = n%13+1;<BR>
&nbsp;&nbsp;switch(iSuite) {<BR>
&nbsp;&nbsp;&nbsp;case 0:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;suite = &quot;Spades&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;case 1:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;suite = &quot;Hearts&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;case 2:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;suite = &quot;Clubs&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;default:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;suite = &quot;Diamonds&quot;;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;if(iValue == 1) value = &quot;Ace&quot;;<BR>
&nbsp;&nbsp;else if(iValue == 10) value = &quot;Ten&quot;;<BR>
&nbsp;&nbsp;else if(iValue == 11) value = &quot;Jack&quot;;<BR>
&nbsp;&nbsp;else if(iValue == 12) value = &quot;Queen&quot;;<BR>
&nbsp;&nbsp;else if(iValue == 13) value = &quot;King&quot;;<BR>
&nbsp;&nbsp;else value = Integer.toString(iValue);<BR>
&nbsp;&nbsp;if(iValue&gt;10) iValue = 10;<BR>
&nbsp;}<BR>
<BR>
&nbsp;int getValue() {<BR>
&nbsp;&nbsp;return iValue;<BR>
&nbsp;}<BR>
} // End of Card class</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Create and compile <TT><FONT FACE="Courier">Blackjack.java</FONT></TT>
in the same manner as the previous examples. The HTML file that
is used to display the applet is shown in Listing 30.6. Note that
the <TT><FONT FACE="Courier">CODE</FONT></TT>, <TT><FONT FACE="Courier">WIDTH</FONT></TT>,
and <TT><FONT FACE="Courier">HEIGHT</FONT></TT> attributes of
the applet have been changed.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 30.6. The </B><TT><B><FONT FACE="Courier">blackjack.htm</FONT></B></TT><B>
file.</B>
<P>
<TT><FONT FACE="Courier">&lt;HTML&gt;<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt;Blackjack&lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
&lt;BODY&gt;<BR>
&lt;APPLET CODE=&quot;Blackjack.class&quot; WIDTH=400 HEIGHT=400&gt;
<BR>
[Blackjack applet]<BR>
&lt;/APPLET&gt;<BR>
&lt;/BODY&gt;<BR>
&lt;/HTML&gt;<BR>
</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Open the <TT><FONT FACE="Courier">blackjack.htm</FONT></TT>
file with your browser. Your browser should display the applet,
as shown in <A HREF="f30-3.gif" >Figure 30.3</A>.
<P>
<A HREF="f30-3.gif"><B>Figure 30.3 : </B><I> The Black initial display.</I></A>
<P>
The top text line in the applet welcomes you to the game and tells
you that you have $1000 to gamble. The Dealer's Hand and Your
Hand text boxes are initially blank. Below them are the Hit and
Stay buttons, which are initially disabled. To start the game,
enter a bet, as shown in Figure 30.4.
<P>
<A HREF="f30-4.gif"><B>Figure 30.4 : </B><I> Entering a bet.</I></A>
<P>
When you enter a bet, the label to the right of the text field
changes from <TT><FONT FACE="Courier">Enter your bet:</FONT></TT>
to <TT><FONT FACE="Courier">Bet:</FONT></TT>. The text field is
grayed and can no longer be edited. This prevents you from changing
your bet during the play of a hand.
<P>
The initial hands for the dealer and the player are displayed
after the bet is entered. The first card of the dealer is hidden.
You can now use the Hit and Stay buttons to obtain more cards
or to stay with what you were dealt and let the dealer draw. Click
on the Hit button until you are finished drawing cards. If you
bust (go over 21), your hand will be finished and the dealer will
draw his cards.
<P>
After you click Stay or bust, the dealer draws his hand and a
win, loss, or tie results. Your available money is then updated
based on your winnings. The <TT><FONT FACE="Courier">Blackjack</FONT></TT>
applet is more forgiving than the <TT><FONT FACE="Courier">BlackJackApp</FONT></TT>
program in <A HREF="ch4.htm" >Chapter 4</A>: You can continue
playing after you've run out of money. You can even bet $0 or
negative values.
<P>
Go ahead and play the game for a while to become familiar with
its operation.
<P>
Although the <TT><FONT FACE="Courier">Blackjack</FONT></TT> applet
may appear to be quite large, it reuses all of the classes developed
for the original <TT><FONT FACE="Courier">BlackJackApp</FONT></TT>
program, with minor modifications.
<P>
The <TT><FONT FACE="Courier">Blackjack</FONT></TT> program declares
21 field variables. Most of these are used to create its GUI interface.
The <TT><FONT FACE="Courier">BET</FONT></TT>, <TT><FONT FACE="Courier">PLAY</FONT></TT>,
and <TT><FONT FACE="Courier">DEALER</FONT></TT> constants are
used to maintain the state of the user's interaction with the
game. The <TT><FONT FACE="Courier">state</FONT></TT> variable
is set to the initial <TT><FONT FACE="Courier">BET</FONT></TT>
state.
<P>
The <TT><FONT FACE="Courier">money</FONT></TT>, <TT><FONT FACE="Courier">bet</FONT></TT>,
<TT><FONT FACE="Courier">deck</FONT></TT>, <TT><FONT FACE="Courier">playersHand</FONT></TT>,
and <TT><FONT FACE="Courier">dealersHand</FONT></TT> variables
are declared and used in the same manner as in the <TT><FONT FACE="Courier">BlackJackApp</FONT></TT>
program.
<P>
Five labels are created and assigned to the <TT><FONT FACE="Courier">topLine</FONT></TT>,
<TT><FONT FACE="Courier">totalLine</FONT></TT>, <TT><FONT FACE="Courier">dealersLabel</FONT></TT>,
<TT><FONT FACE="Courier">playersLabel</FONT></TT>, and <TT><FONT FACE="Courier">betLabel</FONT></TT>
variables. The <TT><FONT FACE="Courier">topLine</FONT></TT> and
<TT><FONT FACE="Courier">totalLine</FONT></TT> variables are displayed
at the top of the applet. They display the welcome string and
the amount of money that the player has available. The <TT><FONT FACE="Courier">dealersLabel</FONT></TT>
and <TT><FONT FACE="Courier">playersLabel</FONT></TT> variables
are used to label the text areas containing the dealer's and user's
hands. The <TT><FONT FACE="Courier">betLabel</FONT></TT> variable
prompts the user to enter his or her bet.
<P>
The <TT><FONT FACE="Courier">dealerText</FONT></TT> and <TT><FONT FACE="Courier">playerText</FONT></TT>
variables are used to refer to the <TT><FONT FACE="Courier">TextArea</FONT></TT>
objects that display the hands of the dealer and player. The <TT><FONT FACE="Courier">betField</FONT></TT>
text field is used to enter and display the user's bet.
<P>
The <TT><FONT FACE="Courier">hitButton</FONT></TT> and <TT><FONT FACE="Courier">stayButton</FONT></TT>
variables are used to draw another card or to turn the draw over
to the dealer.
<P>
The <TT><FONT FACE="Courier">gridbag</FONT></TT> and <TT><FONT FACE="Courier">constraints</FONT></TT>
variables refer to the <TT><FONT FACE="Courier">GridBagLayout</FONT></TT>
and <TT><FONT FACE="Courier">GridBagConstraints</FONT></TT> objects
used to lay out the screen's display.
<P>
The <TT><FONT FACE="Courier">init()</FONT></TT> method sets the
layout to a <TT><FONT FACE="Courier">GridBagLayout</FONT></TT>,
invoking the <TT><FONT FACE="Courier">addComponent()</FONT></TT>
method to add the GUI components to the applet. The <TT><FONT FACE="Courier">addComponent()</FONT></TT>
method adds a component to an x,y location within the <TT><FONT FACE="Courier">gridbag</FONT></TT>
layout.
<P>
The <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
handles the user-interface events that drive the operation of
the applet. It handles the event generated when the user enters
text in the Bet: text field by invoking the <TT><FONT FACE="Courier">updateBet()</FONT></TT>
method. This method then sets up the rest of the applet's operation.
The <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
handles the clicking of the Hit and Stay buttons by first making
sure that the applet is in the Play state. This prevents the user
from clicking on these buttons at arbitrary times during the applet's
execution.
<P>
The Hit button is handled by adding a card to the player's hand,
using the same approach as in <TT><FONT FACE="Courier">BlackJackApp</FONT></TT>.
The <TT><FONT FACE="Courier">show()</FONT></TT> method of the
<TT><FONT FACE="Courier">Hand</FONT></TT> class is modified to
display the player's hand to the <TT><FONT FACE="Courier">TextArea</FONT></TT>
object referenced by the <TT><FONT FACE="Courier">playerText</FONT></TT>
variable. If the user busts, the <TT><FONT FACE="Courier">state</FONT></TT>
is set to <TT><FONT FACE="Courier">DEALER</FONT></TT>, preventing
the user from drawing another card.
<P>
The Stay button is handled by setting the <TT><FONT FACE="Courier">state</FONT></TT>
variable to <TT><FONT FACE="Courier">DEALER</FONT></TT>.
<P>
When the <TT><FONT FACE="Courier">state</FONT></TT> is set to
<TT><FONT FACE="Courier">DEALER</FONT></TT>, the dealer is dealt
additional cards using the same code as in <TT><FONT FACE="Courier">BlackJackApp</FONT></TT>.
The <TT><FONT FACE="Courier">showResults()</FONT></TT> method
is modified to update the applet's display labels and not the
console window.
<P>
The <TT><FONT FACE="Courier">updateBet()</FONT></TT> method is
a new method that is added to support the applet conversion. It
disables editing of the text field and changes the <TT><FONT FACE="Courier">Label</FONT></TT>
object referenced by the <TT><FONT FACE="Courier">betLabel</FONT></TT>
variable from <TT><FONT FACE="Courier">Enter your bet:</FONT></TT>
to <TT><FONT FACE="Courier">Bet:</FONT></TT>. It then checks the
bet for a valid value and redisplays it in the disabled text field.
The <TT><FONT FACE="Courier">initialDeal()</FONT></TT> method
is invoked to deal an initial hand to the player and dealer. If
the user is dealt blackjack, the hand is ended and the user is
given his winnings. Otherwise, the <TT><FONT FACE="Courier">state</FONT></TT>
variable is set to <TT><FONT FACE="Courier">play</FONT></TT> to
enable the operation of the Hit and Stay buttons.
<P>
The <TT><FONT FACE="Courier">initialDeal()</FONT></TT> method
remains unchanged from the original <TT><FONT FACE="Courier">BlackJackApp</FONT></TT>
program.
<P>
The <TT><FONT FACE="Courier">openBetting()</FONT></TT> method
is used to change to the initial <TT><FONT FACE="Courier">BET</FONT></TT>
state. It sets the <TT><FONT FACE="Courier">Enter your bet:</FONT></TT>
prompt and enables the text field to be edited.
<P>
The <TT><FONT FACE="Courier">playerWins()</FONT></TT>, <TT><FONT FACE="Courier">dealerWins()</FONT></TT>,
and <TT><FONT FACE="Courier">tie()</FONT></TT> methods have been
modified to display their results within the applet instead of
on the console window. They also invoke the <TT><FONT FACE="Courier">openBetting()</FONT></TT>
method to return to the <TT><FONT FACE="Courier">BET</FONT></TT>
state.
<P>
The <TT><FONT FACE="Courier">showResults()</FONT></TT> method
remains unchanged from the original <TT><FONT FACE="Courier">BlackJackApp</FONT></TT>
program.
<P>
No changes were made to the <TT><FONT FACE="Courier">Deck</FONT></TT>
or <TT><FONT FACE="Courier">Card</FONT></TT> classes. The <TT><FONT FACE="Courier">show()</FONT></TT>
method of the <TT><FONT FACE="Courier">Hand</FONT></TT> class
was modified to display the dealer's and player's hands to the
<TT><FONT FACE="Courier">TextArea</FONT></TT> objects.
<P>
The changes required to convert from the original <TT><FONT FACE="Courier">BlackJackApp</FONT></TT>
program to the <TT><FONT FACE="Courier">Blackjack</FONT></TT>
applet were minimal. This illustrates the power of object-oriented
programming and the reusability of the components that are created
using this approach.
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
This chapter introduces you to applet programming by way of several
sample programs that illustrate the classes and methods used to
implement simple applets. You should now be comfortable with applets,
especially if you have worked through the window programming examples
of Part IV. <A HREF="ch31.htm" >Chapter 31</A>, &quot;Developing
Applets,&quot; lays the framework for developing applets by expanding
on the basics introduced here.
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



