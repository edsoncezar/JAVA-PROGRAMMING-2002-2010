<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META>
<H1><FONT COLOR=#FF0000>Chapter 23</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>The Canvas</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#TheCanvasandGraphicsClasses" >The Canvas and Graphics Classes</A>
<LI><A HREF="#DisplayingBitmappedImages" >Displaying Bitmapped Images</A>
<UL>
<LI><A HREF="#TheDisplayImageAppProgram" >The DisplayImageApp Program</A>
</UL>
<LI><A HREF="#DrawingandPainting" >Drawing and Painting</A>
<UL>
<LI><A HREF="#TheDrawAppProgram" >The DrawApp Program</A>
</UL>
<LI><A HREF="#CombiningGraphicsandText" >Combining Graphics and Text</A>
<LI><A HREF="#TheImageProcessingClassesofjavaawt" >The Image-Processing Classes of java.awt.image</A>
<UL>
<LI><A HREF="#TheImageAppProgram" >The ImageApp Program</A>
</UL>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
This chapter covers the details of using the <TT><FONT FACE="Courier">Canvas</FONT></TT>
and <TT><FONT FACE="Courier">Graphics</FONT></TT> classes. It
also shows you how to use the image processing-related classes
of the <TT><FONT FACE="Courier">java.awt.image</FONT></TT> package.
Java's support of bitmapped images is explained and the drawing
methods of the <TT><FONT FACE="Courier">Graphics</FONT></TT> class
are illustrated as part of an example. When you finish this chapter,
you will be able to effectively use graphics in your Java window
programs.
<H2><A NAME="TheCanvasandGraphicsClasses"><FONT SIZE=5 COLOR=#FF0000>The
</FONT><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">Canvas</FONT></TT><FONT SIZE=5 COLOR=#FF0000>
and </FONT><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">Graphics</FONT></TT><FONT SIZE=5 COLOR=#FF0000>
Classes</FONT></A></H2>
<P>
The <TT><FONT FACE="Courier">Canvas</FONT></TT> class provides
a general GUI component for drawing images and text on the screen.
It does not support any drawing methods of its own, but provides
access to a <TT><FONT FACE="Courier">Graphics</FONT></TT> object
through its <TT><FONT FACE="Courier">paint()</FONT></TT> method.
The <TT><FONT FACE="Courier">paint()</FONT></TT> method is invoked
upon creation and update of the frame so that the <TT><FONT FACE="Courier">Graphics</FONT></TT>
object associated with a <TT><FONT FACE="Courier">Canvas</FONT></TT>
object can be updated. The <TT><FONT FACE="Courier">paint()</FONT></TT>
method should not be directly invoked, but it can be indirectly
accessed using the <TT><FONT FACE="Courier">repaint()</FONT></TT>
method. The <TT><FONT FACE="Courier">Canvas</FONT></TT> class
is typically subclassed to provide custom drawing and event handling.
If you do not want to create your own <TT><FONT FACE="Courier">Canvas</FONT></TT>
subclasses, you can use the <TT><FONT FACE="Courier">Graphics</FONT></TT>
object associated with your application's <TT><FONT FACE="Courier">Frame</FONT></TT>
subclass by overriding its <TT><FONT FACE="Courier">paint()</FONT></TT>
method. This is typically done in small applications.
<P>
The <TT><FONT FACE="Courier">Graphics</FONT></TT> class is where
all of the low-level drawing methods are implemented. These methods
can be used directly to draw objects and text or can be combined
to display more elaborate screen objects. The <TT><FONT FACE="Courier">Graphics</FONT></TT>
drawing methods allow a number of geometrical shapes to be drawn
and filled, including lines, arcs, ovals, rectangles, rounded
rectangles, and polygons. A special <TT><FONT FACE="Courier">draw3DRect()</FONT></TT>
method is provided for drawing rectangles that are shaded to give
them a three-dimensional appearance. The <TT><FONT FACE="Courier">Graphics</FONT></TT>
class also provides the capability to draw bitmapped images and
text on the canvas. Recall that <A HREF="ch22.htm" >Chapter 22</A>,
&quot;Text and Fonts,&quot; covers the drawing of text and introduces
the <TT><FONT FACE="Courier">Font</FONT></TT> and <TT><FONT FACE="Courier">FontMetrics</FONT></TT>
classes. These classes control the specific manner in which text
is displayed.
<H2><A NAME="DisplayingBitmappedImages"><FONT SIZE=5 COLOR=#FF0000>Displaying
Bitmapped Images</FONT></A></H2>
<P>
The <TT><FONT FACE="Courier">drawImage()</FONT></TT> method of
the <TT><FONT FACE="Courier">Graphics</FONT></TT> class is used
to display bitmapped images on the <TT><FONT FACE="Courier">Graphics</FONT></TT>
object associated with a canvas. It takes an object of the <TT><FONT FACE="Courier">Image</FONT></TT>
class, an object that implements the <TT><FONT FACE="Courier">ImageObserver</FONT></TT>
interface, the x,y-coordinates where the image is to be displayed,
and other parameters as its arguments.
<P>
The <TT><FONT FACE="Courier">Image</FONT></TT> class is an abstract
class that provides format-independent access to graphical images.
<TT><FONT FACE="Courier">Image</FONT></TT> objects are created
by invoking methods of other classes that create images. Examples
of these image-creating methods are the <TT><FONT FACE="Courier">createImage()</FONT></TT>
methods of the <TT><FONT FACE="Courier">Component</FONT></TT>
and <TT><FONT FACE="Courier">Applet</FONT></TT> classes and the
<TT><FONT FACE="Courier">getImage()</FONT></TT> methods of the
<TT><FONT FACE="Courier">Toolkit</FONT></TT> and <TT><FONT FACE="Courier">Applet</FONT></TT>
classes. The <TT><FONT FACE="Courier">getImage()</FONT></TT> methods
are the most handy methods for retrieving an image that is stored
in a disk file. Java currently supports GIF and JPEG formatted
images through these methods.
<P>
The <TT><FONT FACE="Courier">ImageObserver</FONT></TT> interface
is defined in the <TT><FONT FACE="Courier">java.awt.image</FONT></TT>
package. This interface provides a set of constants and methods
that support the creation and loading of images. The <TT><FONT FACE="Courier">Component</FONT></TT>
class implements the <TT><FONT FACE="Courier">ImageObserver</FONT></TT>
interface, and in most cases, the <TT><FONT FACE="Courier">ImageObserver</FONT></TT>
object used as the parameter to the <TT><FONT FACE="Courier">drawImage()</FONT></TT>
method can be supplied using the <TT><FONT FACE="Courier">this</FONT></TT>
identifier to reference the current <TT><FONT FACE="Courier">Canvas</FONT></TT>
or <TT><FONT FACE="Courier">Frame</FONT></TT> object being painted.
<H3><A NAME="TheDisplayImageAppProgram">The <TT><FONT SIZE=4 FACE="Courier">DisplayImageApp</FONT></TT><FONT SIZE=4>
Program</FONT></A></H3>
<P>
The <TT><FONT FACE="Courier">DisplayImageApp</FONT></TT> program
shows how bitmapped images can be drawn on the screen using the
<TT><FONT FACE="Courier">drawImage()</FONT></TT> method of the
<TT><FONT FACE="Courier">Graphics</FONT></TT> class. Its source
code is shown in Listing 23.1.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 23.1. The source code for the </B><TT><B><FONT FACE="Courier">DisplayImageApp</FONT></B></TT><B>
program.</B><P>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
import jdg.ch20.*;<BR>
<BR>
public class DisplayImageApp extends Frame {<BR>
&nbsp;MyMenuBar menuBar;<BR>
&nbsp;Toolkit toolkit;<BR>
&nbsp;int screenWidth = 400;<BR>
&nbsp;int screenHeight = 400;<BR>
&nbsp;Image image;<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;DisplayImageApp app = new DisplayImageApp();<BR>
&nbsp;}<BR>
&nbsp;public DisplayImageApp() {<BR>
&nbsp;&nbsp;super(&quot;DisplayImageApp&quot;);<BR>
&nbsp;&nbsp;setup();<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(screenWidth,screenHeight);<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void setup() {<BR>
&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;setupMenuBar();<BR>
&nbsp;&nbsp;setMenuBar(menuBar);<BR>
&nbsp;&nbsp;setupImage();<BR>
&nbsp;}<BR>
&nbsp;void setupMenuBar() {<BR>
&nbsp;&nbsp;String menuItems[][] = {{&quot;File&quot;,&quot;Exit&quot;}};
<BR>
&nbsp;&nbsp;menuBar = new MyMenuBar(menuItems);<BR>
&nbsp;}<BR>
&nbsp;void setupImage() {<BR>
&nbsp;&nbsp;toolkit = getToolkit();<BR>
&nbsp;&nbsp;image = toolkit.getImage(&quot;test.gif&quot;);<BR>
&nbsp;}<BR>
&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;g.drawImage(image,0,0,this);<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.ACTION_EVENT){<BR>
&nbsp;&nbsp;&nbsp;if(event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(&quot;Exit&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;return false;<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Before running the <TT><FONT FACE="Courier">DisplayImageApp</FONT></TT>
program, copy the <TT><FONT FACE="Courier">test.gif</FONT></TT>
and <TT><FONT FACE="Courier">aviris.gif</FONT></TT> images from
the <TT><FONT FACE="Courier">\jdg\ch23</FONT></TT> directory of
the CD-ROM to your <TT><FONT FACE="Courier">jdg\ch23</FONT></TT>
directory. The <TT><FONT FACE="Courier">DisplayImageApp</FONT></TT>
program uses the <TT><FONT FACE="Courier">test.gif</FONT></TT>
file. The <TT><FONT FACE="Courier">ImageApp</FONT></TT> program,
which you'll develop later in this chapter, displays the <TT><FONT FACE="Courier">aviris.gif</FONT></TT>
image.
<P>
<TT><FONT FACE="Courier">DisplayImageMap</FONT></TT> shows how
a bitmapped image can be displayed using the <TT><FONT FACE="Courier">Graphics</FONT></TT>
class. When you run the program, it displays the bitmapped image
shown in <A HREF="f23-1.gif" >Figure 23.1</A>.
<P>
<A HREF="f23-1.gif"><B>Figure 23.1 :</B><I> The <TT>DisplayImageApp</TT> opening window.</I></A>
<P>
The functionality of the <TT><FONT FACE="Courier">DisplayImageApp</FONT></TT>
program isn't all that astounding. Its purpose is to illustrate
the use of the methods involved in loading and displaying image
files. You can easily upgrade the program to display arbitrary
GIF or JPEG files by adding and implementing an Open option on
the File menu.
<P>
<TT><FONT FACE="Courier">DisplayImageApp</FONT></TT> declares
several field variables. The <TT><FONT FACE="Courier">menuBar</FONT></TT>
variable is used to identify the program's menu bar. The <TT><FONT FACE="Courier">toolkit</FONT></TT>
variable is used to reference the toolkit associated with the
application window. The <TT><FONT FACE="Courier">screenWidth</FONT></TT>
and <TT><FONT FACE="Courier">screenHeight</FONT></TT> variables
control the size at which the window is displayed. The <TT><FONT FACE="Courier">image</FONT></TT>
variable is used to refer to the loaded image.
<P>
The <TT><FONT FACE="Courier">DisplayImageApp</FONT></TT> window
is created, set up, and displayed using the methods covered in
previous chapters. The <TT><FONT FACE="Courier">setupImage()</FONT></TT>
method uses the <TT><FONT FACE="Courier">getToolkit()</FONT></TT>
method of the <TT><FONT FACE="Courier">Window</FONT></TT> class
to get the <TT><FONT FACE="Courier">Toolkit</FONT></TT> object
associated with the application window. The <TT><FONT FACE="Courier">getImage()</FONT></TT>
method of the <TT><FONT FACE="Courier">Toolkit</FONT></TT> class
is used to load the image in the <TT><FONT FACE="Courier">test.gif</FONT></TT>
file and assign it to the <TT><FONT FACE="Courier">image</FONT></TT>
variable.
<P>
The <TT><FONT FACE="Courier">paint()</FONT></TT> method draws
the image referenced by the <TT><FONT FACE="Courier">image</FONT></TT>
variable on the default <TT><FONT FACE="Courier">Graphics</FONT></TT>
object of the application window. It accomplishes this using the
<TT><FONT FACE="Courier">drawImage()</FONT></TT> method of the
<TT><FONT FACE="Courier">Graphics</FONT></TT> class. The arguments
to <TT><FONT FACE="Courier">drawImage()</FONT></TT> are the image
to be displayed, the x- and y-coordinates where the image is to
be drawn, and the object implementing the <TT><FONT FACE="Courier">ImageObserver</FONT></TT>
interface associated with the image. The <TT><FONT FACE="Courier">this</FONT></TT>
identifier is used to indicate that the application window is
the <TT><FONT FACE="Courier">ImageObserver</FONT></TT>.
<P>
The <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
provides the standard <TT><FONT FACE="Courier">WINDOW_DESTROY</FONT></TT>
and Exit event handling.
<H2><A NAME="DrawingandPainting"><FONT SIZE=5 COLOR=#FF0000>Drawing
and Painting</FONT></A></H2>
<P>
Some programs, such as the Microsoft Windows Paint program, are
used to construct images by <I>painting</I> on the screen. These
paint programs create an image array of color pixels and update
the array based on user paint commands. These commands may consist
of pixel-level drawing operations or more general operations that
draw geometrical objects such as circles, rectangles, and lines.
Painting programs are characterized by the fact that the pixel
array is the focus for the drawing that takes place.
<P>
Drawing programs, such as CorelDRAW!, support drawing operations
using a more object-oriented approach. When you draw a circle
or line with a drawing program, you do not merely update the pixels
of the canvas-you add an object to the list of objects that are
displayed on the canvas. Because drawing programs operate at a
higher object level, you can select, move, resize, group, and
perform other operations on the objects that you've drawn.
<P>
The <TT><FONT FACE="Courier">Graphics</FONT></TT> class is oriented
toward providing the methods that are needed to support higher-level
drawing programs rather than lower-level painting programs, although
it does support important painting operations, such as displaying
bitmapped images, as you saw in the <TT><FONT FACE="Courier">DisplayImageApp</FONT></TT>
program.
<P>
When using the <TT><FONT FACE="Courier">Graphics</FONT></TT> class
to support graphical operations, you will generally maintain a
list of the objects that you've drawn and use that list of objects
to repaint the screen, as required.
<H3><A NAME="TheDrawAppProgram">The <TT><FONT SIZE=4 FACE="Courier">DrawApp</FONT></TT><FONT SIZE=4>
Program</FONT></A></H3>
<P>
The <TT><FONT FACE="Courier">DrawApp</FONT></TT> program shows
how the higher-level drawing operations of the <TT><FONT FACE="Courier">Graphics</FONT></TT>
class are used to display and maintain a list of the objects that
are drawn on a canvas. The source code of the <TT><FONT FACE="Courier">DrawApp</FONT></TT>
program is shown in Listing 23.2.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 23.2. The source code for the </B><TT><B><FONT FACE="Courier">DrawApp</FONT></B></TT><B>
program.</B><P>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
import java.lang.Math;<BR>
import java.util.Vector;<BR>
import jdg.ch20.*;<BR>
<BR>
public class DrawApp extends Frame {<BR>
&nbsp;&nbsp;Object menuItems[][] = {<BR>
&nbsp;&nbsp;{&quot;File&quot;,&quot;New&quot;,&quot;-&quot;,&quot;Exit&quot;},
<BR>
&nbsp;&nbsp;{&quot;Draw&quot;,&quot;+Line&quot;,&quot;-Oval&quot;,&quot;-Rectangle&quot;}
<BR>
&nbsp;};<BR>
&nbsp;MyMenuBar menuBar = new MyMenuBar(menuItems);<BR>
&nbsp;MyCanvas canvas = new MyCanvas(TwoPointObject.LINE);<BR>
&nbsp;int screenWidth = 400;<BR>
&nbsp;int screenHeight = 400;<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;DrawApp app = new DrawApp();<BR>
&nbsp;}<BR>
&nbsp;public DrawApp() {<BR>
&nbsp;&nbsp;super(&quot;DrawApp&quot;);<BR>
&nbsp;&nbsp;setup();<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(screenWidth,screenHeight);<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void setup() {<BR>
&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;setMenuBar(menuBar);<BR>
&nbsp;&nbsp;setCursor(CROSSHAIR_CURSOR);<BR>
&nbsp;&nbsp;add(&quot;Center&quot;,canvas);<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.GOT_FOCUS &amp;&amp; !(event.target
instanceof MyCanvas)) {<BR>
&nbsp;&nbsp;&nbsp;setCursor(DEFAULT_CURSOR);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;}else if(event.id==Event.LOST_FOCUS) {<BR>
&nbsp;&nbsp;&nbsp;setCursor(CROSSHAIR_CURSOR);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;}else if(event.id==Event.ACTION_EVENT){<BR>
&nbsp;&nbsp;&nbsp;if(event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String arg = (String) event.arg;<BR>
&nbsp;&nbsp;&nbsp;if(processFileMenu(arg)) return true;<BR>
&nbsp;&nbsp;&nbsp;if(processDrawMenu(arg)) return true;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
&nbsp;public boolean processFileMenu(String s) {<BR>
&nbsp;&nbsp;if(&quot;New&quot;.equals(s)){<BR>
&nbsp;&nbsp;&nbsp;canvas.clear();<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(&quot;Exit&quot;.equals(s)){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
&nbsp;public boolean processDrawMenu(String s) {<BR>
&nbsp;&nbsp;MyMenu menu = menuBar.getMenu(&quot;Draw&quot;);<BR>
&nbsp;&nbsp;CheckboxMenuItem lineItem = (CheckboxMenuItem) menu.getItem(&quot;Line&quot;);
<BR>
&nbsp;&nbsp;CheckboxMenuItem ovalItem = (CheckboxMenuItem) menu.getItem(&quot;Oval&quot;);
<BR>
&nbsp;&nbsp;CheckboxMenuItem rectangleItem = <BR>
&nbsp;&nbsp;&nbsp;(CheckboxMenuItem) menu.getItem(&quot;Rectangle&quot;);
<BR>
&nbsp;&nbsp;if(&quot;Line&quot;.equals(s)){<BR>
&nbsp;&nbsp;&nbsp;canvas.setTool(TwoPointObject.LINE);<BR>
&nbsp;&nbsp;&nbsp;lineItem.setState(true);<BR>
&nbsp;&nbsp;&nbsp;ovalItem.setState(false);<BR>
&nbsp;&nbsp;&nbsp;rectangleItem.setState(false);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(&quot;Oval&quot;.equals(s)){<BR>
&nbsp;&nbsp;&nbsp;canvas.setTool(TwoPointObject.OVAL);<BR>
&nbsp;&nbsp;&nbsp;lineItem.setState(false);<BR>
&nbsp;&nbsp;&nbsp;ovalItem.setState(true);<BR>
&nbsp;&nbsp;&nbsp;rectangleItem.setState(false);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(&quot;Rectangle&quot;.equals(s)){<BR>
&nbsp;&nbsp;&nbsp;canvas.setTool(TwoPointObject.RECTANGLE);<BR>
&nbsp;&nbsp;&nbsp;lineItem.setState(false);<BR>
&nbsp;&nbsp;&nbsp;ovalItem.setState(false);<BR>
&nbsp;&nbsp;&nbsp;rectangleItem.setState(true);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;return false;<BR>
&nbsp;}<BR>
}<BR>
class MyCanvas extends Canvas {<BR>
&nbsp;&nbsp;int tool = TwoPointObject.LINE;<BR>
&nbsp;&nbsp;Vector objects = new Vector();<BR>
&nbsp;&nbsp;TwoPointObject current;<BR>
&nbsp;&nbsp;boolean newObject = false;<BR>
&nbsp;&nbsp;public MyCanvas(int toolType) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;super();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;tool = toolType;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public void setTool(int toolType) {<BR>
&nbsp;&nbsp;&nbsp;tool = toolType;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public void clear() {<BR>
&nbsp;&nbsp;&nbsp;objects.removeAllElements();<BR>
&nbsp;&nbsp;&nbsp;repaint();<BR>
&nbsp;}<BR>
&nbsp;public boolean mouseDown(Event event,int x,int y) {<BR>
&nbsp;&nbsp;&nbsp;current = new TwoPointObject(tool,x,y);<BR>
&nbsp;&nbsp;&nbsp;newObject = true;<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;}<BR>
&nbsp;public boolean mouseUp(Event event,int x,int y) {<BR>
&nbsp;&nbsp;if(newObject) {<BR>
&nbsp;&nbsp;&nbsp;objects.addElement(current);<BR>
&nbsp;&nbsp;&nbsp;newObject = false;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return true;<BR>
&nbsp;}<BR>
&nbsp;public boolean mouseDrag(Event event,int x,int y) {<BR>
&nbsp;&nbsp;if(newObject) {<BR>
&nbsp;&nbsp;&nbsp;int oldX = current.endX;<BR>
&nbsp;&nbsp;&nbsp;int oldY = current.endY;<BR>
&nbsp;&nbsp;&nbsp;if(tool != TwoPointObject.LINE) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(x &gt; current.startX) current.endX
= x;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(y &gt; current.startY) current.endY
= y;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int width = Math.max(oldX,current.endX)
- current.startX + 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int height = Math.max(oldY,current.endY)
- current.startY + 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;repaint(current.startX,current.startY,width,height);
<BR>
&nbsp;&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;current.endX = x;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;current.endY = y;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int startX = Math.min(Math.min(current.startX,current.endX),oldX);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int startY = Math.min(Math.min(current.startY,current.endY),oldY);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int endX = Math.max(Math.max(current.startX,current.endX),oldX);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int endY = Math.max(Math.max(current.startY,current.endY),oldY);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;repaint(startX,startY,endX-startX+1,endY-startY+1);
<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return true;<BR>
&nbsp;}<BR>
&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;int numObjects = objects.size();<BR>
&nbsp;&nbsp;for(int i=0;i&lt;numObjects;++i) {<BR>
&nbsp;&nbsp;&nbsp;TwoPointObject obj = (TwoPointObject) objects.elementAt(i);
<BR>
&nbsp;&nbsp;&nbsp;obj.draw(g);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;if(newObject) current.draw(g);<BR>
&nbsp;}<BR>
}<BR>
class TwoPointObject {<BR>
&nbsp;&nbsp;public static int LINE = 0;<BR>
&nbsp;&nbsp;public static int OVAL = 1;<BR>
&nbsp;&nbsp;public static int RECTANGLE = 2;<BR>
&nbsp;&nbsp;public int type, startX, startY, endX, endY;<BR>
&nbsp;&nbsp;public TwoPointObject(int objectType,int x1,int y1,int
x2,int y2) {<BR>
&nbsp;&nbsp;&nbsp;type = objectType;<BR>
&nbsp;&nbsp;&nbsp;startX = x1;<BR>
&nbsp;&nbsp;&nbsp;startY = y1;<BR>
&nbsp;&nbsp;&nbsp;endX = x2;<BR>
&nbsp;&nbsp;&nbsp;endY = y2;<BR>
&nbsp;}<BR>
&nbsp;public TwoPointObject(int objectType,int x,int y) {<BR>
&nbsp;&nbsp;&nbsp;this(objectType,x,y,x,y);<BR>
&nbsp;}<BR>
&nbsp;public TwoPointObject() {<BR>
&nbsp;&nbsp;&nbsp;this(LINE,0,0,0,0);<BR>
&nbsp;}<BR>
&nbsp;public void draw(Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;if(type == LINE) g.drawLine(startX,startY,endX,endY);
<BR>
&nbsp;&nbsp;&nbsp;else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int w = Math.abs(endX - startX);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int l = Math.abs(endY - startY);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(type == OVAL) g.drawOval(startX,startY,w,l);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else g.drawRect(startX,startY,w,l);
<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">DrawApp</FONT></TT> program is quite
a bit more sophisticated than the <TT><FONT FACE="Courier">DisplayImageApp</FONT></TT>
program with respect to the capabilities that it provides. When
you run <TT><FONT FACE="Courier">DrawApp</FONT></TT> you will
see the opening window, which is shown in <A HREF="f23-2.gif" >Figure 23.2</A>.
<P>
<A HREF="f23-2.gif"><B>Figure 23.2 :</B><I> The <TT>DrawApp</TT> opening window.</I></A>
<P>
The <TT><FONT FACE="Courier">DrawApp</FONT></TT> program is initially
configured to draw lines in its window. You can draw a line by
clicking the left mouse button and dragging the mouse. When you
have finished drawing a line, release the left mouse button and
the drawn line will be completed. The coordinate where you press
the left mouse button is the beginning of the line, and the coordinate
where you release the left mouse button is the end of the line.
Go ahead and draw several lines, as shown in <A HREF="f23-3.gif" >Figure 23.3</A>.
<P>
<A HREF="f23-3.gif"><B>Figure 23.3 :</B><I> Drawing some lines.</I></A>
<P>
The <TT><FONT FACE="Courier">DrawApp</FONT></TT> program supports
the drawing of lines, ovals, and rectangles. To draw an oval,
select the Oval menu item from the Draw pull-down menu, as shown
in <A HREF="f23-4.gif" >Figure 23.4</A>.
<P>
<A HREF="f23-4.gif"><B>Figure 23.4 :</B><I> The Draw menu.</I></A>
<P>
You draw an oval in the same way that you draw a line. When you
click the left button of your mouse, you mark the upper-left corner
of the oval. Drag the mouse to where you want the lower-right
corner of the oval and release the left mouse button. Try drawing
a few ovals, as shown in <A HREF="f23-5.gif" >Figure 23.5</A>.
<P>
<A HREF="f23-5.gif"><B>Figure 23.5 :</B><I> Drawing some ovals.</I></A>
<P>
Now select the Rectangle menu item from the Draw pull-down menu.
You draw rectangles in the same way that you draw ovals. Go ahead
and draw a rectangle, as shown in <A HREF="f23-6.gif" >Figure 23.6</A>.
<P>
<A HREF="f23-6.gif"><B>Figure 23.6 :</B><I> Drawing some rectangles.</I></A>
<P>
You can experiment with the program before going on to find out
how it works. If you want to clear the drawing screen, select
New from the File pull-down menu.
<P>
The <TT><FONT FACE="Courier">DrawApp</FONT></TT> program is a
little (but not much) longer than the programs you've developed
so far. It consists of three classes. The <TT><FONT FACE="Courier">DrawApp</FONT></TT>
class is the main class used to implement the program. The <TT><FONT FACE="Courier">MyCanvas</FONT></TT>
class is used to implement the main canvas component of the program.
The <TT><FONT FACE="Courier">TwoPointObject</FONT></TT> class
is used to implement the line, oval, and rectangle objects that
are drawn on the screen. It is called <TT><FONT FACE="Courier">TwoPointObject</FONT></TT>
because it supports objects that can be characterized by a starting
point (mouse down) and an ending point (mouse up).
<P>
The <TT><FONT FACE="Courier">DrawApp</FONT></TT> program declares
several field variables. The <TT><FONT FACE="Courier">menuItems[]</FONT></TT>
array is used to construct the menu bar identified by the <TT><FONT FACE="Courier">menuBar</FONT></TT>
variable. The <TT><FONT FACE="Courier">canvas</FONT></TT> variable
is used to refer to the <TT><FONT FACE="Courier">MyCanvas</FONT></TT>
object that implements the program drawing. This object is constructed
by passing the <TT><FONT FACE="Courier">TwoPointObject.LINE</FONT></TT>
constant as an argument. This tells the constructed object that
the line tool should be initially used to support drawing. The
height and width of the <TT><FONT FACE="Courier">DrawApp</FONT></TT>
window is set to 400<FONT FACE="Symbol">&#165;</FONT>400 pixels.
<P>
The <TT><FONT FACE="Courier">DrawApp</FONT></TT> window is constructed
using the standard approach that you've been following in previous
chapters. The <TT><FONT FACE="Courier">setup()</FONT></TT> method
sets the background color to white, invokes <TT><FONT FACE="Courier">setupMenuBar()</FONT></TT>
to set up the menu bar, and invokes the <TT><FONT FACE="Courier">setCursor()</FONT></TT>
method of the <TT><FONT FACE="Courier">Frame</FONT></TT> class
to set the initial cursor to the <TT><FONT FACE="Courier">CROSSHAIR_CURSOR</FONT></TT>
typically used in drawing programs. The <TT><FONT FACE="Courier">MyCanvas</FONT></TT>
object referenced by the <TT><FONT FACE="Courier">canvas</FONT></TT>
variable is then added to the center of the main application window.
<P>
That's all the setup required to support <TT><FONT FACE="Courier">DrawApp</FONT></TT>.
The rest of the program code provides the event handling required
to implement the drawing operations that were previously illustrated.
<P>
The <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
handles the <TT><FONT FACE="Courier">WINDOW_DESTROY</FONT></TT>
event in the usual manner. The <TT><FONT FACE="Courier">GOT_FOCUS</FONT></TT>
and <TT><FONT FACE="Courier">LOST_FOCUS</FONT></TT> methods check
to see whether the current position of the cursor changes focus
from the canvas to other parts of the window. If the cursor moves
outside of the canvas, the cursor is changed to its default shape.
If the cursor moves into the canvas, it is changed to a <TT><FONT FACE="Courier">CROSSHAIR_CURSOR</FONT></TT>.
<P>
The only other type of event handled by <TT><FONT FACE="Courier">DrawApp</FONT></TT>
is the <TT><FONT FACE="Courier">ACTION_EVENT</FONT></TT> associated
with user menu selections. The <TT><FONT FACE="Courier">processFileMenu()</FONT></TT>
and <TT><FONT FACE="Courier">processDrawMenu()</FONT></TT> methods
are invoked to handle these events.
<P>
The <TT><FONT FACE="Courier">processFileMenu()</FONT></TT> method
processes the New and Exit menu items. The New menu item is handled
by invoking the <TT><FONT FACE="Courier">clear()</FONT></TT> method
of the <TT><FONT FACE="Courier">MyCanvas</FONT></TT> class to
clear the canvas to a blank state. The Exit menu item is handled
in the usual manner.
<P>
The <TT><FONT FACE="Courier">processDrawMenu()</FONT></TT> method
begins by assigning the <TT><FONT FACE="Courier">CheckboxMenuItem</FONT></TT>
objects in the Draw menu to the <TT><FONT FACE="Courier">lineItem</FONT></TT>,
<TT><FONT FACE="Courier">ovalItem</FONT></TT>, and <TT><FONT FACE="Courier">rectangleItem</FONT></TT>
variables. These variables are used to determine which menu items
are checked.
<P>
The <TT><FONT FACE="Courier">processDrawMenu()</FONT></TT> method
handles the Line menu item by invoking the <TT><FONT FACE="Courier">setTool()</FONT></TT>
method to set the current drawing tool to the line tool. It uses
the <TT><FONT FACE="Courier">LINE</FONT></TT> constant defined
in the <TT><FONT FACE="Courier">TwoPointObject</FONT></TT> class.
The <TT><FONT FACE="Courier">lineItem</FONT></TT>, <TT><FONT FACE="Courier">ovalItem</FONT></TT>,
and <TT><FONT FACE="Courier">rectangleItem</FONT></TT> variables
are used to update the <TT><FONT FACE="Courier">CheckboxMenuItem</FONT></TT>
objects contained in the Draw menu using the <TT><FONT FACE="Courier">setState()</FONT></TT>
method of the <TT><FONT FACE="Courier">CheckboxMenuItem</FONT></TT>
class. The Oval and Rectangle menu items are handled in a similar
manner. The Oval menu item is handled by invoking the <TT><FONT FACE="Courier">setTool()</FONT></TT>
method with the <TT><FONT FACE="Courier">OVAL</FONT></TT> constant,
and the Rectangle menu item is handled by invoking the <TT><FONT FACE="Courier">setTool()</FONT></TT>
method with the <TT><FONT FACE="Courier">RECTANGLE</FONT></TT>
constant. The state of the menu items of the Draw menu are updated
to reflect the selected drawing tool.
<H4>MyCanvas</H4>
<P>
The <TT><FONT FACE="Courier">MyCanvas</FONT></TT> class subclasses
the <TT><FONT FACE="Courier">Canvas</FONT></TT> class to provide
custom drawing capabilities. The <TT><FONT FACE="Courier">tool</FONT></TT>
variable is used to identify the current drawing tool that is
in effect. The <TT><FONT FACE="Courier">objects</FONT></TT> variable
is declared as a <TT><FONT FACE="Courier">Vector</FONT></TT>.
It is used to store all of the objects drawn by the user. The
<TT><FONT FACE="Courier">current</FONT></TT> variable is used
to refer to the current <TT><FONT FACE="Courier">TwoPointObject</FONT></TT>
object being drawn by the user. The <TT><FONT FACE="Courier">newObject</FONT></TT>
flag is used to track whether the user has begun drawing a new
object.
<P>
The <TT><FONT FACE="Courier">MyCanvas</FONT></TT> constructor
invokes the constructor of the <TT><FONT FACE="Courier">Canvas</FONT></TT>
class using the superclass constructor call statement and then
sets the <TT><FONT FACE="Courier">tool</FONT></TT> variable to
the <TT><FONT FACE="Courier">toolType</FONT></TT> argument passed
to the constructor.
<P>
The <TT><FONT FACE="Courier">setTool()</FONT></TT> method changes
the tool used to draw an object.
<P>
The <TT><FONT FACE="Courier">clear()</FONT></TT> method invokes
the <TT><FONT FACE="Courier">removeAllElements()</FONT></TT> method
of the vector class to remove all drawing objects stored in the
<TT><FONT FACE="Courier">Vector</FONT></TT> referenced by the
<TT><FONT FACE="Courier">objects</FONT></TT> variable.
<P>
The <TT><FONT FACE="Courier">mouseDown()</FONT></TT> method is
used to handle the event that is generated when the user clicks
the left mouse button in the canvas. The method is called by the
Java runtime system with the position of the mouse click. A new
<TT><FONT FACE="Courier">TwoPointObject</FONT></TT> object is
created, with the <TT><FONT FACE="Courier">tool</FONT></TT> variable
and the position of the mouse click as its arguments. The newly
created object is assigned to the <TT><FONT FACE="Courier">current</FONT></TT>
variable. The <TT><FONT FACE="Courier">newObject</FONT></TT> flag
is set to <TT><FONT FACE="Courier">true</FONT></TT> and the <TT><FONT FACE="Courier">true</FONT></TT>
value is returned to indicate that the event has been successfully
handled.
<P>
The <TT><FONT FACE="Courier">mouseUp()</FONT></TT> method is used
to handle the event that is generated when the user releases the
left mouse button. This action marks the completion of the drawing
of an object. The event is handled by adding the object referenced
by the <TT><FONT FACE="Courier">current</FONT></TT> variable to
the <TT><FONT FACE="Courier">objects</FONT></TT> vector. The <TT><FONT FACE="Courier">newObject</FONT></TT>
flag is then set to <TT><FONT FACE="Courier">false</FONT></TT>.
The object referenced by the <TT><FONT FACE="Courier">current</FONT></TT>
variable is updated with its ending position during the processing
of the <TT><FONT FACE="Courier">mouseDrag()</FONT></TT> event-handling
method. The <TT><FONT FACE="Courier">newObject</FONT></TT> flag
is checked to make sure that the mouse was not clicked outside
of the current window and then released.
<P>
The <TT><FONT FACE="Courier">mouseDrag()</FONT></TT> event performs
somewhat more sophisticated event handling than the <TT><FONT FACE="Courier">mouseDown()</FONT></TT>
and <TT><FONT FACE="Courier">mouseUp()</FONT></TT> methods perform.
It checks the <TT><FONT FACE="Courier">newObject</FONT></TT> flag
to make sure that an object is currently being drawn. It then
sets the <TT><FONT FACE="Courier">oldX</FONT></TT> and <TT><FONT FACE="Courier">oldY</FONT></TT>
variables to the last ending position of the object being drawn.
These variables will be used to determine what portion of the
canvas needs to be repainted. Repainting of the entire canvas
is not visually appealing because it causes previously drawn objects
to flicker.
<P>
If the current drawing tool is not a line, an oval or rectangle
object is being drawn by the user. The x- and y-coordinates provided
as arguments to the <TT><FONT FACE="Courier">mouseDrag()</FONT></TT>
method are checked to determine whether the mouse was dragged
below and to the right of the object being drawn. If this is the
case, the ending position of the current object is updated. If
the mouse is dragged to the left or above the starting point of
the object, the current position of the mouse is ignored. This
is to ensure that the starting position of the oval or rectangle
is indeed its upper-left corner. The new <TT><FONT FACE="Courier">width</FONT></TT>
and <TT><FONT FACE="Courier">height</FONT></TT> of the area to
be repainted are calculated as the maximum area covered by the
previous ending position and the current object-ending position.
This is to ensure that the repaint operation will erase any previous
boundaries of the object being drawn. The <TT><FONT FACE="Courier">max()</FONT></TT>
method of the <TT><FONT FACE="Courier">java.lang.Math</FONT></TT>
class is used to determine this maximum area. The <TT><FONT FACE="Courier">repaint()</FONT></TT>
method of the <TT><FONT FACE="Courier">Component</FONT></TT> class
is then used to repaint the area updated as the result of the
mouse drag. This version of the <TT><FONT FACE="Courier">repaint()</FONT></TT>
method takes the x,y-coordinates of the upper-left corner of the
area to be redrawn and the width and height of this area as its
parameters.
<P>
Line drawing is not restricted in the same manner as oval and
rectangle drawing. If it were, you would not be able to draw lines
that go up and to the right or down and to the left. The <TT><FONT FACE="Courier">else</FONT></TT>
part of the <TT><FONT FACE="Courier">if</FONT></TT> statement
updates the starting position of the area to be repainted as the
upper- leftmost point of the line being redrawn. It then updates
the ending position of the area to be repainted as the lower rightmost
point of the line. The canvas is then repainted using the starting
coordinates and the updated width and height of the repaint area.
<P>
To get a better feel for the process of local screen repainting,
try experimenting with the way the <TT><FONT FACE="Courier">repaint()</FONT></TT>
method is used to update the canvas display.
<P>
The <TT><FONT FACE="Courier">paint()</FONT></TT> method is used
to paint and repaint the screen. It uses the <TT><FONT FACE="Courier">size()</FONT></TT>
method of the <TT><FONT FACE="Courier">Vector</FONT></TT> class
to determine how many objects are stored in the <TT><FONT FACE="Courier">objects</FONT></TT>
vector and sets the <TT><FONT FACE="Courier">numObjects</FONT></TT>
variable to this value. It then iterates through each object stored
in <TT><FONT FACE="Courier">objects</FONT></TT> and draws it on
the canvas. The <TT><FONT FACE="Courier">elementAt()</FONT></TT>
method of the <TT><FONT FACE="Courier">Vector</FONT></TT> class
is used to retrieve an object from the <TT><FONT FACE="Courier">objects</FONT></TT>
vector. The object is cast into an object of class <TT><FONT FACE="Courier">TwoPointObject</FONT></TT>
and assigned to the <TT><FONT FACE="Courier">obj</FONT></TT> variable.
The <TT><FONT FACE="Courier">draw()</FONT></TT> method of the
<TT><FONT FACE="Courier">TwoPointObject</FONT></TT> class is invoked
to draw the object on the current <TT><FONT FACE="Courier">Graphics</FONT></TT>
context.
<P>
Notice that the <TT><FONT FACE="Courier">paint()</FONT></TT> method
does not have to know how to support limited-area repainting.
Only full-canvas painting needs to be implemented by <TT><FONT FACE="Courier">paint()</FONT></TT>.
Support of limited-area repainting is provided by the local AWT
implementation.
<H4>TwoPointObject</H4>
<P>
The <TT><FONT FACE="Courier">TwoPointObject</FONT></TT> class
is used to keep track of the objects drawn by the user. It records
the type of object and its starting and ending coordinates. It
also draws the objects on a <TT><FONT FACE="Courier">Graphics</FONT></TT>
object passed as a parameter.
<P>
<TT><FONT FACE="Courier">TwoPointObject</FONT></TT> defines the
<TT><FONT FACE="Courier">LINE</FONT></TT>, <TT><FONT FACE="Courier">OVAL</FONT></TT>,
and <TT><FONT FACE="Courier">RECTANGLE</FONT></TT> constants,
which are also used by the <TT><FONT FACE="Courier">MyCanvas</FONT></TT>
class. The <TT><FONT FACE="Courier">type</FONT></TT> variable
is used to record the type of object being drawn. The <TT><FONT FACE="Courier">startX</FONT></TT>,
<TT><FONT FACE="Courier">startY</FONT></TT>, <TT><FONT FACE="Courier">endX</FONT></TT>,
and <TT><FONT FACE="Courier">endY</FONT></TT> variables identify
the starting and ending coordinates of the object.
<P>
Three <TT><FONT FACE="Courier">TwoPointObject</FONT></TT> constructors
are declared. The first constructor takes the type of object being
drawn and its starting and ending coordinates as its parameters.
The second constructor leaves out the ending coordinates and sets
them to be the same as the starting coordinates. The last constructor
takes no parameters and creates a line that is at the coordinate
0,0.
<P>
The <TT><FONT FACE="Courier">draw()</FONT></TT> method checks
the type variable to determine what type of object is to be drawn.
If the object is a line, it uses the <TT><FONT FACE="Courier">drawLine()</FONT></TT>
method of the <TT><FONT FACE="Courier">Graphics</FONT></TT> class
to draw a line from its starting to ending coordinates. If the
object is an oval or a line, the <TT><FONT FACE="Courier">w</FONT></TT>
and <TT><FONT FACE="Courier">l</FONT></TT> variables are assigned
the width and length of the object to be drawn. The <TT><FONT FACE="Courier">drawOval()</FONT></TT>
and <TT><FONT FACE="Courier">drawRect()</FONT></TT> methods are
used to draw an oval or rectangle, respectively.
<H2><A NAME="CombiningGraphicsandText"><FONT SIZE=5 COLOR=#FF0000>Combining
Graphics and Text</FONT></A></H2>
<P>
The <TT><FONT FACE="Courier">Graphics</FONT></TT> class treats
text in the same way as it handles other graphics objects. To
include text drawing in your graphics applications, use the <TT><FONT FACE="Courier">drawString()</FONT></TT>
method of the <TT><FONT FACE="Courier">Graphics</FONT></TT> class,
as illustrated in <A HREF="ch22.htm" >Chapter 22</A>. You will
need to use the <TT><FONT FACE="Courier">Font</FONT></TT> and
<TT><FONT FACE="Courier">FontMetrics</FONT></TT> classes to determine
the size of the text that is drawn. Otherwise, text and graphics
objects can be easily combined in any <TT><FONT FACE="Courier">Graphics</FONT></TT>-based
application.
<H2><A NAME="TheImageProcessingClassesofjavaawt"><FONT SIZE=5 COLOR=#FF0000>The
Image-Processing Classes of </FONT><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">java.awt.image</FONT></TT></A>
</H2>
<P>
The <TT><FONT FACE="Courier">java.awt.image</FONT></TT> package
provides a number of classes and interfaces that support image
processing. These classes are described in <A HREF="ch15.htm" >Chapter 15</A>,
&quot;Window Programming with the <TT><FONT FACE="Courier">java.awt</FONT></TT>
Package.&quot; For the most part, you will not need to use these
classes unless your application program is oriented toward low-level
image processing.
<P>
The <TT><FONT FACE="Courier">java.awt.image</FONT></TT> package
is based on the concept of an image producer and image consumer.
The <I>image producer</I> provides the data associated with an
image. This data is used or consumed by an <I>image consumer</I>.
The <TT><FONT FACE="Courier">ImageProducer</FONT></TT> and <TT><FONT FACE="Courier">ImageConsumer</FONT></TT>
interfaces are used to map this producer-consumer concept to specific
image-processing classes.
<P>
An image filter is used to alter data that is produced by an image
producer before it is consumed by an image consumer. Image filters
are similar to the I/O stream filters discussed in <A HREF="ch12.htm" >Chapter 12</A>,
&quot;Portable Software and the <TT><FONT FACE="Courier">java.lang</FONT></TT>
Package.&quot; An <I>image filter</I> reads the data produced
by an image producer, modifies it, and then passes it on to the
image consumer.
<H3><A NAME="TheImageAppProgram">The <TT><FONT SIZE=4 FACE="Courier">ImageApp</FONT></TT><FONT SIZE=4>
Program</FONT></A></H3>
<P>
The <TT><FONT FACE="Courier">ImageApp</FONT></TT> program shows
how to perform image processing using a custom-built image filter.
Its source code is shown in Listing 23.3.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 23.3. The source code for the </B><TT><B><FONT FACE="Courier">ImageApp</FONT></B></TT><B>
program.</B><P>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
import java.awt.image.*;<BR>
import jdg.ch20.*;<BR>
<BR>
public class ImageApp extends Frame {<BR>
&nbsp;MyMenuBar menuBar;<BR>
&nbsp;Toolkit toolkit;<BR>
&nbsp;int screenWidth = 500;<BR>
&nbsp;int screenHeight = 475;<BR>
&nbsp;Image filteredImage;<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;ImageApp app = new ImageApp();<BR>
&nbsp;}<BR>
&nbsp;public ImageApp() {<BR>
&nbsp;&nbsp;super(&quot;ImageApp&quot;);<BR>
&nbsp;&nbsp;setup();<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(screenWidth,screenHeight);<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void setup() {<BR>
&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;setupMenuBar();<BR>
&nbsp;&nbsp;setMenuBar(menuBar);<BR>
&nbsp;&nbsp;setupImage();<BR>
&nbsp;}<BR>
&nbsp;void setupMenuBar() {<BR>
&nbsp;&nbsp;String menuItems[][] = {{&quot;File&quot;,&quot;Exit&quot;},{&quot;Filter&quot;,&quot;-Red&quot;,&quot;-Green&quot;,&quot;-Blue&quot;}};
<BR>
&nbsp;&nbsp;menuBar = new MyMenuBar(menuItems);<BR>
&nbsp;}<BR>
&nbsp;void setupImage() {<BR>
&nbsp;&nbsp;toolkit = getToolkit();<BR>
&nbsp;&nbsp;filteredImage = toolkit.getImage(&quot;aviris.gif&quot;);
<BR>
&nbsp;}<BR>
&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;g.drawImage(filteredImage,0,0,this);<BR>
&nbsp;}<BR>
&nbsp;public void filterImage(){<BR>
&nbsp;&nbsp;Image image = toolkit.getImage(&quot;aviris.gif&quot;);
<BR>
&nbsp;&nbsp;ImageFilter filter = new MyImageFilter(getMask());
<BR>
&nbsp;&nbsp;filteredImage = <BR>
&nbsp;&nbsp;&nbsp;&nbsp;createImage(new FilteredImageSource(image.getSource(),filter));
<BR>
&nbsp;&nbsp;repaint();<BR>
&nbsp;}<BR>
&nbsp;public int getMask() {<BR>
&nbsp;&nbsp;int red = 0xff00ffff;<BR>
&nbsp;&nbsp;int green = 0xffff00ff;<BR>
&nbsp;&nbsp;int blue = 0xffffff00;<BR>
&nbsp;&nbsp;int mask = 0xffffffff;<BR>
&nbsp;&nbsp;MyMenu menu = menuBar.getMenu(&quot;Filter&quot;);
<BR>
&nbsp;&nbsp;CheckboxMenuItem redItem = (CheckboxMenuItem) menu.getItem(&quot;Red&quot;);
<BR>
&nbsp;&nbsp;CheckboxMenuItem greenItem = (CheckboxMenuItem) menu.getItem(&quot;Green&quot;);
<BR>
&nbsp;&nbsp;CheckboxMenuItem blueItem = (CheckboxMenuItem) menu.getItem(&quot;Blue&quot;);
<BR>
&nbsp;&nbsp;if(redItem.getState()) mask &amp;= red;<BR>
&nbsp;&nbsp;if(greenItem.getState()) mask &amp;= green;<BR>
&nbsp;&nbsp;if(blueItem.getState()) mask &amp;= blue;<BR>
&nbsp;&nbsp;return mask;<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.ACTION_EVENT){<BR>
&nbsp;&nbsp;&nbsp;if(event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String sel = (String) event.arg;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(&quot;Exit&quot;.equals(sel)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;Red&quot;.equals(sel) ||
&quot;Green&quot;.equals(sel) || &quot;Blue&quot;.equals(sel))
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterImage();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
}<BR>
class MyImageFilter extends RGBImageFilter {<BR>
&nbsp;&nbsp;int filter;<BR>
&nbsp;&nbsp;public MyImageFilter(int mask) {<BR>
&nbsp;&nbsp;&nbsp;canFilterIndexColorModel = true;<BR>
&nbsp;&nbsp;&nbsp;filter = mask;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public int filterRGB(int x,int y,int rgb) {<BR>
&nbsp;&nbsp;&nbsp;return rgb &amp; filter;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
When you first run <TT><FONT FACE="Courier">ImageApp</FONT></TT>,
it loads the image contained in the file <TT><FONT FACE="Courier">aviris.gif</FONT></TT>.
(<A HREF="f23-7.gif" >See Figure 23.7</A>.) This is a public-domain
image provided by the NASA Jet Propulsion Laboratory. It is produced
by the Airborne Visible InfraRed Imaging Spectrometer (AVIRIS).
The <TT><FONT FACE="Courier">aviris.gif</FONT></TT> file is fairly
large; you might have to wait a couple seconds for it to complete
its loading.
<P>
<A HREF="f23-7.gif"><B>Figure 23.7 :</B><I> The <TT>ImageApp</TT> opening window.</I></A>
<P>
The AVIRIS image is not provided to introduce you to NASA's advanced
airborne-imaging algorithms. Instead, you will use this image
as an example to understand how basic image filtering works. Unfortunately,
the images displayed in this book are in black and white, so you
will not be able to see how the image filtering works by looking
at the book.
<P>
Click on the Filter pull-down menu and select the Blue menu item,
as shown in <A HREF="f23-8.gif" >Figure 23.8</A>.
<P>
<A HREF="f23-8.gif"><B>Figure 23.8 :</B><I> The Filter menu.</I></A>
<P>
Selecting the blue filter causes all blue color components to
be filtered out of the image. The resulting image is comprised
only of green and red color components. (<A HREF="f23-9.gif" >See Figure 23.9</A>.)
<P>
<A HREF="f23-9.gif"><B>Figure 23.9 :</B><I> A filtered image.</I></A>
<P>
Go ahead and try the red and green filters by selecting Red and
Green from the Filter menu. Also try various filter combinations
to get a better feel for how filtering works.
<P>
Although the <TT><FONT FACE="Courier">ImageApp</FONT></TT> program
may seem to perform some amazing processing, it is actually quite
small. Two classes are defined: the <TT><FONT FACE="Courier">ImageApp</FONT></TT>
class, used to implement the main program window, and the <TT><FONT FACE="Courier">MyImageFilter</FONT></TT>
class, used to implement the actual image filter.
<P>
The <TT><FONT FACE="Courier">ImageApp</FONT></TT> class declares
the <TT><FONT FACE="Courier">menuBar</FONT></TT>, <TT><FONT FACE="Courier">toolkit</FONT></TT>,
<TT><FONT FACE="Courier">screenWidth</FONT></TT>, <TT><FONT FACE="Courier">screenHeight</FONT></TT>,
and <TT><FONT FACE="Courier">filteredImage</FONT></TT> variables.
The <TT><FONT FACE="Courier">menuBar</FONT></TT>, <TT><FONT FACE="Courier">screenWidth</FONT></TT>,
and <TT><FONT FACE="Courier">screenHeight</FONT></TT> variables
are used in their usual manner. The <TT><FONT FACE="Courier">toolkit</FONT></TT>
variable is used to refer to the <TT><FONT FACE="Courier">Toolkit</FONT></TT>
object associated with the application window. The <TT><FONT FACE="Courier">filteredImage</FONT></TT>
variable is used to refer to the image that is being manipulated.
<P>
The <TT><FONT FACE="Courier">setupImage()</FONT></TT> method uses
the <TT><FONT FACE="Courier">getToolkit()</FONT></TT> method of
the <TT><FONT FACE="Courier">Window</FONT></TT> class to retrieve
the toolkit that is associated with the application window. It
then invokes the <TT><FONT FACE="Courier">getImage()</FONT></TT>
method of the <TT><FONT FACE="Courier">Toolkit</FONT></TT> class
to load the image contained in the file into an <TT><FONT FACE="Courier">Image</FONT></TT>
object that is referenced by the <TT><FONT FACE="Courier">filteredImage</FONT></TT>
variable.
<P>
The <TT><FONT FACE="Courier">paint()</FONT></TT> method draws
the image identified by the <TT><FONT FACE="Courier">filteredImage</FONT></TT>
variable on the screen using the <TT><FONT FACE="Courier">drawImage()</FONT></TT>
method of the <TT><FONT FACE="Courier">Graphics</FONT></TT> class.
<P>
The <TT><FONT FACE="Courier">filterImage()</FONT></TT> method
oversees the image-filtering process. It loads the <TT><FONT FACE="Courier">aviris.gif</FONT></TT>
image into an object assigned to the <TT><FONT FACE="Courier">image</FONT></TT>
variable. It creates a new object of the <TT><FONT FACE="Courier">MyImageFilter</FONT></TT>
class and assigns it to the <TT><FONT FACE="Courier">filter</FONT></TT>
variable. The <TT><FONT FACE="Courier">MyImageFilter</FONT></TT>
object is provided with a filter mask that is generated by a call
to the <TT><FONT FACE="Courier">getMask()</FONT></TT> method.
You'll learn what a filter mask is shortly.
<P>
The <TT><FONT FACE="Courier">filterImage()</FONT></TT> method
uses the <TT><FONT FACE="Courier">createImage()</FONT></TT> method
of the <TT><FONT FACE="Courier">Component</FONT></TT> class to
create a new image and assign it to the <TT><FONT FACE="Courier">filteredImage</FONT></TT>
variable. The <TT><FONT FACE="Courier">repaint()</FONT></TT> method
is invoked to redisplay the new image assigned to the <TT><FONT FACE="Courier">filteredImage</FONT></TT>
variable. The actual image filtering is performed as part of the
creation of the arguments supplied to the <TT><FONT FACE="Courier">createImage()</FONT></TT>
method. When <TT><FONT FACE="Courier">createImage()</FONT></TT>
is invoked, a new object of the <TT><FONT FACE="Courier">java.awt.image.FilteredImageSource</FONT></TT>
class is created. This object assigns the source (<TT><FONT FACE="Courier">ImageProducer</FONT></TT>)
of the image being created to the newly created <TT><FONT FACE="Courier">FilteredImageSource</FONT></TT>
object. This object is created using the source (<TT><FONT FACE="Courier">ImageProducer</FONT></TT>)
of the <TT><FONT FACE="Courier">aviris.gif</FONT></TT> image assigned
to the <TT><FONT FACE="Courier">image</FONT></TT> variable. The
<TT><FONT FACE="Courier">getSource()</FONT></TT> method is invoked
to get the <TT><FONT FACE="Courier">ImageProducer</FONT></TT>
of the original image. The <TT><FONT FACE="Courier">FilteredImageSource</FONT></TT>
object is filtered using the <TT><FONT FACE="Courier">MyImageFilter</FONT></TT>
object assigned to the <TT><FONT FACE="Courier">filter</FONT></TT>
variable. To complete this examination of the image-filtering
process, you only need to figure out how the <TT><FONT FACE="Courier">MyImageFilter</FONT></TT>
class works and what was returned by the <TT><FONT FACE="Courier">getMask()</FONT></TT>
method.
<P>
The <TT><FONT FACE="Courier">getMask()</FONT></TT> method returns
an integer value that is used to mask out certain RGB color combinations.
The <TT><FONT FACE="Courier">red</FONT></TT> variable is assigned
the <TT><FONT FACE="Courier">0xff00ffff</FONT></TT> hexadecimal
constant. The red component of an RGB color is stored in the bits
that are set to zero in this constant. So, when you logically
<TT><FONT FACE="Courier">AND</FONT></TT> this value with any color,
its red bits are stripped out. The hexadecimal constants assigned
to the <TT><FONT FACE="Courier">green</FONT></TT> and <TT><FONT FACE="Courier">blue</FONT></TT>
variables are defined in an analogous fashion to strip out the
green and blue bits of a color when they are logically <TT><FONT FACE="Courier">AND</FONT></TT>ed
with the color. The <TT><FONT FACE="Courier">mask</FONT></TT>
variable is used to compute the returned result. The constant
assigned to the <TT><FONT FACE="Courier">mask</FONT></TT> variable
will have no effect on any color that it is <TT><FONT FACE="Courier">AND</FONT></TT>ed
with.
<P>
The <TT><FONT FACE="Courier">getMask()</FONT></TT> method checks
each of the <TT><FONT FACE="Courier">CheckboxMenuItem</FONT></TT>
objects contained in the Filter menu to determine which objects
are set. If a menu item is set, the color mask associated with
that item is logically <TT><FONT FACE="Courier">AND</FONT></TT>ed
with the <TT><FONT FACE="Courier">mask</FONT></TT> variable. The
resulting mask value is a value that will strip out the colors
specified by the set menu items.
<P>
The <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
performs the normal <TT><FONT FACE="Courier">WINDOW_DESTROY</FONT></TT>
and Exit menu item processing. It also handles the selection of
the Red, Green, and Blue menu items by invoking the <TT><FONT FACE="Courier">filterImage()</FONT></TT>
method. This causes the <TT><FONT FACE="Courier">aviris.gif</FONT></TT>
image to be filtered as specified by the mask generated according
to the state of the Red, Green, and Blue checkbox menu items.
<P>
The <TT><FONT FACE="Courier">MyImageFilter</FONT></TT> class performs
the actual image filtering. It extends the <TT><FONT FACE="Courier">RGBImageFilter</FONT></TT>
class defined in the <TT><FONT FACE="Courier">java.awt.image</FONT></TT>
package and overrides the <TT><FONT FACE="Courier">filterRGB()</FONT></TT>
method.
<P>
The <TT><FONT FACE="Courier">MyImageFilter</FONT></TT> constructor
takes a <TT><FONT FACE="Courier">mask</FONT></TT> value as its
parameter and assigns it to the <TT><FONT FACE="Courier">filter</FONT></TT>
variable. It also sets the <TT><FONT FACE="Courier">canFilterIndexColorModel</FONT></TT>
variable to <TT><FONT FACE="Courier">true</FONT></TT>. This allows
filtering to take place on the color map associated with the image,
rather than on the actual image.
<P>
The <TT><FONT FACE="Courier">filterRGB()</FONT></TT> method performs
the image filtering. It takes the x,y-coordinate of each pixel
to be filtered and the RGB color of the pixel as its parameters.
It then logically <TT><FONT FACE="Courier">AND</FONT></TT>s the
color value with the mask stored in the <TT><FONT FACE="Courier">filter</FONT></TT>
variable and returns the resulting filtered color.
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
This chapter covers the details of using the <TT><FONT FACE="Courier">Canvas</FONT></TT>
and <TT><FONT FACE="Courier">Graphics</FONT></TT> classes. It
also shows you how to use the image processing-related classes
of the <TT><FONT FACE="Courier">java.awt.image</FONT></TT> package.
Java's support of bitmapped images is demonstrated with the <TT><FONT FACE="Courier">DisplayImageApp</FONT></TT>
program. The <TT><FONT FACE="Courier">DrawApp</FONT></TT> program
illustrates the drawing methods of the <TT><FONT FACE="Courier">Graphics</FONT></TT>
class, and the <TT><FONT FACE="Courier">ImageApp</FONT></TT> program
shows you how to use the classes of <TT><FONT FACE="Courier">java.awt.image</FONT></TT>.
<A HREF="ch24.htm" >Chapter 24</A>, &quot;Scrollbars,&quot; shows
you how to use scrollbars to scroll text and graphics drawn on
the canvas.
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



