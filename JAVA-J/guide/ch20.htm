<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META>
<H1><FONT COLOR=#FF0000>Chapter 20</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Menus, Buttons, and Dialong
Boxes</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#AddingMenustoWindows" >Adding Menus to Windows</A>
<UL>
<LI><A HREF="#TheMyMenuClass" >The MyMenu Class</A>
<LI><A HREF="#TheMyMenuBarClass" >The MyMenuBar Class</A>
<LI><A HREF="#TheMenuAppProgram" >The MenuApp Program</A>
</UL>
<LI><A HREF="#WorkingwithButtons" >Working with Buttons</A>
<UL>
<LI><A HREF="#TheButtonBarClass" >The ButtonBar Class</A>
<LI><A HREF="#TheButtonAppProgram" >The ButtonApp Program</A>
</UL>
<LI><A HREF="#UsingDialogBoxes" >Using Dialog Boxes</A>
<UL>
<LI><A HREF="#TheMessageDialogClass" >The MessageDialog Class</A>
<LI><A HREF="#TheMessageAppProgram" >The MessageApp Program</A>
<LI><A HREF="#TheFileDialogClass" >The FileDialog Class</A>
</UL>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
This chapter covers the details of using the <TT>Menu</TT>, <TT>Button</TT>,
and <TT>Dialog</TT> classes. It describes the available menu and
button options and shows you how to quickly and easily construct
menus and buttons for your window programs. The use of dialog
boxes is explained, and a generic <TT>MessageDialog</TT> component
is constructed and explained as part of an example. When you finish
this chapter, you will be able to effectively use menus, buttons,
and dialog boxes in your Java window programs.
<H2><A NAME="AddingMenustoWindows"><B><FONT SIZE=5 COLOR=#FF0000>Adding
Menus to Windows</FONT></B></A></H2>
<P>
Java provides a rich set of menu-related classes to create and
interact with pull-down menus. The <TT>MenuComponent</TT> class
is the superclass of all menu-related classes. It extends the
<TT>Object</TT> class. The <TT>getFont()</TT> and <TT>setFont()</TT>
methods are the most useful methods provided by <TT>MenuComponent</TT>.
Its two direct superclasses, <TT>MenuBar</TT> and <TT>MenuItem</TT>,
provide most of the methods for creating and using menus. The
<TT>CheckboxMenuItem</TT> class extends the <TT>MenuItem</TT>
class and supports menu items that can be checked on or off. The
<TT>Menu</TT> class extends the <TT>MenuItem</TT> class and implements
a collection of <TT>MenuItem</TT> objects that can be assigned
to a <TT>MenuBar</TT> object.
<P>
You are probably somewhat familiar with menus from <A HREF="ch18.htm" >Chapters 18</A>,
&quot;Opening Windows,&quot; and <A HREF="ch19.htm" >19</A>, &quot;Organizing
Window Programs.&quot; A program's application window is implemented
by a <TT>Frame</TT> object. It can have one and only one <TT>MenuBar</TT>
object, which is set using the <TT>setMenuBar()</TT> method. A
<I>menu bar</I> is a collection of menus. Each menu is represented
as a separate pull-down menu on the menu bar. Common examples
are the File, Edit, and Help pull-down menus found in many window
applications. The <TT>MenuBar</TT> class allows a special menu
to be designated as a Help menu, but this feature is not implemented
in Windows 95 or NT.
<P>
A <TT>Menu</TT> object contains one or more <TT>MenuItem</TT>
objects, which can be a normal user-selectable <TT>MenuItem</TT>
object, a <TT>CheckboxMenuItem</TT> object, or another <TT>Menu</TT>
object. Java supports <I>tear-off menus</I>, which are menus that
can be removed from a menu bar. A tear-off menu is constructed
in the same manner as a regular menu-you only need to set the
<TT>boolean</TT> tear-off value in the <TT>Menu()</TT> constructor.
Tear-off menus, however, are not implemented within Windows 95
or NT.
<P>
The <TT>MenuItem</TT> class is the superclass of the <TT>Menu</TT>
class. It allows a menu to be a menu item and is used in constructing
cascading, multilevel menus. <TT>MenuItem</TT> is also the superclass
of the <TT>CheckboxMenuItem</TT> class and provides the capability
to implement menu items that can be checked or unchecked. If a
<TT>MenuItem</TT> object is constructed directly with the <TT>MenuItem</TT>
constructor, it becomes a normal menu item that is selected from
a pull-down menu.
<H3><A NAME="TheMyMenuClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">MyMenu</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The creation and organization of menu bars, menus, and menu items
into a program's menu is a straightforward, but tedious, process.
You have to create a menu bar, create and add menus to the menu
bar, add menu items to the menus, and then add the menu bar to
the program's application window. This usually involves the use
of a large number of constructors and access methods. To illustrate
the use of the menu-related classes and to simplify the menu-creation
process, you'll create two classes, <TT>MyMenu</TT> and <TT>MyMenuBar</TT>,
that can be used to quickly construct menus for Java programs.
These classes implement multiple levels of menus, checkbox menu
items, and menu-disabling options. The special Help menu and tear-off
menus are not implemented, however, because they are transparent
to Windows 95 and NT.
<P>
The <TT>MyMenu</TT> class is used to construct menus using an
array of objects consisting of <TT>String</TT> objects that represent
menu labels, or arrays of objects that represent submenus. Menu
labels can be either checkbox menu items or normal menu items
and can be either initially enabled or disabled (grayed out).
Checkbox menu items can be initially checked or unchecked. The
first character of the label's text string is used to indicate
what type of label it is. The character conventions are as follows:
<BR>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD>

<TT><CENTER>+</CENTER></TT>

</TD>
<TD WIDTH=553>
A checkbox menu item that is initially checked and enabled.</BLOCKQUOTE>

</TD></TR>
<TR><TD WIDTH=37>
<TT><CENTER>#</CENTER></TT>

</TD>
<TD WIDTH=553>
A checkbox menu item that is initially checked and disabled.</BLOCKQUOTE>

</TD></TR>
<TR><TD WIDTH=37>
<TT><CENTER>-</CENTER></TT>

</TD>
<TD WIDTH=553>
A checkbox menu item that is initially unchecked and enabled. If the label consists of just <TT>-</TT>, it indicates a separator.


</TD></TR>
<TR><TD WIDTH=37>
<TT><CENTER>=</CENTER></TT>

</TD>
<TD WIDTH=553>
A checkbox menu item that is initially unchecked and disabled.

</TD></TR>
<TR><TD WIDTH=37>
<TT><CENTER>~</CENTER></TT>

</TD>
<TD WIDTH=553>
A normal menu item that is initially disabled.

</TD></TR>
<TR><TD WIDTH=37>
&nbsp;

</TD><TD WIDTH=553>
Any other character indicates a normal, enabled menu item. If the first character is <TT>!</TT>, it is ignored. This allows any menu item to begin with any character.


</TD></TR>
</TABLE></CENTER>

<P>
These conventions apply to menu options. Only the <TT>~</TT> and
<TT>!</TT> options are used with the menu's main label. Using
these options greatly simplifies the process of a menu creation.
The source code for the <TT>MyMenu</TT> class is shown in Listing
20.1.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 20.1. The source code of the </B><TT><B><FONT FACE="Courier New">MyMenu</FONT></B></TT><B>
class.</B>
<P>
<TT>package jdg.ch20;<BR>
<BR>
<FONT FACE="Courier New">import java.awt.*;<BR>
<BR>
public class MyMenu extends Menu {<BR>
&nbsp;public MyMenu(Object labels[]) {<BR>
&nbsp;&nbsp;super((String)labels[0]);<BR>
&nbsp;&nbsp;String menuName = (String) labels[0];<BR>
&nbsp;&nbsp;char firstMenuChar = menuName.charAt(0);<BR>
&nbsp;&nbsp;if(firstMenuChar == '~' || firstMenuChar =='!'){<BR>
&nbsp;&nbsp;&nbsp;setLabel(menuName.substring(1));<BR>
&nbsp;&nbsp;&nbsp;if(firstMenuChar == '~') disable();<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;for(int i=1;i&lt;labels.length;++i) {<BR>
&nbsp;&nbsp;&nbsp;if(labels[i] instanceof String){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(&quot;-&quot;.equals(labels[i])) addSeparator();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String label = (String)labels[i];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char firstChar = label.charAt(0);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch(firstChar){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case '+':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CheckboxMenuItem checkboxItem
= new CheckboxMenuItem(label.substring(1));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkboxItem.setState(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(checkboxItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case '#':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkboxItem = new CheckboxMenuItem(label.substring(1));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkboxItem.setState(true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkboxItem.disable();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(checkboxItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case '-':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkboxItem = new CheckboxMenuItem(label.substring(1));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkboxItem.setState(false);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(checkboxItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case '=':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkboxItem = new CheckboxMenuItem(label.substring(1));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkboxItem.setState(false);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkboxItem.disable();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(checkboxItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case '~':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MenuItem menuItem = new MenuItem(label.substring(1));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menuItem.disable();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(menuItem);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case '!':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(label.substring(1));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(label);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add(new MyMenu((Object[])labels[i]));
<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;public MenuItem getItem(String menuItem) {<BR>
&nbsp;&nbsp;int numItems = countItems();<BR>
&nbsp;&nbsp;for(int i=0;i&lt;numItems;++i)<BR>
&nbsp;&nbsp;&nbsp;if(menuItem.equals(getItem(i).getLabel())) return
getItem(i);<BR>
&nbsp;&nbsp;return null;<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT>MyMenu</TT> class specifies that it is in the package
<TT>jdg.ch20</TT>. Make sure that you place it in the <TT>jdg/ch20</TT>
directory and compile it. You'll be using it quite a bit in subsequent
chapters.
<P>
<TT>MyMenu</TT> contains no field variables. It consists of a
single constructor and the <TT>getItem()</TT> access method. The
<TT>getItem()</TT> method retrieves a menu item contained in the
menu and based on the menu item's label. It uses the <TT>countItems()</TT>
and <TT>getItem()</TT> methods of the <TT>Menu</TT> class to retrieve
the menu items contained in a menu and the <TT>getLabel()</TT>
method of the <TT>MenuItem</TT> class to match a menu item with
the search string.
<P>
The <TT>MyMenu</TT> constructor constructs a menu from an array
of menu labels and nested menu arrays (representing submenus).
For example, to construct a typical File menu, labeled File, with
the New and Open menu items followed by a separator and an Exit
menu item, you would use the following <TT>MyMenu</TT> constructor:
<BLOCKQUOTE>
<TT>String fileMenuLabels[] = {&quot;File&quot;,&quot;New&quot;,&quot;Open&quot;,&quot;-&quot;,&quot;Exit&quot;};
<BR>
<FONT FACE="Courier New">MyMenu fileMenu = new MyMenu(fileLabelMenus);</FONT></TT>
</BLOCKQUOTE>
<P>
The first object in the array must be a <TT>String</TT> object
that is the main label associated with the menu. The following
objects are either <TT>String</TT> objects identifying the labels
of the menu items contained in the menu, separators, or second-level
arrays representing submenus. For example, the following creates
a multilevel menu:
<BLOCKQUOTE>
<TT>String goMenuLabels[] = {&quot;Go&quot;,&quot;Beginning&quot;,&quot;End&quot;,&quot;Previous&quot;,&quot;Next&quot;};
<BR>
<FONT FACE="Courier New">String editMenuLabels[] = {&quot;Edit&quot;,&quot;Copy&quot;,&quot;Cut&quot;,&quot;-&quot;,&quot;Paste&quot;,&quot;-&quot;,goMenuLabels};
<BR>
MyMenu editLabel = new MyMenu(editMenuLabels);</FONT></TT>
</BLOCKQUOTE>
<P>
Using the <TT>MyMenu</TT> class is much easier than constructing
each of the individual menu items and adding them to a menu.
<P>
Let's step through the <TT>MyMenu</TT> constructor to see how
it works. It uses the <TT>super()</TT> class constructor call
statement to construct a <TT>Menu</TT> object using the first
label in the <TT>labels[]</TT> array. This label may contain the
<TT>~</TT> or <TT>!</TT> character as the first character. <TT>MyMenu()</TT>
checks for these characters and readjusts the menu's label accordingly.
If the first character of the menu's label is <TT>~</TT>, <TT>MyMenu()</TT>
will disable the entire menu using the <TT>disable()</TT> method
of the <TT>MenuItem</TT> class.
<P>
After setting up the menu's main label, <TT>MyMenu()</TT> iterates
through the list of objects contained in <TT>labels[]</TT>. If
the object is an instance of the <TT>String</TT> class, and is
therefore a label, <TT>MyMenu()</TT> checks the first letter of
the label and processes it accordingly. If the object is not an
instance of the <TT>String</TT> class, <TT>MyMenu()</TT> calls
itself again, passing the object to itself as another array of
objects. It then adds the resulting <TT>MyMenu</TT> object to
itself using the <TT>add()</TT> method of the <TT>Menu</TT> class.
This allows submenus to be processed in a recursive fashion.
<P>
<TT>MyMenu()</TT> processes the menu item labels by using a <TT>switch</TT>
statement to check the first character of the label to see if
it matches the <TT>+</TT>, <TT>#</TT>, <TT>-</TT>, <TT>=</TT>,
<TT>~</TT>, or <TT>!</TT> character. If it does not match any
of these characters, the label is added as a normal menu item.
If the label equals <TT>-</TT>, a separator is added.
<P>
If the first character is <TT>+</TT>, an enabled and checked <TT>CheckboxMenuItem</TT>
object is added to the menu. The <TT>setState()</TT> method of
the <TT>CheckboxMenuItem</TT> class is used to set the state of
the menu item to checked. If the first character is <TT>#</TT>,
a checked, but disabled, <TT>CheckboxMenuItem</TT> object is added.
The <TT>disable()</TT> method of the <TT>MenuItem</TT> class is
used to disable the menu item. The cases in which the first character
of the label is <TT>-</TT> or <TT>=</TT> are processed in a similar
manner, except that the <TT>CheckboxMenuItem</TT> object is initially
unchecked.
<P>
When the first character of the label is <TT>~</TT>, a normal
<TT>MenuItem</TT> object is added to the menu. The menu item is
disabled.
<P>
The <TT>!</TT> character is an escape character that is used to
create a normal menu item beginning with any of the special characters
previously mentioned. When the first character of a label is <TT>!</TT>,
the actual label generated begins with the subsequent character.
<H3><A NAME="TheMyMenuBarClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">MyMenuBar</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>MyMenuBar</TT> class uses the <TT>MyMenu</TT> class presented
in the previous section to quickly create an entire menu bar.
Whereas the <TT>MyMenu</TT> class uses an array of labels and
submenus to create a menu, the <TT>MyMenuBar</TT> class uses an
array of these arrays to create the entire menu bar. For example,
the following statements will construct a menu bar with File,
Edit, and Help menus, each consisting of individual menu items:
<P>
<TT>String menuBarLabels[] = {</TT>
<BLOCKQUOTE>
<TT>&nbsp;{&quot;File&quot;,&quot;New&quot;,&quot;Open&quot;,&quot;-&quot;,&quot;~Save
As&quot;,&quot;-&quot;,&quot;Exit&quot;};<BR>
<FONT FACE="Courier New">&nbsp;{&quot;Edit&quot;,&quot;Copy&quot;,&quot;Cut&quot;,&quot;-&quot;,&quot;~Paste&quot;};
<BR>
&nbsp;{&quot;Help&quot;,&quot;Index&quot;};<BR>
};<BR>
MyMenuBar menuBar = new MyMenuBar(menuBarLabels);</FONT></TT>
</BLOCKQUOTE>
<P>
Note that the Save As and Paste menu items are initially disabled.
<P>
The source code of the <TT>MyMenuBar</TT> class is shown in Listing
20.2.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 20.2. The source code of the </B><TT><B><FONT FACE="Courier New">MyMenuBar</FONT></B></TT><B>
class.</B>
<P>
<TT>package jdg.ch20;<BR>
<BR>
<FONT FACE="Courier New">import java.awt.*;<BR>
<BR>
public class MyMenuBar extends MenuBar {<BR>
&nbsp;public MyMenuBar(Object labels[][]) {<BR>
&nbsp;&nbsp;super();<BR>
&nbsp;&nbsp;for(int i=0;i&lt;labels.length;++i)<BR>
&nbsp;&nbsp;&nbsp;add(new MyMenu(labels[i]));<BR>
&nbsp;}<BR>
&nbsp;public MyMenu getMenu(String menuName) {<BR>
&nbsp;&nbsp;int numMenus = countMenus();<BR>
&nbsp;&nbsp;for(int i=0;i&lt;numMenus;++i)<BR>
&nbsp;&nbsp;&nbsp;if(menuName.equals(getMenu(i).getLabel())) return((MyMenu)getMenu(i));
<BR>
&nbsp;&nbsp;return null;<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT>MyMenuBar</TT> constructor simply iterates through the
outer array and passes the first-level elements (which are themselves
<TT>Object</TT> arrays) to the <TT>MyMenu</TT> constructor to
construct <TT>MyMenu</TT> objects. These objects are then added
to the <TT>MyMenuBar</TT> object being constructed using the <TT>add()</TT>
method inherited from the <TT>MenuBar</TT> class.
<P>
The <TT>getMenu()</TT> method retrieves a <TT>MyMenu</TT> object
from a <TT>MyMenuBar</TT> object based on the label associated
with the <TT>MyMenu</TT> object. It uses the <TT>CountMenus()</TT>
and <TT>getMenu()</TT> methods of the <TT>MenuBar</TT> class to
retrieve each <TT>MyMenu</TT> object contained in the menu bar.
The <TT>getLabel()</TT> method of the <TT>MenuItem</TT> class
is used to check the labels of the <TT>MyMenu</TT> objects against
the search string.
<H3><A NAME="TheMenuAppProgram"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">MenuApp</FONT></B></TT><B><FONT SIZE=4>
Program</FONT></B></A></H3>
<P>
The <TT>MenuApp</TT> program illustrates the use of the <TT>MyMenuBar</TT>
and <TT>MyMenu</TT> classes. Its source code is shown in Listing
20.3.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 20.3. The source code of the </B><TT><B><FONT FACE="Courier New">MenuApp</FONT></B></TT><B>
program.</B>
<P>
<TT>import java.awt.*;<BR>
<FONT FACE="Courier New">import jdg.ch20.MyMenu;<BR>
import jdg.ch20.MyMenuBar;<BR>
<BR>
public class MenuApp extends Frame {<BR>
&nbsp;MyMenuBar menuBar;<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;MenuApp app = new MenuApp();<BR>
&nbsp;}<BR>
&nbsp;public MenuApp() {<BR>
&nbsp;&nbsp;super(&quot;Menu Madness&quot;);<BR>
&nbsp;&nbsp;setup();<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(400,400);<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void setup() {<BR>
&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;setupMenuBar();<BR>
&nbsp;}<BR>
&nbsp;void setupMenuBar(){<BR>
&nbsp;&nbsp;String gotoMenu[] = {&quot;Go To&quot;,&quot;Beginning&quot;,&quot;End&quot;,&quot;-&quot;,&quot;Line
Number&quot;};<BR>
&nbsp;&nbsp;Object menuItems[][] = {<BR>
&nbsp;&nbsp;&nbsp;{&quot;File&quot;,&quot;New&quot;,&quot;Open&quot;,&quot;-&quot;,&quot;~Save&quot;,&quot;~Save
As&quot;,&quot;-&quot;,&quot;Exit&quot;},<BR>
&nbsp;&nbsp;&nbsp;{&quot;Edit&quot;,&quot;Copy&quot;,&quot;Cut&quot;,&quot;-&quot;,&quot;~Paste&quot;},
<BR>
&nbsp;&nbsp;&nbsp;{&quot;Search&quot;,&quot;Find&quot;,&quot;~Find
Next&quot;,&quot;~Find Previous&quot;,&quot;-&quot;, gotoMenu},
<BR>
&nbsp;&nbsp;&nbsp;{&quot;View&quot;,&quot;-Hex&quot;,&quot;+Line
Number&quot;,&quot;+Column Number&quot;},<BR>
&nbsp;&nbsp;&nbsp;{&quot;Help&quot;,&quot;About Menu Madness&quot;},
<BR>
&nbsp;&nbsp;};<BR>
&nbsp;&nbsp;menuBar = new MyMenuBar(menuItems);<BR>
&nbsp;&nbsp;setMenuBar(menuBar);<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.ACTION_EVENT){<BR>
&nbsp;&nbsp;&nbsp;if(event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(&quot;Exit&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;New&quot;.equals(event.arg)
|| &quot;Open&quot;.equals(event.arg)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menuBar.getMenu(&quot;File&quot;).getItem(&quot;Save&quot;).enable();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menuBar.getMenu(&quot;File&quot;).getItem(&quot;Save
As&quot;).enable();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;Copy&quot;.equals(event.arg)
|| &quot;Cut&quot;.equals(event.arg)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menuBar.getMenu(&quot;Edit&quot;).getItem(&quot;Paste&quot;).enable();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;Find&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menuBar.getMenu(&quot;Search&quot;).getItem(&quot;Find
Next&quot;).enable();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menuBar.getMenu(&quot;Search&quot;).getItem(&quot;Find
Previous&quot;).enable();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;Hex&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CheckboxMenuItem hexMenuItem = 
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(CheckboxMenuItem) menuBar.getMenu(&quot;View&quot;).getItem(&quot;Hex&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CheckboxMenuItem lineMenuItem =
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(CheckboxMenuItem) menuBar.getMenu(&quot;View&quot;).getItem(&quot;Line
Number&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CheckboxMenuItem colMenuItem = 
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(CheckboxMenuItem) menuBar.getMenu(&quot;View&quot;).getItem(&quot;Column
Number&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean hexState = hexMenuItem.getState();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineMenuItem.setState(!hexState);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colMenuItem.setState(!hexState);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;Line Number&quot;.equals(event.arg)
|| <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Column Number&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CheckboxMenuItem hexMenuItem = 
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(CheckboxMenuItem) menuBar.getMenu(&quot;View&quot;).getItem(&quot;Hex&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CheckboxMenuItem lineMenuItem =
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(CheckboxMenuItem) menuBar.getMenu(&quot;View&quot;).getItem(&quot;Line
Number&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CheckboxMenuItem colMenuItem = 
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(CheckboxMenuItem) menuBar.getMenu(&quot;View&quot;).getItem(&quot;Column
Number&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean lineState = lineMenuItem.getState();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean columnState = colMenuItem.getState();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hexMenuItem.setState(!(lineState
| columnState));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;About Menu Madness&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menuBar.getMenu(&quot;Help&quot;).disable();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
<TT>MenuApp</TT> shows how the <TT>MyMenuBar</TT> and <TT>MyMenu</TT>
classes are used to easily create a menu bar and to support the
processing of menu-related events. When the program is executed,
it displays a blank opening screen and a menu bar with five pull-down
menus, as shown in <A HREF="f20-1.gif" >Figure 20.1</A>.
<P>
<A HREF="f20-1.gif"><B>Figure 20.1 :</B><I> The <TT>MenuApp</TT> opening window.</I></A>
<P>
Click on the File menu and select the New menu item as shown in
<A HREF="f20-2.gif" >Figure 20.2</A>. This will cause the Save
and Save As menu items to become enabled. You can verify this
by clicking on the File menu once again.
<P>
<A HREF="f20-2.gif"><B>Figure 20.2 :</B><I> The File menu.</I></A>
<P>
Click on the Edit menu and select the Copy menu item as shown
in <A HREF="f20-3.gif" >Figure 20.3</A>. This results in the Paste
menu item becoming enabled.
<P>
<A HREF="f20-3.gif"><B>Figure 20.3 :</B><I> The Edit menu.</I></A>
<P>
Click on the Search menu and then on the Go To menu item as shown
in <A HREF="f20-4.gif" >Figure 20.4</A>. The Go To menu item is
a second-level menu that is attached to the Search menu.
<P>
<A HREF="f20-4.gif"><B>Figure 20.4 :</B><I> The Search menu.</I></A>
<P>
Click on the View menu and select the Hex checkbox menu item as
shown in <A HREF="f20-5.gif" >Figure 20.5</A>. Notice that the
Line Number and Column Number menu items that are initially checked
become unchecked, as shown in <A HREF="f20-6.gif" >Figure 20.6</A>.
<P>
<A HREF="f20-5.gif"><B>Figure 20.5 :</B><I> The View menu.</I></A>
<P>
<P>
<A HREF="f20-6.gif"><B>Figure 20.6 :</B><I> The View menu after checking Hex.</I></A>
<P>
Click on the Help menu and select About Menu Madness, as shown
in <A HREF="f20-7.gif" >Figure 20.7</A>. This Help menu isn't
much help at all because it is programmed to disable itself, as
shown in <A HREF="f20-8.gif" >Figure 20.8</A>.
<P>
<A HREF="f20-7.gif"><B>Figure 20.7 :</B><I> The Help Menu.</I></A>
<P>
<P>
<A HREF="f20-8.gif"><B>Figure 20.8 :</B><I> The Help menu disabled.</I></A>
<P>
You've completed the tour of the <TT>MenuApp</TT> program. Select
Exit from the File menu to terminate the program's operation.
<H4><B>Inside<FONT SIZE=2> </FONT></B><TT><B><FONT FACE="Courier New">MenuApp</FONT></B></TT>
</H4>
<P>
The <TT>MenuApp</TT> class consists of a single field variable,
<TT>menuBar</TT>, that is an object of class <TT>MyMenuBar</TT>.
The <TT>MenuApp</TT> constructor creates a 400<FONT FACE="Symbol">&#165;</FONT>400
frame window with the title Menu Madness and invokes the <TT>setup()</TT>
method to set up the background color and the menu bar. The <TT>setup()</TT>
method invokes <TT>setupMenuBar()</TT> to actually perform the
menu bar setup.
<P>
The <TT>setupMenuBar()</TT> method creates a <TT>gotoMenu[]</TT>
array as the labels of a submenu that will be attached to the
Search menu. The <TT>menuItems[][]</TT> array is used to define
the labels associated with the menu bar and its first-level menus.
The <TT>gotoMenu[]</TT> array is included as an object in this
array. Notice the use of the first-character conventions for disabling
menu items and specifying menu items that are checkboxes. The
menu bar is created, assigned to the <TT>menuBar</TT> variable,
and set as the menu bar for the <TT>MenuApp</TT> frame.
<P>
Creating the menu bar was a snap using the <TT>MyMenuBar</TT>
class. However, creating the menu bar is only half the work. You
also need to write event-handling code that acts on the menu items
selected by the user. The event-handling code of <TT>MenuApp</TT>
is used to illustrate the use of the various methods provided
with menus and menu items.
<P>
The <TT>WINDOWS_DESTROY</TT> event and the Exit menu item are
handled by terminating the program's execution. The New and Open
menu items cause the Save and Save As menu items to be enabled.
The <TT>getMenu()</TT> method of <TT>MyMenuBar</TT> and the <TT>getItem()</TT>
method of <TT>MyMenu</TT> are used to retrieve the Save and Save
As <TT>MenuItem</TT> objects. The <TT>enable()</TT> method of
the <TT>MenuItem</TT> class is used to enable these menu items.
Note that the Save and Save As menu items, as well as some other
menu items, are not handled. Selecting these menu items results
in no action being performed by <TT>MenuApp</TT>.
<P>
The Copy and Cut menu items are processed in a similar manner
as the New and Open menu items. Selecting Copy or Cut menu items
results in the Paste menu item being enabled.
<P>
The Find menu item causes the Find Next and Find Previous menu
items to be enabled.
<P>
The Hex checkbox menu item is handled by using the <TT>getState()</TT>
method to determine the state of its associated checkbox and then
setting the checkbox state of the Line Number and Column Number
checkbox menu items to the opposite state.
<P>
The Line Number and Column Number menu items are set and reset
independent of each other, but they are combined to determine
the state of the Hex menu item. If both the Line Number and Column
Number menu items are unchecked, the state of the Hex menu item
is set to checked. Otherwise, the Hex menu item is set to unchecked.
<P>
The handling of the About Menu Madness menu item shows how an
entire menu can be disabled.
<H2><A NAME="WorkingwithButtons"><B><FONT SIZE=5 COLOR=#FF0000>Working
with Buttons</FONT></B></A></H2>
<P>
Buttons are one of the easiest GUI components to use in a Java
window program. You create them using the <TT>Button</TT> constructor
and add them to your program using the <TT>add()</TT> method of
their container. After that, you just handle the events associated
with them and, optionally, change their labels.
<H3><A NAME="TheButtonBarClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">ButtonBar</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
To do something a little bit creative with labels, you can design
a <TT>ButtonBar</TT> class. This class creates a dialog box with
a specified label and adds a list of buttons to the dialog box,
in the form of a button bar. It also allows the buttons in the
button bar to be arranged in a vertical or horizontal fashion.
The source code for the <TT>ButtonBar</TT> class is shown in Listing
20.4.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 20.4. The source code of the </B><TT><B><FONT FACE="Courier New">ButtonBar</FONT></B></TT><B>
class.</B>
<P>
<TT>package jdg.ch20;<BR>
<BR>
<FONT FACE="Courier New">import java.awt.*;<BR>
<BR>
public class ButtonBar extends Dialog {<BR>
&nbsp;public static int HORIZONTAL = 0;<BR>
&nbsp;public static int VERTICAL = 1;<BR>
&nbsp;public ButtonBar(Frame parent,String title,String labels[],int
orientation) {<BR>
&nbsp;&nbsp;super(parent,title,false);<BR>
&nbsp;&nbsp;int length = labels.length;<BR>
&nbsp;&nbsp;if(orientation == HORIZONTAL) setLayout(new GridLayout(1,length));
<BR>
&nbsp;&nbsp;else setLayout(new GridLayout(length,1));<BR>
&nbsp;&nbsp;for(int i=0;i&lt;length;++i) add(new Button(labels[i]));
<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(minimumSize());<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY) show(false);<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT>HORIZONTAL</TT> and <TT>VERTICAL</TT> constants are used
to specify the orientation of the button bar. The constructor
uses the <TT>parent</TT>, <TT>title</TT>, <TT>labels[]</TT>, and
<TT>orientation</TT> parameters. The <TT>parent</TT> and <TT>title</TT>
parameters are passed to the <TT>Dialog</TT> class constructor
via the <TT>super()</TT> constructor call statement. The <TT>false</TT>
value indicates that the button bar is not modal. The orientation
parameter is used to determine the type of <TT>GridLayout</TT>
associated with the button bar. After the orientation is specified,
the <TT>Button</TT> objects, whose labels are specified by the
<TT>labels[]</TT> array, are added to the button bar. The button
bar dialog box is then packed and resized to the minimum size
needed to contain the buttons.
<P>
A single event is handled by the <TT>ButtonBar</TT> class. The
<TT>WINDOWS_DESTROY </TT>event is generated when a user tries
to close the button bar dialog box. When this happens, the <TT>show()</TT>
method inherited from the <TT>Window</TT> class is used to hide
the dialog box. The <TT>handleEvent()</TT> method returns the
<TT>false</TT> value, allowing the event to be processed by the
window containing the dialog box.
<H3><A NAME="TheButtonAppProgram"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">ButtonApp</FONT></B></TT><B><FONT SIZE=4>
Program</FONT></B></A></H3>
<P>
The <TT>ButtonApp</TT> program illustrates the operation of the
<TT>ButtonBar</TT> class. Its source code is shown in Listing
20.5.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 20.5. The source code of the </B><TT><B><FONT FACE="Courier New">ButtonApp</FONT></B></TT><B>
program.</B>
<P>
<TT>import java.awt.*;<BR>
<FONT FACE="Courier New">import jdg.ch20.MyMenu;<BR>
import jdg.ch20.MyMenuBar;<BR>
import jdg.ch20.ButtonBar;<BR>
<BR>
public class ButtonApp extends Frame {<BR>
&nbsp;MyMenuBar menuBar;<BR>
&nbsp;ButtonBar buttonBar;<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;ButtonApp app = new ButtonApp();<BR>
&nbsp;}<BR>
&nbsp;public ButtonApp() {<BR>
&nbsp;&nbsp;super(&quot;ButtonApp&quot;);<BR>
&nbsp;&nbsp;setup();<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(400,400);<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void setup() {<BR>
&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;setupMenuBar();<BR>
&nbsp;&nbsp;String buttons[] = {&quot;this&quot;,&quot;is&quot;,&quot;a&quot;,&quot;test&quot;};
<BR>
&nbsp;&nbsp;buttonBar = new ButtonBar(this,&quot;Button Bar&quot;,buttons,ButtonBar.HORIZONTAL);
<BR>
&nbsp;}<BR>
&nbsp;void setupMenuBar(){<BR>
&nbsp;&nbsp;Object menuItems[][] = {<BR>
&nbsp;&nbsp;&nbsp;{&quot;File&quot;,&quot;Exit&quot;},<BR>
&nbsp;&nbsp;&nbsp;{&quot;View&quot;,&quot;-Button Bar&quot;},
<BR>
&nbsp;&nbsp;};<BR>
&nbsp;&nbsp;menuBar = new MyMenuBar(menuItems);<BR>
&nbsp;&nbsp;setMenuBar(menuBar);<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;if(event.target instanceof ButtonBar){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CheckboxMenuItem buttonItem = <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(CheckboxMenuItem)menuBar.getMenu(&quot;View&quot;).getItem(&quot;Button
Bar&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buttonItem.setState(false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.ACTION_EVENT){<BR>
&nbsp;&nbsp;&nbsp;if(event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(&quot;Exit&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;Button Bar&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CheckboxMenuItem buttonItem = <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(CheckboxMenuItem)menuBar.getMenu(&quot;View&quot;).getItem(&quot;Button
Bar&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean viewButtonBar = buttonItem.getState();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buttonBar.show(viewButtonBar);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
When you execute <TT>ButtonApp</TT>, it displays the opening window
shown in <A HREF="f20-9.gif" >Figure 20.9</A>.
<P>
<A HREF="f20-9.gif"><B>Figure 20.9 :</B><I> The <TT>ButtonApp</TT> opening window.</I></A>
<P>
Select Button Bar from the View menu, as shown in <A HREF="f20-10.gif" >Figure 20.10</A>.
<P>
<A HREF="f20-10.gif"><B>Figure 20.10 :</B><I> Selecting Button Bar from the View menu.</I></A>
<P>
The button bar shown in <A HREF="f20-11.gif" >Figure 20.11</A>
is displayed on top of the main <TT>ButtonApp</TT> window. If
you select the View menu once more, you will notice that the Button
Bar menu item is implemented as a pull-down menu. It is checked
or unchecked depending on whether the button bar is displayed.
<P>
<A HREF="f20-11.gif"><B>Figure 20.11 :</B><I> The button bar.</I></A>
<P>
The <TT>ButtonApp</TT> program consists mostly of setup and event-handling
software. It declares two field variables, <TT>menuBar</TT> and
<TT>buttonBar</TT>, that are used to reference the program's menu
bar and the button bar. The constructor follows the typical approach
to constructing a frame window and creates a 400<FONT FACE="Symbol">&#165;</FONT>400
window with the ButtonApp title.
<P>
The <TT>setup()</TT> method sets the background to white, creates
a menu bar using the <TT>MyMenuBar</TT> class, and constructs
a horizontal button bar using the <TT>ButtonBar</TT> class constructor
introduced in the previous section. The rest of the program consists
of event handling.
<P>
The <TT>WINDOW_DESTROY</TT> event is handled a little differently
than the typical approach. Remember that this event can be generated
for the main application window or for the button bar dialog box.
The <TT>event.target</TT> variable is checked to see if the event
was generated for an instance of the <TT>ButtonBar</TT> class.
If so, the checkbox associated with the Button Bar menu is unchecked.
<P>
If the <TT>WINDOW_DESTROY</TT> event was generated for the main
application window or the Exit menu item is selected, the program
is terminated.
<P>
If the Button Bar menu item is selected, the state of the checkbox
associated with that menu item is used to determine whether the
button bar should be displayed. The <TT>show()</TT> method inherited
from the <TT>Component</TT> class is used to turn the button bar
display on and off.
<H2><A NAME="UsingDialogBoxes"><B><FONT SIZE=5 COLOR=#FF0000>Using
Dialog Boxes</FONT></B></A></H2>
<P>
The <TT>ButtonBar</TT> class illustrates some of the typical methods
used with dialog boxes. Most of these methods are not specific
to the <TT>Dialog</TT> class, which provides few methods of its
own. Rather, they are inherited from the <TT>Window</TT> and <TT>Component</TT>
classes, which are superclasses of the <TT>Dialog</TT> class.
<P>
The <TT>Dialog</TT> class is used to construct a window that is
displayed separately from the application menu. The window associated
with a <TT>Dialog</TT> object is not allowed to contain a menu
bar. It may be specified as being <I>modal</I>, meaning that it
is displayed on top of the main application window until it is
hidden or disposed of using the <TT>show()</TT> and <TT>dispose()</TT>
methods. Most dialog boxes are not as elaborate as that made with
the <TT>ButtonBar</TT> class. They are mainly used to display
information to the user and get the user's response via a button
click.
<H3><A NAME="TheMessageDialogClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">MessageDialog</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>MessageDialog</TT> class provides a custom component that
implements the most common types of dialog boxes. It provides
a convenient constructor for creating dialog boxes and partially
handles the <TT>WINDOW_DESTROY</TT> event by hiding a dialog box
from view. The source code is shown in Listing 20.6.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 20.6. The source code of the </B><TT><B><FONT FACE="Courier New">MessageDialog</FONT></B></TT><B>
class.</B>
<P>
<TT>package jdg.ch20;<BR>
<BR>
<FONT FACE="Courier New">import java.awt.*;<BR>
<BR>
public class MessageDialog extends Dialog {<BR>
&nbsp;public MessageDialog(Frame parent,String title,boolean modal,String
text[],<BR>
&nbsp;&nbsp;String buttons[]) {<BR>
&nbsp;&nbsp;super(parent,title,modal);<BR>
&nbsp;&nbsp;int textLines = text.length;<BR>
&nbsp;&nbsp;int numButtons = buttons.length;<BR>
&nbsp;&nbsp;Panel textPanel = new Panel();<BR>
&nbsp;&nbsp;Panel buttonPanel = new Panel();<BR>
&nbsp;&nbsp;textPanel.setLayout(new GridLayout(textLines,1));
<BR>
&nbsp;&nbsp;for(int i=0;i&lt;textLines;++i) textPanel.add(new
Label(text[i]));<BR>
&nbsp;&nbsp;for(int i=0;i&lt;numButtons;++i) buttonPanel.add(new
Button(buttons[i]));<BR>
&nbsp;&nbsp;add(&quot;North&quot;,textPanel);<BR>
&nbsp;&nbsp;add(&quot;South&quot;,buttonPanel);<BR>
&nbsp;&nbsp;setBackground(Color.lightGray);<BR>
&nbsp;&nbsp;setForeground(Color.white);<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(minimumSize());<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY) show(false);<BR>
&nbsp;&nbsp;else if(event.id==Event.ACTION_EVENT &amp;&amp; event.target
instanceof Button) <BR>
&nbsp;&nbsp;&nbsp;show(false);<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT>MessageDialog</TT> constructor uses the <TT>parent</TT>,
<TT>title</TT>, <TT>modal</TT>, <TT>text[]</TT>, and <TT>buttons[]</TT>
parameters. The <TT>parent</TT>, <TT>title</TT>, and <TT>modal</TT>
parameters are passed to the <TT>Dialog</TT> constructor of its
parent class. Two <TT>Panel</TT> objects are created and assigned
to <TT>textPanel</TT> and <TT>buttonPanel</TT>. The <TT>textPanel</TT>
layout is specified as a <TT>GridLayout</TT> object and the <TT>buttonPanel</TT>
layout is the default <TT>FlowLayout</TT> object. The <TT>text[]</TT>
lines are arranged in a vertical grid in the <TT>textPanel</TT>.
The <TT>buttons[]</TT> are laid out in a centered horizontal fashion
within the <TT>buttonPanel</TT>. The layout for the <TT>MessageDialog</TT>
object is <TT>BorderLayout</TT>, by default. The <TT>textPanel</TT>
is added to the top of the dialog box and the <TT>buttonPanel</TT>
is added to the bottom. The foreground and background colors are
set to light gray and white. The dialog box is packed and resized
to the minimum size needed to contain the two panels.
<H3><A NAME="TheMessageAppProgram"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">MessageApp</FONT></B></TT><B><FONT SIZE=4>
Program</FONT></B></A></H3>
<P>
The <TT>MessageApp</TT> program shows how the <TT>MessageDialog</TT>
class can be used to implement traditional dialog box functions
found in typical window programs. Its source code is shown in
Listing 20.7.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 20.7. The source code of the </B><TT><B><FONT FACE="Courier New">MessageApp</FONT></B></TT><B>
program.</B>
<P>
<TT>import java.awt.*;<BR>
<FONT FACE="Courier New">import jdg.ch20.MyMenu;<BR>
import jdg.ch20.MyMenuBar;<BR>
import jdg.ch20.MessageDialog;<BR>
<BR>
public class MessageApp extends Frame {<BR>
&nbsp;MyMenuBar menuBar;<BR>
&nbsp;MessageDialog dialog;<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;MessageApp app = new MessageApp();<BR>
&nbsp;}<BR>
&nbsp;public MessageApp() {<BR>
&nbsp;&nbsp;super(&quot;MessageApp&quot;);<BR>
&nbsp;&nbsp;setup();<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(400,400);<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void setup() {<BR>
&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;setupMenuBar();<BR>
&nbsp;}<BR>
&nbsp;void setupMenuBar(){<BR>
&nbsp;&nbsp;Object menuItems[][] = {<BR>
&nbsp;&nbsp;&nbsp;{&quot;File&quot;,&quot;Exit&quot;},<BR>
&nbsp;&nbsp;&nbsp;{&quot;View&quot;,&quot;Information&quot;,&quot;Confirmation&quot;,&quot;Selection&quot;},
<BR>
&nbsp;&nbsp;};<BR>
&nbsp;&nbsp;menuBar = new MyMenuBar(menuItems);<BR>
&nbsp;&nbsp;setMenuBar(menuBar);<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;if(event.target instanceof MessageDialog) return
true;<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.ACTION_EVENT){<BR>
&nbsp;&nbsp;&nbsp;if(event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(&quot;Exit&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;Information&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String text[] = {&quot;Don't look
now, but your shoelace is untied.&quot;};<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String buttons[] = {&quot;OK&quot;};
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog = new MessageDialog(this,&quot;Information&quot;,true,text,buttons);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog.show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;Confirmation&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String text[] = {&quot;Do you really
want to do this?&quot;};<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String buttons[] = {&quot;Yes&quot;,&quot;No&quot;,&quot;Cancel&quot;};
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog = new MessageDialog(this,&quot;Confirmation&quot;,true,text,buttons);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog.show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;Selection&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String text[] = {&quot;What direction
do you want to go?&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;North: cold&quot;, &quot;South:
warm&quot;, &quot;East: humid&quot;, &quot;West: arid&quot;};
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String buttons[] = {&quot;North&quot;,&quot;South&quot;,&quot;East&quot;,&quot;West&quot;};
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog = new MessageDialog(this,&quot;Selection&quot;,true,text,buttons);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialog.show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT>MessageApp</TT> opening window is shown in <A HREF="f20-12.gif" >Figure 20.12</A>.
It supports the File and View pull-down menus.
<P>
<A HREF="f20-12.gif"><B>Figure 20.12 :</B><I> The <TT>MessageApp</TT> opening windows.</I></A>
<P>
Select the Information menu item from the View pull-down menu,
as shown in <A HREF="f20-13.gif" >Figure 20.13</A>.
<P>
<A HREF="f20-13.gif"><B>Figure 20.13 :</B><I> Selecting Information from the View menu.</I></A>
<P>
A helpful Information dialog box is displayed, as shown in <A HREF="f20-14.gif" >Figure 20.14</A>.
This type of dialog box is typically used to provide information
to the user. When the dialog box is displayed, the user acknowledges
the information by clicking on the OK button.
<P>
<A HREF="f20-14.gif"><B>Figure 20.14 :</B><I> The Information dialog box.</I></A>
<P>
Selecting Confirmation from the View menu results in a Confirmation
dialog box being displayed to the user, as shown in <A HREF="f20-15.gif" >Figure 20.15</A>.
This type of dialog box requests confirmation from the user before
attempting to perform an operation that may require the user's
approval. If the user clicks the Yes button, the action is performed.
If the user clicks No, the operation is not performed. If the
user clicks Cancel, an entire series of actions leading up to
the confirmation dialog box is aborted.
<P>
<A HREF="f20-15.gif"><B>Figure 20.15 :</B><I> The Confirmation dialog box.</I></A>
<P>
Choosing the Selection menu item from the View menu results in
a multiple-choice Selection dialog box displayed to the user.
The user is allowed to pick one from several alternative paths
of program execution. (<A HREF="f20-16.gif" >See Figure 20.16</A>.)
<P>
<A HREF="f20-16.gif"><B>Figure 20.16 :</B><I> The Selection dialog box.</I></A>
<P>
The <TT>MessageApp</TT> constructor creates a 400<FONT FACE="Symbol">&#165;</FONT>400
window, titled MessageApp. It uses the <TT>MyMenuBar</TT> class
to construct the program's menu bar. No special processing of
note is performed in the application window's construction. The
dialog boxes, previously shown, are created by the program's event-handling
software.
<P>
The <TT>handleEvent()</TT> method takes the message dialog boxes
into account when processing the <TT>WINDOW_DESTROY</TT> message.
It checks to see if the target of the event is a dialog box and,
if so, continues with program execution. If the Information menu
item is selected, a new <TT>MessageDialog</TT> object is created
with the information shown in <A HREF="f20-14.gif" >Figure 20.14</A>
and the dialog box is displayed to the user using the <TT>show()</TT>
method. The dialog box is modal. The Confirmation and Selection
menu items are handled in a similar manner. They create the dialog
boxes shown in <A HREF="f20-15.gif" >Figures 20.15</A> and <A HREF="f20-16.gif" >20.16</A>
using the <TT>MessageDialog()</TT> constructor.
<H3><A NAME="TheFileDialogClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">FileDialog</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>FileDialog</TT> class is a custom subclass of the <TT>Dialog</TT>
class. The <TT>FileDialog</TT> class uses the operating system's
native dialog boxes to query the user for the name of a file to
be loaded or saved. The <TT>getDirectory()</TT> and <TT>getFile()</TT>
methods return the file's directory and filename. The <TT>setDirectory()</TT>
and <TT>setFile()</TT> methods are used to set the state of the
dialog box to a particular directory and file when it is initially
opened. The <TT>getMode()</TT> method returns the <TT>LOAD</TT>
or <TT>SAVE</TT> mode of the dialog box. The <TT>setFileNameFilter()</TT>
and <TT>getFileNameFilter()</TT> methods are used to associate
an object of the <TT>FileNameFilter</TT> interface with the dialog
box. No classes that implement this interface are currently provided
by the Java API. The <TT>TextEdit</TT> example in <A HREF="ch18.htm" >Chapter 18</A>
illustrates the use of the <TT>FileDialog</TT> class in performing
file load and save operations.
<H2><A NAME="Summary"><B><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></B></A>
</H2>
<P>
This chapter shows you how to use the <TT>Menu</TT>, <TT>Button</TT>,
and <TT>Dialog</TT> classes. It describes the available menu and
button options and shows you how to quickly and easily construct
menus and buttons for your window programs using the <TT>MyMenu</TT>,
<TT>MyMenuBar</TT>, and <TT>ButtonBar</TT> classes. The use of
dialog boxes is also covered. You have created the <TT>MessageDialog</TT>
class, which you can  reuse in other programs. <A HREF="ch21.htm" >Chapter 21</A>,
&quot;Checkboxes, Choices, and Lists,&quot; shows you how to work
with those elements.
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



