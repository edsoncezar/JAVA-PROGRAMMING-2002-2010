<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META>
<H1><FONT COLOR=#FF0000>Chapter 38</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Creating Native Methods</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#UsingNativeMethods" >Using Native Methods </A>
<LI><A HREF="#HowNativeMethodsAreCalled" >How Native Methods Are Called</A>
<LI><A HREF="#HowNativeMethodsAreCreated" >How Native Methods Are Created</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
In this chapter you'll learn how to access native C code from
Java. You will see how to use the supplied tools to create a dynamic
link library (DLL), which the Java runtime interpreter can call
to perform native functions. When you finish this chapter, you
will be able to link your Java code with native C methods.
<H2><A NAME="UsingNativeMethods"><FONT SIZE=5 COLOR=#FF0000>Using
Native Methods </FONT></A></H2>
<P>
The Java programming language has gone to great lengths to hide
machine-specific facilities from the programmer.
<P>
However, regardless of the reason, there might always be a need
to access the raw speed or other platform-specific facilities.
To accommodate this need, Java provides access to native code
stored in dynamic link libraries.
<P>
When Java code is executed on a machine other than a native Java
microprocessor, a runtime interpreter is needed. The interpreter
is actually the program that executes the Java code. So to allow
the Java code access to native methods, the interpreter must act
as the go-between for the two platforms. This is achieved by standard
entry points defined in native DLLs.
<H2><A NAME="HowNativeMethodsAreCalled"><FONT SIZE=5 COLOR=#FF0000>How
Native Methods Are Called</FONT></A><FONT SIZE=5 COLOR=#FF0000>
</FONT></H2>
<P>
In the big picture of accessing native methods, calling native
methods from Java is one of the most straightforward processes.
The task of calling the native method can be broken down into
three steps, all of which need to be implemented in order for
the native call to work:
<OL>
<LI>Loading the library
<LI>Declaring the method
<LI>Calling the method
</OL>
<P>
The first step is to load the library. This is achieved through
the <TT><FONT FACE="Courier">java.lang.Runtime</FONT></TT> class,
which handles all the overhead involved in dynamically linking
to a DLL. The following example shows how this is done:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">import java.lang.Runtime;<BR>
public class calcTC //Calculates the two's<BR>
{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//complement
of a passed number.<BR>
&nbsp;&nbsp;Static<BR>
&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;try<BR>
&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loadLibrary(&quot;nativeDLL&quot;);
<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;catch(Exception e)<BR>
&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//Do Something here<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;public native int twos(int number);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
It is usually a good idea to call the <TT><FONT FACE="Courier">loadLibrary</FONT></TT>
method during the static initialization. This way the library
is loaded before there's any chance of the method being called.
If the <TT><FONT FACE="Courier">loadLibrary</FONT></TT> method
is unsuccessful, it will throw the <TT><FONT FACE="Courier">UnsatisfiedLinkError</FONT></TT>
exception. This provides a mechanism to replace the native method
call.
<P>
The next step in calling a native method is to declare the method:
<BLOCKQUOTE>
<TT>public native int twos(int number);</TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">native</FONT></TT> directive tells
the compiler that this method is natively implemented. Besides
the <TT><FONT FACE="Courier">native</FONT></TT> directive, the
method resembles a normal method declaration, except for the fact
that code does not follow the declaration.
<P>
After the method has been declared, it can be called using Java's
normal calling conventions. That's it from Java's standpoint.
The rest of the work involves the creation of the DLL.
<H2><A NAME="HowNativeMethodsAreCreated"><FONT SIZE=5 COLOR=#FF0000>How
Native Methods Are Created</FONT></A><FONT SIZE=5 COLOR=#FF0000>
</FONT></H2>
<P>
As mentioned before, the Java runtime interpreter acts as the
go-between for the Java code and the native DLL. In order to facilitate
this communication, a common interface is needed.
<P>
Shipped with the Java Developer's Kit is a utility called <TT><FONT FACE="Courier">javah</FONT></TT>,
which is designed to create the interface with which the Java
runtime interpreter can communicate. It accomplishes this by taking
as a parameter the class file containing the native call. <TT><FONT FACE="Courier">javah</FONT></TT>
then produces a header file, and an associated C file is needed.
The process to create a header and stub C file for the <TT><FONT FACE="Courier">calcTC</FONT></TT>
class are as follows.
<P>
Execute <TT><FONT FACE="Courier">javah</FONT></TT> to create the
header file:
<BLOCKQUOTE>
<TT>javah calcTC</TT>
</BLOCKQUOTE>
<P>
This command creates a file under the <TT><FONT FACE="Courier">CClassHeaders</FONT></TT>
directory named <TT><FONT FACE="Courier">calcTC.h</FONT></TT>.
This file contains the following header information:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/* Header for class calcTC */<BR>
#ifndef _Include_calcTC<BR>
#define _Include_calcTC<BR>
typedef struct ClasscalcTC{<BR>
&nbsp;&nbsp;&nbsp;int number;<BR>
} ClasscalcTC;<BR>
HandleTo(calcTc);<BR>
#ifdef __cplusplus<BR>
extern &quot;C&quot; __declspec(dllexport)<BR>
#endif<BR>
int clacTC_twos(struct HcalcTC *,int);<BR>
#endif</FONT></TT>
</BLOCKQUOTE>
<P>
This file declares the interface with which the Java runtime interpreter
can communicate.
<P>
The final step in creating the native DLL interface is to create
a stub file containing some of the needed interface overhead.
To create this stub file for the <TT><FONT FACE="Courier">calcTC</FONT></TT>
class, execute the following command:
<BLOCKQUOTE>
<TT>javah -stubs calcTC</TT>
</BLOCKQUOTE>
<P>
This creates the file <TT><FONT FACE="Courier">calcTC.stubs</FONT></TT>
in the <TT><FONT FACE="Courier">subs</FONT></TT> subdirectory,
which contains the following information:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/* Stubs for class calcTC */<BR>
/* DO NOT EDIT THIS FILE - it is machine generated*/<BR>
/* SYMBOL: &quot;calcTC\twos(I)I&quot;, calcTC_twos_stub,*/<BR>
_declspec(dllexport) stack_item<BR>
*calcTC_twos_stub(stack_item *_P_,struct execenv *_EE_)<BR>
{<BR>
&nbsp;&nbsp;&nbsp;extern int clacTC_twos(void *,int);<BR>
&nbsp;&nbsp;&nbsp;_P_[0].i = calcTC_twos(_P_[0].p,((_P_[1].i)));
<BR>
&nbsp;&nbsp;&nbsp;return _P_+1;<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
<TT><FONT FACE="Courier">calcTC.stubs</FONT></TT>, along with
<TT><FONT FACE="Courier">stubsPreamble.h</FONT></TT> (found in
the <TT><FONT FACE="Courier">/hotjava/include</FONT></TT> subdirectory),
must preface the actual implementation of the native method. That
is, you must include <TT><FONT FACE="Courier">stubsPreamble.h</FONT></TT>
and the header file created by the <TT><FONT FACE="Courier">javah</FONT></TT>
command. After the <TT><FONT FACE="Courier">include</FONT></TT>
statements, insert the contents of the stub file and the native
method definition. For example, the code for the <TT><FONT FACE="Courier">calcTC</FONT></TT>
native DLL would be the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">#include calcTC.h<BR>
#include stubsPreamble.h<BR>
<BR>
//cut and paste the stub file<BR>
<BR>
/* Stubs for class calcTC */<BR>
/* DO NOT EDIT THIS FILE - it is machine generated*/<BR>
/* SYMBOL: &quot;calcTC\twos(I)I&quot;, calcTC_twos_stub,*/<BR>
_declspec(dllexport) stack_item<BR>
*calcTC_twos_stub(stack_item *_P_,struct execenv *_EE_)<BR>
{<BR>
&nbsp;&nbsp;&nbsp;extern int clacTC_twos(void *,int);<BR>
&nbsp;&nbsp;&nbsp;P_[0].i = calcTC_twos(_P_[0].p,((_P_[1].i)));
<BR>
&nbsp;&nbsp;&nbsp;return _P_+1;<BR>
}<BR>
<BR>
//implement the native method prot-typed in calcTC.h<BR>
int clacTC_twos(struct HcalcTC *this,int number)<BR>
{<BR>
&nbsp;&nbsp;&nbsp;return ~number;<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
Compile this file into a DLL with the name specified in the <TT><FONT FACE="Courier">loadLibrary()</FONT></TT>
Java call, and you're ready to go. Got all that? If not, take
a look at the steps involved again, as well as at what the generated
code is doing. This process will become easier after you have
successfully completed it at least once.
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A><FONT SIZE=5 COLOR=#FF0000>
</FONT></H2>
<P>
In this chapter you have learned how to call and create native
methods. This is probably the hardest task in Java, because it
requires tools outside the scope of Java. Use the technology at
your discretion. Just keep in mind that native code will run only
on the platform on which it was compiled. The fact that Java can
call a function stored in a native DLL does not make the DLL more
platform independent.
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



