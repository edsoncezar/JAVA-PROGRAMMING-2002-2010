<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META>
<H1><FONT COLOR=#FF0000>Chapter 4</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>First Programs: Hello World!
to BlackJack</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#HelloWorld" >Hello World!</A>
<UL>
<LI><A HREF="#Comments" >Comments</A>
<LI><A HREF="#JavaProgramStructure" >Java Program Structure</A>
<LI><A HREF="#ThepackageStatement" >The package Statement</A>
<LI><A HREF="#TheimportStatement" >The import Statement</A>
<LI><A HREF="#ClassesandMethods" >Classes and Methods</A>
<LI><A HREF="#TheSystemClass" >The System Class</A>
</UL>
<LI><A HREF="#ICanRead" >I Can Read!</A>
<UL>
<LI><A HREF="#OverviewofICanReadApp" >Overview of ICanReadApp</A>
<LI><A HREF="#DeclaringVariablesandCreatingObjects" >Declaring Variables and Creating Objects</A>
<LI><A HREF="#IdentifiersandKeywords" >Identifiers and Keywords</A>
<LI><A HREF="#UsingSystemin" >Using System.in</A>
</UL>
<LI><A HREF="#TypeThis" >Type This!</A>
<UL>
<LI><A HREF="#OverviewofTypeThisApp" >Overview of TypeThisApp</A>
<LI><A HREF="#ThePrimitiveJavaDataTypes" >The Primitive Java Data Types</A>
<LI><A HREF="#LiteralValues" >Literal Values</A>
</UL>
<LI><A HREF="#BlackJack" >BlackJack</A>
<UL>
<LI><A HREF="#OverviewofBlackJackApp" >Overview of BlackJackApp</A>
<LI><A HREF="#Arrays" >Arrays</A>
<LI><A HREF="#Statements" >Statements</A>
</UL>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
<FONT COLOR=#000000>This chapter will quickly get you up to speed
</FONT>writing Java programs. If you have previously programmed
in C++, this chapter will be a breeze. If you have programmed
in some other language, the examples presented here will be familiar;
you will just be learning a new syntax. If you have never programmed
before, you will face the task of debugging your first programs.
It will be easy or difficult depending on the mistakes you make
and your ability to find programming errors. You may want to ask
for help from someone who has programmed before.
<P>
In order to carry out the examples in this chapter and in the
rest of the book, you need access to a computer that supports
Java 1.0 or later. The type of computer and operating system that
you use to write your programs won't matter. After all, that's
the beauty of Java. The examples in this book have been developed
using Java running under Windows 95. If you use Windows 95, I
strongly recommend that you use a text editor other than Notepad
or WordPad. These editors do not allow you to save files easily
with the <TT>.java</TT> extension and will drive you crazy during
program development. I use the shareware program TextPad, from
Helios Software Solutions. It works well with both Windows 95
and NT, and is both convenient and affordable. It can be found
in most Windows 95 FTP archives. If you are using Solaris, Linux,
Windows NT, or any other Java port, you will use a text editor
that is native to your system.
<H2><A NAME="HelloWorld"><B><FONT SIZE=5 COLOR=#FF0000>Hello World!</FONT></B></A>
</H2>
<P>
Since Brian Kernighan and Dennis Ritchie released the C programming
language in 1978, the traditional first program has been to display
<TT>Hello World!</TT> on the console display. Who are we to break
with tradition?
<P>
Fire up your computer and change to the directory where you have
Java installed. On my computer, Java is located in the <TT>c:\java</TT>
directory. Create a subdirectory called <TT>jdg</TT> under your
Java directory (that is, <TT>c:\java\jdg</TT>). If you are using
a system such as UNIX or Windows NT, where you may not have write
access to the <TT>java</TT> directory, create a <TT>jdg</TT> directory
under your home directory.
<P>
You will store all the files that you develop under the <TT>jdg</TT>
directory. Separate subdirectories will be created for each chapter,
as shown in <A HREF="f4-1.gif" >Figure 4.1</A>. Go ahead and create
a directory <TT>ch04</TT> for this lesson.
<P>
<A HREF="f4-1.gif"><B>Figure 4.1 : </B><I>Files contained on the CD-ROM mirror the ones you'll create.</I></A>
<P>
The CD-ROM that accompanies this book has an analogous directory
structure to the one that you'll create. It contains the source
and bytecode files for each example in the book. If you don't
want to type in any of the sample programs, you can simply copy
them from the CD-ROM. The CD-ROM also contains images, audio and
video files, and other files used in the examples.
<P>
I recommend that you type in the first few programs. By doing
so you will quickly get a feel for the Java syntax.
<P>
Now start your favorite text editor and key in the Java program
in Listing 4.1.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 4.1. The source code of the Hello World! program.</B><P>
<TT>package jdg.ch04;<BR>
<BR>
<FONT FACE="Courier New">/* HelloWorldApp.java */<BR>
<BR>
import java.lang.System;<BR>
<BR>
class HelloWorldApp {<BR>
&nbsp;/**<BR>
&nbsp;* Traditional &quot;Hello World!&quot; program.<BR>
&nbsp;*/<BR>
&nbsp;public static void main (String args[]) {<BR>
&nbsp;&nbsp;// Write to stdout.<BR>
&nbsp;&nbsp;System.out.println(&quot;Hello World!&quot;);<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Save this program as <TT>HelloWorldApp.java</TT> in the <TT>c:\java\jdg\ch04</TT>
directory.
<P>
While in the <TT>c:\java\jdg\ch04</TT> directory, enter <TT>javac
HelloWorldApp.java</TT>. This invokes the Java compiler and compiles
the <TT>HelloWorldApp.java</TT> source file, creating the <TT>HelloWorldApp.class</TT>
binary file. A listing of your directory should look similar to
the following:
<BLOCKQUOTE>
<TT>C:\java\jdg\ch04&gt;dir<BR>
<BR>
<FONT FACE="Courier New">&nbsp;Volume in drive C is ATHOME<BR>
&nbsp;Volume Serial Number is 1CE3-2551<BR>
&nbsp;Directory of C:\java\jdg\ch04<BR>
<BR>
.</FONT><FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>&lt;DIR&gt;<FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>01-24-96
10:42p .<BR>
<FONT FACE="Courier New">..</FONT><FONT SIZE=2 FACE="Courier">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>&lt;DIR&gt;<FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>01-24-96
10:42p ..<BR>
<FONT FACE="Courier New">HELLOW~1 JAV</FONT><FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>265
 01-22-96  3:38p HelloWorldApp.java<BR>
<FONT FACE="Courier New">HELLOW~1 CLA</FONT><FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>487
 01-24-96 10:45p HelloWorldApp.class<BR>
<FONT FACE="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2
file(s)</FONT><FONT SIZE=2 FACE="Courier"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>752
bytes<BR>
<FONT FACE="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2
dir(s)</FONT><FONT SIZE=2 FACE="Courier"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>348,585,984
bytes free</TT>
</BLOCKQUOTE>
<P>
If you receive any compiler errors, go back to your editor and
make sure that you typed the program correctly. Then recompile
your program using <TT>javac</TT>. Make sure you set your <TT>PATH</TT>
and <TT>CLASSPATH</TT> environment variables as discussed in <A HREF="ch3.htm" >Chapter 3</A>,
&quot;Using the Java Developer's Kit.&quot; <TT>PATH</TT> tells
your operating system shell where to find your Java Developer's
Kit programs. <TT>CLASSPATH</TT> tells the Java runtime system
where to find Java classes.
<P>
When you're ready to run <TT>HelloWorldApp</TT>, using the Java
interpreter, enter <TT>java jdg.ch04.HelloWorldApp</TT> from your
shell command prompt. You should get the following output:
<BLOCKQUOTE>
<TT>C:\java\jdg\ch04&gt;java jdg.ch04.HelloWorldApp<BR>
<FONT FACE="Courier New">Hello World!<BR>
</FONT></TT>
</BLOCKQUOTE>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
If you get an error message saying that Java can't find the <TT>HelloWorldApp</TT> class, make sure that your <TT>CLASSPATH</TT> is correctly set.
</BLOCKQUOTE></TD></TR>
</TABLE></CENTER>
<P>
<P>
At this point, you are probably not impressed with the power of
Java-but you soon will be. Let's walk through the program source
code and learn some Java syntax.
<H3><A NAME="Comments"><B>Comments</B></A></H3>
<P>
Java allows three kinds of comments. You can use any of these
comment styles to document your Java programs. An example of each
kind is provided in the <TT>HelloWorldApp.java</TT> source code.
The C-style comments begin with <TT>/*</TT> and end with <TT>*/</TT>.
Here is an example:
<P>

<BLOCKQUOTE>
<TT>/* HelloWorldApp.java */</TT><BR>
The C++-style comments begin with <TT>//</TT> and continue to
the end of a line:<BR>
<TT>// Write to stdout. </TT><BR>
</BLOCKQUOTE>

The Java automated documentation support comments begin with <TT>/**</TT>
and end with <TT>*/</TT>. They are found immediately before or
after a Java declaration:
<BLOCKQUOTE>
<TT>/**<BR>
<FONT FACE="Courier New">* Traditional &quot;Hello World!&quot;
program.<BR>
*/</FONT></TT>
</BLOCKQUOTE>
<P>
<A HREF="ch10.htm" >See Chapter 10</A>, &quot;Automating Software
Documentation,&quot; for more information about this Java feature.
<H3><A NAME="JavaProgramStructure"><B>Java Program Structure</B></A>
</H3>
<P>
Java programs are built from classes and interfaces. A <I>class</I>
defines a set of data structures, called <I>variables</I>, and
the operations, referred to as <I>methods</I>, that are permitted
on the variables. An <I>interface</I> defines a collection of
methods that are to be implemented by a class. Your <TT>HelloWorldApp</TT>
program was built from the <TT>HelloWorldApp</TT> class. It also
uses the <TT>System</TT> class. <A HREF="f4-2.gif" >Figure 4.2</A>
summarizes the Java program structure.
<P>
<A HREF="f4-2.gif"><B>Figure 4.2 : </B><I>The Java program structure.</I></A>
<P>
Classes and interfaces are organized into <TT>.java</TT> files
that are separately compiled. These <TT>.java</TT> files are called
<I>compilation units</I>. The <TT>HelloWorldApp.java</TT> file
that you created with your text editor and compiled using <TT>javac</TT>
is an example of a compilation unit.
<P>
The classes and interfaces contained in compilation units are
organized into <I>packages</I>. Packages are used to group related
classes and interfaces and to avoid naming conflicts. Your <TT>HelloWorldApp</TT>
class is in the <TT>jdg.ch04</TT> package. The <TT>System</TT>
class, referenced by your program, is in the <TT>java.lang</TT>
package.
<H3><A NAME="ThepackageStatement"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">package</FONT></B></TT><B><FONT SIZE=4>
Statement</FONT></B></A></H3>
<P>
The <I>package statement</I> identifies which package a compilation
unit is in. The package statement must be the first statement
in a compilation unit. Its syntax is
<BLOCKQUOTE>
<TT>package packageName;</TT>
</BLOCKQUOTE>
<P>
For example, the package statement
<BLOCKQUOTE>
<TT>package jdg.ch04;</TT>
</BLOCKQUOTE>
<P>
was used to identify the package containing the <TT>HelloWorldApp</TT>
as <TT>jdg.ch04</TT>.
<P>
If a compilation unit does not contain a package statement, the
classes and interfaces contained in the compilation unit are put
into a default package-the package with no name. This default
package is the same for all classes within a particular directory.
<H3><A NAME="TheimportStatement"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">import</FONT></B></TT><B>
<FONT SIZE=4>Statement</FONT></B></A></H3>
<P>
The <TT>java.lang.System</TT> class is used to display <TT>Hello
World!</TT>. The <TT>System</TT> class is in the <TT>java.lang</TT>
package. In order to tell the compiler to use the <TT>System</TT>
class in the <TT>java.lang</TT> package (as opposed to the <TT>System</TT>
class in another package), import the <TT>System</TT> class using
the <TT>import</TT> statement. <I>Importing</I> a class tells
the compiler to use that class when it compiles your source code
file.
<P>
The syntax of the <TT>import</TT> statement is
<BLOCKQUOTE>
<TT>import fullClassName;</TT>
</BLOCKQUOTE>
<P>
The class name supplied with the <TT>import</TT> statement must
be a fully qualified class name, as described in <A HREF="ch3.htm" >Chapter 3</A>.
This means that the name of the package containing the class must
be prepended to the name of the class.
<P>
For example, the following <TT>import</TT> statement imports the
<TT>System</TT> class from <TT>java.lang</TT><FONT SIZE=2>:</FONT>
<BLOCKQUOTE>
<TT>import java.lang.System;</TT>
</BLOCKQUOTE>
<P>
The <TT>*</TT> wildcard character can be used instead of the class
name in the <TT>import</TT> statement. It indicates that all classes
in the package should be imported. For example, the following
<TT>import</TT> statement imports all classes in the <TT>java.lang</TT>
package:
<BLOCKQUOTE>
<TT>import java.lang.*;</TT>
</BLOCKQUOTE>
<P>
An alternative to using the <TT>import</TT> statement is to prefix
the name of a class with its package name. For example, the statement
<BLOCKQUOTE>
<TT>java.lang.System.out.println(&quot;Hello World!&quot;);</TT>
</BLOCKQUOTE>
<P>
could have been used in place of
<BLOCKQUOTE>
<TT>import java.lang.System;<BR>
<FONT FACE="Courier New">&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;.<BR>
System.out.println(&quot;Hello World!&quot;);</FONT></TT>
</BLOCKQUOTE>
<P>
The last statement above would be replaced by the sample prefix
statement.
<P>
It is generally easier to use the <TT>import</TT> statement than
to spell out package names. In the case where two or more classes
of the same name are imported into a compilation unit, you must
prepend the package name when referencing one of the ambiguous
classes.
<H3><A NAME="ClassesandMethods"><B>Classes and Methods</B></A>
</H3>
<P>
The <TT>HelloWorldApp</TT> program was built on the <TT>HelloWorldApp</TT>
class. This class is declared beginning with
<BLOCKQUOTE>
<TT>class HelloWorldApp { </TT>
</BLOCKQUOTE>
<P>
The class declaration ends with the last brace (<TT>}</TT>) of
the file. <TT>HelloWorldApp</TT> declares and implements one method-the
<TT>main</TT> method:
<BLOCKQUOTE>
<TT>public static void main (String args[]) {<BR>
<FONT FACE="Courier New">&nbsp;// Write to stdout.<BR>
&nbsp;System.out.println(&quot;Hello World!&quot;);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>main</TT> method is the method that is executed when a
class is run from the command line using the Java interpreter.
For example, the statement
<BLOCKQUOTE>
<TT>java jdg.ch04.HelloWorldApp</TT>
</BLOCKQUOTE>
<P>
causes the <TT>main</TT> method of the <TT>jdg.ch04.HelloWorldApp</TT>
class to be executed.
<P>
The <TT>main</TT> method is always defined as <TT>public</TT>
(that is, publicly accessible), <TT>static</TT> (applying to the
class as a whole), and in the case of <TT>HelloWorldApp</TT>,
<TT>void</TT> (no return value). The <TT>args[]</TT> parameter
of <TT>main</TT> is defined as an array of class <TT>String</TT>.
The <TT>args[]</TT> parameter is used to pass command-line arguments
to the <TT>main</TT> method. Don't worry if you don't understand
these terms-they will all be defined by the end of <A HREF="ch5.htm" >Chapter 5</A>,
&quot;Classes and Objects.&quot;
<P>
The implementation of the <TT>main</TT> method consists of the
following statement:
<BLOCKQUOTE>
<TT>System.out.println(&quot;Hello World!&quot;);</TT>
</BLOCKQUOTE>
<P>
This statement executes the <TT>println</TT> method of the object
referred to by the <TT>out</TT> variable of the <TT>System</TT>
class. The <TT>println</TT> method is executed using the <TT>&quot;Hello
World!&quot;</TT> parameter. This is what causes <TT>Hello World!</TT>
to be displayed on your console window.
<H3><A NAME="TheSystemClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">System</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>System</TT> class provides an interface to a number of
useful system resources. Among these are the <TT>System.in</TT>
and <TT>System.out</TT> input and output streams. The <TT>System.out</TT>
stream was used in the preceding example. The following example
illustrates the use of <TT>System.in</TT>.
<H2><A NAME="ICanRead"><B><FONT SIZE=5 COLOR=#FF0000>I Can Read!</FONT></B></A>
</H2>
<P>
This program builds on what you learned from <TT>HelloWorldApp</TT>.
<TT>HelloWorldApp</TT> just displayed a message to your console
window. The <TT>ICanReadApp</TT> program will read your name from
the keyboard characters you type and display it on the console
window. It introduces the concepts of identifiers, variable declarations,
Java keywords, and object constructors.
<P>
Use your text editor to create a file called <TT>ICanReadApp.java</TT>
with the Java program in Listing 4.2.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 4.2. The source code of the I Can Read! program.</B><P>

<TT>// ICanReadApp.java<BR>
<BR>
<FONT FACE="Courier New">import java.lang.System;<BR>
import java.io.DataInputStream;<BR>
import java.io.IOException;<BR>
class ICanReadApp {<BR>
&nbsp;public static void main (String args[]) throws IOException
{<BR>
&nbsp;&nbsp;System.out.print(&quot;Enter your name: &quot;);<BR>
&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;String name;<BR>
&nbsp;&nbsp;DataInputStream keyboardInput = new DataInputStream(System.in);
<BR>
&nbsp;&nbsp;name=keyboardInput.readLine();<BR>
&nbsp;&nbsp;System.out.println(&quot;Your name is: &quot;+name);
<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><HR>
Save the file in your <TT>c:\java\jdg\ch04</TT> directory. Compile
it with the command line
<P><BLOCKQUOTE>
<TT>javac ICanReadApp.java</TT></BLOCKQUOTE>
<P>
This will produce a file named <TT>ICanReadApp.class</TT> that
contains the binary compiled code for your program. Run the program
with the command line
<BLOCKQUOTE>
<TT>java ICanReadApp</TT>
</BLOCKQUOTE>
<P>
Make sure that your <TT>CLASSPATH</TT> is correctly set so that
Java can find the <TT>ICanReadApp</TT> class.
<P>
The program will prompt you to enter your name. When you enter
your name, the program will display it to you. Here is a sample
program run:
<BLOCKQUOTE>
<TT>C:\java\jdg\ch04&gt;java ICanReadApp<BR>
<FONT FACE="Courier New">Enter your name: Jamie<BR>
Your name is: Jamie</FONT></TT>
</BLOCKQUOTE>
<P>
It may seem that you're going nowhere fast, but this little program
illustrates some more basic Java syntax. Hang in there-by the
time you get to the end of the chapter, you'll be having fun with
Java console programming.
<H3><A NAME="OverviewofICanReadApp"><B>Overview of </B><TT><B><FONT SIZE=4 FACE="Courier New">ICanReadApp</FONT></B></TT></A>
</H3>
<P>
One of the first things you probably noticed about this program
is that it doesn't contain a package statement. That was done
deliberately to show you what happens when a package statement
is omitted. The package name of the <TT>ICanReadApp</TT> class
is set to the no name (blank) package, by default. This means
that you don't have to prepend the package name to the class name
in order to execute it using the interpreter. Although not using
a package name might seem like a benefit, it also limits the extent
to which the classes you develop can be accessed by other Java
programs. Because the package name is blank and your <TT>CLASSPATH</TT>
variable is <TT>.;c:\java</TT>, the <TT>ICanReadApp</TT> class
can only be accessed from within the <TT>c:\java\jdg\ch04 </TT>directory.
However, you can change your <TT>CLASSPATH</TT> to include this
directory, as discussed in <A HREF="ch2.htm" >Chapter 2</A>, &quot;Java
Overview.&quot;
<P>
The first line of the <TT>ICanReadApp</TT> program is a comment
that identifies the name of the source file. Three <TT>import</TT>
statements are used to import the <TT>java.lang.System</TT>, <TT>java.io.DataInputStream</TT>,
and <TT>java.io.IOException</TT> classes into the compilation
unit:
<BLOCKQUOTE>
<TT>import java.lang.System;<BR>
<FONT FACE="Courier New">import java.io.DataInputStream;<BR>
import java.io.IOException;</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>ICanReadApp</TT> class is then declared. It consists of
a single method called <TT>main</TT>. The <TT>main</TT> method
contains a <TT>throws</TT> clause that identifies the fact that
an <TT>IOException</TT> may be thrown during the course of its
execution. When an exception is thrown, program control immediately
transfers to an exception handler. This issue is covered in <A HREF="ch7.htm" >Chapter 7</A>,
&quot;Exceptions.&quot;
<P>
The <TT>main</TT> method consists of the following six statements.
These statements are summarized and then explained in the following
subsections:
<BLOCKQUOTE>
<TT>System.out.print(&quot;Enter your name: &quot;);<BR>
<FONT FACE="Courier New">System.out.flush();<BR>
String name;<BR>
DataInputStream keyboardInput = new DataInputStream(System.in);
<BR>
name=keyboardInput.readLine();<BR>
System.out.println(&quot;Your name is: &quot;+name);</FONT></TT>
</BLOCKQUOTE>
<P>
The first statement displays the prompt <TT>Enter your name:</TT>
on the console window.
<P>
The second statement flushes the output to the console to make
sure that the data is displayed, even though a line termination
was not sent to the console.
<P>
The third statement declares a variable called <TT>name</TT> of
class <TT>String</TT>.
<P>
The fourth statement declares a variable named <TT>keyboardInput</TT>
of class <TT>DataInputStream</TT>. It then creates an object of
class <TT>DataInputStream</TT> that is constructed from the <TT>System.in</TT>
object. This new object is then assigned to <TT>keyboardInput</TT>.
<P>
The fifth statement reads a line of data from the <TT>keyboardInput</TT>
object and assigns it to the <TT>name</TT> variable.
<P>
The last statement displays the string <TT>Your name is:</TT>
followed by the value of the object referred to by the <TT>name</TT>
variable.
<H3><A NAME="DeclaringVariablesandCreatingObjects"><B>Declaring
Variables and Creating Objects</B></A></H3>
<P>
Statements three and four of the <TT>main</TT> method declare
two variables: <TT>name</TT> and <TT>keyboardInput</TT>. Variables
are used to refer to data of a predefined Java type, an array
of values, an object of a particular Java class, or an object
that implements a particular Java interface. Variables are given
names, called identifiers. The type of data that the variable
refers to is specified in the variable declaration. The <TT>name</TT>
variable is declared to refer to an object of class <TT>String</TT>.
The <TT>keyboardInput</TT> variable is declared to refer to an
object of class <TT>DataInputStream</TT>.
<P>
Notice the difference between statements three and four. In statement
three, the <TT>name</TT> variable is declared-nothing more. No
objects are created and referred to by <TT>name</TT>. It is like
a blank street sign. We know it is a street sign, but we don't
know on what street it will be posted.
<P>
In statement four, after <TT>keyboardInput</TT> is declared, it
is assigned a new object of class <TT>DataInputStream</TT> that
is created using the <TT>new</TT> operator and the <TT>System.in</TT>
parameter. The <TT>new</TT> operator is used to create an object
that is an instance of a particular class. You'll learn all about
classes in <A HREF="ch5.htm" >Chapter 5</A>. The <TT>keyboardInput</TT>
variable refers to the object that is created.
<P>
The <TT>name</TT> variable is assigned an object in line five.
When the <TT>readLine</TT> method is applied to the object referred
to by <TT>keyboardInput</TT>, an object of class <TT>String</TT>
is created. This object is created and initialized with the keyboard
data that you type in response to the <TT>Enter your name:</TT>
prompt. The assignment statement causes <TT>name</TT> to refer
to this newly created <TT>String</TT> object.
<H3><A NAME="IdentifiersandKeywords"><B>Identifiers and Keywords</B></A>
</H3>
<P>
Identifiers are used to name variables, classes, interfaces, methods,
and other Java language elements. An identifier is a sequence
of characters that starts with an underscore (<TT>_</TT>), a dollar
sign (<TT>$</TT>), or a letter (ASCII or Unicode). Subsequent
characters may contain these characters plus the digits 0 through
9. Unicode letters come from the Unicode character set and are
covered in <A HREF="ch11.htm" >Chapter 11</A>, &quot;Language
Summary.&quot; Java reserves certain identifiers as keywords.
Their use is restricted by Java and cannot be used in any other
way. The reserved Java keywords are also listed in <A HREF="ch11.htm" >Chapter 11</A>.
<P>
The following are valid identifiers:
<BLOCKQUOTE>
<TT>myID<BR>
<FONT FACE="Courier New">_score<BR>
$money<BR>
$$99__</FONT></TT>
</BLOCKQUOTE>
<P>
These are not valid identifiers:
<BLOCKQUOTE>
<TT>2time<BR>
<FONT FACE="Courier New">dog#<BR>
spaced out</FONT></TT>
</BLOCKQUOTE>
<P>
The problem with <TT>2time</TT> is that it begins with a digit.
<TT>dog#</TT> contains a pound (<TT>#</TT>) character that is
not allowed in identifiers. The last example fails because it
contains a space character.
<H3><A NAME="UsingSystemin"><B>Using </B><TT><B><FONT SIZE=4 FACE="Courier New">System.in</FONT></B></TT></A>
</H3>
<P>
Console (that is, non&#173;Windows) programs process user keyboard
input and display data to the console window. The console window
is an MS-DOS window in Windows 95 and NT implementations of Java
and a shell, or <TT>xterm</TT> window, in UNIX-based Java implementations.
In the <TT>HelloWorldApp</TT> program, you learned how to write
to the console window. The <TT>ICanReadApp</TT> program showed
how to read from the keyboard.
<P>
You might compare <TT>System.in</TT> with <TT>System.out</TT>
and wonder why I had to create an object of class <TT>DataInputStream</TT>.
The <TT>System.out</TT> variable refers to an object of class
<TT>PrintStream</TT>. The <TT>PrintStream</TT> class provides
the <TT>println</TT> method for writing to objects of this class.
The <TT>System.in</TT> variable refers to an object of the <TT>InputStream</TT>
class. The methods provided by the <TT>InputStream</TT> class
aren't all that great for reading a line of text entered at the
keyboard and returning that data as a string. The <TT>InputStream</TT>
methods are fairly primitive. The <TT>DataInputStream</TT> class
is a subclass of <TT>FilterInputStream</TT>, which is a subclass
of <TT>InputStream</TT>. A subclass is a class that is built on
another class as a foundation. The methods of <TT>DataInputStream</TT>
build on the methods of <TT>FilterInputStream</TT> and <TT>InputStream</TT>.
The <TT>readLine</TT> method is one such method. The example uses
the <TT>DataInputStream</TT> class because it provides an easier
method of reading keyboard input.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=566>
<BLOCKQUOTE>
Don't worry about learning all the new classes mentioned in this chapter. They are all covered in Part III, &quot;Using the Java API.&quot;</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
In statement four, when the new <TT>DataInputStream</TT> object
is created, it uses the object referred to by <TT>System.in</TT>
as a foundation.
<H2><A NAME="TypeThis"><B><FONT SIZE=5 COLOR=#FF0000>Type This!</FONT></B></A>
</H2>
<P>
In the <TT>ICanReadApp</TT> program, you were introduced to variable
declarations and the construction and assignment of objects to
variables. Variables may refer to objects of a particular class,
to objects of one of the predefined Java types, to arrays, or
to objects that implement a particular interface. You have already
encountered the first case. The <TT>TypeThisApp</TT> program introduces
the primitive Java types. Arrays are presented in the last example
of this chapter. Interfaces are covered in <A HREF="ch6.htm" >Chapter 6</A>,
&quot;Interfaces.&quot;
<P>
Start up your text editor and enter the program code shown in
Listing 4.3. Then save it as <TT>TypeThisApp.java</TT> in your
<TT>ch04</TT> directory.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 4.3. The Type This! program.</B><P>

<TT>// TypeThisApp.java<BR>
<BR>
<FONT FACE="Courier New">import java.lang.System;<BR>
<BR>
class TypeThisApp {<BR>
&nbsp;public static void main (String args[]) {<BR>
&nbsp;&nbsp;// Integer types<BR>
&nbsp;&nbsp;byte oneByte = 57;<BR>
&nbsp;&nbsp;short twoBytes = 1024;<BR>
&nbsp;&nbsp;int fourBytes = 1234567;<BR>
&nbsp;&nbsp;long eightBytes = 0x123456789ABCDEFl;<BR>
&nbsp;&nbsp;// Floating-point types<BR>
&nbsp;&nbsp;float thirtyTwoBits = 1234.56f;<BR>
&nbsp;&nbsp;double sixtyFourBits = 6.282E123;<BR>
&nbsp;&nbsp;// Boolean type<BR>
&nbsp;&nbsp;boolean ownSelf = true;<BR>
&nbsp;&nbsp;// Character type<BR>
&nbsp;&nbsp;char malcolm = 'X';<BR>
&nbsp;&nbsp;System.out.println(oneByte);<BR>
&nbsp;&nbsp;System.out.println(twoBytes);<BR>
&nbsp;&nbsp;System.out.println(fourBytes);<BR>
&nbsp;&nbsp;System.out.println(eightBytes);<BR>
&nbsp;&nbsp;System.out.println(thirtyTwoBits);<BR>
&nbsp;&nbsp;System.out.println(sixtyFourBits);<BR>
&nbsp;&nbsp;System.out.println(ownSelf);<BR>
&nbsp;&nbsp;System.out.println(malcolm);<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Compile the program using the following command line:
<P>
<TT>javac TypeThisApp.java</TT>
<P>
This will produce the <TT>TypeThisApp.class</TT> file that you
can execute using
<P>
<TT>java TypeThisApp</TT>
<P>
The following output should be displayed on your console window:
<BLOCKQUOTE>
<TT>C:\java\jdg\ch04&gt;java TypeThisApp<BR>
<FONT FACE="Courier New">57<BR>
1024<BR>
1234567<BR>
81985529216486895<BR>
1234.56<BR>
6.282e+123<BR>
true<BR>
X</FONT></TT>
</BLOCKQUOTE>
<H3><A NAME="OverviewofTypeThisApp"><B>Overview of </B><TT><B><FONT SIZE=4 FACE="Courier New">TypeThisApp</FONT></B></TT></A>
</H3>
<P>
<TT>TypeThisApp</TT>, like <TT>HelloWorldApp</TT> and <TT>ICanReadApp</TT>,
declares only one class with a single method-<TT>main</TT>. The
<TT>main</TT> method consists of eight variable declarations and
assignments followed by eight invocations of the <TT>println</TT>
method for the <TT>System.out</TT> object.
<P>
The eight variable declarations declare variables of the primitive
data types <TT>byte</TT>, <TT>short</TT>, <TT>int</TT>, <TT>long</TT>,
<TT>float</TT>, <TT>double</TT>, <TT>boolean</TT>, and <TT>char</TT>.
Each of the declarations is combined with an assignment of a literal
value to the declared variable.
<H3><A NAME="ThePrimitiveJavaDataTypes"><B>The Primitive Java
Data Types</B></A></H3>
<P>
Java supports four major primitive data types: <TT>integer</TT>,
<TT>floating point</TT>, <TT>boolean</TT>, and <TT>character</TT>.
The <TT>integer</TT> type has four subtypes: <TT>byte</TT>, <TT>short</TT>,
<TT>int</TT>, and <TT>long</TT>. These correspond to 1-byte, 2-byte,
4-byte, and 8-byte integer values. The <TT>floating point</TT>
type consists of a 4-byte <TT>float</TT> subtype and an 8-byte
<TT>double</TT> subtype. The <TT>floating point</TT> type follows
IEEE 754, a recognized standard for floating-point arithmetic
developed by the Institute of Electrical and Electronics Engineers.
<P>
The <TT>boolean</TT> type consists of the literal values <TT>true</TT>
and <TT>false</TT>. <TT>boolean</TT> types are not automatically
converted into <TT>integer</TT> types because they are not defined
in terms of integers as they are in C and C++. Explicit conversion
is required.
<P>
The <TT>character</TT> type uses the standard Unicode character
set and is a 16-bit unsigned integer. Variables of the <TT>char</TT>
type store single characters. The <TT>java.lang.String</TT> class
is used to store strings of characters.
<H3><A NAME="LiteralValues"><B>Literal Values</B></A></H3>
<P>
<TT>TypeThisApp</TT> illustrates the use of literal values with
the primitive types. Integer literals can be expressed as decimal,
hexadecimal, or octal values, using the conventions established
by C and C++. An integer literal that begins with a <TT>0</TT>
is assumed to represent an octal value. An integer literal beginning
with <TT>0x</TT> or <TT>0X</TT> is assumed to be a hexadecimal
value. An <TT>l</TT> or <TT>L</TT> appended to an integer literal
indicates that the literal is of type <TT>long</TT>.
<P>
Floating-point literals use the standard exponential notation
described in <A HREF="ch11.htm" >Chapter 11</A>. Floating-point
literals are of type <TT>double</TT>, by default. An <TT>f</TT>
or <TT>F</TT> appended to a floating-point literal indicates that
the literal is of type <TT>float</TT>.
<P>
Boolean types simply use the values <TT>true</TT> and <TT>false</TT>.
<P>
Character types use standard Unicode, which is a superset of ASCII.
Unicode is covered in <A HREF="ch11.htm" >Chapter 11</A>. The
C and C++ conventions for representing character literals are
used by Java.
<H2><A NAME="BlackJack"><B><FONT SIZE=5 COLOR=#FF0000>BlackJack</FONT></B></A>
</H2>
<P>
The programs you've written so far in this chapter have been deliberately
kept short and simple. Their purpose is to quickly get you started
in Java programming and to cover some of the basic elements of
the Java language. The next example allows you to spread your
wings and have a little fun at the same time. The <TT>BlackJackApp</TT>
program that you will develop in this section is a simplified,
character-based version of the popular blackjack card game. This
example, while entertaining, illustrates the use of Java arrays
and provides many examples of Java statements and expressions.
<P>
The <TT>BlackJackApp</TT> program is rather long compared to the
previous examples. You have the option of copying the source code
from the CD-ROM or typing it in yourself. I recommend typing it
in. By doing so you will be sure to cover every statement in the
program and increase your knowledge of Java syntax. Depending
on how accurately you type, you might be called upon to develop
some Java debugging skills.
<P>
Listing 4.4 is the program source code. Either type it into a
file and save it as <TT>c:\java\jdg\ch04\BlackJackApp.java</TT>,
or copy the file <TT>\java\jdg\ch04\BlackJackApp.java</TT> from
the CD-ROM drive to your <TT>ch04</TT> directory.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 4.4. The source code of the BlackJack program.</B><P>
<TT>// BlackJackApp.java<BR>
<BR>
<FONT FACE="Courier New">// Import all the Java API classes needed
by this program.<BR>
import java.lang.System;<BR>
import java.lang.Integer;<BR>
import java.lang.NumberFormatException;<BR>
import java.io.DataInputStream;<BR>
import java.io.IOException;<BR>
import java.util.Random;<BR>
<BR>
class BlackJackApp {<BR>
&nbsp;public static void main (String args[]) throws IOException
{<BR>
&nbsp;&nbsp;// Create a BlackJackGame object ...<BR>
&nbsp;&nbsp;BlackJackGame game = new BlackJackGame();<BR>
&nbsp;&nbsp;// and play it!<BR>
&nbsp;&nbsp;game.play();<BR>
&nbsp;}<BR>
}<BR>
<BR>
class BlackJackGame {<BR>
&nbsp;// Variable declarations<BR>
&nbsp;int bet;<BR>
&nbsp;int money;<BR>
&nbsp;Deck deck;<BR>
&nbsp;Hand playersHand;<BR>
&nbsp;Hand dealersHand;<BR>
&nbsp;DataInputStream keyboardInput;<BR>
<BR>
&nbsp;// Method declarations <BR>
&nbsp;public BlackJackGame() { // Constructor<BR>
&nbsp;&nbsp;bet = 0;<BR>
&nbsp;&nbsp;money = 1000;<BR>
&nbsp;&nbsp;deck = new Deck();<BR>
&nbsp;&nbsp;keyboardInput = new DataInputStream(System.in);<BR>
&nbsp;}<BR>
<BR>
&nbsp;void play() throws IOException {<BR>
&nbsp;&nbsp;System.out.println(&quot;Welcome to Blackjack!&quot;);
<BR>
&nbsp;&nbsp;System.out.println(&quot;You have $&quot;+Integer.toString(money)+&quot;.&quot;);
<BR>
&nbsp;&nbsp;do {<BR>
&nbsp;&nbsp;&nbsp;placeBet();<BR>
&nbsp;&nbsp;&nbsp;if(bet&gt;0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;initialDeal();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(playersHand.blackjack()) playerWins();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(playersHand.under(22) &amp;&amp;
playerTakesAHit()) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;playersHand.addCard(deck.deal());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;playersHand.show(false,false);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(dealersHand.mustHit())<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dealersHand.addCard(deck.deal());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dealersHand.show(true,false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showResults();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;} while (bet&gt;0);<BR>
&nbsp;}<BR>
<BR>
&nbsp;void placeBet() throws IOException, NumberFormatException
{<BR>
&nbsp;&nbsp;do{<BR>
&nbsp;&nbsp;&nbsp;System.out.print(&quot;Enter bet: &quot;);<BR>
&nbsp;&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;&nbsp;bet = Integer.parseInt(keyboardInput.readLine());
<BR>
&nbsp;&nbsp;} while(bet&lt;0 || bet&gt;money);<BR>
&nbsp;}<BR>
<BR>
&nbsp;void initialDeal() {<BR>
&nbsp;&nbsp;System.out.println(&quot;New hand...&quot;);<BR>
&nbsp;&nbsp;playersHand = new Hand();<BR>
&nbsp;&nbsp;dealersHand = new Hand();<BR>
&nbsp;&nbsp;for(int i = 0;i&lt;2;++i) {<BR>
&nbsp;&nbsp;&nbsp;playersHand.addCard(deck.deal());<BR>
&nbsp;&nbsp;&nbsp;dealersHand.addCard(deck.deal());<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;dealersHand.show(true,true);<BR>
&nbsp;&nbsp;playersHand.show(false,false);<BR>
&nbsp;}<BR>
<BR>
&nbsp;void playerWins() {<BR>
&nbsp;&nbsp;money += bet;<BR>
&nbsp;&nbsp;System.out.println(&quot;Player wins $&quot;+Integer.toString(bet)+&quot;.&quot;);
<BR>
&nbsp;&nbsp;System.out.println(&quot;Player has $&quot;+Integer.toString(money)+&quot;.&quot;);
<BR>
&nbsp;}<BR>
<BR>
&nbsp;void dealerWins() {<BR>
&nbsp;&nbsp;money -= bet;<BR>
&nbsp;&nbsp;System.out.println(&quot;Player loses $&quot;+Integer.toString(bet)+&quot;.&quot;);
<BR>
&nbsp;&nbsp;System.out.println(&quot;Player has $&quot;+Integer.toString(money)+&quot;.&quot;);
<BR>
&nbsp;}<BR>
<BR>
&nbsp;void tie() {<BR>
&nbsp;&nbsp;System.out.println(&quot;Tie.&quot;);<BR>
&nbsp;&nbsp;System.out.println(&quot;Player has $&quot;+Integer.toString(money)+&quot;.&quot;);
<BR>
&nbsp;}<BR>
<BR>
&nbsp;boolean playerTakesAHit() throws IOException {<BR>
&nbsp;&nbsp;char ch = ' ';<BR>
&nbsp;&nbsp;do{<BR>
&nbsp;&nbsp;&nbsp;System.out.print(&quot;Hit or Stay: &quot;);
<BR>
&nbsp;&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;&nbsp;String playersDecision = keyboardInput.readLine();
<BR>
&nbsp;&nbsp;&nbsp;try ch = playersDecision.charAt(0);<BR>
&nbsp;&nbsp;&nbsp;catch (StringIndexOutOfBoundsException exception)
;<BR>
&nbsp;&nbsp;&nbsp;if(ch == 'H' || ch == 'h') return true;<BR>
&nbsp;&nbsp;&nbsp;if(ch == 'S' || ch == 's') return false;<BR>
&nbsp;&nbsp;} while(true);<BR>
&nbsp;}<BR>
<BR>
&nbsp;void showResults() {<BR>
&nbsp;&nbsp;if(playersHand.busted() &amp;&amp; dealersHand.busted())
tie();<BR>
&nbsp;&nbsp;else if(playersHand.busted()) dealerWins();<BR>
&nbsp;&nbsp;else if(dealersHand.busted()) playerWins();<BR>
&nbsp;&nbsp;else if(playersHand.bestScore() &gt; dealersHand.bestScore())
playerWins();<BR>
&nbsp;&nbsp;else if(playersHand.bestScore() &lt; dealersHand.bestScore())
dealerWins();<BR>
&nbsp;&nbsp;else tie();<BR>
&nbsp;}<BR>
} // End of BlackJackGame class<BR>
<BR>
class Deck {<BR>
&nbsp;// Variable declarations<BR>
&nbsp;int cards[];     // Array of 52 cards<BR>
&nbsp;int topCard;     // 0-51 (index of card in deck)<BR>
&nbsp;Random random;<BR>
<BR>
&nbsp;// Method declarations<BR>
&nbsp;public Deck() { // Constructor<BR>
&nbsp;&nbsp;cards = new int[52];<BR>
&nbsp;&nbsp;for(int i = 0;i&lt;52;++i) cards[i] = i;<BR>
&nbsp;&nbsp;topCard = 0;<BR>
&nbsp;&nbsp;random = new Random();<BR>
&nbsp;&nbsp;shuffle();<BR>
&nbsp;}<BR>
<BR>
&nbsp;public void shuffle() {<BR>
&nbsp;&nbsp;// Repeat 52 times<BR>
&nbsp;&nbsp;for(int i = 0;i&lt;52;++i) {<BR>
&nbsp;&nbsp;&nbsp;// Randomly exchange two cards in the deck.
<BR>
&nbsp;&nbsp;&nbsp;int j = randomCard();<BR>
&nbsp;&nbsp;&nbsp;int k = randomCard();<BR>
&nbsp;&nbsp;&nbsp;int temp = cards[j];<BR>
&nbsp;&nbsp;&nbsp;cards[j] = cards[k];<BR>
&nbsp;&nbsp;&nbsp;cards[k] = temp;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
<BR>
&nbsp;int randomCard() {<BR>
&nbsp;&nbsp;int r = random.nextInt();<BR>
&nbsp;&nbsp;if(r&lt;0) r = 0-r;<BR>
&nbsp;&nbsp;return r%52;<BR>
&nbsp;}<BR>
<BR>
&nbsp;Card deal() {<BR>
&nbsp;&nbsp;if(topCard&gt;51) {<BR>
&nbsp;&nbsp;&nbsp;shuffle();<BR>
&nbsp;&nbsp;&nbsp;topCard = 0;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;Card card = new Card(cards[topCard]);<BR>
&nbsp;&nbsp;++topCard;<BR>
&nbsp;&nbsp;return card;<BR>
&nbsp;}<BR>
} // End of Deck class<BR>
<BR>
class Hand {<BR>
&nbsp;// Variable declarations<BR>
&nbsp;int numCards;<BR>
&nbsp;Card cards[];<BR>
&nbsp;static int MaxCards = 12;<BR>
<BR>
&nbsp;//Method declarations<BR>
&nbsp;public Hand() { // Constructor<BR>
&nbsp;&nbsp;numCards = 0;<BR>
&nbsp;&nbsp;cards = new Card[MaxCards];<BR>
&nbsp;}<BR>
<BR>
&nbsp;void addCard(Card c) {<BR>
&nbsp;&nbsp;cards[numCards] = c;<BR>
&nbsp;&nbsp;++numCards;<BR>
&nbsp;}<BR>
<BR>
&nbsp;void show(boolean isDealer,boolean hideFirstCard) {<BR>
&nbsp;&nbsp;if(isDealer) System.out.println(&quot;Dealer:&quot;);
<BR>
&nbsp;&nbsp;else System.out.println(&quot;Player:&quot;);<BR>
&nbsp;&nbsp;for(int i = 0;i&lt;numCards;++i) {<BR>
&nbsp;&nbsp;&nbsp;if(i == 0 &amp;&amp; hideFirstCard) System.out.println(&quot;
 Hidden&quot;);<BR>
&nbsp;&nbsp;&nbsp;else System.out.println(&quot;  &quot;+cards[i].value+&quot;
of &quot;+cards[i].suit);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
<BR>
boolean blackjack() {<BR>
&nbsp;if(numCards == 2) {<BR>
&nbsp;&nbsp;if(cards[0].iValue == 1 &amp;&amp; cards[1].iValue
== 10) return true;<BR>
&nbsp;&nbsp;if(cards[1].iValue == 1 &amp;&amp; cards[0].iValue
== 10) return true;<BR>
&nbsp;}<BR>
&nbsp;return false;<BR>
}<BR>
<BR>
boolean under(int n) {<BR>
&nbsp;int points = 0;<BR>
&nbsp;for(int i = 0;i&lt;numCards;++i) points += cards[i].iValue;
<BR>
&nbsp;if(points&lt;n) return true;<BR>
&nbsp;else return false;<BR>
}<BR>
<BR>
int bestScore() {<BR>
&nbsp;int points = 0;<BR>
&nbsp;boolean haveAce = false;<BR>
&nbsp;for(int i = 0;i&lt;numCards;++i) {<BR>
&nbsp;&nbsp;points += cards[i].iValue;<BR>
&nbsp;&nbsp;if(cards[i].iValue == 1) haveAce = true;<BR>
&nbsp;}<BR>
&nbsp;if(haveAce) {<BR>
&nbsp;&nbsp;if(points+10 &lt; 22) points += 10;<BR>
&nbsp;}<BR>
&nbsp;return points;<BR>
}<BR>
<BR>
boolean mustHit() {<BR>
&nbsp;if(bestScore()&lt;17) return true;<BR>
&nbsp;else return false;<BR>
}<BR>
<BR>
&nbsp;boolean busted() {<BR>
&nbsp;&nbsp;if(!under(22)) return true;<BR>
&nbsp;&nbsp;else return false;<BR>
&nbsp;}<BR>
} // End of Hand class <BR>
<BR>
class Card {<BR>
&nbsp;// Variable declarations<BR>
&nbsp;int iValue;   // Numeric value corresponding to card.<BR>
&nbsp;String value; // &quot;A&quot; &quot;2&quot; through &quot;9&quot;
&quot;T&quot; &quot;J&quot; &quot;Q&quot; &quot;K&quot;<BR>
&nbsp;String suit; // &quot;S&quot; &quot;H&quot; &quot;C&quot;
&quot;D&quot;<BR>
<BR>
&nbsp;// Method declarations<BR>
&nbsp;public Card(int n) { // Constructor<BR>
&nbsp;&nbsp;int iSuit = n/13;<BR>
&nbsp;&nbsp;iValue = n%13+1;<BR>
&nbsp;&nbsp;switch(iSuit) {<BR>
&nbsp;&nbsp;&nbsp;case 0:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;suit = &quot;Spades&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;case 1:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;suit = &quot;Hearts&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;case 2:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;suit = &quot;Clubs&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;default:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;suit = &quot;Diamonds&quot;;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;if(iValue == 1) value = &quot;Ace&quot;;<BR>
&nbsp;&nbsp;else if(iValue == 10) value = &quot;Ten&quot;;<BR>
&nbsp;&nbsp;else if(iValue == 11) value = &quot;Jack&quot;;<BR>
&nbsp;&nbsp;else if(iValue == 12) value = &quot;Queen&quot;;<BR>
&nbsp;&nbsp;else if(iValue == 13) value = &quot;King&quot;;<BR>
&nbsp;&nbsp;else value = Integer.toString(iValue);<BR>
&nbsp;&nbsp;if(iValue&gt;10) iValue = 10;<BR>
&nbsp;}<BR>
<BR>
&nbsp;int getValue() {<BR>
&nbsp;&nbsp;return iValue;<BR>
&nbsp;}<BR>
} // End of Card class </FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Having produced <TT>BlackJackApp.java</TT>, in one way or another,
compile it using the command line
<P>
<TT>javac BlackJackApp.java</TT>
<P>
This will produce the <TT>BlackJackApp.class</TT> file. If your
file does not compile, go back and fix any typing errors and try
again. Once you have a successful compile, execute the program
using
<P>
<TT>java BlackJackApp</TT>
<P>
This will result in the following display:
<BLOCKQUOTE>
<TT>C:\java\jdg\ch04&gt;java BlackJackApp<BR>
<FONT FACE="Courier New">Welcome to Blackjack!<BR>
You have $1000.<BR>
Enter bet: </FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>BlackJackApp</TT> program will provide you with $1000
with which to play blackjack. You use this money to bet. You place
a bet between 0 and the amount of money you have, and then the
computer, acting as dealer, will deal two cards to you and two
to itself. For example, upon entering a bet of <TT>10</TT>, I
received the following program output:
<BLOCKQUOTE>
<TT>C:\java\jdg\ch04&gt;java BlackJackApp<BR>
<FONT FACE="Courier New">Welcome to Blackjack!<BR>
You have $1000.<BR>
Enter bet: 10<BR>
New hand...<BR>
Dealer:<BR>
&nbsp;&nbsp;Hidden<BR>
&nbsp;&nbsp;2 of Hearts<BR>
Player:<BR>
&nbsp;&nbsp;Queen of Clubs<BR>
&nbsp;&nbsp;3 of Spades<BR>
Hit or Stay: </FONT></TT>
</BLOCKQUOTE>
<P>
I, being the player, was dealt a queen of clubs and a three of
spades. This gives me a total of 13 points. Points are calculated
as follows:<BR>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><I><FONT SIZE=2>Card Point</FONT></I></TD><TD WIDTH=278><I><FONT SIZE=2>Value</FONT></I>
</TD></TR>
<TR><TD WIDTH=139><FONT SIZE=2>Ace</FONT></TD><TD WIDTH=278><FONT SIZE=2>1 or 11 (whichever is better)</FONT>
</TD></TR>
<TR><TD WIDTH=139><FONT SIZE=2>2 through 10</FONT></TD><TD WIDTH=278><FONT SIZE=2>face value of card (that is, 2 through 10)</FONT>
</TD></TR>
<TR><TD WIDTH=139><FONT SIZE=2>Jack, Queen, King</FONT></TD><TD WIDTH=278><FONT SIZE=2>10</FONT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
The objective of the game is to get as close to 21 as you can,
without going over. Whoever gets the closest wins. If you go over
21, you lose, unless the dealer does also, in which case you tie.
<P>
When you are dealt your initial two cards, you are shown one of
the dealer's cards. This helps you to determine whether you should
take another card, referred to as <I>hitting</I>, or <I>stay</I>
with the cards that you have. You can enter <TT>h</TT> or <TT>s</TT>
to inform the dealer of your decision. If you enter <TT>h</TT>,
you will be dealt another card. If you enter <TT>s</TT>, the dealer
will begin to play its hand.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=535>
<BLOCKQUOTE>
If the point total of your first two cards is 21, you are said to have <I>blackjack</I> and immediately win.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The dealer must take a hit until the total points in its hand
is 17 or over, at which point it must stay. When both you and
the dealer have finished playing your hands, the total number
of points acquired by each is used to determine the winner. Play
is repeated until you enter a 0 bet.
<P>
The following program output shows a game played between myself
and the <TT>BlackJackApp</TT> program:
<BLOCKQUOTE>
<TT>C:\java\jdg\ch04&gt;java BlackJackApp<BR>
<FONT FACE="Courier New">Welcome to Blackjack!<BR>
You have $1000.<BR>
Enter bet: 10<BR>
New hand...<BR>
Dealer:<BR>
&nbsp;&nbsp;Hidden<BR>
&nbsp;&nbsp;2 of Hearts<BR>
Player:<BR>
&nbsp;&nbsp;Queen of Clubs<BR>
&nbsp;&nbsp;3 of Spades<BR>
Hit or Stay: h<BR>
Player:<BR>
&nbsp;&nbsp;Queen of Clubs<BR>
&nbsp;&nbsp;3 of Spades<BR>
&nbsp;&nbsp;7 of Spades<BR>
Hit or Stay: s<BR>
Dealer:<BR>
&nbsp;&nbsp;Queen of Spades<BR>
&nbsp;&nbsp;2 of Hearts<BR>
&nbsp;&nbsp;5 of Spades<BR>
Player wins $10.<BR>
Player has $1010.<BR>
Enter bet: 20<BR>
New hand...<BR>
Dealer:<BR>
&nbsp;&nbsp;Hidden<BR>
&nbsp;&nbsp;7 of Clubs<BR>
Player:<BR>
&nbsp;&nbsp;King of Clubs<BR>
&nbsp;&nbsp;9 of Spades<BR>
Hit or Stay: s<BR>
Dealer:<BR>
&nbsp;&nbsp;2 of Clubs<BR>
&nbsp;&nbsp;7 of Clubs<BR>
&nbsp;&nbsp;9 of Clubs<BR>
Player wins $20.<BR>
Player has $1030.<BR>
Enter bet: 0<BR>
<BR>
C:\java\jdg\ch04&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
On the initial deal, I bet 10 bucks. I was given a queen of clubs
and a three of spades, for a total of 13 points. The dealer was
given a two of hearts and another (hidden) card. I elected to
take a hit and was dealt a seven of spades, bringing the total
in my hand up to 20 points-beginner's luck! The dealer turned
over the hidden card to reveal a queen of spades. He then drew
a five of spades for a total of 17 points. Because the dealer
reached 17, he was forced to stay, and I had won $10. Feeling
a little lightheaded, I proceeded to double my bet to $20. I was
dealt a king of clubs and a nine of spades for a total of 19 points.
I decided to stay with that hand. The dealer's hand was revealed
to be a two of clubs and a seven of clubs. The dealer drew a nine
of clubs for a total of 18 points. I had won again! At that point
I elected to take the money and continue writing this book. I
entered a 0 bet to end the game.
<P>
The point of the example is not to turn you into a blackjack gambler,
but to serve as a more interesting example from which to discuss
Java arrays, statements, and expressions.
<H3><A NAME="OverviewofBlackJackApp"><B>Overview of </B><TT><B><FONT SIZE=4 FACE="Courier New">BlackJackApp</FONT></B></TT></A>
</H3>
<P>
The <TT>BlackJackApp.java</TT> file is long, but don't let that
daunt you. I'm going to break it down, class by class, and method
by method, to explain its operation.
<P>
The program begins with a comment identifying the name of the
program:
<BLOCKQUOTE>
<TT>// BlackJackApp.java</TT>
</BLOCKQUOTE>
<P>
It then imports all the Java API classes it needs to perform its
processing:
<BLOCKQUOTE>
<TT>// Import all the Java API classes needed by this program.
<BR>
<FONT FACE="Courier New">import java.lang.System;<BR>
import java.lang.Integer;<BR>
import java.lang.NumberFormatException;<BR>
import java.io.DataInputStream;<BR>
import java.io.IOException;<BR>
import java.util.Random;</FONT></TT>
</BLOCKQUOTE>
<P>
Next, it declares the <TT>BlackJackApp</TT> class, the class that
implements your blackjack application. This class has a single
<TT>main</TT> method, like all the other programs you've developed
so far. The <TT>main</TT> method consists of two Java statements.
The first declares the <TT>game</TT> variable as having class
type <TT>BlackJackGame</TT> and assigns it a new object of class
<TT>BlackJackGame</TT>. The second statement applies the <TT>play()</TT>
method to the object referenced by <TT>game</TT>, as shown in
the following code:
<BLOCKQUOTE>
<TT>class BlackJackApp {<BR>
<FONT FACE="Courier New">&nbsp;public static void main (String
args[]) throws IOException {<BR>
&nbsp;&nbsp;// Create a BlackJackGame object ...<BR>
&nbsp;&nbsp;BlackJackGame game = new BlackJackGame();<BR>
&nbsp;&nbsp;// and play it!<BR>
&nbsp;&nbsp;game.play();<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<H4><B>The </B><TT><B><FONT FACE="Courier New">BlackJackGame</FONT></B></TT><B>
Class</B></H4>
<P>
The <TT>BlackJackGame</TT> class is not defined as part of the
Java API. I wonder why they left it out? Because it doesn't exist
anywhere else, it is a class that must be declared as part of
the program. The <TT>BlackJackGame</TT> class and other classes
could have been defined and compiled, separately, but they were
combined into a single compilation unit to keep this example somewhat
compact.
<P>
The <TT>BlackJackGame</TT> class is rather long. It declares six
variables and nine methods. The variables are data structures
that represent the state of a blackjack game. The <TT>bet</TT>
variable identifies the amount wagered by the player. The <TT>money</TT>
variable identifies how much money the player has left. The <TT>deck</TT>
variable references an object of class <TT>Deck</TT> that is used
to represent a deck of cards. Two <TT>Hand</TT> variables are
declared, representing the player's hand and the dealer's hand.
Finally, our old friend <TT>keyboardInput</TT> has returned for
a repeat performance:
<BLOCKQUOTE>
<TT>class BlackJackGame {<BR>
<FONT FACE="Courier New">&nbsp;// Variable declarations<BR>
&nbsp;int bet;<BR>
&nbsp;int money;<BR>
&nbsp;Deck deck;<BR>
&nbsp;Hand playersHand;<BR>
&nbsp;Hand dealersHand;<BR>
&nbsp;DataInputStream keyboardInput;<BR>
&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;.<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The first method declared for <TT>BlackJackGame</TT> is its <I>constructor</I>.
A constructor is used to initialize objects that are new instances
of a class. In the <TT>main</TT> method of the <TT>BlackJackApp</TT>
class, the <TT>BlackJackGame()</TT> constructor is invoked to
initialize the newly created <TT>BlackJackGame</TT> object that
is assigned to <TT>game</TT>:
<P>
<TT>BlackJackGame game = new BlackJackGame();</TT>
<P>
The <TT>BlackJackGame()</TT> constructor initializes four of the
six variables of the <TT>BlackJackGame</TT> class. The player's
bet is set to 0, and the player is given $1000. The <TT>playersHand</TT>
and <TT>dealersHand</TT> variables are not initialized until the
cards are dealt.
<P>
A new <TT>Deck</TT> object is created and assigned to the <TT>deck</TT>
variable. The new object is initialized using the <TT>Deck()</TT>
constructor for the <TT>Deck</TT> class. If you typed in the program,
you probably know where to find it in the source code listing.
<P>
Finally, the <TT>keyboardInput</TT> variable is assigned a new
object of class <TT>DataInputStream</TT>. This object is created
using the <TT>DataInputStream()</TT> constructor with the <TT>System.in</TT>
variable as an argument:
<BLOCKQUOTE>
<TT>// Method declarations public BlackJackGame() { // Constructor
<BR>
<FONT FACE="Courier New">&nbsp;&nbsp;bet = 0;<BR>
&nbsp;&nbsp;money = 1000;<BR>
&nbsp;&nbsp;deck = new Deck();<BR>
&nbsp;&nbsp;keyboardInput = new DataInputStream(System.in);<BR>
&nbsp;}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=578><BLOCKQUOTE>
An <I>argument</I> is a value that is provided as an input to a method invocation. It does not denote disagreement.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The second method defined for <TT>BlackJackGame</TT> is the <TT>play()</TT>
method. This method is invoked in the <TT>main</TT> method of
<TT>BlackJackApp</TT> to cause the <TT>BlackJackGame</TT> object,
referenced by <TT>game</TT>, to be played:
<P>
<BLOCKQUOTE>
<TT>game.play();</TT>
</BLOCKQUOTE>
<P>
The <TT>play()</TT> method begins with the <TT>void</TT> keyword
to indicate that it does not return any value. It also identifies
the fact that <TT>IOException</TT> may be thrown during its processing.
Exceptions are covered in <A HREF="ch7.htm" >Chapter 7</A>. The
general structure of the <TT>play()</TT> method is as follows:
<BLOCKQUOTE>
<TT>void play() throws IOException {<BR>
<FONT FACE="Courier New">&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;.<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>play()</TT> method begins by displaying the <TT>Welcome
to Blackjack!</TT> text and the amount of money available to the
player. The second <TT>println()</TT> method takes three arguments.
First it displays <TT>You have $</TT>, then it displays the contents
of the <TT>money</TT> variable, and then it displays a period
(<TT>.</TT>). It converts the integer value of <TT>money</TT>
to a <TT>String</TT> value before printing it. <TT>String</TT>
is a class defined in the Java API to represent strings of characters.
These statements are as follows:
<BLOCKQUOTE>
<TT>System.out.println(&quot;Welcome to Blackjack!&quot;);</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>System.out.println(&quot;You have $&quot;+Integer.toString(money)+&quot;.&quot;);</TT>
</BLOCKQUOTE>
<P>
The rest of the statements of the <TT>play()</TT> method are surrounded
by
<BLOCKQUOTE>
<TT>do {<BR>
<FONT FACE="Courier New">&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;.<BR>
} while (bet&gt;0);</FONT></TT>
</BLOCKQUOTE>
<P>
This is a <TT>do</TT> statement, and it causes the statements
between the braces to be repeatedly executed while the value of
<TT>bet</TT> is greater than 0.
<P>
The block of statements within the <TT>do</TT> statement begins
with an invocation of the <TT>placeBet()</TT> method. Because
no object is identified with the <TT>placeBet()</TT> method, it
is invoked using the current object-that which is invoked with
the <TT>play()</TT> method:
<P>
<TT>placeBet();</TT>
<P>
The <TT>placeBet()</TT> method, as you'll see shortly, is used
to prompt the player to enter his bet. After the <TT>placeBet()</TT>
method is invoked, the next statement is an <TT>if</TT> statement
that checks whether <TT>bet</TT> is greater than 0. If <TT>bet</TT>
is greater than 0, the statements between its braces are executed.
<P>
If <TT>bet</TT> is not greater than 0, execution continues after
the <TT>if</TT> statement. In this case, the end of the <TT>do</TT>
statement is encountered, the <TT>do</TT> statement terminates,
the <TT>play()</TT> procedure returns, and the <TT>BlackJackApp</TT>
<TT>main</TT> method finishes its processing. In other words,
the game is over. 
<P>
The following code tests whether <TT>bet</TT> is greater than
0:
<BLOCKQUOTE>
<TT>if(bet&gt;0) {<BR>
<FONT FACE="Courier New">&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;.<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
If <TT>bet</TT> is greater than 0, the <TT>initialDeal()</TT>
method is invoked. This method is used to deal a new hand to the
player and to the dealer. It causes the <TT>playersHand</TT> and
<TT>dealersHand</TT> variables  to each be initialized with an
object of class <TT>Hand</TT>. The <TT>initialDeal()</TT> method
is invoked using the following code:
<P>
<BLOCKQUOTE>
<TT>initialDeal();</TT>
</BLOCKQUOTE>
<P>
Another <TT>if</TT> statement is then executed. This <TT>if</TT>
statement checks to see if the player was dealt blackjack (21
points). It does this by invoking the <TT>blackjack()</TT> method
for the object referenced by the <TT>playersHand</TT> variable.
In the case that the <TT>blackjack()</TT> method returns the boolean
value <TT>true</TT>, the player wins the bet, and the <TT>playerWins()</TT>
method is invoked. If the player was not fortunate enough to be
dealt a blackjack, the statements within the <TT>else</TT> part
of the <TT>if</TT> statement are executed, as shown in the following
code:
<BLOCKQUOTE>
<TT>if(playersHand.blackjack()) playerWins();<BR>
<FONT FACE="Courier New">else{<BR>
&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;.<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>else</TT> part begins with a <TT>while</TT> statement.
A <TT>while</TT> statement is similar to a <TT>do</TT> statement
in that it repeatedly executes the block of statements enclosed
by braces. It differs from the <TT>do</TT> statement in that it
checks to see if it is finished <I>before</I> executing the statement
block. The <TT>while</TT> statement checks to see if the player
has 21 or fewer points in his hand and whether he wants to take
a another card. It does this by invoking the <TT>under()</TT>
method for the object referenced by the <TT>playersHand</TT> variable,
passing it the integer <TT>22</TT> as an argument. If the <TT>under()</TT>
method returns the boolean value <TT>true</TT>, the <TT>playerTakesAHit()</TT>
method is invoked to prompt the player to hit or stay. If the
user elects to take a hit, <TT>playerTakesAHit()</TT> returns
a boolean <TT>true</TT>, and the statements enclosed by the <TT>while</TT>
statement are executed. If either <TT>under()</TT> or <TT>playerTakesAHit()</TT>
returns <TT>false</TT>, the next statement after the <TT>while</TT>
statement is executed.
<P>
The statements enclosed within the <TT>while</TT> statement invoke
methods for the <TT>Hand</TT> object referenced by the <TT>playersHand</TT>
variable. The first method causes a card to be added to the player's
hand by dealing it from the deck. The second method determines
if and how the player's hand should be displayed. The code that
performs this processing follows:
<BLOCKQUOTE>
<TT>while(playersHand.under(22) &amp;&amp; playerTakesAHit())
{<BR>
<FONT FACE="Courier New">&nbsp;playersHand.addCard(deck.deal());
<BR>
&nbsp;playersHand.show(false,false);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The previous <TT>while</TT> statement is followed by another <TT>while</TT>
statement. This <TT>while</TT> statement does not enclose a block
of statements within braces. It only applies to a single statement:
<BLOCKQUOTE>
<TT>while(dealersHand.mustHit())<BR>
<FONT FACE="Courier New">&nbsp;dealersHand.addCard(deck.deal());</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>while</TT> statement is used to play the dealer's hand.
It invokes the <TT>mustHit()</TT> method with the object referenced
by the <TT>dealersHand</TT> variable to determine whether the
dealer has fewer than 17 points in his hand and, therefore, must
take a hit. If the dealer must take a hit, the <TT>addCard()</TT>
method is invoked to deal a card to the dealer.
<P>
After the dealer's hand is played, the <TT>show()</TT> method
is invoked to display it to the console. The <TT>showResults()</TT>
method is then invoked to show the results of the hand. This concludes
the description of the <TT>play()</TT> method. It's a good idea
to review the source code of the <TT>play()</TT> method to make
sure that you know how it works before going on. The following
statements invoke the <TT>show()</TT> and <TT>showResults()</TT>
methods:
<BLOCKQUOTE>
<TT>dealersHand.show(true,false);<BR>
<FONT FACE="Courier New">showResults();</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>placeBet()</TT> method is invoked by the <TT>play()</TT>
method to prompt the player to enter a bet. It declares two potential
exceptions in its <TT>throw</TT> clause.
<P>
The <TT>placeBet()</TT> method uses a <TT>do</TT> statement to
repeatedly prompt the user to enter a bet that is at least 0 and
at most is the amount of money that he has left. The statement
block enclosed by the <TT>do</TT> statement displays the prompt,
reads the line entered by the user, converts it to an integer,
and then assigns it to the <TT>bet</TT> variable. The source code
of the <TT>placeBet()</TT> method follows:
<BLOCKQUOTE>
<TT>void placeBet() throws IOException, NumberFormatException
{<BR>
<FONT FACE="Courier New">&nbsp;do{<BR>
&nbsp;&nbsp;System.out.print(&quot;Enter bet: &quot;);<BR>
&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;bet = Integer.parseInt(keyboardInput.readLine());
<BR>
&nbsp;} while(bet&lt;0 || bet&gt;money);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>initialDeal()</TT> method is invoked by the <TT>play()</TT>
method to deal a new hand to the player and the dealer. It displays
the <TT>New hand&#133;</TT> text to the console window to inform
the player that a new hand is being dealt. It then creates two
new objects of class <TT>Hand</TT>, initializes them with the
<TT>Hand()</TT> constructor, and assigns them to the <TT>playersHand</TT>
and <TT>dealersHand</TT> variables. The source code of the <TT>initialDeal()</TT>
method follows:
<BLOCKQUOTE>
<TT>void initialDeal() {<BR>
<FONT FACE="Courier New">&nbsp;System.out.println(&quot;New hand...&quot;);
<BR>
&nbsp;playersHand = new Hand();<BR>
&nbsp;dealersHand = new Hand();<BR>
&nbsp;&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;&nbsp;.<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
After creating the two new hands, the <TT>initialDeal()</TT> method
executes a <TT>for</TT> statement. The <TT>for</TT> statement
iterates the execution of the block of statements enclosed by
braces, based on the conditions identified immediately before
the statement block. In this case a variable, <TT>i</TT>, of type
<TT>int</TT>, is created for the duration of the <TT>for</TT>
statement's execution and assigned a value of 0. The statement
block is then executed while <TT>i</TT> is less than 2. Each time
the statement block is executed, the value of <TT>i</TT> is incremented
by 1. The expression <TT>++i</TT> causes <TT>i</TT> to be incremented
by 1.
<P>
The <TT>for</TT> statement is used to sequentially deal two cards
to the player and two to the dealer by invoking the <TT>addCard()</TT>
method. Note that the value returned by the <TT>deal()</TT> method
is used as an argument to the <TT>addCard()</TT> method, in both
instances. The source code of the <TT>for </TT>statement follows:
<BLOCKQUOTE>
<TT>for(int i = 0;i&lt;2;++i) {<BR>
<FONT FACE="Courier New">&nbsp;playersHand.addCard(deck.deal());
<BR>
&nbsp;dealersHand.addCard(deck.deal());<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
After the player and dealer have been dealt their hands, the mysterious
<TT>show()</TT> method is invoked, as shown in the following code,
to display the new hands (you'll find out what the boolean values
are used for when you study the <TT>show()</TT> method):
<BLOCKQUOTE>
<TT>dealersHand.show(true,true);<BR>
<FONT FACE="Courier New">playersHand.show(false,false);</FONT></TT>
</BLOCKQUOTE>
<P>
The next three methods, <TT>playerWins()</TT>, <TT>dealerWins()</TT>,
and <TT>tie()</TT>, are used to update the <TT>money</TT> variable
based on the <TT>bet</TT> variable and the outcome of the hand:
<BLOCKQUOTE>
<TT>void playerWins() {<BR>
<FONT FACE="Courier New">&nbsp;money += bet;<BR>
&nbsp;System.out.println(&quot;Player wins $&quot;+Integer.toString(bet)+&quot;.&quot;);
<BR>
&nbsp;System.out.println(&quot;Player has $&quot;+Integer.toString(money)+&quot;.&quot;);
<BR>
}<BR>
<BR>
void dealerWins() {<BR>
&nbsp;money &#173;= bet;<BR>
&nbsp;System.out.println(&quot;Player loses $&quot;+Integer.toString(bet)+&quot;.&quot;);
<BR>
&nbsp;System.out.println(&quot;Player has $&quot;+Integer.toString(money)+&quot;.&quot;);
<BR>
}<BR>
<BR>
void tie() {<BR>
&nbsp;System.out.println(&quot;Tie.&quot;);<BR>
&nbsp;System.out.println(&quot;Player has $&quot;+Integer.toString(money)+&quot;.&quot;);
<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
These methods also display the results to the player by converting
the values of <TT>bet</TT> and <TT>money</TT> to <TT>String</TT>
objects. The <TT>+=</TT> operator causes the value of <TT>bet</TT>
to be added to the value of <TT>money</TT> and assigned to the
<TT>money</TT> variable. Similarly, the <TT>&#173;=</TT> operator
causes the value of <TT>bet</TT> to be subtracted from the value
of <TT>money</TT> before it is assigned to the <TT>money</TT>
variable.
<P>
The <TT>playerTakesAHit()</TT> method is an example of a method
that returns a result. The <TT>boolean</TT> keyword at the beginning
of the method declaration specifies that the method should return
a result of type <TT>boolean</TT>. Any valid primitive type, array
type, class type, or interface type can be used to specify the
return type of a method. For example, the return type could be
<TT>long</TT>, <TT>String</TT>, or an array of <TT>double</TT>
values.
<P>
The method begins by declaring a variable of type <TT>char</TT>
and assigning it a space character. It then executes an infinite
<TT>do</TT> statement. The statement is infinite because the <TT>while</TT>
condition at the end of the <TT>do</TT> statement is literally
always <TT>true</TT>. This doesn't mean that the statement will
execute forever, though. Return statements within the block of
the <TT>do</TT> statement will cause statement execution to return
to the method that invoked <TT>playerTakesAHit()</TT>.
<P>
The <TT>do</TT> block begins by displaying the <TT>Hit or Stay:</TT>
prompt to the player and reads the player's input from the keyboard.
A <TT>try</TT> statement is then executed. The <TT>try</TT> statement
executes a statement or block of statements and, if an exception
is thrown, uses a <TT>catch</TT> clause to process the exception.
This <TT>try</TT> statement sets the variable <TT>ch</TT> to the
first character of the <TT>playersDecision</TT> variable. The
<TT>playersDecision</TT> variable references a <TT>String</TT>
object that is created when the player's input is read from the
keyboard. The <TT>charAt()</TT> method is defined in the <TT>String</TT>
class of the Java API. If the player enters a blank line, the
<TT>StringIndexOutOfBoundsException</TT> will be thrown. The <TT>catch</TT>
clause is used to prevent the exception from terminating program
execution.
<P>
If the character assigned to <TT>ch</TT>, via <TT>playersDecision</TT>,
is <TT>H</TT> or <TT>h</TT>, the value of <TT>true</TT> is returned
as the result of the <TT>playerTakesAHit()</TT> method. If <TT>ch</TT>
equals <TT>S</TT> or <TT>s</TT>, <TT>false</TT> is returned. Otherwise,
the <TT>do</TT> statement causes the player to be repeatedly prompted
until he hits or stays. The <TT>playerTakesAHit()</TT> method
follows:
<BLOCKQUOTE>
<TT>boolean playerTakesAHit() throws IOException {<BR>
<FONT FACE="Courier New">&nbsp;char ch = ' ';<BR>
&nbsp;do{<BR>
&nbsp;&nbsp;System.out.print(&quot;Hit or Stay: &quot;);<BR>
&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;String playersDecision = keyboardInput.readLine();
<BR>
&nbsp;&nbsp;try ch = playersDecision.charAt(0);<BR>
&nbsp;&nbsp;catch (StringIndexOutOfBoundsException exception)
;<BR>
&nbsp;&nbsp;if(ch == 'H' || ch == 'h') return true;<BR>
&nbsp;&nbsp;if(ch == 'S' || ch == 's') return false;<BR>
&nbsp;} while(true);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>showResults()</TT> method is the last method declared
for the <TT>BlackJackGame</TT> class. This method illustrates
the use of nested <TT>if</TT> statements. The first <TT>if</TT>
statement checks to see if the player's hand and the dealer's
hand are both busted (over 21 points). If so, the <TT>tie()</TT>
method is invoked to display the results to the player. If not,
the statement following the <TT>else</TT> is executed. This turns
out to be another <TT>if</TT> statement.
<P>
The second <TT>if</TT> statement checks to see if the player's
hand is busted. Because the <TT>else</TT> part of the first <TT>if</TT>
statement was executed, it is impossible for both the player and
the dealer to be busted. So, if the player is busted, the dealer
wins.
<P>
The third <TT>if</TT> statement is executed in the <TT>else</TT>
parts of the first and second <TT>if</TT> statements. It uses
the same logic as the second <TT>if</TT> statement to determine
whether the dealer busted and the player wins.
<P>
The fourth <TT>if</TT> statement is only executed if neither the
player nor the dealer busted. It checks the points in both of
their hands to see if the player is higher than the dealer and,
therefore, is the victor.
<P>
The fifth <TT>if</TT> statement is only executed if neither busts
and the player is not higher than the dealer. If the dealer is
higher than the player, the dealer wins. If the dealer is not
higher than the player, the final <TT>else</TT> part is executed.
At this point, neither has busted, but neither is higher than
the other, so both must have the same number of points and a tie
is declared. The <TT>showResults()</TT> method follows:
<BLOCKQUOTE>
<TT>void showResults() {<BR>
<FONT FACE="Courier New">&nbsp;if(playersHand.busted() &amp;&amp;
dealersHand.busted()) tie();<BR>
&nbsp;else if(playersHand.busted()) dealerWins();<BR>
&nbsp;else if(dealersHand.busted()) playerWins();<BR>
&nbsp;else if(playersHand.bestScore() &gt; dealersHand.bestScore())
playerWins();<BR>
&nbsp;else if(playersHand.bestScore() &lt; dealersHand.bestScore())
dealerWins();<BR>
&nbsp;else tie();<BR>
}</FONT></TT>
</BLOCKQUOTE>
<H4><B>The </B><TT><B><FONT FACE="Courier New">Deck</FONT></B></TT><B>
Class</B></H4>
<P>
The third class declared within <TT>BlackJackApp.java</TT> is
the <TT>Deck</TT> class. It is used to simulate a deck of cards.
<P>
The <TT>Deck</TT> class declares three variables and four methods.
The <TT>cards[]</TT> variable is an example of an <I>array</I>.
Arrays are objects that contain a number of variables of the same
type. The variables contained in an array are referred to as the
<I>component variables</I> of the array and are referenced using
the integer indices 0,&#133;,<I>n</I>-1, where <I>n</I> is the
number of components contained within the array. The <TT>cards[]</TT>
array is declared to contain components of type <TT>int</TT>.
The brackets (<TT>[]</TT>) indicate the declaration of an array.
The <TT>topCard</TT> variable is an integer that identifies the
next card to be dealt from the deck. The <TT>random</TT> variable
is used to generate random numbers. It references objects that
are of class <TT>java.util.Random</TT>, a class defined within
the Java API. The variable declarations of the <TT>Deck</TT> class
follow:
<BLOCKQUOTE>
<TT>class Deck {<BR>
<FONT FACE="Courier New">&nbsp;// Variable declarations<BR>
&nbsp;int cards[];     // Array of 52 cards<BR>
&nbsp;int topCard;     // 0&#173;51 (index of card in deck)<BR>
&nbsp;Random random;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;.<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The constructor for the <TT>Deck</TT> class allocates an array
of 52 integers and assigns it to <TT>cards[]</TT>. The <TT>cards[]</TT>
array simulates the 52 cards found in a normal deck of playing
cards.
<P>
A <TT>for</TT> statement is used to assign 0 to <TT>cards[0]</TT>,
1 to <TT>cards[1]</TT>, 2 to <TT>cards[2]</TT>, and so on, until
51 is assigned to <TT>cards[51]</TT>. This creates a deck of cards
in which all the cards are ordered by suit and by value. The integers
0 through 51 are logically mapped to playing cards, as follows:
<BLOCKQUOTE>
0 through 12 are mapped to the ace of spades through the king
of spades
</BLOCKQUOTE>
<BLOCKQUOTE>
13 through 25 are mapped to the ace of hearts through the king
of hearts
</BLOCKQUOTE>
<BLOCKQUOTE>
26 through 38 are mapped to the ace of clubs through the king
of clubs
</BLOCKQUOTE>
<BLOCKQUOTE>
39 through 51 are mapped to the ace of diamonds through the king
of diamonds
</BLOCKQUOTE>
<P>
The <TT>topCard</TT> of the deck is set to 0. It is used as an
index into the <TT>cards[]</TT> array. The <TT>random</TT> variable
is assigned a new object of class <TT>Random</TT>. Finally, the
<TT>shuffle()</TT> method is invoked to shuffle the new deck of
cards. The constructor of the <TT>Deck</TT> class follows:
<BLOCKQUOTE>
<TT>// Method declarations<BR>
<FONT FACE="Courier New">public Deck() { // Constructor<BR>
&nbsp;cards = new int[52];<BR>
&nbsp;for(int i = 0;i&lt;52;++i) cards[i] = i;<BR>
&nbsp;topCard = 0;<BR>
&nbsp;random = new Random();<BR>
&nbsp;shuffle();<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>shuffle()</TT> method shuffles the deck of cards by randomly
switching two cards in the deck 52 times. It does this by invoking
the <TT>randomCard()</TT> method to generate a random integer
between 0 and 51. These random integers are used to randomly select
components of cards and exchange their values. The <TT>shuffle()</TT>
method follows:
<BLOCKQUOTE>
<TT>public void shuffle() {<BR>
<FONT FACE="Courier New">&nbsp;// Repeat 52 times<BR>
&nbsp;for(int i = 0;i&lt;52;++i) {<BR>
&nbsp;&nbsp;// Randomly exchange two cards in the deck.<BR>
&nbsp;&nbsp;int j = randomCard();<BR>
&nbsp;&nbsp;int k = randomCard();<BR>
&nbsp;&nbsp;int temp = cards[j];<BR>
&nbsp;&nbsp;cards[j] = cards[k];<BR>
&nbsp;&nbsp;cards[k] = temp;<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>randomCard()</TT> method returns an integer between 0
and 51 inclusive. It identifies the <TT>int</TT> return value
in its method declaration. It begins by declaring a variable <TT>r</TT>
and assigning it a random integer value generated by applying
the <TT>nextInt()</TT> method to the <TT>random</TT> variable.
The <TT>nextInt()</TT> method is defined in the <TT>java.util.Random</TT>
class. If the value assigned to <TT>r</TT> is less than 0, it
is changed in sign to a positive integer. The <TT>randomCard()</TT>
method then returns an integer between 0 and 51 by returning the
random integer modulus 52. The <TT>randomCard()</TT> method follows:
<BLOCKQUOTE>
<TT>int randomCard() {<BR>
<FONT FACE="Courier New">&nbsp;int r = random.nextInt();<BR>
&nbsp;if(r&lt;0) r = 0&#173;r;<BR>
&nbsp;return r%52;<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>deal()</TT> method is used to deal a card off the top
of the deck. It does this by using the <TT>topCard</TT> variable
as an index into the <TT>cards[]</TT> array. It starts at 0 and
is incremented until it is greater than 51, indicating that all
the cards in the deck have been dealt. In this case, the deck
is reshuffled, and <TT>topCard</TT> is set to <TT>0</TT> once
again. This creates the effect of another deck being used because
the player and dealer are not required to throw back any cards
that are currently in their hands before the deck is shuffled.
<P>
The <TT>Card</TT> class is used to translate the integer card
values to <TT>String</TT> values that can be displayed on the
console. A card is dealt by constructing a new instance of <TT>Card</TT>
using the value of <TT>cards[]</TT> indexed by <TT>topCard</TT>
as an argument. <TT>topCard</TT> is then incremented to move to
the next card in the deck. Note that <TT>deal()</TT> returns the
object of class <TT>Card</TT> that was created using the <TT>Card()</TT>
constructor. The <TT>deal()</TT> method follows:
<BLOCKQUOTE>
<TT>Card deal() {<BR>
<FONT FACE="Courier New">&nbsp;if(topCard&gt;51) {<BR>
&nbsp;&nbsp;shuffle();<BR>
&nbsp;&nbsp;topCard = 0;<BR>
&nbsp;}<BR>
&nbsp;Card card = new Card(cards[topCard]);<BR>
&nbsp;++topCard;<BR>
&nbsp;return card;<BR>
}</FONT></TT>
</BLOCKQUOTE>
<H4><B>The </B><TT><B><FONT FACE="Courier New">Hand</FONT></B></TT><B>
Class</B></H4>
<P>
The <TT>Hand</TT> class is used to implement a hand of cards as
played by both the player and the dealer. It declares three variables
and eight methods.
<P>
The <TT>numCards</TT> variable identifies the number of cards
contained in the hand. The <TT>cards[]</TT> array has the same
name as the <TT>cards[]</TT> array declared in the <TT>Deck</TT>
class, but it is logically and physically distinct. Because it
is declared in a separate class, it is contained in objects that
are instances of the <TT>Hand</TT> class and not of the <TT>Deck</TT>
class. The <TT>MaxCards</TT> variable is declared to be <TT>static</TT>.
This means that it is used with the class, as a whole, and not
with individual objects that are instances of the class. You'll
learn more about class and instance variables in <A HREF="ch5.htm" >Chapter 5</A>.
<TT>MaxCards</TT> is used to identify the number of components
to be allocated within <TT>cards[]</TT>. The <TT>Hand</TT> class
is structured as follows:
<BLOCKQUOTE>
<TT>class Hand {<BR>
<FONT FACE="Courier New">&nbsp;// Variable declarations<BR>
&nbsp;int numCards;<BR>
&nbsp;Card cards[];<BR>
&nbsp;static int MaxCards = 12;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;.<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The constructor for the <TT>Hand</TT> class sets <TT>numCards</TT>
to <TT>0</TT>, to indicate an empty hand, and then creates a <TT>MaxCards</TT>
size array of <TT>Card</TT> objects and assigns it to <TT>cards</TT>.
The constructor for the <TT>Hand</TT> class follows:
<BLOCKQUOTE>
<TT>//Method declarations<BR>
<FONT FACE="Courier New">public Hand() { // Constructor<BR>
&nbsp;numCards = 0;<BR>
&nbsp;cards = new Card[MaxCards];<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
Cards are added to a hand using the <TT>addCard()</TT> method.
This method takes an object of class <TT>Card</TT> as an argument
and adds it to the first available position within the <TT>cards[]</TT>
array. It then increments <TT>numCards</TT> so that it will index
the next available position within <TT>cards[]</TT>. The <TT>addCard()</TT>
method follows:
<BLOCKQUOTE>
<TT>void addCard(Card c) {<BR>
<FONT FACE="Courier New">&nbsp;&nbsp;cards[numCards] = c;<BR>
&nbsp;&nbsp;++numCards;<BR>
&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>show()</TT> method displays either the dealer's or the
player's hand. It takes two boolean arguments that specify whether
the hand belongs to the dealer, and if so, whether the first card
should be hidden when the hand is displayed. The <TT>isDealer</TT>
parameter is used in the initial <TT>if</TT> statement to determine
whether a dealer or a player heading should be displayed. A <TT>for</TT>
statement is then used to iterate <TT>numCards</TT> times in order
to display each card of the hand. The statement block enclosed
by the <TT>for</TT> statement uses the <TT>hideFirstCard</TT>
parameter to determine whether the first card should be hidden
or displayed. The <TT>show()</TT> method follows:
<BLOCKQUOTE>
<TT>void show(boolean isDealer,boolean hideFirstCard) {<BR>
<FONT FACE="Courier New">&nbsp;&nbsp;if(isDealer) System.out.println(&quot;Dealer:&quot;);
<BR>
&nbsp;&nbsp;else System.out.println(&quot;Player:&quot;);<BR>
&nbsp;&nbsp;for(int i = 0;i&lt;numCards;++i) {<BR>
&nbsp;&nbsp;&nbsp;if(i == 0 &amp;&amp; hideFirstCard) System.out.println(&quot;
 Hidden&quot;);<BR>
&nbsp;&nbsp;&nbsp;else System.out.println(&quot;  &quot;+cards[i].value+&quot;
of &quot;+cards[i].suit);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>blackjack()</TT> method returns a boolean value indicating
whether the hand is blackjack. It uses an <TT>if</TT> statement
to make sure that there are only two cards in the hand. If there
are not two cards, <TT>false</TT> is returned to indicate that
the hand is not blackjack. If the number of cards is exactly two,
it uses the <TT>iValue</TT> variable of the <TT>Card</TT> objects
contained in the <TT>cards[]</TT> array to determine whether the
current hand is blackjack. The <TT>iValue</TT> variable is discussed
with the <TT>Card</TT> class. It identifies the number of points
associated with a card. A card with <TT>iValue = 1</TT> is an
ace. Aces can be either 1 or 11 points. The <TT>blackjack()</TT>
method follows:
<BLOCKQUOTE>
<TT>boolean blackjack() {<BR>
<FONT FACE="Courier New">&nbsp;if(numCards == 2) {<BR>
&nbsp;&nbsp;if(cards[0].iValue == 1 &amp;&amp; cards[1].iValue
== 10) return true;<BR>
&nbsp;&nbsp;if(cards[1].iValue == 1 &amp;&amp; cards[0].iValue
== 10) return true;<BR>
&nbsp;}<BR>
&nbsp;return false;<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>under()</TT> method returns a boolean value indicating
whether the number of points in a hand is less than the argument
passed via the <TT>n</TT> parameter. It declares a <TT>points</TT>
variable of type <TT>int</TT> and uses a <TT>for</TT> statement
to sum the points for all cards in the hand. It then checks to
see if the number of points in the hand is less than <TT>n</TT>
and returns an appropriate value of <TT>true</TT> or <TT>false</TT>.
The <TT>under()</TT> method follows:
<BLOCKQUOTE>
<TT>boolean under(int n) {<BR>
<FONT FACE="Courier New">&nbsp;int points = 0;<BR>
&nbsp;for(int i = 0;i&lt;numCards;++i) points += cards[i].iValue;
<BR>
&nbsp;if(points&lt;n) return true;<BR>
&nbsp;else return false;<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>bestScore()</TT> method returns an integer value identifying
the best possible point score for the hand. It adjusts the value
associated with aces to either 1 or 11, depending on whether it
causes the hand to go over 21 points. It uses a variable, <TT>haveAce</TT>,
of type <TT>boolean</TT>, to identify whether the hand contains
an ace. It uses a <TT>for</TT> statement to calculate the minimum
number of points in the hand and to determine whether any aces
are present. If an ace is found, it determines whether it is better
to use the 11- or 1-point value of the ace. The <TT>bestScore()</TT>
method follows:
<BLOCKQUOTE>
<TT>int bestScore() {<BR>
<FONT FACE="Courier New">&nbsp;int points = 0;<BR>
&nbsp;boolean haveAce = false;<BR>
&nbsp;for(int i = 0;i&lt;numCards;++i) {<BR>
&nbsp;&nbsp;points += cards[i].iValue;<BR>
&nbsp;&nbsp;if(cards[i].iValue == 1) haveAce = true;<BR>
&nbsp;}<BR>
&nbsp;if(haveAce) {<BR>
&nbsp;&nbsp;if(points+10 &lt; 22) points += 10;<BR>
&nbsp;}<BR>
&nbsp;return points;<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>mustHit()</TT> method is used to play out the dealer's
hand. If the <TT>bestScore</TT> of the dealer's hand is lower
than 17, the dealer must take a hit. If it is 17 or higher, the
dealer must stay. The <TT>mustHit()</TT> method follows:
<BLOCKQUOTE>
<TT>boolean mustHit() {<BR>
<FONT FACE="Courier New">&nbsp;if(bestScore()&lt;17) return true;
<BR>
&nbsp;else return false;<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>busted()</TT> method uses an <TT>if</TT> statement to
determine whether the number of points in a hand is under 22.
If it is not under, the hand is busted, and <TT>true</TT> is returned.
Otherwise, <TT>false</TT> is returned. The <TT>busted()</TT> method
follows:
<BLOCKQUOTE>
<TT>boolean busted() {<BR>
<FONT FACE="Courier New">&nbsp;&nbsp;if(!under(22)) return true;
<BR>
&nbsp;&nbsp;else return false;<BR>
&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<H4><B>The </B><TT><B><FONT FACE="Courier New">Card</FONT></B></TT><B>
Class</B></H4>
<P>
The <TT>Card</TT> class is used to translate the integer value
of cards, maintained by objects of the <TT>Deck</TT> class, into
objects of type <TT>String</TT>. It declares three variables and
two methods.
<P>
The <TT>iValue</TT> variable is used to keep track of the number
of points associated with a card. It is an abbreviation for &quot;integer
value&quot; and is used to differentiate it from the <TT>value</TT>
variable. The <TT>value</TT> variable references a text string
that is used to describe the face value of a playing card. The
<TT>suit</TT> variable is used to identify the suit of a playing
card. The variables declared for the <TT>Card</TT> class are shown:
<BLOCKQUOTE>
<TT>class Card {<BR>
<FONT FACE="Courier New">&nbsp;// Variable declarations<BR>
&nbsp;int iValue;   // Numeric value corresponding to card.<BR>
&nbsp;String value; // &quot;A&quot; &quot;2&quot; through &quot;9&quot;
&quot;T&quot; &quot;J&quot; &quot;Q&quot; &quot;K&quot;<BR>
&nbsp;String suit; // &quot;S&quot; &quot;H&quot; &quot;C&quot;
&quot;D&quot;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;.<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>Card()</TT> constructor is the heart of the <TT>Card</TT>
class and is an example of a constructor that takes an argument.
It expects a value of 0 through 51 of a card value from the <TT>Deck</TT>
class. The <TT>Card</TT> class constructor follows:
<BLOCKQUOTE>
<TT>// Method declarations<BR>
<FONT FACE="Courier New">&nbsp;public Card(int n) { // Constructor
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;.<BR>
&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
<TT>Card()</TT> first determines the suit of the card identified
by the <TT>n</TT> parameter. It does this by dividing <TT>n</TT>
by 13 and assigning the result to an integer variable named <TT>iSuit</TT>.
It determines the point value of the card by calculating <TT>n</TT>
modulus 13 and adding 1. It adjusts this value later in the method.
This is shown in the following code:
<BLOCKQUOTE>
<TT>int iSuit = n/13;<BR>
<FONT FACE="Courier New">&nbsp;&nbsp;iValue = n%13+1;</FONT></TT>
</BLOCKQUOTE>
<P>
<TT>Card()</TT> then uses a <TT>switch</TT> statement to assign
the correct text string to the <TT>suit</TT> variable. The <TT>switch</TT>
statement takes the <TT>iSuit</TT> variable and compares it to
the values identified in each of the <TT>case</TT> labels. If
a <TT>case</TT> label matches the value of <TT>iSuit</TT>, control
of execution is passed to the statement after the <TT>case</TT>
label. These statements consist of assignment statements that
set <TT>suit</TT> to the correct text string. The <TT>default</TT>
label is used if no other label matches <TT>iSuit</TT>. The <TT>break</TT>
statement is used to &quot;jump out&quot; of the execution of
the <TT>switch</TT> statement to the statement immediately following
the <TT>switch</TT> statement. It is also used with other statements,
such as the <TT>for</TT>, <TT>while</TT>, and <TT>do</TT> statements.
The <TT>switch</TT> statement follows:
<BLOCKQUOTE>
<TT>switch(iSuit) {<BR>
<FONT FACE="Courier New">&nbsp;&nbsp;&nbsp;case 0:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;suit = &quot;Spades&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;case 1:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;suit = &quot;Hearts&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;case 2:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;suit = &quot;Clubs&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;default:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;suit = &quot;Diamonds&quot;;<BR>
&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
The statements following the <TT>switch</TT> statement show how
a <TT>switch</TT> statement can be coded using a series of nested
<TT>if</TT> statements:
<BLOCKQUOTE>
<TT>if(iValue == 1) value = &quot;Ace&quot;;<BR>
<FONT FACE="Courier New">else if(iValue == 10) value = &quot;Ten&quot;;
<BR>
else if(iValue == 11) value = &quot;Jack&quot;;<BR>
else if(iValue == 12) value = &quot;Queen&quot;;<BR>
else if(iValue == 13) value = &quot;King&quot;;<BR>
else value = Integer.toString(iValue);<BR>
if(iValue&gt;10) iValue = 10;</FONT></TT>
</BLOCKQUOTE>
<P>
These statements are equivalent to the following <TT>switch</TT>
statement:
<BLOCKQUOTE>
<TT>value=Integer.toString(iValue);<BR>
<FONT FACE="Courier New">switch(iValue) {<BR>
case 1:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;value = &quot;Ace&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
case 10:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;value = &quot;Ten&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
case 11:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;value = &quot;Jack&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;iValue = 10;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
case 12:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;value = &quot;Queen&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;iValue = 10;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
case 13:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;value = &quot;King&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;iValue = 10;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
Finally, the <TT>getValue()</TT> method is used to return the
value of <TT>iValue</TT>, the point value of the card. It is fairly
simple, as far as methods go, but it shows how the values of an
object's variables can be made available without having to provide
access to the variable itself. The <TT>getValue()</TT> method
follows:
<BLOCKQUOTE>
<TT>int getValue() {<BR>
<FONT FACE="Courier New">&nbsp;&nbsp;return iValue;<BR>
&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<H3><A NAME="Arrays"><B>Arrays</B></A></H3>
<P>
<I>Arrays</I> are objects that contain a number of variables of
the same type. These component variables are referenced using
the integer indices 0,&#133;,<I>n</I>-1, where <I>n</I> is the
length of the array. The type of the array is identified by appending
<TT>[]</TT> to the type of its components. For example, <TT>int[]</TT>
identifies an array of type <TT>int</TT>, <TT>Object[]</TT> identifies
an array of type <TT>Object</TT>, and <TT>char[][]</TT> identifies
an array of an array of type <TT>char</TT>.<BR>
<P>

<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=588>
<BLOCKQUOTE>
Java only supports single-dimensional arrays. Multidimensional-array capabilities can be achieved by using arrays of arrays. </BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Arrays are declared by declaring a variable to be of an array
type. For example, the following declares <TT>nums</TT> to be
an array of type <TT>int</TT>:
<BLOCKQUOTE>
<TT>int[] nums;</TT>
</BLOCKQUOTE>
<P>
The declaration can also be written as follows:
<BLOCKQUOTE>
<TT>int nums[];</TT>
</BLOCKQUOTE>
<P>
You can place the brackets after either the type or the variable
name.
<H4><B>Array Allocation</B></H4>
<P>
When a variable of an array type is declared, the size of the
array is not identified, and the array object is not allocated.
To allocate storage for an array, you can use the <TT>new</TT>
operator to create an array object of a specific size. For example,
the following statement:
<BLOCKQUOTE>
<TT>char ch[] = new char[24];</TT>
</BLOCKQUOTE>
<P>
creates a <TT>char</TT> array of length 24, the individual component
variables of which can be referenced by <TT>ch[0]</TT>, <TT>ch[2]</TT>,
&#133;, <TT>ch[23]</TT>. The following statement creates an array
of type <TT>Dice[]</TT> of length 6:
<BLOCKQUOTE>
<TT>Dice[] d = new Dice[6];</TT>
</BLOCKQUOTE>
<P>
Arrays can also be allocated by specifying their initial values.
For example, the following allocates a <TT>String</TT> array of
length 7 that contains abbreviations for the days of the week:
<BLOCKQUOTE>
<TT>String days[] = {&quot;sun&quot;, &quot;mon&quot;, &quot;tue&quot;,
&quot;wed&quot;, &quot;thu&quot;, &quot;fri&quot;, &quot;sat&quot;};</TT>
</BLOCKQUOTE>
<P>
The length of an array can always be found by appending <TT>.length</TT>
to the name of the array. For example, <TT>days.length</TT> returns
the integer <TT>7</TT> as the length of <TT>days[]</TT>.
<H3><A NAME="Statements"><B>Statements</B></A></H3>
<P>
The <TT>BlackJackApp</TT> example introduces a number of Java
statements. These statements implement the bodies of the various
methods used in the example. The following subsections describe
the types of statements that are used in the <TT>BlackJackApp</TT>
example. A complete description of Java statements is provided
in <A HREF="ch11.htm" >Chapter 11</A>. When you read through the
following sections and learn about a particular statement, go
back through the <TT>BlackJackApp</TT> program and see how many
examples of the statement you can find. This will help you to
associate the statement's syntax with the different contexts in
which it can be used and elevate your understanding from the syntactic
to the semantic level.<BR>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=547>
<BLOCKQUOTE>
Java statements, like C and C++ statements, are separated by semicolons.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H4><B>Statement Blocks</B></H4>
<P>
Java statements are organized into statement <I>blocks</I>. Blocks
begin with an opening brace (<TT>{</TT>) and end with a closing
brace (<TT>}</TT>). They are used to indicate a group of statements
and variable declarations that are to be considered as a single
syntactical unit. Blocks are used to define the scope of execution
of statements in which they are enclosed. For example, the body
of a method can be considered to be a single block. Blocks are
used in other statements, such as the <TT>if</TT> and <TT>do</TT>
statements, to identify groups of statements that are to be executed
as if they were a single statement.<BR>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=565>
<BLOCKQUOTE>
Statement blocks can be considered to be syntactically equivalent to a single statement.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
An example of a statement block is taken from the <TT>BlackJackGame()</TT>
constructor:
<BLOCKQUOTE>
<TT>bet = 0;<BR>
<FONT FACE="Courier New">money = 1000;<BR>
deck = new Deck();<BR>
keyboardInput = new DataInputStream(System.in);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<H4><B>The </B><TT><B><FONT FACE="Courier New">if</FONT></B></TT><B>
Statement</B></H4>
<P>
The <TT>if</TT> statement is used to decide whether a particular
statement should be executed. Its syntax is as follows:
<BLOCKQUOTE>
<TT>if ( <I><FONT FACE="Courier New">BooleanExpression</FONT></I>
) <I><FONT FACE="Courier New">Statement1<BR>
</FONT></I>else <I><FONT FACE="Courier New">Statement2</FONT></I></TT>
</BLOCKQUOTE>
<P>
The <TT>else</TT> part of the statement is optional. If the boolean
expression, referred to as the <TT><I><FONT FACE="Courier New">if</FONT></I></TT><I>
condition</I>, evaluates to <TT>true</TT>, <TT><I><FONT FACE="Courier New">Statement1</FONT></I></TT>
is executed; otherwise, <TT><I><FONT FACE="Courier New">Statement2</FONT></I></TT>
is executed. Program execution then continues with the next statement
following the <TT>if</TT> statement. If the <TT>else</TT> part
is omitted, execution proceeds immediately to the next statement
when the <TT>if</TT> condition is false. Either <TT><I><FONT FACE="Courier New">Statement1</FONT></I></TT>
or <TT><I><FONT FACE="Courier New">Statement2</FONT></I></TT>
can be a statement block.
<P>
An example of an <TT>if</TT> statement is taken from the <TT>show()</TT>
method of the <TT>Hand</TT> class:
<BLOCKQUOTE>
<TT>if(isDealer) System.out.println(&quot;Dealer:&quot;);<BR>
<FONT FACE="Courier New">else System.out.println(&quot;Player:&quot;);</FONT></TT>
</BLOCKQUOTE>
<P>
If the value of <TT>isDealer</TT> is <TT>true</TT>, the text <TT>Dealer:</TT>
is displayed; otherwise, the text <TT>Player:</TT> is displayed.
<H4><B>The </B><TT><B><FONT FACE="Courier New">switch</FONT></B></TT><B>
Statement</B></H4>
<P>
The <TT>switch</TT> statement is like a sequence of embedded <TT>if</TT>
statements. It is used to transfer control to the first labeled
statement within a block of statements that matches the value
of the expression in the <TT>switch</TT> expression. The syntax
of the <TT>switch</TT> statement is
<BLOCKQUOTE>
<TT>switch ( SwitchExpression ) StatementBlock;</TT>
</BLOCKQUOTE>
<P>
where statements within the statement block are labeled by preceding
them with prefixes of the form
<BLOCKQUOTE>
<TT>case ConstantExpression : </TT>
</BLOCKQUOTE>
<P>
or
<BLOCKQUOTE>
<TT>default :</TT>
</BLOCKQUOTE>
<P>
The <TT>switch</TT> expression must evaluate to a value of type
<TT>char</TT>, <TT>byte</TT>, <TT>short</TT>, or <TT>int</TT>.
The same is true of the constant expressions in the <TT>case</TT>
labels. The <TT>switch</TT> statement evaluates the <TT>switch</TT>
expression and transfers program execution to the first labeled
statement whose constant expression has the same value as the
<TT>switch</TT> expression. If no case-labeled expression matches
the <TT>switch</TT> expression, control is transferred to the
first statement with a <TT>default</TT> label. Otherwise, control
is transferred to the next statement following the <TT>switch</TT>
statement.
<P>
An example of a <TT>switch</TT> statement is taken from the <TT>Card()</TT>
constructor:
<BLOCKQUOTE>
<TT>switch(iSuit) {<BR>
<FONT FACE="Courier New">&nbsp;case 0:<BR>
&nbsp;&nbsp;suit = &quot;Spades&quot;;<BR>
&nbsp;&nbsp;break;<BR>
&nbsp;case 1:<BR>
&nbsp;&nbsp;suit = &quot;Hearts&quot;;<BR>
&nbsp;&nbsp;break;<BR>
&nbsp;case 2:<BR>
&nbsp;&nbsp;suit = &quot;Clubs&quot;;<BR>
&nbsp;&nbsp;break;<BR>
&nbsp;default:<BR>
&nbsp;&nbsp;suit = &quot;Diamonds&quot;;<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The value of <TT>iSuit</TT> is compared to the values 0, 1, and
2 of the <TT>case</TT> labels. If it matches any of these values,
program execution is transferred to the labeled statement. Otherwise,
program execution is transferred to the statement labeled as <TT>default</TT>.
The <TT>break</TT> statements are used to transfer control to
the first statement following the <TT>switch</TT> statement, as
you'll learn in the following section.
<H4><B>The </B><TT><B><FONT FACE="Courier New">break</FONT></B></TT><B>
Statement</B></H4>
<P>
The <TT>break</TT> statement is used to terminate execution of
a statement block and transfer control to the first statement
following the statement in which the block is enclosed. The syntax
of the <TT>break</TT> statement is
<BLOCKQUOTE>
<TT>break;</TT>
</BLOCKQUOTE>
<P>
or
<BLOCKQUOTE>
<TT>break <I><FONT FACE="Courier New">label</FONT></I>;</TT>
</BLOCKQUOTE>
<P>
where <TT><I><FONT FACE="Courier New">label</FONT></I></TT> is
an optional label that can be attached to the statement enclosing
the statement block. Refer to <A HREF="ch11.htm" >Chapter 11</A>
for a discussion of the use of labels with the <TT>break</TT>
statement.
<P>
The <TT>break</TT> statement is used with the <TT>case</TT>, <TT>do</TT>,
<TT>while</TT>, and <TT>for</TT> statements to exit the enclosed
statement block and transfer control to the first statement following
the enclosing statement.
<P>
The sample <TT>switch</TT> statement, shown in the previous section,
contains several <TT>break</TT> statements that cause program
execution to be transferred to the first statement following the
<TT>switch </TT>statement.
<H4><B>The </B><TT><B><FONT FACE="Courier New">for</FONT></B></TT><B>
Statement</B></H4>
<P>
The <TT>for</TT> statement is used to iterate the execution of
a statement or statement block. Its syntax is as follows:
<BLOCKQUOTE>
<TT>for (InitializationClause ForExpression; IncrementClause)
EnclosedStatement</TT>
</BLOCKQUOTE>
<P>
<TT><I><FONT FACE="Courier New">InitializationClause</FONT></I></TT>
consists of a statement that is executed once at the beginning
of the <TT>for</TT> statement. The <TT>for</TT> expression is
then checked. If it is <TT>false</TT>, the <TT>for</TT> statement
ends, and program execution continues with the next statement
following the <TT>for</TT> statement. If the <TT>for</TT> expression
is <TT>true</TT>, the enclosed statement is executed. The enclosed
statement can be a statement block.
<P>
When the execution of the enclosed statement is completed, the
statement contained in the increment clause is executed. The <TT>for</TT>
expression is then reevaluated to determine whether the enclosed
statement should be executed again. The enclosed statement, increment
statement, and evaluation of the <TT>for</TT> expression repeat
their execution until the <TT>for</TT> expression evaluates to
<TT>false</TT>, at which point execution of the <TT>for</TT> statement
is complete and program execution continues with the statement
following the <TT>for</TT> statement.<BR>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=451>
<BLOCKQUOTE>
The increment clause does not end with a semicolon (<TT><FONT SIZE=1>;</FONT></TT>).
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
A sample <TT>for</TT> statement is taken from the <TT>under()</TT>
method of the <TT>Hand</TT> class:
<BLOCKQUOTE>
<TT>for(int i = 0;i&lt;numCards;++i) points += cards[i].iValue;</TT>
</BLOCKQUOTE>
<P>
This statement begins by setting the variable <TT>i</TT> to <TT>0</TT>.
It then checks to see if <TT>i</TT> is less than <TT>numCards</TT>.
If it is not, the <TT>for</TT> statement terminates. If <TT>i</TT>
is less than <TT>numCards</TT>, the statement
<BLOCKQUOTE>
<TT>points += cards[i].iValue;</TT>
</BLOCKQUOTE>
<P>
is executed. This statement is used to add the <TT>iValue</TT>
variable of the <TT>i</TT>th <TT>card[]</TT> array element to
the <TT>points</TT> variable. When execution of this statement
is completed, the <TT>++i</TT> statement is executed to increment
<TT>i</TT> by 1. The <TT>for</TT> expression, <TT>i&lt;numCards</TT>,
is reevaluated, and the <TT>for</TT> statement's execution continues.
<BR>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=499>
<BLOCKQUOTE>
The operators used by Java are very similar to those of C and C++.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H4><B>The </B><TT><B><FONT FACE="Courier New">do</FONT></B></TT><B>
Statement</B></H4>
<P>
The <TT>do</TT> statement is used to repeatedly execute a statement
until a specified condition becomes <TT>false</TT>. The syntax
of the <TT>do</TT> statement is
<P>
<TT>do <I><FONT FACE="Courier New">EnclosedStatement</FONT></I>
while (<I><FONT FACE="Courier New">BooleanExpression</FONT></I>)
;</TT>
<P>
The <TT>do</TT> statement repeatedly executes the enclosed statement
until the boolean expression becomes <TT>false</TT>. The enclosed
statement will be executed at least once because the boolean expression
is evaluated after its execution. The enclosed statement can be
a statement block.
<P>
An example of a <TT>do</TT> statement is taken from the <TT>placeBet()</TT>
method of the <TT>BlackJackGame</TT> class:
<BLOCKQUOTE>
<TT>do{<BR>
<FONT FACE="Courier New">&nbsp;System.out.print(&quot;Enter bet:
&quot;);<BR>
&nbsp;System.out.flush();<BR>
&nbsp;bet = Integer.parseInt(keyboardInput.readLine());<BR>
} while(bet&lt;0 || bet&gt;money);</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>do</TT> statement executes the statement block until a
bet between 0 and the value of <TT>money</TT> is entered by the
player.
<H4><B>The </B><TT><B><FONT FACE="Courier New">while</FONT></B></TT><B>
Statement</B></H4>
<P>
The <TT>while</TT> statement is similar to the <TT>do</TT> statement,
except that the boolean expression is evaluated before execution
of the enclosed statement. If the boolean expression evaluates
to <TT>false</TT>, the <TT>while</TT> statement is terminated,
and execution continues with the next statement following the
<TT>while</TT> statement. The <TT>while</TT> statement syntax
is as follows:
<P>
<TT>while (<I><FONT FACE="Courier New">BooleanExpression</FONT></I>)
<I><FONT FACE="Courier New">EnclosedStatement</FONT></I></TT>
<P>
A sample <TT>while</TT> statement is taken from the <TT>play()</TT>
method of the <TT>BlackJackGame</TT> class:
<BLOCKQUOTE>
<TT>while(dealersHand.mustHit())<BR>
<FONT FACE="Courier New">&nbsp;dealersHand.addCard(deck.deal());</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>while</TT> statement checks to see if the dealer must
take a hit and, if so, adds a card to the dealer's hand. The <TT>while</TT>
statement repeats this processing until the dealer is no longer
required to take a hit.
<H4><B>The </B><TT><B><FONT FACE="Courier New">return</FONT></B></TT><B>
Statement</B></H4>
<P>
The <TT>return</TT> statement is used to terminate execution of
a method and return a value of the type specified in the method's
declaration. Its syntax is
<P>
<BLOCKQUOTE>
<TT>return <I><FONT FACE="Courier New">Expression</FONT></I>;</TT>
</BLOCKQUOTE>
<P>
<TT><I><FONT FACE="Courier New">Expression</FONT></I></TT> must
evaluate to a value that is compatible with the result type of
the method in which it is used.
<P>
A sample <TT>return</TT> statement is taken from the <TT>getValue()</TT>
method of the <TT>Card</TT> class:
<BLOCKQUOTE>
<TT>int getValue() {<BR>
<FONT FACE="Courier New">&nbsp;return iValue;<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
This simple method returns the value <TT>iValue</TT> and completes
the execution of the <TT>getValue()</TT> method.
<H2><A NAME="Summary"><B><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></B></A>
</H2>
<P>
In this chapter you have toured the elements of the Java language
by writing four sample programs. You have learned about the structure
of Java programs, how to compile and execute them, and about many
Java language elements. You should now be up and running with
Java and capable of experimenting with it by writing your own
programs. Although this chapter covers many elements of the Java
syntax, use <A HREF="ch11.htm" >Chapter 11</A> as a complete reference
for the Java language. <A HREF="ch5.htm" >Chapter 5</A> supplements
the information you learned in this chapter with a solid background
in Java's support of object-oriented programming.
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



