<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META>
<H1><FONT COLOR=#FF0000>Chapter 26</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Client Programs</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#TypesofClients" >Types of Clients</A>
<LI><A HREF="#ClientResponsibilities" >Client Responsibilities</A>
<LI><A HREF="#ASimpleTelnetClient" >A Simple Telnet Client</A>
<UL>
<LI><A HREF="#TheNetworkVirtualTerminal" >The Network Virtual Terminal</A>
<LI><A HREF="#TheInterpretasCommandCode" >The Interpret as Command Code</A>
<LI><A HREF="#NegotiatedOptions" >Negotiated Options</A>
<LI><A HREF="#SymmetryBetweenTerminalsandProcesses" >Symmetry Between Terminals and Processes</A>
<LI><A HREF="#TheTelnetAppProgram" >The TelnetApp Program</A>
<LI><A HREF="#TheNVTPrinterClass" >The NVTPrinter Class</A>
<LI><A HREF="#TheNVTInputStreamClass" >The NVTInputStream Class</A>
<LI><A HREF="#TheNVTOutputStreamClass" >The NVTOutputStream Class</A>
</UL>
<LI><A HREF="#AMailClient" >A Mail Client</A>
<UL>
<LI><A HREF="#TheMailClientAppProgram" >The MailClientApp Program</A>
</UL>
<LI><A HREF="#TheWebFetcherProgram" >The Web Fetcher Program</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
<FONT COLOR=#000000>In this chapter you will learn how to write
client programs that support networked client/server applications.
You'll learn about the typical client programs found on the Internet
and how they are structured. You'll develop simple client programs
that support remote login and the sending of mail, and that fetch
a list of Web pages. This chapter builds on the material presented
in <A HREF="ch17.htm" >Chapter 17</A>, &quot;Network Programming
with the </FONT><TT><FONT FACE="Courier">java.net</FONT></TT>
Package.&quot; You might want to review <A HREF="ch17.htm" >Chapter 17 </A>before
continuing with the material presented in this chapter.
<H2><A NAME="TypesofClients"><FONT SIZE=5 COLOR=#FF0000>Types
of Clients</FONT></A></H2>
<P>
Of the client/server applications that are found on the Internet,
only a small group is typically used. These include e-mail, the
Web, FTP, Usenet news groups, and telnet. Gopher and WAIS, both
precursors of the Web, have declined in popularity, having been
subsumed by the Web. Typical Internet client programs include
e-mail programs, Web browsers, FTP programs, and telnet clients.
<P>
<I>E-mail programs</I> provide an easy-to-use interface by which
mail can be created and sent, retrieved and displayed, and managed.
Popular window-based clients include Eudora and Pegasus. UNIX
systems provide a number of popular e-mail clients, including
Pine, Elm, and mh.
<P>
<I>Web browsers</I> provide a window on the World Wide Web and
support the display of Web pages, including, of course, Java programs.
The Netscape browser is the most popular browser on the Web and
is Java capable. It is supported on UNIX, Windows, and Macintosh
systems.
<P>
<I>FTP programs</I> provide a convenient way to retrieve files
from public Internet file servers or from private file directories.
Although a number of user-friendly FTP client programs are available,
the simple text-based FTP client is still the most popular and
most widely supported.
<P>
Newsreader programs simplify the process of working with messages
that are posted to Usenet news groups. A number of netnews client
programs are available for Windows, Macintosh, UNIX, and other
operating system platforms.
<P>
Telnet clients are used to remotely log into other systems. These
systems are usually UNIX or other operating systems that are powerful
enough to provide the underlying capabilities needed to implement
multiuser support. Windows and Macintosh systems, because of their
inherent limitations, do not support telnet server applications.
<H2><A NAME="ClientResponsibilities"><FONT SIZE=5 COLOR=#FF0000>Client
Responsibilities</FONT></A></H2>
<P>
Client programs perform a service for their users by connecting
with their server counterparts, forwarding service requests based
on user inputs, and providing the service results back to the
user.
<P>
In most cases, the client must initiate the connection. Typically,
the server listens on a well-known port for a client connection.
The client initiates the connection, which is accepted by the
server. The client sends a service request to the server, based
on user inputs. The server receives the service request, performs
the service, and returns the results of the service to the client.
The client receives the service results and displays them to the
user.
<H2><A NAME="ASimpleTelnetClient"><FONT SIZE=5 COLOR=#FF0000>A
Simple Telnet Client</FONT></A></H2>
<P>
A telnet client program provides users with the capability to
log into remote systems. It connects to a telnet server (called
a <I>telnet daemon</I>) that listens on port 23 for an incoming
connection. The telnet client connects to the daemon, which usually
runs a login program and, upon successful login, runs a shell
program.
<P>
The telnet client must be capable of simultaneously exchanging
data with both the user and the remote system. The protocol used
for communication between the client and the server is specified
in RFC 854, the Telnet Protocol Specification. RFC 854 identifies
three basic elements of the telnet protocol: the concept of a
network virtual terminal, the principle of negotiated options,
and the symmetry between terminals and processes.
<H3><A NAME="TheNetworkVirtualTerminal">The Network Virtual Terminal</A>
</H3>
<P>
The <I>network virtual terminal</I>, or NVT, is a very simple
device that forms the basis for establishing telnet-based communication.
All telnet clients and servers are required to support the NVT
as a minimum capability. It is an abstract device that consists
of a printer and a keyboard. The user types characters on the
keyboard that are forwarded to the server. The server returns
data to the user and the NVT displays it on the printer. The NVT
provides local character echoing and half-duplex operation, although
remote echoing and full-duplex operation can be used as negotiated
options. Lines are terminated using a standard carriage-return-line-feed
combination.
<P>
The NVT also provides for control operations that support process
interruption and the discarding of excessive output. These operations
are signaled by using the <I>Interpret as Command</I> (IAC) code
as described in the next section.
<H3><A NAME="TheInterpretasCommandCode">The Interpret as Command
Code</A></H3>
<P>
The IAC code is sent from a client or server to a program on the
other end of a telnet connection to send a control code or to
negotiate an option, as described in the next section. The IAC
is a single byte consisting of the value <TT><FONT FACE="Courier">255</FONT></TT>
or hex <TT><FONT FACE="Courier">0xFF</FONT></TT>. The IAC may
be followed by a single byte to send a control code, or by two
or more bytes to negotiate an option. For example, the IAC followed
by a byte with the decimal value of 243 is used to send a break
command.
<P>
Because the IAC is used to indicate a command or option negotiated,
a special byte sequence is needed to send the byte value 255 used
for the IAC. This is accomplished by sending two IACs in succession.
<H3><A NAME="NegotiatedOptions">Negotiated Options</A></H3>
<P>
Because all telnet clients and servers are required to implement
the NVT, they all have a common, but primitive, basis from which
to begin operation. Additional options, such as full- duplex operation
and character echoing, can be used based on the principle of negotiated
options.
<P>
Options are <I>negotiated</I> when either the client or server
program sends an IAC code to the other. The IAC code is followed
by a <TT><FONT FACE="Courier">WILL</FONT></TT> or <TT><FONT FACE="Courier">DO</FONT></TT>
code and an option code. The <TT><FONT FACE="Courier">WILL</FONT></TT>
code informs the program on the other side of the connection that
it intends to use a particular option. The other program may respond
with a <TT><FONT FACE="Courier">DO</FONT></TT> or a <TT><FONT FACE="Courier">DONT</FONT></TT>
response, consisting of the IAC, followed by the <TT><FONT FACE="Courier">DO</FONT></TT>
or <TT><FONT FACE="Courier">DONT</FONT></TT> code, followed by
the option.
<P>
A program can also request that the program on the other side
of the connection implement an option. This is accomplished by
sending the IAC code, the <TT><FONT FACE="Courier">DO</FONT></TT>
code, and the option code. The other program can respond with
a <TT><FONT FACE="Courier">WILL</FONT></TT> or <TT><FONT FACE="Courier">WONT</FONT></TT>
response. A <TT><FONT FACE="Courier">WILL</FONT></TT> response
is indicated by sending the IAC, followed by the <TT><FONT FACE="Courier">WILL</FONT></TT>
code, followed by the option code. A <TT><FONT FACE="Courier">WONT</FONT></TT>
response is sent in the same manner, with the <TT><FONT FACE="Courier">WONT</FONT></TT>
code being used instead of the <TT><FONT FACE="Courier">WILL</FONT></TT>
code.
<H3><A NAME="SymmetryBetweenTerminalsandProcesses">Symmetry Between
Terminals and Processes</A></H3>
<P>
As you probably have surmised from reading the previous sections,
the communication between client and server is highly symmetrical.
Either the client or server can initiate option negotiation. The
use of symmetry between client and host simplifies the implementation
of the telnet protocol and allows client and host software to
be developed from a common base. The <TT><FONT FACE="Courier">TelnetApp</FONT></TT>
program, presented in the next section, makes use of two I/O filters,
<TT><FONT FACE="Courier">NVTInputStream</FONT></TT> and <TT><FONT FACE="Courier">NVTOutputStream</FONT></TT>,
that implement some of the basic elements of the telnet protocol.
These streams do not support control characters or additional
options. Option negotiation is handled by refusing any additional
options other than those provided by the basic NVT.
<H3><A NAME="TheTelnetAppProgram">The <TT><FONT SIZE=4 FACE="Courier">TelnetApp</FONT></TT><FONT SIZE=4>
Program</FONT></A></H3>
<P>
The <TT><FONT FACE="Courier">TelnetApp</FONT></TT> program implements
a minimum set of features of the telnet protocol in order to accomplish
a remote login to a telnet server. The purpose of the program
is not to provide you with a telnet client, but to show you the
basics of how these clients work. More sophisticated and powerful
telnet client programs can be retrieved from the Internet. The
source code of the <TT><FONT FACE="Courier">TelnetApp</FONT></TT>
program is shown in Listing 26.1.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 26.1. The source code for the </B><TT><B><FONT FACE="Courier">TelnetApp</FONT></B></TT><B>
program.</B><P>
<TT><FONT FACE="Courier">import java.lang.*;<BR>
import java.net.*;<BR>
import java.io.*;<BR>
import jdg.ch26.NVTInputStream;<BR>
import jdg.ch26.NVTOutputStream;<BR>
import jdg.ch26.NVTPrinter;<BR>
<BR>
public class TelnetApp {<BR>
&nbsp;&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;PortTalk portTalk = new PortTalk(args);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;portTalk.start();<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
<BR>
class PortTalk extends Thread {<BR>
&nbsp;&nbsp;Socket connection;<BR>
&nbsp;&nbsp;PrintStream outStream;<BR>
&nbsp;&nbsp;NVTInputStream inStream;<BR>
&nbsp;&nbsp;NVTPrinter printer;<BR>
&nbsp;&nbsp;public PortTalk(String args[]){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(args.length!=2) error(&quot;Usage:
java TelnetApp host port&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String destination = args[0];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int port = 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;port = Integer.valueOf(args[1]).intValue();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}catch (NumberFormatException ex) { error(&quot;Invalid
port number&quot;); }<BR>
&nbsp;&nbsp;&nbsp;&nbsp;try{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connection = new Socket(destination,port);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}catch (UnknownHostException ex) { error(&quot;Unknown
host&quot;); }<BR>
&nbsp;&nbsp;&nbsp;&nbsp;catch (IOException ex) { error(&quot;IO
error creating socket&quot;); }<BR>
&nbsp;&nbsp;&nbsp;&nbsp;try{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outStream = new PrintStream(connection.getOutputStream());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inStream = new NVTInputStream(connection.getInputStream(),outStream);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}catch (IOException ex) { error(&quot;IO
error getting streams&quot;); }<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Connected to
&quot;+destination+&quot; at port &quot;+port+&quot;.&quot;);
<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public void run() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;printer = new NVTPrinter(inStream);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;printer.start();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;yield();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;processUserInput();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;shutdown();<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public void processUserInput() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String line;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean finished = false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataInputStream userInputStream
= new DataInputStream(System.in);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line = userInputStream.readLine();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(line == null) finished
= true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else outStream.println(line);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} while(!finished);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch(IOException ex) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error(&quot;Error reading user input&quot;);
<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public void shutdown(){<BR>
&nbsp;&nbsp;try{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connection.close();<BR>
&nbsp;&nbsp;&nbsp;}catch (IOException ex) { error(&quot;IO error
closing socket&quot;); }<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public void error(String s){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(s);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.exit(1);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=589>
<BLOCKQUOTE>
The <TT><FONT FACE="Courier">TelnetApp</FONT></TT> class uses the <TT><FONT FACE="Courier">NVTPrinter</FONT></TT>, <TT><FONT FACE="Courier">NVTInputStream</FONT></TT>, and <TT><FONT FACE="Courier">NVTOutputStream</FONT></TT> classes that are supplied in the following sections. You must type in the <TT><FONT FACE="Courier">NVTPrinter.java</FONT></TT>, <TT><FONT FACE="Courier">NVTInputStream.java</FONT></TT>, and <TT><FONT FACE="Courier">NVTOutputStream.java</FONT></TT> files before compiling <TT><FONT FACE="Courier">TelnetApp.java</FONT></TT>. The Java compiler will automatically compile these files when <TT><FONT FACE="Courier">TelnetApp.java</FONT></TT> is compiled.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
You use the <TT><FONT FACE="Courier">TelnetApp</FONT></TT> program
in the same way as any other telnet program. But bear in mind
that it is only a minimal telnet client. Run the program by invoking
it with the hostname of a computer that supports telnet and the
well-known telnet port number, port 23.
<P>
In the following example, I use the program to log into my account
at CTS. Note that the program operates in half-duplex mode, so
characters are echoed locally. I substituted asterisks (<TT><FONT FACE="Courier">*</FONT></TT>)
for my password. Take caution when using this program because
it will display your password characters in the same manner as
any other text that you type.
<P>
Also, notice that commands that I type are echoed by my <TT><FONT FACE="Courier">cts.com</FONT></TT>
host:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">C:\java\jdg\ch26&gt;java TelnetApp cts.com
23<BR>
Connected to cts.com at port 23.<BR>
<BR>
<BR>
UNIX System V Release 3.2 (crash.cts.com) (ttyp2)<BR>
<BR>
&nbsp;login: jaworski<BR>
Password:****<BR>
<BR>
Last  successful login for jaworski: Tue Apr 09 23:17:46 PDT 1996
on ttyp34<BR>
Last unsuccessful login for jaworski: Fri Apr 05 09:56:34 PST
1996 on ttyp9<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Welcome
to CTSNET!<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enter 'help' for
assistance and information.<BR>
<BR>
<BR>
1% l<BR>
l<BR>
total 16<BR>
drwx------  2 jaworski guest    272 Sep 08 1995 Mail<BR>
drwxr-xr-x  2 jaworski guest    208 Dec 07 15:09 News<BR>
drwxr-xr-x  2 jaworski guest    224 Sep 08 1995 bin<BR>
drwxr-xr-x  2 jaworski guest    384 Apr 04 08:43 download<BR>
lrwxrwxrwx  1 root   root     15 Mar 15 02:56 dropbox -&gt; /ftp/j/jaworski
<BR>
<BR>
drwx------  2 jaworski guest    160 Dec 08 10:35 ga<BR>
drwx------  2 jaworski guest    288 Apr 08 09:49 mail<BR>
drwxr-xr-x  3 jaworski guest    112 Dec 01 12:20 writing<BR>
2% exit<BR>
exit<BR>
3% logout<BR>
<BR>
Connection broken.<BR>
<BR>
C:\java\jdg\ch26&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">TelnetApp</FONT></TT> program creates
an object of class <TT><FONT FACE="Courier">PortTalk</FONT></TT>
to perform its processing. This class extends the <TT><FONT FACE="Courier">Thread</FONT></TT>
class in order to implement multithreading capabilities. Its constructor
uses the parameters passed in the <TT><FONT FACE="Courier">TelnetApp</FONT></TT>
command-line invocation to set up the connection to the specified
host and port.
<P>
The <TT><FONT FACE="Courier">run()</FONT></TT> method creates
an object of the <TT><FONT FACE="Courier">NVTPrinter</FONT></TT>
class to interface with the destination host and invokes the <TT><FONT FACE="Courier">processUserInput()</FONT></TT>
method to interface with the user. The <TT><FONT FACE="Courier">processUserInput()</FONT></TT>
method reads a line at a time from the user's console and sends
it to the telnet server.
<H3><A NAME="TheNVTPrinterClass">The <TT><FONT SIZE=4 FACE="Courier">NVTPrinter</FONT></TT><FONT SIZE=4>
Class</FONT></A></H3>
<P>
The <TT><FONT FACE="Courier">NVTPrinter</FONT></TT> class performs
most of the interesting processing because it interfaces with
the server. It does this using the <TT><FONT FACE="Courier">NVTInputStream</FONT></TT>
class covered in the next section. <TT><FONT FACE="Courier">NVTPrinter</FONT></TT>
is also implemented as a subclass of <TT><FONT FACE="Courier">Thread</FONT></TT>.
Its source code is shown in Listing 26.2.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 26.2. The source code for the </B><TT><B><FONT FACE="Courier">NVTPrinter</FONT></B></TT><B>
class.</B><P>
<TT><FONT FACE="Courier">package jdg.ch26;<BR>
<BR>
import java.io.*;<BR>
<BR>
public class NVTPrinter extends Thread {<BR>
&nbsp;NVTInputStream inStream;<BR>
&nbsp;public NVTPrinter(NVTInputStream in) {<BR>
&nbsp;&nbsp;super();<BR>
&nbsp;&nbsp;inStream = in;<BR>
&nbsp;}<BR>
&nbsp;public void run() {<BR>
&nbsp;&nbsp;boolean finished = false;<BR>
&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;do {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int i = inStream.read();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(i == -1) finished = true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print((char) i);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yield();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;} while(!finished);<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot;\nConnection broken.&quot;);
<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;} catch (IOException ex) {<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot;NVTPrinter error&quot;);
<BR>
&nbsp;&nbsp;&nbsp;System.exit(1);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="TheNVTInputStreamClass">The <TT><FONT SIZE=4 FACE="Courier">NVTInputStream</FONT></TT><FONT SIZE=4>
Class</FONT></A></H3>
<P>
The <TT><FONT FACE="Courier">NVTInputStream</FONT></TT> class
implements the network virtual terminal input interface. Its source
code is shown in Listing 26.3.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 26.3. The source code for the </B><TT><B><FONT FACE="Courier">NVTInputStream</FONT></B></TT><B>
class.</B><P>
<TT><FONT FACE="Courier">package jdg.ch26;<BR>
<BR>
import java.io.*;<BR>
<BR>
public class NVTInputStream extends FilterInputStream {<BR>
&nbsp;byte IAC = (byte) 0xff;<BR>
&nbsp;byte DO = (byte) 0xfd;<BR>
&nbsp;byte WILL = (byte) 0xfb;<BR>
&nbsp;byte CR = 13;<BR>
&nbsp;byte LF = 10;<BR>
&nbsp;int WONT = 252;<BR>
&nbsp;int DONT = 254;<BR>
&nbsp;int BUFFER_SIZE = 1024;<BR>
&nbsp;OutputStream out;<BR>
&nbsp;byte lineBuffer[] = new byte[BUFFER_SIZE];<BR>
&nbsp;int numBytes = 0;<BR>
&nbsp;public NVTInputStream(InputStream inStream,OutputStream
outStream) {<BR>
&nbsp;&nbsp;super(inStream);<BR>
&nbsp;&nbsp;out = outStream;<BR>
&nbsp;}<BR>
&nbsp;public int read() throws IOException {<BR>
&nbsp;&nbsp;boolean recIAC;<BR>
&nbsp;&nbsp;int i;<BR>
&nbsp;&nbsp;do {<BR>
&nbsp;&nbsp;&nbsp;recIAC = false;<BR>
&nbsp;&nbsp;&nbsp;i = in.read();<BR>
&nbsp;&nbsp;&nbsp;if(i == -1) return i;<BR>
&nbsp;&nbsp;&nbsp;byte b = (byte) i;<BR>
&nbsp;&nbsp;&nbsp;if(b == IAC) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;recIAC = true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int cmd = in.read();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(cmd == -1) return cmd;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;byte b2 = (byte) cmd;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(b2 == IAC) return 255;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;else if(b2 == DO) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int opt = in.read();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(opt == -1) return opt;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.write(255);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.write(WONT);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.write(opt);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.flush();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(b2 == WILL) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int opt = in.read();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(opt == -1) return opt;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.write(255);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.write(DONT);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.write(opt);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.flush();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;} while(recIAC);<BR>
&nbsp;&nbsp;return i;<BR>
&nbsp;}<BR>
&nbsp;public String readLine() throws IOException {<BR>
&nbsp;&nbsp;numBytes = 0;<BR>
&nbsp;&nbsp;boolean finished = false;<BR>
&nbsp;&nbsp;do {<BR>
&nbsp;&nbsp;&nbsp;int i = read();<BR>
&nbsp;&nbsp;&nbsp;if(i == -1) return null;<BR>
&nbsp;&nbsp;&nbsp;byte b = (byte) i;<BR>
&nbsp;&nbsp;&nbsp;if(b == LF) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(numBytes&gt;0) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(lineBuffer[numBytes-1] == 13)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new String(lineBuffer,0,0,numBytes-1);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;lineBuffer[numBytes] = b;<BR>
&nbsp;&nbsp;&nbsp;++numBytes;<BR>
&nbsp;&nbsp;} while (!finished);<BR>
&nbsp;&nbsp;return null;<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
<TT><FONT FACE="Courier">NVTInputStream</FONT></TT> uses the network
virtual terminal conventions, covered earlier in this chapter,
to filter the input stream associated with the connection. It
implements the basic <TT><FONT FACE="Courier">read()</FONT></TT>
method and also a convenient <TT><FONT FACE="Courier">readLine()</FONT></TT>
method.
<H3><A NAME="TheNVTOutputStreamClass">The <TT><FONT SIZE=4 FACE="Courier">NVTOutputStream</FONT></TT><FONT SIZE=4>
Class</FONT></A></H3>
<P>
The <TT><FONT FACE="Courier">NVTOutputStream</FONT></TT> class
provides an output analog to the <TT><FONT FACE="Courier">NVTInputStream</FONT></TT>
class. It implements the basic <TT><FONT FACE="Courier">write()</FONT></TT>
method according to the NVT conventions. It also provides a <TT><FONT FACE="Courier">println()</FONT></TT>
method that uses the carriage-return-line-feed (<TT><FONT FACE="Courier">CR</FONT></TT>-<TT><FONT FACE="Courier">LF</FONT></TT>)
end-of-line conventions. Its source code is shown in Listing 26.4.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 26.4. The source code for the </B><TT><B><FONT FACE="Courier">NVTOutputStream</FONT></B></TT><B>
class.</B><P>
<TT><FONT FACE="Courier">package jdg.ch26;<BR>
<BR>
import java.io.*;<BR>
<BR>
public class NVTOutputStream extends PrintStream {<BR>
&nbsp;&nbsp;int IAC = 255;<BR>
&nbsp;&nbsp;byte CR = 13;<BR>
&nbsp;&nbsp;byte LF = 10;<BR>
&nbsp;&nbsp;public NVTOutputStream(OutputStream outStream) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;super(outStream);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public void write(int i) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(i == IAC) super.write(i);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;super.write(i);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public void println(String s) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;super.print(s);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;super.write(CR);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;super.write(LF);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;super.flush();<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H2><A NAME="AMailClient"><FONT SIZE=5 COLOR=#FF0000>A Mail Client</FONT></A>
</H2>
<P>
Although mail is sent on the Internet using a variety of protocols,
the <I>Simple Message Transfer Protocol</I> (SMTP), described
in Request for Comments (RFC) 821, is the basic protocol used
to move mail from one host to another. SMTP consists of a mail
sender, a mail receiver, and a set of line-oriented commands used
to send mail from the sender to the receiver.<BR>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD ><B>Note</B></TD></TR>
<TR><TD WIDTH=576>
<BLOCKQUOTE>
Requests for Comments are numbered notes of the Internet community that are usually, but not always, used to describe some aspect of the protocols or services used on the Internet.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
RFC 821 describes the complete set of commands used by mail senders
and receivers. Here I am using only a minimal subset of these
commands to illustrate the development of an SMTP client, the
mail sender.
<P>
An SMTP client connects to an SMTP server by establishing a connection
to port 25 of the server's host. The server accepts the connection,
sends a one-line ready notification to the client, and awaits
client commands.
<P>
The client sends the <TT><FONT FACE="Courier">HELO</FONT></TT>
command with its hostname to introduce itself to the server. The
server responds by sending a code that indicates that it is OK
to initiate a mail transmission.
<P>
The client sends the <TT><FONT FACE="Courier">MAIL</FONT></TT>
command to the server to indicate that it has mail from a specific
user. The server responds with a notification to proceed.
<P>
The client sends the <TT><FONT FACE="Courier">RCPT</FONT></TT>
command to identify the recipient of the e-mail. The server responds
by telling the client whether or not the recipient is valid.
<P>
The client sends the <TT><FONT FACE="Courier">DATA</FONT></TT>
command to indicate that it is ready to send the message. The
server responds by telling the client that it is OK to begin sending
message data.
<P>
The client sends the message, a line at a time, terminating the
message with a line containing a single period (<TT><FONT FACE="Courier">.</FONT></TT>).
A line of message text beginning with a period is sent by prepending
an extra initial period to the message line.
<P>
The server acknowledges receiving the last line of text by sending
an <TT><FONT FACE="Courier">OK</FONT></TT> command to the client.
<P>
The client then terminates the connection by sending a <TT><FONT FACE="Courier">QUIT</FONT></TT>
command to the server. The server then responds by notifying the
client that it is closing the connection.
<H3><A NAME="TheMailClientAppProgram">The <TT><FONT SIZE=4 FACE="Courier">MailClientApp</FONT></TT><FONT SIZE=4>
Program</FONT></A></H3>
<P>
The <TT><FONT FACE="Courier">MailClientApp</FONT></TT> program
illustrates the basic operation of a mail client program. It implements
the basic SMTP commands described in the previous section. Its
source code is shown in Listing 26.5.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 26.5. The source code for the </B><TT><B><FONT FACE="Courier">MailClientApp</FONT></B></TT><B>
program.</B><P>
<TT><FONT FACE="Courier">import java.lang.*;<BR>
import java.net.*;<BR>
import java.io.*;<BR>
import java.util.Vector;<BR>
import jdg.ch26.NVTInputStream;<BR>
import jdg.ch26.NVTOutputStream;<BR>
import jdg.ch26.NVTPrinter;<BR>
<BR>
public class MailClientApp {<BR>
&nbsp;&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;MessageInterface messageInterface = new
MessageInterface();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Message msg = messageInterface.getMsg();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;MailTalk mailTalk = new MailTalk(msg);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;mailTalk.run();<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
<BR>
class Message {<BR>
&nbsp;&nbsp;String source;<BR>
&nbsp;&nbsp;String destination;<BR>
&nbsp;&nbsp;String subject;<BR>
&nbsp;&nbsp;String text[];<BR>
&nbsp;&nbsp;public Message() {<BR>
&nbsp;&nbsp;super();<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public void setDestination(String dest) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;destination = dest;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public String getDestination() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return destination;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public void setSource(String src) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;source = src;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public String getSource() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return source;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public String getDestinationHost() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return destination.substring(destination.indexOf('@')+1);
<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setSubject(String subj) {
<BR>
&nbsp;&nbsp;subject = subj;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public String getSubject() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return subject;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public void setText(Vector txt) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int n = txt.size();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;text = new String[n];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;for(int i = 0; i&lt; n; ++i) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;text[i] = (String) txt.elementAt(i);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public String[] getText() {<BR>
&nbsp;&nbsp;&nbsp;return text;<BR>
&nbsp;&nbsp;}<BR>
}<BR>
<BR>
class MessageInterface {<BR>
&nbsp;&nbsp;Message msg;<BR>
&nbsp;&nbsp;public MessageInterface() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;msg = new Message();<BR>
&nbsp;&nbsp;}<BR>
&nbsp;public Message getMsg() {<BR>
&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;System.out.print(&quot;From: &quot;);<BR>
&nbsp;&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;&nbsp;DataInputStream inStream = new DataInputStream(System.in);
<BR>
&nbsp;&nbsp;&nbsp;msg.setSource(inStream.readLine());<BR>
&nbsp;&nbsp;&nbsp;System.out.print(&quot;To: &quot;);<BR>
&nbsp;&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;&nbsp;msg.setDestination(inStream.readLine());<BR>
&nbsp;&nbsp;&nbsp;System.out.print(&quot;Subject: &quot;);<BR>
&nbsp;&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;&nbsp;msg.setSubject(inStream.readLine());<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot;Enter message text.&quot;);
<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot;Terminate message text
with an initial period.&quot;);<BR>
&nbsp;&nbsp;&nbsp;Vector text = new Vector();<BR>
&nbsp;&nbsp;&nbsp;boolean finished = false;<BR>
&nbsp;&nbsp;&nbsp;do {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String line = inStream.readLine();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(endOfText(line)) finished = true;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else text.addElement(line);<BR>
&nbsp;&nbsp;&nbsp;} while(!finished);<BR>
&nbsp;&nbsp;&nbsp;msg.setText(text);<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot;End of message read.&quot;);
<BR>
&nbsp;&nbsp;&nbsp;}catch (IOException ex) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;IO Exception&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.exit(1);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;return msg;<BR>
&nbsp;}<BR>
&nbsp;boolean endOfText(String s) {<BR>
&nbsp;&nbsp;&nbsp;if(s.length() == 0) return false;<BR>
&nbsp;&nbsp;&nbsp;if(s.charAt(0) == '.') return true;<BR>
&nbsp;&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
}<BR>
<BR>
class MailTalk {<BR>
&nbsp;&nbsp;&nbsp;// Communication states<BR>
&nbsp;&nbsp;&nbsp;static final int START = 0;<BR>
&nbsp;&nbsp;&nbsp;static final int HELO = 1;<BR>
&nbsp;&nbsp;&nbsp;static final int MAIL = 2;<BR>
&nbsp;&nbsp;&nbsp;static final int RCPT = 3;<BR>
&nbsp;&nbsp;&nbsp;static final int DATA = 4;<BR>
&nbsp;&nbsp;&nbsp;static final int TEXT = 5;<BR>
&nbsp;&nbsp;&nbsp;static final int QUIT = 6;<BR>
&nbsp;&nbsp;&nbsp;static final int FINISHED = 9;<BR>
&nbsp;&nbsp;&nbsp;Socket connection;<BR>
&nbsp;&nbsp;&nbsp;String localHostName;<BR>
&nbsp;&nbsp;&nbsp;NVTOutputStream outStream;<BR>
&nbsp;&nbsp;&nbsp;NVTInputStream inStream;<BR>
&nbsp;&nbsp;&nbsp;Message msg;<BR>
&nbsp;&nbsp;&nbsp;public MailTalk(Message msg){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.msg = msg;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String destination = msg.getDestinationHost();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int port = 25;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connection = new Socket(destination,port);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localHostName = InetAddress.getLocalHost().getHostName();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}catch (UnknownHostException ex)
{ error(&quot;Unknown host&quot;); }<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (IOException ex) { error(&quot;IO
error creating socket&quot;); }<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outStream = new NVTOutputStream(connection.getOutputStream());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inStream = new NVTInputStream(connection.getInputStream(),outStream);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}catch (IOException ex) { error(&quot;IO
error getting streams&quot;); }<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Connected to
&quot;+destination+&quot; at port &quot;+port+&quot;.&quot;);
<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public void run() {<BR>
&nbsp;&nbsp;&nbsp;sendMail();<BR>
&nbsp;&nbsp;&nbsp;shutdown();<BR>
&nbsp;}<BR>
&nbsp;public void sendMail() {<BR>
&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;int state = START;<BR>
&nbsp;&nbsp;&nbsp;String line;<BR>
&nbsp;&nbsp;&nbsp;do {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;line = inStream.readLine();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(line == null) state = FINISHED;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(line);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch(state) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case START:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(gotResponse(220,line)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outStream.println(&quot;HELO
&quot;+localHostName);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;&gt;&gt;&gt;HELO
&quot;+localHostName);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state = HELO;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else state=FINISHED;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;case HELO:<BR>
&nbsp;&nbsp;&nbsp;if(gotResponse(250,line)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outStream.println(&quot;MAIL FROM:&lt;&quot;+msg.getSource()+&quot;&gt;&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;&gt;&gt;&gt;MAIL
FROM:&lt;&quot;+msg.getSource()+&quot;&gt;&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state = MAIL;<BR>
&nbsp;&nbsp;&nbsp;}else state=FINISHED;<BR>
&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;case MAIL:<BR>
&nbsp;&nbsp;&nbsp;if(gotResponse(250,line)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;outStream.println(&quot;RCPT TO:&lt;&quot;+msg.getDestination()+&quot;&gt;&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;&gt;&gt;&gt;RCPT
TO:&lt;&quot;+msg.getDestination()+&quot;&gt;&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;state = RCPT;<BR>
&nbsp;&nbsp;}else state=FINISHED;<BR>
&nbsp;&nbsp;break;<BR>
&nbsp;case RCPT:<BR>
&nbsp;&nbsp;&nbsp;if(gotResponse(250,line)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;outStream.println(&quot;DATA&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;&gt;&gt;&gt;DATA&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;state = DATA;<BR>
&nbsp;&nbsp;}else state=FINISHED;<BR>
&nbsp;&nbsp;break;<BR>
&nbsp;case DATA:<BR>
&nbsp;&nbsp;if(gotResponse(354,line)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String text[] = msg.getText();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int len = text.length;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;outStream.println(&quot;Subject: &quot;+msg.getSubject());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;outStream.println(&quot;&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Subject: &quot;+msg.getSubject());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;for(int i=0;i&lt;len;++i) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(text[i].length() &gt; 0
&amp;&amp; text[i].charAt(0) == '.') {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outStream.println(&quot;.&quot;+text[i]);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;.&quot;+text[i]);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outStream.println(text[i]);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;&gt;&gt;&gt;&quot;+text[i]);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;outStream.println(&quot;.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;&gt;&gt;&gt;.&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;state = TEXT;<BR>
&nbsp;&nbsp;&nbsp;}else state=FINISHED;<BR>
&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;case TEXT:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(gotResponse(250,line)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outStream.println(&quot;QUIT&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;&gt;&gt;&gt;QUIT&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state = QUIT;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else state=FINISHED;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case QUIT:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state=FINISHED;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;} while(state != FINISHED);<BR>
&nbsp;&nbsp;} catch(IOException ex) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;error(&quot;IO Exception while sending
mail&quot;);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;boolean gotResponse(int n,String s) {<BR>
&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;int responseCode = Integer.valueOf(s.trim().substring(0,3)).intValue();
<BR>
&nbsp;&nbsp;String line = s;<BR>
&nbsp;&nbsp;while(line.charAt(3) == '-') {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;line = inStream.readLine();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(line);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;if(responseCode == n) return true;<BR>
&nbsp;&nbsp;}catch(NumberFormatException ex) {<BR>
&nbsp;&nbsp;}catch(IOException ex){<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
&nbsp;public void shutdown(){<BR>
&nbsp;&nbsp;try{<BR>
&nbsp;&nbsp;&nbsp;connection.close();<BR>
&nbsp;&nbsp;}catch (IOException ex) { error(&quot;IO error closing
socket&quot;); }<BR>
&nbsp;}<BR>
&nbsp;public void error(String s){<BR>
&nbsp;&nbsp;&nbsp;System.out.println(s);<BR>
&nbsp;&nbsp;&nbsp;System.exit(1);<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">MailClientApp</FONT></TT> program
prompts you for the from: name that you want associated with the
sent message. SMTP is inherently insecure and will allow you to
send e-mail using the e-mail address of another person as the
from: address. In the example, I send a message using my daughter's
e-mail address to myself. The subject of the message is <TT><FONT FACE="Courier">Test
Message</FONT></TT> and it contains a mere two lines of text.
The following output shows a sample dialog with the <TT><FONT FACE="Courier">MailClientApp</FONT></TT>
program:<BR>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">C:\java\jdg\ch26&gt;java MailClientApp
<BR>
From: emily@jaworski.com<BR>
To: jamie@jaworski.com<BR>
Subject: Test Message<BR>
Enter message text.<BR>
Terminate message text with an initial period.<BR>
This is a test.<BR>
It is only a test.<BR>
.<BR>
End of message read.<BR>
Connected to jaworski.com at port 25.<BR>
220-jaworski.com Sendmail 8.6.12/8.6.9 ready at Wed, 10 Apr 1996
00:33:31 -0700<BR>
220 ESMTP spoken here<BR>
&gt;&gt;&gt;HELO athome.jaworski.com<BR>
250 jaworski.com Hello athome.jaworski.com [204.212.153.194],
pleased to meet you<BR>
&gt;&gt;&gt;MAIL FROM:&lt;emily@jaworski.com&gt;<BR>
250 &lt;emily@jaworski.com&gt;... Sender ok<BR>
&gt;&gt;&gt;RCPT TO:&lt;jamie@jaworski.com&gt;<BR>
250 &lt;jamie@jaworski.com&gt;... Recipient ok<BR>
&gt;&gt;&gt;DATA<BR>
354 Enter mail, end with &quot;.&quot; on a line by itself<BR>
Subject: Test Message<BR>
<BR>
&gt;&gt;&gt;This is a test.<BR>
&gt;&gt;&gt;It is only a test.<BR>
&gt;&gt;&gt;.<BR>
250 AAA02243 Message accepted for delivery<BR>
&gt;&gt;&gt;QUIT<BR>
221 jaworski.com closing connection<BR>
<BR>
C:\java\jdg\ch26&gt;<BR>
</FONT></TT>
</BLOCKQUOTE>
<P>
After the message is received by the e-mail client, it connects
to my SMTP server and sends the message using the SMTP commands
summarized earlier in this chapter.
<P>
The <TT><FONT FACE="Courier">&gt;&gt;&gt;</FONT></TT> arrows indicate
commands that were sent by the program.
<H2><A NAME="TheWebFetcherProgram"><FONT SIZE=5 COLOR=#FF0000>The
Web Fetcher Program</FONT></A></H2>
<P>
Web <I>browsers</I> are the most popular client programs found
on the Internet. They allow users to download and display Web
pages, usually one at a time. The program shown in Listing 26.6
allows the user to specify a list of Web pages to be retrieved,
and retrieves these Web pages and stores them on the local file
system. This is an example of how custom Web clients can be implemented
in Java.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 26.6. The source code for the </B><TT><B><FONT FACE="Courier">WebFetchApp</FONT></B></TT><B>
program.</B><P>
<TT><FONT FACE="Courier">import java.util.Vector;<BR>
import java.io.*;<BR>
import java.net.*;<BR>
<BR>
public class WebFetchApp {<BR>
&nbsp;&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;&nbsp;WebFetch fetch = new WebFetch();<BR>
&nbsp;&nbsp;&nbsp;fetch.run();<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
<BR>
class WebFetch {<BR>
&nbsp;&nbsp;String urlList = &quot;url-list.txt&quot;;<BR>
&nbsp;&nbsp;Vector URLs = new Vector();<BR>
&nbsp;&nbsp;Vector fileNames = new Vector();<BR>
&nbsp;&nbsp;public WebFetch() {<BR>
&nbsp;&nbsp;&nbsp;super();<BR>
&nbsp;}<BR>
&nbsp;public void getURLList() {<BR>
&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;DataInputStream inStream = new DataInputStream(new
FileInputStream(urlList));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String inLine;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;while((inLine = inStream.readLine()) !=
null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inLine = inLine.trim();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!inLine.equals(&quot;&quot;))
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int tabPos = inLine.lastIndexOf('\t');
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String url = inLine.substring(0,tabPos).trim();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String fileName = inLine.substring(tabPos+1).trim();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URLs.addElement(url);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileNames.addElement(fileName);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}catch(IOException ex){<BR>
&nbsp;&nbsp;error(&quot;Error reading &quot;+urlList);<BR>
&nbsp;}<BR>
}<BR>
public void run() {<BR>
&nbsp;&nbsp;getURLList();<BR>
&nbsp;&nbsp;int numURLs = URLs.size();<BR>
&nbsp;&nbsp;for(int i=0;i&lt;numURLs;++i)<BR>
&nbsp;&nbsp;fetchURL((String) URLs.elementAt(i),(String) fileNames.elementAt(i));
<BR>
&nbsp;System.out.println(&quot;Done.&quot;);<BR>
}<BR>
public void fetchURL(String urlName,String fileName) {<BR>
&nbsp;&nbsp;try{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;URL url = new URL(urlName);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Getting &quot;+urlName+&quot;...&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;File outFile = new File(fileName);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;PrintStream outStream = new PrintStream(new
FileOutputStream(outFile));<BR>
&nbsp;&nbsp;&nbsp;&nbsp;DataInputStream inStream = new DataInputStream(url.openStream());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String line;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;while ((line = inStream.readLine())!=
null) outStream.println(line);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;inStream.close();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;outStream.close();<BR>
&nbsp;&nbsp;}catch (MalformedURLException ex){<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot;Bad URL&quot;);<BR>
&nbsp;&nbsp;}catch (IOException ex){<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot;IOException occurred.&quot;);
<BR>
&nbsp;}<BR>
}<BR>
public void error(String s){<BR>
&nbsp;&nbsp;System.out.println(s);<BR>
&nbsp;&nbsp;System.exit(1);<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
To use the program, create a file named <TT><FONT FACE="Courier">url-list.txt</FONT></TT>
that contains the names of the URLs you want to retrieve and the
names of the files in which you want them stored. The following
<TT><FONT FACE="Courier">url-list.txt</FONT></TT> file was used
to retrieve some pretty famous Web pages; it is included on the
CD, in the <TT><FONT FACE="Courier">\jdg\ch26</FONT></TT> directory:
<BLOCKQUOTE>
<TT><A TARGET="resource window" HREF="http://www.yahoo.com     yahoo.htm">http://www.yahoo.com     yahoo.htm</A><BR>
<A TARGET="resource window" HREF="http://www.cnn.com      cnn.htm">http://www.cnn.com      cnn.htm</A><BR>
<A TARGET="resource window" HREF="http://home.netscape.com   netscape.htm">http://home.netscape.com   netscape.htm</A></FONT></TT>
</BLOCKQUOTE>
<P>
The output generated for the <TT><FONT FACE="Courier">WebFetchApp</FONT></TT>
program is as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">C:\java\jdg\ch26&gt;java WebFetchApp
<BR>
Getting <A TARGET="resource window" HREF="http://www.yahoo.com...">http://www.yahoo.com...</A><BR>
Getting <A TARGET="resource window" HREF="http://www.cnn.com...">http://www.cnn.com...</A><BR>
Getting <A TARGET="resource window" HREF="http://home.netscape.com...">http://home.netscape.com...</A><BR>
Done.<BR>
<BR>
C:\java\jdg\ch26&gt;</FONT></TT>
</BLOCKQUOTE>
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
In this chapter you have learned how to write client programs
that implement the client end of Internet client/server applications.
You have learned about the common client programs found on the
Internet and how they are structured. You have developed a simple
telnet client, an e-mail program, and the Web fetcher program.
In <A HREF="ch27.htm" >Chapter 27</A>, &quot;Server Programs,&quot;
you'll learn how to write simple server applications.
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



