<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META>
<H1><FONT COLOR=#FF0000>Chapter 7</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Exceptions</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#EliminatingSoftwareErrors" >Eliminating Software Errors</A>
<LI><A HREF="#ErrorProcessingandExceptions" >Error Processing and Exceptions</A>
<LI><A HREF="#ThrowingExceptions" >Throwing Exceptions</A>
<LI><A HREF="#DeclaringExceptions" >Declaring Exceptions</A>
<LI><A HREF="#DeclareorCatch" >Declare or Catch?</A>
<LI><A HREF="#UsingthetryStatement" >Using the try Statement</A>
<LI><A HREF="#CatchingExceptions" >Catching Exceptions</A>
<LI><A HREF="#NestedExceptionHandling" >Nested Exception Handling</A>
<LI><A HREF="#RethrowingExceptions" >Rethrowing Exceptions</A>
<UL>
<LI><A HREF="#AnalysisofNestedExceptionTest" >Analysis of NestedExceptionTest</A>
</UL>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
In this chapter you'll learn how to use exceptions to implement
error-handling capabilities in your Java programs. You'll learn
how to declare exceptions and identify methods that use them.
You'll also learn how to throw exceptions in response to error
conditions and how to catch exceptions in support of error processing.
When you finish this chapter, you'll be able to use exceptions
to handle all sorts of errors in your programs.
<H2><A NAME="EliminatingSoftwareErrors"><B><FONT SIZE=5 COLOR=#FF0000>Eliminating
Software Errors</FONT></B></A></H2>
<P>
Programs are reliable, in part, because they are able to cope
with errors and exceptions that occur during their execution.
The development of reliable, error-tolerant software is a multiphase
effort that spans program design, coding, compilation, loading,
and execution.
<P>
The most serious errors are those that are designed into a program.
Many design errors can be eliminated by following a sound development
approach, using modern software engineering methods, and making
a firm commitment to software quality. The use of an object-oriented
approach to software development helps to simplify software design,
reduce errors, and promote software reliability.
<P>
Programming errors initially occur when a software design is translated
into source code. Program verification, validation, analysis,
and test activities help to eliminate design and programming errors.
The implementation of coding standards and code walkthroughs also
reduces the likelihood of undetected programming errors.
<P>
The Java language eliminates whole classes of errors that result
from the use of dangerous programming constructs such as pointers
and automatic type conversions. The simplicity and familiarity
of the language also reduce the occurrence of programming errors.
<P>
The Java compiler and runtime environment help to keep errors
from being introduced into executable Java code. The compiler
performs extensive type checking to ensure that objects are correctly
referenced and updated and that methods are properly invoked.
The runtime system duplicates compile-time checks and implements
additional checks to verify that executable code follows established
rules for program correctness.
<P>
With all the error checking that takes place before a program
is executed, you might think that it would be unlikely that errors
could still creep into a program. They can and always do, in accordance
with Murphy's Law. Runtime error and exception handling is used
to identify error conditions and perform processing that minimizes
their impact.
<H2><A NAME="ErrorProcessingandExceptions"><B><FONT SIZE=5 COLOR=#FF0000>Error
Processing and Exceptions</FONT></B></A></H2>
<P>
Java provides superior support for runtime error and exception
handling, allowing programs to check for anomalous conditions
and respond to them with minimal impact on the normal flow of
program execution. This allows error- and exception-handling code
to be added easily to existing methods.
<P>
Exceptions are generated by the Java runtime system in response
to errors that are detected when classes are loaded and their
methods are executed. The runtime system is said to <I>throw</I>
these <I>runtime exceptions</I>. Runtime exceptions are objects
of the class <TT>java.lang.RuntimeException</TT> or of its subclasses.
<P>
Exceptions may also be thrown directly by Java code using the
<TT>throw</TT> statement. These exceptions are thrown when code
detects a condition that could potentially lead to a program malfunction.
The exceptions thrown by user programs are generally not objects
of a subclass of <TT>RuntimeException</TT>. These non-runtime
exceptions are referred to as <I>program</I> exceptions.<BR>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
It is possible for user programs to throw runtime exceptions, but it is almost always a bad programming practice.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Both program and runtime exceptions must be caught in order for
them to be processed by exception-handling code. If a thrown exception
is not caught, its thread of execution is terminated and an error
message is displayed on the Java console window.
<P>
The approach used by Java to catch and handle exceptions is to
surround blocks of statements for which exception processing is
to be performed with a <TT>try</TT> statement. The <TT>try</TT>
statement contains a <TT>catch</TT> clause that identifies what
processing is to be performed for different types of exceptions.
When an exception occurs, the Java runtime system matches the
exception to the appropriate <TT>catch</TT> clause. The <TT>catch</TT>
clause then handles the exception in an appropriatemanner.
<H2><A NAME="ThrowingExceptions"><B><FONT SIZE=5 COLOR=#FF0000>Throwing
Exceptions</FONT></B></A></H2>
<P>
Exceptions are thrown using the <TT>throw</TT> statement. Its
syntax is as follows:
<BLOCKQUOTE>
<TT>throw <I><FONT FACE="Courier New">Expression;</FONT></I></TT>
</BLOCKQUOTE>
<P>
<TT><I><FONT FACE="Courier New">Expression</FONT></I></TT> must
evaluate to an object that is an instance of a subclass of the
<TT>java.lang.Exception</TT> class. The <TT>Exception</TT> class
is defined in the Java API. When an exception is thrown, execution
does not continue after the <TT>throw</TT> statement. Instead,
it continues with any code that catches the exception. If an exception
is not caught, the current thread of execution is terminated and
an error is displayed on the console window.
<P>
For example, the following statement will throw an exception,
using an object of class <TT>ExampleException</TT>:
<BLOCKQUOTE>
<TT>throw new ExampleException();</TT>
</BLOCKQUOTE>
<P>
The <TT>new</TT> operator is invoked with the <TT>ExampleException()</TT>
constructor to allocate and initialize an object of class <TT>ExampleException</TT>.
This object is then thrown by the <TT>throw</TT> statement.<BR>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=590>
<BLOCKQUOTE>
A <TT>throw</TT> statement can throw an object of any class that is a subclass of <TT>java.lang.Throwable</TT>; however, it is wise to stick with the standard convention of only throwing objects that are a subclass of class <TT>Exception</TT>.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="DeclaringExceptions"><B><FONT SIZE=5 COLOR=#FF0000>Declaring
Exceptions</FONT></B></A></H2>
<P>
A method's <TT>throws</TT> clause lists the types of exceptions
that can be thrown during a method's execution. The <TT>throws</TT>
clause appears immediately before a method's body in the method
declaration. For example, the following method throws the <TT>ExampleException</TT>:
<BLOCKQUOTE>
<TT>public void exampleMethod() throws ExampleException {<BR>
<FONT FACE="Courier New">&nbsp;throw new ExampleException();<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
When more than one exception may be thrown during the execution
of a method, the exceptions are separated by commas in the <TT>throws</TT>
clause. For example, the following method can throw either the
<TT>Test1Exception</TT> or the <TT>Test2Exception</TT>:
<BLOCKQUOTE>
<TT>public void testMethod(int i) throws Test1Exception, Test2Exception
{<BR>
<FONT FACE="Courier New">&nbsp;if(i==1) throw new Test1Exception();
<BR>
&nbsp;if(i==2) throw new Test2Exception();<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The types identified in the <TT>throws</TT> clause must be capable
of being legally assigned to the exceptions that may be thrown.
<H2><A NAME="DeclareorCatch"><B><FONT SIZE=5 COLOR=#FF0000>Declare
or Catch?</FONT></B></A></H2>
<P>
If a program exception can be thrown during the execution of a
method, the method must either catch the expression or declare
it in the <TT>throws</TT> clause of its method declaration. If
an exception is not caught, it must be declared, even if it is
thrown in other methods that are invoked during the method's execution.
<P>
For example, suppose that method A of object X invokes method
B of object Y, which invokes method C of object Z. If method C
throws an exception, it must be caught by method C or declared
in method C's <TT>throws</TT> clause. If it is not caught by method
C, it must be caught by method B or declared in method B's <TT>throws</TT>
clause. Similarly, if the exception is not caught by method B,
it must be caught by method A or declared in method A's <TT>throws</TT>
clause. The handling of exceptions is a hierarchical process that
mirrors the method invocation hierarchy (or <I>call tree</I>).
Either an exception is caught by a method and removed from the
hierarchy or it must be declared and propagated back through the
method invocation hierarchy.<BR>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=569>
<BLOCKQUOTE>
Because runtime exceptions can occur almost anywhere in a program's execution, the catch-or-declare requirement applies only to program exceptions.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The <TT>CDrawApp</TT> programs of <A HREF="ch5.htm" >Chapters 5</A>,
&quot;Classes and Objects,&quot; and <A HREF="ch6.htm" >6</A>,
&quot;Interfaces,&quot; provide an extended example of the declaration
of uncaught exceptions. The <TT>jdg.ch05.KeyboardInput</TT> class
contains three access methods that use the <TT>readLine()</TT>
method: <TT>getChar()</TT>, <TT>getText()</TT>, and <TT>getInt()</TT>.
The <TT>readLine()</TT> method is inherited from the <TT>DataInputStream</TT>
class. It throws an exception of class <TT>IOException</TT>. Because
the <TT>getChar()</TT>, <TT>getText()</TT>, and <TT>getInt()</TT>
methods invoke the <TT>readLine()</TT> method, they must either
catch the exception or declare it in their <TT>throws</TT> clauses.
None of these methods catches <TT>IOException</TT>; therefore,
all declare it in their <TT>throws</TT> clauses. The <TT>getCommand()</TT>
method of class <TT>CDraw</TT> invokes the <TT>getChar()</TT>
method of an object of class <TT>KeyboardMethod</TT>. It does
not catch <TT>IOExeption</TT>, so it also must declare it. Because
the <TT>run()</TT> method of class <TT>CDraw</TT> invokes the
<TT>getCommand()</TT> method, it too is faced with catching or
declaring <TT>IOException</TT>. Because <TT>run()</TT> declares
<TT>IOException</TT> and the <TT>main()</TT> method of <TT>CDrawApp</TT>
invokes the <TT>run()</TT> method for a <TT>CDraw</TT> object,
it also must declare <TT>IOException</TT> in its <TT>throws</TT>
clause.
<P>
At this point you are probably coming to the conclusion that it
is a lot easier to catch and handle an exception than to declare
it throughout the class hierarchy. If so, you have discovered
a key benefit of Java's exception-handling approach. Java makes
it easier to develop more-reliable software and harder to develop
less-reliable software. If you are a lazy programmer like me,
Java will exploit your tendency to do things the easy way to encourage
you to do things the right way.
<H2><A NAME="UsingthetryStatement"><B><FONT SIZE=5 COLOR=#FF0000>Using
the </FONT></B><TT><B><FONT SIZE=5 COLOR=#FF0000 FACE="Courier New">try</FONT></B></TT><B><FONT SIZE=2 COLOR=#FF0000>
</FONT><FONT SIZE=5 COLOR=#FF0000>Statement</FONT></B></A></H2>
<P>
Statements for which exception processing is to be performed are
surrounded by a <TT>try</TT> statement with a valid <TT>catch</TT>
or <TT>finally</TT> clause. The syntax of the <TT>try</TT> statement
is as follows:
<BLOCKQUOTE>
<TT>try TryBlock CatchClauses FinallyClause;</TT>
</BLOCKQUOTE>
<P>
At least one <TT>catch</TT> clause or <TT>finally</TT> clause
must be defined. More than one <TT>catch</TT> clause may be used,
but no more than one <TT>finally</TT> clause may be identified.
<P>
The <TT><I><FONT FACE="Courier New">try</FONT></I></TT><I> block</I>
is a sequence of Java statements that are preceded by an opening
brace (<TT>{</TT>) and followed by a closing brace (<TT>}</TT>).
<P>
The <TT>catch</TT> clauses are a sequence of clauses of the form:
<BLOCKQUOTE>
<TT>catch (<I><FONT FACE="Courier New">Parameter</FONT></I>) {
<BR>
<FONT FACE="Courier New">/*<BR>
* Exception handling statements<BR>
*/<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
<TT><I><FONT FACE="Courier New">Parameter</FONT></I></TT> is a
variable that is declared to be a class or interface. The statements
within the <TT>catch</TT> clause are used to process the exceptions
that they &quot;catch,&quot; as I'll explain shortly.
<P>
The <TT>finally</TT> clause identifies a block of code that is
to be executed at the conclusion of the <TT>try</TT> statement
and after any <TT>catch</TT> clauses. Its syntax is as follows:
<BLOCKQUOTE>
<TT>finally {<BR>
<FONT FACE="Courier New">/*<BR>
* Statements in finally clause<BR>
*/<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>finally</TT> clause is always executed, no matter whether
an exception is thrown.
<H2><A NAME="CatchingExceptions"><B><FONT SIZE=5 COLOR=#FF0000>Catching
Exceptions</FONT></B></A></H2>
<P>
The <TT>try</TT> statement executes a statement block. If an exception
is thrown during the block's execution, it terminates execution
of the statement block and checks the <TT>catch</TT> clauses to
determine which, if any, of the <TT>catch</TT> clauses can catch
the thrown exception. If none of the <TT>catch</TT> clauses can
catch the exception, the exception is propagated to the next higher
level <TT>try</TT> statement. This process is repeated until the
exception is caught or no more <TT>try</TT> statements remain.
<P>
A <TT>catch</TT> clause can catch an exception if its argument
may be legally assigned the object thrown in the <TT>throw</TT>
statement. If the argument of a <TT>catch</TT> clause is a class,
the <TT>catch</TT> clause can catch any object whose class is
a subclass of this class. If the argument to a <TT>catch</TT>
clause is an interface, the <TT>catch</TT> clause can catch any
object that implements that interface.
<P>
The <TT>try</TT> statement tries each <TT>catch</TT> clause, in
order, and selects the first one that can catch the exception
that was thrown. It then executes the statements in the <TT>catch</TT>
clause. If a <TT>finally</TT> clause occurs in the <TT>try</TT>
statement, the statements in the <TT>finally</TT> clause are executed
after execution of the <TT>catch</TT> clause has been completed.
Execution then continues with the statement following the <TT>try</TT>
statement.
<P>
The following example shows how <TT>catch</TT> clauses are used
to process exceptions that are thrown within the <TT>try</TT>
statement. Create a directory <TT>ch07</TT> under <TT>c:\java\jdg</TT>
and enter the source code in the file <TT>ExceptionTest.java</TT>.
Compile it using the command <TT>javac ExceptionTest.java</TT>.
The source code for the <TT>ExceptionTest</TT> program is shown
in Listing 7.1.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 7.1. The source code of the ExceptionTest program.</B><P>
<TT>import jdg.ch05.KeyboardInput;<BR>
<FONT FACE="Courier New">import java.lang.System;<BR>
import java.lang.Exception;<BR>
import java.io.IOException;<BR>
<BR>
class VowelException extends Exception {}<BR>
class BlankException extends Exception {}<BR>
class ExitException extends Exception {}<BR>
<BR>
class ExceptionTest {<BR>
&nbsp;static KeyboardInput kbd = new KeyboardInput(System.in);
<BR>
&nbsp;public static void main(String args[]) {<BR>
&nbsp;&nbsp;boolean finished = false;<BR>
&nbsp;&nbsp;do {<BR>
&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;processUserInput();<BR>
&nbsp;&nbsp;&nbsp;}catch (VowelException x) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;A vowel exception
occurred.&quot;);<BR>
&nbsp;&nbsp;&nbsp;}catch (BlankException x) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;A blank exception
occurred.&quot;);<BR>
&nbsp;&nbsp;&nbsp;}catch (ExitException x) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;An exit exception
occurred.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;finished = true;<BR>
&nbsp;&nbsp;&nbsp;}finally {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;This is the finally
clause.\n&quot;);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;} while(!finished);<BR>
&nbsp;}<BR>
&nbsp;static void processUserInput() throws VowelException, BlankException,
<BR>
&nbsp;&nbsp;ExitException {<BR>
&nbsp;&nbsp;System.out.print(&quot;Enter a character: &quot;);
<BR>
&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;char ch;<BR>
&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;ch=Character.toUpperCase(kbd.getChar());<BR>
&nbsp;&nbsp;} catch (IOException x) {<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot;An IOException occurred.&quot;);
<BR>
&nbsp;&nbsp;&nbsp;return;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;switch(ch) {<BR>
&nbsp;&nbsp;&nbsp;case 'A':<BR>
&nbsp;&nbsp;&nbsp;case 'E':<BR>
&nbsp;&nbsp;&nbsp;case 'I':<BR>
&nbsp;&nbsp;&nbsp;case 'O':<BR>
&nbsp;&nbsp;&nbsp;case 'U':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;throw new VowelException();<BR>
&nbsp;&nbsp;&nbsp;case ' ':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;throw new BlankException();<BR>
&nbsp;&nbsp;&nbsp;case 'X':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;throw new ExitException();<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT>ExceptionTest</TT> program uses the <TT>jdg.ch05.KeyboardInput</TT>
class to retrieve a character entered by the user. It then throws
and catches a <TT>VowelException</TT>, <TT>BlankException</TT>,
or <TT>ExitException</TT> based on the user's input.
<P>
The <TT>ExceptionTest</TT> class consists of a single class variable,
<TT>kbd</TT>, that is statically initialized to an object of class
<TT>KeyboardInput</TT>, with <TT>System.in</TT> as an argument
to its constructor.
<P>
<TT>ExceptionTest</TT> provides two <TT>static</TT> methods, <TT>main()</TT>
and <TT>processUserInput()</TT>. The <TT>main()</TT> method consists
of a simple <TT>do</TT> statement that repeatedly tries to invoke
<TT>processUserInput()</TT>. The <TT>try</TT> statement has three
<TT>catch</TT> clauses and a <TT>finally</TT> clause. The three
<TT>catch</TT> clauses notify the user of the type of exception
they catch. The <TT>catch</TT> clause with an <TT>ExitException</TT>
parameter causes the <TT>do</TT> statement and the program to
terminate by setting <TT>finished</TT> to <TT>true</TT>. The <TT>finally</TT>
clause just displays the fact that it has been executed.
<P>
The <TT>processUserInput()</TT> method prompts the user to enter
a character. The actual reading of the character occurs within
a <TT>try</TT> statement. <TT>IOException</TT> is caught by the
<TT>try</TT> statement, eliminating the need to declare the exception
in the <TT>processUserInput()</TT> <TT>throws</TT> clause. The
<TT>IOException</TT> is handled by notifying the user that the
exception occurred and continuing with program execution.
<P>
The <TT>processUserInput()</TT> method throws one of three exceptions
based upon the character entered by the user. If the user enters
a vowel, <TT>VowelException</TT> is thrown. If the user enters
a line beginning with a non-printable character, <TT>BlankException</TT>
is thrown. If the user enters <TT>x</TT> or <TT>X</TT>, <TT>ExitException</TT>
is thrown.
<P>
To run <TT>ExceptionTest</TT>, type <TT>javac ExceptionTest</TT>:
<BLOCKQUOTE>
<TT>C:\java\jdg\ch07&gt;java ExceptionTest<BR>
<FONT FACE="Courier New">Enter a character:</FONT></TT>
</BLOCKQUOTE>
<P>
The program prompts you to enter a character. Enter a blank line,
and the following output is displayed:
<BLOCKQUOTE>
<TT>A blank exception occurred.<BR>
<FONT FACE="Courier New">This is the finally clause.<BR>
<BR>
Enter a character:</FONT></TT>
</BLOCKQUOTE>
<P>
The program notifies you that a blank exception has occurred and
displays the fact that the <TT>finally</TT> clause of the <TT>main()</TT>
<TT>try</TT> statement was executed. The <TT>processUserInput()</TT>
method, upon encountering a space character returned by <TT>getChar()</TT>,
throws the <TT>BlankException</TT>, which is caught by the <TT>main()</TT>
method. The <TT>finally</TT> clause always executes no matter
whether <TT>processUserInput()</TT> throws an exception or not.
<P>
Enter <TT>a</TT> at the program prompt, and the following output
appears:
<BLOCKQUOTE>
<TT>Enter a character: a<BR>
<FONT FACE="Courier New">A vowel exception occurred.<BR>
This is the finally clause.<BR>
<BR>
Enter a character:</FONT></TT>
</BLOCKQUOTE>
<P>
Here the program notifies you that a vowel exception has occurred.
The processing of the vowel exception is similar to the blank
exception. See if you can trace the program flow of control involved
in this processing.
<P>
Enter <TT>j</TT>, and the following is displayed:
<BLOCKQUOTE>
<TT>Enter a character: j<BR>
<FONT FACE="Courier New">This is the finally clause.<BR>
Enter a character:</FONT></TT>
</BLOCKQUOTE>
<P>
No exceptions are thrown for the <TT>j</TT> character, but the
<TT>finally</TT> clause is executed. The <TT>finally</TT> clause
is always executed, no matter what happens during the execution
of a <TT>try</TT> statement. Go ahead and type <TT>x</TT> to exit
the <TT>ExceptionTest</TT> program. The program displays the following
output:
<BLOCKQUOTE>
<TT>Enter a character: x<BR>
<FONT FACE="Courier New">An exit exception occurred.<BR>
This is the finally clause.</FONT></TT>
</BLOCKQUOTE>
<P>
The exception then returns you to the DOS prompt.
<P>
The output acknowledges the fact that the exit exception was thrown
by <TT>processUserInput()</TT> and caught by <TT>main()</TT>.
<P>
The <TT>ExceptionTest</TT> program provides a simple example of
exception throwing and catching. The example in the following
section illustrates more complex exception handling.
<H2><A NAME="NestedExceptionHandling"><B><FONT SIZE=5 COLOR=#FF0000>Nested
Exception Handling</FONT></B></A></H2>
<P>
<TT>try</TT> statements can be nested to provide multiple levels
of exception-handling capabilities. This is accomplished by enclosing
a method or block of statements containing a lower-level <TT>try</TT>
statement within the <TT>try</TT> block of a higher-level <TT>try</TT>
statement. When an exception is thrown in the <TT>try</TT> block
of the lower-level <TT>try</TT> statement that cannot be caught,
it continues to be thrown until it reaches the higher-level <TT>try</TT>
statement. The higher-level <TT>try</TT> statement can then determine
whether the exception can be caught and processed by any of its
<TT>catch</TT> clauses. Any number of <TT>try</TT> statements
can be nested. <A HREF="f7-1.gif" >Figure 7.1</A> illustrates
this concept.
<P>
<A HREF="f7-1.gif" >Figure 7.1 </B>: <I>Nested exception handling:
An exception generated within the lower-level <TT>try</TT> statement
is first passed to its <TT>catch</TT> clause(s). If it is not
handled, it is propagated to the higher-level <TT>catch</TT> clause(s).
If it is not handled by the higher-level <TT>catch</TT> clause(s),
it is propagated further up the exception-handling hierarchy.</I></A><P>
<H2><A NAME="RethrowingExceptions"><B><FONT SIZE=5 COLOR=#FF0000>Rethrowing
Exceptions</FONT></B></A></H2>
<P>
When an exception is caught in the <TT>catch</TT> clause of a
<TT>try</TT> statement, that exception may be rethrown. When an
exception is rethrown, it can then be caught and processed by
the <TT>catch</TT> clause of a higher-level <TT>try</TT> statement.
A higher-level <TT>catch</TT> clause can then perform any secondary
clean-up processing.
<P>
The following example illustrates nested exception handling and
the rethrowing of exceptions. Enter the source code shown in Listing
7.2 into <TT>NestedExceptionTest.java</TT> and compile it.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 7.2. The source code of the </B><TT><B><FONT FACE="Courier New">NestedExceptionTest</FONT></B></TT><B>
program.</B><P>

<TT>import jdg.ch05.KeyboardInput;<BR>
<FONT FACE="Courier New">import java.lang.System;<BR>
import java.lang.Exception;<BR>
import java.io.IOException;<BR>
<BR>
class VowelException extends Exception {}<BR>
class BlankException extends Exception {}<BR>
class ExitException extends Exception {}<BR>
<BR>
class NestedExceptionTest {<BR>
&nbsp;static KeyboardInput kbd = new KeyboardInput(System.in);
<BR>
&nbsp;public static void main(String args[]) {<BR>
&nbsp;&nbsp;do{} while(!exitExceptionTest());<BR>
&nbsp;}<BR>
&nbsp;static boolean exitExceptionTest() {<BR>
&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;vowelExceptionTest();<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot;Acceptable.\n&quot;);
<BR>
&nbsp;&nbsp;}catch (ExitException x) {<BR>
&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(&quot;Exit (y/n): &quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;char ch = Character.toUpperCase(kbd.getChar());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(ch=='Y') return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;else return false;<BR>
&nbsp;&nbsp;&nbsp;}catch (IOException iox) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}catch (Exception x) {<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot;Not acceptable. Try
again.\n&quot;);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
&nbsp;static void vowelExceptionTest() throws VowelException,
ExitException {<BR>
&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;blankExceptionTest();<BR>
&nbsp;&nbsp;}catch (BlankException x) {<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot;Next time type a printable
character.\n&quot;);<BR>
&nbsp;&nbsp;&nbsp;vowelExceptionTest();<BR>
&nbsp;&nbsp;}catch (VowelException x) {<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot;You typed a vowel.&quot;);
<BR>
&nbsp;&nbsp;&nbsp;throw x;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;static void blankExceptionTest() throws VowelException,
BlankException,<BR>
&nbsp;&nbsp;ExitException {<BR>
&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;processUserInput();<BR>
&nbsp;&nbsp;}catch (BlankException x) {<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot;You entered a blank
line. Try again.&quot;);<BR>
&nbsp;&nbsp;&nbsp;throw x;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;static void processUserInput() throws VowelException, BlankException,
<BR>
&nbsp;&nbsp;ExitException {<BR>
&nbsp;&nbsp;System.out.print(&quot;Enter a character: &quot;);
<BR>
&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;char ch;<BR>
&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;ch=Character.toUpperCase(kbd.getChar());<BR>
&nbsp;&nbsp;} catch (IOException x) {<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot;An IOException occurred.&quot;);
<BR>
&nbsp;&nbsp;&nbsp;return;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;switch(ch) {<BR>
&nbsp;&nbsp;&nbsp;case 'A':<BR>
&nbsp;&nbsp;&nbsp;case 'E':<BR>
&nbsp;&nbsp;&nbsp;case 'I':<BR>
&nbsp;&nbsp;&nbsp;case 'O':<BR>
&nbsp;&nbsp;&nbsp;case 'U':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;throw new VowelException();<BR>
&nbsp;&nbsp;&nbsp;case ' ':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;throw new BlankException();<BR>
&nbsp;&nbsp;&nbsp;case 'X':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;throw new ExitException();<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
This example is based on the previous example, but it is significantly
more complex. The exception handling has been removed from the
<TT>main()</TT> method and distributed among three nested exception
handlers: <TT>exitExceptionTest()</TT>, <TT>vowelExceptionTest()</TT>,
and <TT>blankExceptionTest()</TT>.
<P>
The <TT>main()</TT> method invokes <TT>exitExceptionTest()</TT>
at each iteration of the <TT>do</TT> statement. The <TT>exitExceptionTest()</TT>
method returns a <TT>boolean</TT> value indicating whether the
<TT>do</TT> statement should terminate. The normal (non-exception)
processing performed by <TT>exitExceptionTest()</TT> consists
of the following three statements:
<BLOCKQUOTE>
<TT>vowelExceptionTest();<BR>
<FONT FACE="Courier New">System.out.println(&quot;Acceptable.\n&quot;);
<BR>
return false;</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
All other <TT>exitExceptionTest()</TT> processing is error handling.
The first two statements are executed within the <TT>try</TT>
statement and are subject to error processing. The last statement
executes upon completion of the <TT>try</TT> statement, assuming
that no transfer of control occurs as the result of exception
handling involving the <TT>catch</TT> clauses.
<P>
The <TT>try</TT> statement has two <TT>catch</TT> clauses. The
first <TT>catch</TT> clause handles <TT>ExitException</TT> processing.
It consists of a <TT>try</TT> statement with a <TT>catch</TT>
clause that catches the pesky <TT>IOException</TT>. The <TT>try</TT>
statement contains a block of statements that asks the user for
a confirmation before exiting the program.
<P>
The second <TT>catch</TT> clause catches all other objects that
are instances of a subclass of <TT>Exception</TT>. It displays
a short warning to the user.
<P>
The <TT>vowelExceptionTest()</TT> method consists of a <TT>try</TT>
statement that invokes <TT>blankExceptionTest()</TT>. The rest
of the processing performed by <TT>vowelExceptionTest()</TT> is
exception handling. It catches two exceptions: <TT>BlankException</TT>
and <TT>VowelException</TT>. It handles <TT>BlankException</TT>
by warning the user to type a printable character and reinvoking
itself. It handles the vowel exception by notifying the user that
he typed a vowel and rethrowing the <TT>VowelException</TT>. By
rethrowing the exception, it allows <TT>exitExceptionTest()</TT>
to perform additional exception handling. Because <TT>vowelExceptionTest()</TT>
rethrows the <TT>VowelException</TT>, it must declare it in its
<TT>throws</TT> clause. It also must declare the <TT>ExitException</TT>
because the <TT>ExitException</TT> is declared in the <TT>throws</TT>
clause of <TT>blankExceptionTest()</TT> and is not caught by <TT>vowelExceptionTest()</TT>.
<P>
The <TT>blankExceptionTest()</TT> simply invokes <TT>processUserInput()</TT>
as part of its normal processing. It handles one exception thrown
by <TT>processUserInput()</TT>: the <TT>BlankException</TT>. It
handles the <TT>BlankException</TT> by informing the user that
he typed a blank line and that he should try again. It then rethrows
the <TT>BlankException</TT> so that it can be rehandled by <TT>vowelExceptionTest()</TT>.
<P>
The <TT>processUserInput()</TT> method performs in the same manner
as described in the previous example.
<H3><A NAME="AnalysisofNestedExceptionTest"><B>Analysis of </B><TT><B><FONT SIZE=4 FACE="Courier New">NestedExceptionTest</FONT></B></TT></A>
</H3>
<P>
If <TT>NestedExceptionTest</TT> seems overly complex, don't worry-it
was meant to be. Its purpose is to give you a good understanding
of the complex ways that exception handlers can be nested and
how exceptions are rethrown. Go ahead and run <TT>NestedExceptionTest</TT>
using the command <TT>java NestedExceptionTest</TT>:
<BLOCKQUOTE>
<TT>C:\java\jdg\ch07&gt;java NestedExceptionTest<BR>
<FONT FACE="Courier New">Enter a character:</FONT></TT>
</BLOCKQUOTE>
<P>
When you run <TT>NestedExceptionTest</TT>, the <TT>main()</TT>
method invokes <TT>exitExceptionTest()</TT>, which invokes <TT>vowelExceptionTest()</TT>,
which invokes <TT>blankExceptionTest()</TT>, which invokes <TT>processUserInput()</TT>.
The <TT>processUserInput()</TT> method prompts you to enter a
character and then does one of four things, depending on the character
you enter. If you enter a vowel, it throws a <TT>VowelException</TT>.
If you enter a nonprintable character or blank line, it throws
a <TT>BlankException</TT>. If you enter <TT>x</TT> or <TT>X</TT>,
it throws an <TT>ExitException</TT>. Finally, as a default, if
you enter any other printable character, it will simply return
control to the <TT>blankExceptionTest()</TT> method.
<P>
Let's work through all four scenarios. First, enter <TT>j</TT>
to cause normal program processing to occur:
<BLOCKQUOTE>
<TT>Enter a character: j<BR>
<FONT FACE="Courier New">Acceptable.<BR>
<BR>
Enter a character:</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>processUserInput()</TT> method returns control to <TT>blankExceptionTest()</TT>,
which returns control to <TT>vowelExceptionTest()</TT>, which
returns control to <TT>exitExceptionTest()</TT>. The <TT>exitExceptionTest()</TT>
method informs the user that he has entered an acceptable character
and returns control to the <TT>main()</TT> method, which starts
another character-input cycle.
<P>
Now let's go through the case when the user enters a blank line.
Just enter a blank line at the prompt:
<BLOCKQUOTE>
<TT>Enter a character:<BR>
<FONT FACE="Courier New">You entered a blank line. Try again.
<BR>
Next time type a printable character.<BR>
<BR>
Enter a character:</FONT></TT>
</BLOCKQUOTE>
<P>
A blank line causes <TT>processUserInput()</TT> to throw the <TT>BlankException</TT>.
This exception is caught by <TT>blankExceptionTest()</TT>. The
<TT>blankExceptionTest()</TT> method handles the exception by
informing the user that he has entered a blank line and that he
should try again. It then rethrows the exception, and the rethrown
exception is caught by <TT>vowelExceptionTest()</TT>. The <TT>vowelExceptionTest()</TT>
method handles the rethrown <TT>BlankException</TT> by telling
the user that he should enter a printable character the next time
he is prompted. It then invokes itself, starting the character-input
cycle all over.
<P>
Let's go through the case when the user enters a vowel. Enter
<TT>a</TT> at the prompt:
<BLOCKQUOTE>
<TT>Enter a character: a<BR>
<FONT FACE="Courier New">You typed a vowel.<BR>
Not acceptable. Try again.<BR>
<BR>
Enter a character:</FONT></TT>
</BLOCKQUOTE>
<P>
When a vowel is entered, <TT>processUserInput()</TT> throws the
<TT>VowelException</TT>. The <TT>VowelException</TT> is not caught
by <TT>blankExceptionTest()</TT> and continues to be thrown until
it is caught by <TT>vowelExceptionTest()</TT>. The <TT>vowelExceptionTest()</TT>
method handles the exception by informing the user that he has
typed a vowel and then rethrows the exception. The rethrown exception
is caught by <TT>exitExceptionTest()</TT>, and <TT>exitExceptionTest()</TT>
handles it by informing the user that his input is not acceptable.
Execution control returns to the <TT>main()</TT> method, which
starts another character-input cycle.
<P>
This last case examines what happens when the user types <TT>x</TT>
at the character prompt. Enter <TT>x</TT> to see what happens:
<BLOCKQUOTE>
<TT>Enter a character: x<BR>
<FONT FACE="Courier New">Exit (y/n):</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>processUserInput()</TT> method throws an <TT>ExitException</TT>,
which is not caught by <TT>blankExceptionTest()</TT> nor <TT>vowelExceptionTest()</TT>.
The exception continues to be thrown until it is caught by <TT>exitExceptionTest()</TT>.
The <TT>exitExceptionTest()</TT> method prompts the user to enter
a <TT>y</TT> or <TT>Y</TT> to confirm the fact that he wants to
exit the program. If the user enters any other character, control
returns to the <TT>main()</TT> method and another character-input
cycle is initiated. If the user enters a <TT>y</TT> or <TT>Y</TT>,
control is returned to the <TT>main()</TT> method, but the <TT>true</TT>
return value is passed, causing the <TT>do</TT> statement and
the program to terminate.
<P>
Go ahead and type <TT>y</TT> to terminate the <TT>NestedExceptionTest</TT>
program.
<H2><A NAME="Summary"><B><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></B></A>
</H2>
<P>
In this chapter you have learned how to use Java exceptions to
implement error-handling capabilities in your Java programs. You
have learned how to throw exceptions in response to error conditions
and how to catch exceptions to perform error processing. You have
also learned how to implement nested exception handling and how
to rethrow exceptions. In <A HREF="ch8.htm" >Chapter 8</A>, &quot;Multithreading,&quot;
you will learn how to use Java's multithreading capabilities to
write programs that use multiple threads of execution.
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



