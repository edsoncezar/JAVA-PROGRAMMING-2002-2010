<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META>
<H1><FONT COLOR=#FF0000>Chapter 21</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Checkboxes, Choices, and Lists</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#UsingCheckboxes" >Using Checkboxes</A>
<UL>
<LI><A HREF="#TheCheckboxPanelClass" >The CheckboxPanel Class</A>
</UL>
<LI><A HREF="#WorkingwithRadioButtons" >Working with Radio Buttons</A>
<UL>
<LI><A HREF="#TheCheckboxGroupPanelClass" >The CheckboxGroupPanel Class</A>
</UL>
<LI><A HREF="#TheCheckboxAppProgram" >The CheckboxApp Program</A>
<LI><A HREF="#MakingChoices" >Making Choices</A>
<UL>
<LI><A HREF="#TheMyChoiceClass" >The MyChoice Class</A>
</UL>
<LI><A HREF="#SelectingfromLists" >Selecting from Lists</A>
<UL>
<LI><A HREF="#TheMyListClass" >The MyList Class</A>
</UL>
<LI><A HREF="#TheChoiceListAppProgram" >The ChoiceListApp Program</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
This chapter covers the details of using the <TT><FONT FACE="Courier">Checkbox</FONT></TT>,
<TT><FONT FACE="Courier">Choice</FONT></TT>, and <TT><FONT FACE="Courier">List</FONT></TT>
classes. It shows you how to create and use objects of these classes
and how to create custom components that simplify the use of these
GUI controls. When you finish this chapter, you will be able to
effectively use checkboxes, radio buttons, choices, and lists
in your Java window programs.
<H2><A NAME="UsingCheckboxes"><FONT SIZE=5 COLOR=#FF0000>Using
Checkboxes</FONT></A></H2>
<P>
<I>Checkboxes</I> are a common type of GUI control. They are typically
used in form-like windows to simplify yes/no or true/false selections.
The user checks a checkbox to indicate yes or true, and leaves
it unchecked to indicate no or false.
<P>
The name of the <TT><FONT FACE="Courier">Checkbox</FONT></TT>
class is somewhat misleading in that <TT><FONT FACE="Courier">Checkbox</FONT></TT>
objects are used to implement traditional checkboxes as well as
radio buttons.
<P>
<I>Radio buttons</I> are similar to traditional checkboxes in
that they are in either an on or off state. They are different
from traditional checkboxes in that only one radio button in a
group may be on at a given time. They are aptly named after the
buttons on a car radio, which can only be used to select a single
radio channel at a given time.
<P>
When <TT><FONT FACE="Courier">Checkbox</FONT></TT> objects are
used as radio buttons, they are associated with a <TT><FONT FACE="Courier">CheckboxGroup</FONT></TT>
object that enforces mutual exclusion among the <TT><FONT FACE="Courier">Checkbox</FONT></TT>
objects in its group.
<H3><A NAME="TheCheckboxPanelClass">The <TT><FONT SIZE=4 FACE="Courier">CheckboxPanel</FONT></TT><FONT SIZE=4>
Class</FONT></A></H3>
<P>
Checkboxes, like menus, are easy to use but tedious to construct
and organize. The <TT><FONT FACE="Courier">CheckboxPanel</FONT></TT>
class provides a more convenient approach to creating and organizing
checkboxes. (See Listing 21.1.) Typically, checkboxes are created
in groups and organized in a panel that is given a title. The
<TT><FONT FACE="Courier">CheckboxPanel</FONT></TT> class provides
a constructor for quickly creating objects of this type. It also
provides access methods for getting and setting the value of an
individual checkbox within the panel, based on the checkbox's
label.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 21.1. The </B><TT><B><FONT FACE="Courier">CheckboxPanel</FONT></B></TT><B>
class source code.</B><P>
<TT><FONT FACE="Courier">package jdg.ch21;<BR>
<BR>
import java.awt.*;<BR>
<BR>
public class CheckboxPanel extends Panel {<BR>
&nbsp;public static int HORIZONTAL = 0;<BR>
&nbsp;public static int VERTICAL = 1;<BR>
&nbsp;public CheckboxPanel(String title,String labels[],int orientation)
{<BR>
&nbsp;&nbsp;super();<BR>
&nbsp;&nbsp;int length = labels.length;<BR>
&nbsp;&nbsp;if(orientation == HORIZONTAL) setLayout(new GridLayout(1,length+1));
<BR>
&nbsp;&nbsp;else setLayout(new GridLayout(length+1,1));<BR>
&nbsp;&nbsp;add(new Label(title));<BR>
&nbsp;&nbsp;for(int i=0;i&lt;length;++i) add(new Checkbox(labels[i]));
<BR>
&nbsp;}<BR>
&nbsp;public CheckboxPanel(String title,String labels[],boolean
state[],<BR>
&nbsp;&nbsp;int orientation) {<BR>
&nbsp;&nbsp;super();<BR>
&nbsp;&nbsp;int length = labels.length;<BR>
&nbsp;&nbsp;if(orientation == HORIZONTAL) setLayout(new GridLayout(1,length+1));
<BR>
&nbsp;&nbsp;else setLayout(new GridLayout(length+1,1));<BR>
&nbsp;&nbsp;add(new Label(title));<BR>
&nbsp;&nbsp;for(int i=0;i&lt;length;++i){<BR>
&nbsp;&nbsp;&nbsp;Checkbox checkBox = new Checkbox(labels[i]);
<BR>
&nbsp;&nbsp;&nbsp;checkBox.setState(state[i]);<BR>
&nbsp;&nbsp;&nbsp;add(checkBox);<BR>
&nbsp;}<BR>
}<BR>
public boolean getState(String label) {<BR>
&nbsp;&nbsp;Checkbox boxes[] = (Checkbox[])getComponents();<BR>
&nbsp;&nbsp;for(int i=0;i&lt;boxes.length;++i)<BR>
&nbsp;&nbsp;&nbsp;if(label.equals(boxes[i].getLabel())) return
boxes[i].getState();<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
&nbsp;public void setState(String label,boolean state) {<BR>
&nbsp;&nbsp;Checkbox boxes[] = (Checkbox[])getComponents();<BR>
&nbsp;&nbsp;for(int i=0;i&lt;boxes.length;++i)<BR>
&nbsp;&nbsp;&nbsp;if(label.equals(boxes[i].getLabel())) boxes[i].setState(state);
<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Two <TT><FONT FACE="Courier">CheckboxPanel</FONT></TT> constructors
are provided. The first constructor uses a <TT><FONT FACE="Courier">title</FONT></TT>
string for the panel, an array of <TT><FONT FACE="Courier">labels[]</FONT></TT>
to be associated with checkboxes, and an <TT><FONT FACE="Courier">orientation</FONT></TT>
parameter that specifies whether the panel is to be organized
in a vertical or horizontal fashion.
<P>
A <TT><FONT FACE="Courier">GridLayout</FONT></TT> object is used
to organize the <TT><FONT FACE="Courier">Label</FONT></TT> and
<TT><FONT FACE="Courier">Checkbox</FONT></TT> objects placed within
the panel. The title <TT><FONT FACE="Courier">Label</FONT></TT>
is added at the top of vertical panels and on the left side of
horizontal panels. Then the checkboxes are created, one at a time,
and fill in the rest of the panel.
<P>
The second constructor is similar to the first constructor, except
that it uses an additional <TT><FONT FACE="Courier">state[]</FONT></TT>
array to set the initial state of the checkboxes that are added
to the panel. The state of each checkbox is set using the <TT><FONT FACE="Courier">setState()</FONT></TT>
method of the <TT><FONT FACE="Courier">Checkbox</FONT></TT> class.
<P>
The <TT><FONT FACE="Courier">getState()</FONT></TT> method takes
the label of a checkbox as its parameter and searches the checkboxes
contained in the panel for one whose label matches the specified
label. It then returns the state of this checkbox. If no matching
checkbox is found, it returns <TT><FONT FACE="Courier">false</FONT></TT>.
<P>
The <TT><FONT FACE="Courier">setState()</FONT></TT> method is
similar to the <TT><FONT FACE="Courier">getState()</FONT></TT>
method. It is used to update a checkbox with a given label.
<H2><A NAME="WorkingwithRadioButtons"><FONT SIZE=5 COLOR=#FF0000>Working
with Radio Buttons</FONT></A></H2>
<P>
Radio buttons are created using the <TT><FONT FACE="Courier">Checkbox</FONT></TT>
class and are transformed from checkboxes into radio buttons when
they are associated with a <TT><FONT FACE="Courier">CheckboxGroup</FONT></TT>
object. A <TT><FONT FACE="Courier">CheckboxGroup</FONT></TT> can
be assigned with the <TT><FONT FACE="Courier">Checkbox</FONT></TT>
constructor or using the <TT><FONT FACE="Courier">setCheckboxGroup()</FONT></TT>
method. Only one object in the checkbox group is allowed to be
set at any given time.
<H3><A NAME="TheCheckboxGroupPanelClass">The <TT><FONT SIZE=4 FACE="Courier">CheckboxGroupPanel</FONT></TT><FONT SIZE=4>
Class</FONT></A></H3>
<P>
The <TT><FONT FACE="Courier">CheckboxGroupPanel</FONT></TT> class
extends the <TT><FONT FACE="Courier">CheckboxPanel</FONT></TT>
class to work with radio buttons. Its source code is shown in
Listing 21.2.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 21.2. The source code for the </B><TT><B><FONT FACE="Courier">CheckboxGroupPanel</FONT></B></TT><B>
class.</B><P>
<TT><FONT FACE="Courier">package jdg.ch21;<BR>
<BR>
import java.awt.*;<BR>
<BR>
public class CheckboxGroupPanel extends CheckboxPanel {<BR>
&nbsp;public CheckboxGroupPanel(String title,String labels[],int
orientation) {<BR>
&nbsp;&nbsp;super(title,labels,orientation);<BR>
&nbsp;&nbsp;putInGroup();<BR>
&nbsp;}<BR>
&nbsp;public CheckboxGroupPanel(String title,String labels[],boolean
state[],<BR>
&nbsp;&nbsp;int orientation) {<BR>
&nbsp;&nbsp;super(title,labels,state,orientation);<BR>
&nbsp;&nbsp;putInGroup();<BR>
&nbsp;}<BR>
&nbsp;void putInGroup() {<BR>
&nbsp;&nbsp;Component components[] = getComponents();<BR>
&nbsp;&nbsp;int length = components.length;<BR>
&nbsp;&nbsp;CheckboxGroup group = new CheckboxGroup();<BR>
&nbsp;&nbsp;for(int i=1;i&lt;length;++i){<BR>
&nbsp;&nbsp;&nbsp;Checkbox checkBox = (Checkbox) components[i];
<BR>
&nbsp;&nbsp;&nbsp;checkBox.setCheckboxGroup(group);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT><FONT FACE="Courier">Checkbox</FONT></TT> panel constructors
are overridden to place the checkboxes in the panel in a single
group. If the second constructor is used, only one checkbox should
be specified as being in the on state.
<P>
The <TT><FONT FACE="Courier">putInGroup()</FONT></TT> method uses
the <TT><FONT FACE="Courier">getComponents()</FONT></TT> method
inherited from the <TT><FONT FACE="Courier">Container</FONT></TT>
class to create an array of the components contained in the panel.
It creates a <TT><FONT FACE="Courier">CheckboxGroup</FONT></TT>
object and then indexes through the array, putting all checkboxes
into this group using the <TT><FONT FACE="Courier">setCheckboxGroup()</FONT></TT>
method. The first component is skipped because it is the title
of the panel.
<H2><A NAME="TheCheckboxAppProgram"><FONT SIZE=5 COLOR=#FF0000>The
</FONT><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">CheckboxApp</FONT></TT><FONT SIZE=5 COLOR=#FF0000>
Program</FONT></A></H2>
<P>
The <TT><FONT FACE="Courier">CheckboxApp</FONT></TT> program illustrates
the use of the <TT><FONT FACE="Courier">CheckboxPanel</FONT></TT>
and <TT><FONT FACE="Courier">CheckboxGroupPanel</FONT></TT> classes.
Its source code is shown in Listing 21.3.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 21.3. The source code for the </B><TT><B><FONT FACE="Courier">CheckboxApp</FONT></B></TT><B>
program.</B><P>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
import jdg.ch20.MyMenu;<BR>
import jdg.ch20.MyMenuBar;<BR>
import jdg.ch20.MessageDialog;<BR>
import jdg.ch21.CheckboxPanel;<BR>
import jdg.ch21.CheckboxGroupPanel;<BR>
<BR>
public class CheckboxApp extends Frame {<BR>
&nbsp;MyMenuBar menuBar;<BR>
&nbsp;MessageDialog dialog;<BR>
&nbsp;CheckboxPanel checkboxPanel;<BR>
&nbsp;CheckboxGroupPanel checkboxGroupPanel;<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;CheckboxApp app = new CheckboxApp();<BR>
&nbsp;}<BR>
&nbsp;public CheckboxApp() {<BR>
&nbsp;&nbsp;super(&quot;CheckboxApp&quot;);<BR>
&nbsp;&nbsp;setup();<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(minimumSize());<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void setup() {<BR>
&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;setupMenuBar();<BR>
&nbsp;&nbsp;setupCheckboxes();<BR>
&nbsp;}<BR>
&nbsp;void setupMenuBar(){<BR>
&nbsp;&nbsp;Object menuItems[][] = {<BR>
&nbsp;&nbsp;&nbsp;{&quot;File&quot;,&quot;Exit&quot;},<BR>
&nbsp;&nbsp;};<BR>
&nbsp;&nbsp;menuBar = new MyMenuBar(menuItems);<BR>
&nbsp;&nbsp;setMenuBar(menuBar);<BR>
&nbsp;}<BR>
&nbsp;void setupCheckboxes(){<BR>
&nbsp;&nbsp;setLayout(new GridLayout(1,2));<BR>
&nbsp;&nbsp;String sports[] = {&quot;Baseball&quot;,&quot;Basketball&quot;,&quot;Football&quot;,&quot;Hockey&quot;,&quot;Soccer&quot;};
<BR>
&nbsp;&nbsp;checkboxPanel = new CheckboxPanel(&quot;What team
sports do you like? &quot;,<BR>
&nbsp;&nbsp;&nbsp;sports,CheckboxPanel.VERTICAL);<BR>
&nbsp;&nbsp;add(checkboxPanel);<BR>
&nbsp;&nbsp;String ages[] = {&quot;under 20&quot;,&quot;20 - 39&quot;,&quot;40
- 59&quot;,&quot;60 - 79&quot;,&quot;80 and over&quot;};<BR>
&nbsp;&nbsp;checkboxGroupPanel = new CheckboxGroupPanel(&quot;What
is your age? &quot;,<BR>
&nbsp;&nbsp;&nbsp;ages,CheckboxPanel.VERTICAL);<BR>
&nbsp;&nbsp;add(checkboxGroupPanel);<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;if(event.target instanceof MessageDialog) return
true;<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.ACTION_EVENT){<BR>
&nbsp;&nbsp;&nbsp;if(event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(&quot;Exit&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}else if(event.target instanceof Checkbox){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String status;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Checkbox checkbox = (Checkbox)event.target;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(checkbox.getState()) status = &quot;You
checked: &quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;else status = &quot;You unchecked: &quot;;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String text[] = {status+checkbox.getLabel()+&quot;
 &quot;};<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String buttons[] = {&quot;OK&quot;};<BR>
&nbsp;&nbsp;&nbsp;&nbsp;dialog = new MessageDialog(this,&quot;Guess
what?&quot;,true,text,buttons);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;dialog.show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
When you execute the program, it displays the window shown in
<A HREF="f21-1.gif" >Figure 21.1</A>. The left side of the window
displays a <TT><FONT FACE="Courier">CheckboxPanel</FONT></TT>
object, and the right side displays a <TT><FONT FACE="Courier">CheckboxPanelGroup</FONT></TT>
object. Notice that traditional checkboxes are displayed on the
left, and radio buttons are displayed on the right.
<P>
<A HREF="f21-1.gif"><B>Figure 21.1 :</B><I> The <TT>CheckboxApp</TT> opening window.</I></A>
<P>
Click on the Basketball checkbox, as shown in <A HREF="f21-2.gif" >Figure 21.2</A>.
The checkbox is checked and the dialog box shown in <A HREF="f21-3.gif" >Figure 21.3</A>
is displayed as the result of handling this event. Click on the
Basketball checkbox again, and the dialog box shown in <A HREF="f21-4.gif" >Figure 21.4</A>
is displayed. The purpose of this type of dialog box is to illustrate
checkbox event handling. It is not normally part of any application
that uses checkboxes because the checkbox display indicates the
state of a checkbox.
<P>
<A HREF="f21-2.gif"><B>Figure 21.2 :</B><I> Checking Basketball.</I></A>
<P>
<P>
<A HREF="f21-3.gif"><B>Figure 21.3 :</B><I> You checked Basketball</I></A>
<P>
<P>
<A HREF="f21-4.gif"><B>Figure 21.4 :</B><I> You unchecked Basketball.</I></A>
<P>

Go ahead and check your favorite sports, and then turn your attention
to the radio buttons. Select your age group, as shown in <A HREF="f21-5.gif" >Figure 21.5</A>.
The program notifies you of your selection. Go ahead and select
another age group, as shown in <A HREF="f21-6.gif" >Figure 21.6</A>.
Notice that you can't select more than one age group at a given
time. That's the idea behind radio buttons.
<P>
<A HREF="f21-5.gif"><B>Figure 21.5 :</B><I> Select your age group</I></A>
<P>

<P>
<A HREF="f21-6.gif"><B>Figure 21.6 :</B><I> Now select a different age group</I></A>
<P>
The <TT><FONT FACE="Courier">CheckboxApp</FONT></TT> program makes
use of several custom components that you've built so far, including
the <TT><FONT FACE="Courier">MyMenu</FONT></TT>, <TT><FONT FACE="Courier">MyMenuBar</FONT></TT>,
<TT><FONT FACE="Courier">MessageDialog</FONT></TT>, <TT><FONT FACE="Courier">CheckboxPanel</FONT></TT>,
and <TT><FONT FACE="Courier">CheckboxGroupPanel</FONT></TT> classes.
Try rewriting this program without using these classes and you'll
find out how time- consuming and tedious it can be to write programs
without custom classes. You should now be getting used to using
this class-building approach to simplify your Java programming.
<P>
The <TT><FONT FACE="Courier">setupCheckboxes()</FONT></TT> method
sets up the checkbox and radio button panels displayed in the
previous figures. A <TT><FONT FACE="Courier">GridLayout</FONT></TT>
object is used to organize the main application window. The <TT><FONT FACE="Courier">checkboxPanel</FONT></TT>
variable is assigned the <TT><FONT FACE="Courier">CheckboxPanel</FONT></TT>
object that is created using the <TT><FONT FACE="Courier">sports[]</FONT></TT>
array, and the <TT><FONT FACE="Courier">checkboxGroupPanel</FONT></TT>
variable is assigned the <TT><FONT FACE="Courier">CheckboxGroupPanel</FONT></TT>
object that is created using the <TT><FONT FACE="Courier">ages[]</FONT></TT>
array. Both panels are then added to the <TT><FONT FACE="Courier">Frame</FONT></TT>
object being constructed. That's all the code required to create
the GUI controls shown in <A HREF="f21-1.gif" >Figure 21.1</A>.
<P>
The <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
looks to see if the target of an <TT><FONT FACE="Courier">ACTION_EVENT</FONT></TT>
is an instance of the <TT><FONT FACE="Courier">Checkbox</FONT></TT>
class. This will be true for both checkboxes and radio buttons.
It then retrieves the checkbox from the <TT><FONT FACE="Courier">event.target</FONT></TT>
variable and uses the <TT><FONT FACE="Courier">getState()</FONT></TT>
method to obtain the state of the <TT><FONT FACE="Courier">Checkbox</FONT></TT>
object. Then it retrieves the label of the <TT><FONT FACE="Courier">Checkbox</FONT></TT>
object using the <TT><FONT FACE="Courier">getLabel()</FONT></TT>
method and passes this information to the user via a <TT><FONT FACE="Courier">MessageDialog</FONT></TT>
object.
<H2><A NAME="MakingChoices"><FONT SIZE=5 COLOR=#FF0000>Making
Choices</FONT></A></H2>
<P>
The <TT><FONT FACE="Courier">Choice</FONT></TT> class allows Motif-style
choice lists to be used in Java window programs. These GUI controls
are also supported in Windows 95 and NT programs. A <I>choice
list</I> is a pull-down menu that allows a user to select a single
item from a list. When a choice selection is made, an <TT><FONT FACE="Courier">ACTION_EVENT</FONT></TT>
is generated, and the program is then able to respond to that
selection. Choices are like menus that are placed in the middle
of a window.
<H3><A NAME="TheMyChoiceClass">The <TT><FONT SIZE=4 FACE="Courier">MyChoice</FONT></TT><FONT SIZE=4>
Class</FONT></A></H3>
<P>
<TT><FONT FACE="Courier">MyChoice</FONT></TT> is a short and sweet
class that simplifies the construction of a <TT><FONT FACE="Courier">Choice</FONT></TT>
object. Its source code is shown in Listing 21.4.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 21.4. The source code for the </B><TT><B><FONT FACE="Courier">MyChoice</FONT></B></TT><B>
class.</B><P>
<TT><FONT FACE="Courier">package jdg.ch21;<BR>
<BR>
import java.awt.*;<BR>
<BR>
public class MyChoice extends Choice {<BR>
&nbsp;public MyChoice(String labels[]) {<BR>
&nbsp;&nbsp;super();<BR>
&nbsp;&nbsp;int length = labels.length;<BR>
&nbsp;&nbsp;for(int i=0;i&lt;length;++i) {<BR>
&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;addItem(labels[i]);<BR>
&nbsp;&nbsp;&nbsp;}catch (NullPointerException ex) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;addItem(&quot;&quot;);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Rather than constructing a <TT><FONT FACE="Courier">Choice</FONT></TT>
object and adding all of the items in the choice list, the <TT><FONT FACE="Courier">MyChoice</FONT></TT>
constructor takes an array of labels and adds them to the <TT><FONT FACE="Courier">Choice</FONT></TT>
object as it is constructed. The <TT><FONT FACE="Courier">addItem()</FONT></TT>
method of the <TT><FONT FACE="Courier">Choice</FONT></TT> class
throws the <TT><FONT FACE="Courier">NullPointerException</FONT></TT>
and is handled by adding a blank item to the choice list when
a <TT><FONT FACE="Courier">null</FONT></TT> pointer is encountered.
<H2><A NAME="SelectingfromLists"><FONT SIZE=5 COLOR=#FF0000>Selecting
from Lists</FONT></A></H2>
<P>
The <TT><FONT FACE="Courier">List</FONT></TT> class is a tad more
sophisticated that the <TT><FONT FACE="Courier">Choice</FONT></TT>
class. It is similar in that it allows a user to select from a
list of items that are displayed in a window component. It is
different because it provides the capability to support multiple
menu selections, to specify the size of the list window, and to
dynamically update the list during program execution.
<P>
The <TT><FONT FACE="Courier">List</FONT></TT> class provides two
constructors. The default constructor takes no parameters. The
second constructor specifies the number of visible rows to be
identified and whether multiple selections are allowed.
<P>
The access methods supported by the <TT><FONT FACE="Courier">List</FONT></TT>
class are also more extensive than the <TT><FONT FACE="Courier">Choice</FONT></TT>
class. In particular, the <TT><FONT FACE="Courier">delItem()</FONT></TT>,
<TT><FONT FACE="Courier">clear()</FONT></TT>, and <TT><FONT FACE="Courier">replaceItem()</FONT></TT>
methods allow <TT><FONT FACE="Courier">List</FONT></TT> objects
to be dynamically updated.
<H3><A NAME="TheMyListClass">The <TT><FONT SIZE=4 FACE="Courier">MyList</FONT></TT><FONT SIZE=4>
Class</FONT></A></H3>
<P>
The <TT><FONT FACE="Courier">MyList</FONT></TT> class is very
similar to the <TT><FONT FACE="Courier">MyChoice</FONT></TT> class
in that it enables a list to be constructed using an array of
list items. (See Listing 21.5.) The <TT><FONT FACE="Courier">MyList</FONT></TT>
constructor also allows the number of rows displayed in the list
and the multiple-selection parameter to be specified. The <TT><FONT FACE="Courier">MyList</FONT></TT>
constructor sets the foreground and background colors of the list
box that is displayed. This is used to override any colors that
might be set for the foreground and background of the list's container.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 21.5. The source code for the </B><TT><B><FONT FACE="Courier">MyList</FONT></B></TT><B>
class.</B><P>
<TT><FONT FACE="Courier">package jdg.ch21;<BR>
<BR>
import java.awt.*;<BR>
<BR>
public class MyList extends List {<BR>
&nbsp;public MyList(int rows,boolean multiple,String labels[])
{<BR>
&nbsp;&nbsp;super(rows,multiple);<BR>
&nbsp;&nbsp;int length = labels.length;<BR>
&nbsp;&nbsp;for(int i=0;i&lt;length;++i) {<BR>
&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;addItem(labels[i]);<BR>
&nbsp;&nbsp;&nbsp;}catch (NullPointerException ex) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;addItem(&quot;&quot;);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;setForeground(Color.black);<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H2><A NAME="TheChoiceListAppProgram"><FONT SIZE=5 COLOR=#FF0000>The
</FONT><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">ChoiceListApp</FONT></TT><FONT SIZE=5 COLOR=#FF0000>
Program</FONT></A></H2>
<P>
The <TT><FONT FACE="Courier">ChoiceListApp</FONT></TT> program
illustrates the use of the <TT><FONT FACE="Courier">MyChoice</FONT></TT>
and <TT><FONT FACE="Courier">MyList</FONT></TT> classes. (See
Listing 21.6.) It provides the capability to decide what you want
to eat for your next meal and can be very handy when a moment
of indecision arrives. The following source code lists only a
basic set of menu items, but additional menu items can be added
easily.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 21.6. The source code for the </B><TT><B><FONT FACE="Courier">ChoiceListApp</FONT></B></TT><B>
program.</B><P>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
import jdg.ch20.MyMenu;<BR>
import jdg.ch20.MyMenuBar;<BR>
import jdg.ch21.MyChoice;<BR>
import jdg.ch21.MyList;<BR>
<BR>
public class ChoiceListApp extends Frame {<BR>
&nbsp;MyMenuBar menuBar;<BR>
&nbsp;MyChoice mealChoice;<BR>
&nbsp;MyList currentList;<BR>
&nbsp;MyList mealList[];<BR>
&nbsp;String meals[] = {&quot;Breakfast&quot;,&quot;Lunch&quot;,&quot;Dinner&quot;};
<BR>
&nbsp;String mealChoices[][] = {<BR>
&nbsp;&nbsp;{&quot;pancakes&quot;,&quot;eggs&quot;,&quot;bacon&quot;,&quot;ham&quot;,&quot;sausage&quot;,&quot;cereal&quot;,
<BR>
&nbsp;&nbsp;&nbsp;&quot;toast&quot;,&quot;coffee&quot;,&quot;juice&quot;},
<BR>
&nbsp;&nbsp;{&quot;pizza&quot;,&quot;hamburger&quot;,&quot;hot
dog&quot;,&quot;burrito&quot;,&quot;salad&quot;,&quot;fries&quot;,
<BR>
&nbsp;&nbsp;&nbsp;&quot;chips&quot;,&quot;soda&quot;,&quot;milk&quot;},
<BR>
&nbsp;&nbsp;{&quot;spaghetti&quot;,&quot;carne asada&quot;,&quot;barbequed
chicken&quot;,&quot;soup&quot;,&quot;salad&quot;,<BR>
&nbsp;&nbsp;&nbsp;&quot;bread&quot;,&quot;wine&quot;,&quot;beer&quot;,&quot;soda&quot;,&quot;milk&quot;}
<BR>
&nbsp;};<BR>
&nbsp;TextField text;<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;ChoiceListApp app = new ChoiceListApp();<BR>
&nbsp;}<BR>
&nbsp;public ChoiceListApp() {<BR>
&nbsp;&nbsp;super(&quot;ChoiceListApp&quot;);<BR>
&nbsp;&nbsp;setup();<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(275,175);<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void setup() {<BR>
&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;setupMenuBar();<BR>
&nbsp;&nbsp;setupChoice();<BR>
&nbsp;&nbsp;setupLists();<BR>
&nbsp;&nbsp;text = new TextField(40);<BR>
&nbsp;&nbsp;add(&quot;North&quot;,new Label(&quot;Place your order:&quot;));
<BR>
&nbsp;&nbsp;add(&quot;South&quot;,text);<BR>
&nbsp;&nbsp;add(&quot;West&quot;,mealChoice);<BR>
&nbsp;&nbsp;currentList = mealList[0];<BR>
&nbsp;&nbsp;add(&quot;East&quot;,currentList);<BR>
&nbsp;}<BR>
&nbsp;void setupMenuBar(){<BR>
&nbsp;&nbsp;Object menuItems[][] = {<BR>
&nbsp;&nbsp;&nbsp;{&quot;File&quot;,&quot;Exit&quot;},<BR>
&nbsp;&nbsp;};<BR>
&nbsp;&nbsp;menuBar = new MyMenuBar(menuItems);<BR>
&nbsp;&nbsp;setMenuBar(menuBar);<BR>
&nbsp;}<BR>
&nbsp;void setupChoice(){<BR>
&nbsp;&nbsp;mealChoice = new MyChoice(meals);<BR>
&nbsp;}<BR>
&nbsp;void setupLists(){<BR>
&nbsp;&nbsp;mealList = new MyList[meals.length];<BR>
&nbsp;&nbsp;for(int i=0;i&lt;meals.length;++i)<BR>
&nbsp;&nbsp;&nbsp;mealList[i] = new MyList(5,true,mealChoices[i]);
<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.ACTION_EVENT){<BR>
&nbsp;&nbsp;&nbsp;if(event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(&quot;Exit&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}else if(event.target instanceof Choice){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;for(int i=0;i&lt;meals.length;++i)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(meals[i].equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remove(currentList);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentList = mealList[i];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;East&quot;,currentList);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text.setText(meals[i]);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;show();<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.target instanceof List){<BR>
&nbsp;&nbsp;&nbsp;updateTextField();<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}else if(event.id==Event.LIST_SELECT || event.id==Event.LIST_DESELECT){
<BR>
&nbsp;&nbsp;updateTextField();<BR>
&nbsp;&nbsp;return true;<BR>
&nbsp;}<BR>
return false;<BR>
}<BR>
void updateTextField() {<BR>
&nbsp;String order = mealChoice.getSelectedItem()+&quot;: &quot;;
<BR>
&nbsp;String items[] = currentList.getSelectedItems();<BR>
&nbsp;for(int i=0;i&lt;items.length;++i) order += items[i]+&quot;
&quot;;<BR>
&nbsp;text.setText(order);<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Make sure that you have food on hand when you run the <TT><FONT FACE="Courier">ChoiceListApp</FONT></TT>
program. Its opening window is shown in <A HREF="f21-7.gif" >Figure 21.7</A>.
<P>
<A HREF="f21-7.gif"><B>Figure 21.7 :</B><I> The <TT>ChoiceListApp</TT> opening window.</I></A>
<P>
The choice list shown on the left side of the window is used to
select a meal. This selection determines what menu items are displayed
in the list shown on the right side of the window. More than one
item can be selected from the entr&eacute;e list. The text field
on the bottom of the screen identifies the selections that you
have made. Go ahead and select Lunch from the choice list, as
shown in <A HREF="f21-8.gif" >Figure 21.8</A>. Notice that the
entr&eacute;e list is updated with some typical lunch items. The
text field tells you that you are now ordering lunch.
<P>
<A HREF="f21-8.gif"><B>Figure 21.8 :</B><I> Selecting lunch.</I></A>
<P>
Go ahead and select some menu items from the entr&eacute;e list.
They are displayed in the text field, as shown in <A HREF="f21-9.gif" >Figure 21.9</A>.
<P>
<A HREF="f21-9.gif"><B>Figure 21.9 :</B><I> Ordering lunch.</I></A>
<P>
Now select Dinner from the choice list and select some dinner
entr&eacute;es, as shown in <A HREF="f21-10.gif" >Figure 21.10</A>.
The text field is updated to list your new selections.
<P>
<A HREF="f21-10.gif"><B>Figure 21.10 :</B><I> Selecting another meal.</I></A>
<P>
The <TT><FONT FACE="Courier">ChoiceListApp</FONT></TT> program
declares several field variables. The <TT><FONT FACE="Courier">menuBar</FONT></TT>
variable is the now-standard variable used to identify the program's
menu bar. The <TT><FONT FACE="Courier">mealChoice</FONT></TT>
variable is used to refer to the <TT><FONT FACE="Courier">MyChoice</FONT></TT>
object that displays the meals identified in the <TT><FONT FACE="Courier">meals[]</FONT></TT>
array. Two <TT><FONT FACE="Courier">MyList</FONT></TT> variables
are declared. The <TT><FONT FACE="Courier">mealList[]</FONT></TT>
array holds the three <TT><FONT FACE="Courier">MyList</FONT></TT>
objects used for breakfast, lunch, and dinner. These items are
stored in the <TT><FONT FACE="Courier">mealChoices[]</FONT></TT>
array. The <TT><FONT FACE="Courier">currentList</FONT></TT> variable
points to the current menu entr&eacute;e list being displayed.
The <TT><FONT FACE="Courier">text</FONT></TT> variable refers
to the <TT><FONT FACE="Courier">TextField</FONT></TT> object displayed
at the bottom of the window.
<P>
The <TT><FONT FACE="Courier">main()</FONT></TT> method and <TT><FONT FACE="Courier">ChoiceListApp()</FONT></TT>
constructor follow the pattern that's been developed so far. The
window is resized to make its display more visually appealing.
A <TT><FONT FACE="Courier">GridBagLayout</FONT></TT> layout would
have been more appropriate for this type of application, but the
overhead of implementing it would obscure the important points
associated with the <TT><FONT FACE="Courier">MyChoice</FONT></TT>
and <TT><FONT FACE="Courier">MyList</FONT></TT> classes.
<P>
The <TT><FONT FACE="Courier">setup()</FONT></TT> method sets up
the background and menu bar and then invokes the <TT><FONT FACE="Courier">setupChoice()</FONT></TT>
and <TT><FONT FACE="Courier">setupLists()</FONT></TT> methods
to set up the <TT><FONT FACE="Courier">MyChoice</FONT></TT> and
<TT><FONT FACE="Courier">MyList</FONT></TT> objects. The text
field is initialized to be 40 characters wide, and then the user-interface
objects are placed in the appropriate places in the <TT><FONT FACE="Courier">ChoiceListApp</FONT></TT>
window.
<P>
The <TT><FONT FACE="Courier">setupChoice()</FONT></TT> method
constructs the <TT><FONT FACE="Courier">mealChoice</FONT></TT>
object using a simple, one-line constructor. The <TT><FONT FACE="Courier">setupLists()</FONT></TT>
method sets up the <TT><FONT FACE="Courier">mealList</FONT></TT>
object by indexing through the <TT><FONT FACE="Courier">mealChoices[]</FONT></TT>
array and setting up the individual <TT><FONT FACE="Courier">MyList</FONT></TT>
objects.
<P>
The <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
looks for events of type <TT><FONT FACE="Courier">ACTION_EVENT</FONT></TT>
that are instances of the <TT><FONT FACE="Courier">Choice</FONT></TT>
class. It handles them by finding the element of the <TT><FONT FACE="Courier">meals[]</FONT></TT>
array that was selected and using it to select the next <TT><FONT FACE="Courier">mealList[]</FONT></TT>
element to be displayed as the <TT><FONT FACE="Courier">currentList</FONT></TT>.
The old list is removed, and a new <TT><FONT FACE="Courier">currentList</FONT></TT>
object is added. The text field is then set to the <TT><FONT FACE="Courier">meals[]</FONT></TT>
element that was selected. Note that this approach of removing
the list and replacing it with a new one is less elegant than
updating the list as it is displayed.
<P>
The <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
processes <TT><FONT FACE="Courier">ACTION_EVENT</FONT></TT>, which
occurs when the user double-clicks on a list item. It invokes
the <TT><FONT FACE="Courier">updateTextField()</FONT></TT> method
to update the text that is displayed in the text field at the
bottom of the window's display. It also handles the <TT><FONT FACE="Courier">LIST_SELECT</FONT></TT>
and <TT><FONT FACE="Courier">LIST_DESELECT</FONT></TT> events
in the same fashion.
<P>
The <TT><FONT FACE="Courier">updateTextField()</FONT></TT> method
retrieves the currently selected item in the <TT><FONT FACE="Courier">MyChoice</FONT></TT>
object referred to by <TT><FONT FACE="Courier">mealChoice</FONT></TT>
using the <TT><FONT FACE="Courier">getSelectedItem()</FONT></TT>
method of the <TT><FONT FACE="Courier">Choice</FONT></TT> class.
This <TT><FONT FACE="Courier">String</FONT></TT> object is used
to build the text display by identifying the currently selected
meal. The <TT><FONT FACE="Courier">getSelectedItems()</FONT></TT>
method of the <TT><FONT FACE="Courier">List</FONT></TT> class
is used to return a list of all items selected in the currently
displayed <TT><FONT FACE="Courier">MyChoice</FONT></TT> object
referred to by the <TT><FONT FACE="Courier">currentList</FONT></TT>
variable. These items are then added to the text field display.
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
This chapter shows you how to use the <TT><FONT FACE="Courier">Checkbox</FONT></TT>,
<TT><FONT FACE="Courier">Choice</FONT></TT>, and <TT><FONT FACE="Courier">List</FONT></TT>
classes. It describes their available constructors and access
methods and shows you how to use them as the basis for creating
custom GUI components. <A HREF="ch22.htm" >Chapter 22</A>, &quot;Text
and Fonts,&quot; shows you how to work with these features.
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



