<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META>
<H1><FONT COLOR=#FF0000>Chapter 3</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Using the Java Developer's Kit</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#Overview" >Overview</A>
<LI><A HREF="#TheCompiler" >The Compiler</A>
<UL>
<LI><A HREF="#UsingClassesfromOtherPackages" >Using Classes from Other Packages</A>
<LI><A HREF="#SettingCLASSPATH" >Setting CLASSPATH</A>
<LI><A HREF="#ChangingtheRootDirectory" >Changing the Root Directory</A>
<LI><A HREF="#GeneratingDebuggingTables" >Generating Debugging Tables</A>
<LI><A HREF="#CodeOptimization" >Code Optimization</A>
<LI><A HREF="#SuppressingWarnings" >Suppressing Warnings</A>
<LI><A HREF="#UsingVerboseMode" >Using Verbose Mode</A>
</UL>
<LI><A HREF="#TheInterpreter" >The Interpreter</A>
<UL>
<LI><A HREF="#ChangingCLASSPATH" >Changing CLASSPATH</A>
<LI><A HREF="#CheckingforSourceCodeChanges" >Checking for Source Code Changes</A>
<LI><A HREF="#VerifyingYourCode" >Verifying Your Code</A>
<LI><A HREF="#ControllingtheGarbageCollector" >Controlling the Garbage Collector</A>
<LI><A HREF="#ChangingProperties" >Changing Properties</A>
<LI><A HREF="#SettingMemoryandStackLimits" >Setting Memory and Stack Limits</A>
<LI><A HREF="#DebuggingOptions" >Debugging Options</A>
</UL>
<LI><A HREF="#TheDebugger" >The Debugger</A>
<LI><A HREF="#TheDisassembler" >The Disassembler</A>
<LI><A HREF="#TheAppletViewer" >The Applet Viewer</A>
<LI><A HREF="#AutomatingSoftwareDocumentation" >Automating Software Documentation</A>
<LI><A HREF="#HeaderFileGeneration" >Header File Generation</A>
<LI><A HREF="#RunningtheDemoPrograms" >Running the Demo Programs</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
<FONT COLOR=#000000>This chapter is an introduction to the software
development tools contained in the </FONT>Java Developer's Kit
(JDK). It explains what each tool does and how it is used with
the other tools in the toolkit, and shows you how to operate each
tool and work with its command-line options. In the last section
of this chapter, you'll learn how to run the demo applets included
in the JDK.
<P>
This chapter has a dual purpose-it serves both as an initial introduction
to the JDK and as a JDK reference manual. When reading this chapter
for the first time, just try to understand how each of the JDK
programs is used. Do not worry about learning all the options
that are available to you. These options are illustrated via sample
programs during the course of this book. Many of these options
are useful only in special circumstances that you might never
encounter. When you are working on later chapters, you can refer
to this chapter for a full description of the options used in
a programming example.
<H2><A NAME="Overview"><B><FONT SIZE=5 COLOR=#FF0000>Overview</FONT></B></A>
</H2>
<P>
The purpose of the JDK is to provide a complete set of tools for
the development, testing, documentation, and execution of Java
programs and applets. The JDK provides tools that support each
of these activities, and more. It consists of the following seven
programs:<BR>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><I><FONT SIZE=2>Program Name</FONT></I></TD>
<TD WIDTH=252><I><FONT SIZE=2>Description</FONT></I></TD></TR>
<TR><TD WIDTH=151><TT><FONT SIZE=2 FACE="Courier">javac</FONT></TT>
</TD><TD WIDTH=252><FONT SIZE=2>Compiler</FONT></TD></TR>
<TR><TD WIDTH=151><TT><FONT SIZE=2 FACE="Courier">java</FONT></TT>
</TD><TD WIDTH=252><FONT SIZE=2>Interpreter</FONT></TD></TR>
<TR><TD WIDTH=151><TT><FONT SIZE=2 FACE="Courier">jdb</FONT></TT>
</TD><TD WIDTH=252><FONT SIZE=2>Debugger</FONT></TD></TR>
<TR><TD WIDTH=151><TT><FONT SIZE=2 FACE="Courier">javap</FONT></TT>
</TD><TD WIDTH=252><FONT SIZE=2>Disassembler</FONT></TD></TR>
<TR><TD WIDTH=151><TT><FONT SIZE=2 FACE="Courier">appletviewer</FONT></TT>
</TD><TD WIDTH=252><FONT SIZE=2>Applet viewer</FONT></TD></TR>
<TR><TD WIDTH=151><TT><FONT SIZE=2 FACE="Courier">javadoc</FONT></TT>
</TD><TD WIDTH=252><FONT SIZE=2>Documentation generator</FONT>
</TD></TR>
<TR><TD WIDTH=151><TT><FONT SIZE=2 FACE="Courier">javah</FONT></TT>
</TD><TD WIDTH=252><FONT SIZE=2>C header file generator</FONT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
Usually, you will write Java programs by using a text editor to
develop Java <I>source files</I>. These files consist of source
code packages that declare Java classes and interfaces. Source
files use the <TT>.java</TT> extension.
<P>
The Java compiler, <TT>javac</TT>, is used to convert the source
files into files that can be executed using the Java interpreter.
These files are referred to as <I>bytecode files</I> and end with
the <TT>.class</TT> extension.
<P>
The Java interpreter, <TT>java</TT>, executes classes from the
bytecode (<TT>.class</TT>) files. It verifies the integrity, correct
operation, and security of each class as it is loaded and executed,
and interacts with the host operating system, windowing environment
and communication facilities to produce the desired program behavior.
<P>
The debugger, <TT>jdb</TT>, is like the interpreter in that it
executes Java classes that have been compiled into bytecode files,
but it also provides special capabilities to stop program execution
at selected breakpoints and to display the values of class variables.
These capabilities are very useful in finding programming errors.
<P>
The disassembler takes the bytecode files and displays the classes,
fields (variables), and methods that have been compiled into the
bytecodes. It also identifies the bytecode instructions used to
implement each method. The disassembler is a handy tool for recovering
the source code design of those compiled Java classes for which
no source code is available-for example, those that you would
retrieve from the Web.
<P>
The applet viewer, <TT>appletviewer</TT>, displays Java applets
contained within Web pages, located on your local file system,
or at accessible websites. It is used to test applets that you
develop.
<P>
The automated documentation tool, <TT>javadoc</TT>, is used to
convert portions of Java source files into <I>Hypertext Markup
Language</I> (HTML) files. HTML is the language used to write
Web pages. The HTML files generated by <TT>javadoc</TT> document
the classes, variables, methods, interfaces, and exceptions contained
in Java source files based on special comments inserted into these
files.
<P>
The C header file tool, <TT>javah</TT>, is used to generate C-language
header and source files from a Java bytecode file. The files generated
by <TT>javah</TT> are used to develop <I>native methods</I>-Java
classes that are written in languages other than Java.
<P>
<A HREF="f3-1.gif" >Figure 3.1</A> shows how each of these programs
is used and how it interfaces with other programs within the JDK.
<H2><A NAME="TheCompiler"><B><FONT SIZE=5 COLOR=#FF0000>The Compiler</FONT></B></A>
</H2>
<P>
<A HREF="f3-1.gif"><B>Figure 3.1 : </B><I>How the programs of the JDK interact.</I></A>
<P>
The Java compiler is used to translate Java source code files
into bytecode files for execution by the Java interpreter. The
source code files must end with the <TT>.java</TT> extension.
They are translated into files with the same name, but with the
<TT>.class</TT> extension.
<P>
For example, suppose the file <TT>test.java</TT> is located in
the <TT>c:\myfiles\source</TT> directory. To compile <TT>test.java</TT>,
change directories to <TT>c:\myfiles\source</TT> and enter the
command <TT>javac test.java</TT>. If your compilation is successful,
<TT>javac</TT> will create a file named <TT>test.class</TT> that
will contain the compiled bytecodes for <TT>test.java</TT>. If
your compile is unsuccessful, you will receive error messages
that will help you figure out what went wrong.<BR>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Tip</B></TD></TR>
<TR><TD WIDTH=569>
<BLOCKQUOTE>
Set your <TT>PATH</TT> variable to the directory containing the JDK executable programs so that your operating system shell can find them. If you installed Java as described in the previous chapter, add <TT>c:\java\bin</TT> to your <TT>PATH</TT>.
</BLOCKQUOTE></TD></TR></TABLE></CENTER>
<P>
<P>
In general, the Java compiler is executed as follows:
<BLOCKQUOTE>
<TT>javac options java_source_file</TT>
</BLOCKQUOTE>
<P>
<A HREF="f3-2.gif" >Figure 3.2</A> illustrates the operation of
the Java compiler. The compiler options are covered in the following
sections. You get hands-on experience using <TT>javac</TT> to
compile sample programs in <A HREF="ch4.htm" >Chapter 4</A>, &quot;First
Programs: Hello World! to BlackJack.&quot;
<P>
<A HREF="f3-2.gif"><B>Figure 3.2 : </B><I>The operation of the Java compiler.</I></A>
<P>
<H3><A NAME="UsingClassesfromOtherPackages"><B>Using Classes from
Other Packages</B></A></H3>
<P>
Every Java program uses classes that are defined outside of the
program's source code file. Most often these <I>external classes</I>
are contained in the Java API. However, you will also want to
be able to reuse classes that you develop. The Java compiler must
be able to locate these external classes in order to determine
how to correctly compile code that references them. This section
shows how the Java compiler and other programs in the JDK locate
compiled classes. Understanding this information is important
to using the JDK programs most effectively.
<P>
All Java declarations, such as classes, interfaces, and exceptions,
are organized into logical units called <I>packages</I>. A class
or interface must be identified as <TT>public</TT> to be used
outside of its package. Only one <TT>public</TT> class or interface
is allowed in a given source file. Interfaces are covered in <A HREF="ch6.htm" >Chapter 6</A>,
&quot;Interfaces.&quot;
<P>
A compiled Java class is identified by its package name followed
by a period (<TT>.</TT>) followed by its class name. For example,
suppose you've developed and compiled a class called <TT>TestClass</TT>
and it is contained in the <TT>TestAPI</TT> package. Your class
would be identified by <TT>TestAPI.TestClass</TT>. The identifier,
<TT>TestAPI.TestClass</TT>, is referred to as the <I>fully qualified
name</I> or <I>full name</I> of the class <TT>TestClass</TT>.
<A HREF="f3-3.gif" >Figure 3.3</A> shows how package names are
combined with class names to produce full class names.
<P>
<A HREF="f3-3.gif"><B>Figure 3.3 : </B><I>How class names are formed.</I></A>
<P>
The full name of a class is used to locate the class with respect
to <TT>CLASSPATH</TT>. <TT>CLASSPATH</TT> is a system environment
variable containing a list of directories where Java packages
can be found. You convert the full name to a path offset by replacing
any periods in the name with backslashes (<TT>\</TT>) for Windows
95/NT systems and slashes (<TT>/</TT>) for UNIX systems. This
path offset is then combined with directories in <TT>CLASSPATH</TT>
to locate the bytecode (<TT>.class</TT>) files containing Java
classes.<BR>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=570>
<BLOCKQUOTE>
Windows 95 and NT use backslashes (<TT><FONT SIZE=1 FACE="Courier">\</FONT></TT>) to indicate and separate directories. UNIX uses slashes (<TT><FONT SIZE=1 FACE="Courier">/</FONT></TT>). Because this book is oriented toward Windows 95, it uses the Windows 95 convention. Any other differences for UNIX systems are indicated as appropriate.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The package that contains a particular class is identified using
the Java <TT>package</TT> statement. You'll learn how to use this
statement in the next chapter. If no package is identified for
a class, the class is put in a default package with no name. The
full name for the class is then just the class name. Java assumes
that the name of the bytecode file containing a class is the name
of the class concatenated with the <TT>.class</TT> extension,
as illustrated in <A HREF="f3-4.gif" >Figure 3.4</A>.
<H3><A NAME="SettingCLASSPATH"><B>Setting </B><TT><B><FONT SIZE=4 FACE="Courier New">CLASSPATH</FONT></B></TT></A>
</H3>
<P>
<A HREF="f3-4.gif"><B>Figure 3.4 : </B><I>The relationship between source code filenames, class names, and bytecode filenames.</I></A>
<P>
<TT>CLASSPATH</TT> tells the JDK programs where to find Java classes.
You must set the <TT>CLASSPATH</TT> to identify the location of
your classes. You set <TT>CLASSPATH</TT> differently depending
on your operating system. For Windows 95 and Windows NT, enter
the following at the console command line to set your <TT>CLASSPATH</TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">set CLASSPATH=<I>path</I></FONT></TT>
</BLOCKQUOTE>
<P>
A common <TT>CLASSPATH</TT> is <TT>.;c:\java;c:\java\lib\classes.zip</TT>.
This tells the Java compiler and other JDK tools to use the current
directory (<TT>.</TT>), the <TT>c:\java</TT> directory, and the
file <TT>c:\java\lib\classes.zip</TT> as a base for finding Java
class files. You would enter the following to set this <TT>CLASSPATH</TT>:
<BLOCKQUOTE>
<TT>set CLASSPATH=.;c:\java;c:\java\lib\classes.zip</TT>
</BLOCKQUOTE>
<P>
You can also put this statement in your <TT>AUTOEXEC.BAT</TT>
file so that it will be set automatically each time you start
a DOS shell. Windows NT users can use the System option in the
Control Panel to set the <TT>CLASSPATH</TT> variable.
<P>
On UNIX systems that use the C shell, you set <TT>CLASSPATH</TT>
using the <TT>setenv</TT> command. Java is typically installed
under <TT>/usr/local</TT> on UNIX systems. Suppose that you want
to set <TT>CLASSPATH</TT> to the current directory, your home
directory, and the location of the JDK classes. You would enter
the following at the shell prompt: 
<BLOCKQUOTE>
<TT>setenv CLASSPATH .:~:/usr/local/java/lib/classes.zip</TT>
</BLOCKQUOTE>
<P>
For systems that use the Bourne Again shell (<TT>bash</TT>), you
would enter the following at the shell prompt:
<BLOCKQUOTE>
<TT>CLASSPATH=.:~:/usr/local/java/lib/classes.zip<BR>
<FONT FACE="Courier New">export CLASSPATH<BR>
</FONT></TT>
</BLOCKQUOTE>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=566>
</CENTER>
<BLOCKQUOTE>
UNIX systems use the colon (<TT><FONT SIZE=1 FACE="Courier">:</FONT></TT>) to separate path elements. Windows 95 and NT use the semicolon (<TT><FONT SIZE=1 FACE="Courier">;</FONT></TT>).
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
<TT>CLASSPATH</TT> can also be set from the <TT>javac</TT> command
line using the <TT>-classpath</TT> option. For example, to compile
<TT>test.java</TT> with the <TT>.;c:\otherclasses</TT> path, you
would use the following command line:
<BLOCKQUOTE>
<TT>javac test.java &#173;classpath .;c:\otherclasses</TT>
</BLOCKQUOTE>
<P>
The <TT>CLASSPATH</TT> set by the <TT>&#173;classpath</TT> option
is temporary and only applies to the current file being compiled.
<H3><A NAME="ChangingtheRootDirectory"><B>Changing the Root Directory</B></A>
</H3>
<P>
Normally, <TT>javac</TT> will put the <TT>.class</TT> bytecode
file that it generates in the same directory as the <TT>.java</TT>
source file that it compiles. You can change this using the <TT>&#173;d</TT>
option. For example, to put the <TT>test.class</TT> file generated
by compiling <TT>test.java</TT> in the <TT>c:\classes</TT> directory,
you would use the following command:
<BLOCKQUOTE>
<TT>javac &#173;d c:\classes test.java</TT>
</BLOCKQUOTE>
<P>
The <TT>&#173;d</TT> option does not affect <TT>CLASSPATH</TT>.
<H3><A NAME="GeneratingDebuggingTables"><B>Generating Debugging
Tables</B></A></H3>
<P>
The Java debugger needs additional information to be placed in
<TT>.class</TT> files in order to support enhanced debugging operations.
Normally, only information about line numbers is inserted in <TT>.class</TT>
files. Additional information about local variables is produced
as the result of using the <TT>&#173;g</TT> option. For example,
the following produces the <TT>test.class</TT> file with additional
debugging information included:
<BLOCKQUOTE>
<TT>javac &#173;g test.java</TT>
</BLOCKQUOTE>
<H3><A NAME="CodeOptimization"><B>Code Optimization</B></A></H3>
<P>
The bytecode files produced by Java are usually not optimized
for execution speed. Optimized files are generally larger, and
this is undesirable for some applications, such as Java applets,
which may be downloaded over slow Internet connections.
<P>
Optimization for execution speed can be turned on using the <TT>&#173;O</TT>
option. This results in inline expansion of code, where possible,
to reduce delays associated with loading and calling certain methods.
Static, final, and private methods are optimized via inline expansion.
For example, the following will optimize the <TT>test.class</TT>
file for speedier execution:
<BLOCKQUOTE>
<TT>javac &#173;O test.java</TT>
</BLOCKQUOTE>
<H3><A NAME="SuppressingWarnings"><B>Suppressing Warnings</B></A>
</H3>
<P>
Sometimes your <TT>.java</TT> files will contain code that could
lead to potential errors. The compiler will warn you about these
problem areas. If you do not want to see these warnings, you can
turn them off using the <TT>&#173;nowarn</TT> option. For example,
the following command will suppress warnings from being generated
when compiling <TT>test.java</TT>:
<BLOCKQUOTE>
<TT>javac &#173;nowarn test.java</TT>
</BLOCKQUOTE>
<H3><A NAME="UsingVerboseMode"><B>Using Verbose Mode</B></A></H3>
<P>
If you want more detailed information about the compiler's operation,
<I>verbose mode</I> is for you. When verbose mode is turned on,
the compiler identifies the source files that it compiles and
the <TT>.class</TT> files that it loads in order to compile these
files. Verbose mode is turned on using the <TT>&#173;verbose</TT>
option. For example, the following will compile <TT>test.java</TT>
and display information on what <TT>.class</TT> files are loaded
during the compilation:
<BLOCKQUOTE>
<TT>javac &#173;verbose test.java</TT>
</BLOCKQUOTE>
<H2><A NAME="TheInterpreter"><B><FONT SIZE=5 COLOR=#FF0000>The
Interpreter</FONT></B></A></H2>
<P>
The Java interpreter executes the bytecode files produced by the
Java compiler. It is invoked using the <TT>java</TT> command,
as follows:
<BLOCKQUOTE>
<TT>java options class arguments</TT>
</BLOCKQUOTE>
<P>
<TT><I><FONT FACE="Courier New">class </FONT></I></TT>is the full
name of the compiled Java class generated by the Java compiler.
In order for the compiler to locate and execute the class, the
class must meet the following requirements:
<UL>
<LI><FONT COLOR=#000000>It must have a valid </FONT><TT>main</TT>
method. The <TT>main</TT> method is analogous to the <TT>main</TT>
function in C and C++ programs. You'll learn how to construct
a <TT>main</TT> method in the next chapter.
<LI><FONT COLOR=#000000>It must be contained in a bytecode file
with the same name as the class followed by the </FONT><TT><FONT SIZE=1 FACE="Courier">.</FONT>class</TT>
extension.
<LI><FONT COLOR=#000000>The location of the class must be determined
using </FONT><TT>CLASSPATH</TT> and the full name of the class
as discussed in the &quot;Using Classes from Other Packages&quot;
section earlier in this chapter.
</UL>
<P>
The program arguments are optional parameters that are passed
to the <TT>main</TT> method of the class that is executed. They
are analogous to command-line arguments that are passed to C and
C++ programs. The arguments are processed by the class's <TT>main</TT>
method and not by the Java interpreter. For example, suppose that
you developed a Java class called <TT>TestClass</TT> with a <TT>main</TT>
method that merely displayed the arguments passed to it. Also,
assume that <TT>TestClass</TT> is in the <TT>TestAPI</TT> package.
The command
<BLOCKQUOTE>
<TT>java TestAPI.TestClass 1 2 3</TT>
</BLOCKQUOTE>
<P>
would merely print the numbers 1, 2, and 3.
<P>
Interpreter options are used to control different aspects of the
interpreter's operation. These options are covered in the following
subsections.
<H3><A NAME="ChangingCLASSPATH"><B>Changing </B><TT><B><FONT SIZE=4 FACE="Courier">CLASSPATH</FONT></B></TT></A>
</H3>
<P>
The Java interpreter has a <TT>&#173;classpath</TT> option that
is identical to that of the compiler. It is used to temporarily
change <TT>CLASSPATH</TT> for the duration of the class being
executed. For example, the following will result in the execution
of the <TT>main</TT> method of the compiled <TT>TestClass </TT>located
in the file <TT>c:\other\TestAPI.TestClass.class</TT>:
<BLOCKQUOTE>
<TT>java &#173;classpath c:\other TestAPI.TestClass</TT>
</BLOCKQUOTE>
<H3><A NAME="CheckingforSourceCodeChanges"><B>Checking for Source
Code Changes</B></A></H3>
<P>
The Java interpreter has a useful option that checks to see if
the source code file of the class to be executed has been modified
since the last time that it was compiled. This option is the <TT>checksource</TT>
option and is identified with <TT>&#173;cs</TT> or <TT>&#173;checksource</TT>.
If the date/time of modification of the source code file is more
recent than that of the bytecode file, then the source code file
is recompiled before the specified class is executed.
<P>
For example, suppose you developed and compiled the <TT>TestClass</TT>
class, and then later in the day made modifications to the <TT>TestClass.java</TT>
file from which <TT>TestClass</TT> was compiled. You have the
choice of recompiling <TT>TestClass.java</TT> and executing it
using <TT>java</TT> or using the <TT>checksource</TT> option to
accomplish compilation and execution with a single command. In
the latter case, you could use
<BLOCKQUOTE>
<TT>java &#173;cs TestAPI.TestClass</TT>
</BLOCKQUOTE>
<P>
to perform both recompilation and execution.
<H3><A NAME="VerifyingYourCode"><B>Verifying Your Code</B></A>
</H3>
<P>
The Java interpreter has three options to control the bytecode
verification of class files that it loads and executes:<BR>

<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><TT><FONT SIZE=2 FACE="Courier">&#173;verify</FONT></TT>
</TD><TD WIDTH=427><FONT SIZE=2>Causes the interpreter to verify all code that it loads.</FONT>
</TD></TR>
<TR><TD WIDTH=169><TT><FONT SIZE=2 FACE="Courier">&#173;noverify</FONT></TT>
</TD><TD WIDTH=427><FONT SIZE=2>Causes the interpreter to skip all code verification.</FONT>
</TD></TR>
<TR><TD WIDTH=169><TT><FONT SIZE=2 FACE="Courier">&#173;verifyremote</FONT></TT>
</TD><TD WIDTH=427><FONT SIZE=2>Causes the interpreter to verify all code that is loaded via a    classloader. This is the default operation of the interpreter.</FONT>
</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
Bytecode verification is performed by the Java interpreter to
ensure the security, integrity, and correctness of the code it
executes. It consists of a series of tests that verify that the
code can be safely executed. The advantage of verification is
that it promotes security, safety, and reliability. The disadvantage
is that it takes time to perform and, therefore, slows down overall
program execution.
<P>
The default <TT>&#173;verifyremote</TT> option only applies verification
to code that is loaded by a classloader. A <I>classloader</I>
is a Java method that loads classes from remote systems into the
local file system. The <TT>&#173;verifyremote</TT> option assumes
that local classes are trustworthy and do not need to be verified,
but remotely loaded classes are suspect and subject to verification.
<P>
Examples of using the verify options are
<BLOCKQUOTE>
<TT>java &#173;verify TestAPI.TestClass<BR>
<FONT FACE="Courier New">java &#173;noverify TestAPI.TestClass
<BR>
java &#173;verifyremote TestAPI.TestClass</FONT></TT>
</BLOCKQUOTE>
<P>
In the first case, all classes are verified as they are loaded.
In the second case, no classes are verified. In the last case,
only classes that are remotely loaded are verified.
<H3><A NAME="ControllingtheGarbageCollector"><B>Controlling the
Garbage Collector</B></A></H3>
<P>
The Java interpreter automatically allocates and deallocates memory
resources as they are needed by Java programs. Memory is allocated
as program objects are created and deallocated as the result of
the Java <I>garbage collector</I>. The Java runtime system keeps
track of objects that are created, monitors references to objects,
and uses the garbage collector to free the memory associated with
objects when no more references to the objects exist.
<P>
The garbage collector runs as a separate, low-priority background
thread that executes when no other threads are active. It checks
object references and frees those objects that are no longer in
use. The garbage collector is not explicitly called by executing
programs, but operates during periods of low activity. It is said
to operate <I>asynchronously</I> with respect to program execution.
<P>
The <TT>&#173;noasyncgc</TT> option turns off asynchronous garbage
collection. This prevents the garbage collector from being run
except when a program calls it or the runtime system is out of
memory. The <TT>&#173;noasyncgc</TT> option is generally used
when a program calls the garbage collector directly. This only
occurs in memory-intensive programs that require more direct control
over memory resources.
<P>
The Java interpreter provides the <TT>&#173;verbosegc</TT> option
for monitoring the operation of the garbage collector. This option
instructs the garbage collector to display a message to the console
window when it frees a previously allocated object. It is used
to monitor the operation of the garbage collector and is generally
limited to program testing and debugging.
<H3><A NAME="ChangingProperties"><B>Changing Properties</B></A>
</H3>
<P>
The Java interpreter allows you to change the values of predefined
system parameters, referred to as <I>system properties</I>. These
properties are used to specify the default values of variables
that control the overall behavior of the Java runtime system.
<P>
You change or add a property using the <TT>&#173;D</TT> option.
If a property specified by the <TT>&#173;D</TT> option does not
currently exist in the system properties, it will be added to
the list of defined properties. For example, the following will
change the predefined <TT>os.name</TT> property from <TT>Windows
95</TT> to <TT>Windows 96</TT>:
<BLOCKQUOTE>
<TT>java &#173;Dos.name=&quot;Windows 96&quot; TestAPI.TestClass</TT>
</BLOCKQUOTE>
<P>
The following example adds the <TT>myProperty</TT> property to
the list of system properties and gives it the value <TT>1234</TT>:
<BLOCKQUOTE>
<TT>java &#173;DmyProperty=1234 TestAPI.TestClass</TT>
</BLOCKQUOTE>
<P>
You will learn how to use properties in <A HREF="ch12.htm" >Chapter 12</A>,
&quot;Portable Software and the <TT>java.lang</TT> Package,&quot;
when you explore the <TT>java.lang.System</TT> class.
<H3><A NAME="SettingMemoryandStackLimits"><B>Setting Memory and
Stack Limits</B></A></H3>
<P>
The Java interpreter uses three major memory data structures to
execute Java classes. These are the memory allocation pool, the
Java code stack, and the C code stack.
<P>
The <I>memory allocation pool</I> is used to create objects for
use in Java programs. It is controlled by the Java runtime system
and the garbage collector. It is initially 1MB in size and has
a maximum size of 16MB. The <TT>&#173;ms</TT> and <TT>&#173;mx</TT>
options can be used to change the startup size and maximum size
of the memory allocation pool. The memory size may be specified
in bytes (default), kilobytes (using the <TT>k</TT> suffix), or
megabytes (using the <TT>m</TT> suffix). For example, each of
the following set the startup size of the memory allocation pool
to 2MB and the maximum size to 8MB for the execution of <TT>TestClass</TT>:
<BLOCKQUOTE>
<TT>java &#173;ms 2097152 &#173;mx 8388608 TestAPI.TestClass<BR>
<FONT FACE="Courier New">java &#173;ms 2048k &#173;mx 8192k TestAPI.TestClass
<BR>
java &#173;ms 2m &#173;mx 8m TestAPI.TestClass</FONT></TT>
</BLOCKQUOTE>
<P>
In general, you should not attempt to change the default memory
allocation pool values unless you have a very memory-intensive
program or a computer with a less-than-average amount of RAM.
The memory allocation pool must be larger than 1,000 bytes, and
the default sizeis 3MB.
<P>
A Java code stack is created for every thread of a Java program.
It is used to execute the bytecodes that comprise the Java thread.
<A HREF="ch37.htm" >Chapter 37</A>, &quot;The Java Virtual Machine,&quot;
provides a detailed description of the operation of the Java virtual
machine. By increasing the size of the Java code stack, you provide
more room for program instructions. By decreasing its size, you
lower the memory requirements for your program. The default maximum
size of the stack is 400KB. It can be changed using the <TT>&#173;oss</TT>
option. It specifies the stack size in bytes, kilobytes, and megabytes
as previously described for the memory allocation pool. For example,
the following command will execute <TT>TestClass</TT> with only
250KB of Java code stack by program thread:
<BLOCKQUOTE>
<TT>java &#173;oss 250k TestAPI.TestClass</TT>
</BLOCKQUOTE>
<P>
The Java code stack size should be changed only if you have a
program with an unusually large number of Java bytecode instructions
or a computer with significantly limited RAM.
<P>
The C code stack is similar to the Java code stack. It is used
to execute C code for a given thread. Its default size is 128KB
and can be changed using the <TT>&#173;ss</TT> option. Its size
must be greater than 1,000 bytes. For example, the following command
will execute <TT>TestClass</TT> with 256KB of C code stack per
program thread:
<BLOCKQUOTE>
<TT>java &#173;ss 256k TestAPI.TestClass</TT>
</BLOCKQUOTE>
<P>
The code stack is used to pass parameters to methods and to return
the results of a method's calculations. It is similar to the memory
functions used in calculators. Unless you plan to use a large
amount of C-language native methods in your Java programs, you
should never have to change the C code stack size.
<H3><A NAME="DebuggingOptions"><B>Debugging Options</B></A></H3>
<P>
The Java interpreter provides a number of options that support
the debugging and testing of Java classes. First and foremost,
<TT>java</TT> lets you attach the Java debugger to an executing
Java program. The <TT>&#173;debug</TT> option tells the interpreter
that you may want to attach the debugger to a Java session. The
interpreter responds by displaying an <I>agent password</I> to
the console window. This password must be entered when you attach
the debugger to the active session. Use of the Java debugger is
covered in the next section.
<P>
The <TT>&#173;verbose</TT> option for the Java interpreter is
similar to that used with the compiler. This option causes the
interpreter to identify all classes that are loaded during a program's
execution. The <TT>&#173;verbose</TT> option can also be identified
using <TT>&#173;v</TT>. For example, the command
<BLOCKQUOTE>
<TT>java &#173;verbose TestAPI.TestClass</TT>
</BLOCKQUOTE>
<P>
will display all classes that are loaded during the execution
of <TT>TestClass</TT>.
<P>
There is a special version of the Java interpreter, <TT>java_g</TT>,
that is oriented toward debugging. It includes the <TT>&#173;t</TT>
option for tracing the instructions executed during the course
of a program's execution. Even for very short programs, the amount
of data generated by this option can be overwhelming. For example,
if you enter
<BLOCKQUOTE>
<TT>java_g &#173;t TestAPI.TestClass</TT>
</BLOCKQUOTE>
<P>
you will receive a seemingly endless stream of information concerning
the methods and instructions executed.
<H2><A NAME="TheDebugger"><B><FONT SIZE=5 COLOR=#FF0000>The Debugger</FONT></B></A>
</H2>
<P>
The Java debugger is used to monitor the execution of Java programs
in support of debugging and test activities. It supports debugging
of both locally executing and remotely executing Java programs.
<P>
The debugger can be started in two ways. In the first way, the
debugger is started with a fully qualified class name. The debugger
then calls the interpreter with the name of the class to be debugged.
For example, the following command line starts the debugger with
<TT>TestAPI.TestClass</TT>: 
<BLOCKQUOTE>
<TT>jdb TestAPI.TestClass</TT>
</BLOCKQUOTE>
<P>
The debugger then invokes the interpreter to load <TT>TestAPI.TestClass</TT>.
The interpreter returns control to the debugger before executing
any instructions of <TT>TestClass</TT>. Interpreter options can
be passed to the interpreter via the debugger command line. For
example, the following command passes the <TT>&#173;D</TT> option
to the interpreter:
<BLOCKQUOTE>
<TT>jdb &#173;DmyProperty=1234 TestAPI.TestClass</TT>
</BLOCKQUOTE>
<P>
The second way of starting the debugger is to attach it to a Java
program that has already been started and is still running. The
Java program to be debugged must have been started using the <TT>&#173;debug</TT>
option, as described in the previous section. The password displayed
as the result of starting the program to be debugged is used when
attaching the debugger. For example, suppose you initiate execution
of <TT>TestClass</TT> using the following command:
<BLOCKQUOTE>
<TT>java &#173;debug TestAPI.TestClass</TT>
</BLOCKQUOTE>
<P>
The interpreter will display a password to be used to attach the
debugger to this session:
<P>
<TT>Agent password=424ee3</TT>
<P>
You can then attach the debugger to the still-running program
using the command
<BLOCKQUOTE>
<TT>jdb &#173;password 424ee3</TT>
</BLOCKQUOTE>
<P>
This command will attach the debugger to the execution of <TT>TestClass</TT>,
which will result in <TT>TestClass</TT> being suspended and the
debugger taking over control of the program's execution.
<P>
The debugger may also be used to attach to a program that is executing
on a remote computer. Suppose the <TT>TestClass</TT> program is
run on a computer named <TT>remote.host.com</TT> and you want
to debug it from <TT>my.host.com</TT>. You can do so by entering
the following command line:
<BLOCKQUOTE>
<TT>jdb &#173;host remote.host.com &#173;password 424ee3</TT>
</BLOCKQUOTE>
<P>
After starting <TT>jdb</TT>, it will announce that it is initializing,
identify the class that it is debugging, and print a simple prompt.
<P>
Once you are up and running, using the debugger, you can enter
a question mark (<TT>?</TT>) at the prompt (<TT>&gt;</TT>) to
receive a list of available debugging commands.
<P>
<A HREF="ch9.htm" >Chapter 9</A>, &quot;Using the Debugger,&quot;
provides a detailed description of how the debugger is used to
debug sample programs.
<H2><A NAME="TheDisassembler"><B><FONT SIZE=5 COLOR=#FF0000>The
Disassembler</FONT></B></A></H2>
<P>
The Java disassembler, <TT>javap</TT>, is used to reproduce the
source code of a compiled Java class. It takes the full name of
a class as its input and identifies the variables and methods
that have been compiled into the class's bytecodes. It also identifies
the source bytecode instructions that implement the class methods.
<BR>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=535>
</CENTER)
<P>
<BLOCKQUOTE>
The data components of a class are referred to as either <I>variables</I>, <I>fields</I>, or <I>field variables</I>.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
For example, suppose you have the bytecode file of a class that
you want to reverse engineer. You can use the disassembler to
identify the <TT>public</TT> fields and methods of the class.
With this information, you will be able to figure out how to create
instances of the class and access their methods.
<P>
The debugger is executed as follows:
<BLOCKQUOTE>
<TT>javap options class</TT>
</BLOCKQUOTE>
<P>
<TT><I><FONT FACE="Courier New">class</FONT></I></TT> is the full
name of a Java class created by the Java compiler. The options
control the type of information displayed by the disassembler.
<P>
When no options are used, only the <TT>public</TT> fields and
methods of the class are displayed. If the <TT>&#173;p</TT> option
is specified, the class's <TT>private</TT> and <TT>protected</TT>
fields and methods are also displayed.
<P>
The <TT>&#173;c</TT> option is used to display the source bytecode
instructions for the class methods.
<P>
The <TT>&#173;classpath</TT> option is used in the same way as
it is with the compiler and interpreter.
<P>
<A HREF="ch37.htm" >Chapter 37</A> describes the Java virtual
machine, the bytecode instruction set, and the use of the disassembler
to analyze compiled classes.
<H2><A NAME="TheAppletViewer"><B><FONT SIZE=5 COLOR=#FF0000>The
Applet Viewer</FONT></B></A></H2>
<P>
The applet viewer is used to run Java applets and test the applets
that you develop. The applet viewer creates a window in which
the applet can be viewed. It provides complete support for all
applet functions, including networking and multimedia capabilities.
<P>
You use the applet viewer as follows:
<BLOCKQUOTE>
<TT>appletviewer <I><FONT FACE="Courier New">options</FONT></I>
<I><FONT FACE="Courier New">URL</FONT></I></TT>
</BLOCKQUOTE>
<P>
<TT><I><FONT FACE="Courier New">URL</FONT></I></TT> is the universal
resource locator of an HTML document containing the applets to
be viewed. It can be located on a local machine or on any accessible
website. If you just want to view an applet in a local HTML file,
you can use the file's name instead of the entire URL of the file.
<P>
The <TT>&#173;debug</TT> option is the only option supported by
the applet viewer. It is used to run the applet viewer, using
<TT>jdb</TT>, to test and debug the applets contained in the selected
HTML document.
<P>
The applet viewer is covered in Part VI, &quot;Programming the
Web with Applets and Scripts.&quot; The last section in this chapter
shows how to use it to display the demo applets included with
the JDK.
<H2><A NAME="AutomatingSoftwareDocumentation"><B><FONT SIZE=5 COLOR=#FF0000>Automating
Software Documentation</FONT></B></A></H2>
<P>
The Java documentation generator, <TT>javadoc</TT>, is the tool
that created the excellent Java API documentation. This documentation
can (and should) be obtained from Sun's Java website. Make sure
that you get the documentation that is applicable to your Java
release. You can find it by pointing your browser at <TT><A TARGET="resource window" HREF="http://java.sun.com">http://java.sun.com</A></TT>
and then clicking on the documentation icon.
<P>
The documentation generator is executed using either the name
of a Java source code file, a full class name, or a package name.
If it is executed with a class name or package name, it will automatically
load the source code associated with the class or with all the
classes in the package. If it is executed with a source code file,
it will generate documentation for all classes and interfaces
defined in the file.
<P>
The <TT>javadoc</TT> command line is as follows:
<BLOCKQUOTE>
<TT>javadoc <I><FONT FACE="Courier New">options package<BR>
</FONT></I>javadoc <I><FONT FACE="Courier New">options class<BR>
</FONT></I>javadoc <I><FONT FACE="Courier New">options source_file</FONT></I></TT>
</BLOCKQUOTE>
<P>
The <TT>javadoc</TT> options are <TT>&#173;classpath</TT>, <TT>&#173;d</TT>,
and <TT>&#173;verbose</TT>. The <TT>&#173;classpath</TT> option
is the same as with the compiler and interpreter. The <TT>&#173;d</TT>
option is used to specify the directory to which the generated
HTML files are to be stored. It is similar to the <TT>&#173;d</TT>
option used with the compiler. The <TT>&#173;verbose</TT> option
results in a comprehensive display of the files that are loaded
during the documentation-generation process.
<P>
<A HREF="ch10.htm" >Chapter 10</A>, &quot;Automating Software
Documentation,&quot; shows how to use <TT>javadoc</TT> to automatically
generate Java software documentation.
<H2><A NAME="HeaderFileGeneration"><B><FONT SIZE=5 COLOR=#FF0000>Header
File Generation</FONT></B></A></H2>
<P>
The header file generation tool, <TT>javah</TT>, is used to produce
the C files required to develop native methods. It produces both
header and source files. The header files contain C-language definitions
that map to Java class definitions. The source files contain the
stubs for C functions that map to class methods.
<P>
The command line used to invoke <TT>javah</TT> is
<BLOCKQUOTE>
<TT>javah options class(es)</TT>
</BLOCKQUOTE>
<P>
where <TT><I><FONT FACE="Courier New">class(es)</FONT></I></TT>
refers to the full class names of the classes for which header
files are to be generated. The <TT>javah</TT> options control
the way the header files are generated:
<UL>
<LI><FONT COLOR=#000000>The </FONT><TT><FONT SIZE=1 FACE="Courier">&#173;</FONT>o</TT>
option combines all the files generated into a single file.
<LI><FONT COLOR=#000000>The </FONT><TT><FONT SIZE=1 FACE="Courier">&#173;</FONT>d</TT>
option identifies the directory where <TT>javah</TT> is to put
the header and source files that it generates.
<LI><FONT COLOR=#000000>The </FONT><TT><FONT SIZE=1 FACE="Courier">&#173;</FONT>td</TT>
option specifies where <TT>javah</TT> is to store temporary files
used in the header file generation process. The default directory
is the <TT>\tmp</TT> directory.
<LI><FONT COLOR=#000000>The </FONT><TT><FONT SIZE=1 FACE="Courier">&#173;</FONT>stubs</TT>
option causes <TT>javah</TT> to generate C function stubs for
class methods.
<LI><FONT COLOR=#000000>The </FONT><TT><FONT SIZE=1 FACE="Courier">&#173;</FONT>verbose</TT>
option is used to display status information concerning the files
generated.
<LI><FONT COLOR=#000000>The </FONT><TT><FONT SIZE=1 FACE="Courier">&#173;</FONT>classpath</TT>
option is used in the same way as it is used with the compiler
and interpreter.
</UL>
<P>
<A HREF="ch38.htm" >See Chapter 38</A>, &quot;Creating Native
Methods,&quot; for more information on this process.
<H2><A NAME="RunningtheDemoPrograms"><B><FONT SIZE=5 COLOR=#FF0000>Running
the Demo Programs</FONT></B></A></H2>
<P>
The JDK comes with 32 sample applets that demonstrate the capabilities
of the Java language and API. These applets are located in the
<TT>java\demo</TT> directory of the JDK. If you installed the
JDK under your <TT>C:</TT> drive, the applets will be located
under <TT>c:\java\demo</TT>. The demo directory has 22 subdirectories,
each containing one or more sample applets. To execute any of
the applets, open an MS-DOS window and change to the subdirectory
of <TT>c:\java\demo</TT> where the applet is located. In the subdirectory
are files named <TT>example1.html</TT>, <TT>example2.html</TT>,
and so on that are the HTML files containing links to the demo
applets. Most of the subdirectories contain only a single example
file. To execute the applet, just run <TT>appletviewer</TT> with
the name of the HTML file as a command-line argument.
<P>
I'll walk you through a few applets so that you can get the hang
of it. First, open an MS-DOS window and change directories to
<TT>c:\java\demo\Animator</TT>. If you do a directory listing,
you will see that it contains the following files:
<BLOCKQUOTE>
<TT>C:\java\demo\Animator&gt;dir<BR>
<BR>
<FONT SIZE=2 FACE="Courier">&nbsp;</FONT>Volume in drive C is
ATHOME<BR>
<FONT SIZE=2 FACE="Courier">&nbsp;</FONT>Volume Serial Number
is 1CE3-2551<BR>
<FONT SIZE=2 FACE="Courier">&nbsp;</FONT>Directory of C:\java\demo\Animator
<BR>
<BR>
<FONT FACE="Courier New">.</FONT><FONT SIZE=2 FACE="Courier">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>&lt;DIR&gt;<FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>01-24-96<FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;</FONT>6:50p
.<BR>
<FONT FACE="Courier New">..</FONT><FONT SIZE=2 FACE="Courier">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>&lt;DIR&gt;<FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>01-24-96<FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;</FONT>6:50p
..<BR>
<FONT FACE="Courier New">IMAGES</FONT><FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>&lt;DIR&gt;<FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>01-24-96<FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;</FONT>6:50p
images<BR>
<FONT FACE="Courier New">ANIMAT~1 JAV</FONT><FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>21,410
 10-13-95<FONT SIZE=2 FACE="Courier">&nbsp;</FONT>10:23a Animator.java
<BR>
<FONT FACE="Courier New">ANIMAT~1 CLA</FONT><FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>14,873
 10-13-95<FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;</FONT>1:54a
Animator.class<BR>
<FONT FACE="Courier New">IMAGEN~1 CLA</FONT><FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>706
 10-13-95<FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;</FONT>1:54a
ImageNotFoundException.class<BR>
<FONT FACE="Courier New">PARSEE~1 CLA</FONT><FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>410
 10-13-95<FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;</FONT>1:54a
ParseException.class<BR>
<FONT FACE="Courier New">INDEX~1  HTM</FONT><FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>3,411
 10-13-95<FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;</FONT>1:54a
index.html<BR>
<FONT FACE="Courier New">AUDIO</FONT><FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>&lt;DIR&gt;<FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>01-24-96<FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;</FONT>6:50p
audio<BR>
<FONT FACE="Courier New">EXAMPL~1 HTM</FONT><FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>428
 10-13-95<FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;</FONT>1:54a
example2.html<BR>
<FONT FACE="Courier New">EXAMPL~2 HTM</FONT><FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>466
 10-13-95<FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;</FONT>1:54a
example3.html<BR>
<FONT FACE="Courier New">EXAMPL~3 HTM</FONT><FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>419
 10-13-95<FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;</FONT>1:54a
example1.html<BR>
<FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>8
file(s) <FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>42,123
bytes<BR>
<FONT SIZE=2 FACE="Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>4
dir(s)<FONT SIZE=2 FACE="Courier"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>357,564,416
bytes free</TT>
</BLOCKQUOTE>
<P>
Entering the command <TT>appletviewer example1.html</TT> results
in <TT>appletviewer</TT> being launched with the <TT>example1.html</TT>
file. The applet viewer will then load and display any applets
pointed to by the HTML file. (<A HREF="f3-5.gif" >See Figure 3.5</A>.)
<P>
<A HREF="f3-5.gif"><B>Figure 3.5 : </B><I>The applet viewer.</I></A>
<P>
This applet displays an animation of the Duke, a kind of mascot
of the Java project. As the Duke waves to you, an audio file is
played in the background.
<P>
My favorite Duke applet is located in the <TT>UnderConstruction</TT>
directory. Change to this directory using the command <TT>cd ..\UnderConstruction</TT>
and run the applet using the command <TT>appletviewer example1.html</TT>.
The applet shows the Duke operating a jackhammer and plays the
sound of the jackhammer in the background. (<A HREF="f3-6.gif" >See Figure 3.6</A>.)
<P>
<A HREF="f3-6.gif"><B>Figure 3.6 : </B><I>Duke operating a jackhammer applet.</I></A>
<P>
Now change to the <TT>BouncingHeads</TT> subdirectory and run
the command <TT>appletviewer example1.html</TT>. You'll see images
of a person's head bouncing around the screen, complete with background
music and occasional grunting sounds. (<A HREF="f3-7.gif" >See Figure 3.7</A>.)
This applet shows how Java can combine several multimedia features
into a single applet with more than adequate runtime performance.
<P>
<A HREF="f3-7.gif"><B>Figure 3.7 : </B><I>The <TT>BouncingHeads</TT> applet.</I></A>
<P>
Finally, change to the <TT>TicTacToe</TT> subdirectory and use
the applet viewer to run the <TT>example1.html</TT> file. See
if you can figure out how to beat the applet-it <I>can</I> be
done! (<A HREF="f3-8.gif" >See Figure 3.8</A>.)
<P>
<A HREF="f3-8.gif"><B>Figure 3.8 : </B><I>The <TT>TicTacToe</TT>.</I></A>
<P>
You can experiment with the rest of the demo applets by changing
to the subdirectory containing the applet and running <TT>appletviewer</TT>
with the appropriate HTML file.
<H2><A NAME="Summary"><B><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></B></A>
</H2>
<P>
You have covered a lot of information in this lesson. You have
studied the tools of the Java Developer's Kit and learned what
each tool does and how it is used with the other tools in the
JDK. You have learned how to operate these tools and work with
their command-line arguments. Finally, you have had a little fun
by running the demo applets that come with the JDK. In <A HREF="ch4.htm" >Chapter 4</A>
you'll start programming. You'll code, compile, and execute four
simple programs that illustrate the basic elements of the Java
language.
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



