<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META>
<H1><FONT COLOR=#FF0000>Chapter 15</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Window Programming with the
</FONT></B><TT><B><FONT SIZE=5 COLOR=#FF0000 FACE="Courier New">java.awt</FONT></B></TT><B><FONT SIZE=5 COLOR=#FF0000>
Package</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#WindowProgrammingClasses" >Window Programming Classes</A>
<LI><A HREF="#ComponentsandContainers" >Components and Containers</A>
<UL>
<LI><A HREF="#TheContainerClass" >The Container Class</A>
<LI><A HREF="#TheWindowClass" >The Window Class</A>
<LI><A HREF="#ThePanelClass" >The Panel Class</A>
<LI><A HREF="#TheLabelClass" >The Label Class</A>
<LI><A HREF="#TheButtonClass" >The Button Class</A>
<LI><A HREF="#TheCheckboxClass" >The Checkbox Class</A>
<LI><A HREF="#TheChoiceClass" >The Choice Class</A>
<LI><A HREF="#TheListClass" >The List Class</A>
<LI><A HREF="#TheTextComponentClass" >The TextComponent Class</A>
<LI><A HREF="#TheCanvasClass" >The Canvas Class</A>
<LI><A HREF="#TheScrollbarClass" >The Scrollbar Class</A>
</UL>
<LI><A HREF="#ConstructingMenus" >Constructing Menus</A>
<UL>
<LI><A HREF="#TheMenuBarClass" >The MenuBar Class</A>
<LI><A HREF="#TheMenuItemClass" >The MenuItem Class</A>
<LI><A HREF="#TheMenuClass" >The Menu Class</A>
<LI><A HREF="#TheCheckboxMenuItemClass" >The CheckboxMenuItem Class</A>
<LI><A HREF="#TheMenuContainerClass" >The MenuContainer Class</A>
</UL>
<LI><A HREF="#OrganizingWindows" >Organizing Windows</A>
<UL>
<LI><A HREF="#TheLayoutManagerClass" >The LayoutManager Class</A>
<LI><A HREF="#TheBorderLayoutClass" >The BorderLayout Class</A>
<LI><A HREF="#TheCardLayoutClass" >The CardLayout Class</A>
<LI><A HREF="#TheFlowLayoutClass" >The FlowLayout Class</A>
<LI><A HREF="#TheGridLayoutClass" >The GridLayout Class</A>
<LI><A HREF="#TheGridBagLayoutClass" >The GridBagLayout Class</A>
</UL>
<LI><A HREF="#HandlingEvents" >Handling Events</A>
<LI><A HREF="#WorkingwithImages" >Working with Images</A>
<UL>
<LI><A HREF="#TheColorClass" >The Color Class</A>
<LI><A HREF="#ThejavaawtimagePackage" >The java.awt.image Package</A>
<LI><A HREF="#TheMediaTrackerClass" >The MediaTracker Class</A>
</UL>
<LI><A HREF="#GeometricalObjects" >Geometrical Objects</A>
<UL>
<LI><A HREF="#ThePointClass" >The Point Class</A>
<LI><A HREF="#TheRectangleClass" >The Rectangle Class</A>
<LI><A HREF="#ThePolygonClass" >The Polygon Class</A>
<LI><A HREF="#TheDimensionClass" >The Dimension Class</A>
</UL>
<LI><A HREF="#UsingFonts" >Using Fonts</A>
<UL>
<LI><A HREF="#TheFontMetricsClass" >The FontMetrics Class</A>
</UL>
<LI><A HREF="#UsingtheToolkit" >Using the Toolkit</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
This chapter introduces the classes of the <TT>java.awt</TT> package.
These classes provide the foundation for Java window programming.
You'll learn how the <TT>java.awt</TT> package is organized and
cover each of the classes that it contains. You'll also cover
the <TT>java.awt.image</TT> and <TT>java.awt.peer</TT> packages.
This chapter, unlike others in this part, does not provide programming
examples. Part IV, &quot;Window Programming,&quot; provides a
detailed tutorial of Java window programming, including numerous
programming examples.
<H2><A NAME="WindowProgrammingClasses"><B><FONT SIZE=5 COLOR=#FF0000>Window
Programming Classes</FONT></B></A></H2>
<P>
The Java <I>Abstract Windowing Toolkit</I> (AWT) provides numerous
classes that support window program development. These classes
are used to create and organize windows, implement GUI components,
handle events, draw text and graphics, perform image processing,
and obtain access to the native Windows implementation.
<P>
This chapter covers these classes in sections consisting of logically
related classes. The &quot;Components and Containers&quot; section
introduces the GUI components supported by the AWT and the Windows
classes that contain these components. The &quot;Constructing
Menus&quot; section describes the classes that are used to implement
menu bars and pull-down menus. The &quot;Organizing Windows&quot;
section describes the classes that are used to organize windows
and lay out the components they contain. The &quot;Handling Events&quot;
section introduces the <TT>Event</TT> class and describes the
process of Java event handling. The &quot;Working with Images&quot;
section introduces the <TT>Image</TT> class and the image-processing
classes of the <TT>java.awt.image</TT> class. The &quot;Geometrical
Objects&quot; section covers the Java classes that are used to
represent points, rectangles, polygons, and dimensions. The &quot;Using
Fonts&quot; section introduces the <TT>Font</TT> and <TT>FontMetrics</TT>
classes and shows how to use these classes to control the display
of text. The &quot;Using the Toolkit&quot; section describes the
interface between the platform-independent AWT classes and their
native platform-dependent implementations.
<H2><A NAME="ComponentsandContainers"><B><FONT SIZE=5 COLOR=#FF0000>Components
and Containers</FONT></B></A></H2>
<P>
The <TT>Component</TT> class is the superclass of the set of AWT
classes that implement graphical user interface controls. These
components include windows, dialog boxes, buttons, labels, text
fields, and other common GUI components. The <TT>Component</TT>
class provides a common set of methods that are used by all these
subclasses. These methods include methods for handling events
and working with images, fonts, and colors. More than 70 methods
are implemented by this class. It is a good idea to browse the
API pages of the <TT>Component</TT> class to get a feel for the
kinds of methods that are available. You don't have to worry about
learning them now. The important methods are covered in Part IV.
<P>
Although <TT>Component</TT> contains many GUI-related subclasses,
its <TT>Container</TT> subclass is the class used to define Windows
objects that contain other objects. As such, it is used to define
classes for working with application windows, dialog boxes, panels,
and applets. The <TT>Container</TT> class and subclasses are covered
in the next section. The classes for GUI controls are covered
in later portions of that section.
<H3><A NAME="TheContainerClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">Container</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>Container</TT> class is a subclass of the <TT>Component</TT>
class that is used to define components that have the capability
to contain other components. It provides methods for adding, retrieving,
displaying, counting, and removing the components that it contains.
It provides the <TT>deliverEvent()</TT> method for forwarding
events to its components. The <TT>Container</TT> class also provides
methods for working with layouts. The layout classes control the
layout of components within a container.
<P>
The <TT>Container</TT> class has two major subclasses: <TT>Window</TT>
and <TT>Panel</TT>. <TT>Window</TT> provides a common superclass
for application main windows (<TT>Frame</TT> objects) and <TT>Dialog</TT>
windows. The <TT>Panel</TT> class is a generic container that
can be displayed within a window. It is subclassed by the <TT>java.applet.Applet</TT>
class as the base class for all Java applets.
<H3><A NAME="TheWindowClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">Window</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>Window</TT> class provides an encapsulation of a generic
<TT>Window</TT> object. It is subclassed by <TT>Frame</TT> and
<TT>Dialog</TT> to provide the capabilities needed to support
application main windows and dialog boxes.
<P>
The <TT>Window</TT> class contains a single constructor that creates
a window that has a frame window as its parent. The parent frame
window is necessary because only objects of the <TT>Frame</TT>
class or its subclasses contain the functionality needed to support
the implementation of an independent application window.
<P>
The <TT>Window</TT> class implements important methods that are
used by its <TT>Frame</TT> and <TT>Dialog</TT> subclasses. The
<TT>pack()</TT> method is used to arrange the components contained
in the window according to the window layout style. Layout classes
are covered later in this chapter. The <TT>show()</TT> method
is used to display a window. Windows are hidden (invisible), by
default, and are displayed only as a result of invoking their
<TT>show()</TT> method. The <TT>toFront()</TT> and <TT>toBack()</TT>
methods are used to position windows relative to their frame windows.
The <TT>dispose()</TT> method is used to release the resources
associated with a window and delete the <TT>Window</TT> object.
The <TT>getWarningString()</TT> method is used to retrieve the
warning message associated with untrusted windows. Warning messages
are associated with windows that are created by applets. The other
<TT>Window</TT> methods are used to support peer operations. AWT
peers are discussed later in this chapter in the &quot;Using the
Toolkit&quot; section.
<P>
A <TT>Window</TT> object does not have a border or a menu bar
when it is created. In this state it may be used to implement
a pop-up window. The default layout for a <TT>Window</TT> object
is <TT>BorderLayout</TT>.
<H4><TT><B><FONT FACE="Courier New">Frame</FONT></B></TT></H4>
<P>
The <TT>Frame</TT> class is used to provide the main window of
an application. It is a subclass of <TT>Window</TT> that supports
the capabilities to specify the icon, cursor, menu bar, and title.
Because it implements the <TT>MenuContainer</TT> interface, it
is capable of working with <TT>MenuBar</TT> objects.
<P>
The <TT>Frame</TT> class defines 14 constants that are used to
specify different types of cursors to be used within the frame.
Consult the <TT>Frame</TT> class API page for a description of
these constants.
<P>
<TT>Frame</TT> provides two constructors: a default parameterless
constructor that creates an untitled frame window and a constructor
that accepts a string argument to be used as the frame window's
title. The second constructor is typically used.
<P>
<TT>Frame</TT> extends the set of access methods that it inherits
from <TT>Window</TT> by adding methods to get and set the window
title, icon image, cursor, and menu bar. Methods for removing
the menu bar and specifying whether the window is resizable are
also provided.
<H4><TT><B><FONT FACE="Courier New">Dialog</FONT></B></TT></H4>
<P>
The <TT>Dialog</TT> class is a subclass of the <TT>Window</TT>
class that is used to implement dialog box windows. A dialog box
is a window that takes input from the user. The <TT>Dialog</TT>
class allows dialog boxes that are modal to be constructed. <I>Modal</I>
dialog boxes must be closed before control returns to the window
that launched them. The <TT>Dialog</TT> class also provides the
capability to construct non-modal dialog boxes. <I>Non-modal</I>
dialog boxes do not need to be closed before other program windows
can be accessed.
<P>
The <TT>Dialog</TT> class provides two constructors. Both constructors
require the <TT>Window</TT> object containing the dialog box,
as well as the modal flag, to be specified. The second constructor
allows the title of the dialog box to be specified.
<P>
The <TT>Dialog</TT> class provides only a handful of access methods.
These methods are used to get and set its title, determine whether
it is modal, and get and set the dialog box's resizable properties.
<H4><TT><B><FONT FACE="Courier New">FileDialog</FONT></B></TT>
</H4>
<P>
The <TT>FileDialog</TT> class is used to construct dialog boxes
that support the selection of files for input and output operations.
It is a subset of the <TT>Dialog</TT> class and provides two constructors.
The first constructor identifies the <TT>Frame</TT> window that
contains the dialog box and the title to be used at the top of
the dialog box. The second constructor adds a mode parameter that
can be set to the <TT>LOAD</TT> or <TT>SAVE</TT> constants defined
by <TT>FileDialog</TT>.
<P>
<TT>FileDialog</TT> provides methods that are used to access the
directory and filename of the user-selected file and to specify
an object that implements the <TT>FileNameFilter</TT> interface.
<H3><A NAME="ThePanelClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">Panel</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>Panel</TT> class is a subclass of the <TT>Container</TT>
class that is used to organize GUI components within other container
objects. It provides a single constructor that takes no parameters.
The methods used with <TT>Panel</TT> objects are usually inherited
from the <TT>Component</TT> and <TT>Container</TT> classes. The
<TT>Applet</TT> class of the <TT>java.applet</TT> package is a
subclass of the <TT>Panel</TT> class. The default layout for a
<TT>Panel</TT> object is <TT>FlowLayout</TT>.
<H3><A NAME="TheLabelClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">Label</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>Label</TT> class is used to display read-only text labels
within a window or other GUI container. It has three constructors.
The first constructor takes no parameters and is used to construct
a blank label. The second constructor takes a <TT>String</TT>
object as its parameter that is used to specify the label's text.
The third constructor has an alignment parameter in addition to
the text string. This parameter specifies how the label should
be aligned within its container. The <TT>Label</TT> class defines
the <TT>LEFT</TT>, <TT>CENTER</TT>, and <TT>RIGHT</TT> constants
for use as alignment values.
<P>
The <TT>Label</TT> class provides methods to get and set the displayed
label and its alignment value.
<H3><A NAME="TheButtonClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">Button</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>Button</TT> class implements a clickable button GUI control.
The button is capable of displaying a text label. Two <TT>Button</TT>
constructors are provided. The first constructor takes no parameters
and creates a button with a blank label. The second constructor
accepts a <TT>String</TT> object that is displayed as the button's
label. The <TT>Button</TT> class provides methods for getting
and setting its label.
<H3><A NAME="TheCheckboxClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">Checkbox</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>Checkbox</TT> class is used to implement checkbox and
radio button GUI controls. The checkbox or radio button is associated
with a label. If a <TT>Checkbox</TT> object is not associated
with a <TT>CheckboxGroup</TT> object, it is implemented as a traditional
checkbox. If a <TT>Checkbox</TT> object is associated with a <TT>CheckboxGroup</TT>
object, it is implemented as a radio button.
<P>
The <TT>Checkbox</TT> class provides three constructors. The first
constructor takes no parameters and implements a blank checkbox.
The second constructor takes a <TT>String</TT> parameter that
is used as the title of the checkbox. The third constructor allows
a <TT>CheckboxGroup</TT> object and the initial state of the radio
button to be specified in addition to its label.
<P>
The <TT>Checkbox</TT> class provides methods for getting and setting
the label and state of the checkbox and its <TT>CheckboxGroup</TT>
object, if any. The state of the checkbox is <TT>boolean</TT>.
<H4><TT><B><FONT FACE="Courier New">CheckboxGroup</FONT></B></TT>
</H4>
<P>
The <TT>CheckboxGroup</TT> class is used with the <TT>Checkbox</TT>
class to implement radio buttons. All <TT>Checkbox</TT> objects
that are associated with a <TT>CheckboxGroup</TT> object are treated
as a single set of radio buttons. Only one button in the group
may be set or on at a given point in time. The <TT>CheckboxGroup</TT>
provides a single, parameterless constructor. It also provides
methods for getting and setting the <TT>Checkbox</TT> object.
<H3><A NAME="TheChoiceClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">Choice</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>Choice</TT> class is used to implement pull-down lists
that can be placed in the main area of a window. These lists are
known as <I>option menus</I> or a <I>pop-up menus of choices </I>and
allow the user to select a single menu value. The <TT>Choice</TT>
class provides a single, parameterless constructor. It also provides
access methods that are used to add items to the list, count the
number of items contained in the list, select a list item, and
determine which list item is selected.
<H3><A NAME="TheListClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">List</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>List</TT> class implements single- and multiple-selection
list GUI controls. The lists provided by the <TT>List</TT> class
are more sophisticated than those provided by the <TT>Choice</TT>
class: The <TT>List</TT> class provides the capability to specify
the size of the scrollable window in which the list items are
displayed and to select multiple items from the list. The <TT>List</TT>
class has two constructors. The first one takes no parameters
and constructs a generic <TT>List</TT> object. The second one
allows the number of rows of the visible window to be specified
and whether or not multiple selections are allowed.
<P>
The <TT>List</TT> class provides several access methods that are
used to add, delete, and replace list items, count the number
of items in the list, determine which items are selected, and
select items within the list.
<H3><A NAME="TheTextComponentClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">TextComponent</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>TextComponent</TT> class is the superclass of all text-based
classes. It provides a common set of methods used by its <TT>TextField</TT>
and <TT>TextArea</TT> subclasses. It does not provide any constructors
and cannot be instantiated. It provides methods for getting and
setting the text that is displayed in a text object, setting the
text object to an editable or read-only state, or selecting text
that is contained within the object.
<H4><TT><B><FONT FACE="Courier New">TextField</FONT></B></TT>
</H4>
<P>
The <TT>TextField</TT> class implements a one-line text entry
field. It provides four constructors that are used to specify
the width of the text field in character columns and the default
text to be displayed within the field. It provides several methods
for accessing the field's size and for specifying whether the
characters typed by the user should be displayed. The <TT>setEchoCharacter()</TT>
method is used to specify a character that is to be displayed
in lieu of text typed by the user. This method is used to implement
password-like fields.
<H4><TT><B><FONT FACE="Courier New">TextArea</FONT></B></TT></H4>
<P>
The <TT>TextArea</TT> class implements scrollable text entry objects
that span multiple lines and columns. It provides four constructors
that allow the number of rows and columns and the default text
display to be specified. It provides several methods that return
the dimensions of the text area and insert, append, and replace
the text that is contained in the text area. It also provides
the capability to set the text to read-only or edit mode.
<H3><A NAME="TheCanvasClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">Canvas</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>Canvas</TT> class implements a GUI object that supports
drawing. Drawing is not implemented on the canvas itself, but
on the <TT>Graphics</TT> object provided by the canvas. The <TT>Canvas</TT>
class is usually subclassed to implement a custom graphics object.
It provides a single, parameterless constructor and one useful
method-the <TT>paint()</TT> method, which specifies how its <TT>Graphics</TT>
object is to be updated.
<H4><TT><B><FONT FACE="Courier New">Graphics</FONT></B></TT></H4>
<P>
The <TT>Graphics</TT> class supports the drawing of graphical
objects and text within a window. It is used with all graphical
applications. The <TT>Graphics</TT> class is an abstract class
that is created through methods of other classes. A <TT>Graphics</TT>
object is typically provided as an argument to the <TT>paint()</TT>
method of a <TT>Canvas</TT> object.
<P>
The <TT>Graphics</TT> class provides numerous methods for drawing
lines, ovals, rectangles, polygons, text, images, and other objects
that can be displayed within a window. It also provides methods
for setting the foreground and background colors and the current
text font. You should browse through the API description of this
class to get a feel for all the methods it provides.
<H3><A NAME="TheScrollbarClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">Scrollbar</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>Scrollbar</TT> class is used to implement vertical and
horizontal scrollbars. It provides three constructors that allow
the orientation of the scrollbar to be specified, as well as parameters
that control the scrollbar's operation. It provides several methods
that allow the scrollbar's parameters and current value to be
read and set. <A HREF="ch24.htm" >See Chapter 24</A>, &quot;Scrollbars,&quot;
for more information.
<H2><A NAME="ConstructingMenus"><B><FONT SIZE=5 COLOR=#FF0000>Constructing
Menus</FONT></B></A></H2>
<P>
Java provides several classes that allow menu bars to be constructed
and attached to a <TT>Frame</TT> window. These classes are directly
descended from the <TT>Object</TT> class and are not subclasses
of the component class.
<P>
The <TT>MenuComponent</TT> class is the superclass of the menu-related
classes and provides a common set of methods that are used by
its subclasses. The <TT>MenuComponent</TT> class provides a default
parameterless constructor, although objects of this class should
not be directly created. The <TT>getFont()</TT> and <TT>setFont()</TT>
methods are used to specify the font to be used with a <TT>MenuComponent</TT>
object. The <TT>getParent()</TT> method is used to retrieve an
object that implements the <TT>MenuContainer</TT> interface and
contains a specified <TT>MenuComponent</TT> object.
<H3><A NAME="TheMenuBarClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">MenuBar</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>MenuBar</TT> class implements a menu bar that is attached
to a <TT>Frame</TT> window. It provides a default parameterless
constructor and several access methods for adding and removing
<TT>Menu</TT> objects from the menu bar. It also provides methods
that are used to return the current number of menus and to get
and set a special help menu.
<H3><A NAME="TheMenuItemClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">MenuItem</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>MenuItem</TT> class is used to implement items that may
be selected from a pull-down menu. It is extended by the <TT>Menu</TT>
and <TT>CheckboxMenuItem</TT> classes. The <TT>MenuItem</TT> class
implements items that can be selected from a pull-down menu. Because
it is subclassed by the <TT>Menu</TT> and <TT>CheckboxMenuItem</TT>
classes, it provides the capability for objects of these classes
to be selected from a pull-down menu. This allows multiple levels
of menus to be implemented.
<P>
The <TT>MenuItem</TT> class provides a single constructor that
takes a <TT>String</TT> object as a parameter. The <TT>String</TT>
object is used as the label of the menu item. The <TT>MenuItem</TT>
class provides methods for enabling and disabling a menu item
and for getting and setting its label.
<H3><A NAME="TheMenuClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">Menu</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>Menu</TT> class implements a single pull-down menu that
is attached to a menu bar or other menu. It provides two constructors
that allow the menu's label to be specified and determine whether
it is to be implemented as a tear-off menu. It also provides methods
that are used to add or remove menu items, add menu separators,
count the number of items in the menu, and determine what menu
item is currently selected.
<H3><A NAME="TheCheckboxMenuItemClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">CheckboxMenuItem</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>CheckboxMenuItem</TT> class is used to implement menu
items that may be checked on or off. It provides a single constructor
that contains the label to be used with the checkbox menu item.
The <TT>setState()</TT> and <TT>getState()</TT> methods are used
to determine the checked state of the menu item.
<H3><A NAME="TheMenuContainerClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">MenuContainer</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>MenuContainer</TT> interface provides a set of methods
that are implemented by classes that contain menus. These methods
are <TT>getFont()</TT>, <TT>postEvent()</TT>, and <TT>remove()</TT>.
The <TT>getFont()</TT> method returns the current font associated
with a menu object. The <TT>postEvent()</TT> method is used to
generate a menu-related event. The <TT>remove()</TT> method is
used to remove a <TT>MenuComponent </TT>object.
<H2><A NAME="OrganizingWindows"><B><FONT SIZE=5 COLOR=#FF0000>Organizing
Windows</FONT></B></A></H2>
<P>
The method by which the components of a <TT>Container</TT> object
are organized is determined by an object that implements the <TT>LayoutManager</TT>
interface. The layout of a <TT>Container</TT> is specified using
the <TT>setLayout()</TT> method of the <TT>Container</TT> class.
It passes an object that implements the <TT>LayoutManager</TT>
interface as a parameter.
<H3><A NAME="TheLayoutManagerClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">LayoutManager</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>LayoutManager</TT> interface provides a set of methods
that are implemented by classes that control the layout of a container.
These methods include those that add or remove components from
a layout, specify the size of the container, and lay out the components
of the container.
<H3><A NAME="TheBorderLayoutClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">BorderLayout</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>BorderLayout</TT> class is used to lay out the GUI components
contained in a <TT>Container</TT> object. It lays out components
along the north, south, east, and west borders of the container
and in the center of the container. The center component gets
any space left over from the north, south, east, and west border
components. It is the default layout for the <TT>Window</TT>,
<TT>Frame</TT>, and <TT>Dialog</TT> classes. It provides the capability
to specify the horizontal and vertical gap between the laid out
components and the container.
<H3><A NAME="TheCardLayoutClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">CardLayout</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>CardLayout</TT> class is used to lay out the components
of a <TT>Container</TT> object in the form of a deck of cards
where only one card is visible at a time. The class provides methods
that are used to specify the first, last, next, and previous components
in the container. 
<H3><A NAME="TheFlowLayoutClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">FlowLayout</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>FlowLayout</TT> class is used to lay out the components
of a <TT>Container</TT> object in a left-to-right, top-to-bottom
fashion. It is the default layout used with the <TT>Panel</TT>
class. It allows the alignment of the components it lays out to
be specified by the <TT>LEFT</TT>, <TT>CENTER</TT>, and <TT>RIGHT</TT>
constants.
<H3><A NAME="TheGridLayoutClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">GridLayout</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>GridLayout</TT> class is used to lay out the components
of a <TT>Container</TT> object in a grid where all components
are the same size. The <TT>GridLayout</TT> constructor is used
to specify the number of rows and columns of the grid.
<H3><A NAME="TheGridBagLayoutClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">GridBagLayout</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>GridBagLayout</TT> class lays out the components of a
<TT>Container</TT> object in a grid-like fashion, where some components
may occupy more than one row or column. The <TT>GridBagConstraints</TT>
class is used to identify the positioning parameters of a component
that is contained within an object that is laid out using <TT>GridBagLayout</TT>.
The <TT>Insets</TT> class is used to specify the margins associated
with an object that is laid out using a <TT>GridBagLayout</TT>
object. Refer to the API description of the <TT>GridBagLayout</TT>
class for more information on how to use this layout.
<H2><A NAME="HandlingEvents"><B><FONT SIZE=5 COLOR=#FF0000>Handling
Events</FONT></B></A></H2>
<P>
The user communicates with window programs by performing actions
such as clicking a mouse button or pressing a key on the keyboard.
These actions result in the generation of <TT>Event </TT>objects.
The process of responding to the occurrence of an event is known
as <I>event handling</I>. Window programs are said to be <I>event
driven</I> because they operate by performing actions in response
to events.
<P>
The <TT>Event</TT> class encapsulates all Windows event processing
and is, therefore, a very important class. Because the Windows
user interface is event driven, all nontrivial window programs
must handle user events.
<P>
The <TT>Event</TT> class defines the entire list of events handled
by window programs using <I>class constants</I>. These constants
are used to identify the events that are passed to event-handling
methods. You should review the Java API description of the <TT>Event</TT>
class to familiarize yourself with these constants.
<P>
The <TT>Event</TT> class provides four constructors for constructing
events, but you probably won't need to use these constructors
because events are internally generated by the Java runtime system
in response to user interface actions. The <TT>Event</TT> class
also provides methods for determining whether the Control, Shift,
or Meta (Alt) keys were pressed during the generation of an event.
<H2><A NAME="WorkingwithImages"><B><FONT SIZE=5 COLOR=#FF0000>Working
with Images</FONT></B></A></H2>
<P>
The <TT>Image</TT> class is an abstract class that provides a
content-independent mechanism for implementing graphical images.
Images are created by invoking methods of other classes that create
images. The <TT>createImage()</TT> methods of the <TT>Component</TT>
and <TT>Applet</TT> classes and the <TT>getImage()</TT> methods
of the <TT>Toolkit</TT> and <TT>Applet</TT> classes allow images
to be created. <TT>Image</TT> objects are usually displayed on
a <TT>Graphics</TT> object using the <TT>drawImage()</TT> method
of the <TT>Graphics</TT> class. The <TT>Image</TT> class provides
several methods for accessing the properties of an image.
<H3><A NAME="TheColorClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">Color</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>Color</TT> class provides a system-independent color implementation
and defines several color constants. It provides three constructors
that allow a color to be constructed from its red, green, and
blue (RGB) color components. Its access methods provide access
to the RGB values of a color; brighten and darken a color; and
convert colors to a hue, saturation, and brightness (HSB) representation.
<H3><A NAME="ThejavaawtimagePackage"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">java.awt.image</FONT></B></TT><B><FONT SIZE=4>
Package</FONT></B></A></H3>
<P>
The <TT>java.awt.image</TT> package defines interfaces and classes
that support image generation, storage, and processing. These
classes are based on the concept of an image producer and an image
consumer. The <I>image producer</I> provides the data associated
with an image and the <I>image consumer</I> uses the data produced
by the image producer to process or display an image.
<P>
The <TT>ImageProducer</TT> interface provides a set of methods
for classes that produce images. These methods are used to reconstruct
or modify an image being produced. The <TT>ImageConsumer</TT>
interface provides a set of constants and methods for accessing
image data provided by classes that implement the <TT>ImageConsumer</TT>
interface. The <TT>ImageObserver</TT> interface provides a set
of constants and methods by which objects are notified about an
image that is being constructed.
<H4><TT><B><FONT FACE="Courier New">ColorModel</FONT></B></TT>
</H4>
<P>
The <TT>ColorModel</TT> class is an abstract class that provides
a general framework for representing colors and maps this framework
to the RGB color model. It is extended by the <TT>DirectColorModel</TT>
and <TT>IndexColorModel</TT> classes.
<P>
The <TT>DirectColorModel</TT> class is used to directly access
the color values of a pixel. It specifies a method for directly
translating pixel values to their RGB values. The <TT>IndexColorModel</TT>
class translates fixed colormap pixel values to their RGB component
colors using pixel values as an index into a color map.
<H4><TT><B><FONT FACE="Courier New">FilteredImageSource</FONT></B></TT>
</H4>
<P>
The <TT>FilteredImageSource</TT> class provides the capability
to filter an image using an object of class <TT>ImageFilter</TT>.
<TT>FilterImageSource</TT> implements the <TT>ImageProducer</TT>
interface. Its objects are used as intermediate image producers
by filtering the image data produced by an image's original image
producer using an object of the <TT>ImageFilter</TT> class. The
<TT>FilterImageSource</TT> constructor takes the original image's
<TT>ImageProducer</TT> and an <TT>ImageFilter</TT> object as its
parameters. Its access methods provide the capability to add and
remove image consumers and control the generation of image data.
<H4><TT><B><FONT FACE="Courier New">ImageFilter</FONT></B></TT>
</H4>
<P>
The <TT>ImageFilter</TT> class provides a common set of methods
for implementing image filters. It does not implement any filtering
of its own and must be subclassed to provide a specific filtering
mechanism. It is extended by the <TT>CropImageFilter</TT> and
<TT>RGBImageFilter</TT> classes.
<H5><B>CropImageFilter</B></H5>
<P>
The <TT>CropImageFilter</TT> class is an image filter that is
used to crop images to a specific area. Its constructor takes
the upper-left coordinate of the location of the cropping rectangle
and the rectangle's height and width. Its access methods provide
the capability to work with subsets of the pixels of the cropped
area.
<H5><B>RGBImageFilter</B></H5>
<P>
The <TT>RGBImageFilter</TT> class is an abstract class that is
used to create image filters that modify the pixels of the default
RGB color model. In order to create a color filter based on this
class, you subclass it and override the <TT>filterRGB()</TT> method.
This method provides the x- and y-coordinates and RGB value of
the pixel at the specified coordinates and returns the filtered
color value. Setting the <TT>canFilterIndexColorModel</TT> flag
to <TT>true</TT> enables filtering to be performed on the color
model instead of the image. This greatly speeds up the filtering
process and should be used when the filter is position independent.
<H4><TT><B><FONT FACE="Courier New">PixelGrabber</FONT></B></TT>
</H4>
<P>
The <TT>PixelGrabber</TT> class is used to capture the pixels
of an image and store them in an array. It provides two constructors
that specify the area to be captured and the array where the captured
pixels are to be stored. The access methods provided by <TT>PixelGrabber</TT>
are used to control the image capture process.
<H4><TT><B><FONT FACE="Courier New">MemoryImageSource</FONT></B></TT>
</H4>
<P>
The <TT>MemoryImageSource</TT> class is used to create an image
using an array of pixel values. It implements the <TT>ImageProducer</TT>
interface and provides six constructors for the creation of <TT>ImageProducer</TT>
objects based on in-memory descriptions of the image's pixel values.
<H3><A NAME="TheMediaTrackerClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">MediaTracker</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>MediaTracker</TT> class provides a set of methods for
managing images used to implement multimedia objects. It provides
the capability to load a specified set of images, wait on the
loading of the images in the set, and maintain the load status
of the images. It defines the <TT>COMPLETE</TT>, <TT>ABORTED</TT>,
<TT>LOADING</TT>, and <TT>ERRORED</TT> constants to indicate the
load status of an image. It provides a single constructor that
identifies the <TT>Component</TT> object for which the images
are to be loaded. Its access methods are used to manage the image-loading
process.
<H2><A NAME="GeometricalObjects"><B><FONT SIZE=5 COLOR=#FF0000>Geometrical
Objects</FONT></B></A></H2>
<P>
Java provides several classes for working with standard geometrical
objects: <TT>Point</TT>, <TT>Rectangle</TT>, <TT>Polygon</TT>,
and <TT>Dimension</TT>. These classes are described in the following
subsections.
<H3><A NAME="ThePointClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">Point</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>Point</TT> class is used to represent general two-dimensional
x,y-coordinates. It contains a single constructor that takes the
x- and y-coordinates as its parameters. The x and y field variables
are declared as <TT>public</TT>, providing access to individual
coordinates. Methods to perform movement and translation of points
are provided.
<H3><A NAME="TheRectangleClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">Rectangle</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>Rectangle</TT> class represents a rectangle using the
x,y-coordinates of its upper-left corner, its width, and its height.
Five constructors are provided to allow rectangles to be created
using a variety of approaches. Methods are provided that allow
a rectangle's parameters to be accessed, to support movement and
translation operations, and to perform other geometrical operations.
<H3><A NAME="ThePolygonClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">Polygon</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>Polygon</TT> class represents a polygon as a list of x,y-coordinates
that identify the polygon's vertices. It provides a default parameterless
constructor and a constructor that identifies the polygon's vertices.
The <TT>Polygon</TT> class provides several access methods that
are used to access the polygon's vertices, add vertices, test
whether a point is contained in a polygon, and get the minimum
bounding box containing a polygon.
<H3><A NAME="TheDimensionClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">Dimension</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>Dimension</TT> class is used to represent the width and
height of a two-dimensional object. It provides three constructors:
a default parameterless constructor, a constructor that creates
a <TT>Dimension</TT> object using another <TT>Dimension</TT> object,
and a constructor that takes width and height parameters. The
access methods provided by the <TT>Dimension</TT> class allow
the height and width of a dimension to be accessed.
<H2><A NAME="UsingFonts"><B><FONT SIZE=5 COLOR=#FF0000>Using Fonts</FONT></B></A>
</H2>
<P>
The <TT>Font</TT> class implements a system-independent set of
fonts that control text display. Java font names are mapped to
system-supported fonts. The Courier, Dialog, DialogInput, Helvetica,
TimesRoman, and ZapfDingbats fonts are the system-independent
font names provided by Java. A default font is also supported
that may consist of one of the above fonts or may be unique to
a given operating-system platform.
<P>
Fonts can be specified in terms of font name, style, and point
size. The supported styles are defined by the <TT>PLAIN</TT>,
<TT>BOLD</TT>, and <TT>ITALIC</TT> constants of the <TT>Font</TT>
class. Font styles can be combined by adding these constants.
Font sizes can be any integer size supported by the system. The
<TT>Font</TT> class provides a single constructor that takes the
font name, style constants, and point size as its parameters.
<P>
The <TT>Font</TT> class provides several methods for querying
the parameters of a font. The <TT>getName()</TT> method returns
the Java name for the font. The <TT>getFamily()</TT> method returns
the system-dependent font name. The <TT>getStyle()</TT> and <TT>getSize()</TT>
methods return the font's style and size parameters. The <TT>isBold()</TT>,
<TT>isItalic()</TT>, and <TT>isPlain()</TT> methods provides the
capability to test the style parameter.
<H3><A NAME="TheFontMetricsClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">FontMetrics</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>FontMetrics</TT> class is used to access the specific
display parameters of a <TT>Font</TT> object. A <TT>FontMetrics</TT>
object is usually constructed using the <TT>getFontMetrics()</TT>
method of the <TT>Component</TT> class. It provides several methods
for determining a font's display parameters, as described in <A HREF="ch22.htm" >Chapter 22</A>,
&quot;Text and Fonts.&quot;
<P>
The <TT>getHeight()</TT>, <TT>getLeading()</TT>, <TT>getAscent()</TT>,
and <TT>getDescent()</TT> methods are used to determine the vertical
size properties of a font. The <TT>stringWidth()</TT>, <TT>getWidths()</TT>,
<TT>charWidth()</TT>, <TT>charsWidth()</TT>, and <TT>bytesWidth()</TT>
methods are used to determine a font's horizontal size properties.
<H2><A NAME="UsingtheToolkit"><B><FONT SIZE=5 COLOR=#FF0000>Using
the Toolkit</FONT></B></A></H2>
<P>
The <TT>Toolkit</TT> class provides the linkage between the platform-independent
classes of the AWT and their platform-dependent implementation.
It provides the capability to access the platform-dependent peer
classes of the subclasses of the <TT>Component</TT> class. These
classes can be used to obtain direct access to a component's local
implementation. The use of peer classes is discouraged because
it limits the portability of any software that utilizes these
methods. The <TT>java.awt.peer</TT> package contains the interfaces
that are implemented by the platform-dependent AWT software.
<P>
The <TT>Toolkit</TT> class also provides several methods that
provide access to implementation-dependent characteristics that
can be safely used in Java programs. The <TT>getFontList()</TT>
method provides a list of the fonts that are supported by the
windowing environment. The <TT>getImage()</TT> method allows an
image to be retrieved from an URL or the local file system. The
<TT>getScreenSize()</TT> and <TT>getScreenResolution()</TT> methods
return useful characteristics of the screen display. You should
read the API description of this class to familiarize yourself
with the methods that it provides.
<H2><A NAME="Summary"><B><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></B></A>
</H2>
<P>
This chapter introduces you to the classes of the <TT>java.awt</TT>
package, which provide the foundation for Java window programming.
You have learned how the <TT>java.awt</TT> package is organized
and have covered the classes that it contains. You have also covered
the <TT>java.awt.image</TT> and <TT>java.awt.peer</TT> packages.
Part IV provides a detailed tutorial of Java window programming
with numerous programming examples that will further help you
understand the concepts.
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



