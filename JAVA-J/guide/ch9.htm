<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META>
<H1><FONT COLOR=#FF0000>Chapter 9</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Using the Debugger</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#OverviewoftheDebugger" >Overview of the Debugger</A>
<LI><A HREF="#AnExtendedExample" >An Extended Example</A>
<LI><A HREF="#DebuggingMultithreadedPrograms" >Debugging Multithreaded Programs</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
In this chapter you'll learn to use the Java debugger to trace
and debug the Java programs you develop. You'll learn how to invoke
the debugger, load class files, and examine classes as they are
executed. You'll also explore the commands provided by the debugger
and learn to use them through a hands-on tutorial. When you have
finished this chapter, you will know how to use the debugger to
analyze, test, and debug your Java programs.
<H2><A NAME="OverviewoftheDebugger"><B><FONT SIZE=5 COLOR=#FF0000>Overview
of the Debugger</FONT></B></A></H2>
<P>
The Java debugger enables Java programmers to debug their programs
without having to insert special debugging instructions into their
code. The debugger has a number of features, including support
for multithreaded programs and remote applications.
<P>
The debugger is invoked with the <TT>jdb</TT> command. To get
a quick summary of the commands provided by the debugger, enter
the debugger command as follows:
<BLOCKQUOTE>
<TT>C:\java\jdg&gt;jdb<BR>
<FONT FACE="Courier New">Initializing jdb...<BR>
&gt;<BR>
</FONT></TT>
</BLOCKQUOTE>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=578>
<BLOCKQUOTE>
The Java debugger has a few bugs of its own. To get the debugger to run properly, you may have to establish an active Internet connection.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
The debugger takes a few seconds to initialize and then provides
you with the debugger prompt. At the debugger prompt, type <TT>help</TT>
to get a description of the commands it supports:
<BLOCKQUOTE>
<TT>C:\java\jdg&gt;jdb<BR>
<FONT FACE="Courier New">Initializing jdb...<BR>
&gt; help<BR>
** command list **<BR>
threads [threadgroup]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- list threads
<BR>
thread &lt;thread id&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
set default thread<BR>
suspend [thread id(s)]&nbsp;&nbsp;&nbsp;&nbsp;-- suspend threads
(default: all)<BR>
resume [thread id(s)]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- resume threads
(default: all)<BR>
where [thread id] | all&nbsp;&nbsp;&nbsp;-- dump a thread's stack
<BR>
threadgroups&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
list threadgroups<BR>
threadgroup &lt;name&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
set current threadgroup<BR>
<BR>
print &lt;id&gt; [id(s)]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
print object or field<BR>
dump &lt;id&gt; [id(s)]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
print all object information<BR>
<BR>
locals&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
print all local variables in current stack frame<BR>
<BR>
classes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
list currently known classes<BR>
methods &lt;class id&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
list a class's methods<BR>
<BR>
stop in &lt;class id&gt;.&lt;method&gt; -- set a breakpoint in
a method<BR>
stop at &lt;class id&gt;:&lt;line&gt;&nbsp;-- set a breakpoint
at a line<BR>
up [n frames]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
move up a thread's stack<BR>
down [n frames]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
move down a thread's stack<BR>
clear &lt;class id&gt;:&lt;line&gt;&nbsp;&nbsp;&nbsp;-- clear
a breakpoint<BR>
step&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
execute current line<BR>
cont&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
continue execution from breakpoint<BR>
<BR>
catch &lt;class id&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
break for the specified exception<BR>
ignore &lt;class id&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
ignore the specified exception<BR>
<BR>
list [line number]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
print source code<BR>
use [source file path]&nbsp;&nbsp;&nbsp;&nbsp;-- display or change
the source path<BR>
<BR>
memory&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
report memory usage<BR>
gc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
free unused objects<BR>
<BR>
load classname&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
load Java class to be debugged<BR>
run &lt;class&gt; [args]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
start execution of a loaded Java class<BR>
!!&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
repeat last command<BR>
help (or ?)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
list commands<BR>
exit (or quit)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--
exit debugger<BR>
&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
Learning the debugger involves learning how to use each of these
commands.
<H2><A NAME="AnExtendedExample"><B><FONT SIZE=5 COLOR=#FF0000>An
Extended Example</FONT></B></A></H2>
<P>
In order to get you quickly up to speed on the operation of the
debugger, let's use it to analyze a program that you've already
developed. Change directories to the <TT>ch06</TT> directory and
recompile the <TT>ch06</TT> source files using the <TT>-g</TT>
option. This will result in additional debugging information being
inserted into the compiled bytecode files.
<BLOCKQUOTE>
<TT>C:\java\jdg\ch06&gt;javac -g CGTextEdit.java<BR>
<BR>
<FONT FACE="Courier New">C:\java\jdg\ch06&gt;javac -g CGText.java
<BR>
<BR>
C:\java\jdg\ch06&gt;javac -g CGTextPoint.java<BR>
<BR>
C:\java\jdg\ch06&gt;javac -g CGTextBox.java<BR>
<BR>
C:\java\jdg\ch06&gt;javac -g CDrawApp.java</FONT></TT>
</BLOCKQUOTE>
<P>
When you have finished compiling the source files, run the debugger
by entering the <TT>jdb </TT>command:
<BLOCKQUOTE>
<TT>C:\java\jdg\ch06&gt;jdb<BR>
<FONT FACE="Courier New">Initializing jdb...<BR>
&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
At the debugger prompt, type <TT>load jdg.ch06.CDrawApp</TT>:
<BLOCKQUOTE>
<TT>&gt; load jdg.ch06.CDrawApp<BR>
<FONT FACE="Courier New">0x13a41b8:class(jdg.ch06.CDrawApp)<BR>
&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
The debugger responds by loading the <TT>CDrawApp</TT> class.
The hexadecimal number preceding the class name is a Java runtime
identifier for the <TT>CDrawApp</TT> class. Load the <TT>CDraw</TT>
class by typing <TT>load jdg.ch06.CDraw</TT>:
<BLOCKQUOTE>
<TT>&gt; load jdg.ch06.CDraw<BR>
<FONT FACE="Courier New">0x13a54e8:class(jdg.ch06.CDraw)<BR>
&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
Now that you've loaded these two classes, you want to set a breakpoint
in the <TT>main()</TT> method of <TT>CDrawApp</TT>. A <I>breakpoint</I>
is a place in your program where the debugger stops execution
to allow you to enter debugging commands. You set a breakpoint
using the <TT>stop in</TT> command:
<BLOCKQUOTE>
<TT>&gt; stop in CDrawApp.main<BR>
<FONT FACE="Courier New">Breakpoint set in jdg.ch06.CDrawApp.main
<BR>
&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
This tells the debugger to stop execution when it encounters the
<TT>main()</TT> method of <TT>CDrawApp</TT>. Because the <TT>main()</TT>
method is the first method executed in the <TT>CDrawApp</TT> program,
the debugger will stop just as it starts to execute <TT>CDrawApp</TT>.
Run the debugger for <TT>CDrawApp</TT> to see how the breakpoint
works:
<BLOCKQUOTE>
<TT>&gt; run CDrawApp<BR>
<FONT FACE="Courier New">running ...<BR>
main[1]<BR>
Breakpoint hit: jdg.ch06.CDrawApp.main (CDrawApp:18)<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
The debugger runs <TT>CDrawApp</TT> and stops at the breakpoint.
It changes its prompt to <TT>main[1]</TT> to let you know that
it is suspended in the number 1 stack frame of the main thread.
A stack frame represents the state of the stack of the Java virtual
machine as a result of a method invocation. Refer to the section
&quot;JVM Stack&quot; in <A HREF="ch37.htm" >Chapter 37</A>, &quot;The
Java Virtual Machine.&quot; Now that you've stopped the debugger
with your breakpoint, use the <TT>list</TT> command to see where
you are in the program's flow of control:
<BLOCKQUOTE>
<TT>main[1] list<BR>
<FONT FACE="Courier New">14&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;import
java.io.IOException;<BR>
15<BR>
16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class
CDrawApp {<BR>
17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public
static void main(String args[]) throws IOException {<BR>
18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&nbsp;&nbsp;CDraw
program = new CDraw();<BR>
19&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;program.run();
<BR>
20&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
21&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
22<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
The arrow indicates that the debugger has stopped at the point
where the program instance of <TT>CDrawApp</TT> is about to be
created. Now step into the <TT>CDraw()</TT> constructor using
the <TT>step</TT> command. This command allows you to control
a program's execution one instruction at a time and is used to
produce the following debugger output:
<BLOCKQUOTE>
<TT>main[1] step<BR>
<FONT FACE="Courier New">main[1]<BR>
Breakpoint hit: jdg.ch06.CDraw.&lt;init&gt; (CDraw:29)<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
The debugger informs you that it has stopped at a breakpoint in
the <TT>CDraw</TT> constructor. The <TT>&lt;init&gt;</TT> identifier
is used to indicate a constructor. Enter another <TT>list</TT>
command to see where you are:
<BLOCKQUOTE>
<TT>main[1] list<BR>
<FONT FACE="Courier New">25&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static
KeyboardInput kbd = new KeyboardInput(System.in);<BR>
26&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BorderedPrintCGrid
grid;<BR>
27<BR>
28&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Method declarations<BR>
29&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&nbsp;CDraw()
{<BR>
30&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid
= new BorderedPrintCGrid();<BR>
31&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void
run() throws IOException {<BR>
33&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean
finished = false;<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
The debugger indicates that you're about to execute the <TT>CDraw()</TT>
constructor. Skip forward in the program's execution until you
reach the <TT>run()</TT> method of <TT>CDraw</TT>. Now set a breakpoint
at the <TT>run()</TT> method:
<BLOCKQUOTE>
<TT>main[1] stop in CDraw.run<BR>
<FONT FACE="Courier New">Breakpoint set in jdg.ch06.CDraw.run
<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
Now continue running the debugger with the <TT>continue</TT> command:
<BLOCKQUOTE>
<TT>main[1] cont<BR>
<FONT FACE="Courier New">main[1]<BR>
Breakpoint hit: jdg.ch06.CDraw.run (CDraw:33)<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
The debugger indicates that it stopped at your breakpoint. Use
the <TT>list</TT> command to see where the debugger stopped:
<BLOCKQUOTE>
<TT>main[1] list<BR>
<FONT FACE="Courier New">29&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CDraw()
{<BR>
30&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid
= new BorderedPrintCGrid();<BR>
31&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void
run() throws IOException {<BR>
33&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&nbsp;&nbsp;boolean
finished = false;<BR>
34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do
{<BR>
35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char
command = getCommand();<BR>
36&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch(command){
<BR>
37&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
case 'P':<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
You're at the first instruction in the <TT>run()</TT> method.
Let's take a little break here and look around a bit. First, use
the <TT>methods</TT> command to list the methods that are available
to the <TT>CDraw</TT> class:
<BLOCKQUOTE>
<TT>main[1] methods CDraw<BR>
<FONT FACE="Courier New">void &lt;init&gt;()<BR>
void run()<BR>
char getCommand()<BR>
void addPoint()<BR>
void addBox()<BR>
void addText()<BR>
void editText()<BR>
void editText(CGTextEdit)<BR>
void &lt;clinit&gt;()<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
The debugger responds by listing all methods declared for <TT>CDraw</TT>,
including its constructors, <TT>&lt;init&gt;</TT> and <TT>&lt;clinit&gt;</TT>.
These constructors are internal methods generated by the Java
virtual machine.
<P>
The <TT>classes</TT> command lists all classes that are currently
known (loaded) by the debugger. Let's take a look at them:
<BLOCKQUOTE>
<TT>main[1] classes<BR>
<FONT FACE="Courier New">** classes list **<BR>
0x1393008:class(java.lang.Thread)<BR>
0x1393018:class(java.lang.Object)<BR>
0x1393098:class(java.lang.Class)<BR>
0x1393028:class(java.lang.String)<BR>
0x1393038:class(java.lang.ThreadDeath)<BR>
0x1393048:class(java.lang.Error)<BR>
0x1393058:class(java.lang.Throwable)<BR>
0x1393068:class(java.lang.Exception)<BR>
0x1393078:class(java.lang.RuntimeException)<BR>
0x1393088:interface(java.lang.Cloneable)<BR>
0x13930b0:class(java.lang.ThreadGroup)<BR>
0x13930e0:class(java.lang.System)<BR>
0x13930f0:class(java.io.BufferedInputStream)<BR>
0x1393100:class(java.io.FilterInputStream)<BR>
0x1393110:class(java.io.InputStream)<BR>
0x1393128:class(java.io.FileInputStream)<BR>
0x1393140:class(java.io.FileDescriptor)<BR>
0x1393170:class(java.io.PrintStream)<BR>
0x1393180:class(java.io.FilterOutputStream)<BR>
0x1393190:class(java.io.OutputStream)<BR>
0x13931a8:class(java.io.BufferedOutputStream)<BR>
0x13931c0:class(java.io.FileOutputStream)<BR>
0x1393208:class(java.lang.StringBuffer)<BR>
0x1393240:class(java.lang.Integer)<BR>
0x1393250:class(java.lang.Number)<BR>
0x13932a8:class(java.lang.NoClassDefFoundError)<BR>
0x13932b8:class(java.lang.LinkageError)<BR>
0x13932c8:class(java.lang.OutOfMemoryError)<BR>
0x13932d8:class(java.lang.VirtualMachineError)<BR>
0x13932f0:class(sun.tools.debug.EmptyApp)<BR>
0x1393300:class(sun.tools.debug.Agent)<BR>
0x1393328:class(java.lang.Runtime)<BR>
0x1393370:class(java.util.Properties)<BR>
0x1393380:class(java.util.Hashtable)<BR>
0x1393390:class(java.util.Dictionary)<BR>
0x13933a8:class(java.util.HashtableEntry)<BR>
0x1393768:class(java.net.ServerSocket)<BR>
0x1393780:class(java.net.PlainSocketImpl)<BR>
0x1393790:class(java.net.SocketImpl)<BR>
0x13937e0:class(java.net.InetAddress)<BR>
0x13938a8:class(java.lang.Math)<BR>
0x13938b8:class(java.util.Random)<BR>
0x1393948:class(java.lang.Character)<BR>
0x1393a18:class(sun.tools.java.ClassPath)<BR>
0x1393a28:class(java.lang.Compiler)<BR>
0x1393a58:class(java.io.File)<BR>
0x1393aa0:class(sun.tools.java.ClassPathEntry)<BR>
0x1393b10:class(sun.tools.zip.ZipFile)<BR>
0x1393b40:class(java.io.RandomAccessFile)<BR>
0x1393bb0:interface(sun.tools.zip.ZipConstants)<BR>
0x1393c00:class(sun.tools.zip.ZipEntry)<BR>
0x13a2638:class(sun.tools.debug.BreakpointHandler)<BR>
0x13a2670:class(sun.tools.debug.BreakpointQueue)<BR>
0x13a26a8:class(java.util.Vector)<BR>
0x13a26c8:class(java.net.Socket)<BR>
0x13a28f0:class(java.io.DataInputStream)<BR>
0x13a2910:class(java.net.SocketInputStream)<BR>
0x13a2938:class(sun.tools.debug.ResponseStream)<BR>
0x13a2950:class(java.net.SocketOutputStream)<BR>
0x13a2978:class(java.io.DataOutputStream)<BR>
0x13a29e8:class(sun.tools.debug.AgentOutputStream)<BR>
0x13a2ab0:class(java.util.HashtableEnumerator)<BR>
0x13a2ad8:class(java.util.VectorEnumerator)<BR>
0x13a2f48:interface(java.lang.Runnable)<BR>
0x13a37d0:interface(sun.tools.debug.AgentConstants)<BR>
0x13a3d18:interface(java.io.DataOutput)<BR>
0x13a3d28:interface(java.io.DataInput)<BR>
0x13a4130:interface(java.util.Enumeration)<BR>
0x13a41b8:class(jdg.ch06.CDrawApp)<BR>
0x13a44e0:interface(sun.tools.java.Constants)<BR>
0x13a4508:class(sun.tools.java.Identifier)<BR>
0x13a54e8:class(jdg.ch06.CDraw)<BR>
0x13a54f8:class(jdg.ch05.KeyboardInput)<BR>
0x13a5810:interface(sun.tools.java.RuntimeConstants)<BR>
0x13a6bf8:class(java.lang.ClassNotFoundException)<BR>
0x13a6fc8:class(sun.tools.debug.Field)<BR>
0x13a7a38:class(sun.tools.debug.BreakpointSet)<BR>
0x13a7dc0:class(sun.tools.debug.MainThread)<BR>
0x13a8090:class(sun.tools.debug.StackFrame)<BR>
0x13a8168:class(sun.tools.java.Package)<BR>
0x13a8230:class(sun.tools.java.ClassFile)<BR>
0x13a8318:class(sun.tools.debug.LineNumber)<BR>
0x13a9830:class(jdg.ch05.BorderedPrintCGrid)<BR>
0x13a9840:class(jdg.ch05.PrintCGrid)<BR>
0x13a9850:class(jdg.ch05.CGrid)<BR>
0x13a9868:class([[C)<BR>
0x13a9878:class([C)<BR>
0x13a9930:class(jdg.ch05.CGObject)<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
That's quite a number of classes! Look through this list to see
if there are any that you recognize. You should be able to identify
some classes that are used by the <TT>CDrawApp</TT> program.
<P>
The <TT>threadgroups</TT> command lists the threadgroups that
are currently defined by the program:
<BLOCKQUOTE>
<TT>main[1] threadgroups<BR>
<FONT FACE="Courier New">1. (java.lang.ThreadGroup)0x13930b8 system
<BR>
2. (java.lang.ThreadGroup)0x13939c0 main<BR>
3. (java.lang.ThreadGroup)0x13a7d60 jdg.ch06.CDrawApp.main<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
The three threadgroups are the <TT>system</TT> threadgroup (used
by the Java runtime system), the default <TT>main</TT> threadgroup,
and the threadgroup associated with the <TT>CDrawApp</TT> program.
<P>
The <TT>threads</TT> command tells you what threads are in a threadgroup:
<BLOCKQUOTE>
<TT>main[1] threads system<BR>
<FONT FACE="Courier New">Group system:<BR>
&nbsp;1. (java.lang.Thread)0x13931f8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Finalizer
thread<BR>
&nbsp;2. (java.lang.Thread)0x1393918&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Debugger
agent<BR>
&nbsp;3. (sun.tools.debug.BreakpointHandler)0x13a2640 Breakpoint
handler<BR>
Group main:<BR>
&nbsp;4. (java.lang.Thread)0x13930a0 main suspended<BR>
Group jdg.ch06.CDrawApp.main:<BR>
&nbsp;5. (sun.tools.debug.MainThread)0x13a7dc8 main at breakpoint
<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
When you list the threads in the <TT>system</TT> threadgroup,
you get a list of all threads maintained by the Java runtime system.
<P>
The <TT>memory</TT> command tells you how much memory is available
to the Java runtime system:
<BLOCKQUOTE>
<TT>main[1] memory<BR>
<FONT FACE="Courier New">Free: 2439408, total: 3145720<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
The available memory on your computer may differ from mine. For
your information, I'm currently running Java on a 486/DX-2 66
computer with 20MB of RAM. Obviously, Java isn't using all of
the memory that's available to it.
<P>
The <TT>where</TT> command dumps the stack used by the Java virtual
machine. It displays the current list of methods that have been
invoked to get you to your breakpoint. An example of the <TT>where</TT>
command follows:
<BLOCKQUOTE>
<TT>main[1] where<BR>
<FONT FACE="Courier New">&nbsp;&nbsp;[1] jdg.ch06.CDraw.run (CDraw:33)
<BR>
&nbsp;&nbsp;[2] jdg.ch06.CDrawApp.main (CDrawApp:19)<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>where</TT> command comes in handy when you are deep in
the inner layers of several nested method invocations. It shows
you how you got to where you are within the program.
<P>
You can use the <TT>up</TT> and <TT>down</TT> commands to move
up and down the stack. The <TT>up</TT> command moves you to a
higher stack frame within the stack:
<P>
<TT>main[1] up</TT>
<P>
<TT>main[2]</TT>
<P>
Do a <TT>list</TT> command to see the results of the <TT>up</TT>
command:
<BLOCKQUOTE>
<TT>main[2] list<BR>
<FONT FACE="Courier New">15<BR>
16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class
CDrawApp {<BR>
17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public
static void main(String args[]) throws IOException {<BR>
18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CDraw
program = new CDraw();<BR>
19&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&nbsp;&nbsp;program.run();
<BR>
20&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
21&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
22<BR>
23&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public
class CDraw {<BR>
main[2]</FONT></TT>
</BLOCKQUOTE>
<P>
Now use the <TT>down</TT> command to go back down the stack to
where you were before:
<BLOCKQUOTE>
<TT>main[2] down<BR>
<FONT FACE="Courier New">main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
Do another <TT>list</TT> command to verify that you have returned
to where you were before you entered the <TT>up</TT> command:
<BLOCKQUOTE>
<TT>main[1] list<BR>
<FONT FACE="Courier New">29&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CDraw()
{<BR>
30&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid
= new BorderedPrintCGrid();<BR>
31&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void
run() throws IOException {<BR>
33&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&nbsp;&nbsp;boolean
finished = false;<BR>
34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do
{<BR>
35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char
command = getCommand();<BR>
36&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch(command){
<BR>
37&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'P':<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
Now let's look at some variables. Enter the <TT>locals</TT> command
to get a list of local variables of the <TT>run()</TT> method:
<BLOCKQUOTE>
<TT>main[1] locals<BR>
<FONT FACE="Courier New">Local variables and arguments:<BR>
&nbsp;&nbsp;this = jdg.ch06.CDraw@13a7ce8<BR>
&nbsp;&nbsp;finished is not in scope.<BR>
&nbsp;&nbsp;command is not in scope.<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>finished</TT> and <TT>command</TT> variables are not in
the current scope because they have not yet been declared. Step
over to the next statement:
<BLOCKQUOTE>
<TT>main[1] step<BR>
<FONT FACE="Courier New">main[1]<BR>
Breakpoint hit: jdg.ch06.CDraw.run (CDraw:35)<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
Enter the <TT>list</TT> command to see where you have stepped:
<BLOCKQUOTE>
<TT>main[1] list<BR>
<FONT FACE="Courier New">31&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void
run() throws IOException {<BR>
33&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean
finished = false;<BR>
34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do
{<BR>
35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&nbsp;&nbsp;&nbsp;char
command = getCommand();<BR>
36&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch(command){
<BR>
37&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
'P':<BR>
38&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addPoint();
<BR>
39&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println();
<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
Do another <TT>locals</TT> command. The <TT>finished</TT> variable
should now be in scope:
<BLOCKQUOTE>
<TT>main[1] locals<BR>
<FONT FACE="Courier New">Local variables and arguments:<BR>
&nbsp;&nbsp;this = jdg.ch06.CDraw@13a7ce8<BR>
&nbsp;&nbsp;finished = false<BR>
&nbsp;&nbsp;command is not in scope.<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
You have now covered most of the debugger commands. Now let's
go on to debugging multithreaded programs. Type <TT>exit</TT>
to exit the debugger.
<H2><A NAME="DebuggingMultithreadedPrograms"><B><FONT SIZE=5 COLOR=#FF0000>Debugging
Multithreaded Programs</FONT></B></A></H2>
<P>
The Java debugger supports the debugging of multithreaded programs.
In fact, it provides a great tool for understanding how multithreaded
programs work. In this section, you use the debugger to debug
the <TT>ThreadTest1</TT> program that you developed in <A HREF="ch8.htm" >Chapter 8</A>,
&quot;Multithreading.&quot;
<P>
Change directories to the <TT>ch08</TT> directory and enter <TT>javac
-g ThreadTest1.java</TT> to add additional debugging information
to the <TT>ThreadTest1.class</TT> bytecode file:
<BLOCKQUOTE>
<TT>C:\java\jdg\ch08&gt;javac -g ThreadTest1.java<BR>
<BR>
<FONT FACE="Courier New">C:\java\jdg\ch08&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
Now start <TT>jdb</TT> and load <TT>ThreadTest1</TT> with the
command <TT>jdb ThreadTest1</TT>:
<BLOCKQUOTE>
<TT>C:\java\jdg\ch08&gt;jdb ThreadTest1<BR>
<FONT FACE="Courier New">Initializing jdb...<BR>
0x13a41b8:class(ThreadTest1)<BR>
&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
Set a breakpoint at the <TT>main()</TT> method of <TT>ThreadTest1</TT>:
<BLOCKQUOTE>
<TT>&gt; stop in ThreadTest1.main<BR>
<FONT FACE="Courier New">Breakpoint set in ThreadTest1.main<BR>
&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
Run <TT>ThreadTest1</TT>:
<BLOCKQUOTE>
<TT>&gt; run ThreadTest1<BR>
<FONT FACE="Courier New">running ...<BR>
<BR>
Breakpoint hit: ThreadTest1.main (ThreadTest1:9)<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
The debugger runs <TT>ThreadTest1</TT> and stops at your breakpoint.
Do a <TT>list</TT> command to see where the debugger stopped:
<BLOCKQUOTE>
<TT>main[1] list<BR>
<FONT FACE="Courier New">5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;import
java.lang.InterruptedException;<BR>
6<BR>
7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class
ThreadTest1 {<BR>
8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public
static void main(String args[]) {<BR>
9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt;&nbsp;&nbsp;&nbsp;MyThread
thread1 = new MyThread(&quot;thread1: &quot;);<BR>
10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyThread
thread2 = new MyThread(&quot;thread2: &quot;);<BR>
11&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;thread1.start();
<BR>
12&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;thread2.start();
<BR>
13&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean
thread1IsAlive = true;<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
The debugger is at the beginning of the <TT>main()</TT> method.
It has not created any new threads at this time. Use the <TT>threads</TT>
command to verify this:
<BLOCKQUOTE>
<TT>main[1] threads<BR>
<FONT FACE="Courier New">Group ThreadTest1.main:<BR>
&nbsp;1. (sun.tools.debug.MainThread)0x13a5d88 main at breakpoint
<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
The only thread is the current main thread of execution. Set a
breakpoint to line 11 of <TT>ThreadTest1</TT>, the point where
both <TT>thread1</TT> and <TT>thread2</TT> will be declared:
<BLOCKQUOTE>
<TT>main[1] stop at ThreadTest1:11<BR>
<FONT FACE="Courier New">Breakpoint set at ThreadTest1:11<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
Now jump to that point in the program:
<BLOCKQUOTE>
<TT>main[1] cont<BR>
<FONT FACE="Courier New">main[1]<BR>
Breakpoint hit: ThreadTest1.main (ThreadTest1:11)<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
Use the <TT>threads</TT> command again to see the effect of the
<TT>thread1</TT> and <TT>thread2</TT> declarations:
<BLOCKQUOTE>
<TT>Group ThreadTest1.main:<BR>
<FONT FACE="Courier New">&nbsp;1. (sun.tools.debug.MainThread)0x13a5d88
main&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at breakpoint<BR>
&nbsp;2. (MyThread)0x13a6b70&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;thread1:&nbsp;&nbsp;zombie
<BR>
&nbsp;3. (MyThread)0x13a6b98&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;thread2:&nbsp;&nbsp;zombie
<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
Both <TT>thread1</TT> and <TT>thread2</TT> are in the New Thread
state. The debugger refers to them as <I>zombies</I>. That's a
curious term considering that the threads have neither started
nor died at this point in the program's execution.
<P>
Now jump ahead in the program to line 13, where both threads are
started. First, set the breakpoint:
<BLOCKQUOTE>
<TT>main[1] stop at ThreadTest1:13<BR>
<FONT FACE="Courier New">Breakpoint set at ThreadTest1:13<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
Now jump ahead to the breakpoint:
<BLOCKQUOTE>
<TT>main[1] cont<BR>
<BR>
<FONT FACE="Courier New">Breakpoint hit: ThreadTest1.main (ThreadTest1:13)
<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
Let's take a quick look around to make sure you are where you
want to be:
<BLOCKQUOTE>
<TT>main[1] list<BR>
<FONT FACE="Courier New">9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyThread
thread1 = new MyThread(&quot;thread1: &quot;);<BR>
10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyThread
thread2 = new MyThread(&quot;thread2: &quot;);<BR>
11&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;thread1.start();
<BR>
12&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;thread2.start();
<BR>
13&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&nbsp;&nbsp;boolean
thread1IsAlive = true;<BR>
14&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean
thread2IsAlive = true;<BR>
15&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do
{<BR>
16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(thread1IsAlive
&amp;&amp; !thread1.isAlive()){<BR>
17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;thread1IsAlive
= false;<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
You should now get different results when you execute the <TT>threads</TT>
command:
<BLOCKQUOTE>
<TT>Group ThreadTest1.main:<BR>
<FONT FACE="Courier New">&nbsp;1. (sun.tools.debug.MainThread)0x13a5d88
main&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at breakpoint<BR>
&nbsp;2. (MyThread)0x13a6b70&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
thread1:&nbsp;&nbsp;suspended<BR>
&nbsp;3. (MyThread)0x13a6b98&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
thread2:&nbsp;&nbsp;running<BR>
main[1]<BR>
</FONT></TT>
</BLOCKQUOTE>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 BIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=582>
<BLOCKQUOTE>
Depending on the machine on which you run the <TT><FONT SIZE=1>jdb</FONT></TT>, you may find that both threads are suspended when you execute the <TT><FONT SIZE=1>threads</FONT></TT> command.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
The debugger tells us that <TT>thread1</TT> is suspended and <TT>thread2</TT>
is running. The <TT>suspend</TT> command is used to suspend the
execution of a running thread. It takes the number of the thread
identified by the <TT>threads</TT> command as its argument. The
<TT>suspend</TT> command is used as follows:
<BLOCKQUOTE>
<TT>main[1] suspend 3<BR>
<FONT FACE="Courier New">main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
Use the <TT>threads</TT> command to verify that it works:
<BLOCKQUOTE>
<TT>main[1] threads<BR>
<FONT FACE="Courier New">Group ThreadTest1.main:<BR>
&nbsp;1. (sun.tools.debug.MainThread)0x13a5d88 main&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at
breakpoint<BR>
&nbsp;2. (MyThread)0x13a6b70&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
thread1:&nbsp;&nbsp;suspended<BR>
&nbsp;3. (MyThread)0x13a6b98&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
thread2:&nbsp;&nbsp;suspended<BR>
main[1]</FONT></TT>
</BLOCKQUOTE>
<P>
Now switch threads to <TT>thread1</TT> using the <TT>thread</TT>
command:
<BLOCKQUOTE>
<TT>main[1] thread 2<BR>
<FONT FACE="Courier New">thread1: [1]</FONT></TT>
</BLOCKQUOTE>
<P>
Notice how the prompt changed to indicate that you switched to
<TT>thread1</TT>. Let's do a <TT>list</TT> command to see where
we are in <TT>thread1</TT>. The results of the <TT>list</TT> command
follow:
<BLOCKQUOTE>
<TT>thread1: [1] list<BR>
<FONT FACE="Courier New">36&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(name+message[i]);
<BR>
37&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
38&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
39&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void
randomWait(){<BR>
40&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&nbsp;&nbsp;try
{<BR>
41&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sleep((long)(3000*Math.random()));
<BR>
42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}catch
(InterruptedException x){<BR>
43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Interrupted!&quot;);
<BR>
44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
thread1: [1]</FONT></TT>
</BLOCKQUOTE>
<P>
<TT>Thread1</TT> is in the middle of the <TT>randomWait()</TT>
method.
<P>
Switch threads to see what <TT>thread2</TT> is up to:
<BLOCKQUOTE>
<TT>thread2: [1] list<BR>
<FONT FACE="Courier New">36&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(name+message[i]);
<BR>
37&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
38&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
39&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void
randomWait(){<BR>
40&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&nbsp;&nbsp;try
{<BR>
41&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sleep((long)(3000*Math.random()));
<BR>
42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}catch
(InterruptedException x){<BR>
43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Interrupted!&quot;);
<BR>
44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
thread2: [1]</FONT></TT>
</BLOCKQUOTE>
<P>
It looks like <TT>thread2</TT> is in the same state as <TT>thread1</TT>.
<P>
Set a breakpoint for <TT>thread1</TT> and <TT>thread2</TT>:
<BLOCKQUOTE>
<TT>thread2: [1] stop at MyThread:36<BR>
<FONT FACE="Courier New">Breakpoint set at MyThread:36<BR>
thread2: [1] thread 2<BR>
thread1: [1] stop at MyThread:36<BR>
Breakpoint set at MyThread:36<BR>
thread1: [1]</FONT></TT>
</BLOCKQUOTE>
<P>
Now continue the execution of <TT>thread1</TT>:
<BLOCKQUOTE>
<TT>thread1: [1] cont<BR>
<FONT FACE="Courier New">thread1: [1] list<BR>
32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public
void run() {<BR>
33&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
name = getName();<BR>
34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(int
i=0;i&lt;message.length;++i) {<BR>
35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;randomWait();
<BR>
36&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(name+message[i]);
<BR>
37&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
38&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
39&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void
randomWait(){<BR>
40&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
try {<BR>
thread1: [1]</FONT></TT>
</BLOCKQUOTE>
<P>
The thread executes up to the breakpoint. You can verify this
by running the <TT>threads</TT> command:
<BLOCKQUOTE>
<TT>thread1: [1] threads<BR>
<FONT FACE="Courier New">Group ThreadTest1.main:<BR>
&nbsp;1. (sun.tools.debug.MainThread)0x13a5888 main&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;suspended
<BR>
&nbsp;2. (MyThread)0x13a59f0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
thread1:&nbsp;&nbsp;at breakpoint<BR>
&nbsp;3. (MyThread)0x13a5a18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
thread2:&nbsp;&nbsp;suspended<BR>
thread1: [1]</FONT></TT>
</BLOCKQUOTE>
<P>
If you use the <TT>step</TT> command, <TT>thread1</TT> becomes
suspended and <TT>thread2</TT> reaches the breakpoint:
<BLOCKQUOTE>
<TT>thread1: [1] step<BR>
<FONT FACE="Courier New">thread1: [1]<BR>
Breakpoint hit: MyThread.run (MyThread:36)<BR>
thread2: [1] threads<BR>
Group ThreadTest1.main:<BR>
&nbsp;1. (sun.tools.debug.MainThread)0x13a5888 main&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;suspended
<BR>
&nbsp;2. (MyThread)0x13a59f0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
thread1:&nbsp;&nbsp;suspended<BR>
&nbsp;3. (MyThread)0x13a5a18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
thread2:&nbsp;&nbsp;at breakpoint<BR>
thread2: [1]</FONT></TT>
</BLOCKQUOTE>
<P>
You can use the <TT>print</TT> and <TT>dump</TT> commands to display
the values of the message field of <TT>MyThread</TT>:
<BLOCKQUOTE>
<TT>thread2: [1] print MyThread.message<BR>
<FONT FACE="Courier New">&quot;MyThread&quot; is not a valid field
of (MyThread)0x13a5a18<BR>
MyThread.message = 0x13a5958 Object[6] = { Java, is, hot,, &nbsp;&nbsp;&nbsp;
}<BR>
thread2: [1] dump MyThread.message<BR>
&quot;MyThread&quot; is not a valid field of (MyThread)0x13a5a18
<BR>
MyThread.message = 0x13a5958 Object[6] = { Java, is, hot,, &nbsp;&nbsp;&nbsp;
}<BR>
thread2: [1]</FONT></TT>
</BLOCKQUOTE>
<P>
These commands are somewhat buggy. They complain that the fields
are not valid, but they display the values of the fields anyway.
<P>
At this point, you've covered all the important features of the
Java debugger. You can experiment with the debugger to see how
the two threads continue their execution. When you are finished,
use the <TT>exit</TT> command to terminate the debugger.
<H2><A NAME="Summary"><B><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></B></A>
</H2>
<P>
In this chapter you have learned how to use the Java debugger
to step through the execution of a Java program. You have learned
how to invoke the debugger, load class files, and examine classes
as they are executed. In <A HREF="ch10.htm" >Chapter 10</A>, &quot;Automating
Software Documentation,&quot; you will learn how to use another
program contained in the Java toolkit-the Java documentation tool.
You'll see how this tool can help you to quickly and easily develop
documentation for your Java programs.
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



