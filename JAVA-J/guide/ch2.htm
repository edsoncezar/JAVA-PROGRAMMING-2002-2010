<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META>
<H1><FONT COLOR=#FF0000>Chapter 2</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Java Overview</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>

<UL>
<LI><A HREF="#GettingtheJDK" >Getting the JDK</A>
<LI><A HREF="#AQuickTouroftheJDK" >A Quick Tour of the JDK</A>
<LI><A HREF="#TheJavaLanguage" >The Java Language</A>
<UL>
<LI><A HREF="#JavaIsFamiliarandSimple" >Java Is Familiar and Simple</A>
<LI><A HREF="#JavaIsObjectOriented" >Java Is Object-Oriented</A>
<LI><A HREF="#JavaIsSaferandMoreReliable" >Java Is Safer and More Reliable</A>
<LI><A HREF="#JavaIsSecure" >Java Is Secure</A>
<LI><A HREF="#JavaIsMultithreaded" >Java Is Multithreaded</A>
<LI><A HREF="#JavaIsInterpretedandPortable" >Java Is Interpreted and Portable</A>
<LI><A HREF="#JavaIstheProgrammingLanguageofthe" >Java Is the Programming Language of the Web</A>
</UL>
<LI><A HREF="#TheJavaAPI" >The Java API</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
<FONT COLOR=#000000>This chapter lays the foundation for learning
Java. It provides an overview of the </FONT>Java Developer's Kit
(JDK), the Java language, and the Java API from the perspective
of a software developer.
<P>
You will download and install the JDK, and take a quick tour of
its contents. You will then learn the features of the Java language
that set it apart from its predecessors, C++ and C. You will be
introduced to the Java API and learn how Java programs are built
from and extend the API. So grab yourself a cup of you-know-what
and let's begin.
<H2><A NAME="GettingtheJDK"><B><FONT SIZE=5 COLOR=#FF0000>Getting
the JDK</FONT></B></A></H2>
<P>
Java is distributed as the JDK. It is available from Sun's Java
home page at <TT><A TARGET="resource window" HREF="http://java.sun.com">http://java.sun.com</A></TT> or <TT><A TARGET="resource window" HREF="http://www.javasoft.com">http://www.javasoft.com</A></TT>.
<A HREF="f2-1.gif" >Figure 2.1</A> shows the Java home page. From
there, you can click on the Products and Services link to download
a version of the JDK for your computer and operating system.
<P>
<A HREF="f2-1.gif"><B>Figure 2.1 : </B><I>The Java home page.</I></A>
<P>
<A HREF="f2-2.gif" >Figures 2.2</A> and <A HREF="f2-3.gif" >2.3</A>
show some of the pages you are likely to encounter on the way
to finding the JDK that is right for you. Sun makes earlier versions
of the software available for download. Always download the latest
version that is compatible with your hardware and operating system.
The examples in this book use JDK 1.0. As long as you are using
this version, or later, you will be able to work through these
examples. I will be running Java under Windows 95. If you are
using another operating system, follow the installation instructions
for that operating system.
<P>
<A HREF="f2-2.gif"><B>Figure 2.2 : </B><I>JacaSoft  products and services.</I></A>
<P>
<A HREF="f2-3.gif"><B>Figure 2.3 : </B><I>The binary code license.</I></A>
<P>
The JDK is distributed as a self-extracting executable file. Move
it to a temporary directory and then execute it. It will extract
itself and set up its directory structure-a single top-level directory,
<TT>java</TT>, with several subdirectories. Move the <TT>java</TT>
directory tree from your temporary directory to a permanent home.
I suggest <TT>c:\java</TT>. That's where I keep my JDK.
<H2><A NAME="AQuickTouroftheJDK"><B><FONT SIZE=5 COLOR=#FF0000>A
Quick Tour of the JDK</FONT></B></A></H2>
<P>
Now that you have the latest version of the JDK installed on your
computer, you're probably wondering what's inside. Let's take
a quick look.
<P>
<A HREF="f2-4.gif" >Figure 2.4</A> shows the contents of the <TT>java</TT>
directory. It consists of four subdirectories and four files,
which are
<P>
<A HREF="f2-4.gif"><B>Figure 2.4 : </B><I>The <TT>java</TT> directory.</I></A>
<P>
<UL>
<LI><FONT COLOR=#000000>The Java copyright and license agreement</FONT>
<LI><FONT COLOR=#000000>An HTML file that contains information
about your JDK and links to online documentation</FONT>
<LI><FONT COLOR=#000000>A readme file that provides additional
information about your JDK release</FONT>
<LI><FONT COLOR=#000000>A zipped file containing the java source
code for the Java API library files</FONT>
</UL>
<P>
The <TT>java\bin</TT> directory (<A HREF="f2-5.gif" >see Figure 2.5</A>)
contains all the executable programs and dynamic link libraries
(DLLs) for the JDK toolset. The major software development tools
provided with the JDK are the compiler (<TT>javac</TT>), interpreter
(<TT>java</TT>), debugger (<TT>jdb</TT>), disassembler (<TT>javap</TT>),
documentation generator (<TT>javadoc</TT>), applet viewer (<TT>appletviewer</TT>),
and C header file tool (<TT>javah</TT>). We're going to examine
each of these tools in <A HREF="ch3.htm" >Chapter 3</A>, &quot;Using
the Java Developer's Kit.&quot; If you absolutely can't wait to
get your hands on Java, go ahead to <A HREF="ch3.htm" >Chapter 3</A>,
but make sure you come back and browse through the rest of this
overview.
<P>
<A HREF="f2-5.gif"><B>Figure 2.5 : </B><I>The Java toolset.</I></A>
<P>
The <TT>java\demo</TT> directory, shown in <A HREF="f2-6.gif" >Figure 2.6</A>,
contains lots of nifty demos that highlight Java's finer features.
I'll show you how to run these demos in <A HREF="ch3.htm" >Chapter 3</A>.
If you can't control the urge to run some of the demos now, click
on the HTML files in the demo folders. Be sure to use a Java-enabled
browser, such as Netscape 2.0.
<P>
<A HREF="f2-6.gif"><B>Figure 2.6 : </B><I>Java demos.</I></A>
<P>
The <TT>java\include</TT> directory (<A HREF="f2-7.gif" >see Figure 2.7</A>)
contains C header files that are used to write C programs, called
<I>native methods</I>, that extend the Java API. We won't be getting
involved with native methods until <A HREF="ch38.htm" >Chapter 38</A>,
&quot;Creating Native Methods.&quot;
<P>
<A HREF="f2-7.gif"><B>Figure 2.7 : </B><I>C header files for writing native methods.</I></A>
<P>
Finally, the <TT>java\lib</TT> directory, shown in <A HREF="f2-8.gif" >Figure 2.8</A>,
contains the class library files for the Java API. The file <TT>classes.zip</TT>
contains all the compiled library files. The Java compiler and
interpreter are able to work with the library files, in compressed
form, which saves you some disk space and provides more efficient
operation.
<P>
<A HREF="f2-8.gif"><B>Figure 2.8 : </B><I>Class library files.</I></A>
<P>
Now that you know a little bit about what's inside the JDK, let's
quickly cover the Java language and application programming interface
so we can get started using the JDK tools.
<H2><B><FONT SIZE=5 COLOR=#FF0000>The Java Language</FONT></B>
</H2>
<P>
<A NAME="TheJavaLanguage">The Java language is a remarkable example
of programming language evolution. Java builds on the familiar
and useful features of C++ while removing its complex, dangerous,
and superfluous elements. The result is a language that is safer,
simpler, and easier to use. The following subsections describe
Java in contrast to C++. Appendix B, &quot;Differences Between
Java and C++,&quot; provides a detailed identification of the
differences between the two languages.</A>
<H3><A NAME="JavaIsFamiliarandSimple"><B>Java Is Familiar and
Simple</B></A></H3>
<P>
If you have ever programmed in C++, you will find Java's appeal
to be instantaneous. Since Java's syntax mirrors that of C++,
you will be able to write Java programs within minutes. Your first
programs will come quickly and easily, with very little programming
overhead.
<P>
You will have the feeling that you have eliminated a lot of clutter
from your programs-and you will have. All the cryptic header files
and preprocessor statements of C and C++ are gone. All the arcane
<TT>#define</TT> statements and typedefs have been taken away.
You will no longer have to delve through several levels of header
files to correctly reference API calls. And no one will have to
suffer to figure out how to use your software.
<P>
Java programs simply import the software packages they need. These
packages may be in another directory, on another drive, or on
a machine on the other side of the Internet. The Java compiler
and interpreter figure out what objects are referenced and supply
the necessary linkage.
<H3><A NAME="JavaIsObjectOriented"><B>Java Is Object-Oriented</B></A>
</H3>
<P>
If you think C++ is an object-oriented programming language, you
are in for a big surprise. After using Java to write a few programs,
you'll get a better feeling for what object-oriented software
is all about. I know I did.
<P>
Java deals with classes and objects, pure and simple. They aren't
just more data structures that are available to the programmer-they
are the basis for the entire programming language.
<P>
In C++, you can declare a class, but you don't have to. You can
declare a structure or a union instead. You can declare a whole
bunch of loosely associated variables and use them with C-style
functions. In Java, classes and objects are at the center of the
language. Everything else revolves around them. You can't declare
functions and procedures. They don't exist. You can't use structures,
unions, or typedefs. They're gone, too. You either use classes
and objects or you don't use Java. It's that simple.
<P>
Java provides all the luxuries of object-oriented programming:
class hierarchy, inheritance, encapsulation, and polymorphism-in
a context that is truly useful and efficient. If you are new to
object-oriented software, you can find a complete introduction
to these topics is provided in <A HREF="ch5.htm" >Chapter 5</A>,
&quot;Classes and Objects.&quot; The main reason for developing
object-oriented software, beside clarity and simplicity, is the
desperate hope that somehow the objects you develop will be reused.
Java not only encourages software reuse, it demands it. To write
any sort of Java program, no matter how simple, you must build
on the classes and methods of the Java API.
<P>
Once you have begun developing software in Java, you have two
choices: 
<UL>
<LI><FONT COLOR=#000000>Build on the classes you have developed,
thereby reusing them. </FONT>
<LI><FONT COLOR=#000000>Rewrite your software from scratch, copying
and tailoring useful parts of existing software.</FONT>
</UL>
<P>
With Java, the temptation to start from scratch is no longer appealing.
Java's object-oriented structure forces you to develop more useful,
more tailorable, and much simpler software the first time around.
<H3><A NAME="JavaIsSaferandMoreReliable"><B>Java Is Safer and
More Reliable</B></A></H3>
<P>
Java is safer to use than C++ because it keeps you from doing
the things that you do badly, while making it easier to do the
things that you do well.
<P>
Java won't automatically convert data types. You have to explicitly
convert from one class to another. C++, under the most undesirable
conditions, will automatically convert one type to another. It
has all the flexibility of assembly code. Java doesn't assume
that you know what you are doing. It makes sure that you do.
<P>
C++ pointers don't exist in Java. You can no longer access objects
indirectly or by chance. You don't need to. You declare objects
and reference those objects directly. Complex pointer arithmetic
is avoided. If you need an indexed set of objects, you can use
an array of objects. The concept of &quot;the address of an object&quot;
is eliminated from the programming model, and another assembly
language dinosaur is laid to rest. As a result, it becomes much
easier to do things correctly in Java.
<P>
Java's reliability extends beyond the language level to the compiler
and the runtime system. Compile-time checks identify many programming
errors that go undetected in other programming languages. These
checks go beyond syntactic checking to ensure that statements
are semantically correct.
<P>
Runtime checks are also more extensive and effective. Remember
your teacher or mom telling you to &quot;Check your work twice
to make sure it's right&quot;? The Java linker understands class
types and performs compiler-level type checking, adding redundancy
to reliability. It also performs bounds checking and eliminates
indirect object access, even under error conditions.
<H3><A NAME="JavaIsSecure"><B>Java Is Secure</B></A></H3>
<P>
If you gave a skilled hacker a program written in C or C++ and
told him to find any security flaws, there are half a dozen things
that he would immediately look for: gaining access to the operating
system, causing an unexpected return of control, overwriting critical
memory areas, acquiring the ability to spoof or modify other programs,
browsing for security information, and gaining unauthorized access
to the file system.
<P>
Why is C or C++ more vulnerable than Java? When a programmer develops
software, he or she usually focuses on how to get the software
to work correctly and efficiently. C and C++ do not constrain
the programmer from meeting these goals and provide a number of
flexible features that enable the programmer to meet his end.
The hacker is also able to take advantage of these features and
use them in ways that weren't originally intended, causing the
undesirable consequences identified in the previous paragraph.
In short, C and C++ provide a great offense, but no defense. Java,
on the other hand, is defensive by nature. Every time a Java-enabled
browser downloads a compiled Java class, such as an applet, it
runs the risk of running Trojan horse code. Because of this ever-present
threat, it subjects the code to a series of checks that ensure
that it is correct and secure.
<P>
The Java runtime system is designed to enforce a security policy
that prevents execution of malicious code. It does this by remembering
how objects are stored in memory and enforcing correct and secure
access to those objects according to its security rules. It performs
bytecode verification by passing compiled classes through a simple
theorem prover that either proves that the code is secure or prevents
the code from being loaded and executed. The class is Java's basic
execution unit and security is implemented at the class level.
<P>
The Java runtime system also segregates software according to
its origin. Classes from the local system are processed separately
from those of other systems. This prevents remote systems from
replacing local system software with code that is less trustworthy.
<P>
Java-enabled browsers, such as HotJava, allow the user to control
the accesses that Java software may make of the local system.
When a Java applet needs permission to access local resources,
such as files, a security dialog box is presented to the user,
requesting explicit user permission. This &quot;Mother may I?&quot;
approach ensures that the user always has the final say in the
security of his system.
<P>
Java security is covered in detail in <A HREF="ch39.htm" >Chapter 39</A>,
&quot;Java Security.&quot;
<H3><A NAME="JavaIsMultithreaded"><B>Java Is Multithreaded</B></A>
</H3>
<P>
Java, like Ada, and unlike other languages, provides built-in
language support for multithreading. Multithreading allows more
than one thread of execution to take place within a single program.
This allows your program to do many things at once: make the Duke
dance, play his favorite tune, and interact with the user, seemingly
all at the same time. Multithreading is an important asset because
it allows the programmer to write programs as independent threads,
rather than as a convoluted gaggle of intertwined activities.
Multithreading also allows Java to use idle CPU time to perform
necessary garbage collection and general system maintenance, enabling
these functions to be performed with less impact on program performance.
<P>
Writing multithreaded programs is like dating several people concurrently.
Everything works fine until the threads start to interact with
each other in unexpected ways. Java provides the support necessary
to make multithreading work safely and correctly. Java supports
multithreading by providing synchronization capabilities that
ensure that threads share information and execution time in a
way that is <I>thread safe</I>. These capabilities are illustrated
with several programming examples in <A HREF="ch8.htm" >Chapter 8</A>,
&quot;Multithreading.&quot;
<H3><A NAME="JavaIsInterpretedandPortable"><B>Java Is Interpreted
and Portable</B></A></H3>
<P>
While it is true that compiled code will almost always run more
quickly than interpreted code, it is also true that interpreted
code can usually be developed and fielded more inexpensively,
more quickly, and in a more flexible manner. It is also usually
much more portable.
<P>
Java, in order to be a truly platform-independent programming
language, must be interpreted. It does not run as fast as compiled
native code, but it doesn't run much slower, either. <A HREF="ch36.htm" >Chapter 36</A>,
&quot;The Java Source Code,&quot; provides some Java performance
benchmarks. For the cases where execution in native machine code
is absolutely essential, work is underway to translate Java bytecode
into machine code as it is loaded.
<P>
The advantages of being interpreted outweigh any performance impacts.
Because Java is interpreted, it is much more portable. If an operating
system can run the Java interpreter and support the Java API,
then it can faithfully run all Java programs.
<P>
Interpreted programs are much more easily kept up-to-date. You
don't have to recompile them for every change. In Java, recompilation
is automatic. The interpreter detects the fact that a program's
bytecode file is out-of-date with respect to its source code file
and recompiles it as it is loaded.
<P>
Because of Java's interpreted nature, linking is also more powerful
and flexible. Java's runtime system supports dynamic linking between
local class files and those that are downloaded from across the
Internet. This feature provides the basis for Web programming.
<H3><A NAME="JavaIstheProgrammingLanguageofthe"><B>Java Is the
Programming Language of the Web</B></A></H3>
<P>
Java has become the de facto programming language of the Web.
It is being licensed by nearly every major software company. It
has some offshoots and potential competition, such as JavaScript,
VBScript, and Bell Labs's Inferno, but it remains the first Web
programming language and the most powerful language for developing
platform-independent software.
<P>
Java is also evolving beyond the Web and becoming a key component
in distributed application development. Sun's release of the NEO
and JOE products emphasizes Java's importance to distributed object-based
software development. Several other vendors have introduced products
that enable Java to be integrated into the Common Object Request
Broker Architecture (CORBA), which is the framework for distributed
object communication.
<H2><A NAME="TheJavaAPI"><B><FONT SIZE=5 COLOR=#FF0000>The Java
API</FONT></B></A></H2>
<P>
The Java API is what makes Java attractive and useful. It consists
of a set of packages that are distributed with the JDK as class
libraries. These packages provide a common interface for developing
Java programs on all Java platforms. The Java API furnishes all
the capabilities needed to develop console programs, window programs,
client and server networking software, applets, and other applications.
It is the difference that takes Java from being a really good
programming language to making it a very powerful and efficient
programming environment.
<P>
The Java API consists of eight major development packages and
a supporting debug package, as shown in <A HREF="f2-9.gif" >Figure 2.9</A>.
<I>Packages</I> are collections of related objects. For example,
there are separate packages for developing window programs, applets,
and networking software.
<P>
<A HREF="f2-9.gif"><B>Figure 2.9 : </B><I>The organization of the Java API.</I></A>
<P>
Java packages contain classes, interfaces, and exceptions, as
illustrated in <A HREF="f2-10.gif" >Figure 2.10</A>.
<P>
<A HREF="f2-10.gif"><B>Figure 2.10 : </B><I>How Java packages are organized.</I></A>
<P>
Classes form the basis for object-oriented software development
in Java. They contain variables and methods. Variables are data
containers. Methods implement operations on the class and its
variables. For example, there is a class in the <TT>java.awt</TT>
package called <TT>Rectangle</TT>. It consists of variables that
specify the position and dimensions of a rectangle, and methods,
such as move and resize, that enable operations to be performed
on rectangles. <A HREF="ch5.htm" >Chapter 5</A> provides an introduction
to classes.
<P>
Interfaces are collections of related methods. An example of an
interface is the DataInput interfacee of the <TT>java.io</TT>
package. It specifies a collection of methods that must be defined
for a class to implement the DataInput interface. Exceptions are
events that alter the normal course of program execution. <A HREF="ch6.htm" >Chapter 6</A>,
&quot;Interfaces,&quot; introduces interfaces, and <A HREF="ch7.htm" >Chapter 7</A>,
&quot;Exceptions,&quot; covers exceptions.
<P>
The Java API is used to develop Java programs. <A HREF="f2-11.gif" >Figure 2.11</A>
summarizes this process.
<P>
<A HREF="f2-11.gif"><B>Figure 2.11 : </B><I>Developing software using the Java API.</I></A>
<P>
You write your Java programs using the Java API as a template
and building block. You use the API to construct objects that
are instances of API classes, implement API interfaces, and respond
to API exceptions. These objects are used by your application
program, which is itself an instance of a Java API class. Think
of your program as a collection of objects that work together
to support a common set of operations.
<P>
You can also create your own classes, interfaces, and exceptions,
building on those that are defined in the API. You can collect
them into custom packages that are integrated within and extend
the Java API. These API extensions can then be used to develop
other programs or even more sophisticated packages and API extensions.
<P>
This building-block approach to software development is the essence
of object-oriented programming and software reuse. The Java API
supports platform-independent software reuse by providing a powerful
set of components from which to start.
<H2><A NAME="Summary"><B><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></B></A>
</H2>
<P>
In order to learn Java, you have to learn the Java language, learn
to use the Java API, and learn how to use the JDK toolset. In
this chapter, you have explored the JDK software and learned the
tools it contains. In <A HREF="ch3.htm" >Chapter 3</A> you will
learn how to operate those tools.
<P>
This chapter highlights the key features of the Java language.
In Part II, &quot;Programming in Java,&quot; you will focus on
learning Java's syntax and application by developing a series
of sample programs. These programs will also familiarize you with
using the JDK tools and relevant parts of the Java API.
<P>
You have been introduced to the Java API and shown how it is used
to construct Java programs. In Part III, &quot;Using the Java
API,&quot; you will focus on learning the Java API. You will do
this by studying the components contained in the API packages
and using these components to build Java programs.
<P>
By the time you have finished Part III, you will be a competent
Java programmer. The rest of the book will show you how to extend
your skills by focusing on specific areas of Java software development.

<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



