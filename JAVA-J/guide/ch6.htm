<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META>
<H1><FONT COLOR=#FF0000>Chapter 6</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Interfaces</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#ThePurposeofJavaInterfaces" >The Purpose of Java Interfaces</A>
<LI><A HREF="#TheBenefitsofInterfaces" >The Benefits of Interfaces</A>
<LI><A HREF="#DeclaringInterfaces" >Declaring Interfaces</A>
<LI><A HREF="#ImplementingInterfaces" >Implementing Interfaces</A>
<LI><A HREF="#TheCDrawAppInterfaceExample" >The CDrawApp Interface Example</A>
<UL>
<LI><A HREF="#TheCGTextEditInterface" >The CGTextEdit Interface</A>
<LI><A HREF="#UpdatingtheCGTextClass" >Updating the CGText Class</A>
<LI><A HREF="#TheCGTextPointClass" >The CGTextPoint Class</A>
<LI><A HREF="#TheCGTextBoxClass" >The CGTextBox Class</A>
<LI><A HREF="#UpdatingtheCDrawClass" >Updating the CDraw Class</A>
<LI><A HREF="#RunningtheExample" >Running the Example</A>
<LI><A HREF="#ExampleSummary" >Example Summary</A>
</UL>
<LI><A HREF="#UsingInterfacesasAbstractTypes" >Using Interfaces as Abstract Types</A>
<LI><A HREF="#InterfaceConstants" >Interface Constants</A>
<LI><A HREF="#ExtendingInterfaces" >Extending Interfaces</A>
<LI><A HREF="#CombiningInterfaces" >Combining Interfaces</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
In this chapter you'll learn how to use Java interfaces to provide
a common set of methods by which a group of classes can be accessed
and to implement features of multiple inheritance. You'll cover
the use of interface constants and learn how to declare objects
using interface types. You will also learn how to extend and combine
interfaces. When you finish this chapter, you'll be able to use
interfaces with your Java classes.
<H2><B><FONT SIZE=5 COLOR=#FF0000><A NAME="ThePurposeofJavaInterfaces">The Purpose of Java Interfaces</A></FONT></B>
</H2>
<P>
The Java interface construct is borrowed from the Objective-C
protocol. It is used to identify a common set of methods for the
group of classes that implement the interface. It is also used
to share constants between classes. Interfaces are used to provide
the benefits of multiple inheritance without its implementation
difficulties. They allow several classes to share a standard set
of methods and constants without requiring these methods and constants
to be implemented by a common superclass.
<P>
<I>Interfaces</I> provide a standard framework for accessing classes.
They are analogous to the interfaces that we encounter in everyday
life. Any large class of real-world objects that you regularly
manipulate usually has a standard interface. Radios and televisions
provide a common set of controls for tuning channels and adjusting
audio volume. Cars come with a standard interface for steering,
throttling, and braking. Automated bank tellers provide the same
general interface for performing bank transactions.
<P>
To realize the potential use of Java interfaces, consider the
diversity of objects that are manipulated by GUI-building programs.
Such programs provide the capability to generate graphical user
interfaces by clicking on interface controls and dragging them
to appropriate places on the windows and dialog boxes being developed.
The objects implementing these controls may support many different
sets of methods. For example, one subset of the controls may be
required to support cut, copy, and paste operations. These methods
might be grouped into an <TT>EditObject</TT> interface. Another
subset of the interface controls may be required to support click
and double-click operations. These objects might implement a <TT>Clickable</TT>
interface. Another subset may support drag-and-drop operations
and implement the <TT>Draggable</TT> interface. Other groups of
objects may implement multiple interfaces. For example, there
might be objects that are both <TT>Clickable</TT> and <TT>Draggable</TT>.
<H2><A NAME="TheBenefitsofInterfaces"><B><FONT SIZE=5 COLOR=#FF0000>The
Benefits of Interfaces</FONT></B></A></H2>
<P>
Interfaces provide many advantages to the Java programmer. One
is that they allow standard sets of methods to be used across
the class hierarchy. For example, you can define the <TT>Editable</TT>
interface to support cut, copy, and paste operations. The <TT>Editable</TT>
interface can then be implemented by relevant classes and establish
a uniform approach to implementing these common operations.
<P>
Interface types allow objects to be referenced by the methods
they support without considering their location in the class hierarchy.
They make maximal use of dynamic binding, allowing objects to
be accessed independently of their implementation details. For
example, parameters can be defined as interface types and used
by methods. These methods can invoke the interface methods of
their arguments without having to determine the classes to which
the arguments belong.
<P>
Interfaces also support <I>selective</I> multiple inheritance.
They allow various subsets of the features supported by different
classes to be shared without mandating that all features of these
classes be uniformly imposed as the result of inheritance.
<P>
Finally, because interfaces are declared independently of classes,
they are unaffected by changes to specific classes or to the class
hierarchy as a whole.
<H2><A NAME="DeclaringInterfaces"><B><FONT SIZE=5 COLOR=#FF0000>Declaring
Interfaces</FONT></B></A></H2>
<P>
Interfaces, like classes, are not objects, but type definitions
that can be used to declare an object. Interfaces are declared
as follows:
<BLOCKQUOTE>
<TT><I><FONT FACE="Courier New">InterfaceModifiers </FONT></I>interface
<I><FONT FACE="Courier New">InterfaceName ExtendsClause InterfaceBody</FONT></I></TT>
</BLOCKQUOTE>
<P>
The allowed interface modifiers are <TT>abstract</TT> and <TT>public</TT>.
By default, all interfaces are <TT>abstract</TT>. The <TT>public</TT>
access specifier allows interfaces to be accessed outside of the
package in which they are declared, in the same manner as with
classes. Only one class or interface may be declared <TT>public</TT>
in a given compilation unit. The compilation unit must have the
same name as its <TT>public</TT> interface or class. The <TT>extends</TT>
clause is similar to the class <TT>extends</TT> clause and is
covered later in this chapter.
<P>
The body of an interface begins with an opening brace (<TT>{</TT>),
consists of zero or more variable or method declarations, and
ends with a closing brace (<TT>}</TT>).
<P>
All variables declared in an interface body are assumed to be
both <TT>static</TT> and <TT>final</TT>, must have a constant
initializer, and are implemented as constant class variables.
<P>
All methods declared in an interface body are assumed to be <TT>abstract</TT>
and do not have method bodies. Only access methods can be declared
within an interface; constructors are not allowed. The access
specifier of a method is that of the interface in which it is
declared.
<P>
An example of a simple interface declaration is as follows:
<BLOCKQUOTE>
<TT>public interface Clickable {<BR>
<FONT FACE="Courier New">&nbsp;void click();<BR>
&nbsp;void doubleClick();<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
This <TT>Clickable</TT> interface is declared as <TT>public</TT>
so that it can be accessed outside its package. It contains two
method declarations, <TT>click()</TT> and <TT>doubleClick()</TT>.
These methods must be supported by all classes that implement
the <TT>Clickable</TT> interface.
<H2><A NAME="ImplementingInterfaces"><B><FONT SIZE=5 COLOR=#FF0000>Implementing
Interfaces</FONT></B></A></H2>
<P>
The interfaces implemented by a class are identified in the <TT>implements</TT>
clause of the class declaration. For example, the following class
implements the <TT>Scrollable</TT> and <TT>Clickable</TT> interfaces:
<BLOCKQUOTE>
<TT>class ExampleClass implements Scrollable, Clickable {<BR>
<FONT FACE="Courier New">}</FONT></TT>
</BLOCKQUOTE>
<P>
A non-<TT>abstract</TT> class must implement all interface methods
that are not implemented by its superclasses. <TT>abstract</TT>
classes are not required to implement interface methods. They
can defer interface implementation to their non-<TT>abstract</TT>
subclasses.
<H2><A NAME="TheCDrawAppInterfaceExample"><B><FONT SIZE=5 COLOR=#FF0000>The
</FONT></B><TT><B><FONT SIZE=5 COLOR=#FF0000 FACE="Courier New">CDrawApp</FONT></B></TT><B><FONT SIZE=2 COLOR=#FF0000>
</FONT><FONT SIZE=5 COLOR=#FF0000>Interface Example</FONT></B></A>
</H2>
<P>
To provide a concrete example of the use of interfaces, we'll
extend the <TT>CDrawApp</TT> program, introduced in <A HREF="ch5.htm" >Chapter 5</A>,
&quot;Classes and Objects,&quot; to include support for editable
objects. <I>Editable objects</I> are objects that display text
on the grid and can be edited using the <TT>CGTextEdit</TT> interface.
The <TT>CGText</TT> class will be modified to support this interface.
The <TT>CGPoint</TT> and <TT>CGBox</TT> classes will be extended
by the subclasses, <TT>CGTextPoint</TT> and <TT>CGTextBox</TT>,
both of which provide the capability to display text on the grid.
The <TT>CGText</TT>, <TT>CGTextPoint</TT>, and <TT>CGTextBox</TT>
classes will implement the <TT>CGTextEdit</TT> interface. <A HREF="f6-1.gif" >Figure 6.1</A>
shows the extensions to the <A HREF="ch5.htm" >Chapter 5</A> class
hierarchy that were made to support this example.
<P>
<A HREF="f6-1.gif"><B>Figure 6.1 : </B><I>Extensions to the <TT>CDrawApp</TT> class hierarchy.</I></A>
<P>
Before going on to edit and compile the source code files for
this example, be sure to create a <TT>ch06</TT> subdirectory under
<TT>c:\java\jdg</TT>. This subdirectory should be used to store
all the source Java files that you develop in this chapter.
<H3><A NAME="TheCGTextEditInterface"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">CGTextEdit</FONT></B></TT><B><FONT SIZE=4>
Interface</FONT></B></A></H3>
<P>
The <TT>CGTextEdit</TT> interface is quite simple. Its source
code is shown in Listing 6.1.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 6.1. The </B><TT><B><FONT FACE="Courier New">CGTextEdit</FONT></B></TT><B>
interface source code.</B><P>

<TT>package jdg.ch06;<BR>
<BR>
<FONT FACE="Courier New">public interface CGTextEdit {<BR>
&nbsp;public void replaceText(String s);<BR>
&nbsp;public void upperCase();<BR>
&nbsp;public void lowerCase();<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT>CGTextEdit</TT> interface source code declares three methods:
<TT>replaceText()</TT>, <TT>upperCase()</TT>, and <TT>lowerCase()</TT>.
These methods must be provided by all classes that implement the
<TT>CGTextEdit</TT> interface. The <TT>replaceString()</TT> method
is used to replace the text associated with an object with the
text contained in the <TT>String</TT>'s parameter. The <TT>upperCase()</TT>
and <TT>lowerCase()</TT> methods are used to convert the text
associated with an object to upper- and lowercase, respectively.
<TT>CGTextEdit</TT> and all its interfaces are declared as <TT>public</TT>,
allowing them to be accessed outside of the <TT>jdg.ch06</TT>
package. The <TT>public</TT> modifiers used with the method declarations
are redundant. Any method declared in a <TT>public</TT> interface
is <TT>public</TT>, by default.
<P>
After you have entered the <TT>CGTextEdit</TT> interface into
the file, <TT>CGTextEdit.java</TT>, use <TT>javac</TT> to compile
<TT>CGTextEdit.java</TT>. Do this from within the <TT>ch06</TT>
directory.
<H3><A NAME="UpdatingtheCGTextClass"><B>Updating the </B><TT><B><FONT SIZE=4 FACE="Courier New">CGText</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>CGText</TT> class, developed in <A HREF="ch5.htm" >Chapter 5</A>,
will be updated to implement the <TT>CGTextEdit</TT> interface.
The easiest way to do this is to copy <TT>CGText.java</TT> from
the <TT>c:\java\jdg\ch05</TT> directory to the <TT>c:\java\jdg\ch06</TT>
directory and then edit it. Its source code is shown in Listing
6.2.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 6.2. The </B><TT><B><FONT FACE="Courier New">CGText</FONT></B></TT><B>
class source code.</B><P>

<TT>package jdg.ch06;<BR>
<BR>
<FONT FACE="Courier New">import jdg.ch05.CGObject;<BR>
import jdg.ch05.Point;<BR>
import jdg.ch05.PrintCGrid;<BR>
import java.lang.System;<BR>
<BR>
// CGText.java<BR>
<BR>
public class CGText extends CGObject implements CGTextEdit {<BR>
&nbsp;// Variable declarations<BR>
&nbsp;String text;<BR>
<BR>
&nbsp;// Method declarations<BR>
&nbsp;public CGText(Point p,String s) {<BR>
&nbsp;&nbsp;location = p;<BR>
&nbsp;&nbsp;drawCharacter = ' ';<BR>
&nbsp;&nbsp;text = s;<BR>
&nbsp;}<BR>
&nbsp;public void display(PrintCGrid grid) {<BR>
&nbsp;&nbsp;Point p = new Point(location);<BR>
&nbsp;&nbsp;for(int i=0;i&lt;text.length();++i){<BR>
&nbsp;&nbsp;&nbsp;grid.putCharAt(text.charAt(i),p);<BR>
&nbsp;&nbsp;&nbsp;p = p.add(1,0);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;public void describe() {<BR>
&nbsp;&nbsp;System.out.println(&quot;CGText &quot;+location.toString()+&quot;
&quot;+text);<BR>
&nbsp;}<BR>
&nbsp;public void replaceText(String s) {<BR>
&nbsp;&nbsp;text=s;<BR>
&nbsp;}<BR>
&nbsp;public void upperCase() {<BR>
&nbsp;&nbsp;text = text.toUpperCase();<BR>
&nbsp;}<BR>
&nbsp;public void lowerCase() {<BR>
&nbsp;&nbsp;text = text.toLowerCase();<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
All you need to do is to change the <TT>package</TT> statement,
add the <TT>import</TT> statements, edit the class declaration,
and add the last three methods that implement the <TT>CGTextEdit</TT>
interface.
<P>
Because this class is contained in the <TT>jdg.ch06</TT> package,
you need to import the <TT>CGObject</TT>, <TT>Point</TT>, and
<TT>PrintCGrid</TT> classes from the <TT>jdg.ch05</TT> package.
<P>
The class declaration is changed to add the <TT>implements</TT>
clause with the <TT>CGTextEdit</TT> interface.
<P>
The three new methods are all very simple. The <TT>replaceText()</TT>
method assigns <TT>text</TT> to the new value passed by the <TT>s</TT>
parameter. The <TT>upperCase()</TT> and <TT>lowerCase()</TT> methods
use the <TT>toUpperCase()</TT> and <TT>toLowerCase()</TT> methods
of the <TT>String</TT> class to perform their conversions.
<P>
You should compile the new <TT>CGText.java</TT> before moving
on to the next class.
<H3><A NAME="TheCGTextPointClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">CGTextPoint</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>CGTextPoint</TT> class extends the <TT>CGPoint</TT> class
to add the capability to display text along with the character
point. (See Listing 6.3.)
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 6.3. The </B><TT><B><FONT FACE="Courier New">CGTextPoint</FONT></B></TT><B>
class source code.</B><P>

<TT>package jdg.ch06;<BR>
<BR>
<FONT FACE="Courier New">import jdg.ch05.Point;<BR>
import jdg.ch05.CGPoint;<BR>
import jdg.ch05.PrintCGrid;<BR>
import java.lang.System;<BR>
<BR>
// CGTextPoint.java<BR>
<BR>
public class CGTextPoint extends CGPoint implements CGTextEdit
{<BR>
&nbsp;// Variable declarations<BR>
&nbsp;String text;<BR>
<BR>
&nbsp;// Method declarations<BR>
&nbsp;public CGTextPoint(Point p,char ch,String s) {<BR>
&nbsp;&nbsp;super(p,ch);<BR>
&nbsp;&nbsp;text = s;<BR>
&nbsp;}<BR>
&nbsp;public CGTextPoint(Point p,String s) {<BR>
&nbsp;&nbsp;super(p);<BR>
&nbsp;&nbsp;text = s;<BR>
&nbsp;}<BR>
&nbsp;public CGTextPoint(Point p,char ch) {<BR>
&nbsp;&nbsp;super(p,ch);<BR>
&nbsp;&nbsp;text = &quot;&quot;;<BR>
&nbsp;}<BR>
&nbsp;public CGTextPoint(Point p) {<BR>
&nbsp;&nbsp;super(p);<BR>
&nbsp;&nbsp;text = &quot;&quot;;<BR>
&nbsp;}<BR>
&nbsp;public void display(PrintCGrid grid) {<BR>
&nbsp;&nbsp;super.display(grid);<BR>
&nbsp;&nbsp;Point p = location.add(1,0);<BR>
&nbsp;&nbsp;for(int i=0;i&lt;text.length();++i){<BR>
&nbsp;&nbsp;&nbsp;grid.putCharAt(text.charAt(i),p);<BR>
&nbsp;&nbsp;&nbsp;p = p.add(1,0);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;public void describe() {<BR>
&nbsp;&nbsp;System.out.print(&quot;CGTextPoint &quot;+String.valueOf(drawCharacter)+&quot;
&quot;);<BR>
&nbsp;&nbsp;System.out.println(location.toString()+&quot; &quot;+text);
<BR>
&nbsp;}<BR>
&nbsp;public void replaceText(String s) {<BR>
&nbsp;&nbsp;text=s;<BR>
&nbsp;}<BR>
&nbsp;public void upperCase() {<BR>
&nbsp;&nbsp;text = text.toUpperCase();<BR>
&nbsp;}<BR>
&nbsp;public void lowerCase() {<BR>
&nbsp;&nbsp;text = text.toLowerCase();<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
<TT>CGTextPoint</TT> declares the variable <TT>text</TT>. This
variable is used to store the text associated with the point.
It provides four constructors, each of which uses the <TT>super()</TT>
constructor call statement to invoke the constructors of the <TT>CGPoint</TT>
class. The four constructors allow <TT>CGTextPoint</TT> to be
constructed using different combinations of parameters.
<P>
The <TT>display()</TT> method invokes the <TT>display()</TT> method
of its superclass to display the point at its location on the
grid. It then displays the value of the text variable to the immediate
right of this point. The <TT>describe()</TT> method displays a
description of the text point on the console window. The <TT>replaceText()</TT>,
<TT>upperCase()</TT>, and <TT>lowerCase()</TT> methods are the
same as those of the new <TT>CGText</TT> class.
<H3><A NAME="TheCGTextBoxClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">CGTextBox</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>CGTextBox</TT> class extends the <TT>CGBox</TT> class
to add the capability to display text within a box. (See Listing
6.4.) The size of the box is automatically fitted to the size
of the text to be displayed.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 6.4. The </B><TT><B><FONT FACE="Courier New">CGTextBox</FONT></B></TT><B>
class source code.</B><P>

<TT>package jdg.ch06;<BR>
<BR>
<FONT FACE="Courier New">import jdg.ch05.Point;<BR>
import jdg.ch05.CGBox;<BR>
import jdg.ch05.PrintCGrid;<BR>
import java.lang.System;<BR>
<BR>
// CGTextBox.java<BR>
<BR>
public class CGTextBox extends CGBox implements CGTextEdit {<BR>
&nbsp;// Variable declarations<BR>
&nbsp;String text;<BR>
<BR>
&nbsp;// Method declarations<BR>
&nbsp;public CGTextBox(Point ulCorner, char ch, String s) {<BR>
&nbsp;&nbsp;super(ulCorner,ulCorner.add(s.length()+1,2),ch);<BR>
&nbsp;&nbsp;text = s;<BR>
&nbsp;}<BR>
&nbsp;public CGTextBox(Point ulCorner, String s) {<BR>
&nbsp;&nbsp;super(ulCorner,ulCorner.add(s.length()+1,2));<BR>
&nbsp;&nbsp;text = s;<BR>
&nbsp;}<BR>
&nbsp;public void display(PrintCGrid grid) {<BR>
&nbsp;&nbsp;super.display(grid);<BR>
&nbsp;&nbsp;Point p = location.add(1,1);<BR>
&nbsp;&nbsp;for(int i=0;i&lt;text.length();++i){<BR>
&nbsp;&nbsp;&nbsp;grid.putCharAt(text.charAt(i),p);<BR>
&nbsp;&nbsp;&nbsp;p = p.add(1,0);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;public void describe() {<BR>
&nbsp;&nbsp;System.out.print(&quot;CGTextBox &quot;+String.valueOf(drawCharacter)+&quot;
&quot;);<BR>
&nbsp;&nbsp;System.out.println(location.toString()+&quot; &quot;+lr.toString()+&quot;
&quot;+text);<BR>
&nbsp;}<BR>
&nbsp;public void replaceText(String s) {<BR>
&nbsp;&nbsp;text=s;<BR>
&nbsp;&nbsp;lr=location.add(text.length()+1,2);<BR>
&nbsp;}<BR>
&nbsp;public void upperCase() {<BR>
&nbsp;&nbsp;text = text.toUpperCase();<BR>
&nbsp;}<BR>
&nbsp;public void lowerCase() {<BR>
&nbsp;&nbsp;text = text.toLowerCase();<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT>CGTextBox</TT> class source code defines the text variable
in the same manner as the <TT>CGTextPoint</TT> class and provides
two constructors for initializing objects of its class. Both constructors
use calls to the <TT>CGBox</TT> class to support the initialization.
The parameters to these calls calculate the lower-right corner
of the box using the upper-left corner as a reference point and
adding horizontal and vertical offsets that size the box based
on the length of the text it contains.
<P>
The <TT>display()</TT> method displays a box using the <TT>display()</TT>
method of its parent. It then displays <TT>text</TT> within the
box. The <TT>describe()</TT> method prints a box's parameters
on the console window.
<P>
The <TT>upperCase()</TT> and <TT>lowerCase()</TT> methods are
the same as those of the <TT>CGTextPoint</TT> class, but the <TT>replaceText()</TT>
method is different. It updates the <TT>lr</TT> variable to correctly
resize the box based on changes to the length of the <TT>text</TT>
variable.
<H3><A NAME="UpdatingtheCDrawClass"><B>Updating the </B><TT><B><FONT SIZE=4 FACE="Courier New">CDraw</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>CDraw</TT> class is updated to support the Edit Text command.
This requires changes to all its access methods except the <TT>addText()</TT>
method. The source code of the <TT>CDrawApp</TT> and <TT>CDraw</TT>
classes is shown in Listing 6.5.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 6.5. The </B><TT><B><FONT FACE="Courier New">CDrawApp</FONT></B></TT><B>
and </B><TT><B><FONT FACE="Courier New">CDraw</FONT></B></TT><B>
classes.</B><P>

<TT>package jdg.ch06;<BR>
<BR>
<FONT FACE="Courier New">import jdg.ch05.Point;<BR>
import jdg.ch05.CGrid;<BR>
import jdg.ch05.PrintCGrid;<BR>
import jdg.ch05.BorderedPrintCGrid;<BR>
import jdg.ch05.CGObject;<BR>
import jdg.ch05.CGPoint;<BR>
import jdg.ch05.CGBox;<BR>
import jdg.ch05.KeyboardInput;<BR>
import java.lang.System;<BR>
import java.lang.ClassCastException;<BR>
import java.io.IOException;<BR>
<BR>
class CDrawApp {<BR>
&nbsp;public static void main(String args[]) throws IOException
{<BR>
&nbsp;&nbsp;CDraw program = new CDraw();<BR>
&nbsp;&nbsp;program.run();<BR>
&nbsp;}<BR>
}<BR>
<BR>
class CDraw {<BR>
&nbsp;// Variable declarations<BR>
&nbsp;static KeyboardInput kbd = new KeyboardInput(System.in);
<BR>
&nbsp;BorderedPrintCGrid grid;<BR>
<BR>
&nbsp;// Method declarations<BR>
&nbsp;CDraw() {<BR>
&nbsp;&nbsp;grid = new BorderedPrintCGrid();<BR>
&nbsp;}<BR>
&nbsp;void run() throws IOException {<BR>
&nbsp;&nbsp;boolean finished = false;<BR>
&nbsp;&nbsp;do {<BR>
&nbsp;&nbsp;&nbsp;char command = getCommand();<BR>
&nbsp;&nbsp;&nbsp;switch(command){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case 'P':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addPoint();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case 'B':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addBox();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case 'T':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addText();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case 'U':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid.deleteLastObject();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case 'C':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid.clearGrid();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case 'S':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid.show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;case 'E':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;editText();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;case 'X':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;finished = true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;default:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println();<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;} while (!finished);<BR>
&nbsp;}<BR>
&nbsp;char getCommand() throws IOException {<BR>
&nbsp;&nbsp;System.out.print(&quot;CDrawApp    P - Add a Point
  U - Undo Last Add&quot;);<BR>
&nbsp;&nbsp;System.out.println(&quot;   E - Edit Text&quot;);
<BR>
&nbsp;&nbsp;System.out.print(&quot;Main Menu   B - Add a Box 
   C - Clear Grid&quot;);<BR>
&nbsp;&nbsp;System.out.println(&quot;      X - Exit CDrawApp&quot;);
<BR>
&nbsp;&nbsp;System.out.print(&quot;            T - Add Text  
   S - Show Grid&quot;);<BR>
&nbsp;&nbsp;System.out.print(&quot;       Enter command: &quot;);
<BR>
&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;return Character.toUpperCase(kbd.getChar());<BR>
&nbsp;}<BR>
&nbsp;void addPoint() throws IOException {<BR>
&nbsp;&nbsp;System.out.println(&quot;Add Point Menu&quot;);<BR>
&nbsp;&nbsp;System.out.println(&quot; Location:&quot;);<BR>
&nbsp;&nbsp;Point p = kbd.getPoint();<BR>
&nbsp;&nbsp;System.out.print(&quot; Character: &quot;);<BR>
&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;char ch = kbd.getChar();<BR>
&nbsp;&nbsp;if(ch==' ') ch = '+';<BR>
&nbsp;&nbsp;System.out.print(&quot; Add text (y/n): &quot;);<BR>
&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;if('Y'==Character.toUpperCase(kbd.getChar())) {<BR>
&nbsp;&nbsp;&nbsp;System.out.print(&quot;  Text: &quot;);<BR>
&nbsp;&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;&nbsp;String s = kbd.getText();<BR>
&nbsp;&nbsp;&nbsp;CGTextPoint cgtp = new CGTextPoint(p,ch,s);
<BR>
&nbsp;&nbsp;&nbsp;cgtp.addToGrid(grid);<BR>
&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;CGPoint cgp = new CGPoint(p,ch);<BR>
&nbsp;&nbsp;&nbsp;cgp.addToGrid(grid);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;void addBox() throws IOException {<BR>
&nbsp;&nbsp;System.out.println(&quot;Add Box Menu&quot;);<BR>
&nbsp;&nbsp;System.out.println(&quot; Upper Left Corner:&quot;);
<BR>
&nbsp;&nbsp;Point ul = kbd.getPoint();<BR>
&nbsp;&nbsp;System.out.print(&quot; Add text (y/n): &quot;);<BR>
&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;if('Y'==Character.toUpperCase(kbd.getChar())) {<BR>
&nbsp;&nbsp;&nbsp;System.out.print(&quot;  Text: &quot;);<BR>
&nbsp;&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;&nbsp;String s = kbd.getText();<BR>
&nbsp;&nbsp;&nbsp;System.out.print(&quot; Character: &quot;);
<BR>
&nbsp;&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;&nbsp;char ch = kbd.getChar();<BR>
&nbsp;&nbsp;&nbsp;if(ch==' ') ch = '#';<BR>
&nbsp;&nbsp;&nbsp;CGTextBox cgtb = new CGTextBox(ul,ch,s);<BR>
&nbsp;&nbsp;&nbsp;cgtb.addToGrid(grid);<BR>
&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot; Lower Right Corner:&quot;);
<BR>
&nbsp;&nbsp;&nbsp;Point lr = kbd.getPoint();<BR>
&nbsp;&nbsp;&nbsp;System.out.print(&quot; Character: &quot;);
<BR>
&nbsp;&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;&nbsp;char ch = kbd.getChar();<BR>
&nbsp;&nbsp;&nbsp;if(ch==' ') ch = '#';<BR>
&nbsp;&nbsp;&nbsp;CGBox box = new CGBox(ul,lr,ch);<BR>
&nbsp;&nbsp;&nbsp;box.addToGrid(grid);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;void addText() throws IOException {<BR>
&nbsp;&nbsp;System.out.println(&quot;Add Text Menu&quot;);<BR>
&nbsp;&nbsp;System.out.println(&quot; Location:&quot;);<BR>
&nbsp;&nbsp;Point p = kbd.getPoint();<BR>
&nbsp;&nbsp;System.out.print(&quot; Text: &quot;);<BR>
&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;String text = kbd.getText();<BR>
&nbsp;&nbsp;CGText cgt = new CGText(p,text);<BR>
&nbsp;&nbsp;cgt.addToGrid(grid);<BR>
&nbsp;}<BR>
&nbsp;void editText() throws IOException {<BR>
&nbsp;&nbsp;System.out.println(&quot;Current Objects:&quot;);
<BR>
&nbsp;&nbsp;int numObjects = grid.getNumObjects();<BR>
&nbsp;&nbsp;for(int i=0;i&lt;numObjects;++i){<BR>
&nbsp;&nbsp;&nbsp;System.out.print(&quot; &quot;+String.valueOf(i)+&quot;
&quot;);<BR>
&nbsp;&nbsp;&nbsp;grid.getObject(i).describe();<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;if(numObjects &gt; 0){<BR>
&nbsp;&nbsp;&nbsp;System.out.print(&quot;Select an object to edit:
&quot;);<BR>
&nbsp;&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;&nbsp;int objIndex = kbd.getInt();<BR>
&nbsp;&nbsp;&nbsp;CGObject obj = grid.getObject(objIndex);<BR>
&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;editText((CGTextEdit) obj);<BR>
&nbsp;&nbsp;&nbsp;}catch (ClassCastException ex){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Object is not
editable.&quot;);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}else System.out.println(&quot;(none)&quot;);<BR>
&nbsp;&nbsp;System.out.println();<BR>
&nbsp;}<BR>
&nbsp;void editText(CGTextEdit obj) throws IOException {<BR>
&nbsp;&nbsp;System.out.println(&quot;Text Edit Menu&quot;);<BR>
&nbsp;&nbsp;System.out.println(&quot; R - Replace Text&quot;);
<BR>
&nbsp;&nbsp;System.out.println(&quot; L - Lower Case&quot;);<BR>
&nbsp;&nbsp;System.out.println(&quot; U - Upper Case&quot;);<BR>
&nbsp;&nbsp;System.out.print(&quot;Enter command: &quot;);<BR>
&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;char ch = kbd.getChar();<BR>
&nbsp;&nbsp;ch = Character.toUpperCase(ch);<BR>
&nbsp;&nbsp;switch(ch) {<BR>
&nbsp;&nbsp;&nbsp;case 'R':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(&quot;Enter new text:
&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String s = kbd.getText();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;obj.replaceText(s);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;case 'L':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;obj.lowerCase();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;case 'U':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;obj.upperCase();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT>run()</TT>, <TT>getCommand()</TT>, <TT>addPoint()</TT>,
and <TT>addBox()</TT> methods are updated to support the Edit
Text command. The two overloaded <TT>editText()</TT> methods are
added to process this command.
<P>
The <TT>switch</TT> statement of the <TT>run()</TT> method adds
the <TT>'E'</TT> case to its list of command options, calling
the <TT>editText()</TT> method to process the Edit Text command.
The <TT>getCommand()</TT> method adds the Edit Text command to
its menu display.
<P>
The <TT>addPoint()</TT> and <TT>addBox()</TT> methods query the
user to determine whether text should be added to the point or
box. If the user declines to add text, a <TT>CGPoint</TT> or <TT>CGBox</TT>
object is created and added to the grid. If the user indicates
that he or she wants to add text to the point or box, the user
is prompted to enter the text. In this case, <TT>CGTextPoint</TT>
and <TT>CGTextBox</TT> objects are created and added to the grid.
<P>
The two <TT>editText()</TT> methods share the same name but provide
completely different processing. The first <TT>editText()</TT>
method is invoked when the user enters the Edit Text command.
It displays a list of the objects that are currently added to
the grid. It does this by using the <TT>getNumObjects()</TT> method
of the <TT>PrintCGrid</TT> class to find out how many objects
there are and then retrieving those objects using the <TT>getObject()</TT>
method of the <TT>PrintCGrid</TT> class. The following line of
code concatenates two method invocations:
<BLOCKQUOTE>
<TT>grid.getObject(i).describe();</TT>
</BLOCKQUOTE>
<P>
It retrieves an object of class <TT>CGObject</TT> by invoking
the <TT>getObject()</TT> method of the <TT>PrintCGrid</TT> class.
It then invokes the object's <TT>describe()</TT> method so that
it will display its description on the console window. If there
are no objects currently added to the grid, the <TT>editText()</TT>
method indicates this fact by displaying <TT>(none)</TT> to the
console window. Otherwise, the user is prompted to enter the number
of the object to edit. This number is the number listed in the
current object display. The number entered by the user is used
to retrieve the object to be edited using the <TT>getObject()</TT>
method. After the object is retrieved, the <TT>editText()</TT>
method tries to edit the text associated with the object by invoking
the second <TT>editText()</TT> method. If the object does not
implement the <TT>CGTextEdit</TT> interface, a <TT>ClassCastException</TT>
is thrown during the invocation of the second <TT>editText()</TT>
method. The first <TT>editText()</TT> method catches this exception
and reports the selected object as not being editable.
<P>
The second <TT>editText()</TT> method displays a Text Edit Menu
prompt to the user and invokes the <TT>replaceText()</TT>, <TT>lowerCase()</TT>,
and <TT>upperCase()</TT> methods to process the commands entered
by the user.
<H3><A NAME="RunningtheExample"><B>Running the Example</B></A>
</H3>
<P>
The <TT>CDrawApp</TT> program is compiled and executed in the
same manner as its <A HREF="ch5.htm" >Chapter 5</A> predecessor.
You should notice the additional Edit Text command provided in
the <TT>CDrawApp</TT> main menu:
<BLOCKQUOTE>
<TT>C:\java\jdg\ch06&gt;java jdg.ch06.CDrawApp<BR>
<FONT FACE="Courier New">CDrawApp&nbsp;&nbsp;&nbsp;&nbsp;P - Add
a Point&nbsp;&nbsp;&nbsp;U - Undo Last Add&nbsp;&nbsp;&nbsp;E
- Edit Text<BR>
Main Menu&nbsp;&nbsp;&nbsp;B - Add a Box&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C
- Clear Grid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X - Exit CDrawApp
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T
- Add Text&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S - Show Grid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enter
command:</FONT></TT>
</BLOCKQUOTE>
<P>
We'll add a few objects to the grid, display them, and then edit
their text. After you learn how to use the new program, we'll
discuss its features as they relate to interfaces.
<P>
Enter <TT>P</TT> to add a point to the grid. Set its x-coordinate
to <TT>60</TT>, its y-coordinate to <TT>10</TT>, and its draw
character to <TT>@</TT>:
<BLOCKQUOTE>
<TT>Add Point Menu<BR>
<FONT FACE="Courier New">&nbsp;Location:<BR>
&nbsp;&nbsp;x-coordinate: 60<BR>
&nbsp;&nbsp;y-coordinate: 10<BR>
&nbsp;Character: @<BR>
&nbsp;Add text (y/n):</FONT></TT>
</BLOCKQUOTE>
<P>
You are asked whether you want to add text to the point. Press
<TT>Y</TT> to add text. You are then prompted to add your text.
Enter <TT>at sign</TT> as your text, as shown in the following
display output:
<BLOCKQUOTE>
<TT>Add Point Menu<BR>
<FONT FACE="Courier New">&nbsp;Location:<BR>
&nbsp;&nbsp;x-coordinate: 60<BR>
&nbsp;&nbsp;y-coordinate: 10<BR>
&nbsp;Character: @<BR>
&nbsp;Add text (y/n): y<BR>
&nbsp;&nbsp;Text:  at sign</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>CDrawApp</TT> main menu is then redisplayed. Enter <TT>B</TT>
to add a box. Set the box's upper-left corner as follows:
<BLOCKQUOTE>
<TT>Add Box Menu<BR>
<FONT FACE="Courier New">&nbsp;Upper Left Corner:<BR>
&nbsp;&nbsp;x-coordinate: 4<BR>
&nbsp;&nbsp;y-coordinate: 4<BR>
&nbsp;Add text (y/n):</FONT></TT>
</BLOCKQUOTE>
<P>
Enter <TT>Y</TT> to add text to the box. You are prompted to enter
your text. Enter the text <TT>Java's interfaces support multiple
inheritance.</TT>. Then set the box's draw character to <TT>+</TT>.
Your display output should look like the following:
<BLOCKQUOTE>
<TT>Add Box Menu<BR>
<FONT FACE="Courier New">&nbsp;Upper Left Corner:<BR>
&nbsp;&nbsp;x-coordinate: 4<BR>
&nbsp;&nbsp;y-coordinate: 4<BR>
&nbsp;Add text (y/n): y<BR>
&nbsp;&nbsp;Text: Java's interfaces support multiple inheritance.
<BR>
&nbsp;Character: +</FONT></TT>
</BLOCKQUOTE>
<P>
Enter <TT>B</TT> to enter another box. This box will not contain
any text. Enter the coordinates for the box's corners, as follows:
<BLOCKQUOTE>
<TT>Add Box Menu<BR>
<FONT FACE="Courier New">&nbsp;Upper Left Corner:<BR>
&nbsp;&nbsp;x-coordinate: 65<BR>
&nbsp;&nbsp;y-coordinate: 15<BR>
&nbsp;Add text (y/n): n<BR>
&nbsp;Lower Right Corner:<BR>
&nbsp;&nbsp;x-coordinate: 72<BR>
&nbsp;&nbsp;y-coordinate: 18</FONT></TT>
</BLOCKQUOTE>
<P>
Then set its draw character to a hyphen:
<P>
<TT>Character: -</TT>
<P>
You should have noticed that when a box contains text, its lower-right
corner is not specified. That's because the program computes it
based on the length of the text to be displayed with the box.
<P>
You're almost done adding objects to the grid. Enter <TT>T</TT>
to add text to the grid. Set the text's location and value as
follows:
<BLOCKQUOTE>
<TT>Add Text Menu<BR>
<FONT FACE="Courier New">&nbsp;Location:<BR>
&nbsp;&nbsp;x-coordinate: 1<BR>
&nbsp;&nbsp;y-coordinate: 18<BR>
&nbsp;Text: UPPER CASE Or lower case</FONT></TT>
</BLOCKQUOTE>
<P>
You now have enough objects to work with. Enter <TT>S</TT> to
display the grid. It should look like this:
<BLOCKQUOTE>
<TT>***************************************************************************
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;+++++++++++++++++++++++++++++++++++++++++++++++++&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;+Java's&nbsp;interfaces&nbsp;support&nbsp;multiple&nbsp;inheritance.+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;+++++++++++++++++++++++++++++++++++++++++++++++++&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@&nbsp;at&nbsp;sign&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--------&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;*
<BR>
*&nbsp;UPPER&nbsp;CASE&nbsp;Or&nbsp;lower&nbsp;case&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--------&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
***************************************************************************</TT>
</BLOCKQUOTE>
<P>
Let's start editing these objects. Enter <TT>E</TT> to select
an object to edit:
<BLOCKQUOTE>
<TT>CDrawApp&nbsp;&nbsp;&nbsp;&nbsp;P - Add a Point&nbsp;&nbsp;&nbsp;U
- Undo Last Add&nbsp;&nbsp;&nbsp;E - Edit Text<BR>
<FONT FACE="Courier New">Main Menu&nbsp;&nbsp;&nbsp;B - Add a
Box&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C - Clear Grid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X
- Exit CDrawApp<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T
- Add Text&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S - Show Grid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enter
command: e<BR>
<P>
</BLOCKQUOTE>
Current Objects:
<BLOCKQUOTE>
&nbsp;0 CGTextPoint @ (60,10)  at sign<BR>
&nbsp;1 CGTextBox + (4,4) (52,6) Java's interfaces support multiple
inheritance.<BR>
&nbsp;2 CGBox - (65,15) (72,18)<BR>
&nbsp;3 CGText (1,18) UPPER CASE Or lower case<P>
</BLOCKQUOTE>
Select an object to edit:</FONT></TT>
</BLOCKQUOTE>
<P>
A list of the grid's current objects is displayed. Enter <TT>2</TT>
to select the object of class <TT>CGBox</TT>. Because this object
does not implement the <TT>CGTextEdit</TT> interface, it is identified
as not being editable, as shown in the following console output:
<BLOCKQUOTE>
<TT>Object is not editable.</TT>
</BLOCKQUOTE>
<P>
See if you can find where this processing was performed within
the <TT>CDraw</TT> class. Enter <TT>E</TT> again to edit another
object. The list of current objects is again displayed. Enter
<TT>1</TT> to select the object of class <TT>CGTextBox</TT>. The
Text Edit Menu prompt is displayed as follows:
<BLOCKQUOTE>
<TT>Text Edit Menu<BR>
<FONT FACE="Courier New">&nbsp;R - Replace Text<BR>
&nbsp;L - Lower Case<BR>
&nbsp;U - Upper Case<BR>
Enter command:</FONT></TT>
</BLOCKQUOTE>
<P>
This menu allows you to use the methods of the <TT>CGTextEdit</TT>
interface to edit the objects that implement the interface. Enter
<TT>R</TT> to replace the text associated with the <TT>CGTextBox</TT>
object. You are then prompted to enter the new text for this object.
Enter <TT>interfaces</TT> to complete the editing. Your display
should contain the following output:
<BLOCKQUOTE>
<TT>Enter command: r<BR>
<FONT FACE="Courier New">Enter new text: interfaces</FONT></TT>
</BLOCKQUOTE>
<P>
Enter <TT>S</TT> to see how the grid was updated. Notice how the
size of the <TT>CGTextBox</TT> was changed to fit the size of
the text it contains:
<BLOCKQUOTE>
<TT>++++++++++++<BR>
<FONT FACE="Courier New">+interfaces+<BR>
++++++++++++</FONT></TT>
</BLOCKQUOTE>
<P>
Enter <TT>E</TT> and then <TT>0</TT> to edit the object of class
<TT>CGTextPoint</TT>. Then type <TT>U</TT> to change it to uppercase.
Use the <TT>show</TT> command to verify that the text has been
changed to uppercase.
<P>
Enter <TT>E</TT>, <TT>3</TT>, and <TT>L</TT> in succession to
change the case of the text contained in the <TT>CGText</TT> object.
Use the Show Grid command to redisplay the grid:
<BLOCKQUOTE>
<TT>***************************************************************************
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;++++++++++++&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;+interfaces+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;++++++++++++&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@&nbsp;AT&nbsp;SIGN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--------&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;*
<BR>
*&nbsp;upper&nbsp;case&nbsp;or&nbsp;lower&nbsp;case&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--------&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
***************************************************************************</TT>
</BLOCKQUOTE>
<P>
Now type <TT>X</TT> to exit the <TT>CDrawApp</TT> program.
<H3><A NAME="ExampleSummary"><B>Example Summary</B></A></H3>
<P>
The <TT>CDrawApp</TT> program illustrates the use of a simple
interface. The <TT>CGTextEdit</TT> interface, used in this example,
provides a common set of access methods to three classes on different
branches of the <TT>CDrawApp</TT> class hierarchy, as shown in
<A HREF="f6-2.gif" >Figure 6.2</A>.
<P>
<A HREF="f6-2.gif"><B>Figure 6.2 : </B><I>The <TTGGTextEdit</TT> interface.</I></A>
<P>
Providing a standard interface to the <TT>CGText</TT>, <TT>CGTextPoint</TT>,
and <TT>CGTextBox</TT> classes makes it possible to manipulate
objects of these classes as if they belong to a single type. This
is illustrated in the second <TT>editText()</TT> method of the
<TT>CDraw</TT> class. This method takes an object of the <TT>CGTextEdit</TT>
interface type as an argument and edits that object without having
to know to which class the object belongs. Although the methods
of the <TT>CGTextEdit</TT> interface are very simple, the capability
provided by the interface is not. The second <TT>editText()</TT>
method is able to manipulate any object that implements the <TT>CGTextEdit</TT>
interface, even those that may be defined in the future.
<P>
The first <TT>editText()</TT> method of the <TT>CDraw</TT> class
also provides an interesting example of the use of interfaces.
The first part of the method displays the list of current objects,
one of which is selected by the user. The <TT>try</TT> statement
tests to see if the selected object implements the <TT>CGTextEdit</TT>
interface by trying to cast it to an object of interface type
<TT>CGTextEdit</TT>. The casting is performed when the object
is used as an argument to the second <TT>editText()</TT> method:
<BLOCKQUOTE>
<TT>try {<BR>
&nbsp;editText((CGTextEdit) obj);<BR>
}catch (ClassCastException ex){<BR>
&nbsp;System.out.println(&quot;Object is not editable.&quot;);
<BR>
}</TT>
</BLOCKQUOTE>
<P>
<I>Casting</I> is the process of changing the type by which an
object is accessed. It is covered in <A HREF="ch11.htm" >Chapter 11</A>,
&quot;Language Summary.&quot; An object can be cast to an interface
type if the object implements the interface; otherwise, a <TT>ClassCastException</TT>
is thrown.
<P>
The <TT>editText()</TT> method uses casting to determine whether
an object implements the <TT>CGTextEdit</TT> interface. If the
object implements the <TT>CGTextEdit</TT> interface, the casting
is allowed and the second <TT>editText()</TT> method is invoked
to edit the object. If the object does not implement the <TT>CGTextEdit</TT>
interface, an exception is thrown. This exception is caught by
the <TT>catch</TT> part of the <TT>try</TT> statement and the
object is identified as not editable.
<H2><A NAME="UsingInterfacesasAbstractTypes"><B><FONT SIZE=5 COLOR=#FF0000>Using
Interfaces as Abstract Types</FONT></B></A></H2>
<P>
The preceding example shows how interfaces can be used to declare
method parameters. Such declarations require only that the objects
passed as arguments during a method invocation implement the identified
interface.
<P>
In the following example, the <TT>restart()</TT> method of <TT>ExampleClass</TT>
declares the <TT>currentSelection</TT> parameter to be of type
<TT>ExampleInterface</TT>. The <TT>restart()</TT> method has no
idea what class of object is passed to it via <TT>currentSelection</TT>.
It only requires it to implement the <TT>ExampleInterface</TT>.
The fact that the correct methods are called for the object identified
by <TT>currentSelection</TT> is an example of <I>polymorphism</I>.
The code for <TT>ExampleInterface</TT> follows:
<BLOCKQUOTE>
<TT>interface ExampleInterface {<BR>
<FONT FACE="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;void rewind();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;void play();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;void stop();<BR>
}<BR>
class ExampleClass {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;void restart(ExampleInterface currentSelection)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentSelection.stop();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentSelection.rewind();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentSelection.play();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>restart()</TT> method uses the <TT>ExampleInterface</TT>
methods of the <TT>currentSelection</TT> object to perform its
processing. Note that <TT>ExampleClass</TT> does not need to implement
<TT>ExampleInterface</TT>. The interface only needs to be implemented
by the object passed via the <TT>currentSelection</TT> parameter.
<H2><A NAME="InterfaceConstants"><B><FONT SIZE=5 COLOR=#FF0000>Interface
Constants</FONT></B></A></H2>
<P>
The variables declared in an interface body are available as constants
to classes that implement the interface. This enables pools of
related constants to be defined and made available to classes
that require use of these constants. Common constant pools are
color constants, mathematical constants, and formatting constants.
Variables declared in an interface are implicitly <TT>static</TT>
and <TT>final</TT> and must be initialized in their declaration.
<P>
The following example shows how interface variables are used to
define a constant pool. Create a file in your <TT>ch06</TT> directory
called <TT>ColorConstants.java</TT> and enter the code shown in
Listing 6.6.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 6.6. The<FONT SIZE=2> </FONT></B><TT><B><FONT FACE="Courier New">ColorConstants</FONT></B></TT><B><FONT SIZE=2>
</FONT>interface defines red, blue, and green constants.</B><P>

<TT>package jdg.ch06;<BR>
<BR>
<FONT FACE="Courier New">public interface ColorConstants {<BR>
&nbsp;int red = 0xff0000;<BR>
&nbsp;int green = 0xff00;<BR>
&nbsp;int blue = 0xff;<BR>
</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Compile this code using <TT>javac</TT>. Then create another file
called <TT>ColorTestApp.java</TT>, as shown in Listing 6.7.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 6.7. The </B><TT><B><FONT FACE="Courier New">ColorTestApp</FONT></B></TT><B>
class source code.</B><P>

<TT>package jdg.ch06;<BR>
<BR>
<FONT FACE="Courier New">import java.lang.System;<BR>
<BR>
class ColorTestApp implements ColorConstants {<BR>
&nbsp;public static void main(String args[]) {<BR>
&nbsp;&nbsp;System.out.println(red);<BR>
&nbsp;&nbsp;System.out.println(green);<BR>
&nbsp;&nbsp;System.out.println(blue);<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Compile <TT>ColorTestApp.java</TT> and execute it using <TT>java</TT>.
Your console window should display the following output:
<BLOCKQUOTE>
<TT>C:\java\jdg\ch06&gt;java jdg.ch06.ColorTestApp<BR>
<FONT FACE="Courier New">16711680<BR>
65280<BR>
255</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>main()</TT> method of the <TT>ColorTestApp</TT> class
is able to access the constants defined in the <TT>ColorConstants</TT>
interface as if they were inherited variables. The <TT>main()</TT>
function displays these hexadecimal constants as decimal integers.
<H2><A NAME="ExtendingInterfaces"><B><FONT SIZE=5 COLOR=#FF0000>Extending
Interfaces</FONT></B></A></H2>
<P>
The interface <TT>extends</TT> clause is similar to the <TT>extends</TT>
clause used with classes. An interface is allowed to extend more
than one interface, but a class can extend only a single class.
The extending interface inherits all the methods and constants
defined in the interfaces that it extends. When a class implements
an interface X, it must implement all methods of all interfaces
that X extends.
<P>
The following example declares the <TT>MoreTextEdit</TT> interface
as extending the <TT>CGTextEdit</TT> interface. All classes that
implement the <TT>MoreTextEdit</TT> interface must implement the
methods of both <TT>CGTextEdit</TT> and <TT>MoreTextEdit</TT>:
<BLOCKQUOTE>
<TT>interface MoreTextEdit extends CGTextEdit {<BR>
<FONT FACE="Courier New">&nbsp;void insertText(int pos, String
s);<BR>
&nbsp;void appendText(String s);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<H2><A NAME="CombiningInterfaces"><B><FONT SIZE=5 COLOR=#FF0000>Combining
Interfaces</FONT></B></A></H2>
<P>
Two or more interfaces may be combined into a single interface
through extension. The following example shows how interfaces
are combined:
<BLOCKQUOTE>
<TT>interface TV {<BR>
<FONT FACE="Courier New">&nbsp;void changeChannel(int channelNumber);
<BR>
&nbsp;void changeVolume(int volumeSetting);<BR>
}<BR>
interface VCR {<BR>
&nbsp;void play();<BR>
&nbsp;void rewind();<BR>
&nbsp;void record();<BR>
}<BR>
interface TVCR extends TV, VCR {<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
Any non-<TT>abstract</TT> class that implements the <TT>TVCR</TT>
interface is required to implement the methods of the <TT>TV</TT>
interface and the <TT>VCR</TT> interface.
<H2><A NAME="Summary"><B><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></B></A>
</H2>
<P>
In this chapter you have learned how to use Java interfaces to
provide a common set of methods by which a group of classes can
be accessed. You have added the <TT>CGTextEdit</TT> interface
to the <TT>CDrawApp</TT> example from <A HREF="ch5.htm" >Chapter 5</A>
and learned how to declare objects using interface types. You
have also learned how to use interface constants. In <A HREF="ch7.htm" >Chapter 7</A>,
&quot;Exceptions,&quot; you'll learn how to use Java exceptions
to perform error processing.
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



