<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META>
<H1><FONT COLOR=#FF0000>Chapter 18</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Opening Windows</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#HelloWindows" >Hello Windows!</A>
<LI><A HREF="#GoingRoundinOvalsAGraphicsProgram" >Going Round in Ovals: A Graphics Program</A>
<LI><A HREF="#ATextEditor" >A Text Editor</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
This chapter is the first of eight chapters that cover window
programming. It introduces you to Java windows by way of several
examples that illustrate different aspects of the classes and
methods used to implement simple window applications. Its purpose
is to quickly get you up to speed developing window-based programs.
Subsequent chapters will fill in the details of the classes and
methods that are introduced here. You should approach this chapter
by trying to get a good general understanding of what is going
on in the sample programs without dwelling on the details. You
will learn the details when you study them in later chapters.
<H2><A NAME="HelloWindows"><B><FONT SIZE=5 COLOR=#FF0000>Hello
Windows</FONT><FONT COLOR=#FF0000>!</FONT></B></A></H2>
<P>
The first program you wrote in <A HREF="ch4.htm" >Chapter 4</A>,
&quot;First Programs: Hello World! to BlackJack,&quot; is the
<TT>HelloWorldApp</TT> program. It displays the traditional <TT>Hello
World!</TT> text to the console window. The main purpose of the
program was to show you how to develop a simple Java program that
actually produced some noticeable effect. The same rationale applies
to the <TT>HelloWindowsApp</TT> program that you'll develop shortly.
The program shows you how to open an application window and write
the text <TT>Hello Windows!</TT> to the window. The code for the
<TT>HelloWindowsApp</TT> program is shown in Listing 18.1.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 18.1. The source code of the </B><TT><B><FONT FACE="Courier New">HelloWindowsApp</FONT></B></TT><B>
program.</B>
<P>
<TT>import java.awt.Frame;<BR>
<FONT FACE="Courier New">import java.awt.Event;<BR>
import java.awt.Graphics;<BR>
<BR>
public class HelloWindowsApp extends Frame {<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;HelloWindowsApp app = new HelloWindowsApp();<BR>
&nbsp;}<BR>
&nbsp;public HelloWindowsApp() {<BR>
&nbsp;&nbsp;super(&quot;Hello Windows!&quot;);<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(200,200);<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;g.drawString(&quot;Hello Windows!&quot;,50,90);<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else return false;<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
When you compile and run the program it opens a small window in
the upper-left corner of your desktop and displays the text <TT>Hello
Windows!</TT> in the middle of the window. This program is no
giant feat for mankind, but it's a large step for you. It marks
your transition from console to window-based programs. Up to this
point in the book, console programs served admirably in helping
cover the different aspects of the Java language and many of the
classes of the API. However, window-based programs and applets
(which you learn about in Part VI, &quot;Programming the Web with
Applets and Scripts&quot;) are the primary areas of interest for
most Java programmers. <A HREF="f18-1.gif" >Figure 18.1</A> shows
the window displayed by the <TT>HelloWindowsApp</TT> program.
<P>
<A HREF="f18-1.gif"><B>Figure 18.1 :</B><I>The <TT>HelloWindowsApp</TT> program display.</I></A>
<P>

Let's take a look at <TT>HelloWindowsApp</TT> and find out what
makes it work. You probably noticed right off the bat that we
are now importing classes from the <TT>java.awt</TT> package.
The <TT>Frame</TT>, <TT>Event</TT>, and <TT>Graphics</TT> classes
shown in the <TT>import</TT> statements are classes that are fundamental
to developing window programs. The <TT>Frame</TT> class is used
to create <TT>Frame</TT> objects that implement application main
windows. The <TT>Event</TT> class is used to process user-generated
interface events, such as mouse clicks and keyboard input, and
the <TT>Graphics</TT> class is used to update the screen display.
<P>
The <TT>HelloWindowsApp</TT> class extends the <TT>Frame</TT>
class. This is a typical approach to developing window programs.
By subclassing <TT>Frame</TT>, your application class implements
a main application window. You still use the same old <TT>main()</TT>
method for implementing the entry point to your program. In <TT>HelloWindowsApp</TT>,
the <TT>main()</TT> method simply creates a default object of
class <TT>HelloWindowsApp</TT>.
<P>
The <TT>HelloWindowsApp</TT> constructor uses the <TT>super()</TT>
constructor call statement to invoke the <TT>Frame</TT> constructor
with the string <TT>&quot;Hello Windows!&quot;</TT>. The <TT>Frame</TT>
constructor creates a new application window frame with the specified
text as its title. The <TT>pack()</TT> method is used to pack
the components of the window and set the window's size based upon
the size of these components. It is inherited from the <TT>Window</TT>
class, which is the superclass of <TT>Frame</TT>. The <TT>resize()</TT>
method then resizes the window to a 200<FONT FACE="Symbol">&#165;</FONT>200
pixel dimension. The <TT>resize()</TT> method is inherited from
the <TT>Component</TT> class by way of the <TT>Container</TT>,
<TT>Window</TT>, and <TT>Frame</TT> classes. Finally, the <TT>show()</TT>
method is used to cause the window to be displayed. It is inherited
from the <TT>Window</TT> class.
<P>
You might be wondering how the <TT>&quot;Hello Windows!&quot;</TT>
text is actually displayed because there is no call from <TT>main()</TT>
or <TT>HelloWindowsApp()</TT> to the <TT>paint()</TT> method.
When a window or any other object that is in a subclass of <TT>Component</TT>
is initially displayed or redisplayed as the result of the window
being uncovered or brought to the foreground, the <TT>paint()</TT>
method is invoked. It then paints the window according to the
current application state.
<P>
The <TT>paint()</TT> method used by <TT>HelloWindowsApp</TT> overrides
the <TT>paint()</TT> method inherited from the <TT>Component</TT>
class. It takes a <TT>Graphics</TT> object as a parameter. The
<TT>Graphics</TT> class provides numerous easy-to-use methods
for drawing on <TT>Graphics</TT> objects. The <TT>paint()</TT>
method uses the <TT>drawString()</TT> method to display the text
<TT>&quot;Hello Windows!&quot;</TT> at the screen coordinate 50,90
within the application window.
<P>
Window coordinates are organized with the upper-left corner of
the window being 0,0. The coordinates of the upper-right corner
of the window are <I>width</I>,0, where <I>width</I> is the horizontal
width of the window in pixels. The coordinates of the lower-left
corner of the window are 0,<I>height</I>, where <I>height</I>
is the vertical height of the window in pixels. Finally, the coordinates
of the lower-right corner of the window are <I>width</I>,<I>height</I>.
<A HREF="f18-2.gif" >Figure 18.2</A> illustrates the window coordinate
system.
<P>
<A HREF="f18-2.gif"><B>Figure 18.2 :</B><I>Window coordinates.</I></A>
<P>
You probably have been wondering what the <TT>handleEvent()</TT>
method is doing in the <TT>HelloWindowsApp</TT> class. The <TT>handleEvent()</TT>
method provides a standard approach to event handling in Java
applications. <I>Events</I> represent actions that occur during
the course of program execution. Most events are generated as
the result of user actions such as mouse clicks and keyboard actions.
The <TT>handleEvent()</TT> method overrides the method inherited
from the <TT>Component</TT> class. It takes an object of the <TT>Event</TT>
class as a parameter and uses the methods and constants of the
<TT>Event</TT> class to determine what event was passed to it
and how it should be handled. The <TT>handleEvent()</TT> method
returns a <TT>boolean</TT> value indicating whether or not the
event has been handled. If a <TT>false</TT> value is returned,
the event is propagated to the <TT>handleEvent()</TT> method of
the parent of the class that is currently handling the event.
If a <TT>true</TT> value is returned, no further event propagation
takes place.
<P>
The <TT>handleEvent()</TT> method of <TT>HelloWindowsApp</TT>
checks the <TT>id</TT> variable of the event to see if it equals
the constant <TT>Event.WINDOWS_DESTROY</TT>. The <TT>id</TT> variable
and the <TT>WINDOWS_DESTROY</TT> constant both are defined in
the API of the <TT>Event</TT> class. The <TT>id</TT> variable
is used to identify what type of event occurred, and the <TT>Event</TT>
class constants specify the event types. In this example, the
event handler only handles the <TT>WINDOW_DESTROY</TT> event.
This event occurs when the user closes the main application window
by clicking the Close Window icon, as shown in <A HREF="f18-3.gif" >Figure 18.3</A>.

<P>
<A HREF="f18-3.gif"><B>Figure 18.3 :</B><I>Terminating the <TT>HelloWindowsApp</TT> program.</I></A>
<P>
The <TT>WINDOW_DESTROY</TT> event is handled by invoking the <TT>exit()</TT>
method of the <TT>System</TT> class to terminate the program.
The <TT>true</TT> value is returned to indicate that the event
was handled.
<P>
You might be wondering what would happen if the event handler
did not handle the <TT>WINDOW_DESTROY</TT> event. Try deleting
the <TT>handleEvent()</TT> method and recompiling and rerunning
<TT>HelloWindowsApp</TT> to see what happens when you try to terminate
the application.
<H2><A NAME="GoingRoundinOvalsAGraphicsProgram"><B><FONT SIZE=5 COLOR=#FF0000>Going
Round in Ovals: A Graphics Program</FONT></B></A></H2>
<P>
The <TT>HelloWindowsApp</TT> program provided a simple introduction
to window programming. It illustrated many of the basics of writing
a window program, but it didn't actually <I>do</I> all that much.
The <TT>OvalApp</TT> program is also an introductory window program.
It introduces more window programming classes and methods such
as panels, buttons, layouts, additional event handling, and, of
course, oval drawing. The source code of <TT>OvalApp</TT> is shown
in Listing 18.2.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 18.2. The source code of the </B><TT><B><FONT FACE="Courier New">OvalApp</FONT></B></TT><B>
program.</B>
<P>
<TT>import java.awt.*;<BR>
<FONT FACE="Courier New">import java.util.Random;<BR>
<BR>
public class OvalApp extends Frame {<BR>
&nbsp;int screenWidth = 400;<BR>
&nbsp;int screenHeight = 400;<BR>
&nbsp;Oval oval;<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;OvalApp app = new OvalApp();<BR>
&nbsp;}<BR>
&nbsp;public OvalApp() {<BR>
&nbsp;&nbsp;super(&quot;Let's Draw Ovals!&quot;);<BR>
&nbsp;&nbsp;Panel buttons = new Panel();<BR>
&nbsp;&nbsp;buttons.add(new Button(&quot;Next&quot;));<BR>
&nbsp;&nbsp;buttons.add(new Button(&quot;Quit&quot;));<BR>
&nbsp;&nbsp;add(&quot;South&quot;,buttons);<BR>
&nbsp;&nbsp;oval = new Oval(screenWidth,screenHeight);<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(screenWidth,screenHeight);<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;oval.paint(g);<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.ACTION_EVENT){<BR>
&nbsp;&nbsp;&nbsp;if(event.target instanceof Button){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(&quot;Next&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oval.update();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;Quit&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
}<BR>
<BR>
class Oval {<BR>
&nbsp;int x, y, width, height, maxWidth, maxHeight;<BR>
&nbsp;Color color;<BR>
&nbsp;static Random r = new Random();<BR>
&nbsp;public Oval(int w,int h) {<BR>
&nbsp;&nbsp;super();<BR>
&nbsp;&nbsp;maxWidth = w;<BR>
&nbsp;&nbsp;maxHeight = h;<BR>
&nbsp;&nbsp;update();<BR>
&nbsp;}<BR>
&nbsp;public void update() {<BR>
&nbsp;&nbsp;x = Math.abs(r.nextInt() % (maxWidth-100));<BR>
&nbsp;&nbsp;y = Math.abs(r.nextInt() % (maxHeight-100));<BR>
&nbsp;&nbsp;width = (maxWidth - x)/3;<BR>
&nbsp;&nbsp;height = (maxHeight - y)/3;<BR>
&nbsp;&nbsp;int rgb[] = new int[3];<BR>
&nbsp;&nbsp;for(int i=0;i&lt;3;++i) rgb[i]=Math.abs(r.nextInt()%256);
<BR>
&nbsp;&nbsp;color = new Color(rgb[0],rgb[1],rgb[2]);<BR>
&nbsp;}<BR>
&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;g.setColor(color);<BR>
&nbsp;&nbsp;g.fillOval(x,y,width,height);<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
When you run the <TT>OvalApp</TT> program it displays a window
with the title Let's Draw Ovals!. A colored oval is displayed
somewhere in the application window, as shown in <A HREF="f18-4.gif" >Figure 18.4</A>.
<P>
<A HREF="f18-4.gif"><B>Figure 18.4 :</B><I> The <TT>OvalApp</TT> startup display</I></A>
<P>

The window has two buttons, labeled Next and Quit. When you click
on the Next button, as shown in <A HREF="f18-5.gif" >Figure 18.5</A>,
a different oval is displayed.
<P>
<A HREF="f18-5.gif"><B>Figure 18.5 :</B><I> The Next button.</I></A>
<P>
You can continue to click on the Next button to cause different
colored ovals to be displayed in different parts of the window,
as shown in <A HREF="f18-6.gif" >Figure 18.6</A>.
<P>
<A HREF="f18-6.gif"><B>Figure 18.6 :</B><I> A new oval is displayed.</I></A>
<P>
When you have thoroughly amused yourself by drawing ovals, you
can click on the Quit button, as shown in <A HREF="f18-7.gif" >Figure 18.7</A>,
and terminate the program's execution.
<P>
<A HREF="f18-7.gif"><B>Figure 18.7 :</B><I> The Quit button.</I></A>
<P>
The <TT>OvalApp</TT> program is cute and entertaining, but doesn't
perform any useful processing. However, it does provide a good
example of some new window programming constructs.
<P>
The program begins by doing an import of the relevant classes
of the <TT>java.awt</TT> package. The program uses a large number
of <TT>java.awt</TT> classes and, rather than listing each one
individually, uses the more general package <TT>import</TT> statement
to eliminate the trouble of typing each one in individually. The
only other class that is included is the <TT>Random</TT> class
of the <TT>java.util</TT> package. This class provides the capability
to generate random numbers to be used in the oval drawing.
<P>
The <TT>OvalApp</TT> class extends <TT>Frame</TT> in the same
manner as the <TT>HelloWindowsApp</TT>. Three variables are defined
for the <TT>OvalApp</TT> class. The <TT>screenWidth</TT> and <TT>screenHeight</TT>
variables define the dimensions of the main window. The <TT>oval</TT>
variable is used to refer to the current <TT>Oval</TT> object
being displayed. The <TT>main()</TT> method simply creates a new
object of class <TT>OvalApp</TT>.
<P>
The <TT>OvalApp</TT> constructor sets the window title using the
superclass constructor call statement, <TT>super()</TT>. It then
creates a <TT>Panel</TT> object called <TT>buttons</TT>. <TT>Panel</TT>s
are window objects that are used as containers for other objects.
They help to organize the way GUI controls are placed in windows.
The <TT>buttons</TT> panel will be used to organize the Next and
Quit buttons. The <TT>add()</TT> method is used with buttons to
add two new objects of class <TT>Button</TT> to the panel. The
<TT>Button</TT> constructor takes a string argument that is the
label for the buttons. The <TT>add()</TT> method is then invoked
for the <TT>OvalApp</TT> object being constructed to add the panel
to the <TT>OvalApp</TT> application window. The <TT>OvalApp</TT>
<TT>add()</TT> method is inherited from the <TT>Container</TT>
class. The <TT>&quot;South&quot;</TT> string identifies where
the panel should be added in the application window.
<P>
The organization of objects within a window container is governed
by the <I>layout</I> of the container. (Layouts are described
in detail in <A HREF="ch19.htm" >Chapter 19</A>, &quot;Organizing
Window Programs.&quot;) The default layout for <TT>Frame</TT>
objects and their subclasses is <TT>BorderLayout</TT>. This type
of layout organizes objects within a container by their North,
South, East, and West borders. Objects can also be placed in the
Center of a container. The <TT>add(&quot;South&quot;,buttons);</TT>
method invocation adds the <TT>buttons</TT> panel to the southern
(bottom) border of the <TT>OvalApp</TT> window.
<P>
The <TT>buttons</TT> panel is also associated with a layout. Panels
use a <TT>FlowLayout</TT> object, by default. The <TT>FlowLayout</TT>
class organizes objects in a container in a left-to-right fashion,
fitting as many objects as possible in a row before moving on
to fill the next row.
<P>
The <TT>oval</TT> variable is assigned a new object of class <TT>Oval</TT>
that is parameterized by the <TT>screenWidth</TT> and <TT>screenHeight</TT>
dimensions. These arguments are passed to the <TT>Oval</TT> constructor
to make sure that an <TT>Oval</TT> object is created that is appropriate
for the screen size of the <TT>OvalApp</TT> window. The <TT>Oval</TT>
class is discussed after the <TT>OvalApp</TT> class's description
is completed.
<P>
After adding the <TT>buttons</TT> panel to the window and creating
an <TT>Oval</TT> object, the <TT>pack()</TT> method is invoked
to organize the components of the window and to determine the
minimum preferred size of the window. The <TT>resize()</TT> method
then adjusts the screen to the specified width and height dimensions.
Finally, the <TT>show()</TT> method causes the window to be displayed.
<P>
The <TT>paint()</TT> method for the <TT>OvalApp</TT> class simply
passes the task of drawing the window to the <TT>Oval</TT> class.
Notice that it passes on the <TT>Graphics</TT> object that it
receives to the <TT>Oval</TT> <TT>paint()</TT> method. Without
the <TT>Graphics</TT> object, <TT>Oval</TT>'s <TT>paint()</TT>
method would have nothing to draw on.
<P>
The <TT>handleEvent()</TT> method for <TT>OvalApp</TT> doesn't
fare as well as the <TT>paint()</TT> method. Instead of handing
off its processing to other classes, it provides a central point
for all program event handling. It processes the <TT>WINDOWS_DESTROY</TT>
event in the same manner as the <TT>HelloWindowsApp</TT> program.
It also checks for events of type <TT>ACTION_EVENT</TT>. Events
of this type are typically generated by performing actions on
GUI controls-for example, clicking on a button, selecting a menu
item, or checking a checkbox. In this case, the method is checking
whether the Next or Quit button was clicked. It does this by checking
the <TT>target</TT> variable of the event to see if it is an instance
of class <TT>Button</TT>. The <TT>target</TT> variable identifies
the object that is the target of the event being processed.
<P>
The <TT>event.arg</TT> variable is event specific. It typically
provides a value that is used to identify the specific object
from its class for which the event was generated. In the case
of <TT>Button</TT> objects, it represents the label of the button.
The <TT>arg</TT> variable is used to determine whether the button
being clicked on is the Next button or the Quit button.
<P>
When the Next button is clicked, the button-clicked event is handled
by invoking the <TT>update()</TT> method of the <TT>oval</TT>
variable and repainting the screen. The <TT>update()</TT> method
causes the oval's color, position, and size parameters to be changed.
The <TT>repaint()</TT> method results in the <TT>paint()</TT>
method being reinvoked to redraw an object-in this case, the <TT>OvalApp</TT>
window. You should never invoke <TT>paint()</TT> directly-it is
under the control of the native windows implementation. Always
access it by invoking <TT>repaint()</TT>.
<P>
When the Quit button is clicked, the <TT>OvalApp</TT> program
terminates in the same manner as when the <TT>WINDOW_DESTROY</TT>
event occurs.
<P>
The <TT>Oval</TT> class is used to randomly generate ovals of
different colors, sizes, and positions and display them in the
<TT>OvalApp</TT> window. It defines a number of variables that
specify these parameters. The <TT>maxWidth</TT> and <TT>maxHeight</TT>
variables store the dimensions of the application window. The
<TT>width</TT> and <TT>height</TT> parameters store the actual
width and height of an <TT>Oval</TT> object. The <TT>x</TT> and
<TT>y</TT> parameters identify its position within the application
window. The <TT>color</TT> parameter identifies the color in which
the oval is to be drawn. The static <TT>r</TT> variable is an
object of class <TT>Random</TT> that is used to generate random
numbers that determine the oval's characteristics.
<P>
The <TT>Oval</TT> constructor explicitly calls the default constructor
call statement, sets the <TT>maxWidth</TT> and <TT>maxHeight</TT>
variables, and invokes its <TT>update()</TT> method to randomly
generate the values of the rest of the variables defined by the
<TT>Oval</TT> class.
<P>
The <TT>update()</TT> method sets the upper-left corner of the
oval to a random value between (0,0) and (<TT>maxWidth</TT>=100,<TT>maxHeight</TT>=100).
This keeps the oval from scrunching up against the window's borders.
The width and height of the rectangle are set to one-third of
the distance between the upper-left corner of the rectangle and
the lower-right corner of the application window.
<P>
The red, blue, and green color intensities of the rectangle are
randomly generated as values between 0 and 255. In order for the
full range of color values to be displayed, your screen must support
24-bit color in its current screen resolution; otherwise, the
randomly generated color will be approximated by the next closest
color supported by your video card. I rarely set my screen to
24-bit color and usually use 8-bit color to cut down on my video-display
memory requirements.
<P>
The <TT>paint()</TT> method of the <TT>Oval</TT> class uses the
<TT>Graphics</TT> object passed to it by the <TT>OvalApp</TT>
<TT>paint()</TT> method to display the oval. It sets the current
color of the <TT>Graphics</TT> object based on the randomly generated
color stored in the <TT>color</TT> variable. It then invokes the
<TT>fillOval()</TT> method of the <TT>Graphics</TT> class to draw
an oval that is filled with the current color. The <TT>fillOval()</TT>
method takes the upper-left corner of the <TT>Oval</TT> and its
width and height dimensions as parameters.
<H2><A NAME="ATextEditor"><B><FONT SIZE=5 COLOR=#FF0000>A Text
Editor</FONT></B></A></H2>
<P>
Now let's extend your exploration of window applications by developing
a primitive text editor. The <TT>TextEditApp</TT> program illustrates
more window programming constructs. It introduces menus, dialog
boxes, fonts, text processing, and window-based file I/O. It also
builds on the event-handling skills that you've developed so far.
The source code of the <TT>TextEditApp</TT> program is shown in
Listing 18.3.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 18.3. The source code of the </B><TT><B><FONT FACE="Courier New">TextEditApp</FONT></B></TT><B>
program.</B>
<P>
<TT>import java.awt.*;<BR>
<FONT FACE="Courier New">import java.io.*;<BR>
<BR>
public class TextEditApp extends Frame {<BR>
&nbsp;TextArea text;<BR>
&nbsp;MenuBar menuBar;<BR>
&nbsp;FileDialog openFile;<BR>
&nbsp;FileDialog saveFile;<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;TextEditApp app = new TextEditApp();<BR>
&nbsp;}<BR>
&nbsp;public TextEditApp() {<BR>
&nbsp;&nbsp;super(&quot;Text Editor&quot;);<BR>
&nbsp;&nbsp;setup();<BR>
&nbsp;&nbsp;resize(text.minimumSize());<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void setup() {<BR>
&nbsp;&nbsp;setFont(new Font(&quot;System&quot;,Font.PLAIN,12));
<BR>
&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;text = new TextArea(25,80);<BR>
&nbsp;&nbsp;add(&quot;Center&quot;,text);<BR>
&nbsp;&nbsp;setupMenuBar();<BR>
&nbsp;&nbsp;openFile = new FileDialog(this,&quot;Open File&quot;,FileDialog.LOAD);
<BR>
&nbsp;&nbsp;saveFile = new FileDialog(this,&quot;Save File As&quot;,FileDialog.SAVE);
<BR>
&nbsp;}<BR>
&nbsp;void setupMenuBar(){<BR>
&nbsp;&nbsp;menuBar = new MenuBar();<BR>
&nbsp;&nbsp;Menu fileMenu = new Menu(&quot;File&quot;);<BR>
&nbsp;&nbsp;fileMenu.add(new MenuItem(&quot;New&quot;));<BR>
&nbsp;&nbsp;fileMenu.add(new MenuItem(&quot;Open&quot;));<BR>
&nbsp;&nbsp;fileMenu.addSeparator();<BR>
&nbsp;&nbsp;fileMenu.add(new MenuItem(&quot;Save As&quot;));<BR>
&nbsp;&nbsp;fileMenu.addSeparator();<BR>
&nbsp;&nbsp;fileMenu.add(new MenuItem(&quot;Exit&quot;));<BR>
&nbsp;&nbsp;menuBar.add(fileMenu);<BR>
&nbsp;&nbsp;setMenuBar(menuBar);<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.ACTION_EVENT){<BR>
&nbsp;&nbsp;&nbsp;if(event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(&quot;New&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text.setText(&quot;&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;Open&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;openFile.show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String inFile = openFile.getFile();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;readFile(inFile);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;Save As&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;saveFile.show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String outFile = saveFile.getFile();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeFile(outFile);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;Exit&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
&nbsp;public void readFile(String file) {<BR>
&nbsp;&nbsp;DataInputStream inStream;<BR>
&nbsp;&nbsp;try{<BR>
&nbsp;&nbsp;&nbsp;inStream = new DataInputStream(new FileInputStream(file));
<BR>
&nbsp;&nbsp;}catch (IOException ex){<BR>
&nbsp;&nbsp;&nbsp;notifyDialog(&quot;Error opening file&quot;);
<BR>
&nbsp;&nbsp;&nbsp;return;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;try{<BR>
&nbsp;&nbsp;&nbsp;String newText=&quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;String line;<BR>
&nbsp;&nbsp;&nbsp;while((line=inStream.readLine())!=null)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;newText=newText+line+&quot;\n&quot;;<BR>
&nbsp;&nbsp;&nbsp;text.setText(newText);<BR>
&nbsp;&nbsp;&nbsp;inStream.close();<BR>
&nbsp;&nbsp;}catch (IOException ex){<BR>
&nbsp;&nbsp;&nbsp;notifyDialog(&quot;Error reading file&quot;);
<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;public void writeFile(String file) {<BR>
&nbsp;&nbsp;DataOutputStream outStream;<BR>
&nbsp;&nbsp;try{<BR>
&nbsp;&nbsp;&nbsp;outStream = new DataOutputStream(new FileOutputStream(file));
<BR>
&nbsp;&nbsp;}catch (IOException ex){<BR>
&nbsp;&nbsp;&nbsp;notifyDialog(&quot;Error opening file&quot;);
<BR>
&nbsp;&nbsp;&nbsp;return;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;try{<BR>
&nbsp;&nbsp;&nbsp;outStream.writeBytes(text.getText());<BR>
&nbsp;&nbsp;&nbsp;outStream.close();<BR>
&nbsp;&nbsp;}catch (IOException ex){<BR>
&nbsp;&nbsp;&nbsp;notifyDialog(&quot;Error writing file&quot;);
<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;public void notifyDialog(String msg) {<BR>
&nbsp;&nbsp;Notification notification = new Notification(this,msg);
<BR>
&nbsp;&nbsp;notification.show();<BR>
&nbsp;}<BR>
}<BR>
class Notification extends Dialog {<BR>
&nbsp;String msg;<BR>
&nbsp;public Notification(Frame f,String s) {<BR>
&nbsp;&nbsp;super(f,&quot;Notification&quot;,true);<BR>
&nbsp;&nbsp;msg = s;<BR>
&nbsp;}<BR>
&nbsp;public void show() {<BR>
&nbsp;&nbsp;add(&quot;North&quot;,new Label(msg,Label.CENTER));
<BR>
&nbsp;&nbsp;Panel p = new Panel();<BR>
&nbsp;&nbsp;p.add(new Button(&quot;OK&quot;));<BR>
&nbsp;&nbsp;add(&quot;South&quot;,p);<BR>
&nbsp;&nbsp;setBackground(Color.gray);<BR>
&nbsp;&nbsp;resize(160,100);<BR>
&nbsp;&nbsp;super.show();<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;dispose();<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.ACTION_EVENT){<BR>
&nbsp;&nbsp;&nbsp;if(event.target instanceof Button){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(&quot;OK&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT>TextEditApp</TT> program provides quite a bit more functionality
than the other window programs that you've written so far. After
you've compiled it, run the program. It will begin by launching
a blank text-editing window with the Text Editor title, as shown
in <A HREF="f18-8.gif" >Figure 18.8</A>.
<P>
<A HREF="f18-8.gif"><B>Figure 18.8 :</B><I> The <TT>TextEditApp</TT> opening window.</I></A>
<P>
Click in the editor window and begin experimenting with editing
text. Type in whatever text comes to your mind. Experiment with
tabs to see how they work. Try typing past the right margin to
see how the horizontal scrollbars work. Select text with your
cursor and use the keyboard copy, cut, and paste commands. Double-click
on a word to select it, and then type another word over it. Try
typing a few lines to cause the vertical scrollbars to come into
play. Your screen should look somewhat similar to <A HREF="f18-9.gif" >Figure 18.9</A>.
<P>
<A HREF="f18-9.gif"><B>Figure 18.9 :</B><I> Editing text</I></A>
<P>
When you have finished editing the text, check out the File pull-down
menu shown in <A HREF="f18-10.gif" >Figure 18.10</A>. You'll notice
that the File menu supports four commands and contains two separator
lines that help organize these commands.
<P>
<A HREF="f18-10.gif"><B>Figure 18.10 :</B><I> The File pull-down menu</I></A>
<P>
Save your text in the file <TT>test.txt</TT>. A File Save As dialog
box appears to help you save your file. The Windows 95 implementation
of Java displays a dialog box, as shown in <A HREF="f18-11.gif" >Figure 18.11</A>.
If you are using Java on another operating system, the dialog
box will look different.
<P>
<A HREF="f18-11.gif"><B>Figure 18.11 :</B><I> Saving text to a file.</I></A>
<P>
After you have saved your file, select New from the File menu.
A new text-editing buffer is displayed. Having cleared the buffer,
select Open from the File menu and open the <TT>test.txt</TT>
file that you just saved. (<A HREF="f18-12.gif" >See Figure 18.12</A>.)
This file will be read in and loaded into the text-editing buffer.
<P>
<A HREF="f18-12.gif"><B>Figure 18.12 :</B><I> Opening a file.</I></A>
<P>
If this seems like a lot of functionality for two pages of code,
you're right. Java does most of the work for you. You just need
to invoke the correct methods for the <TT>java.awt</TT> API classes.
<P>
Let's explore the <TT>TextEditApp</TT> program to see how it works.
You'll first notice that it imports the classes of the <TT>java.awt</TT>
and <TT>java.io</TT> classes. The <TT>java.awt</TT> package provides
the required window classes, and the <TT>java.io</TT> package
provides needed file I/O classes.
<P>
<TT>TextEditApp</TT> follows the lead of the other window programs
developed earlier in this chapter and subclasses the <TT>Frame</TT>
class. It declares four field variables: <TT>text</TT>, <TT>menuBar</TT>,
<TT>openFile</TT>, and <TT>saveFile</TT>. The text variable is
of class <TT>TextArea</TT>. It holds the object that implements
the functionality of the text-editing buffer. The <TT>menuBar</TT>
variable sets up the File menu. The <TT>openFile</TT> and <TT>saveFile</TT>
variables support the file dialog boxes shown in <A HREF="f18-11.gif" >Figures 18.11</A>
and <A HREF="f18-12.gif" >18.12</A>.
<P>
The <TT>main()</TT> method simply creates an object of <TT>TextEditApp</TT>.
The <TT>TextEditApp</TT> constructor sets the window title using
the constructor of the <TT>Frame</TT> class and then invokes its
<TT>setup()</TT> method to set up all the objects in the <TT>TextEditApp</TT>
window. The <TT>resize()</TT> method is called to size the application
window based on the minimum size required to implement the <TT>TextArea</TT>
object assigned to <TT>text</TT>. The <TT>pack()</TT> and <TT>show()</TT>
methods complete the <TT>TextEditApp</TT> window setup and display.
<P>
The <TT>setup()</TT> method sets the font to be used in the <TT>TextArea</TT>
object, changes the window's background color, and then sets up
the <TT>TextArea</TT> object, the menu bar, and the file dialog
boxes. The <TT>setFont()</TT> method sets the current font to
a newly constructed font. It is inherited from the <TT>Component</TT>
class. The <TT>Font</TT> class constructor used to create the
new font uses the font name (<TT>System</TT>), text type (<TT>PLAIN</TT>),
and point size (<TT>12</TT>) of the font as parameters. The <TT>Font</TT>
class defines a number of font parameters that can be used in
constructing new font variations.
<P>
The <TT>setBackground()</TT> method sets the background color
to white. It is inherited from the <TT>Component</TT> class. The
<TT>Color</TT> class provides a number of predefined color constants.
The text variable is assigned an object of class <TT>TextArea</TT>
that is at least 25 rows by 80 columns. This object implements
most of the text-editing capabilities of <TT>TextEditApp</TT>.
It is then added to the center of the <TT>TextEditApp</TT> window.
The <TT>setupMenuBar()</TT> method is called to set up the File
menu.
<P>
The <TT>openFile</TT> and <TT>saveFile</TT> <TT>FileDialog</TT>
variables are assigned newly created <TT>FileDialog</TT> objects.
The <TT>FileDialog</TT> constructor takes three arguments. The
first is the window that &quot;owns&quot; the dialog box. This
is the window to which the file dialog box is attached. The window
is attached to the <TT>TextEditApp</TT> object created by the
<TT>main()</TT> method, so the <TT>this</TT> argument is supplied
to identify the current <TT>TextEditApp</TT> object. The second
parameter is the text string to be displayed at the top of the
dialog box. Refer to <A HREF="f18-11.gif" >Figures 18.11</A> and
<A HREF="f18-12.gif" >18.12</A> to see how the text string is
displayed. The third parameter is either the <TT>FileDialog.LOAD</TT>
or the <TT>FileDialog.SAVE</TT> constant, indicating whether a
file is to be loaded from disk or saved to disk.
<P>
The <TT>setupMenuBar()</TT> method shows how menu bars are created
and added to a window. The <TT>menuBar</TT> variable is assigned
an object of class <TT>MenuBar</TT>. A <TT>Menu</TT> object is
created with the <TT>File</TT> label and assigned to the <TT>fileMenu</TT>
variable. Menu items and separators are then added to the menu.
A <TT>Menu</TT> object represents a single pull-down menu. A <TT>MenuItem</TT>
object is a pull-down menu selection. A <TT>MenuBar</TT> object
is a collection of <TT>Menu</TT> objects that is attached to a
window.
<P>
The <TT>MenuItem</TT> objects are assigned a label when they are
created. They are added to the <TT>fileMenu</TT> in a top-down
fashion. The <TT>addSeparator()</TT> method is used to add a separator
line to a menu. Refer to <A HREF="f18-10.gif" >Figure 18.10</A>
to see how the resulting File menu is displayed. The <TT>fileMenu</TT>
is added to the <TT>menuBar</TT> object using the <TT>add()</TT>
method of the <TT>MenuBar</TT> class. The resulting menu bar is
added to the <TT>TextEditApp</TT> window using the <TT>setMenuBar()</TT>
method inherited from the <TT>Frame</TT> class.
<P>
At this point you might have noticed that the <TT>TextEditApp</TT>
class has no <TT>paint()</TT> method. The <TT>TextArea</TT> object
takes care of drawing itself and does not require an external
<TT>paint()</TT> method. <TT>TextArea</TT> is a remarkably self-contained
and easy-to-use class. Without <TT>TextArea</TT>, implementing
<TT>TextEditApp</TT> would be considerably more difficult.
<P>
The <TT>handleEvent()</TT> method handles more events than in
previous examples. It handles the <TT>WINDOW_DESTROY</TT> event
in the usual manner. This editor is just a prototype-a complete
text editor would prompt the user to save any changes before terminating
the application. All other events processed are of type <TT>ACTION_EVENT</TT>
and have as their target objects of class <TT>MenuItem</TT>. In
other words, these events process selections from the File menu.
<TT>MenuItem</TT> objects are distinguished by their labels as
supplied to the <TT>arg</TT> variable of an event.
<P>
The handling of the New menu item invokes the <TT>setText()</TT>
method of the <TT>TextArea</TT> class to delete all text in the
<TT>text</TT> variable. The handling of the <TT>Open</TT> menu
item invokes the <TT>show()</TT> method for the <TT>openFile</TT>
<TT>FileDialog</TT>, causing the dialog box to be displayed. The
<TT>getFile()</TT> method is invoked to get the name of the file
selected for opening by the user. The returned string is then
passed to the <TT>readFile()</TT> method of <TT>TextEditApp</TT>.
The handling of the Save As menu item is similar to that of the
Open menu item. The <TT>saveFile</TT> <TT>FileDialog</TT> is displayed.
A filename is returned and then passed to the <TT>writeFile()</TT>
method of the <TT>TextEditApp</TT> class. The Exit menu item is
handled in the same way as the <TT>WINDOW_DESTROY</TT> event.
Again, a complete editor would prompt the user to save changes
before exiting.
<P>
The <TT>readFile()</TT> method reads the file whose name was retrieved
via the <TT>openFile</TT> <TT>FileDialog</TT>. It first opens
the file by creating a new <TT>FileInputStream</TT> object using
the filename and then filtering this stream as a <TT>DataInputStream</TT>
object. The resulting input stream is then assigned to the <TT>inStream</TT>
variable. The <TT>try</TT> statement has a <TT>catch</TT> clause
that checks for the occurrence of an <TT>IOException</TT>. If
an exception occurs, the <TT>notifyDialog</TT> is used to warn
the user. It displays a dialog box as shown in <A HREF="f18-13.gif" >Figure 18.13</A>.
You can cause this dialog box to be generated by trying to open
a non-existent file. Try it!
<P>
<A HREF="f18-13.gif"><B>Figure 18.13 :</B><I> The Notification dialog box.</I></A>
<P>
After the file has been opened, its text is read in a line at
a time and appended to the <TT>newText</TT> variable. This results
in the input being placed in one long string. The <TT>setText()</TT>
method of the <TT>TextArea</TT> class is used to move the text
into the <TT>TextArea</TT> object assigned to the text variable.
Any I/O errors occurring while the file is being read result in
the display of a notification dialog box with the <TT>Error reading
file</TT> message.
<P>
The <TT>writeFile()</TT> method operates in a similar but reverse
manner than the <TT>readFile()</TT> method. It uses the filename
retrieved via the <TT>saveFile</TT> <TT>FileDialog</TT> to create
a <TT>FileOutputStream</TT> object. It then filters this stream
as a <TT>DataOutputStream</TT> and assigns it to the <TT>outStream</TT>
variable. If any errors occur in the creation of these streams,
a dialog box is displayed with the message <TT>Error opening file</TT>.
<P>
After opening the file, the <TT>writeBytes()</TT> method of the
<TT>DataOutputStream</TT> class is invoked to write the data stored
in the <TT>TextArea</TT> object assigned to the <TT>text</TT>
variable to the output stream. The <TT>close()</TT> method is
then invoked to close the output stream. Any write errors result
in the display of an error-notification dialog box.
<P>
The <TT>notifyDialog()</TT> method supports the generation and
display of dialog boxes by creating new instances of the <TT>Notification</TT>
class and passing them the error message. It then invokes their
<TT>show()</TT> method to display them.
<P>
The <TT>Notification</TT> class actually implements the dialog
boxes that are displayed when an error occurs by extending the
<TT>Dialog</TT> class. The <TT>Dialog</TT> class, like the <TT>Frame</TT>
class, extends the <TT>Window</TT> class. It provides a different
set of methods to display dialog boxes as opposed to main application
windows. It has one variable, <TT>msg</TT>, that stores the message
to be displayed in the dialog box. Its constructor takes two arguments:
the application window object to which it is attached and the
message to be displayed. It invokes the <TT>Dialog</TT> class
constructor using the superclass constructor call statement and
passes it the <TT>Frame</TT> object, the string <TT>&quot;Notification&quot;</TT>
to be used as the title of the dialog box, and the <TT>true</TT>
<TT>boolean</TT> value, which determines whether the dialog box
will be modal. A <I>modal</I> dialog box is one that must be closed
before the user can return to the main application window. (Java
currently does not implement this blocking feature of modal dialog
boxes.) The constructor then saves the error message argument
in the <TT>msg</TT> variable.
<P>
The <TT>show()</TT> method of the <TT>Notification</TT> class
causes the dialog box to be displayed. It first creates an object
of class <TT>Label</TT> with the contents of the <TT>msg</TT>
variable being the text assigned to the <TT>Label</TT> object.
The <TT>Label.CENTER</TT> constant is used to center the text
in the <TT>Label</TT> object. The new label is then added to the
<FONT SIZE=2>No</FONT>rth end of the dialog box. <TT>Dialog</TT>
objects, like <TT>Frame</TT> objects, use a <TT>BorderLayout</TT>
object by default. A <TT>Panel</TT> object is then created, and
the OK button is created and added to the panel. The panel is
added to the South end of the dialog box. The single button was
placed in the panel to cause the button into be displayed in its
default dimensions. Instead of the button being stretched to fit
the dialog box, the panel in which the button resides is stretched.
To see this, try directly inserting the button to the dialog box
without using a panel. The background color of the dialog box
is set to gray using the <TT>setBackground()</TT> method inherited
from the <TT>Component</TT> class and the <TT>Color</TT> class
constants. The window is resized to 160<FONT FACE="Symbol">&#165;</FONT>100
pixels and then displayed using the <TT>show()</TT> method of
the <TT>Dialog</TT> class. The <TT>super</TT> keyword is used
to indicate that the <TT>show()</TT> method of the superclass
(<TT>Dialog</TT>) should be used instead of the <TT>show()</TT>
method of the current class (<TT>Notification</TT>).
<P>
The <FONT SIZE=2>No</FONT><TT>tification</TT> class handles its
own events by overriding the <TT>handleEvent()</TT> method. The
<TT>WINDOW_DESTROY</TT> event is generated for a dialog box when
the user tries to directly close the dialog box without using
any of the dialog box buttons. This event is different from the
event generated for the main application window. The <FONT SIZE=2>No</FONT><TT>tification</TT>
event handler handles the <TT>WINDOW_DESTROY</TT> event by invoking
the <TT>dispose()</TT> method inherited from the <TT>Window</TT>
class. The <TT>dispose()</TT> method causes the dialog window
to be closed and its resources to be returned to the system. The
<TT>handleEvent()</TT> method handles the OK button click by looking
for an event with an <TT>id</TT> set to <TT>ACTION_EVENT</TT>,
checking its target to make sure that it is an instance of the
<TT>Button</TT> class and checking its <TT>arg</TT> variable to
make sure that it is the OK button. It then invokes the <TT>dispose()</TT>
method to close the dialog box.
<H2><A NAME="Summary"><B><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></B></A>
</H2>
<P>
This chapter introduces you to window programming by way of several
sample programs that illustrate the classes and methods used to
implement simple window applications. You should now be comfortable
with analyzing window-based programs. Subsequent chapters fill
in the details of the classes and methods introduced here. They
will help you to become proficient in developing your own window
programs. <A HREF="ch19.htm" >Chapter 19</A> lays the framework
for developing window programs by expanding on the basics introduced
here.
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



