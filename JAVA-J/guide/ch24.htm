<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META>
<H1><FONT COLOR=#FF0000>Chapter 24</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Scrollbars</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#HowScrollbarsWork" >How Scrollbars Work</A>
<LI><A HREF="#UsingScrollbars" >Using Scrollbars</A>
<LI><A HREF="#ScrollingText" >Scrolling Text</A>
<UL>
<LI><A HREF="#TheTextScrollAppProgram" >The TextScrollApp Program</A>
</UL>
<LI><A HREF="#ScrollingGraphics" >Scrolling Graphics</A>
<UL>
<LI><A HREF="#TheImageScrollAppProgram" >The ImageScrollApp Program</A>
</UL>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
This chapter is dedicated to explaining the use of the <TT><FONT FACE="Courier">Scrollbar</FONT></TT>
class. It describes the methods provided by this class and shows
how to use vertical and horizontal scrollbars to scroll text and
graphics displayed in a window. The event handling supported by
scrollbars is also explained. When you finish this chapter, you
will be able to effectively use scrollbars in your Java window
programs.
<H2><A NAME="HowScrollbarsWork"><FONT SIZE=5 COLOR=#FF0000>How
Scrollbars Work</FONT></A></H2>
<P>
Scrollbars are used to scroll through an object contained in a
window that is too large to be completely displayed within the
window. Vertical scrollbars are used to scroll up and down from
the beginning of the object to its end. Horizontal scrollbars
are used to scroll right and left between the right and left sides
of the object. Horizontal and vertical scrollbars are implemented
in the same fashion. The only differences between them are their
placement around the object to be scrolled and the direction in
which they move the scrolled object through the window.
<P>
Users interact with scrollbars in three ways. By clicking on the
arrows at the end of the scrollbars, they move the scrolled object
one scrollable unit in the opposite direction of the arrow. This
causes the window to appear as though it has moved over the object
in the direction of the arrow.<BR>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=558>
<BLOCKQUOTE>
A <I>scrollable unit</I> is defined by the application program. Vertical and horizontal units differ. Most text-processing applications define a vertical unit as a single line of text and a horizontal unit as a percentage of the horizontal screen size. Graphical applications define vertical and horizontal units as a percentage of the visible screen size.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
Scrollbars contain tabs that identify the relative location of
the object being viewed with respect to the total size of the
object. By clicking between the tab and the end of a scrollbar,
the view of the object is updated in a one-page increment in the
direction of the arrow. This is the second way that scrollbars
can be used. The definition of a <I>page</I> is also application
specific. Vertical scrollbars usually define a page as the vertical
size of the viewing window or some percentage of this size. Horizontal
scrollbars tend to operate in the same manner. A horizontal page
is defined as a fixed percentage of the horizontal viewing area.
<P>
The third way that a user can interact with a scrollbar is to
drag the scrollbar's tab to a specific location within the scrollbar.
When the user drags the tab of a vertical scrollbar, he moves
the object being viewed up or down in the viewing window. When
the user drags the tab of a horizontal scrollbar, he moves the
object being viewed left or right in the viewing window.
<H2><A NAME="UsingScrollbars"><FONT SIZE=5 COLOR=#FF0000>Using
Scrollbars</FONT></A></H2>
<P>
When you use scrollbars in your Java programs, you will most likely
be using them to scroll through a <TT><FONT FACE="Courier">Graphics</FONT></TT>
object that is associated with a <TT><FONT FACE="Courier">Canvas</FONT></TT>
object or the main application window. You create and place scrollbars
in your window in the same manner as any other window component.
Their position and size within the window are determined by the
layout associated with the window.
<P>
Scrollbars are created using the <TT><FONT FACE="Courier">Scrollbar()</FONT></TT>
constructor. Three forms of this constructor are provided. The
default constructor takes no parameters and is not particularly
useful unless you want to create a <TT><FONT FACE="Courier">Scrollbar</FONT></TT>
object and then specify its orientation and use later in your
program. The second constructor allows the orientation of a <TT><FONT FACE="Courier">Scrollbar</FONT></TT>
object to be specified. The third <TT><FONT FACE="Courier">Scrollbar()</FONT></TT>
constructor uses the five parameters that are needed to create
a working scrollbar: <TT><FONT FACE="Courier">orientation</FONT></TT>,
<TT><FONT FACE="Courier">value</FONT></TT>, <TT><FONT FACE="Courier">visible</FONT></TT>,
<TT><FONT FACE="Courier">minimum</FONT></TT>, and <TT><FONT FACE="Courier">maximum</FONT></TT>.
<P>
The <TT><FONT FACE="Courier">orientation</FONT></TT> of a scrollbar
is specified by the <TT><FONT FACE="Courier">VERTICAL</FONT></TT>
and <TT><FONT FACE="Courier">HORIZONTAL</FONT></TT> constants
defined by the <TT><FONT FACE="Courier">Scrollbar</FONT></TT>
class. The <TT><FONT FACE="Courier">minimum</FONT></TT> and <TT><FONT FACE="Courier">maximum</FONT></TT>
parameters specify the minimum and maximum values associated with
the scrollbar's position. These values should map to the object
being scrolled. For example, if you are scrolling a 1000-line
text object, appropriate minimum and maximum values for a vertical
scrollbar would be <TT><FONT FACE="Courier">0</FONT></TT> and
<TT><FONT FACE="Courier">999</FONT></TT>. Horizontal values could
be determined using the maximum width of the text to be scrolled
(in pixels).
<P>
The <TT><FONT FACE="Courier">value</FONT></TT> parameter identifies
the starting value associated with the scrollbar. The <TT><FONT FACE="Courier">value</FONT></TT>
parameter is usually set to the <TT><FONT FACE="Courier">minimum</FONT></TT>
value of the scrollbar. However, suppose you wanted to initiate
the display of an object with its center displayed on the screen.
You would then set the scrollbar's <TT><FONT FACE="Courier">value</FONT></TT>
parameter to the average of its <TT><FONT FACE="Courier">minimum</FONT></TT>
and <TT><FONT FACE="Courier">maximum</FONT></TT> values.
<P>
The <TT><FONT FACE="Courier">visible</FONT></TT> parameter is
used to specify the size of the viewable area of the object being
scrolled. For example, if you are scrolling a 1000-line text object,
and the viewable area of the window is 25 lines long, you should
set the <TT><FONT FACE="Courier">visible</FONT></TT> variable
to <TT><FONT FACE="Courier">25</FONT></TT>.
<P>
The <TT><FONT FACE="Courier">Scrollbar</FONT></TT> class provides
several methods for getting and setting the parameters of a <TT><FONT FACE="Courier">Scrollbar</FONT></TT>
object. The <TT><FONT FACE="Courier">getOrientation()</FONT></TT>,
<TT><FONT FACE="Courier">getValue()</FONT></TT>, <TT><FONT FACE="Courier">getVisible()</FONT></TT>,
<TT><FONT FACE="Courier">getMinimum()</FONT></TT>, and <TT><FONT FACE="Courier">getMaximum()</FONT></TT>
methods retrieve the parameter values discussed so far. The <TT><FONT FACE="Courier">getValue()</FONT></TT>
method is used to determine to what position the user has scrolled.
<P>
The <TT><FONT FACE="Courier">setLineIncrement()</FONT></TT> and
<TT><FONT FACE="Courier">setPageIncrement()</FONT></TT> methods
are used to specify the size of a scrollable unit and page relative
to the minimum and maximum values associated with a scrollbar.
For example, when scrolling text, you can set the line increment
of a vertical scrollbar to <TT><FONT FACE="Courier">1</FONT></TT>
so that only one line of text is vertically scrolled. You can
set the page increment to <TT><FONT FACE="Courier">10</FONT></TT>
to allow 10 lines of text to be scrolled when the user clicks
between the tab and arrows of a scrollbar. The <TT><FONT FACE="Courier">getLineIncrement()</FONT></TT>
and <TT><FONT FACE="Courier">getPageIncrement()</FONT></TT> methods
provide access to the current line- and page-increment values.
<P>
The <TT><FONT FACE="Courier">setValue()</FONT></TT> method allows
you to directly set the current position of a scrollbar. The <TT><FONT FACE="Courier">setValues()</FONT></TT>
method allows you to specify a scrollbar's <TT><FONT FACE="Courier">value</FONT></TT>,
<TT><FONT FACE="Courier">visible</FONT></TT>, <TT><FONT FACE="Courier">minimum</FONT></TT>,
and <TT><FONT FACE="Courier">maximum</FONT></TT> parameters.
<P>
In order to respond to user scrollbar operations and implement
scrolling of the object associated with a scrollbar, you must
handle the events generated by user manipulation of the scrollbar.
These events are the <TT><FONT FACE="Courier">SCROLL_LINE_DOWN</FONT></TT>,
<TT><FONT FACE="Courier">SCROLL_LINE_UP</FONT></TT>, <TT><FONT FACE="Courier">SCROLL_PAGE_DOWN</FONT></TT>,
<TT><FONT FACE="Courier">SCROLL_PAGE_UP</FONT></TT>, and <TT><FONT FACE="Courier">SCROLL_ABSOLUTE</FONT></TT>
events.
<P>
The <TT><FONT FACE="Courier">SCROLL_LINE_UP</FONT></TT> event
is generated when the user clicks on the up arrow of a vertical
scrollbar or on the left arrow of a horizontal scrollbar. The
<TT><FONT FACE="Courier">SCROLL_LINE_DOWN</FONT></TT> event is
generated when the user clicks on the down arrow of a vertical
scrollbar or the right arrow of a horizontal scrollbar. The <TT><FONT FACE="Courier">SCROLL_PAGE_UP</FONT></TT>
event is generated when the user clicks between the up arrow of
a vertical scrollbar and its tab. It is also generated when a
user clicks between the left arrow of a horizontal scrollbar and
its tab. Similarly, the <TT><FONT FACE="Courier">SCROLL_PAGE_DOWN</FONT></TT>
event is generated when the user clicks between the down arrow
of a vertical scrollbar and its tab, or between the right arrow
of a horizontal scrollbar and its tab. These events pass an argument
that specifies the number of lines that are scrolled.
<P>
The <TT><FONT FACE="Courier">SCROLL_ABSOLUTE</FONT></TT> event
is generated when a user drags the tabs of a scrollbar to a new
position. This event passes an argument that identifies the new
scrollbar position.
<H2><A NAME="ScrollingText"><FONT SIZE=5 COLOR=#FF0000>Scrolling
Text</FONT></A></H2>
<P>
In order to handle scrollbar events and implement scrolling, you
must repaint the area of the scrollable window based on the mapping
between the object being scrolled and the vertical and horizontal
scrollbar positions. If you are scrolling text, you are most likely
displaying the text on the <TT><FONT FACE="Courier">Graphics</FONT></TT>
object associated with a <TT><FONT FACE="Courier">Canvas</FONT></TT>
object or the main application window. The <TT><FONT FACE="Courier">TextArea</FONT></TT>
object implements its own scrollbars and does not require any
additional event handling.
<P>
When scrolling text vertically, you should adjust the minimum
and maximum values of the vertical scrollbar based on the number
of lines of text that are contained in the object being scrolled.
In this way, when the user moves the scrollbar's tab to its topmost
position, the beginning of the text is displayed, and when the
user moves the tab to the bottom of the scrollbar, the end of
the text is displayed.
<P>
When scrolling text horizontally, you should set the minimum and
maximum values of the horizontal scrollbar based on the maximum
width of the text being displayed.
<H3><A NAME="TheTextScrollAppProgram">The <TT><FONT SIZE=4 FACE="Courier">TextScrollApp</FONT></TT><FONT SIZE=4>
Program</FONT></A></H3>
<P>
The <TT><FONT FACE="Courier">TextScrollApp</FONT></TT> program
shows how scrollbars can be used to scroll text that is drawn
on a <TT><FONT FACE="Courier">Graphics</FONT></TT> object. This
program provides the capability to read in a text file and display
it on the screen using the default 12-point plain font. It allows
the text file to be scrolled vertically and horizontally through
the application window. The source code of the <TT><FONT FACE="Courier">TextScrollApp</FONT></TT>
program is shown in Listing 24.1.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 24.1. The source code of the </B><TT><B><FONT FACE="Courier">TextScrollApp</FONT></B></TT><B>
program.</B><P>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
import java.io.*;<BR>
import java.util.Vector;<BR>
import jdg.ch20.*;<BR>
<BR>
public class TextScrollApp extends Frame {<BR>
&nbsp;Object menuItems[][] = {{&quot;File&quot;,&quot;Open&quot;,&quot;-&quot;,&quot;Exit&quot;}};
<BR>
&nbsp;MyMenuBar menuBar = new MyMenuBar(menuItems);<BR>
&nbsp;FileDialog openFile = new FileDialog(this,&quot;Open File&quot;,FileDialog.LOAD);
<BR>
&nbsp;Font defaultFont = new Font(&quot;default&quot;,Font.PLAIN,12);
<BR>
&nbsp;int screenWidth = 400;<BR>
&nbsp;int screenHeight = 400;<BR>
&nbsp;Vector text = new Vector();<BR>
&nbsp;int topLine;<BR>
&nbsp;Toolkit toolkit;<BR>
&nbsp;FontMetrics fm;<BR>
&nbsp;int baseline;<BR>
&nbsp;int lineSize;<BR>
&nbsp;int maxWidth;<BR>
&nbsp;Scrollbar hbar, vbar;<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;TextScrollApp app = new TextScrollApp();<BR>
&nbsp;}<BR>
&nbsp;&nbsp;public TextScrollApp() {<BR>
&nbsp;&nbsp;super(&quot;TextScrollApp&quot;);<BR>
&nbsp;&nbsp;setup();<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(screenWidth,screenHeight);<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void setup() {<BR>
&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;setMenuBar(menuBar);<BR>
&nbsp;&nbsp;setupFontData();<BR>
&nbsp;&nbsp;setupScrollbars();<BR>
&nbsp;}<BR>
&nbsp;void setupFontData() {<BR>
&nbsp;&nbsp;setFont(defaultFont);<BR>
&nbsp;&nbsp;toolkit = getToolkit();<BR>
&nbsp;&nbsp;fm = toolkit.getFontMetrics(defaultFont);<BR>
&nbsp;&nbsp;baseline = fm.getLeading() + fm.getAscent();<BR>
&nbsp;&nbsp;lineSize = fm.getHeight();<BR>
&nbsp;}<BR>
&nbsp;void setupScrollbars() {<BR>
&nbsp;&nbsp;hbar = new Scrollbar(Scrollbar.HORIZONTAL,0,0,0,0);
<BR>
&nbsp;&nbsp;vbar = new Scrollbar(Scrollbar.VERTICAL,0,0,0,0);
<BR>
&nbsp;&nbsp;hbar.setBackground(Color.lightGray);<BR>
&nbsp;&nbsp;vbar.setBackground(Color.lightGray);<BR>
&nbsp;&nbsp;add(&quot;South&quot;,hbar);<BR>
&nbsp;&nbsp;add(&quot;East&quot;,vbar);<BR>
&nbsp;}<BR>
&nbsp;void resetScrollbars() {<BR>
&nbsp;&nbsp;hbar.setValues(0,10,0,maxWidth+5);<BR>
&nbsp;&nbsp;vbar.setValues(0,10,0,text.size()+5);<BR>
&nbsp;}<BR>
&nbsp;public void readFile(String file) {<BR>
&nbsp;&nbsp;DataInputStream inStream;<BR>
&nbsp;&nbsp;try{<BR>
&nbsp;&nbsp;&nbsp;inStream = new DataInputStream(new FileInputStream(file));
<BR>
&nbsp;&nbsp;}catch (IOException ex){<BR>
&nbsp;&nbsp;&nbsp;notifyUser(&quot;Error opening file&quot;);
<BR>
&nbsp;&nbsp;&nbsp;return;<BR>
&nbsp;}<BR>
&nbsp;try{<BR>
&nbsp;&nbsp;Vector newText = new Vector();<BR>
&nbsp;&nbsp;String line;<BR>
&nbsp;&nbsp;maxWidth = 0;<BR>
&nbsp;&nbsp;while((line=inStream.readLine())!=null) {<BR>
&nbsp;&nbsp;&nbsp;int lineWidth = fm.stringWidth(line);<BR>
&nbsp;&nbsp;&nbsp;if(lineWidth &gt; maxWidth) maxWidth = lineWidth;
<BR>
&nbsp;&nbsp;&nbsp;newText.addElement(line);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;text = newText;<BR>
&nbsp;&nbsp;topLine = 0;<BR>
&nbsp;&nbsp;inStream.close();<BR>
&nbsp;&nbsp;resetScrollbars();<BR>
&nbsp;&nbsp;repaint();<BR>
&nbsp;}catch (IOException ex){<BR>
&nbsp;&nbsp;notifyUser(&quot;Error reading file&quot;);<BR>
&nbsp;}<BR>
}<BR>
public void notifyUser(String s) {<BR>
&nbsp;&nbsp;String text[] = {s};<BR>
&nbsp;&nbsp;String buttons[] = {&quot;OK&quot;};<BR>
&nbsp;&nbsp;new Notification(this,&quot;Error&quot;,true,text,buttons);
<BR>
&nbsp;}<BR>
&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;topLine = vbar.getValue();<BR>
&nbsp;&nbsp;int xOffset = hbar.getValue();<BR>
&nbsp;&nbsp;int numLines = text.size();<BR>
&nbsp;&nbsp;screenHeight = size().height;<BR>
&nbsp;&nbsp;int y = baseline;<BR>
&nbsp;&nbsp;for(int i = topLine;(i &lt; numLines) &amp;&amp; (y
&lt; screenHeight + lineSize);++i) {<BR>
&nbsp;&nbsp;&nbsp;g.drawString((String) text.elementAt(i),-xOffset,y);
<BR>
&nbsp;&nbsp;&nbsp;y += lineSize;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.ACTION_EVENT){<BR>
&nbsp;&nbsp;&nbsp;String s = (String) event.arg;<BR>
&nbsp;&nbsp;&nbsp;if(event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(&quot;Exit&quot;.equals(s)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;Open&quot;.equals(s)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;openFile.show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(openFile.getFile() != null) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String inFile = openFile.getFile();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;readFile(inFile);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}else if(event.id == Event.SCROLL_LINE_UP || <BR>
&nbsp;&nbsp;&nbsp;event.id == Event.SCROLL_LINE_DOWN ||<BR>
&nbsp;&nbsp;&nbsp;event.id == Event.SCROLL_PAGE_UP || <BR>
&nbsp;&nbsp;&nbsp;event.id == Event.SCROLL_PAGE_DOWN ||<BR>
&nbsp;&nbsp;&nbsp;event.id == Event.SCROLL_ABSOLUTE) repaint();
<BR>
&nbsp;&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
}<BR>
class Notification extends MessageDialog {<BR>
&nbsp;public Notification(Frame parent,String title,boolean modal,
<BR>
&nbsp;&nbsp;&nbsp;String text[],String buttons[]) {<BR>
&nbsp;&nbsp;super(parent,title,modal,text,buttons);<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;dispose();<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.ACTION_EVENT &amp;&amp; event.target
instanceof Button){<BR>
&nbsp;&nbsp;&nbsp;dispose();<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
When you run the <TT><FONT FACE="Courier">TextScrollApp</FONT></TT>
program, you will see the opening window shown in <A HREF="f24-1.gif" >Figure 24.1</A>.
Notice that vertical and horizontal scrollbars are added to the
application window.
<P>
<A HREF="f24-1.gif"><B>Figure 24.1 : </B><I>The <TT>TextScrollApp</TT> opening window.</I></A>
<P>
Click on the File pull-down menu and select the Open menu item.
An Open File dialog box is displayed. Open the <TT><FONT FACE="Courier">TextScrollApp.java</FONT></TT>
file. The window is updated, as shown in <A HREF="f24-2.gif" >Figure 24.2</A>.
<P>
<A HREF="f24-2.gif"><B>Figure 24.2 : </B><I>Displaying <TT>TextScrollApp.java</TT>.</I></A>
<P>
Use the horizontal scrollbar to scroll the view of the text to
the right. (<A HREF="f24-3.gif" >See Figure 24.3</A>.)
<P>
<A HREF="f24-3.gif"><B>Figure 24.3 : </B><I>Scrolling horizontally.</I></A>
<P>
Scroll the text all the way back to the left and then click once
on the down arrow of the vertical scrollbar. This causes the window
to move the view of the text down one line. (<A HREF="f24-4.gif" >See Figure 24.4</A>.)
<P>
<A HREF="f24-4.gif"><B>Figure 24.4 : </B><I>Scrolling vertically one line.</I></A>
<P>
Click on the vertical scrollbar between the tab and the down arrow
at the bottom of the scrollbar. This results in the view of the
text to be scrolled down 10 lines. (<A HREF="f24-5.gif" >See Figure 24.5</A>.)
<P>
<A HREF="f24-5.gif"><B>Figure 24.5 : </B><I>Scrolling vertically using <TT>SCROLL_PAGE_DOWN</TT>.</I></A>
<P>
Now drag the tab of the vertical scrollbar to the middle of the
scrollbar. The view of the text is scrolled to the middle of the
text file. (<A HREF="f24-6.gif" >See Figure 24.6</A>.)
<P>
<A HREF="f24-6.gif"><B>Figure 24.6 : </B><I>Scrolling vertically with the tab.</I></A>
<P>
Experiment with both the vertical and horizontal scrollbars to
familiarize yourself with their operation before going on to study
the <TT><FONT FACE="Courier">TextScrollApp</FONT></TT> program.
<P>
The <TT><FONT FACE="Courier">TextScrollApp</FONT></TT> program
declares a number of field variables. The <TT><FONT FACE="Courier">menuItems[]</FONT></TT>
array and <TT><FONT FACE="Courier">menuBar</FONT></TT> variable
are used to construct the program's menu bar. The <TT><FONT FACE="Courier">openFile</FONT></TT>
variable implements the dialog box used to load in the text file
to be displayed. The <TT><FONT FACE="Courier">defaultFont</FONT></TT>
variable is used to set the text font to a default 12-point plain
style font. The <TT><FONT FACE="Courier">screenWidth</FONT></TT>
and <TT><FONT FACE="Courier">screenHeight</FONT></TT> variables
are used to specify the dimensions of the application window.
<P>
The <TT><FONT FACE="Courier">text</FONT></TT> variable is declared
as a <TT><FONT FACE="Courier">Vector</FONT></TT> object. It is
used to store the individual lines of text that are read from
the text file. The <TT><FONT FACE="Courier">topLine</FONT></TT>
variable identifies the number of the line that is currently displayed
at the top of the window. The <TT><FONT FACE="Courier">toolkit</FONT></TT>
variable is used to refer to the <TT><FONT FACE="Courier">Toolkit</FONT></TT>
object associated with the application window. The <TT><FONT FACE="Courier">fm</FONT></TT>
variable is used to refer to the <TT><FONT FACE="Courier">FontMetrics</FONT></TT>
object associated with the default font.
<P>
The <TT><FONT FACE="Courier">baseline</FONT></TT> variable is
the vertical offset where the baseline of the first line of text
should be displayed. The <TT><FONT FACE="Courier">lineSize</FONT></TT>
variable refers to the total height of the font being displayed.
The <TT><FONT FACE="Courier">maxWidth</FONT></TT> variable is
calculated when a file is read. It refers to the maximum length
of a text line in pixels. The <TT><FONT FACE="Courier">hbar</FONT></TT>
and <TT><FONT FACE="Courier">vbar</FONT></TT> variables identify
the horizontal and vertical scrollbars that are created and attached
to the main window.
<P>
The <TT><FONT FACE="Courier">setupFontData()</FONT></TT> method
sets the window's font to the default font identified with the
<TT><FONT FACE="Courier">defaultFont</FONT></TT> variable. It
then obtains the <TT><FONT FACE="Courier">Toolkit</FONT></TT>
object associated with the window and uses the <TT><FONT FACE="Courier">getFontMetrics()</FONT></TT>
method of the <TT><FONT FACE="Courier">Toolkit</FONT></TT> to
get the <TT><FONT FACE="Courier">FontMetrics</FONT></TT> object
associated with the default font. This object is assigned to the
<TT><FONT FACE="Courier">fm</FONT></TT> variable. The <TT><FONT FACE="Courier">baseline</FONT></TT>
variable is set to the sum of the leading and ascent of the current
font as returned by the <TT><FONT FACE="Courier">getLeading()</FONT></TT>
and <TT><FONT FACE="Courier">getAscent()</FONT></TT> methods of
the <TT><FONT FACE="Courier">FontMetrics</FONT></TT> class. The
<TT><FONT FACE="Courier">lineSize</FONT></TT> variable is set
to the total height of the font using the <TT><FONT FACE="Courier">getHeight()</FONT></TT>
method of the <TT><FONT FACE="Courier">FontMetrics</FONT></TT>
class.
<P>
The <TT><FONT FACE="Courier">setupScrollbars()</FONT></TT> method
creates and initializes the horizontal and vertical scrollbars.
A horizontal scrollbar is created with all of its parameters set
to zero and is assigned to the <TT><FONT FACE="Courier">hbar</FONT></TT>
variable. A vertical scrollbar is created in the same manner and
is assigned to the <TT><FONT FACE="Courier">vbar</FONT></TT> variable.
The specific parameters associated with these scrollbars are set
when the text file that is to be scrolled is initially loaded.
<P>
The background color of both scrollbars is set to light gray,
and then the scrollbars are added to the main application window.
Using <TT><FONT FACE="Courier">BorderLayout</FONT></TT> simplifies
the positioning of the scrollbars.
<P>
The <TT><FONT FACE="Courier">resetScrollbars()</FONT></TT> method
resets the parameters associated with both scrollbars based on
the text that is loaded from the file. The horizontal scrollbar
assigned to <TT><FONT FACE="Courier">hbar</FONT></TT> is assigned
a minimum value of <TT><FONT FACE="Courier">0</FONT></TT> and
a maximum value of <TT><FONT FACE="Courier">maxWidth + 5</FONT></TT>,
where <TT><FONT FACE="Courier">maxWidth</FONT></TT> is the maximum
width of a text line in pixels. The constant <TT><FONT FACE="Courier">5</FONT></TT>
is added to <TT><FONT FACE="Courier">maxWidth</FONT></TT> to allow
some scrolling to the right of the end of the widest line. The
<TT><FONT FACE="Courier">value</FONT></TT> parameter of the scrollbar
is set to <TT><FONT FACE="Courier">0</FONT></TT> so that the leftmost
end of a text line is initially visible. The <TT><FONT FACE="Courier">visible</FONT></TT>
parameter is set to <TT><FONT FACE="Courier">10</FONT></TT> to
allow horizontal scrolling of 10 pixels at a time.
<P>
The vertical scrollbar assigned to <TT><FONT FACE="Courier">vbar</FONT></TT>
is initialized by setting its maximum parameter to the number
of text lines plus the constant <TT><FONT FACE="Courier">5</FONT></TT>.
The number of text lines is determined by invoking the <TT><FONT FACE="Courier">size()</FONT></TT>
method of the <TT><FONT FACE="Courier">Vector</FONT></TT> class
for the <TT><FONT FACE="Courier">text</FONT></TT> <TT><FONT FACE="Courier">Vector</FONT></TT>
used to hold the text that was loaded from the selected text file.
Specifying the <TT><FONT FACE="Courier">visible</FONT></TT> parameter
to <TT><FONT FACE="Courier">10</FONT></TT> results in 10 lines
being scrolled at a time. Note that the parameters of the horizontal
scrollbar are specified in pixels and those of the vertical scrollbar
are specified in text lines.
<P>
The <TT><FONT FACE="Courier">readFile()</FONT></TT> method is
almost the same as the one used in previous examples. It has been
modified to store each line of text that is read within the vector
that is assigned to the <TT><FONT FACE="Courier">text</FONT></TT>
variable.
<P>
The <TT><FONT FACE="Courier">paint()</FONT></TT> method is used
to display the <TT><FONT FACE="Courier">text</FONT></TT> <TT><FONT FACE="Courier">Vector</FONT></TT>
on the screen. This method is also indirectly invoked in response
to user scrolling actions. The <TT><FONT FACE="Courier">paint()</FONT></TT>
method sets the <TT><FONT FACE="Courier">topLine</FONT></TT> variable
to the value of the vertical scrollbar. It obtains this value
by invoking the <TT><FONT FACE="Courier">getValue()</FONT></TT>
method of the <TT><FONT FACE="Courier">Scrollbar</FONT></TT> class
for <TT><FONT FACE="Courier">vbar</FONT></TT>. It sets the <TT><FONT FACE="Courier">xOffset</FONT></TT>
variable to the value of the horizontal scrollbar. The scrollbar
values are maintained and updated internally by the <TT><FONT FACE="Courier">Scrollbar</FONT></TT>
objects.
<P>
The <TT><FONT FACE="Courier">numLines</FONT></TT> variable is
set to the number of lines of text that are stored in the <TT><FONT FACE="Courier">text</FONT></TT>
<TT><FONT FACE="Courier">Vector</FONT></TT>. The <TT><FONT FACE="Courier">screenHeight</FONT></TT>
variable is recalculated to adjust the text display for any window-resizing
operations that may have occurred.
<P>
The <TT><FONT FACE="Courier">y</FONT></TT> variable is used to
specify the vertical position where each line of text should be
drawn on the <TT><FONT FACE="Courier">Graphics</FONT></TT> object
passed to the <TT><FONT FACE="Courier">g</FONT></TT> parameter
when <TT><FONT FACE="Courier">paint()</FONT></TT> is invoked.
A <TT><FONT FACE="Courier">for</FONT></TT> statement is used to
draw the text. The text drawing begins with the line specified
by the <TT><FONT FACE="Courier">topLine</FONT></TT> variable and
continues until the last line of the text file is displayed or
the vertical display position assigned to the <TT><FONT FACE="Courier">y</FONT></TT>
variable is one line past the end of the screen. The <TT><FONT FACE="Courier">drawString()</FONT></TT>
method of the <TT><FONT FACE="Courier">Graphics</FONT></TT> class
is used to draw the text on the screen. It is invoked with the
text lines stored in the <TT><FONT FACE="Courier">Vector</FONT></TT>
object assigned to the <TT><FONT FACE="Courier">text</FONT></TT>
variable. The <TT><FONT FACE="Courier">elementAt()</FONT></TT>
method of the <TT><FONT FACE="Courier">Vector</FONT></TT> class
is used to retrieve the required line of text. Note that the <TT><FONT FACE="Courier">xOffset</FONT></TT>
variable is passed to the <TT><FONT FACE="Courier">drawString()</FONT></TT>
method as a negative value. This causes text drawing to begin
before the left edge of the display window and enables horizontal
scrolling toward the right to be implemented.
<P>
The <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
handles the <TT><FONT FACE="Courier">SCROLL_LINE_UP</FONT></TT>,
<TT><FONT FACE="Courier">SCROLL_LINE_DOWN</FONT></TT>, <TT><FONT FACE="Courier">SCROLL_PAGE_UP</FONT></TT>,
<TT><FONT FACE="Courier">SCROLL_PAGE_DOWN</FONT></TT>, and <TT><FONT FACE="Courier">SCROLL_ABSOLUTE</FONT></TT>
events by simply invoking the <TT><FONT FACE="Courier">repaint()</FONT></TT>
method to cause the screen to be repainted. The scrollbars maintain
the value of their current positions. These values are used by
the <TT><FONT FACE="Courier">paint()</FONT></TT> method when the
screen is repainted.
<H2><A NAME="ScrollingGraphics"><FONT SIZE=5 COLOR=#FF0000>Scrolling
Graphics</FONT></A></H2>
<P>
The scrolling of graphics is handled in the same way as text.
The only difference between text scrolling and graphics scrolling
is that vertical text scrolling results in an integral number
of lines being scrolled at a time and graphics scrolling does
not. The minimum and maximum values associated with a vertical
text scrollbar are generally set based on the number of lines
to be scrolled. The parameters of the horizontal and vertical
scrollbars associated with graphics applications are set based
on the dimensions of the <TT><FONT FACE="Courier">Graphics</FONT></TT>
object being scrolled and the size of the window in which the
object is being viewed.
<H3><A NAME="TheImageScrollAppProgram">The <TT><FONT SIZE=4 FACE="Courier">ImageScrollApp</FONT></TT><FONT SIZE=4>
Program</FONT></A></H3>
<P>
The <TT><FONT FACE="Courier">ImageScrollApp</FONT></TT> program
shows how scrollbars can be used to scroll objects that are drawn
on a <TT><FONT FACE="Courier">Graphics</FONT></TT> object. This
program upgrades the <TT><FONT FACE="Courier">DrawApp</FONT></TT>
program developed in <A HREF="ch23.htm" >Chapter 23</A>, &quot;The
Canvas,&quot; with the capability to support horizontal and vertical
scrolling. The source code of the <TT><FONT FACE="Courier">ImageScrollApp</FONT></TT>
program is shown in Listing 24.2.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 24.2. The source code of the </B><TT><B><FONT FACE="Courier">ImageScrollApp</FONT></B></TT><B>
program.</B><P>
<TT><FONT FACE="Courier">import java.awt.*;<BR>
import java.lang.Math;<BR>
import java.util.Vector;<BR>
import jdg.ch20.*;<BR>
<BR>
public class ImageScrollApp extends Frame {<BR>
&nbsp;&nbsp;Object menuItems[][] = {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{&quot;File&quot;,&quot;New&quot;,&quot;-&quot;,&quot;Exit&quot;},
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{&quot;Draw&quot;,&quot;+Line&quot;,&quot;-Oval&quot;,&quot;-Rectangle&quot;}
<BR>
&nbsp;&nbsp;};<BR>
&nbsp;&nbsp;MyMenuBar menuBar = new MyMenuBar(menuItems);<BR>
&nbsp;&nbsp;MyCanvas canvas = new MyCanvas(TwoPointObject.LINE);
<BR>
&nbsp;&nbsp;int screenWidth = 400;<BR>
&nbsp;&nbsp;int screenHeight = 400;<BR>
&nbsp;&nbsp;int canvasWidth = 1000;<BR>
&nbsp;&nbsp;int canvasHeight = 1000;<BR>
&nbsp;&nbsp;Scrollbar hbar, vbar;<BR>
&nbsp;&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;ImageScrollApp app = new ImageScrollApp();
<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public ImageScrollApp() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;super(&quot;ImageScrollApp&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setup();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;resize(screenWidth,screenHeight);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;show();<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;void setup() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setMenuBar(menuBar);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setCursor(CROSSHAIR_CURSOR);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;Center&quot;,canvas);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setupScrollbars();<BR>
&nbsp;}<BR>
&nbsp;void setupScrollbars() {<BR>
&nbsp;&nbsp;&nbsp;hbar = new Scrollbar(Scrollbar.HORIZONTAL,0,10,0,canvasWidth);
<BR>
&nbsp;&nbsp;&nbsp;vbar = new Scrollbar(Scrollbar.VERTICAL,0,10,0,canvasHeight);
<BR>
&nbsp;&nbsp;&nbsp;hbar.setBackground(Color.lightGray);<BR>
&nbsp;&nbsp;&nbsp;vbar.setBackground(Color.lightGray);<BR>
&nbsp;&nbsp;&nbsp;add(&quot;South&quot;,hbar);<BR>
&nbsp;&nbsp;&nbsp;add(&quot;East&quot;,vbar);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.GOT_FOCUS &amp;&amp; (event.target
instanceof MyCanvas)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setCursor(CROSSHAIR_CURSOR);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.LOST_FOCUS &amp;&amp; (event.target
instanceof MyCanvas)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setCursor(DEFAULT_CURSOR);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id == Event.SCROLL_LINE_UP || <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event.id == Event.SCROLL_LINE_DOWN
||<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event.id == Event.SCROLL_PAGE_UP
|| <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event.id == Event.SCROLL_PAGE_DOWN
||<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event.id == Event.SCROLL_ABSOLUTE)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas.updateOffsets(hbar.getValue(),vbar.getValue());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else&nbsp;if(event.id==Event.ACTION_EVENT){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(event.target instanceof MenuItem){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String arg = (String)
event.arg;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(processFileMenu(arg))
return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(processDrawMenu(arg))
return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;return false;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public boolean processFileMenu(String s) {<BR>
&nbsp;&nbsp;&nbsp;if(&quot;New&quot;.equals(s)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas.clear();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}else if(&quot;Exit&quot;.equals(s)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;return false;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public boolean processDrawMenu(String s) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;MyMenu menu = menuBar.getMenu(&quot;Draw&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;CheckboxMenuItem lineItem = (CheckboxMenuItem)
menu.getItem(&quot;Line&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;CheckboxMenuItem ovalItem = (CheckboxMenuItem)
menu.getItem(&quot;Oval&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;CheckboxMenuItem rectangleItem = <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(CheckboxMenuItem) menu.getItem(&quot;Rectangle&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(&quot;Line&quot;.equals(s)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas.setTool(TwoPointObject.LINE);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineItem.setState(true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ovalItem.setState(false);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rectangleItem.setState(false);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}else if(&quot;Oval&quot;.equals(s)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas.setTool(TwoPointObject.OVAL);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineItem.setState(false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ovalItem.setState(true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rectangleItem.setState(false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}else if(&quot;Rectangle&quot;.equals(s)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas.setTool(TwoPointObject.RECTANGLE);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineItem.setState(false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ovalItem.setState(false);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rectangleItem.setState(true);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;return false;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;class MyCanvas extends Canvas {<BR>
&nbsp;&nbsp;&nbsp;int tool = TwoPointObject.LINE;<BR>
&nbsp;&nbsp;&nbsp;Vector objects = new Vector();<BR>
&nbsp;&nbsp;&nbsp;TwoPointObject current;<BR>
&nbsp;&nbsp;&nbsp;boolean newObject = false;<BR>
&nbsp;&nbsp;&nbsp;int xOffset = 0;<BR>
&nbsp;&nbsp;&nbsp;int yOffset = 0;<BR>
&nbsp;&nbsp;&nbsp;public MyCanvas(int toolType) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;super();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;tool = toolType;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public void setTool(int toolType) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;tool = toolType;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public void clear() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;objects.removeAllElements();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public void updateOffsets(int x,int y) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;xOffset = x;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;yOffset = y;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public boolean mouseDown(Event event,int x,int y)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;current = new TwoPointObject(tool,x+xOffset,y+yOffset);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;newObject = true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public boolean mouseUp(Event event,int x,int y) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(newObject) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;objects.addElement(current);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newObject = false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public boolean mouseDrag(Event event,int x,int y)
{<BR>
&nbsp;&nbsp;&nbsp;int newX = x + xOffset;<BR>
&nbsp;&nbsp;&nbsp;int newY = y + yOffset;<BR>
&nbsp;&nbsp;&nbsp;if(newObject) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int oldX = current.endX;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int oldY = current.endY;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(tool != TwoPointObject.LINE)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(newX &gt; current.startX) current.endX
= newX;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(newY &gt; current.startY)
current.endY = newY;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int width = Math.max(oldX,current.endX)
- current.startX + 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int height = Math.max(oldY,current.endY)
- current.startY + 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current.endX = newX;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current.endY = newY;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int startX = Math.min(Math.min(current.startX,current.endX),oldX);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int startY = Math.min(Math.min(current.startY,current.endY),oldY);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int endX = Math.max(Math.max(current.startX,current.endX),oldX);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int endY = Math.max(Math.max(current.startY,current.endY),oldY);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;int numObjects = objects.size();<BR>
&nbsp;&nbsp;&nbsp;for(int i=0;i&lt;numObjects;++i) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TwoPointObject obj = (TwoPointObject)
objects.elementAt(i);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obj.draw(g,xOffset,yOffset);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;if(newObject) current.draw(g,xOffset,yOffset);<BR>
&nbsp;}<BR>
}<BR>
class TwoPointObject {<BR>
&nbsp;&nbsp;public static int LINE = 0;<BR>
&nbsp;&nbsp;public static int OVAL = 1;<BR>
&nbsp;&nbsp;public static int RECTANGLE = 2;<BR>
&nbsp;&nbsp;public int type, startX, startY, endX, endY;<BR>
&nbsp;&nbsp;public TwoPointObject(int objectType,int x1,int y1,int
x2,int y2) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;type = objectType;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;startX = x1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;startY = y1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;endX = x2;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;endY = y2;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public TwoPointObject(int objectType,int x,int y)
{<BR>
&nbsp;&nbsp;this(objectType,x,y,x,y);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public TwoPointObject() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;this(LINE,0,0,0,0);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;public void draw(Graphics g,int xOffset,int yOffset)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(type == LINE) <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawLine(startX - xOffset,startY
- yOffset,endX - xOffset,endY -yOffset);<BR>
&nbsp;&nbsp;else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int w = Math.abs(endX - startX);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int l = Math.abs(endY - startY);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(type == OVAL) g.drawOval(startX
- xOffset,startY - yOffset,w,l);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else g.drawRect(startX - xOffset,startY
- yOffset,w,l);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
When you run the <TT><FONT FACE="Courier">ImageScrollApp</FONT></TT>
program, the window shown in <A HREF="f24-7.gif" >Figure 24.7</A>
is displayed. This program should look similar to the <TT><FONT FACE="Courier">DrawApp</FONT></TT>
program in <A HREF="ch23.htm" >Chapter 23</A>. The <TT><FONT FACE="Courier">DrawApp</FONT></TT>
program has been upgraded to support vertical and horizontal scrolling.
<P>
<A HREF="f24-7.gif"><B>Figure 24.7 : </B><I>The <TT>ImageScrollApp</TT> opening window.</I></A>
<P>
Use the Draw menu to select drawing tools, and then draw some
objects in the visible window as I have done in <A HREF="f24-8.gif" >Figure 24.8</A>.
<P>
<A HREF="f24-8.gif"><B>Figure 24.8 : </B><I>Drawing some objects.</I></A>
<P>
Use the vertical and horizontal scrollbars to move throughout
the extended canvas and draw more objects as I have done in <A HREF="f24-9.gif" >Figure 24.9</A>.
<P>
<A HREF="f24-9.gif"><B>Figure 24.9 : </B><I>Scrolling and drawing more.</I></A>
<P>
Experiment with the scrollbars and drawing tools to become more
familiar with the program's operation.
<P>
The <TT><FONT FACE="Courier">ImageScrollApp</FONT></TT> program
upgrades the <TT><FONT FACE="Courier">DrawApp</FONT></TT> program
to use scrollbars. Because the operation of the <TT><FONT FACE="Courier">DrawApp</FONT></TT>
program is extensively described in the previous chapter, I'll
assume that it is still fresh in your mind and only describe the
coding differences required to implement the scrollbars.
<P>
The <TT><FONT FACE="Courier">ImageScrollApp</FONT></TT> class
uses the <TT><FONT FACE="Courier">canvasWidth</FONT></TT> and
<TT><FONT FACE="Courier">canvasHeight</FONT></TT> variables to
represent the horizontal and vertical dimensions of the canvas.
The area of the canvas is over six times the area of the default
window size. This provides enough canvas to implement a reasonable
amount of scrolling. The <TT><FONT FACE="Courier">hbar</FONT></TT>
and <TT><FONT FACE="Courier">vbar</FONT></TT> variables are used
to identify the horizontal and vertical scrollbars.
<P>
The <TT><FONT FACE="Courier">setupScrollBars()</FONT></TT> method
creates a horizontal scrollbar with the maximum size parameter
set to the <TT><FONT FACE="Courier">canvasWidth</FONT></TT>. It
assigns this object to the <TT><FONT FACE="Courier">hbar</FONT></TT>
variable. A vertical scrollbar is created with its maximum parameter
set to the <TT><FONT FACE="Courier">canvasHeight</FONT></TT> and
assigned to the <TT><FONT FACE="Courier">vbar</FONT></TT> variable.
The <TT><FONT FACE="Courier">visible</FONT></TT> parameter of
both scrollbars is set to the value of <TT><FONT FACE="Courier">10</FONT></TT>.
This enables page up and down operations to scroll 10 pixels at
a time, a relatively small distance.
<P>
The <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
handles all scrollbar-related events by invoking the <TT><FONT FACE="Courier">updateOffsets()</FONT></TT>
method of the <TT><FONT FACE="Courier">MyCanvas</FONT></TT> class
with the current values of the horizontal and vertical scrollbars.
The method is invoked for the <TT><FONT FACE="Courier">MyCanvas</FONT></TT>
object assigned to the <TT><FONT FACE="Courier">canvas</FONT></TT>
variable.
<P>
The <TT><FONT FACE="Courier">MyCanvas</FONT></TT> class adds two
new variables to its definition. The <TT><FONT FACE="Courier">xOffset</FONT></TT>
and <TT><FONT FACE="Courier">yOffset</FONT></TT> variables maintain
the current position of the canvas that is displayed in the upper-left
corner of its <TT><FONT FACE="Courier">Graphics</FONT></TT> object.
These variables are modified via the <TT><FONT FACE="Courier">updateOffsets()</FONT></TT>
method, which also invokes the <TT><FONT FACE="Courier">repaint()</FONT></TT>
method to cause the canvas to be repainted.
<P>
The <TT><FONT FACE="Courier">xOffset</FONT></TT> and <TT><FONT FACE="Courier">yOffset</FONT></TT>
variables are used in the <TT><FONT FACE="Courier">mouseDown()</FONT></TT>
and <TT><FONT FACE="Courier">mouseDrag()</FONT></TT> event- handling
methods to translate the x,y-coordinates supplied as arguments
in the method invocation to coordinates that are relative to the
overall canvas.
<P>
The <TT><FONT FACE="Courier">mouseDrag()</FONT></TT> method has
also been simplified to completely repaint the screen rather than
limiting repainting to the local area being updated.
<P>
The <TT><FONT FACE="Courier">paint()</FONT></TT> method adds the
<TT><FONT FACE="Courier">xOffset</FONT></TT> and <TT><FONT FACE="Courier">yOffset</FONT></TT>
variables to the <TT><FONT FACE="Courier">draw()</FONT></TT> method
used to draw objects of the <TT><FONT FACE="Courier">TwoPointObject</FONT></TT>
class.
<P>
The <TT><FONT FACE="Courier">draw()</FONT></TT> method of the
<TT><FONT FACE="Courier">TwoPointObject</FONT></TT> class uses
the <TT><FONT FACE="Courier">xOffset</FONT></TT> and <TT><FONT FACE="Courier">yOffset</FONT></TT>
parameters to translate the x,y-coordinates of the objects being
drawn from coordinates that are relative to the overall canvas
to coordinates that are relative to the current <TT><FONT FACE="Courier">Graphics</FONT></TT>
object being updated.
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
This chapter explains the use of the <TT><FONT FACE="Courier">Scrollbar</FONT></TT>
class. It shows you how to use vertical and horizontal scrollbars
to scroll the text and graphics displayed on the canvas. The event
handling supported by scrollbars has also been explained. <A HREF="ch25.htm" >Chapter 25</A>,
&quot;Using Animation,&quot; shows you how to add multimedia features,
such as sound and animation, to your Java programs.
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



