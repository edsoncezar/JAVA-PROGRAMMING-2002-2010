<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META>
<H1><FONT COLOR=#FF0000>Chapter 32</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Integrating Applets into Distributed
Applications</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#ArchitectureforDistributedApplication" >Architecture for Distributed Applications</A>
<LI><A HREF="#OMGandCORBA" >OMG and CORBA</A>
<UL>
<LI><A HREF="#TheSpringProjectandJavaIDL" >The Spring Project and Java IDL</A>
<LI><A HREF="#NEOandJOE" >NEO and JOE</A>
<LI><A HREF="#JIDL" >JIDL</A>
<LI><A HREF="#BlackWidow" >Black Widow</A>
<LI><A HREF="#HORB" >HORB</A>
</UL>
<LI><A HREF="#InterfacingwithCGIPrograms" >Interfacing with CGI Programs</A>
<UL>
<LI><A HREF="#HowCGIProgramsWork" >How CGI Programs Work</A>
</UL>
<LI><A HREF="#ConnectingAppletswithCGIPrograms" >Connecting Applets with CGI Programs</A>
<UL>
<LI><A HREF="#FortuneTeller" >Fortune Teller</A>
</UL>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
This chapter shows you how to integrate applets into distributed
application programs. It presents a general architecture for distributed
systems and discusses Java's role within this architecture. It
summarizes current efforts to use Java to support distributed
object access. The Common Gateway Interface is introduced, and
the integration of applets with gateway programs is discussed.
<H2><A NAME="ArchitectureforDistributedApplication"><FONT SIZE=5 COLOR=#FF0000>Architecture
for Distributed Applications</FONT></A><FONT SIZE=5 COLOR=#FF0000>
</FONT></H2>
<P>
Most programs can be characterized by three distinct elements:
a user-interface element, an information-processing element, and
a data-storage element. The user-interface element interacts with
the user, displaying information to the user and responding to
user-generated events. The information-processing element performs
operations on the program's data based on the commands and information
received from the user. The data-storage element retrieves, stores,
and manages the data generated and consumed by the user-interface
and information-processing elements. <A HREF="f32-1.gif" >Figure 32.1</A>
summarizes the interaction between these elements.
<P>
<A HREF="f32-1.gif"><B>Figure 32.1 : </B><I> Distributed application elements.</I></A>
<P>
Even though most programs consist of some manifestation of these
three elements, it is not necessary that they be implemented on
the same computer. In fact, separating the elements of an application
over more than one computer may lead to greater modularity and
more efficient use of processing resources. Distributed applications
are based on this notion. <A HREF="f32-2.gif" >Figure 32.2</A>
illustrates a typical distributed application architecture.
<P>
<A HREF="f32-2.gif"><B>Figure 32.2 : </B><I> Distributed application architecture.</I></A>
<P>
The Web is an example of a distributed application. The Web is
highly modular and fully distributed. Anyone with a Web browser
and an Internet connection can use this application. Having access
to a Web server is the only thing required to publish information
on the Web.
<P>
Web browsers implement the client user-interface portion of the
large distributed application known as the Web. They display information
to Web users and respond to interface events generated by user
mouse clicks and keyboard entries.
<P>
Web servers implement the data storage-and-retrieval element of
the Web. They store Web pages, graphics and multimedia files,
Java programs, and other information in files and databases. Web
servers make this information available to Web users based on
the requests made by browsers on their behalf.
<P>
The information-processing element of the Web is implemented in
terms of <I>Common Gateway Interface</I> (CGI) programs and external
programs on Web servers and by Java, JavaScript, and plug-in programs,
on Web browsers. CGI programs provide the capability for Web browsers
to access external application programs, such as database and
search programs. They may be self-contained applications or they
may be used as a means to provide an interface to external applications.
Whereas CGI programs are executed by Web servers, Java, JavaScript,
and plug-in programs are typically executed with Web browsers.
In the not-too-distant future, specialized application servers
may be set up to perform information-processing functions independent
of both Web browsers and Web servers, allowing cleaner separation
of the three distributed computing elements.
<P>
<A HREF="f32-3.gif" >Figure 32.3</A> shows how the Web is organized
in terms of the user-interface, information- processing, and information-storage
elements of distributed applications.
<P>
<A HREF="f32-3.gif"><B>Figure 32.3 : </B><I> The Web as a distributed application</I></A>
<P>
<H2><A NAME="OMGandCORBA"><FONT SIZE=5 COLOR=#FF0000>OMG and CORBA</FONT></A>
</H2>
<P>
The <I>Object Management Group</I> (OMG) was founded in 1989;
today it comprises all of the prominent computer and software
vendors and is the world's largest software-development consortium.
OMG was developed to support the standardization of object-based
software and has developed a standard approach to using objects
to support the distributed systems approach introduced in the
previous section. This approach is the <I>Common Object Request
Broker Architecture</I> (CORBA).
<P>
CORBA supports an object-based approach to distributed systems
development by enabling objects on heterogeneous systems to communicate
independently of the hardware or software platform on which they
are implemented. CORBA makes use of <I>Object Request Brokers</I>
(ORBs), which implement client/server relationships between objects.
ORBs allow client objects to invoke the methods of server objects
without having to consider where the server objects are located
or how they are implemented. An <I>Interface Definition Language</I>
(IDL) is used to specify the protocol by which distributed objects
can be accessed.
<P>
CORBA provides the basis for extending the object-based approach
that you've used so far to develop fully distributed systems.
The ORB and IDL are the basic mechanisms by which CORBA accomplishes
this objective. Because Java is a modern, object-oriented language,
it is natural that there would be a strong interest in extending
Java to support the distributed object approach initiated by CORBA.
<P>
The following subsections discuss some of these developments.
<H3><A NAME="TheSpringProjectandJavaIDL">The Spring Project and
Java IDL</A></H3>
<P>
Sun Microsystems, the creator of Java, is developing a distributed
operating system named Spring for its SPARC line of computers.
The Spring system is designed to be fully distributed and to support
distributed object access. The current version of Spring is Version
1.1. This version implements the Spring Java IDL system. The Spring
Java IDL system provides the capability to integrate Java applications
within Spring. Java objects and other Spring objects can be remotely
accessed from within Java applets or programs or other non-Java
applets.
<H3><A NAME="NEOandJOE">NEO and JOE</A></H3>
<P>
Whereas the Spring project is essentially a research-and-development
effort, Sun's NEO product family is integrating Java into its
main network application product line that uses the Solaris operating
system. The NEO product line is aimed at providing complete support
for networked applications by integrating CORBA and other distributed
object standards into Solaris.
<P>
JOE is an IDL-to-Java compiler, ORB, and NEO application-programming
interface that allows Java applets and programs to be integrated
within NEO applications. The JOE ORB is made accessible to Java-enabled
Web browsers so they can support remote access to NEO and Java
objects within the CORBA framework to implement distributed system
applications as described in the beginning of this chapter.
<H3><A NAME="JIDL">JIDL</A></H3>
<P>
Ernest Friedman-Hill, at Sandia National Laboratories, has developed
JIDL, a CORBA- compliant IDL compiler that supports distributed
object access from Java applets. It allows applets to access remote
CORBA-compliant objects in the same manner as local Java objects.
<P>
A prototype of JIDL has been completed using commercial software
packages, and work is underway to develop a complete public-domain
version of the software.
<H3><A NAME="BlackWidow">Black Widow</A></H3>
<P>
Black Widow is a product of PostModern computing that provides
the capability to connect CORBA-compliant objects with Java applets.
Black Widow allows applets to access remote CORBA-compliant objects
developed in Java or C++. It provides the capability to automatically
generate interface code in Java or C++ and it supports the CORBA
Internet Inter-ORB Protocol (IIOP). IIOP is a protocol for using
the Internet for communication between local and remote ORBs.
<H3><A NAME="HORB">HORB</A></H3>
<P>
HORB was developed by Dr. Hirano Satoshi at the Electrotechnical
Laboratory (ETL) of the Agency of Industrial Science and Technology
of the Japanese Ministry of International Trade and Industry (MITI).
HORB is a freely available distributed object system, based on
Java, that supports object-oriented communication between Java
applets and objects running on a server.
<P>
Although HORB is not directly compatible with CORBA, it is further
advanced than current Java-to-CORBA implementations and can be
immediately implemented. HORB is a complete Java solution, supporting
both client and server objects. HORB-to-CORBA connectivity can
be implemented by custom interface software. The URL <TT><A TARGET="resource window" HREF="http://ring.etl.go.jp/openlab/horb/">http://ring.etl.go.jp/openlab/horb/</A></TT>
is the home page of the HORB project. If you are interested in
developing distributed applications using Java, I highly recommend
that you download and investigate this package.
<H2><A NAME="InterfacingwithCGIPrograms"><FONT SIZE=5 COLOR=#FF0000>Interfacing
with CGI Programs</FONT></A><FONT SIZE=5 COLOR=#FF0000> </FONT>
</H2>
<P>
The object-based distributed system framework provided by CORBA
and HORB will form the basis for the development of next-generation
distributed systems. The Common Gateway Interface is the current
standard by which Web-based applications are implemented. Although
the CGI is not an old technology, in terms of the number of years
that it has been around, it is not nearly as powerful and sophisticated
as CORBA and will most likely be replaced by CORBA-like applications.
<P>
The CGI was developed to provide a standard interface for connecting
external programs-such as database, search, and forms-processing
programs-to Web servers. CGI programs, sometimes called <I>CGI
scripts</I>, provide the capability to forward data between Web
servers and these external programs. These programs are referred
to as <I>gateway programs</I> because they provide a gateway through
which Web servers and external programs communicate.
<P>
Although the CGI was developed to support gateway programming,
CGI programs are not required to interface with external programs
and can be complete programs in and of themselves.
<H3><A NAME="HowCGIProgramsWork">How CGI Programs Work</A></H3>
<P>
Because CGI programs are executed by remote Web users, it is important
to put limits on which programs can be executed in this fashion.
CGI programs typically are stored in a special directory on Web
servers. Common examples of this directory are <TT><FONT FACE="Courier">/cgi-bin</FONT></TT>
or <TT><FONT FACE="Courier">/htbin</FONT></TT>. I'll use <TT><FONT FACE="Courier">/cgi-bin</FONT></TT>
in the following discussion, but you can designate any directory
as the CGI directory.
<P>
When a browser request identifies an URL containing the <TT><FONT FACE="Courier">/cgi-bin</FONT></TT>
directory, the Web server recognizes this URL as containing a
reference to a CGI program. The server identifies the CGI program
to be executed from the URL; executes the CGI program, passing
it any parameters or data; and, upon completion of the CGI program's
execution, returns the results of the CGI program's processing
to the Web browser.
<P>
The methods by which Web servers send and receive data to and
from CGI programs is the core of the Common Gateway Interface
specification. The current version of the CGI is 1.1. The URL
<TT><A TARGET="resource window" HREF="http://www.w3.org/pub/WWW/CGI">http://www.w3.org/pub/WWW/CGI</A></TT>
provides a starting point from which CGI information can be obtained.
<H4>Sending Data to CGI Programs</H4>
<P>
Data is passed from a Web server to a CGI program using a combination
of command-line arguments, environment variables, and the standard
input stream.
<H5>Command-Line Arguments</H5>
<BLOCKQUOTE>
Command-line arguments are passed to CGI programs as the result
of an <TT><FONT FACE="Courier">ISINDEX</FONT></TT> query. These
queries are a now-archaic method of retrieving information from
Web users and are being replaced by HTML forms. The <TT><FONT FACE="Courier">args[]</FONT></TT>
array of <TT><FONT FACE="Courier">String</FONT></TT> objects defined
in the <TT><FONT FACE="Courier">main()</FONT></TT> method of a
Java program provides the capability to access these command-line
variables.
</BLOCKQUOTE>
<H5>Environment Variables</H5>
<BLOCKQUOTE>
<I>Environment variables</I> are the primary mechanism used to
pass information from Web servers to CGI programs. Environment
variables are variables that are maintained by operating systems
that are external to a program being executed. They are accessed
by a program via special operating-system calls. Previous versions
of Java used the <TT><FONT FACE="Courier">getenv()</FONT></TT>
method of the <TT><FONT FACE="Courier">System</FONT></TT> class
to access environment variables. This method has been declared
obsolete and is no longer supported by Java. Java 1.0 replaces
the <TT><FONT FACE="Courier">getenv()</FONT></TT> method with
the <TT><FONT FACE="Courier">getProperties()</FONT></TT> method.
This approach requires that environment variables be explicitly
passed to Java programs as properties using the <TT><FONT FACE="Courier">-D</FONT></TT>
option of the Java command line.
</BLOCKQUOTE>
<BLOCKQUOTE>
The environment variables supported by the current version of
the CGI specification are as follows:
</BLOCKQUOTE>
<UL>
<LI><TT><FONT FACE="Courier">AUTH_TYPE</FONT></TT> identifies
the authentication scheme used, if any.
<LI><TT><FONT FACE="Courier">CONTENT_LENGTH</FONT></TT> identifies
the number of bytes of data provided via the standard input stream.
<LI><TT><FONT FACE="Courier">CONTENT_TYPE</FONT></TT> identifies
the MIME type of the input data.
<LI><TT><FONT FACE="Courier">GATEWAY_INTERFACE</FONT></TT> identifies
the version of the CGI implemented by the server.
<LI><TT><FONT FACE="Courier">PATH_INFO</FONT></TT> identifies
the additional path information added to the URL following the
name of the CGI program.
<LI><TT><FONT FACE="Courier">PATH_TRANSLATED</FONT></TT> identifies
the full path of the CGI program from the perspective of the host
operating system.
<LI><TT><FONT FACE="Courier">QUERY_STRING</FONT></TT> provides
an URL-encoded set of parameters that are passed to the CGI program.
<LI><TT><FONT FACE="Courier">REMOTE_ADDR</FONT></TT> identifies
the IP address of the host from which the browser request is made.
<LI><TT><FONT FACE="Courier">REMOTE_HOST</FONT></TT> identifies
the fully qualified domain name of the host from which the browser
request is made.
<LI><TT><FONT FACE="Courier">REMOTE_IDENT</FONT></TT> identifies
the user on whose behalf the browser request is made using the
protocol specified in RFC 931.
<LI><TT><FONT FACE="Courier">REMOTE_USER</FONT></TT> provides
the identity of the user on whose behalf the browser request is
made.
<LI><TT><FONT FACE="Courier">REQUEST_METHOD</FONT></TT> identifies
the type of browser request being processed: <TT><FONT FACE="Courier">GET</FONT></TT>,
<TT><FONT FACE="Courier">POST</FONT></TT>, <TT><FONT FACE="Courier">PUT</FONT></TT>,
and so on.
<LI><TT><FONT FACE="Courier">SCRIPT_NAME</FONT></TT> identifies
the script name of the CGI program.
<LI><TT><FONT FACE="Courier">SERVER_NAME</FONT></TT> identifies
the hostname associated with the server.
<LI><TT><FONT FACE="Courier">SERVER_PORT</FONT></TT> identifies
the port on which the server receives its HTTP requests.
<LI><TT><FONT FACE="Courier">SERVER_PROTOCOL</FONT></TT> identifies
the version of the HTTP supported by the server.
<LI><TT><FONT FACE="Courier">SERVER_SOFTWARE</FONT></TT> identifies
the version of the server software being used.
</UL>
<H5>Standard Input</H5>
<BLOCKQUOTE>
When an URL containing a CGI program is accessed using the <TT><FONT FACE="Courier">POST</FONT></TT>
or <TT><FONT FACE="Courier">PUT</FONT></TT> method, data can be
passed to the CGI program using the standard input stream. This
approach is very convenient, especially for Java programs, because
the <TT><FONT FACE="Courier">System.in</FONT></TT> variable and
the classes and methods of the <TT><FONT FACE="Courier">java.io</FONT></TT>
package can be directly used to read the data passed by the server.
The <TT><FONT FACE="Courier">CONTENT_LENGTH</FONT></TT> environment
variable is used to identify the number of bytes of data that
are passed via standard input.
</BLOCKQUOTE>
<H4>Receiving Data from CGI Programs</H4>
<P>
Although there are three ways to pass data to CGI programs, there
is only one way for a CGI program to return data to a Web server:
by writing to the standard output stream. The standard output
stream of a CGI program is redirected by the Web server when the
CGI program is executed. All data written to standard output is
returned to the server. This is a bonus for Java-based CGI programs
because the <TT><FONT FACE="Courier">System.out</FONT></TT> variable
and the <TT><FONT FACE="Courier">java.io</FONT></TT> package can
be used to return data to the Web server.
<H2><A NAME="ConnectingAppletswithCGIPrograms"><FONT SIZE=5 COLOR=#FF0000>Connecting
Applets with CGI Programs</FONT></A><FONT SIZE=5 COLOR=#FF0000>
</FONT></H2>
<P>
Because of the security policy enforced with applets, an applet
can connect only with a CGI program on the server from which the
applet was loaded. This minimizes the risk associated with an
applet reading sensitive data from one system and then disclosing
that data to another system. Although this security precaution
is prudent, it limits the flexibility with which applets can be
integrated with CGI programs.
<H3><A NAME="FortuneTeller">Fortune Teller</A></H3>
<P>
The following example illustrates an applet that communicates
with a Web server to repeatedly access the fortune CGI program.
Its source code is shown in Listing 32.1.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 32.1. The Fortune applet source code.</B>
<P>
<TT><FONT FACE="Courier">import java.applet.*;<BR>
import java.awt.*;<BR>
import java.net.*;<BR>
import java.io.*;<BR>
<BR>
public class Fortune extends Applet {<BR>
&nbsp;&nbsp;URL url;<BR>
&nbsp;&nbsp;TextArea text = new TextArea(24,80);<BR>
&nbsp;&nbsp;Button button = new Button(&quot;Again&quot;);<BR>
&nbsp;&nbsp;DataInputStream inStream;<BR>
&nbsp;&nbsp;public void init() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;setLayout(new BorderLayout());<BR>
&nbsp;&nbsp;&nbsp;&nbsp;updateText();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;Center&quot;,text);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add(&quot;South&quot;,new Button(&quot;Again&quot;));
<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(event.target instanceof Button) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(&quot;Again&quot;.equals(event.arg))
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateText();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return false;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;void updateText() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url = new URL(&quot;http://www.jaworski.com/cgi-bin/fortune&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inStream = new DataInputStream(url.openStream());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String newText = &quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String line;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while((line = inStream.readLine())
!= null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newText += line + &quot;\n&quot;;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;text.setText(newText);<BR>
&nbsp;&nbsp;&nbsp;}catch (MalformedURLException ex) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;text.setText(&quot;MalformedURLException&quot;);
<BR>
&nbsp;&nbsp;&nbsp;}catch (IOException ex) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;text.setText(&quot;IOException&quot;);
<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The Fortune applet cannot be run from your computer because an
applet can make a socket connection to only the computer from
which it is run. To run the Fortune applet, use your browser to
open the URL <TT><A TARGET="resource window" HREF="http://www.jaworski.com/java/fortune.htm">http://www.jaworski.com/java/fortune.htm</A></TT>.
The screen shown in <A HREF="f32-4.gif" >Figure 32.4</A> should
appear.
<P>
<A HREF="f32-4.gif"><B>Figure 32.4 : </B><I> The Fortune applet.</I></A>
<P>
To get a new fortune cookie, click on the Again button.
<P>
The Fortune applet makes a connection to the fortune CGI program
located in my <TT><FONT FACE="Courier">/cgi-bin</FONT></TT> directory.
It then reads the fortune cookie generated by this program and
displays it in the text window. When you click on the Again button,
it establishes another connection to the CGI program, obtains
another fortune cookie, and displays the new cookie in the text
window.
<P>
The <TT><FONT FACE="Courier">Fortune</FONT></TT> class extends
the <TT><FONT FACE="Courier">Applet</FONT></TT> class and declares
four field variables. The <TT><FONT FACE="Courier">url</FONT></TT>
variable is used to hold the URL of the CGI program. The <TT><FONT FACE="Courier">text</FONT></TT>
variable refers to the <TT><FONT FACE="Courier">TextArea</FONT></TT>
component displayed in the applet window. The <TT><FONT FACE="Courier">button</FONT></TT>
variable refers to the Again button. The <TT><FONT FACE="Courier">inStream</FONT></TT>
variable is used to refer to the input stream associated with
the URL connection.
<P>
The <TT><FONT FACE="Courier">init()</FONT></TT> method sets the
layout of the applet window to a <TT><FONT FACE="Courier">BorderLayout</FONT></TT>
object and adds the <TT><FONT FACE="Courier">TextArea</FONT></TT>
and <TT><FONT FACE="Courier">Button</FONT></TT> objects to the
applet window. It also invokes the <TT><FONT FACE="Courier">updateText()</FONT></TT>
method to update the text displayed in the <TT><FONT FACE="Courier">TextArea</FONT></TT>
object by reading the output of the fortune CGI program.
<P>
The <TT><FONT FACE="Courier">handleEvent()</FONT></TT> method
handles the clicking of the Again button by invoking the <TT><FONT FACE="Courier">updateText()</FONT></TT>
method.
<P>
The <TT><FONT FACE="Courier">updateText()</FONT></TT> method implements
the heart of the applet's processing. It creates a new URL object
using the address of my fortune CGI program and assigns it to
the <TT><FONT FACE="Courier">url</FONT></TT> variable. It then
obtains the input stream associated with the URL and assigns it
to the <TT><FONT FACE="Courier">inStream</FONT></TT> variable.
The <TT><FONT FACE="Courier">inStream</FONT></TT> variable is
read, line by line, and set in the <TT><FONT FACE="Courier">TextArea</FONT></TT>
object referred to by the <TT><FONT FACE="Courier">text</FONT></TT>
variable.
<P>
The <TT><FONT FACE="Courier">fortune.htm</FONT></TT> file is shown
in Listing 32.2. It follows the same format as used in other examples.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 32.2. The </B><TT><B><FONT FACE="Courier">fortune.htm</FONT></B></TT><B>
file.</B>
<P>
<TT><FONT FACE="Courier">&lt;HTML&gt;<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt;Have a fortune cookie!&lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
&lt;BODY&gt;<BR>
&lt;APPLET CODE=&quot;Fortune.class&quot; WIDTH=450 HEIGHT=350&gt;
<BR>
[Fortune applet]<BR>
&lt;/APPLET&gt;<BR>
&lt;/BODY&gt;<BR>
&lt;/HTML&gt;</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>

Listing 32.3 shows the fortune CGI program. It is a shell script
that is written in the UNIX shell programming language.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 32.3. The source code of the fortune CGI program.</B>
<P>
<TT><FONT FACE="Courier">#!/bin/sh<BR>
<BR>
FORTUNE=/usr/games/fortune<BR>
<BR>
echo Content-type: text/plain<BR>
echo<BR>
<BR>
if [ -x $FORTUNE ]; then<BR>
&nbsp;&nbsp;$FORTUNE<BR>
else<BR>
&nbsp;&nbsp;echo Cannot find fortune command on this system.<BR>
fi</FONT></TT>
</BLOCKQUOTE>
<HR>
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A><FONT SIZE=5 COLOR=#FF0000>
</FONT></H2>
<P>
This chapter shows you how applets can be integrated into distributed
application programs. It presents a general architecture for distributed
systems and has discussed Java's role within this architecture.
It also summarizes current Java efforts to support distributed
object access. The Common Gateway Interface is introduced, and
the integration of applets with gateway programs is illustrated.
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



