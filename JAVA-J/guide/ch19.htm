<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META>
<H1><FONT COLOR=#FF0000>Chapter 19</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Organizing Window Programs</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#DesigningWindowPrograms" >Designing Window Programs</A>
<LI><A HREF="#OpeningandClosingWindows" >Opening and Closing Windows</A>
<LI><A HREF="#UsingLayouts" >Using Layouts</A>
<LI><A HREF="#ConnectingCodetoEvents" >Connecting Code to Events</A>
<LI><A HREF="#TheWindowSamplerProgram" >The Window Sampler Program</A>
<UL>
<LI><A HREF="#MyTextField" >MyTextField</A>
<LI><A HREF="#MyButton" >MyButton</A>
<LI><A HREF="#MyCanvas" >MyCanvas</A>
<LI><A HREF="#MyCheckBoxGroup" >MyCheckBoxGroup</A>
<LI><A HREF="#MyChoice" >MyChoice</A>
<LI><A HREF="#MyList" >MyList</A>
<LI><A HREF="#MyScrollbar" >MyScrollbar</A>
</UL>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
This chapter covers the basics of writing window programs. It
shows you how window programs are structured and organized and
identifies the basic approach to designing most window programs.
It covers the details of the <TT>Frame</TT> class and explains
how windows are opened and closed. The five basic window layouts
are introduced and illustrated through a sample program. The finer
points of window event handling are then described. Finally, a
window program is created that introduces the most common window
GUI controls. When you finish this chapter, you will have had
a broad introduction to window programming and will be familiar
with most of the common window GUI controls.
<H2><A NAME="DesigningWindowPrograms"><B><FONT SIZE=5 COLOR=#FF0000>Designing
Window Programs</FONT></B></A></H2>
<P>
The design of most window programs usually involves two basic
steps: laying out the program's graphical user interface and providing
the functionality that implements the interface.
<P>
The first step addresses one of the most important features of
window programs-its look and feel. Window programs are preferred
to console programs when their look and feel are interesting,
innovative, and help the user to accomplish a particular purpose.
<P>
A program's look is determined by how it presents itself to users.
It consists of all those characteristics that determine its appearance,
such as window size, layout, background and foreground colors,
menus, and GUI controls. A program's feel is determined by the
availability of easy-to-use GUI controls and the contribution
of these controls to the program's ultimate intended use. It is
the result of the designer's ability to select and implement those
GUI controls that enhance a program's capability to satisfy user
expectations.
<P>
The window's GUI design begins by creating an application window,
using the <TT>Frame</TT> class, and determining the basic characteristics
of the window such as its size, title, background and foreground
colors, and general layout. Next a menu bar is added to the window,
and the program's menus and menu items are added to the menu bar.
The GUI controls that are to be used in the window are determined,
designed, and attached to the window's panels and frame.
<P>
At this point, you know what your program will look like and you
can concentrate on what it will do. The first step in bringing
your program's user interface to life is to add the event-handling
software required to respond to events generated as the result
of user interaction. The event-handling software will not immediately
implement all user actions, but it should respond to them and
provide hooks for eventual implementation of all user interface
actions. The event-handling software is then fleshed out to provide
all the functionality required of the application program. The
program's design and implementation reaches an <I>Alpha stage</I>
when all required user-interface functions have been implemented.
<P>
The next stage of program development is to refine and test the
program to make it more responsive to its intended purpose. A
series of Beta versions of the program are developed that implement
user feedback and fix any identified errors or deficiencies. Finally,
the program is refined to handle unusual user inputs and to process
errors and exceptions.
<P>
<A HREF="f19-1.gif" >Figure 19.1</A> provides an overview of the
process of designing and implementing window programs. This chapter
covers the basics of creating and organizing window programs and
shows how to connect event-handling code to general window components.
A window sampler program is provided that illustrates the basic
use of common window GUI controls. Subsequent chapters explore
the use of these GUI controls in more detail.
<P>
<A HREF="f19-1.gif"><B>Figure 19.1 :</B><I> The process for window design and implementation.</I></A>
<P>

<H2><A NAME="OpeningandClosingWindows"><B><FONT SIZE=5 COLOR=#FF0000>Opening
and Closing Windows</FONT></B></A></H2>
<P>
Opening and closing windows mark the beginning and end of any
window program. The <TT>Frame</TT> class provides the basis by
which these fundamental window operations are accomplished. A
<TT>Frame</TT> object implements an application main window, inheriting
many methods that enable it to do so from the <TT>Window</TT>,
<TT>Container</TT>, and <TT>Component</TT> classes.
<P>
To open an application window, a <TT>Frame</TT> object is created
and its <TT>show()</TT> method is invoked. The <TT>show()</TT>
method is inherited from the <TT>Window</TT> class. To close an
application window, the <TT>WINDOW_DESTROY</TT> event must be
handled. The window is disposed of using the <TT>dispose()</TT>
method of the <TT>Window</TT> class, or more commonly by invoking
the <TT>System.exit()</TT> method after performing any necessary
program-termination processing.
<P>
The <TT>Frame</TT> class and its ancestors provide a number of
methods that control the way in which a window is displayed. The
<TT>setBackground()</TT> and <TT>setForeground()</TT> methods
inherited from the <TT>Component</TT> class are used to specify
a window's background and foreground colors. The <TT>setFont()</TT>
method, also inherited from <TT>Component</TT>, is used to specify
the default font to be used with a window. The <TT>Frame</TT>
class, itself, provides a number of methods that control a window's
appearance. The <TT>setTitle()</TT> method allows a window's title
to be changed. The <TT>setCursor()</TT> method allows the cursor
to be changed while it is in the window's focus. The <TT>setMenuBar()</TT>
method enables a menu bar to be attached to a window, and the
<TT>setResizable()</TT> method toggles whether a window can or
cannot be resized. The <TT>setIconImage()</TT> method allows the
window's minimized icon to be changed. This method is not supported
by all Java implementations and therefore should be avoided if
compatibility is a concern.
<P>
The <TT>FrameApp</TT> program shown in Listing 19.1 illustrates
the window concepts covered so far and shows the effect of using
the basic window controls identified in the previous paragraph.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 19.1. The source code of the </B><TT><B><FONT FACE="Courier New">FrameApp</FONT></B></TT><B>
program.</B>
<P>
<TT>import java.awt.*;<BR>
<BR>
<FONT FACE="Courier New">public class FrameApp extends Frame {
<BR>
&nbsp;String defaultTitle;<BR>
&nbsp;MenuBar defaultMenuBar;<BR>
&nbsp;MenuBar alternativeMenuBar;<BR>
&nbsp;int cursors[] = {CROSSHAIR_CURSOR,DEFAULT_CURSOR,E_RESIZE_CURSOR,HAND_CURSOR,
<BR>
&nbsp;&nbsp;MOVE_CURSOR,NE_RESIZE_CURSOR,NW_RESIZE_CURSOR,N_RESIZE_CURSOR,
<BR>
&nbsp;&nbsp;SE_RESIZE_CURSOR,SW_RESIZE_CURSOR,S_RESIZE_CURSOR,TEXT_CURSOR,
<BR>
&nbsp;&nbsp;WAIT_CURSOR,W_RESIZE_CURSOR};<BR>
&nbsp;Color colors[] = {Color.black,Color.blue,Color.cyan,Color.darkGray,Color.gray,
<BR>
&nbsp;&nbsp;Color.green,Color.lightGray,Color.magenta,Color.orange,Color.pink,Color.red,
<BR>
&nbsp;&nbsp;Color.white,Color.yellow};<BR>
&nbsp;String fontNames[] = {&quot;Helvetica&quot;,&quot;TimesRoman&quot;,&quot;Courier&quot;,&quot;Dialog&quot;,
<BR>
&nbsp;&nbsp;&quot;DialogInput&quot;,&quot;ZapfDingbats&quot;};
<BR>
&nbsp;int cursorIndex = 1;<BR>
&nbsp;int backgroundColorIndex = 0;<BR>
&nbsp;int foregroundColorIndex = 0;<BR>
&nbsp;int fontIndex = 0;<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;FrameApp app = new FrameApp();<BR>
&nbsp;}<BR>
&nbsp;public FrameApp() {<BR>
&nbsp;&nbsp;super(&quot;Exploring Frames&quot;);<BR>
&nbsp;&nbsp;defaultTitle = getTitle();<BR>
&nbsp;&nbsp;setup();<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(400,400);<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void setup() {<BR>
&nbsp;&nbsp;setupPanels();<BR>
&nbsp;&nbsp;setupMenuBars();<BR>
&nbsp;&nbsp;setFont(new Font(fontNames[fontIndex],Font.PLAIN,14));
<BR>
&nbsp;}<BR>
&nbsp;void setupPanels() {<BR>
&nbsp;&nbsp;Panel mainPanel = new Panel();<BR>
&nbsp;&nbsp;mainPanel.setLayout(new GridLayout(4,1));<BR>
&nbsp;&nbsp;Label label1 = <BR>
&nbsp;&nbsp;&nbsp;new Label(&quot;Change these windows characteristics:&quot;,Label.CENTER);
<BR>
&nbsp;&nbsp;mainPanel.add(label1);<BR>
&nbsp;&nbsp;Panel panel1 = new Panel();<BR>
&nbsp;&nbsp;panel1.add(new Button(&quot;Title&quot;));<BR>
&nbsp;&nbsp;panel1.add(new Button(&quot;Menu Bar&quot;));<BR>
&nbsp;&nbsp;panel1.add(new Button(&quot;Resizable&quot;));<BR>
&nbsp;&nbsp;mainPanel.add(panel1);<BR>
&nbsp;&nbsp;Label label2 = new Label(&quot;Check out these windows
options:&quot;,Label.CENTER);<BR>
&nbsp;&nbsp;mainPanel.add(label2);<BR>
&nbsp;&nbsp;Panel panel2 = new Panel();<BR>
&nbsp;&nbsp;panel2.add(new Button(&quot;Cursor&quot;));<BR>
&nbsp;&nbsp;panel2.add(new Button(&quot;Background&quot;));<BR>
&nbsp;&nbsp;panel2.add(new Button(&quot;Foreground&quot;));<BR>
&nbsp;&nbsp;panel2.add(new Button(&quot;Font&quot;));<BR>
&nbsp;&nbsp;mainPanel.add(panel2);<BR>
&nbsp;&nbsp;add(&quot;South&quot;,mainPanel);<BR>
&nbsp;}<BR>
&nbsp;void setupMenuBars() {<BR>
&nbsp;&nbsp;defaultMenuBar = new MenuBar();<BR>
&nbsp;&nbsp;Menu fileMenu = new Menu(&quot;File&quot;);<BR>
&nbsp;&nbsp;fileMenu.add(new MenuItem(&quot;Exit&quot;));<BR>
&nbsp;&nbsp;defaultMenuBar.add(fileMenu);<BR>
&nbsp;&nbsp;setMenuBar(defaultMenuBar);<BR>
&nbsp;&nbsp;alternativeMenuBar = new MenuBar();<BR>
&nbsp;&nbsp;Menu otherMenu = new Menu(&quot;Program&quot;);<BR>
&nbsp;&nbsp;otherMenu.add(new MenuItem(&quot;Quit&quot;));<BR>
&nbsp;&nbsp;alternativeMenuBar.add(otherMenu);<BR>
&nbsp;}<BR>
&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;g.drawString(&quot;Sample Text&quot;,160,100);<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.ACTION_EVENT){<BR>
&nbsp;&nbsp;&nbsp;if(event.target instanceof Button){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(&quot;Title&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(defaultTitle.equals(getTitle()))
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setTitle(&quot;Here's an alternative
title.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else setTitle(defaultTitle);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;Menu Bar&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(defaultMenuBar.equals(getMenuBar()))
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setMenuBar(alternativeMenuBar);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else setMenuBar(defaultMenuBar);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;Resizable&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setResizable(!isResizable());<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;Cursor&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++cursorIndex;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursorIndex %= cursors.length;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setCursor(cursors[cursorIndex]);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;Background&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++backgroundColorIndex;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;backgroundColorIndex %= colors.length;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setBackground(colors[backgroundColorIndex]);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;Foreground&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++foregroundColorIndex;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foregroundColorIndex %= colors.length;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setForeground(colors[foregroundColorIndex]);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;Font&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++fontIndex;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fontIndex %= fontNames.length;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setFont(new Font(fontNames[fontIndex],Font.PLAIN,14));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}else if(event.target instanceof MenuItem){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(&quot;Exit&quot;.equals(event.arg)
|| &quot;Quit&quot;.equals(event.arg)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
After you have compiled <TT>FrameApp</TT>, run it and check out
the buttons and menus it provides. When you first launch <TT>FrameApp</TT>,
it displays the text <TT>Sample Text</TT> followed by two rows
of buttons, as shown in <A HREF="f19-2.gif" >Figure 19.2</A>.
The buttons in the first row provide the capability to change
the window's title, menu bar, and resizable properties. These
buttons are <I>toggles</I>-the second time you click a button,
the window's characteristic being changed is reverted to its initial
default value. The buttons in the second row allow you to step
through a sequence of values for the window's cursor, background
and foreground colors, and text font. If you are using Windows
95, you will find that it does not support all cursors defined
by Java. You will find out which cursors are not supported when
you analyze this program's code.
<P>
<A HREF="f19-2.gif"><B>Figure 19.2 :</B><I> The <TT>FrameApp</TT> initial display.</I></A>
<P>

Let's investigate each of the program's features. Click on the
Title button and you will notice that the window's title text
is changed from <TT>Exploring Frames</TT> to <TT>Here's an alternative
title.</TT>, as shown in <A HREF="f19-3.gif" >Figure 19.3</A>.
Click on the button a second time and the title changes back to
<TT>Exploring Frames</TT>.
<P>
<A HREF="f19-3.gif"><B>Figure 19.3 :</B><I> Here's an alternative title.</I></A>
<P>
Click on the File menu, but don't select the Exit option. The
File menu is replaced by the Program menu, shown in <A HREF="f19-4.gif" >Figure 19.4</A>,
when you click on the Menu Bar button. Adding, deleting, and modifying
menus are common operations for many window programs.
<P>
<A HREF="f19-4.gif"><B>Figure 19.4 :</B><I> The Program menu.</I></A>
<P>
You will notice that your program window is initially resizable.
This means that you can use the cursor at the window's edge to
make the window larger or smaller. The cursor changes from a pointer
to a resizable icon to let you know that the window can be resized.
If you click on the Resizable button, the window is no longer
capable of being resized. You can check this by placing your cursor
at the window's boundary.
<P>
Click on the Cursor button to change the cursor associated with
your program's window. Step through the list of available cursors
until you reach the crosshair cursor. Then click the cursor button
one more time to return to the default cursor.
<P>
Click the Background button and the program's background color
is changed to blue, as shown in <A HREF="f19-5.gif" >Figure 19.5</A>.
You can continue to click the Background button to look at other
background colors. Notice that the color does not change in the
panel used by the program's buttons. Now try clicking on the Foreground
button a few times to change the window's foreground color.
<P>
<A HREF="f19-5.gif"><B>Figure 19.5 :</B><I> Changing the window background.</I></A>
<P>
The Font button allows you to change the font used with the sample
text display as shown in <A HREF="f19-6.gif" >Figure 19.6</A>.
Cycle through the list of fonts. The last font in the list is
the ZapfDingbats font. It is used to display special characters
and symbols, as shown in <A HREF="f19-6.gif" >Figure 19.6</A>.
<P>
<A HREF="f19-6.gif"><B>Figure 19.6 :</B><I> ZapDingbats characters.</I></A>
<P>
You have covered the program's features. Now let's look at its
code to see how it works.
<P>
The <TT>FrameApp</TT> class defines a number of variables. The
<TT>defaultTitle</TT> variable is used to store the default window
title so that it can be restored after it has been changed. The
<TT>defaultMenuBar</TT> and <TT>alternativeMenuBar</TT> variables
are used to store the File and Program menu bars. The <TT>cursors[]</TT>
array stores the cursor constants that are defined for the <TT>Frame</TT>
class. These constants are stored in an array to make it easier
to cycle through them. The <TT>cursorIndex</TT> variable maintains
an index to the current cursor being displayed.
<P>
The <TT>colors[]</TT> array stores a subset of the colors defined
by the <TT>Color</TT> class. These colors are used when the background
and foreground colors are changed. The <TT>backgroundColorIndex</TT>
and <TT>foregroundColorIndex</TT> variables are used to keep track
of the current background and foreground colors.
<P>
The <TT>fontNames[]</TT> array stores the names of the fonts known
to Java. The <TT>fontIndex</TT> variable is used to point to the
current window font.
<P>
<TT>FrameApp</TT> has a simple standard <TT>main()</TT> method
that creates a new <TT>FrameApp</TT> object. The <TT>FrameApp</TT>
constructor invokes the superclass constructor call statement
to set the window's title and then uses the <TT>getTitle()</TT>
method inherited from <TT>Frame</TT> to store the title in the
<TT>defaultTitle</TT> variable. It then invokes the <TT>setup()</TT>
method to set up panels, buttons, menu bars, and the default window
font. The <TT>pack()</TT> method and the <TT>resize()</TT> methods
are used to organize the components of the window and adjust it
to the desired size. The <TT>show()</TT> method then causes the
window to be opened and displayed.
<P>
The <TT>setup()</TT> method invokes the <TT>setupPanels()</TT>
and <TT>setupMenuBars()</TT> methods to set up the program's panels,
buttons, and menu bars. It invokes the <TT>setFont()</TT> method
inherited from the <TT>Component</TT> class to set the default
font to be used with the window. The <TT>setFont()</TT> method
takes three arguments: the name of the font, the font style, and
the size of the font in points. The font names are stored in the
<TT>fontNames[]</TT> array. The font style constants are defined
in the <TT>Font</TT> class.
<P>
The <TT>setupPanels()</TT> method constructs a <TT>Panel</TT>
object named <TT>mainPanel</TT> that is to hold the subpanels
corresponding to the rows of buttons. The layout of the <TT>mainPanel</TT>
is set to a <TT>GridLayout</TT> object of four rows and one column.
Layouts are used to specify how objects are to be placed in a
container. They are covered in the &quot;Using Layouts&quot; section
in this chapter.
<P>
A new <TT>Label</TT> object is created with the text <TT>Change
these windows characteristics:</TT> and added to the <TT>mainPanel</TT>.
The <TT>Label.CENTER</TT> constant specifies how the label should
be aligned within its available space. A <TT>Panel</TT> object
named <TT>panel1</TT> is created to hold the Title, Menu Bar,
and Resizable buttons that are subsequently created and added
to the panel. The <TT>panel1</TT> object is then added to the
<TT>mainPanel</TT>.
<P>
A second <TT>Label</TT> object named <TT>label2</TT> is created
to hold the text <TT>Check out these windows options:</TT>. The
label is then added to the <TT>mainPanel</TT>. A second <TT>Panel</TT>
object named <TT>panel2</TT> is created. The Cursor, Background,
Foreground, and Font buttons are then added to <TT>panel2</TT>.
The <TT>panel2</TT> object is then added to the <TT>mainPanel</TT>.
The <TT>mainPanel</TT> is then added to the southern (bottom)
region of the <TT>FrameApp</TT> object being constructed. The
&quot;Using Layouts&quot; section in this chapter describes why
the <TT>FrameApp</TT> object was organized with a <TT>mainPanel</TT>
and two subpanels.
<P>
The <TT>setupMenuBars()</TT> method creates a new <TT>MenuBar</TT>
object and assigns it to the <TT>defaultMenuBar</TT> variable.
It declares the <TT>fileMenu</TT> variable and assigns it a new
<TT>Menu</TT> object with the File label. It creates a <TT>MenuItem</TT>
object with the Exit label and adds it to the <TT>fileMenu</TT>.
The <TT>defaultMenuBar</TT> is then set as the menu bar of the
<TT>FrameApp</TT> object being constructed via the <TT>setMenuBar()</TT>
method of the <TT>Frame</TT> class. Menus are covered in <A HREF="ch20.htm" >Chapter 20</A>,
&quot;Menus, Buttons, and Dialog Boxes.&quot; For now, just remember
that a <TT>Frame</TT> has a <TT>MenuBar</TT> that consists of
one or more <TT>Menus</TT> that each have one or more <TT>MenuItems</TT>.
<P>
The <TT>alternativeMenuBar</TT> is constructed in the same manner
as the <TT>defaultMenuBar</TT> except that it contains an <TT>otherMenu</TT>
with the File and Exit labels replaced by Program and Quit labels.
<P>
The <TT>alternativeMenuBar</TT> is not set to the <TT>FrameApp</TT>
using the <TT>setMenuBar()</TT> method. A <TT>Frame</TT> object
can have only one menu bar.
<P>
The <TT>paint()</TT> method is used to initially draw the window
display and then to update it as the result of window operations.
It simply displays the text <TT>Sample Text</TT> at pixel location
(160,100) within the window <TT>Graphics</TT> object.
<P>
The <TT>handleEvent()</TT> method is the last method to be covered.
It is responsible for handling all of the user-generated events
and provides most of the program's functionality. The <TT>handleEvent()</TT>
method handles the <TT>WINDOWS_DESTROY</TT> event by invoking
the <TT>System.exit()</TT> method to terminate the program's execution.
It also handles the <TT>Button</TT> and <TT>MenuItem</TT> action
events. The Exit and Quit menu items also result in the program's
execution being terminated.
<P>
When the Title button is clicked, <TT>handleEvent()</TT> uses
the <TT>getTitle()</TT> method to determine whether the current
window title equals the title stored in <TT>defaultTitle</TT>.
If they are equal, the window's title is set to Here's an alternative
title. If the current title differs from the value stored in <TT>defaultTitle</TT>,
the window's title is set using <TT>defaultTitle</TT>.
<P>
When the Menu Bar button is clicked, <TT>handleEvent()</TT> uses
the <TT>getMenuBar()</TT> method to check whether the window's
current menu bar is the same as the value of <TT>defaultMenuBar</TT>.
If they are the same, the window's menu bar is set to the value
of <TT>alternativeMenuBar</TT>. If they are different, the window's
menu bar is set to the value of <TT>defaultMenuBar</TT>.
<P>
When the Resizable button is clicked, <TT>handleEvent()</TT> uses
the <TT>isResizable()</TT> method to determine whether the window
is currently resizable and then sets it to the opposite value.
<P>
When the Cursor button is clicked, <TT>handleEvent()</TT> cycles
the <TT>cursorIndex</TT> to the next cursor value within the <TT>cursors[]</TT>
array and sets the cursor to this value using the <TT>setCursor()</TT>
method.
<P>
When the Background button is clicked, <TT>handleEvent()</TT>
cycles the <TT>backgroundIndex</TT> variable to the next color
value within the <TT>color[]</TT> array and sets the background
to this value using the <TT>setBackground()</TT> method. It then
invokes the <TT>repaint()</TT> method of the <TT>Component</TT>
class to cause the screen to be repainted. The Foreground button
is handled in a similar manner.
<P>
When the Font button is clicked, <TT>handleEvent()</TT> cycles
the <TT>fontIndex</TT> to the next font name and creates a new
14-point plain font of that type. It then invokes the <TT>setFont()</TT>
method of the <TT>Component</TT> class to change the current font.
The <TT>repaint()</TT> method is used to cause the screen to be
repainted.
<H2><A NAME="UsingLayouts"><B><FONT SIZE=5 COLOR=#FF0000>Using
Layouts</FONT></B></A></H2>
<P>
The <TT>FrameApp</TT> program uses a number of panels and layouts
to organize the way that labels and buttons are presented in the
application window. The organization of any object that is a subclass
of the <TT>Container</TT> class is governed by a layout. The layout
determines how objects of class <TT>Component</TT> are positioned
when they are added via the <TT>add()</TT> method to the <TT>Container</TT>
object. Five types of layouts are provided by Java: <TT>BorderLayout</TT>,
<TT>CardLayout</TT>, <TT>FlowLayout</TT>, <TT>GridLayout</TT>,
and <TT>GridBagLayout</TT>. Other, custom layouts can also be
defined.
<P>
The <TT>BorderLayout</TT> class is the default layout used by
<TT>Frame</TT> objects. An object of the <TT>Component</TT> class
is added to either the North, South, East, West, or Center of
the component, as shown in <A HREF="f19-7.gif" >Figure 19.7</A>.
<P>
<A HREF="f19-7.gif"><B>Figure 19.7 :</B><I> A <TT>BorderLayout</TT> example.</I></A>
<P>
In the <TT>FrameApp</TT> program, the <TT>mainPanel</TT> was added
to the South region of the window. The remainder of the program
window was used by the program's default <TT>Graphics</TT> object,
which was placed in the North region of the window. No <TT>Component</TT>
objects were added to the East, West, or Center regions.
<P>
The <TT>FlowLayout</TT> class is the default layout used for <TT>Panel</TT>
objects. If a container uses a <TT>FlowLayout</TT>, the container
is filled left to right from top to bottom. An example of this
layout is the two rows of buttons that were added to <TT>panel1</TT>
and <TT>panel2</TT>. The <TT>FlowLayout</TT> class causes each
component to be centered in its container, by default.
<P>
The <TT>GridLayout</TT> class organizes a container as a grid
of <I>n</I> rows and <I>m</I> columns. Each grid cell is the same
size, as shown in <A HREF="f19-8.gif" >Figure 19.8</A>.
<P>
<A HREF="f19-8.gif"><B>Figure 19.8 :</B><I> A <TT>Gridlayout</TT> example.</I></A>
<P>
The <TT>GridLayout</TT> class is used with the <TT>mainPanel</TT>
in the <TT>FrameApp</TT> program. A grid of four rows and one
column is used to stack <TT>panel1</TT> and <TT>panel2</TT> with
the two labels to produce the display shown in <A HREF="f19-2.gif" >Figure 19.2</A>.
<P>
The <TT>CardLayout</TT> class organizes a container like a deck
of cards. The first component in the container is initially displayed.
Other components are then displayed using the <TT>next()</TT>,
<TT>previous()</TT>, <TT>first()</TT>, <TT>last()</TT>, and <TT>show()</TT>
methods of the <TT>CardLayout</TT> class. The <TT>CardLayout</TT>
class is illustrated in Listing 19.2.
<P>
The <TT>GridBagLayout</TT> class is the most complex and flexible
of the layout classes. It is similar to the <TT>GridLayout</TT>
class in that it organizes its components in a grid, but it is
more flexible because it allows the rows and columns to have different
sizes. In addition, components are allowed to span multiple rows
and columns. The positioning of each component is controlled by
the use of objects of class <TT>GridBagConstraints</TT>. The <TT>GridBagConstraints</TT>
objects identify the preferred size of each component and specify
constraints on how they should be laid out. You should refer to
the API documentation for the <TT>GridBagLayout</TT> and <TT>GridBagConstraints</TT>
classes to read the detailed description of the variables and
methods of these classes. The <TT>GridBagLayout</TT> class is
also demonstrated in the <TT>LayoutApp</TT> program in Listing
19.2.
<P>
The <TT>LayoutApp</TT> program illustrates the use of each of
the five predefined Java layouts. These layouts position buttons
within panels to show how the various layouts are organized and
displayed. A <TT>Panel</TT> pull-down menu is used to switch to
each of the layout classes.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 19.2. The source code of the </B><TT><B><FONT FACE="Courier New">LayoutApp</FONT></B></TT><B>
program.</B>
<P>
<TT>import java.awt.*;<BR>
<BR>
<FONT FACE="Courier New">public class LayoutApp extends Frame
{<BR>
&nbsp;MenuBar menuBar;<BR>
&nbsp;Panel panels[];<BR>
&nbsp;Panel currentPanel;<BR>
&nbsp;static int border=0;<BR>
&nbsp;static int card=1;<BR>
&nbsp;static int flow=2;<BR>
&nbsp;static int grid=3;<BR>
&nbsp;static int gridBag=4;<BR>
&nbsp;Menu cardMenu;<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;LayoutApp app = new LayoutApp();<BR>
&nbsp;}<BR>
&nbsp;public LayoutApp() {<BR>
&nbsp;&nbsp;super(&quot;BorderLayout&quot;);<BR>
&nbsp;&nbsp;setup();<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(400,400);<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void setup() {<BR>
&nbsp;&nbsp;setupMenuBar();<BR>
&nbsp;&nbsp;setupPanels();<BR>
&nbsp;}<BR>
&nbsp;void setupMenuBar() {<BR>
&nbsp;&nbsp;menuBar = new MenuBar();<BR>
&nbsp;&nbsp;Menu fileMenu = new Menu(&quot;File&quot;);<BR>
&nbsp;&nbsp;fileMenu.add(new MenuItem(&quot;Exit&quot;));<BR>
&nbsp;&nbsp;menuBar.add(fileMenu);<BR>
&nbsp;&nbsp;Menu panelMenu = new Menu(&quot;Panel&quot;);<BR>
&nbsp;&nbsp;panelMenu.add(new MenuItem(&quot;BorderLayout&quot;));
<BR>
&nbsp;&nbsp;panelMenu.add(new MenuItem(&quot;CardLayout&quot;));
<BR>
&nbsp;&nbsp;panelMenu.add(new MenuItem(&quot;FlowLayout&quot;));
<BR>
&nbsp;&nbsp;panelMenu.add(new MenuItem(&quot;GridLayout&quot;));
<BR>
&nbsp;&nbsp;panelMenu.add(new MenuItem(&quot;GridBagLayout&quot;));
<BR>
&nbsp;&nbsp;menuBar.add(panelMenu);<BR>
&nbsp;&nbsp;cardMenu = new Menu(&quot;Card&quot;);<BR>
&nbsp;&nbsp;cardMenu.add(new MenuItem(&quot;First&quot;));<BR>
&nbsp;&nbsp;cardMenu.add(new MenuItem(&quot;Last&quot;));<BR>
&nbsp;&nbsp;cardMenu.add(new MenuItem(&quot;Next&quot;));<BR>
&nbsp;&nbsp;cardMenu.add(new MenuItem(&quot;Previous&quot;));
<BR>
&nbsp;&nbsp;setMenuBar(menuBar);<BR>
&nbsp;}<BR>
&nbsp;void setupPanels() {<BR>
&nbsp;&nbsp;panels = new Panel[5];<BR>
&nbsp;&nbsp;for(int i=0;i&lt;5;++i) panels[i]=new Panel();<BR>
&nbsp;&nbsp;panels[border].setLayout(new BorderLayout());<BR>
&nbsp;&nbsp;panels[card].setLayout(new CardLayout());<BR>
&nbsp;&nbsp;panels[flow].setLayout(new FlowLayout());<BR>
&nbsp;&nbsp;panels[grid].setLayout(new GridLayout(2,3));<BR>
&nbsp;&nbsp;GridBagLayout gridBagLayout = new GridBagLayout();
<BR>
&nbsp;&nbsp;panels[gridBag].setLayout(gridBagLayout);<BR>
&nbsp;&nbsp;panels[border].add(&quot;North&quot;,new Button(&quot;North&quot;));
<BR>
&nbsp;&nbsp;panels[border].add(&quot;South&quot;,new Button(&quot;South&quot;));
<BR>
&nbsp;&nbsp;panels[border].add(&quot;East&quot;,new Button(&quot;East&quot;));
<BR>
&nbsp;&nbsp;panels[border].add(&quot;West&quot;,new Button(&quot;West&quot;));
<BR>
&nbsp;&nbsp;panels[border].add(&quot;Center&quot;,new Button(&quot;Center&quot;));
<BR>
&nbsp;&nbsp;String cardButtons[] = {&quot;First&quot;,&quot;Second&quot;,&quot;Third&quot;,&quot;Fourth&quot;,&quot;Last&quot;};
<BR>
&nbsp;&nbsp;String flowButtons[] = {&quot;One&quot;,&quot;Two&quot;,&quot;Three&quot;,&quot;Four&quot;,&quot;Five&quot;};
<BR>
&nbsp;&nbsp;String gridButtons[] = {&quot;(0,0)&quot;,&quot;(1,0)&quot;,&quot;(2,0)&quot;,&quot;(0,1)&quot;,&quot;(1,1)&quot;,&quot;(2,1)&quot;};
<BR>
&nbsp;&nbsp;for(int i=0;i&lt;cardButtons.length;++i)<BR>
&nbsp;&nbsp;&nbsp;panels[card].add(new Button(cardButtons[i]));
<BR>
&nbsp;&nbsp;for(int i=0;i&lt;flowButtons.length;++i)<BR>
&nbsp;&nbsp;&nbsp;panels[flow].add(new Button(flowButtons[i]));
<BR>
&nbsp;&nbsp;for(int i=0;i&lt;gridButtons.length;++i)<BR>
&nbsp;&nbsp;&nbsp;panels[grid].add(new Button(gridButtons[i]));
<BR>
&nbsp;&nbsp;Button gridBagButtons[] = new Button[9];<BR>
&nbsp;&nbsp;for(int i=0;i&lt;9;++i) gridBagButtons[i] = new Button(&quot;Button&quot;+i);
<BR>
&nbsp;&nbsp;int gridx[] = {0,1,2,0,2,0,1,1,0};<BR>
&nbsp;&nbsp;int gridy[] = {0,0,0,1,1,2,2,3,4};<BR>
&nbsp;&nbsp;int gridwidth[] = {1,1,1,2,1,1,1,2,3};<BR>
&nbsp;&nbsp;int gridheight[] = {1,1,1,1,2,2,1,1,1};<BR>
&nbsp;&nbsp;GridBagConstraints gridBagConstraints[] = new GridBagConstraints[9];
<BR>
&nbsp;&nbsp;for(int i=0;i&lt;9;++i) {<BR>
&nbsp;&nbsp;&nbsp;gridBagConstraints[i] = new GridBagConstraints();
<BR>
&nbsp;&nbsp;&nbsp;gridBagConstraints[i].fill=GridBagConstraints.BOTH;
<BR>
&nbsp;&nbsp;&nbsp;gridBagConstraints[i].gridx=gridx[i];<BR>
&nbsp;&nbsp;&nbsp;gridBagConstraints[i].gridy=gridy[i];<BR>
&nbsp;&nbsp;&nbsp;gridBagConstraints[i].gridwidth=gridwidth[i];
<BR>
&nbsp;&nbsp;&nbsp;gridBagConstraints[i].gridheight=gridheight[i];
<BR>
&nbsp;&nbsp;&nbsp;gridBagLayout.setConstraints(gridBagButtons[i],gridBagConstraints[i]);
<BR>
&nbsp;&nbsp;&nbsp;panels[gridBag].add(gridBagButtons[i]);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;add(&quot;Center&quot;,panels[border]);<BR>
&nbsp;&nbsp;currentPanel=panels[border];<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.ACTION_EVENT){<BR>
&nbsp;&nbsp;&nbsp;if(event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(&quot;Exit&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;BorderLayout&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switchPanels(panels[border],&quot;BorderLayout&quot;,false);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;CardLayout&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switchPanels(panels[card],&quot;CardLayout&quot;,true);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;FlowLayout&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switchPanels(panels[flow],&quot;FlowLayout&quot;,false);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;GridLayout&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switchPanels(panels[grid],&quot;GridLayout&quot;,false);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;GridBagLayout&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switchPanels(panels[gridBag],&quot;GridBagLayout&quot;,false);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;First&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CardLayout currentLayout=(CardLayout)currentPanel.getLayout();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentLayout.first(currentPanel);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;Last&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CardLayout currentLayout=(CardLayout)currentPanel.getLayout();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentLayout.last(currentPanel);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;Next&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CardLayout currentLayout=(CardLayout)currentPanel.getLayout();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentLayout.next(currentPanel);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else if(&quot;Previous&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CardLayout currentLayout=(CardLayout)currentPanel.getLayout();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentLayout.previous(currentPanel);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
&nbsp;void switchPanels(Panel newPanel,String newTitle,boolean
setCardMenu) {<BR>
&nbsp;&nbsp;remove(currentPanel);<BR>
&nbsp;&nbsp;currentPanel=newPanel;<BR>
&nbsp;&nbsp;add(&quot;Center&quot;,currentPanel);<BR>
&nbsp;&nbsp;setTitle(newTitle);<BR>
&nbsp;&nbsp;if(setCardMenu) menuBar.add(cardMenu);<BR>
&nbsp;&nbsp;else menuBar.remove(cardMenu);<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
When you compile and run <TT>LayoutApp</TT>, the opening window
should look like the one shown in <A HREF="f19-9.gif" >Figure 19.9</A>.
<P>
<A HREF="f19-9.gif"><B>Figure 19.9 :</B><I> The opening window of the <TT>LayoutApp</TT> program.</I></A>
<P>
The opening window illustrates the use of the <TT>BorderLayout</TT>
class by displaying a panel that uses the <TT>BorderLayout</TT>.
Notice that the window's title is BorderLayout. The title is updated
when a new layout class is displayed. To switch layouts, use the
Panel pull-down menu as shown in <A HREF="f19-10.gif" >Figure 19.10</A>.
<P>
<A HREF="f19-10.gif"><B>Figure 19.10 :</B><I> The Panel menu.</I></A>
<P>
Select the CardLayout menu item from the Panel menu. The window
displays a panel that uses a <TT>CardLayout</TT> object, and the
window's title is updated to identify the new layout. An additional
Card pull-down menu is added to the menu bar so that the different
button components in the <TT>CardLayout</TT> object can be displayed.
(<A HREF="f19-11.gif" >See Figure 19.11</A>.) There are five buttons,
labeled First, Second, Third, Fourth, and Last. Use the Next menu
item of the Card menu to step through these buttons. After you
have reached the button labeled Last, use the Previous menu item
to step back through the list of buttons. Next, try using the
First and Last menu items to go to the first and last buttons
in the panel governed by the <TT>CardLayout</TT> object.
<P>
<A HREF="f19-11.gif"><B>Figure 19.11 :</B><I> A <TT>CardLayout</TT> example.</I></A>
<P>
Select the FlowLayout menu item from the Panel menu. The window
displays five buttons, labeled One through Five, across the top
of the window as shown in <A HREF="f19-12.gif" >Figure 19.12</A>.
The Card pull-down menu is removed and the window's title is changed
to FlowLayout.
<P>
<A HREF="f19-12.gif"><B>Figure 19.12 :</B><I> A <TT>FlowLayout</TT> example.</I></A>
<P>
Select the GridLayout menu item from the Panel menu. The window
displays six buttons in a rectangular grid that is two rows by
three columns, with each button labeled with its x,y-coordinate,
as shown in <A HREF="f19-13.gif" >Figure 19.13</A>. The window's
title is changed to GridLayout.
<P>
<A HREF="f19-13.gif"><B>Figure 19.13 :</B><I> A <TT>GridLayout</TT> example.</I></A>
<P>
Select the GridBagLayout menu item from the Panel menu. The window
displays nine buttons arranged in a free-form manner in a rectangular
grid, five rows by three columns, as shown in <A HREF="f19-14.gif" >Figure 19.14</A>.
The window's title is changed to GridBagLayout.
<P>
<A HREF="f19-14.gif"><B>Figure 19.14 :</B><I> A <TT>GridBagLayout</TT> example</I></A>
<P>
Now that you have an idea of what the <TT>LayoutApp</TT> program
does, let's see how it works.
<P>
The <TT>LayoutApp</TT> class declares several variables and constants.
The <TT>menuBar</TT> variable provides the program's menu bar.
It is updated by different class methods when it is initially
set up and displayed and when the Card menu is added and removed.
The <TT>cardMenu</TT> variable is also declared. The <TT>panels[]</TT>
array consists of five panels that illustrate the five predefined
Java layouts. It is indexed by the <TT>border</TT>, <TT>card</TT>,
<TT>flow</TT>, <TT>grid</TT>, and <TT>gridBag</TT> constants.
The <TT>currentPanel</TT> variable is used to keep track of the
current panel being displayed.
<P>
The <TT>main()</TT> function should seem to be pretty standard
to you by now. It is typical of the <TT>main()</TT> function found
in most window programs.
<P>
The <TT>LayoutApp</TT> class invokes the superclass constructor
with the BorderLayout title. <TT>BorderLayout</TT> is the layout
of the first panel to be displayed and is the default layout for
<TT>Frame</TT> objects. The <TT>setup()</TT> method is invoked
to set up the menu bar and panels used in the program. The rest
of the <TT>LayoutApp</TT> constructor is fairly standard. The
<TT>pack()</TT>, <TT>resize()</TT>, and <TT>show()</TT> methods
are used to organize, resize, open, and display the <TT>LayoutApp</TT>
main window.
<P>
The <TT>setupMenuBar()</TT> method creates a new menu bar and
assigns it to the <TT>menuBar</TT> variable. A File menu is created
with an Exit menu item and is then added to the object referenced
by <TT>menuBar</TT>. A Panel menu is created and added to the
<TT>menuBar</TT> in a similar fashion. The Panel menu is given
buttons that identify each of the five layouts. A third Card menu
is also created, but is not added to the <TT>menuBar</TT>. It
is given the First, Last, Next, and Previous menu items. Finally,
the object referenced by <TT>menuBar</TT> is set as the menu bar
by invoking the <TT>setMenuBar()</TT> method of the <TT>Frame</TT>
class.
<P>
The <TT>setupPanels()</TT> method is the most complicated method
in this program. It is where all of the five different panels
are created and laid out. First, the <TT>panels[]</TT> array is
allocated and then five new <TT>Panel</TT> objects are assigned
to the array's elements. Then each of the panels is laid out.
<P>
The <TT>panels[border]</TT> array element has its layout set to
a <TT>BorderLayout</TT> object using the <TT>setLayout()</TT>
method of the <TT>Container</TT> class. The <TT>panels[card]</TT>
array element has its layout set to a <TT>CardLayout</TT> object.
The <TT>panels[flow]</TT> array element has its layout set to
a <TT>FlowLayout</TT> object. The <TT>panels[grid]</TT> array
element has its layout set to a <TT>GridLayout</TT> object, two
rows by three columns. The layout of the <TT>panels[gridBag]</TT>
array element is separately created and assigned to the <TT>gridBagLayout</TT>
variable. It is used later on when the panel is laid out with
objects of class <TT>GridBagConstraints</TT>.
<P>
After each of the panels has had its layout set, buttons are added
to illustrate how the individual layouts are displayed. The <TT>panels[border]</TT>
panel is given five buttons, labeled North, South, East, West,
and Center. These buttons are added to the positions identified
by their labels. The buttons for the <TT>panels[card]</TT>, <TT>panels[flow]</TT>,
and <TT>panels[grid]</TT> panels are added by first creating an
array of labels for each panel and then using a <TT>for</TT> statement
to step through the arrays, creating buttons and adding them to
their respective panels. This approach greatly simplifies the
process of creating buttons and adding them to panels.
<P>
The buttons for the <TT>panels[gridBag]</TT> panel are created
a little differently by iterating from 0 through 8 and appending
each number to the end of the <TT>&quot;Button&quot;</TT> string.
The <TT>gridx[]</TT>, <TT>gridy[]</TT>, <TT>gridwidth[]</TT>,
and <TT>gridheight[]</TT> arrays are used to produce the objects
of class <TT>GridBagConstraints</TT> that are used to lay out
the buttons in the <TT>panels[gridBag]</TT> panel. The <TT>gridx[]</TT>
array identifies the x-coordinate of each button within the 5-by-3
grid. The <TT>gridy[]</TT> array identifies they-coordinate. The
<TT>gridwidth[]</TT> array identifies button widths in terms of
number of grid cells. The <TT>gridheight[]</TT> array identifies
the height of each button in grid cells.
<P>
An array of <TT>GridBagConstraint</TT> objects is created and
assigned to the <TT>gridBagConstraints</TT> variable. Each of
the array's elements is then created and initialized using the
<TT>gridx[]</TT>, <TT>gridy[]</TT>, <TT>gridwidth[]</TT>, and
<TT>gridheight[]</TT> arrays. The fill variable of each array
element is set to the <TT>GridBagConstraints.BOTH</TT> constant,
indicating that the buttons may grow both vertically and horizontally
to fill the space assigned to them as the result of the way they
are laid out. The <TT>setConstraints()</TT> method is used to
associate each button with its <TT>gridBagConstraints[]</TT> element
within the <TT>GridBagLayout</TT> object referenced by <TT>gridBagLayout</TT>.
The last line in the <TT>for</TT> statement adds each button to
the <TT>panels[gridBag]</TT> panel.
<P>
Finally, the <TT>panels[border]</TT> panel is assigned as the
initial panel to be displayed when the program starts up. The
<TT>currentPanel</TT> variable is also initialized to <TT>panels[border]</TT>.
<P>
The <TT>handleEvent()</TT> method handles the processing of user
menu selections. The <TT>WINDOWS_DESTROY</TT> event and the Exit
menu option result in immediate program termination. The menu
items associated with each layout result in the appropriate panel
being selected and displayed. This is accomplished using the <TT>switchPanels()</TT>
method.
<P>
The First, Last, Next, and Previous menu items are processed by
getting the layout associated with the current panel and then
invoking the <TT>first()</TT>, <TT>last()</TT>, <TT>next()</TT>,
or <TT>previous()</TT> methods of the <TT>CardLayout</TT> class
to select the appropriate button to be displayed within the <TT>panels[card]</TT>
panel.
<P>
The <TT>switchPanels()</TT> method is used to provide a common
method of switching from one panel to another. It begins by using
the <TT>remove()</TT> method of the <TT>Container</TT> class to
remove the current panel from the <TT>LayoutApp</TT> main window.
The current panel is set based on the <TT>Panel</TT> object passed
to the method via the <TT>newPanel</TT> parameter. The new current
panel is then added to the center of the main window, and the
window's title is set based on the <TT>newTitle</TT> string parameter.
The <TT>cardMenu</TT> is added or removed from the menu bar based
on the <TT>boolean</TT> <TT>setCardMenu</TT> parameter. Finally,
the new panel is displayed by invoking the <TT>show()</TT> method
of the <TT>Window</TT> class.
<H2><A NAME="ConnectingCodetoEvents"><B><FONT SIZE=5 COLOR=#FF0000>Connecting
Code to Events</FONT></B></A></H2>
<P>
Although the various graphical user interface subclasses of the
<TT>Component</TT> class are what is seen by the user when he
interacts with a window program, the event-handling software is
what actually connects these components to the code that implements
the program's behavior.
<P>
Events are generated as the result of the user's interaction with
the program's GUI components. These events are defined in the
<TT>Event</TT> class and cover a large variety of user actions
using the mouse and keyboard.
<P>
Until now you've been handling events using monolithic <TT>handleEvent()</TT>
methods. Although this approach works, it can sometimes become
difficult to manage. An alternative approach is to handle events
locally by each GUI component, which allows event handling to
be more closely aligned with the components generating the event.
Local component event handling is performed using the <TT>handleEvent()</TT>,
<TT>action()</TT>, and other methods, such as <TT>mouseUp()</TT>
and <TT>mouseDown()</TT>, that are inherited from the <TT>Component</TT>
class. Consult the <TT>Component</TT> class API for a detailed
list of these methods. In order to perform local event handling
you must subclass these components (for example, <TT>Button</TT>,
<TT>Checkbox</TT>, <TT>Scrollbar</TT>) and override their event-handling
methods.
<P>
The <TT>handleEvent()</TT> and <TT>action()</TT> methods are the
most common methods used for event handling. You've already used
the <TT>handleEvent()</TT> method quite extensively. The <TT>action()</TT>
method is used to handle events that have the <TT>ACTION_EVENT</TT>
type. These events are typical of GUI components such as menu
items, buttons, lists, and checkboxes.
<P>
The <TT>action()</TT> method is passed the event along with an
object containing the value of the event's <TT>arg</TT> variable.
This object describes the <TT>Component</TT> being acted upon.
For example, clicking a button results in the button's label being
assigned to the <TT>arg</TT> variable. The window sampler program
presented in the next section shows how the <TT>action()</TT>
method is used.
<H2><A NAME="TheWindowSamplerProgram"><B><FONT SIZE=5 COLOR=#FF0000>The
Window Sampler Program</FONT></B></A></H2>
<P>
The <TT>SamplerApp</TT> program serves a dual purpose. It shows
how each of the most common GUI components are displayed and accessed
and also demonstrates local event-handling approaches for each
of these components. The program displays <TT>Label</TT>, <TT>TextField</TT>,
<TT>TextArea</TT>, <TT>Button</TT>, <TT>Canvas</TT>, <TT>Checkbox</TT>,
<TT>Choice</TT>, <TT>List</TT>, and <TT>Scrollbar</TT> objects
and shows how to handle events associated with these objects.
The program's source code is shown in Listing 19.3.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 19.3. The source code of the </B><TT><B><FONT FACE="Courier New">SamplerApp</FONT></B></TT><B>
program.</B>
<P>
<TT>import java.awt.*;<BR>
<FONT FACE="Courier New">import java.lang.System;<BR>
<BR>
public class SamplerApp extends Frame {<BR>
&nbsp;TextArea textArea;<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;SamplerApp app = new SamplerApp();<BR>
&nbsp;}<BR>
&nbsp;public SamplerApp() {<BR>
&nbsp;&nbsp;super(&quot;Windows Sampler&quot;);<BR>
&nbsp;&nbsp;setup();<BR>
&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;resize(400,400);<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void setup() {<BR>
&nbsp;&nbsp;setupMenuBars();<BR>
&nbsp;&nbsp;setupPanels();<BR>
&nbsp;}<BR>
&nbsp;void setupMenuBars() {<BR>
&nbsp;&nbsp;MenuBar menuBar = new MenuBar();<BR>
&nbsp;&nbsp;Menu fileMenu = new Menu(&quot;File&quot;);<BR>
&nbsp;&nbsp;fileMenu.add(new MenuItem(&quot;Exit&quot;));<BR>
&nbsp;&nbsp;menuBar.add(fileMenu);<BR>
&nbsp;&nbsp;setMenuBar(menuBar);<BR>
&nbsp;}<BR>
&nbsp;void setupPanels() {<BR>
&nbsp;&nbsp;Panel mainPanel = new Panel();<BR>
&nbsp;&nbsp;mainPanel.setLayout(new GridLayout(3,3));<BR>
&nbsp;&nbsp;Panel panels[][] = new Panel[3][3];<BR>
&nbsp;&nbsp;for(int i=0;i&lt;3;++i){<BR>
&nbsp;&nbsp;&nbsp;for(int j=0;j&lt;3;++j){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;panels[j][i] = new Panel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;panels[j][i].setLayout(new FlowLayout(FlowLayout.LEFT));
<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;panels[0][0].add(new Label(&quot;Text Field:&quot;));
<BR>
&nbsp;&nbsp;panels[0][0].add(new MyTextField(&quot;A text field.&quot;,15));
<BR>
&nbsp;&nbsp;panels[1][0].add(new Label(&quot;Text Area:&quot;));
<BR>
&nbsp;&nbsp;textArea = new TextArea(&quot;A text area.&quot;,5,15);
<BR>
&nbsp;&nbsp;panels[1][0].add(textArea);<BR>
&nbsp;&nbsp;panels[2][0].add(new Label(&quot;Button:&quot;));
<BR>
&nbsp;&nbsp;panels[2][0].add(new MyButton(&quot;Blank Text Area&quot;,textArea));
<BR>
&nbsp;&nbsp;panels[0][1].add(new Label(&quot;Canvas:&quot;));
<BR>
&nbsp;&nbsp;panels[0][1].add(new MyCanvas());<BR>
&nbsp;&nbsp;String checkboxStrings[] = {&quot;Checkboxes:&quot;,&quot;Java&quot;,&quot;Developer's&quot;,&quot;Guide&quot;};
<BR>
&nbsp;&nbsp;panels[1][1].add(new MyCheckboxGroup(checkboxStrings));
<BR>
&nbsp;&nbsp;panels[2][1].add(new Label(&quot;Choices:&quot;));
<BR>
&nbsp;&nbsp;String choiceStrings[] = {&quot;Yes&quot;,&quot;No&quot;,&quot;Maybe&quot;};
<BR>
&nbsp;&nbsp;panels[2][1].add(new MyChoice(choiceStrings,textArea));
<BR>
&nbsp;&nbsp;panels[0][2].add(new Label(&quot;List:&quot;));<BR>
&nbsp;&nbsp;String listStrings[] = {&quot;Sleepy&quot;,&quot;Sneezy&quot;,&quot;Grumpy&quot;,&quot;Dopey&quot;,&quot;Doc&quot;,
<BR>
&nbsp;&nbsp;&nbsp;&quot;Happy&quot;,&quot;Bashful&quot;};<BR>
&nbsp;&nbsp;panels[0][2].add(new MyList(listStrings,textArea));
<BR>
&nbsp;&nbsp;panels[1][2].setLayout(new BorderLayout());<BR>
&nbsp;&nbsp;panels[1][2].add(&quot;Center&quot;,new Label(&quot;Horizontal
Scrollbar:&quot;));<BR>
&nbsp;&nbsp;panels[1][2].add(&quot;South&quot;,new MyScrollbar(Scrollbar.HORIZONTAL,50,10,0,
<BR>
&nbsp;&nbsp;&nbsp;100,textArea));<BR>
&nbsp;&nbsp;panels[2][2].setLayout(new BorderLayout());<BR>
&nbsp;&nbsp;panels[2][2].add(&quot;North&quot;,new Label(&quot;Vertical
Scrollbar:&quot;));<BR>
&nbsp;&nbsp;panels[2][2].add(&quot;East&quot;,new MyScrollbar(Scrollbar.VERTICAL,50,10,0,
<BR>
&nbsp;&nbsp;&nbsp;1000,textArea));<BR>
&nbsp;&nbsp;for(int i=0;i&lt;3;++i)<BR>
&nbsp;&nbsp;&nbsp;for(int j=0;j&lt;3;++j)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;mainPanel.add(panels[j][i]);<BR>
&nbsp;&nbsp;add(&quot;Center&quot;,mainPanel);<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.WINDOW_DESTROY){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.ACTION_EVENT){<BR>
&nbsp;&nbsp;&nbsp;if(event.target instanceof MenuItem){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(&quot;Exit&quot;.equals(event.arg)){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
}<BR>
class MyTextField extends TextField {<BR>
&nbsp;public MyTextField(String text,int columns) {<BR>
&nbsp;&nbsp;super(text,columns);<BR>
&nbsp;}<BR>
&nbsp;public boolean action(Event event,Object arg) {<BR>
&nbsp;&nbsp;String text = getText();<BR>
&nbsp;&nbsp;setText(text.toUpperCase());<BR>
&nbsp;&nbsp;return true;<BR>
&nbsp;}<BR>
}<BR>
class MyButton extends Button {<BR>
&nbsp;TextArea textArea;<BR>
&nbsp;public MyButton(String text,TextArea newTextArea) {<BR>
&nbsp;&nbsp;super(text);<BR>
&nbsp;&nbsp;textArea = newTextArea;<BR>
&nbsp;}<BR>
&nbsp;public boolean action(Event event,Object arg) {<BR>
&nbsp;&nbsp;textArea.setText(&quot;&quot;);<BR>
&nbsp;&nbsp;return true;<BR>
&nbsp;}<BR>
}<BR>
class MyCanvas extends Canvas {<BR>
&nbsp;int x = -1;<BR>
&nbsp;int y = -1;<BR>
&nbsp;int boxSize = 10;<BR>
&nbsp;public MyCanvas() {<BR>
&nbsp;&nbsp;super();<BR>
&nbsp;&nbsp;resize(75,75);<BR>
&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;setForeground(Color.red);<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;public boolean mouseDown(Event event,int xClick,int yClick)
{<BR>
&nbsp;&nbsp;x = xClick;<BR>
&nbsp;&nbsp;y = yClick;<BR>
&nbsp;&nbsp;repaint();<BR>
&nbsp;&nbsp;return true;<BR>
&nbsp;}<BR>
&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;setBackground(Color.white);<BR>
&nbsp;&nbsp;setForeground(Color.red);<BR>
&nbsp;&nbsp;if(x&gt;=0 &amp;&amp; y&gt;=0) g.fillRect(x,y,boxSize,boxSize);
<BR>
&nbsp;}<BR>
}<BR>
class MyCheckboxGroup extends Panel {<BR>
&nbsp;String labelString;<BR>
&nbsp;String checkboxLabels[];<BR>
&nbsp;Checkbox checkboxes[];<BR>
&nbsp;int numBoxes;<BR>
&nbsp;TextField results;<BR>
&nbsp;public MyCheckboxGroup(String strings[]) {<BR>
&nbsp;&nbsp;super();<BR>
&nbsp;&nbsp;labelString = strings[0];<BR>
&nbsp;&nbsp;numBoxes = strings.length-1;<BR>
&nbsp;&nbsp;checkboxLabels = new String[numBoxes];<BR>
&nbsp;&nbsp;for(int i=0;i&lt;numBoxes;++i)<BR>
&nbsp;&nbsp;&nbsp;checkboxLabels[i] = strings[i+1];<BR>
&nbsp;&nbsp;results = new TextField(&quot;&quot;,15);<BR>
&nbsp;&nbsp;setupPanel();<BR>
&nbsp;&nbsp;show();<BR>
&nbsp;}<BR>
&nbsp;void setupPanel() {<BR>
&nbsp;&nbsp;setLayout(new GridLayout(numBoxes+2,1));<BR>
&nbsp;&nbsp;add(new Label(labelString));<BR>
&nbsp;&nbsp;checkboxes = new Checkbox[numBoxes];<BR>
&nbsp;&nbsp;for(int i=0;i&lt;numBoxes;++i){<BR>
&nbsp;&nbsp;&nbsp;checkboxes[i] = new Checkbox(checkboxLabels[i]);
<BR>
&nbsp;&nbsp;&nbsp;add(checkboxes[i]);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;add(results);<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.ACTION_EVENT){<BR>
&nbsp;&nbsp;&nbsp;if(event.target instanceof Checkbox){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String newResults = &quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;for(int i=0;i&lt;numBoxes;++i)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(checkboxes[i].getState())<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newResults = newResults +
&quot; &quot; +checkboxes[i].getLabel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;results.setText(newResults);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
}<BR>
class MyChoice extends Choice {<BR>
&nbsp;TextArea text;<BR>
&nbsp;public MyChoice(String strings[],TextArea textArea) {<BR>
&nbsp;&nbsp;super();<BR>
&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;for(int i=0;i&lt;strings.length;++i)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;addItem(strings[i]);<BR>
&nbsp;&nbsp;&nbsp;text = textArea;<BR>
&nbsp;&nbsp;}catch(NullPointerException ex){<BR>
&nbsp;&nbsp;&nbsp;System.exit(0);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;public boolean action(Event event,Object arg) {<BR>
&nbsp;&nbsp;text.setText((String)arg);<BR>
&nbsp;&nbsp;return true;<BR>
&nbsp;}<BR>
}<BR>
class MyList extends List {<BR>
&nbsp;TextArea text;<BR>
&nbsp;public MyList(String strings[],TextArea textArea) {<BR>
&nbsp;&nbsp;super(3,false);<BR>
&nbsp;&nbsp;for(int i=0;i&lt;strings.length;++i)<BR>
&nbsp;&nbsp;&nbsp;addItem(strings[i]);<BR>
&nbsp;&nbsp;text = textArea;<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.ACTION_EVENT){<BR>
&nbsp;&nbsp;&nbsp;text.setText(&quot;Double-clicked:\n &quot;+event.arg.toString());
<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.LIST_SELECT){<BR>
&nbsp;&nbsp;&nbsp;text.setText(&quot;Selected:\n &quot;+<BR>
&nbsp;&nbsp;&nbsp;&nbsp;getItem((new Integer(event.arg.toString())).intValue()));
<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.LIST_DESELECT){<BR>
&nbsp;&nbsp;&nbsp;text.setText(&quot;Deselected:\n &quot;+<BR>
&nbsp;&nbsp;&nbsp;&nbsp;getItem((new Integer(event.arg.toString())).intValue()));
<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
}<BR>
class MyScrollbar extends Scrollbar {<BR>
&nbsp;TextArea text;<BR>
&nbsp;public MyScrollbar(int orientation,int value,int visible,int
min,int max,<BR>
&nbsp;&nbsp;TextArea textArea) {<BR>
&nbsp;&nbsp;super(orientation,value,visible,min,max);<BR>
&nbsp;&nbsp;text=textArea;<BR>
&nbsp;}<BR>
&nbsp;public boolean handleEvent(Event event) {<BR>
&nbsp;&nbsp;if(event.id==Event.SCROLL_LINE_UP){<BR>
&nbsp;&nbsp;&nbsp;text.setText(&quot;Position: &quot;+getValue());
<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.SCROLL_LINE_DOWN){<BR>
&nbsp;&nbsp;&nbsp;text.setText(&quot;Position: &quot;+getValue());
<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.SCROLL_PAGE_UP){<BR>
&nbsp;&nbsp;&nbsp;text.setText(&quot;Position: &quot;+getValue());
<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.SCROLL_PAGE_DOWN){<BR>
&nbsp;&nbsp;&nbsp;text.setText(&quot;Position: &quot;+getValue());
<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}else if(event.id==Event.SCROLL_ABSOLUTE){<BR>
&nbsp;&nbsp;&nbsp;text.setText(&quot;Position: &quot;+getValue());
<BR>
&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
After compiling and running the program, the main application
window should be displayed, as shown in <A HREF="f19-15.gif" >Figure 19.15</A>.
The program presents a number of GUI components at various locations
within the window. Labels are used to identify these components.
<P>
<A HREF="f19-15.gif"><B>Figure 19.15 :</B><I> The <TT>SamplerApp</TT> program display.</I></A>
<P>
The <TT>TextField</TT> object presented in the upper left corner
of the window allows a user to type some text. When the user presses
the Enter key from within the text field, an <TT>ACTION_EVENT</TT>
is generated and the text is automatically converted to uppercase.
<P>
The <TT>TextArea</TT> object allows the user to type in and edit
text in a multiline text field. This object is used in the <TT>SamplerApp</TT>
program to display the results of operations on other objects
such as the Blank Text Area button, the choices list, the scrollable
list, and the horizontal and vertical scrollbars.
<P>
The Blank Text Area button causes all text displayed in the <TT>TextArea</TT>
object to be erased. The <TT>Canvas</TT> object displays a red
square at the point where the user clicks within the canvas. When
the <TT>Checkbox</TT> objects are selected, they display the text
of their labels in the underlying text field. The value selected
from the <TT>Choice</TT> and <TT>List</TT> objects is displayed
in the <TT>TextArea</TT> object. The horizontal and vertical scrollbars
also display their scrollbar positions in the <TT>TextArea</TT>
object.
<P>
Play around with each of the GUI components to familiarize yourself
with their operation before moving on to analyze the <TT>SamplerApp</TT>
source code.
<P>
The <TT>SamplerApp</TT> class has one field variable-the <TT>textArea</TT>
variable that is used to hold the <TT>TextArea</TT> object written
to by several GUI components. The <TT>main()</TT> method and <TT>SamplerApp</TT>
constructor are defined in the standard manner. The <TT>setupMenuBars()</TT>,
<TT>setupPanels()</TT>, and <TT>handleEvent()</TT> methods provide
the primary processing for this class, with the bulk of the processing
being performed in <TT>setupPanels()</TT>.
<P>
The <TT>setupMenuBars()</TT> method creates a File menu with an
Exit menu item. The <TT>handleEvent()</TT> method handles the
<TT>WINDOW_DESTROY</TT> event and the Exit menu item. All other
event handling is performed locally by the window components.
<P>
The <TT>setupPanels()</TT> method creates a <TT>Panel</TT> with
a 3-by-3 <TT>GridLayout</TT> and assigns it to <TT>mainPanel</TT>.
It then declares and initializes a 3-by-3 <TT>panels[][]</TT>
array to hold the nine subpanels of the <TT>mainPanel</TT>. The
layout of elements of the <TT>panels[][]</TT> array is set to
a left-justified <TT>FlowLayout</TT>. Subsequent code adds GUI
components to each of the <TT>panels[][]</TT> elements.
<P>
A TextField: label and an object of <TT>MyTextField</TT> are added
to <TT>panels[0][0]</TT>. The <TT>MyTextField</TT> object is assigned
a default value of <TT>&quot;A text field.&quot;</TT> and is set
to 15 columns. A TextArea: label and a 5-row by 15-column <TT>TextArea</TT>
object with the default text of <TT>&quot;A text area.&quot;</TT>
are added to <TT>panels[1][0]</TT>. A Button: label and a <TT>MyButton</TT>
object are added to <TT>panels[2][0]</TT>. The <TT>MyButton</TT>
object is given the Blank Text Area label and is passed the name
of a <TT>TextArea</TT> to be updated.
<P>
A Canvas: label and a <TT>MyCanvas</TT> object are added to <TT>panels[0][1]</TT>.
An array of strings is created and passed to the <TT>MyCheckBoxGroup()</TT>
constructor. The resulting <TT>MyCheckBoxGroup</TT> object is
added to <TT>panels[1][1]</TT>. A Choices: label is added to <TT>panels[2][1]</TT>.
A <TT>MyChoice</TT> object is created using the <TT>choiceStrings[]</TT>
array and the <TT>textArea</TT> variable. The object is also added
to <TT>panels[2][1]</TT>.
<P>
A List: label is added to <TT>panels[0][2]</TT>. A <TT>MyList</TT>
object is created using the names of the Seven Dwarfs and the
<TT>textArea</TT> variable and is added to <TT>panels[1][2]</TT>.
The layouts for <TT>panels[1][2]</TT> and <TT>panels[2][2]</TT>
are changed to a <TT>BorderLayout</TT> object. A Horizontal Scrollbar:
label is added to the center of <TT>panels[1][2]</TT>, and a <TT>MyScrollBar</TT>
object is created and added to the South region of <TT>panels[1][2]</TT>.
A Vertical Scrollbar: label is added to the North region of <TT>panels[2][2]</TT>,
and a <TT>MyScrollBar</TT> object is created and added to the
East region of <TT>panels[2][2]</TT>.
<P>
After the components of all the panels have been created and added
to their respective panels, each of the elements of the <TT>panels[][]</TT>
array is added to the <TT>mainPanel</TT> object. The <TT>mainPanel</TT>
is then added to the center of the <TT>SamplerApp</TT> window.
<P>
After the <TT>SamplerApp</TT> class is declared, seven new classes
are declared that subclass the standard GUI components and provide
custom display and event handling.
<H3><A NAME="MyTextField"><B>MyTextField</B></A></H3>
<P>
The <TT>TextField</TT> class provides the capability for the user
to enter and edit a single line of text. The <TT>MyTextField</TT>
class extends the <TT>TextField</TT> class and handles the event
generated when the user presses the Enter key while editing within
the text field. The <TT>MyTextField()</TT> constructor passes
the <TT>text</TT> and <TT>columns</TT> parameters to the <TT>TextField</TT>
constructor via the superclass constructor call statement. The
<TT>text</TT> parameter identifies a string of text that is to
be initially displayed within the text field. The <TT>columns</TT>
parameter specifies the displayed width of the text field in character
columns. The <TT>action()</TT> method handles the event occurring
when the user presses the Enter key while editing the text field.
It uses the <TT>getText()</TT> method inherited from the <TT>TextComponent</TT>
class to retrieve the current text displayed within the text field,
converts it to uppercase, and then sets the converted text in
the text field using the <TT>setText()</TT> method inherited from
<TT>TextComponent</TT>. The <TT>TextComponent</TT> class is the
parent of both <TT>TextField</TT> and <TT>TextArea</TT>.
<H3><A NAME="MyButton"><B>MyButton</B></A></H3>
<P>
The <TT>MyButton</TT> class extends the <TT>Button</TT> class.
Its constructor takes two parameters: the string label to be displayed
on the button and a reference to the <TT>TextArea</TT> object
that is to be cleared when the button is clicked. The <TT>action()</TT>
method handles the button click and uses the <TT>setText()</TT>
method of <TT>TextComponent</TT> to set the text of the <TT>TextArea</TT>
object to an empty string.
<H3><A NAME="MyCanvas"><B>MyCanvas</B></A></H3>
<P>
The <TT>Canvas</TT> class provides the capability to add individual
drawing components to a container. It is covered extensively in
<A HREF="ch23.htm" >Chapter 23</A>, &quot;The Canvas.&quot; The
<TT>MyCanvas</TT> class extends <TT>Canvas</TT> and provides a
minimal drawing capability. It declares the x and y variables
to record the last position in which the mouse is clicked within
the canvas. Their default values are set to <TT>-1</TT> to indicate
that the mouse has not yet been clicked on the canvas. The <TT>boxSize</TT>
variable specifies the size of the box to be displayed at the
position of the last mouse click.
<P>
The <TT>MyCanvas</TT> constructor sets the canvas size to an area
of 75<FONT FACE="Symbol">&#165;</FONT>75 pixels with a white background
and a red foreground drawing color. The <TT>show()</TT> method
is used to cause the canvas to be initially displayed.
<P>
The <TT>mouseDown()</TT> method overrides the method defined in
the <TT>Component</TT> class. It provides the capability to handle
the <TT>MOUSE_DOWN</TT> event generated when the user clicks a
mouse button. Java assumes a one-button mouse to provide the widest
compatibility. The <TT>mouseDown()</TT> method stores the position
of the user's click and then invokes the <TT>repaint()</TT> method
to repaint the canvas.
<P>
The <TT>paint()</TT> method declared for <TT>MyCanvas</TT> checks
to make sure that a click has occurred and fills a rectangle with
the upper left corner at the point of the last click and with
<TT>boxSize</TT> dimensions.
<H3><A NAME="MyCheckBoxGroup"><B>MyCheckBoxGroup</B></A></H3>
<P>
The <TT>MyCheckBoxGroup</TT> class extends the <TT>Panel</TT>
class. It implements a custom panel consisting of a label, an
array of <TT>Checkbox</TT> objects, and a <TT>TextField</TT> object.
The results of clicking on any of the checkboxes are displayed
in the <TT>results</TT> <TT>TextField</TT>. The <TT>MyCheckBoxGroup</TT>
constructor takes an array of strings as its parameter. It sets
the label string to the first string in the array and sets the
labels of the checkboxes to the rest of the strings. The <TT>numBoxes</TT>
variable specifies the number of <TT>Checkbox</TT> objects to
be created. The <TT>results</TT> <TT>TextField</TT> is created
as an empty 15-character <TT>TextField</TT> object.
<P>
The <TT>setupPanel()</TT> method sets the layout of the panel
to a <TT>GridLayout</TT> that is one column wide and has enough
rows to accommodate the label, checkboxes, and text field. The
label is created and added to the panel, followed by each of the
checkboxes. The <TT>results</TT> <TT>TextField</TT> is then added
to the end of the panel.
<P>
The <TT>MyCheckBoxGroup</TT> <TT>handleEvent()</TT> method is
used to handle any actions occurring within the panel and is capable
of handling all events for all checkboxes. It handles checkbox
events by using the <TT>getState()</TT> and <TT>getLabel()</TT>
methods of the <TT>Checkbox</TT> class to query the checked status
of each checkbox and to retrieve the labels associated with the
checkboxes that are checked. It then displays these labels in
the <TT>results</TT> <TT>TextField</TT> using the <TT>setText()</TT>
method.
<H3><A NAME="MyChoice"><B>MyChoice</B></A></H3>
<P>
The <TT>Choice</TT> class is used to implement Motif option menus,
which are free-standing pull-down menus that can be used to select
a single value from a list. The <TT>MyChoice</TT> class extends
the <TT>Choice</TT> class and provides the capability to display
selected choices in a <TT><B><FONT FACE="Courier New">TextArea</FONT></B></TT><B>
</B>object.
<P>
The <TT>MyChoice</TT> constructor takes an array of strings to
be used as the choices and a <TT>TextArea</TT> object as its parameters.
The <TT>addItem()</TT> method of the <TT>Choice</TT> class is
used to add the choice strings to the list of choices. The constructor
checks for a <TT>NullPointerException</TT> when the strings are
added to the <TT>Choice</TT> list because the <TT>addItem()</TT>
method throws this exception.
<P>
The <TT>action()</TT> method handles the event generated when
a user makes a selection from the list. The <TT>arg</TT> parameter
contains the label of the selected choice. It is displayed in
the <TT>TextArea</TT> object using the <TT>setText()</TT> method.
<H3><A NAME="MyList"><B>MyList</B></A></H3>
<P>
The <TT>List</TT> class implements scrollable lists from which
a user can select one or more list items. The <TT>MyList</TT>
class extends the <TT>List</TT> class and provides support for
displaying the selected list items in a <TT>TextArea</TT> field.
<P>
The <TT>MyList</TT> constructor takes an array of strings and
the <TT>TextArea</TT> object as its parameters. The strings are
used as the items of the list. The <TT>super(3,false)</TT> superclass
constructor call statement invokes the <TT>List</TT> class constructor
and specifies a three-row list with multiple list selections being
disabled. Lists are covered in more detail in <A HREF="ch21.htm" >Chapter 21</A>,
&quot;Checkboxes, Choices, and Lists.&quot; The <TT>addItem()</TT>
method of the <TT>List</TT> class is used to add the strings as
items of the list.
<P>
The <TT>handleEvent()</TT> method handles the <TT>ACTION_EVENT</TT>
occurring when a list item is double-clicked, the <TT>LIST_SELECT</TT>
event that is generated when an unselected list item is clicked,
and the <TT>LIST_DESELECT</TT> event that occurs when a selected
list item is clicked and deselected. The Windows 95 implementation
of Java does not correctly handle the <TT>LIST_DESELECT</TT> event.
The <TT>handleEvent()</TT> method handles these events by writing
the results of the action in the specified <TT>TextArea</TT> object.
<H3><A NAME="MyScrollbar"><B>MyScrollbar</B></A></H3>
<P>
The <TT>Scrollbar</TT> class encapsulates vertical and horizontal
scrollbars. The <TT>MyScrollbar</TT> class extends <TT>Scrollbar</TT>
and provides the capability to display the results of scrollbar
operations using a <TT>TextArea</TT> object. (<A HREF="ch24.htm" >See Chapter 24</A>,
&quot;Scrollbars,&quot; for more information on using scrollbars.)
<P>
The <TT>MyScrollbar</TT> constructor takes a number of parameters
that determine the characteristics of a scrollbar. These parameters
are forwarded to the superclass constructor. A <TT>TextArea</TT>
object is also passed as a parameter. The orientation parameter
is set to the <TT>HORIZONTAL</TT> and <TT>VERTICAL</TT> constants
of the <TT>Scrollbar</TT> class. These constants specify whether
the scrollbar should be displayed horizontally or vertically.
The <TT>min</TT> and <TT>max</TT> parameters specify a range of
integer values that are associated with the scrollbar. The <TT>value</TT>
parameter sets the initial position of the scrollbar between the
<TT>min</TT> and <TT>max</TT> values. The <TT>visible</TT> parameter
identifies the size of the visible portion of the scrollable area.
This determines how the current scrollbar position is updated
as the result of a page-up or page-down scrollbar operation.
<P>
The <TT>handleEvent()</TT> method of the <TT>MyScrollbar</TT>
class handles the <TT>SCROLL_LINE_UP</TT>, <TT>SCROLL_LINE_DOWN</TT>,
<TT>SCROLL_PAGE_UP</TT>, <TT>SCROLL_PAGE_DOWN</TT>, and <TT>SCROLL_ABSOLUTE</TT>
events. The <TT>SCROLL_LINE_UP</TT> and <TT>SCROLL_LINE_DOWN</TT>
events are generated when the user clicks on the end arrows of
the scrollbar. The <TT>SCROLL_PAGE_UP</TT> and <TT>SCROLL_PAGE_DOWN</TT>
events are generated when the user clicks between the end arrows
and the scrollbar position marker. The <TT>SCROLL_ABSOLUTE</TT>
event is generated when the user moves the scrollbar position
marker. The <TT>handleEvent()</TT> method handles these events
by displaying the current scrollbar position in the designated
<TT>TextArea</TT> object. The <TT>getValue()</TT> method of the
<TT>Scrollbar</TT> class is used to obtain the current scrollbar
position.
<H2><A NAME="Summary"><B><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></B></A>
</H2>
<P>
This chapter covers the basics of writing window programs. It
shows how window programs are structured and organized and identifies
the basic approach used to design most window programs. It covers
the details of the <TT>Frame</TT> class and the five basic window
layouts. The process of window event handling is described and
illustrated through the <TT>SamplerApp</TT> program. <TT>SamplerApp</TT>
also introduces the most common window GUI controls. Subsequent
chapters investigate these components in more detail.
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



