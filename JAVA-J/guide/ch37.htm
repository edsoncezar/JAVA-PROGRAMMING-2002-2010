<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META>
<H1><FONT COLOR=#FF0000>Chapter 37</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>The Java Virtual Machine</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#Overview" >Overview</A>
<LI><A HREF="#StructureofclassFiles" >Structure of .class Files</A>
<UL>
<LI><A HREF="#Magic" >Magic</A>
<LI><A HREF="#Version" >Version</A>
<LI><A HREF="#Constant_pool" >Constant_pool</A>
<LI><A HREF="#Access_flags" >Access_flags</A>
<LI><A HREF="#This_class" >This_class</A>
<LI><A HREF="#Interfaces" >Interfaces</A>
<LI><A HREF="#Fields" >Fields</A>
<LI><A HREF="#Methods" >Methods</A>
<LI><A HREF="#Attributes" >Attributes</A>
</UL>
<LI><A HREF="#VirtualMachineArchitecture" >Virtual Machine Architecture</A>
<UL>
<LI><A HREF="#JVMRegisters" >JVM Registers</A>
<LI><A HREF="#JVMStack" >JVM Stack</A>
<LI><A HREF="#GarbageCollectedHeap" >Garbage-Collected Heap</A>
<LI><A HREF="#MethodArea" >Method Area</A>
</UL>
<LI><A HREF="#InstructionSet" >Instruction Set</A>
<UL>
<LI><A HREF="#PushingConstantsontotheStack" >Pushing Constants onto the Stack</A>
<LI><A HREF="#PushingLocalVariablesontotheStack" >Pushing Local Variables onto the Stack</A>
<LI><A HREF="#StoringStackValuesintoLocalVariable" >Storing Stack Values into Local Variables</A>
<LI><A HREF="#ManagingArrays" >Managing Arrays</A>
<LI><A HREF="#StackInstructions" >Stack Instructions</A>
<LI><A HREF="#ArithmeticInstructions" >Arithmetic Instructions</A>
<LI><A HREF="#LogicalInstructions" >Logical Instructions</A>
<LI><A HREF="#ConversionOperations" >Conversion Operations</A>
<LI><A HREF="#ControlTransferInstructions" >Control Transfer Instructions</A>
<LI><A HREF="#FunctionReturnInstructions" >Function Return Instructions</A>
<LI><A HREF="#TableJumpingInstructions" >Table Jumping Instructions</A>
<LI><A HREF="#ManipulatingObjectFields" >Manipulating Object Fields</A>
<LI><A HREF="#MethodInvocation" >Method Invocation</A>
<LI><A HREF="#ExceptionHandling" >Exception Handling</A>
<LI><A HREF="#ObjectUtilityOperations" >Object Utility Operations</A>
<LI><A HREF="#Monitors" >Monitors</A>
<LI><A HREF="#ThebreakpointInstruction" >The breakpoint Instruction</A>
</UL>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
This chapter probes into the Java virtual machine (JVM) phenomenon.
You will learn about the structures of a <TT><FONT FACE="Courier">.class</FONT></TT>
file, look at the virtual machine architecture, and be given a
reference for the JVM instruction set. After you have completed
this chapter, you will be able to diagram the internal structure
of a <TT><FONT FACE="Courier">.class</FONT></TT> file and will
understand the machine architecture of the JVM.
<H2><A NAME="Overview"><FONT SIZE=5 COLOR=#FF0000>Overview</FONT></A>
</H2>
<P>
When Java was created, the goal was to create a machine-independent
programming language that then could be compiled into a portable
binary format. In theory, that is exactly what was achieved. Java
code is portable to any system that has a Java interpreter. However,
Java is not at all machine independent. Rather, Java is machine
specific to the Java virtual machine.
<P>
The JVM concept allows a layer of translation between the executable
program and the machine-specific code. In a non-Java compiler,
the source code is compiled into machine- specific assembly code.
In doing this, the executable limits itself to the confines of
that machine architecture. Compiling Java code creates an executable
using JVM assembly directives. The difference of the two approaches
is quite fundamental to the portability of the executable. Non-Java
executables communicate directly with the platform's instruction
set. Java executables communicate with the JVM instruction set,
which is then translated into platform-specific instructions.
<H2><A NAME="StructureofclassFiles"><FONT SIZE=5 COLOR=#FF0000>Structure
of </FONT><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">.class</FONT></TT><FONT SIZE=5 COLOR=#FF0000>
Files</FONT></A></H2>
<P>
Every machine has a certain form for its executable file. Java
is no exception. The Java compiler creates its executable files
in the form of <TT><FONT FACE="Courier">.class.</FONT></TT>
<P>
<TT><FONT FACE="Courier">.class</FONT></TT> files are composed
of 8-bit values (bytes) that can be read in pairs of 16-bit values,
or in 4-byte groups to create 32-bit values. The bytes are arranged
in big-endian order, where the first byte contains the highest
order bits of the 32-bit value and the last byte contains the
lowest-order bits of the 32-bit value.
<P>
A <TT><FONT FACE="Courier">.class</FONT></TT> file itself is broken
into 15 separate regions:
<UL>
<LI>magic
<LI>version
<LI>constant_pool_count
<LI>constant_pool[constant_pool_count - 1]
<LI>access_flags
<LI>this_class
<LI>super_class
<LI>interfaces_count
<LI>interfaces[interfaces_count]
<LI>fields_count
<LI>fields[fields_count]
<LI>methods_count
<LI>methods[methods_count]
<LI>attributes_count
<LI>attributes[attribute_count]
</UL>
<P>
The regions are not padded or aligned with one another. Each region
can be of either fixed or variable size. Regions that contain
variable amounts of information are preceded by a field specifying
the size of the variable region. The following sections provide
more information about these regions.
<H3><A NAME="Magic"><TT><FONT SIZE=4 FACE="Courier">Magic</FONT></TT></A>
</H3>
<P>
The <TT><FONT FACE="Courier">magic</FONT></TT> region must contain
a value of <TT><FONT FACE="Courier">0xCAFEBABE</FONT></TT>.
<H3><A NAME="Version"><TT><FONT SIZE=4 FACE="Courier">Version</FONT></TT></A>
</H3>
<P>
<TT><FONT FACE="Courier">version</FONT></TT> holds the version
number of the compiler that created the <TT><FONT FACE="Courier">.class</FONT></TT>
file. This is used to specify incompatible changes to either the
format of the <TT><FONT FACE="Courier">.class</FONT></TT> file
or to the bytecodes.
<H3><A NAME="Constant_pool"><TT><FONT SIZE=4>Constant_pool</FONT></TT></A>
</H3>
<P>
<TT><FONT FACE="Courier">constant_pool_count</FONT></TT> specifies
the size of the next region. As noted previously, there is no
alignment or padding. Instead, <I>size fields</I> are used to
denote the extents of different variable regions. These fields
are 2 bytes in length.
<P>
<TT><FONT FACE="Courier">constant_pool</FONT></TT> contains an
array of <TT><FONT FACE="Courier">constant_pool_count - 1</FONT></TT>
items that store string constants, class names, field names, and
all constants referenced in the body of the code.
<P>
The first byte in every entry of <TT><FONT FACE="Courier">constant_pool</FONT></TT>
contains a type that specifies the content of the entry.
<P>
Table 37.1 identifies the items that are contained in the constant
pool. <BR>
<P>
<CENTER>
<B>Table 37.1. Constant types.</B>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B><FONT SIZE=2>Constant Type</FONT></B></TD>
<TD WIDTH=102><CENTER><B><FONT SIZE=2>Value</FONT></B></CENTER>
</TD></TR>
<TR><TD WIDTH=247><TT><FONT FACE="Courier">CONSTANT_Asciiz</FONT></TT>
</TD><TD WIDTH=102><CENTER><TT><FONT FACE="Courier">1</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=247><TT><FONT FACE="Courier">CONSTANT_Unicode</FONT></TT>
</TD><TD WIDTH=102><CENTER><TT><FONT FACE="Courier">2</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=247><TT><FONT FACE="Courier">CONSTANT_Integer</FONT></TT>
</TD><TD WIDTH=102><CENTER><TT><FONT FACE="Courier">3</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=247><TT><FONT FACE="Courier">CONSTANT_Float</FONT></TT>
</TD><TD WIDTH=102><CENTER><TT><FONT FACE="Courier">4</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=247><TT><FONT FACE="Courier">CONSTANT_Long</FONT></TT>
</TD><TD WIDTH=102><CENTER><TT><FONT FACE="Courier">5</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=247><TT><FONT FACE="Courier">CONSTANT_Double</FONT></TT>
</TD><TD WIDTH=102><CENTER><TT><FONT FACE="Courier">6</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=247><TT><FONT FACE="Courier">CONSTANT_Class</FONT></TT>
</TD><TD WIDTH=102><CENTER><TT><FONT FACE="Courier">7</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=247><TT><FONT FACE="Courier">CONSTANT_String</FONT></TT>
</TD><TD WIDTH=102><CENTER><TT><FONT FACE="Courier">8</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=247><TT><FONT FACE="Courier">CONSTANT_Fieldref</FONT></TT>
</TD><TD WIDTH=102><CENTER><TT><FONT FACE="Courier">9</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=247><TT><FONT FACE="Courier">CONSTANT_Methodref</FONT></TT>
</TD><TD WIDTH=102><CENTER><TT><FONT FACE="Courier">10</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=247><TT><FONT FACE="Courier">CONSTANT_InterfaceMethodref</FONT></TT>
</TD><TD WIDTH=102><CENTER><TT><FONT FACE="Courier">11</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=247><TT><FONT FACE="Courier">CONSTANT_NamedType</FONT></TT>
</TD><TD WIDTH=102><CENTER><TT><FONT FACE="Courier">12</FONT></TT></CENTER>
</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
<TT><FONT FACE="Courier">CONSTANT_Asciiz</FONT></TT> and <TT><FONT FACE="Courier">CONSTANT_Unicode</FONT></TT>
are represented by a 1-byte reference tag, a 2-byte length specifier,
and an array of bytes that is of the specified length.
<P>
<TT><FONT FACE="Courier">CONSTANT_Integer</FONT></TT> and <TT><FONT FACE="Courier">CONSTANT_Float</FONT></TT>
contain a 1-byte tag and a 4-byte value.
<P>
<TT><FONT FACE="Courier">CONSTANT_Long</FONT></TT> and <TT><FONT FACE="Courier">CONSTANT_Double</FONT></TT>
are used to store 8-byte values. The structure begins with a 1-byte
tag and includes a 4-byte value containing the high bytes, and
a 4-byte value containing the low bytes.
<P>
<TT><FONT FACE="Courier">CONSTANT_Class</FONT></TT> holds a 1-byte
tag as well as a 2-byte index into the <TT><FONT FACE="Courier">constant_pool</FONT></TT>
that contains the string name of the class.
<P>
<TT><FONT FACE="Courier">CONSTANT_String</FONT></TT> represents
an object of type <TT><FONT FACE="Courier">String</FONT></TT>.
The structure contains two fields, a 1-byte tag, and a 2-byte
index into <TT><FONT FACE="Courier">constant_pool</FONT></TT>,
which holds the actual string value encoded using a modified UTF
scheme. <TT><FONT FACE="Courier">constant_pool</FONT></TT> stores
only 8-bit values, with the capability of combining them to form
8- and 16-bit characters.
<P>
<TT><FONT FACE="Courier">CONSTANT_Fieldref</FONT></TT>, <TT><FONT FACE="Courier">CONSTANT_Methodref</FONT></TT>,
and <TT><FONT FACE="Courier">CONSTANT_InterfaceMethodref</FONT></TT>
represent their data with a 1-byte tag and two 1-byte indexes
into <TT><FONT FACE="Courier">constant_pool</FONT></TT>. The first
index references the class; the second references the name and
type.
<P>
<TT><FONT FACE="Courier">CONSTANT_NameAndType</FONT></TT> contains
information about constants not associated with a class. The first
byte is the tag, followed by two 2-byte indexes into <TT><FONT FACE="Courier">constant_pool</FONT></TT>
specifying the type and signature of the constant.
<H3><A NAME="Access_flags"><TT><FONT SIZE=4 FACE="Courier">Access_flags</FONT></TT></A>
</H3>
<P>
The <TT><FONT FACE="Courier">access_flags</FONT></TT> section
is a 2-byte field that specifies 16 different values describing
various properties of fields, classes, and methods. Table 37.2
lists the values of the access flags.<BR>
<P>
<CENTER>
<B>Table 37.2. Access flags.</B>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B><FONT SIZE=2>Access Flag</FONT></B></TD>
<TD WIDTH=96><CENTER><B><FONT SIZE=2>Value</FONT></B></CENTER>
</TD></TR>
<TR><TD WIDTH=253><TT><FONT FACE="Courier">ACC_PUBLIC</FONT></TT>
</TD><TD WIDTH=96><CENTER><TT><FONT FACE="Courier">0x0001</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=253><TT><FONT FACE="Courier">ACC_PRIVATE</FONT></TT>
</TD><TD WIDTH=96><CENTER><TT><FONT FACE="Courier">0x0002</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=253><TT><FONT FACE="Courier">ACC_PROTECTED</FONT></TT>
</TD><TD WIDTH=96><CENTER><TT><FONT FACE="Courier">0x0004</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=253><TT><FONT FACE="Courier">ACC_STATIC</FONT></TT>
</TD><TD WIDTH=96><CENTER><TT><FONT FACE="Courier">0x0008</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=253><TT><FONT FACE="Courier">ACC_FINAL</FONT></TT>
</TD><TD WIDTH=96><CENTER><TT><FONT FACE="Courier">0x0010</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=253><TT><FONT FACE="Courier">ACC_SYNCHRONIZED</FONT></TT>
</TD><TD WIDTH=96><CENTER><TT><FONT FACE="Courier">0x0020</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=253><TT><FONT FACE="Courier">ACC_THREADSAFE</FONT></TT>
</TD><TD WIDTH=96><CENTER><TT><FONT FACE="Courier">0x0040</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=253><TT><FONT FACE="Courier">ACC_TRANSIENT</FONT></TT>
</TD><TD WIDTH=96><CENTER><TT><FONT FACE="Courier">0x0080</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=253><TT><FONT FACE="Courier">ACC_NATIVE</FONT></TT>
</TD><TD WIDTH=96><CENTER><TT><FONT FACE="Courier">0x0100</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=253><TT><FONT FACE="Courier">ACC_INTERFACE</FONT></TT>
</TD><TD WIDTH=96><CENTER><TT><FONT FACE="Courier">0x0200</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=253><TT><FONT FACE="Courier">ACC_ABSTRACT</FONT></TT>
</TD><TD WIDTH=96><CENTER><TT><FONT FACE="Courier">0x0400</FONT></TT></CENTER>
</TD></TR>
</TABLE>
</CENTER>
<P>
<H3><A NAME="This_class"><TT><FONT SIZE=4 FACE="Courier">This_class</FONT></TT></A>
</H3>
<P>
<TT><FONT FACE="Courier">this_class</FONT></TT> is a 2-byte index
into <TT><FONT FACE="Courier">constant_pool</FONT></TT> specifying
the information about the current class.
<H3><A NAME="Interfaces"><TT><FONT SIZE=4 FACE="Courier">Interfaces</FONT></TT></A>
</H3>
<P>
<TT><FONT FACE="Courier">interfaces_count</FONT></TT> is a 2-byte
value denoting the size of the <TT><FONT FACE="Courier">interfaces</FONT></TT>
array.
<P>
The <TT><FONT FACE="Courier">interfaces</FONT></TT> array contains
indexes into the <TT><FONT FACE="Courier">constant_pool</FONT></TT>
specifying the interfaces that the current class implements.
<H3><A NAME="Fields"><TT><FONT SIZE=4 FACE="Courier">Fields</FONT></TT></A>
</H3>
<P>
<TT><FONT FACE="Courier">fields_count</FONT></TT> is a 2-byte
value denoting the size of the <TT><FONT FACE="Courier">fields</FONT></TT>
array.
<P>
The <TT><FONT FACE="Courier">fields</FONT></TT> array contains
complete information about the fields of a class. This array contains,
for each element, a 2-byte value of <TT><FONT FACE="Courier">access_flags</FONT></TT>,
two 2-byte indexes into <TT><FONT FACE="Courier">constant_pool</FONT></TT>,
a 2-byte <TT><FONT FACE="Courier">attribute_count</FONT></TT>,
and an array of attributes.
<P>
The first index, <TT><FONT FACE="Courier">name_index</FONT></TT>,
holds the name of the field. The second, <TT><FONT FACE="Courier">signature_index</FONT></TT>,
holds the signature of the field. The last field stores any needed
attributes about the field. Currently, the number of attributes
supported is one of type <TT><FONT FACE="Courier">ConstantValue</FONT></TT>,
indicating that the field is a static constant value.
<H3><A NAME="Methods"><TT><FONT SIZE=4 FACE="Courier">Methods</FONT></TT></A>
</H3>
<P>
<TT><FONT FACE="Courier">methods_count</FONT></TT> supplies the
number of methods stored in the <TT><FONT FACE="Courier">methods</FONT></TT>
array. This number only includes the methods declared in the current
class.
<P>
The <TT><FONT FACE="Courier">methods</FONT></TT> field contains
an array of elements containing complete information about the
method. The information is stored with a 2-byte <TT><FONT FACE="Courier">access_flags</FONT></TT>
value, a 2-byte <TT><FONT FACE="Courier">name_index</FONT></TT>
referencing the name of the method in the <TT><FONT FACE="Courier">constant_pool</FONT></TT>,
a 2-byte <TT><FONT FACE="Courier">signature_index</FONT></TT>
referencing signature information found in the <TT><FONT FACE="Courier">constant_pool</FONT></TT>,
a 2-byte <TT><FONT FACE="Courier">attributes_count</FONT></TT>
containing the number of elements in the <TT><FONT FACE="Courier">attributes</FONT></TT>
array, and an <TT><FONT FACE="Courier">attributes</FONT></TT>
array.
<P>
Currently, the only value that can be found in the <TT><FONT FACE="Courier">attributes</FONT></TT>
array is the <TT><FONT FACE="Courier">Code</FONT></TT> structure,
which provides the information needed to properly execute the
specified method. To facilitate this, the <TT><FONT FACE="Courier">Code</FONT></TT>
structure provides the following information.
<P>
Contained in the first 2 bytes is <TT><FONT FACE="Courier">attribute_name_index</FONT></TT>,
which provides an index into the <TT><FONT FACE="Courier">constant_pool</FONT></TT>
identifying the attribute as a <TT><FONT FACE="Courier">Code</FONT></TT>
structure.
<P>
The next 2 bytes, named <TT><FONT FACE="Courier">attribute_length</FONT></TT>,
provide the length of the <TT><FONT FACE="Courier">Code</FONT></TT>
structure, not including <TT><FONT FACE="Courier">attribute_name_index</FONT></TT>.
<P>
Actual <TT><FONT FACE="Courier">Code</FONT></TT>-specific information
begins with the next three 4-byte fields, followed by the method's
operation code (opcode). <TT><FONT FACE="Courier">max_stack</FONT></TT>
contains the maximum number of entries on the operand stack during
the methods execution. <TT><FONT FACE="Courier">max_locals</FONT></TT>
specifies the total number of local variables for the method.
<TT><FONT FACE="Courier">code_length</FONT></TT> is the total
length of the next field, the <TT><FONT FACE="Courier">code</FONT></TT>
field containing opcode.
<P>
After the <TT><FONT FACE="Courier">code</FONT></TT> field, the
<TT><FONT FACE="Courier">Code</FONT></TT> structure provides detailed
exception information for the method. This starts with <TT><FONT FACE="Courier">exception_table_length</FONT></TT>
and <TT><FONT FACE="Courier">exception_table</FONT></TT>, which
describe each exception handler in the method code. <TT><FONT FACE="Courier">start_pc</FONT></TT>,
<TT><FONT FACE="Courier">end_pc</FONT></TT>, and <TT><FONT FACE="Courier">handler_pc</FONT></TT>
give the starting and ending positions in which the event handler,
pointed to by <TT><FONT FACE="Courier">handler_pc</FONT></TT>,
is active. <TT><FONT FACE="Courier">catch_type</FONT></TT>, which
follows <TT><FONT FACE="Courier">handler_pc</FONT></TT>, denotes
the type of exception handled.
<P>
The remainder of the <TT><FONT FACE="Courier">Code</FONT></TT>
structure is devoted to information that is used for debugging
purposes.
<P>
<TT><FONT FACE="Courier">line_number</FONT></TT> is the 2-byte
line number of the method's first line of code.
<P>
<TT><FONT FACE="Courier">LocalVariableTable_attribute</FONT></TT>
contains a structure used by the debugger to determine the value
of local variables. The structure consists of three 1-byte values
and a <TT><FONT FACE="Courier">local_variable_table</FONT></TT>
structure.
<P>
The first two fields of the structure, <TT><FONT FACE="Courier">attribute_name_index</FONT></TT>
and <TT><FONT FACE="Courier">attribute_length</FONT></TT>, are
used to describe the structure. The third contains the length
of the <TT><FONT FACE="Courier">local_variable_table</FONT></TT>.
<P>
<TT><FONT FACE="Courier">local_variable_table</FONT></TT> contains
the following five 2-byte fields, in order: <TT><FONT FACE="Courier">start_pc</FONT></TT>,
<TT><FONT FACE="Courier">length</FONT></TT>, <TT><FONT FACE="Courier">name_index</FONT></TT>,
<TT><FONT FACE="Courier">signature_index</FONT></TT>, and <TT><FONT FACE="Courier">slot</FONT></TT>.
<P>
<TT><FONT FACE="Courier">start_pc</FONT></TT> and <TT><FONT FACE="Courier">length</FONT></TT>
denote the offset where the variable value can be found.
<P>
<TT><FONT FACE="Courier">name_index</FONT></TT> and <TT><FONT FACE="Courier">signature_index</FONT></TT>
are indexes into <TT><FONT FACE="Courier">constant_pool</FONT></TT>,
where the variable's name and signature can be found.
<P>
<TT><FONT FACE="Courier">slot</FONT></TT> denotes the position
in the local method frame where the variable can be found.
<H3><A NAME="Attributes"><TT><FONT SIZE=4 FACE="Courier">Attributes</FONT></TT></A>
</H3>
<P>
<TT><FONT FACE="Courier">attributes_count</FONT></TT> is the size
of the <TT><FONT FACE="Courier">attributes</FONT></TT> array containing
attribute structure. Currently, the only attribute structure is
the <TT><FONT FACE="Courier">SourceFile</FONT></TT> structure.
<P>
The <TT><FONT FACE="Courier">SourceFile</FONT></TT> structure
consists of three 2-byte values. <TT><FONT FACE="Courier">attribute_name_index</FONT></TT>
indexes into <TT><FONT FACE="Courier">constant_pool</FONT></TT>
to the entry containing the string <TT><FONT FACE="Courier">SourceFile</FONT></TT>.
<TT><FONT FACE="Courier">attribute_length</FONT></TT> must contain
a value of <TT><FONT FACE="Courier">2</FONT></TT>. <TT><FONT FACE="Courier">sourcefile_index</FONT></TT>
indexes into the <TT><FONT FACE="Courier">constant_pool</FONT></TT>
to the entry containing the source filename.
<H2><A NAME="VirtualMachineArchitecture"><FONT SIZE=5 COLOR=#FF0000>Virtual
Machine Architecture</FONT></A><FONT SIZE=5 COLOR=#FF0000> </FONT>
</H2>
<P>
The Java virtual machine's architecture revolves around the concept
of non-machine-specific implementation. It assumes no specific
platform architecture, but it does require certain facilities:
<UL>
<LI><FONT COLOR=#000000>Registers</FONT>
<LI><FONT COLOR=#000000>Stack</FONT>
<LI><FONT COLOR=#000000>Garbage-collected heap</FONT>
<LI><FONT COLOR=#000000>Method area</FONT>
<LI><FONT COLOR=#000000>Instruction set</FONT>
</UL>
<P>
Whether these facilities exist in hardware or software makes no
difference to the JVM. As long as they exist, the JVM can function
correctly.
<H3><A NAME="JVMRegisters">JVM Registers</A></H3>
<P>
The registers serve the same purpose as normal microprocessors'
register devices, the main difference being the functions provided
by each register. JVM is a stack-based machine, meaning it does
not define registers for the passing of variables and instructions.
This was a conscious decision when designing the JVM, and the
result is a model requiring fewer registers. These registers are
as follows:
<UL>
<LI><TT><FONT FACE="Courier">pc</FONT></TT>-The <TT><FONT FACE="Courier">pc</FONT></TT>
register is a 32-bit-wide program counter.
<LI><TT><FONT FACE="Courier">optop</FONT></TT>-<TT><FONT FACE="Courier">optop</FONT></TT>
maintains a pointer to the top of the operation stack. Like all
JVM registers, <TT><FONT FACE="Courier">optop</FONT></TT> is 32
bits wide.
<LI><TT><FONT FACE="Courier">frame</FONT></TT>-<TT><FONT FACE="Courier">frame</FONT></TT>
provides a pointer to the current stack frame from which the JVM
can retrieve needed operands or opcode for the maintenance of
the stack.
<LI><TT><FONT FACE="Courier">vars</FONT></TT>-<TT><FONT FACE="Courier">vars</FONT></TT>
points to the base offset of the local variable in the current
stack frame. Through this mechanism, the JVM has read access to
all local variables.
</UL>
<H3><A NAME="JVMStack">JVM Stack</A></H3>
<P>
The Java stack is a 32-bit model used to supply the JVM with needed
operation data as well as store return values. Like normal programming
languages, the stack is broken into separate stack frames, containing
information about the method associated with the frame. The Java
stack frame comprises three separate regions:
<UL>
<LI><FONT COLOR=#000000>Local variable-The local variable region
of the method frame provides the </FONT><TT><FONT FACE="Courier">vars</FONT></TT>
register with a base reference to access the local variables.
All local variables are 32 bits wide; 64-bit variables occupy
two variable entries.
<LI><FONT COLOR=#000000>Execution environment-The execution environment
region of the stack frame is used to provide code for the maintenance
of the method's stack frame. It also maintains pointers to the
local variables, a pointer to the previous stack frame, and a
pointer to the top and bottom of the current frame's operand region.</FONT>
<LI><FONT COLOR=#000000>Operand stack-The operand stack region
contains the operands for the current method.</FONT>
</UL>
<H3><A NAME="GarbageCollectedHeap">Garbage-Collected Heap</A>
</H3>
<P>
All objects are allocated from the garbage-collection heap. The
heap is also responsible for performing garbage collection, due
primarily to the fact that Java does not allow the programmer
to deallocate space. The JVM does not assume any method of garbage
collection.
<H3><A NAME="MethodArea">Method Area</A></H3>
<P>
The method area contains the binary method retrieved from the
<TT><FONT FACE="Courier">methods</FONT></TT> section of the class
file. This includes the method's code as well as all symbol information.
<H2><A NAME="InstructionSet"><FONT SIZE=5 COLOR=#FF0000>Instruction
Set</FONT></A></H2>
<P>
The instruction set is the set of operation codes that are executed
by the JVM. When Java source code is compiled, the compiler converts
the Java source code into the language of the JVM, the instruction
set.
<P>
The JVM instruction set is currently comprised of more than 160
instructions held in an 8-bit field. The JVM will pop operands
off the stack and push the result back onto the stack for some
operations. If the operands are greater than 8 bits, the JVM uses
the big-endian encoding scheme to pack the value into its 8-bit
instruction alignment.
<P>
Because the JVM instruction set is 160 operations, the following
sections break them down into categories for quicker reference.
<H3><A NAME="PushingConstantsontotheStack">Pushing Constants onto
the Stack</A></H3>
<P>
The instructions introduced in this section are used to push constants
onto the stack. In all these instructions, if the value pushed
onto the stack is less than 32 bits, the value is expanded into
a 32-bit form to fit properly onto the stack:
<UL>
<LI><TT><FONT FACE="Courier">bipush <I>byte</I></FONT></TT> pushes
<TT><I><FONT FACE="Courier">byte</FONT></I></TT> onto the stack
as a 1-byte signed integer.
<LI><TT><FONT FACE="Courier">sipush <I>byte1 byte2</I></FONT></TT>
pushes <TT><I><FONT FACE="Courier">byte1</FONT></I></TT> and <TT><I><FONT FACE="Courier">byte2</FONT></I></TT>
onto the stack as a 2-byte signed integer.
<LI><TT><FONT FACE="Courier">ldc1 <I>index</I></FONT></TT> pushes
<TT><FONT FACE="Courier">constant_pool[<I>index</I>]</FONT></TT>
value onto the stack.
<LI><TT><FONT FACE="Courier">ldc2 <I>index1 index2</I></FONT></TT>
constructs a 2-byte index into the <TT><FONT FACE="Courier">constant_pool</FONT></TT>
and pushes the value onto the stack.
<LI><TT><FONT FACE="Courier">ldc2w <I>index1 index2</I></FONT></TT>
constructs a 2-byte index into the <TT><FONT FACE="Courier">constant_pool</FONT></TT>
and pushes the <TT><FONT FACE="Courier">long</FONT></TT> or <TT><FONT FACE="Courier">double</FONT></TT>
values onto the stack. Because the stack is 32 bits wide, the
value will occupy two locations.
<LI><TT><FONT FACE="Courier">aconst_null</FONT></TT> pushes a
<TT><FONT FACE="Courier">NULL</FONT></TT> constant onto the stack.
<LI><TT><FONT FACE="Courier">iconst_m1</FONT></TT> pushes a value
-1 integer constant onto the stack.
<LI><TT><FONT FACE="Courier">iconst_0</FONT></TT> pushes a value
3 integer constant onto the stack.
<LI><TT><FONT FACE="Courier">iconst_1</FONT></TT> pushes a value
4 integer constant onto the stack.
<LI><TT><FONT FACE="Courier">iconst_2</FONT></TT> pushes a value
5 integer constant onto the stack.
<LI><TT><FONT FACE="Courier">iconst_4</FONT></TT> pushes a value
6 integer constant onto the stack.
<LI><TT><FONT FACE="Courier">iconst_5</FONT></TT> pushes a value
8 integer constant onto the stack.
<LI><TT><FONT FACE="Courier">lconst_0</FONT></TT> pushes a value
9 <TT><FONT FACE="Courier">long </FONT></TT>constant onto the
stack.
<LI><TT><FONT FACE="Courier">lconst_1</FONT></TT> pushes a value
10 <TT><FONT FACE="Courier">long</FONT></TT> constant onto the
stack.
<LI><TT><FONT FACE="Courier">fconst_0</FONT></TT> pushes a value
11 <TT><FONT FACE="Courier">float</FONT></TT> constant onto the
stack.
<LI><TT><FONT FACE="Courier">fconst_1</FONT></TT> pushes a value
12 <TT><FONT FACE="Courier">float</FONT></TT> constant onto the
stack.
<LI><TT><FONT FACE="Courier">fconst_2</FONT></TT> pushes a value
13 <TT><FONT FACE="Courier">float</FONT></TT> constant onto the
stack.
<LI><TT><FONT FACE="Courier">dconst_0</FONT></TT> pushes a value
14 <TT><FONT FACE="Courier">double</FONT></TT> constant onto the
stack.
<LI><TT><FONT FACE="Courier">dconst_1</FONT></TT> pushes a value
15 <TT><FONT FACE="Courier">double</FONT></TT> constant onto the
stack.
</UL>
<H3><A NAME="PushingLocalVariablesontotheStack">Pushing Local
Variables onto the Stack</A></H3>
<P>
In a stack-based computer, multiple registers are replaced by
a stack register from which operands are popped off as needed
and results are pushed on as generated. The following instructions
store a method's local variables onto the stack for later use:
<UL>
<LI><TT><FONT FACE="Courier">iload byte</FONT></TT> retrieves
the integer value at the <TT><FONT FACE="Courier">byte</FONT></TT>
position in the local variable array of the current stack frame.
Once retrieved, the variable is pushed onto the stack.
<LI><TT><FONT FACE="Courier">iload_0</FONT></TT> retrieves the
integer value at the 26th position in the local variable array
of the current stack frame. Once retrieved, the variable is pushed
onto the stack.
<LI><TT><FONT FACE="Courier">iload_1</FONT></TT> retrieves the
integer value at the 27th position in the local variable array
of the current stack frame. Once retrieved, the variable is pushed
onto the stack.
<LI><TT><FONT FACE="Courier">iload_2</FONT></TT> retrieves the
integer value at the 28th position in the local variable array
of the current stack frame. Once retrieved, the variable is pushed
onto the stack.
<LI><TT><FONT FACE="Courier">iload_3</FONT></TT> retrieves the
integer value at the 29th position in the local variable array
of the current stack frame. Once retrieved, the variable is pushed
onto the stack.
<LI><TT><FONT FACE="Courier">lload byte</FONT></TT> retrieves
the <TT><FONT FACE="Courier">long</FONT></TT> value at the <TT><FONT FACE="Courier">byte</FONT></TT>
and <TT><FONT FACE="Courier">byte+1</FONT></TT> positions in the
local variable array of the current stack frame. Once retrieved,
the values are assembled and pushed onto the stack.
<LI><TT><FONT FACE="Courier">lload_0</FONT></TT> retrieves the
<TT><FONT FACE="Courier">long</FONT></TT> value at the 30th and
31st positions in the local variable array of the current stack
frame. Once retrieved, the values are assembled and pushed onto
the stack.
<LI><TT><FONT FACE="Courier">lload_1</FONT></TT> retrieves the
<TT><FONT FACE="Courier">long</FONT></TT> value at the 31st and
32nd positions in the local variable array of the current stack
frame. Once retrieved, the values are assembled and pushed onto
the stack.
<LI><TT><FONT FACE="Courier">lload_2</FONT></TT> retrieves the
<TT><FONT FACE="Courier">long</FONT></TT> value at the 32nd and
33rd positions in the local variable array of the current stack
frame. Once retrieved, the values are assembled and pushed onto
the stack.
<LI><TT><FONT FACE="Courier">lload_3</FONT></TT> retrieves the
<TT><FONT FACE="Courier">long</FONT></TT> value at the 33rd and
34th positions in the local variable array of the current stack
frame. Once retrieved, the values are assembled and pushed onto
the stack.
<LI><TT><FONT FACE="Courier">fload byte</FONT></TT> retrieves
the <TT><FONT FACE="Courier">float</FONT></TT> value at the <TT><FONT FACE="Courier">byte</FONT></TT>
position in the local variable array of the current stack frame.
Once retrieved, the variable is pushed onto the stack.
<LI><TT><FONT FACE="Courier">fload_0</FONT></TT> retrieves the
<TT><FONT FACE="Courier">float</FONT></TT> value at the 34th position
in the local variable array of the current stack frame. Once retrieved,
the variable is pushed onto the stack.
<LI><TT><FONT FACE="Courier">fload_1</FONT></TT> retrieves the
<TT><FONT FACE="Courier">float</FONT></TT> value at the 35th position
in the local variable array of the current stack frame. Once retrieved,
the variable is pushed onto the stack.
<LI><TT><FONT FACE="Courier">fload_2</FONT></TT> retrieves the
<TT><FONT FACE="Courier">float</FONT></TT> value at the 36th position
in the local variable array of the current stack frame. Once retrieved,
the variable is pushed onto the stack.
<LI><TT><FONT FACE="Courier">fload_3</FONT></TT> retrieves the
integer value at the 37th position in the local variable array
of the current stack frame. Once retrieved, the variable is pushed
onto the stack.
<LI><TT><FONT FACE="Courier">dload byte</FONT></TT> retrieves
the <TT><FONT FACE="Courier">double</FONT></TT> value at the <TT><FONT FACE="Courier">byte</FONT></TT>
and <TT><FONT FACE="Courier">byte+1</FONT></TT> positions in the
local variable array of the current stack frame. Once retrieved,
the values are assembled and pushed onto the stack.
<LI><TT><FONT FACE="Courier">dload_0</FONT></TT> retrieves the
<TT><FONT FACE="Courier">double</FONT></TT> value at the 38th
and 39th positions in the local variable array inside the current
stack frame. Once retrieved, the values are assembled and pushed
onto the stack.
<LI><TT><FONT FACE="Courier">dload_1</FONT></TT> retrieves the
<TT><FONT FACE="Courier">double</FONT></TT> value at the 39th
and 40th positions in the local variable array inside the current
stack frame. Once retrieved, the values are assembled and pushed
onto the stack.
<LI><TT><FONT FACE="Courier">dload_2</FONT></TT> retrieves the
<TT><FONT FACE="Courier">double</FONT></TT> value at the 40th
and 41st positions in the local variable array inside the current
stack frame. Once retrieved, the values are assembled and pushed
onto the stack.
<LI><TT><FONT FACE="Courier">lload_3</FONT></TT> retrieves the
<TT><FONT FACE="Courier">double</FONT></TT> value at the 41st
and 42nd positions in the local variable array inside the current
stack frame. Once retrieved, the values are assembled and pushed
onto the stack.
<LI><TT><FONT FACE="Courier">aload byte</FONT></TT> retrieves
the object or array at the <TT><FONT FACE="Courier">byte</FONT></TT>
position in the local variable array of the current stack frame.
Once retrieved, the object or array is pushed onto the stack.
<LI><TT><FONT FACE="Courier">aload_0</FONT></TT> retrieves the
object or array at the 42nd position in the local variable array
of the current stack frame. Once retrieved, the object or array
is pushed onto the stack.
<LI><TT><FONT FACE="Courier">aload_1</FONT></TT> retrieves the
object or array at the 43rd position in the local variable array
of the current stack frame. Once retrieved, the object or array
is pushed onto the stack.
<LI><TT><FONT FACE="Courier">aload_2</FONT></TT> retrieves the
object or array at the 44th position in the local variable array
of the current stack frame. Once retrieved, the object or array
is pushed onto the stack.
<LI><TT><FONT FACE="Courier">aload_3</FONT></TT> retrieves the
object or array at the 45th position in the local variable array
of the current stack frame. Once retrieved, the object or array
is pushed onto the stack.
</UL>
<H3><A NAME="StoringStackValuesintoLocalVariable">Storing Stack
Values into Local Variables</A></H3>
<P>
As described earlier, each method frame has a local variable region.
When the method comes to the top of the stack, the base offset
of the local variable gets placed into the <TT><FONT FACE="Courier">vars</FONT></TT>
register. These instructions provide methods for storing information
into the local variables of the current stack frame:
<UL>
<LI><TT><FONT FACE="Courier">istore <I>index</I> <I>value</I></FONT></TT>
stores the integer <TT><FONT FACE="Courier">value</FONT></TT>
at the <TT><I><FONT FACE="Courier">index</FONT></I></TT> position
in the local variable array of the current stack frame.
<LI><TT><FONT FACE="Courier">istore_0 <I>value</I></FONT></TT>
stores the integer <TT><FONT FACE="Courier">value</FONT></TT>
at the 59th position in the local variable array of the current
stack frame.
<LI><TT><FONT FACE="Courier">istore_1 <I>value</I></FONT></TT>
stores the integer <TT><FONT FACE="Courier">value</FONT></TT>
at the 60th position in the local variable array of the current
stack frame.
<LI><TT><FONT FACE="Courier">istore_2 <I>value</I></FONT></TT>
stores the integer <TT><FONT FACE="Courier">value</FONT></TT>
at the 61st position in the local variable array of the current
stack frame.
<LI><TT><FONT FACE="Courier">istore_3 <I>value</I></FONT></TT>
stores the integer <TT><FONT FACE="Courier">value</FONT></TT>
at the 62nd position in the local variable array of the current
stack frame. Once retrieved, the variable is pushed onto the stack.
<LI><TT><FONT FACE="Courier">lstore <I>index</I> <I>value</I></FONT></TT>
stores the <TT><FONT FACE="Courier">long</FONT></TT> <TT><FONT FACE="Courier">value</FONT></TT>
at the <TT><I><FONT FACE="Courier">index</FONT></I></TT> and <TT><I><FONT FACE="Courier">index+1</FONT></I></TT>
positions in the local variable array of the current stack frame.
<LI><TT><FONT FACE="Courier">lstore_0 <I>value</I></FONT></TT>
stores the <TT><FONT FACE="Courier">long</FONT></TT> <TT><FONT FACE="Courier">value</FONT></TT>
at the 63rd and 64th positions in the local variable array of
the current stack frame.
<LI><TT><FONT FACE="Courier">lstore_1 <I>value</I></FONT></TT>
stores the <TT><FONT FACE="Courier">long</FONT></TT> <TT><FONT FACE="Courier">value</FONT></TT>
at the 64th and 65th positions in the local variable array of
the current stack frame.
<LI><TT><FONT FACE="Courier">lstore_2 <I>value</I></FONT></TT>
stores the <TT><FONT FACE="Courier">long</FONT></TT> <TT><FONT FACE="Courier">value</FONT></TT>
at the 65th and 66th positions in the local variable array of
the current stack frame.
<LI><TT><FONT FACE="Courier">lstore_3 <I>value</I></FONT></TT>
stores the <TT><FONT FACE="Courier">long</FONT></TT> <TT><FONT FACE="Courier">value</FONT></TT>
at the 66th and 67th positions in the local variable array of
the current stack frame.
<LI><TT><FONT FACE="Courier">fstore <I>index</I> <I>value</I></FONT></TT>
stores the <TT><FONT FACE="Courier">float</FONT></TT> <TT><FONT FACE="Courier">value</FONT></TT>
at the <TT><I><FONT FACE="Courier">byte</FONT></I></TT> position
in the local variable array of the current stack frame.
<LI><TT><FONT FACE="Courier">fstore_0 <I>value</I></FONT></TT>
stores the <TT><FONT FACE="Courier">float</FONT></TT> <TT><FONT FACE="Courier">value</FONT></TT>
at the 67th position in the local variable array of the current
stack frame.
<LI><TT><FONT FACE="Courier">fstore_1 <I>value</I></FONT></TT>
stores the <TT><FONT FACE="Courier">float</FONT></TT> <TT><FONT FACE="Courier">value</FONT></TT>
at the 68th position in the local variable array of the current
stack frame.
<LI><TT><FONT FACE="Courier">fstore_2 <I>value</I></FONT></TT>
stores the <TT><FONT FACE="Courier">float</FONT></TT> <TT><FONT FACE="Courier">value</FONT></TT>
at the 69th position in the local variable array of the current
stack frame.
<LI><TT><FONT FACE="Courier">fstore_3 <I>value</I></FONT></TT>
stores the <TT><FONT FACE="Courier">float</FONT></TT> <TT><FONT FACE="Courier">value</FONT></TT>
at the 70th position in the local variable array of the current
stack frame.
<LI><TT><FONT FACE="Courier">dstore <I>index</I> <I>value</I></FONT></TT>
stores the <TT><FONT FACE="Courier">double</FONT></TT> <TT><FONT FACE="Courier">value</FONT></TT>
at the <TT><I><FONT FACE="Courier">index</FONT></I></TT> and <TT><I><FONT FACE="Courier">index+1</FONT></I></TT>
positions in the local variable array of the current stack frame.
<LI><TT><FONT FACE="Courier">dstore_0 <I>value</I></FONT></TT>
stores the <TT><FONT FACE="Courier">double</FONT></TT> <TT><FONT FACE="Courier">value</FONT></TT>
at the 71st and 72nd positions in the local variable array of
the current stack frame.
<LI><TT><FONT FACE="Courier">dstore_1 <I>value</I></FONT></TT>
stores the <TT><FONT FACE="Courier">double</FONT></TT> <TT><FONT FACE="Courier">value</FONT></TT>
at the 72nd and 73rd positions in the local variable array of
the current stack frame.
<LI><TT><FONT FACE="Courier">dstore_2 <I>value</I></FONT></TT>
stores the <TT><FONT FACE="Courier">double</FONT></TT> <TT><FONT FACE="Courier">value</FONT></TT>
at the 73rd and 74th positions in the local variable array of
the current stack frame.
<LI><TT><FONT FACE="Courier">dstore_3 <I>value</I></FONT></TT>
stores the <TT><FONT FACE="Courier">double</FONT></TT> <TT><FONT FACE="Courier">value</FONT></TT>
at the 74th and 75th positions in the local variable array of
the current stack frame.
<LI><TT><FONT FACE="Courier">astore <I>index</I> <I>value</I></FONT></TT>
stores an object or array of <TT><FONT FACE="Courier">value</FONT></TT>
at the <TT><I><FONT FACE="Courier">index</FONT></I></TT> position
in the local variable array of the current stack frame.
<LI><TT><FONT FACE="Courier">astore_0 <I>value</I></FONT></TT>
stores an object or array of <TT><FONT FACE="Courier">value</FONT></TT>
at the 75th position in the local variable array of the current
stack frame.
<LI><TT><FONT FACE="Courier">astore_1 <I>value</I></FONT></TT>
stores an object or array of <TT><FONT FACE="Courier">value</FONT></TT>
at the 76th position in the local variable array of the current
stack frame.
<LI><TT><FONT FACE="Courier">astore_2 <I>value</I></FONT></TT>
stores an object or array of <TT><FONT FACE="Courier">value</FONT></TT>
at the 77th position in the local variable array of the current
stack frame.
<LI><TT><FONT FACE="Courier">astore_3 <I>value</I></FONT></TT>
stores an object or array of <TT><FONT FACE="Courier">value</FONT></TT>
at the 78th position in the local variable array of the current
stack frame.
<LI><TT><FONT FACE="Courier">iinc <I>index</I> <I>const</I></FONT></TT>
increments the value stored at the <TT><I><FONT FACE="Courier">index</FONT></I></TT>
position in the local variable array of the current stack frame
by a value of <TT><I><FONT FACE="Courier">const</FONT></I></TT>.
</UL>
<H3><A NAME="ManagingArrays">Managing Arrays</A></H3>
<P>
The garbage-collection heap is responsible for the allocation
and deallocation of referenced data. The following instructions
allocate, deallocate, and store data to the garbage-collection
heap:
<UL>
<LI><TT><FONT FACE="Courier">newarray <I>type size</I> </FONT></TT>allocates
a new array of <TT><I><FONT FACE="Courier">size </FONT></I></TT>to
hold the variable type specified by the <TT><I><FONT FACE="Courier">type
</FONT></I></TT>parameter. Table 37.3 lists the variable types
specified by the <TT><FONT FACE="Courier">type</FONT></TT> parameter.
</UL>
<P>
<P>
<CENTER>
<B>Table 37.3. Variable types specified by the </B><TT><B><FONT FACE="Courier">type</FONT></B></TT><B>
parameter.</B>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B><FONT SIZE=2>Variable Type</FONT></B></TD>
<TD WIDTH=102><CENTER><B><FONT SIZE=2>Value</FONT></B></CENTER>
</TD></TR>
<TR><TD WIDTH=241><TT><FONT FACE="Courier">T_ARRAY</FONT></TT>
</TD><TD WIDTH=102><CENTER><TT><FONT FACE="Courier">0x0001</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=241><TT><FONT FACE="Courier">T_BOOLEAN</FONT></TT>
</TD><TD WIDTH=102><CENTER><TT><FONT FACE="Courier">0x0004</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=241><TT><FONT FACE="Courier">T_CHAR</FONT></TT>
</TD><TD WIDTH=102><CENTER><TT><FONT FACE="Courier">0x0005</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=241><TT><FONT FACE="Courier">T_FLOAT</FONT></TT>
</TD><TD WIDTH=102><CENTER><TT><FONT FACE="Courier">0x0006</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=241><TT><FONT FACE="Courier">T_DOUBLE</FONT></TT>
</TD><TD WIDTH=102><CENTER><TT><FONT FACE="Courier">0x0007</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=241><TT><FONT FACE="Courier">T_BYTE</FONT></TT>
</TD><TD WIDTH=102><CENTER><TT><FONT FACE="Courier">0x0008</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=241><TT><FONT FACE="Courier">T_SHORT</FONT></TT>
</TD><TD WIDTH=102><CENTER><TT><FONT FACE="Courier">0x0009</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=241><TT><FONT FACE="Courier">T_INT</FONT></TT></TD>
<TD WIDTH=102><CENTER><TT><FONT FACE="Courier">0x000A</FONT></TT></CENTER>
</TD></TR>
<TR><TD WIDTH=241><TT><FONT FACE="Courier">T_LONG</FONT></TT>
</TD><TD WIDTH=102><CENTER><TT><FONT FACE="Courier">0x000B</FONT></TT></CENTER>
</TD></TR>
</TABLE>
</CENTER>
<P>
<UL>
<LI><TT><I><FONT FACE="Courier">anewarray byte1 byte2 size</FONT></I></TT>
creates a new array with a length of <TT><I><FONT FACE="Courier">size</FONT></I></TT>,
of the class type referenced by the position in the <TT><I><FONT FACE="Courier">constant_pool</FONT></I></TT>,
and indexed by the 2-byte index constructed from <TT><I><FONT FACE="Courier">byte1</FONT></I></TT>
and <TT><I><FONT FACE="Courier">byte2</FONT></I></TT>. The handle
of the created stack is passed back on the stack.
<LI><TT><I><FONT FACE="Courier">multianewarray byte1 byte2 dimension</FONT></I></TT>
creates a multidimensional array from the information retrieved.
<TT><I><FONT FACE="Courier">byte1</FONT></I></TT> and <TT><I><FONT FACE="Courier">byte2</FONT></I></TT>
are used to construct an index into the <TT><I><FONT FACE="Courier">constant_pool</FONT></I></TT>
referencing the type of array to create. <TT><I><FONT FACE="Courier">dimension</FONT></I></TT>
is the dimension of the array to create-the actual size of each
dimension is popped off the stack. The handle of the created stack
is passed back on the stack.
<LI><TT><I><FONT FACE="Courier">arraylength handle</FONT></I></TT>
returns the size of the array referenced by the supplied array
handle.
<LI><TT><I><FONT FACE="Courier">iaload handle index</FONT></I></TT>
returns the integer at the <TT><I><FONT FACE="Courier">index</FONT></I></TT>
position of the array referenced by the array <TT><I><FONT FACE="Courier">handle</FONT></I></TT>.
<LI><TT><I><FONT FACE="Courier">laload handle index</FONT></I></TT>
returns the <TT><I><FONT FACE="Courier">long</FONT></I></TT> at
the <TT><I><FONT FACE="Courier">index</FONT></I></TT> position
of the array referenced by the array <TT><I><FONT FACE="Courier">handle</FONT></I></TT>.
<LI><TT><I><FONT FACE="Courier">faload handle index</FONT></I></TT>
returns the <TT><I><FONT FACE="Courier">float</FONT></I></TT>
at the <TT><I><FONT FACE="Courier">index</FONT></I></TT> position
of the array referenced by the array <TT><I><FONT FACE="Courier">handle</FONT></I></TT>.
<LI><TT><I><FONT FACE="Courier">daload handle index</FONT></I></TT>
returns the <TT><I><FONT FACE="Courier">double</FONT></I></TT>
at the <TT><I><FONT FACE="Courier">index</FONT></I></TT> position
of the array referenced by the array <TT><I><FONT FACE="Courier">handle</FONT></I></TT>.
<LI><TT><I><FONT FACE="Courier">aaload handle index</FONT></I></TT>
returns the object at the <TT><I><FONT FACE="Courier">index</FONT></I></TT>
position of the array referenced by the array <TT><I><FONT FACE="Courier">handle</FONT></I></TT>.
<LI><TT><I><FONT FACE="Courier">caload handle index</FONT></I></TT>
returns the character at the <TT><I><FONT FACE="Courier">index</FONT></I></TT>
position of the array referenced by the array <TT><I><FONT FACE="Courier">handle</FONT></I></TT>.
<LI><TT><I><FONT FACE="Courier">saload handle index</FONT></I></TT>
returns the short at the <TT><I><FONT FACE="Courier">index</FONT></I></TT>
position of the array referenced by the array <TT><I><FONT FACE="Courier">handle</FONT></I></TT>.
<LI><TT><I><FONT FACE="Courier">iastore handle index value</FONT></I></TT>
stores the integer <TT><I><FONT FACE="Courier">value</FONT></I></TT>
at the <TT><I><FONT FACE="Courier">index</FONT></I></TT> position
of the array referenced by the array <TT><I><FONT FACE="Courier">handle</FONT></I></TT>.
<LI><TT><I><FONT FACE="Courier">lastore handle index value</FONT></I></TT>
stores the <TT><I><FONT FACE="Courier">long</FONT></I></TT> <TT><I><FONT FACE="Courier">value</FONT></I></TT>
at the <TT><I><FONT FACE="Courier">index</FONT></I></TT> position
of the array referenced by the array <TT><I><FONT FACE="Courier">handle</FONT></I></TT>.
<LI><TT><I><FONT FACE="Courier">fastore handle index value</FONT></I></TT>
stores the <TT><I><FONT FACE="Courier">float</FONT></I></TT> <TT><I><FONT FACE="Courier">value</FONT></I></TT>
at the <TT><I><FONT FACE="Courier">index</FONT></I></TT> position
of the array referenced by the array <TT><I><FONT FACE="Courier">handle</FONT></I></TT>.
<LI><TT><I><FONT FACE="Courier">dastore handle index value</FONT></I></TT>
stores the <TT><I><FONT FACE="Courier">double</FONT></I></TT>
<TT><I><FONT FACE="Courier">value</FONT></I></TT> at the <TT><I><FONT FACE="Courier">index</FONT></I></TT>
position of the array referenced by the array <TT><I><FONT FACE="Courier">handle</FONT></I></TT>.
<LI><TT><I><FONT FACE="Courier">aastore handle index value_handle</FONT></I></TT>
stores the object <TT><I><FONT FACE="Courier">value_handle</FONT></I></TT>
at the <TT><I><FONT FACE="Courier">index</FONT></I></TT> position
of the array referenced by the array <TT><I><FONT FACE="Courier">handle</FONT></I></TT>.
<LI><TT><I><FONT FACE="Courier">bastore handle index value</FONT></I></TT>
stores the signed byte <TT><I><FONT FACE="Courier">value</FONT></I></TT>
at the <TT><I><FONT FACE="Courier">index</FONT></I></TT> position
of the array referenced by the array <TT><I><FONT FACE="Courier">handle</FONT></I></TT>.
<LI><TT><I><FONT FACE="Courier">castore handle index value</FONT></I></TT>
stores the character <TT><I><FONT FACE="Courier">value</FONT></I></TT>
at the <TT><I><FONT FACE="Courier">index</FONT></I></TT> position
of the array referenced by the array <TT><I><FONT FACE="Courier">handle</FONT></I></TT>.
<LI><TT><I><FONT FACE="Courier">sastore handle index value</FONT></I></TT>
stores the short <TT><I><FONT FACE="Courier">value</FONT></I></TT>
at the <TT><I><FONT FACE="Courier">index</FONT></I></TT> position
of the array referenced by the array <TT><I><FONT FACE="Courier">handle</FONT></I></TT>.
</UL>
<H3><A NAME="StackInstructions">Stack Instructions</A></H3>
<P>
With the existence of any stack, there must be some fundamental
operations to operate the stack. The following instructions do
just that:
<UL>
<LI><TT><FONT FACE="Courier">nop</FONT></TT> has no effect; it
leaves the current stack state unchanged.
<LI><TT><FONT FACE="Courier">pop</FONT></TT> pops the top word
off the stack.
<LI><TT><FONT FACE="Courier">pop2</FONT></TT> pops the top two
words off the stack.
<LI><TT><FONT FACE="Courier">dup</FONT></TT> copies the top stack
word and places it on the stack.
<LI><TT><FONT FACE="Courier">dup2</FONT></TT> copies the top two
stack words and places them on the stack.
<LI><TT><FONT FACE="Courier">dup_x1</FONT></TT> copies the top
stack word and places the value two words down in the stack.
<LI><TT><FONT FACE="Courier">dup2_x1</FONT></TT> copies the top
two stack words and places the values two words down in the stack.
<LI><TT><FONT FACE="Courier">dup_x2</FONT></TT> copies the top
stack word and places the value three words down in the stack.
<LI><TT><FONT FACE="Courier">dup2_x2</FONT></TT> copies the top
two stack words and places the values three words down in the
stack.
<LI><TT><FONT FACE="Courier">swap</FONT></TT> swaps the position
of the top two stack words. The word on top becomes the second
to the top, and the word second from the top becomes the new top
word.
</UL>
<H3><A NAME="ArithmeticInstructions">Arithmetic Instructions</A>
</H3>
<P>
All computers need to function as a calculator at some point.
The capability to do fundamental computations is inherent to all
computing devices, and the JVM is no exception. The following
instructions provide the JVM with arithmetic operations:
<UL>
<LI><TT><FONT FACE="Courier">iadd</FONT></TT> pops off the top
two integers on the stack and replaces them with the sum of the
two values.
<LI><TT><FONT FACE="Courier">ladd</FONT></TT> pops off the top
two positions on the stack to create a <TT><FONT FACE="Courier">long</FONT></TT>
value. Then the next two are popped off to create the second <TT><FONT FACE="Courier">long</FONT></TT>
value. The sum of the two values is then pushed onto the stack.
<LI><TT><FONT FACE="Courier">fadd</FONT></TT> pops off the top
two floats on the stack and replaces them with the sum of the
two values.
<LI><TT><FONT FACE="Courier">dadd</FONT></TT> pops off the top
two positions on the stack to create a <TT><FONT FACE="Courier">double</FONT></TT>
value. Then the next two are popped off to create the second <TT><FONT FACE="Courier">double</FONT></TT>
value. The sum of the two values is then pushed onto the stack.
<LI><TT><FONT FACE="Courier">isub</FONT></TT> pops off the top
two integers on the stack and replaces them with the first value
minus the second.
<LI><TT><FONT FACE="Courier">lsub</FONT></TT> pops off the top
two positions on the stack to create a <TT><FONT FACE="Courier">long</FONT></TT>
value. Then the next two are popped off to create the second <TT><FONT FACE="Courier">long</FONT></TT>
value. The result of the first value minus the second is then
pushed onto the stack.
<LI><TT><FONT FACE="Courier">fsub</FONT></TT> pops off the top
two <TT><FONT FACE="Courier">float</FONT></TT>s from the stack
and replaces them with the first value minus the second.
<LI><TT><FONT FACE="Courier">dsub</FONT></TT> pops off the top
two positions from the stack to create a <TT><FONT FACE="Courier">double</FONT></TT>
value. Then the next two are popped off to create the second <TT><FONT FACE="Courier">double</FONT></TT>
value. The result of the first value minus the second is then
pushed onto the stack.
<LI><TT><FONT FACE="Courier">imul</FONT></TT> pops off the top
two integers from the stack and replaces them with the top two
positions on the stack, which are popped off to create a <TT><FONT FACE="Courier">long</FONT></TT>
value. Then the next two are popped off to create the second <TT><FONT FACE="Courier">long</FONT></TT>
value. The product of the two values is then pushed onto the stack.
<LI><TT><FONT FACE="Courier">fmul</FONT></TT> pops off the top
two <TT><FONT FACE="Courier">float</FONT></TT>s from the stack
and replaces them with the product of the two values.
<LI><TT><FONT FACE="Courier">dmul</FONT></TT> pops off the top
two positions on the stack to create a <TT><FONT FACE="Courier">double</FONT></TT>
value. Then the next two are popped off to create the second <TT><FONT FACE="Courier">double</FONT></TT>
value. The product of the two values is then pushed onto the stack.
<LI><TT><FONT FACE="Courier">idiv</FONT></TT> pops off the top
two integers from the stack and replaces them with the first value
minus the second.
<LI><TT><FONT FACE="Courier">ldiv</FONT></TT> pops off the top
two positions on the stack to create a <TT><FONT FACE="Courier">long</FONT></TT>
value. Then the next two are popped off to create the second <TT><FONT FACE="Courier">long</FONT></TT>
value. The result of the first value divided by the second is
then pushed onto the stack.
<LI><TT><FONT FACE="Courier">fdiv</FONT></TT> pops off the top
two <TT><FONT FACE="Courier">float</FONT></TT>s from the stack
and replaces them with the first value divided by the second.
<LI><TT><FONT FACE="Courier">ddiv</FONT></TT> pops off the top
two positions on the stack to create a <TT><FONT FACE="Courier">double</FONT></TT>
value. Then the next two are popped off to create the second <TT><FONT FACE="Courier">double</FONT></TT>
value. The result of the first value divided by the second is
then pushed onto the stack.
<LI><TT><FONT FACE="Courier">imod</FONT></TT> pops off the top
two integers from the stack and replaces them with the first value
modulus the second.
<LI><TT><FONT FACE="Courier">lmod</FONT></TT> pops off the top
two positions on the stack to create a <TT><FONT FACE="Courier">long</FONT></TT>
value. Then the next two are popped off to create the second <TT><FONT FACE="Courier">long</FONT></TT>
value. The result of the first value modulus the second is then
pushed onto the stack.
<LI><TT><FONT FACE="Courier">fmod</FONT></TT> pops off the top
two <TT><FONT FACE="Courier">float</FONT></TT>s from the stack
and replaces them with the first value modulus the second.
<LI><TT><FONT FACE="Courier">ddiv</FONT></TT> pops off the top
two positions on the stack to create a <TT><FONT FACE="Courier">double</FONT></TT>
value. Then the next two are popped off to create the second <TT><FONT FACE="Courier">double</FONT></TT>
value. The result of the first value modulus the second is then
pushed onto the stack.
<LI><TT><FONT FACE="Courier">ineg</FONT></TT> pops off the top
integer from the stack and replaces it with the negated value.
<LI><TT><FONT FACE="Courier">lneg</FONT></TT> pops off the top
two positions on the stack to create a <TT><FONT FACE="Courier">long</FONT></TT>
value. The negated value is pushed onto the stack.
<LI><TT><FONT FACE="Courier">fneg</FONT></TT> pops off the top
<TT><FONT FACE="Courier">float</FONT></TT> from the stack and
replaces it with a negated value.
<LI><TT><FONT FACE="Courier">dneg</FONT></TT> pops off the top
two positions on the stack to create a <TT><FONT FACE="Courier">double</FONT></TT>
value. The negated value is pushed onto the stack.
</UL>
<H3><A NAME="LogicalInstructions">Logical Instructions</A></H3>
<P>
The following instructions implement logical operations:
<UL>
<LI><TT><FONT FACE="Courier">ishl</FONT></TT> shifts the value
at the top of the stack to the left by the amount indicated by
the low 5 bits of the second stack value. The result is then placed
on the stack.
<LI><TT><FONT FACE="Courier">ishr</FONT></TT> shifts the value
at the top of the stack to the left by the amount indicated by
the low 5 bits of the second stack value while retaining the sign
extension. The result is then placed on the stack.
<LI><TT><FONT FACE="Courier">iushr</FONT></TT> shifts the value
at the top of the stack to the left by the amount indicated by
the low 5 bits of the second stack value without retaining the
sign extension. The result is then placed on the stack.
<LI><TT><FONT FACE="Courier">lshl</FONT></TT> assembles the top
two values at the top of the stack to create a <TT><FONT FACE="Courier">long</FONT></TT>
value. The value is then shifted left by the amount indicated
by the low 6 bits of the third stack value. The result is then
placed on the stack.
<LI><TT><FONT FACE="Courier">lshr</FONT></TT> assembles the top
two values at the top of the stack to create a <TT><FONT FACE="Courier">long</FONT></TT>
value. The value is then shifted right by the amount indicated
by the low 6 bits of the third stack value while retaining the
sign extension. The result is then placed on the stack.
<LI><TT><FONT FACE="Courier">lshur</FONT></TT> assembles the top
two values at the top of the stack to create a <TT><FONT FACE="Courier">long</FONT></TT>
value. The value is then shifted right by the amount indicated
by the low 6 bits of the third stack value without retaining the
sign extension. The result is then placed on the stack.
<LI><TT><FONT FACE="Courier">iand</FONT></TT> performs a logical
<TT><FONT FACE="Courier">AND</FONT></TT> of the top integer value
on the stack with the next value. The result is then pushed onto
the stack.
<LI><TT><FONT FACE="Courier">land</FONT></TT> assembles the top
two values on the stack into a <TT><FONT FACE="Courier">long</FONT></TT>
value, and then assembles the second two into a <TT><FONT FACE="Courier">long</FONT></TT>
value. The result forms a logical <TT><FONT FACE="Courier">AND</FONT></TT>
of the two values and is then pushed onto the stack.
<LI><TT><FONT FACE="Courier">ior</FONT></TT> <TT><FONT FACE="Courier">OR</FONT></TT>s
the top integer value on the stack with the next value. The result
is then pushed onto the stack.
<LI><TT><FONT FACE="Courier">lor</FONT></TT> assembles the top
two values on the stack into a <TT><FONT FACE="Courier">long</FONT></TT>
value, and then assembles the second two into a <TT><FONT FACE="Courier">long</FONT></TT>
value. The result from a logical <TT><FONT FACE="Courier">OR</FONT></TT>
of the two values is then pushed onto the stack.
<LI><TT><FONT FACE="Courier">ixor</FONT></TT> exclusive <TT><FONT FACE="Courier">OR</FONT></TT>s
the top integer value on the stack with the next value. The result
is then pushed onto the stack.
<LI><TT><FONT FACE="Courier">lxor</FONT></TT> assembles the top
two values on the stack into a <TT><FONT FACE="Courier">long</FONT></TT>
value, and then assembles the second two into a <TT><FONT FACE="Courier">long</FONT></TT>
value. The result forms a logical exclusive <TT><FONT FACE="Courier">OR</FONT></TT>
of the two values and is then pushed onto the stack.
</UL>
<H3><A NAME="ConversionOperations">Conversion Operations</A></H3>
<P>
The following instructions provide the capability to convert data
types:
<UL>
<LI><TT><FONT FACE="Courier">i2l</FONT></TT> converts the integer
value at the top of the stack into a <TT><FONT FACE="Courier">long</FONT></TT>
value. The result is then pushed onto the stack.
<LI><TT><FONT FACE="Courier">i2f</FONT></TT> converts the integer
value at the top of the stack into a <TT><FONT FACE="Courier">float</FONT></TT>
value. The result is then pushed onto the stack.
<LI><TT><FONT FACE="Courier">i2d</FONT></TT> converts the integer
value at the top of the stack into a <TT><FONT FACE="Courier">double</FONT></TT>
value. The result is then pushed onto the stack.
<LI><TT><FONT FACE="Courier">l2i</FONT></TT> assembles the top
two values on the stack into a <TT><FONT FACE="Courier">long</FONT></TT>
value that is then converted to an integer value and pushed onto
the stack.
<LI><TT><FONT FACE="Courier">l2f</FONT></TT> assembles the top
two values on the stack into a <TT><FONT FACE="Courier">long</FONT></TT>
value that is then converted to a <TT><FONT FACE="Courier">float</FONT></TT>
value and pushed onto the stack.
<LI><TT><FONT FACE="Courier">l2d</FONT></TT> assembles the top
two values on the stack into a <TT><FONT FACE="Courier">long</FONT></TT>
value that is then converted to a <TT><FONT FACE="Courier">double</FONT></TT>
value and pushed onto the stack.
<LI><TT><FONT FACE="Courier">f2i</FONT></TT> converts the <TT><FONT FACE="Courier">float</FONT></TT>
value at the top of the stack into an integer value. The result
is then pushed onto the stack.
<LI><TT><FONT FACE="Courier">f2l</FONT></TT> converts the <TT><FONT FACE="Courier">float</FONT></TT>
value at the top of the stack into a <TT><FONT FACE="Courier">long</FONT></TT>
value. The result is then pushed onto the stack.
<LI><TT><FONT FACE="Courier">f2d</FONT></TT> converts the <TT><FONT FACE="Courier">float</FONT></TT>
value at the top of the stack into a <TT><FONT FACE="Courier">double</FONT></TT>
value. The result is then pushed onto the stack.
<LI><TT><FONT FACE="Courier">d2i</FONT></TT> assembles the top
two values on the stack into a <TT><FONT FACE="Courier">double</FONT></TT>
value that is then converted to an integer value and pushed onto
the stack.
<LI><TT><FONT FACE="Courier">d2l</FONT></TT> assembles the top
two values on the stack into a <TT><FONT FACE="Courier">double</FONT></TT>
value that is then converted to a <TT><FONT FACE="Courier">long</FONT></TT>
value and pushed onto the stack.
<LI><TT><FONT FACE="Courier">d2f</FONT></TT> assembles the top
two values on the stack into a <TT><FONT FACE="Courier">double</FONT></TT>
value that is then converted to a <TT><FONT FACE="Courier">float</FONT></TT>
value and pushed onto the stack.
<LI><TT><FONT FACE="Courier">int2byte</FONT></TT> converts the
integer value at the top of the stack into a <TT><FONT FACE="Courier">byte</FONT></TT>
value. The result is then pushed onto the stack.
<LI><TT><FONT FACE="Courier">int2char</FONT></TT> converts the
integer value at the top of the stack into a <TT><FONT FACE="Courier">char</FONT></TT>
value. The result is then pushed onto the stack.
<LI><TT><FONT FACE="Courier">int2short</FONT></TT> converts the
integer value at the top of the stack into a <TT><FONT FACE="Courier">short</FONT></TT>
value. The result is then pushed onto the stack.
</UL>
<H3><A NAME="ControlTransferInstructions">Control Transfer Instructions</A>
</H3>
<P>
Conditional statements allow the computer to execute <TT><FONT FACE="Courier">boolean</FONT></TT>
logic. In doing so, they give the computer the capability to make
simple decisions based on a true-or-false comparison. The following
instructions support conditional decisions and alter program flow
of control:
<UL>
<LI><TT><FONT FACE="Courier">ifeq</FONT></TT>-If the value at
the top of the stack is equal to 0, the next two values are used
to create a signed 16-bit offset from which execution will proceed.
<LI><TT><FONT FACE="Courier">iflt</FONT></TT>-If the value at
the top of the stack is less than 0, the next two values are used
to create a signed 16-bit offset from which execution will proceed.
<LI><TT><FONT FACE="Courier">ifle</FONT></TT>-If the value at
the top of the stack is less than or equal to 0, the next two
values are used to create a signed 16-bit offset from which execution
will proceed.
<LI><TT><FONT FACE="Courier">ifne</FONT></TT>-If the value at
the top of the stack is not equal to 0, the next two values are
used to create a signed 16-bit offset from which execution will
proceed.
<LI><TT><FONT FACE="Courier">ifgt</FONT></TT>-If the value at
the top of the stack is greater than 0, the next two values are
used to create a signed 16-bit offset from which execution will
proceed.
<LI><TT><FONT FACE="Courier">if_icmpeq</FONT></TT>-The two topmost
integer values are compared. If the values are equal, the next
two values are used to create a signed 16-bit offset from which
execution will proceed.
<LI><TT><FONT FACE="Courier">if_icmpne</FONT></TT>-The two topmost
integer values are compared. If the values are not equal, the
next two values are used to create a signed 16-bit offset from
which execution will proceed.
<LI><TT><FONT FACE="Courier">if_icmplt</FONT></TT>-The two topmost
integer values are compared. If the first value is less than the
second, the next two values are used to create a signed 16-bit
offset from which execution will proceed.
<LI><TT><FONT FACE="Courier">if_icmple</FONT></TT>-The two topmost
integer values are compared. If the first value is less than or
equal to the second, the next two values are used to create a
signed 16-bit offset from which execution will proceed.
<LI><TT><FONT FACE="Courier">if_icmpgt</FONT></TT>-The two topmost
integer values are compared. If the first value is greater than
the second, the next two values are used to create a signed 16-bit
offset from which execution will proceed.
<LI><TT><FONT FACE="Courier">if_icmpge</FONT></TT>-The two topmost
integer values are compared. If the first value is greater than
or equal to the second, the next two values are used to create
a signed 16-bit offset from which execution will proceed.
<LI><TT><FONT FACE="Courier">lcmp</FONT></TT>-The top two values
on the stack are assembled into a <TT><FONT FACE="Courier">long</FONT></TT>
value that is compared with the next assembled <TT><FONT FACE="Courier">long</FONT></TT>
value on the stack. If the first value is greater than the second,
the value of <TT><FONT FACE="Courier">1</FONT></TT> is pushed
onto the stack. Otherwise, if the first value is equal to the
second, the value of <TT><FONT FACE="Courier">0</FONT></TT> is
pushed onto the stack. Otherwise, the value of <TT><FONT FACE="Courier">-1</FONT></TT>
is pushed onto the stack.
<LI><TT><FONT FACE="Courier">fcmpl</FONT></TT>-The top two <TT><FONT FACE="Courier">float</FONT></TT>
values on the stack are compared. If the first value is greater
than the second, the value of <TT><FONT FACE="Courier">1</FONT></TT>
is pushed onto the stack. Otherwise, if the first value is equal
to the second, the value of <TT><FONT FACE="Courier">0</FONT></TT>
is pushed onto the stack. Otherwise, the value of <TT><FONT FACE="Courier">-1</FONT></TT>
is pushed onto the stack. If the values are incompatible, a value
of <TT><FONT FACE="Courier">-1</FONT></TT> is pushed onto the
stack.
<LI><TT><FONT FACE="Courier">fcmpg</FONT></TT>-The same as <TT><FONT FACE="Courier">fcmpl</FONT></TT>
except that if the types are incompatible, a value of <TT><FONT FACE="Courier">1</FONT></TT>
is pushed onto the stack.
<LI><TT><FONT FACE="Courier">dcmpl</FONT></TT>-The top two <TT><FONT FACE="Courier">double</FONT></TT>
values on the stack are assembled and compared. If the first value
is greater than the second, the value of <TT><FONT FACE="Courier">1</FONT></TT>
is pushed onto the stack. If the first value is equal to the second,
the value of <TT><FONT FACE="Courier">0</FONT></TT> is pushed
onto the stack. Otherwise, the value of <TT><FONT FACE="Courier">-1</FONT></TT>
is pushed onto the stack. If the values are incompatible, a value
of <TT><FONT FACE="Courier">-1</FONT></TT> is pushed onto the
stack.
<LI><TT><FONT FACE="Courier">dcmpg</FONT></TT>-The same as <TT><FONT FACE="Courier">dcmpl</FONT></TT>
except if the types are incompatible, a value of <TT><FONT FACE="Courier">1</FONT></TT>
is pushed onto the stack.
<LI><TT><FONT FACE="Courier">if_acmpeq</FONT></TT>-The two topmost
object handles are compared. If the first reference object is
equal to the second, the next two values are used to create a
signed 16-bit offset from which execution will proceed. Otherwise,
execution will continue.
<LI><TT><FONT FACE="Courier">if_acmpne</FONT></TT>-The two topmost
object handles are compared. If the first reference object is
not equal to the second, the next two values are used to create
a signed 16-bit offset from which execution will proceed. Otherwise,
execution will continue.
<LI><TT><FONT FACE="Courier">goto</FONT></TT>-The next two values
are used to create a signed 16-bit offset from which execution
will proceed.
<LI><TT><FONT FACE="Courier">jsr</FONT></TT>-The next two values
are used to create a signed 16-bit offset from which execution
will proceed. All opcodes following the <TT><FONT FACE="Courier">jsr</FONT></TT>
will be pushed onto the stack.
<LI><TT><FONT FACE="Courier">ret</FONT></TT>-The next value on
the stack is used as an index into the local variables to retrieve
the offset from which execution will continue.
</UL>
<H3><A NAME="FunctionReturnInstructions">Function Return Instructions</A>
</H3>
<P>
The following instructions are used to return a value from a function
call:
<UL>
<LI><TT><FONT FACE="Courier">ireturn</FONT></TT> returns an <TT><FONT FACE="Courier">integer</FONT></TT>
value from a function call.
<LI><TT><FONT FACE="Courier">lreturn</FONT></TT> returns a <TT><FONT FACE="Courier">long</FONT></TT>
value from a function call.
<LI><TT><FONT FACE="Courier">freturn</FONT></TT> returns a <TT><FONT FACE="Courier">float</FONT></TT>
value from a function call.
<LI><TT><FONT FACE="Courier">dreturn</FONT></TT> returns a <TT><FONT FACE="Courier">double</FONT></TT>
value from a function call.
<LI><TT><FONT FACE="Courier">areturn</FONT></TT> returns an object
reference from a function call.
<LI><TT><FONT FACE="Courier">return</FONT></TT> returns from a
function call without returning a value.
</UL>
<P>
After the value has been returned, the JVM begins execution of
the line following the function call. The value returned is then
the top element(s) of the stack.
<H3><A NAME="TableJumpingInstructions">Table Jumping Instructions</A>
</H3>
<P>
The jump table stores the offset information when the program
execution jumps to a non-sequential location. This information
allows the program to resume execution at the next logical offset.
The program jump is achieved by adding the new opcode offset to
the current <TT><FONT FACE="Courier">pc</FONT></TT> value. The
following instructions provide the capability to jump to locations
in the table:
<UL>
<LI><TT><FONT FACE="Courier">tableswitch</FONT></TT> uses the
top integer value of the stack as a table index. If the index
is not in the current range of the jump table, the program will
jump by the default offset. If the index is in the valid range,
the offset is extracted from the table and is used to determine
the next instruction to be executed.
<LI><TT><FONT FACE="Courier">lookupswitch</FONT></TT> functions
the same as <TT><FONT FACE="Courier">tableswitch</FONT></TT>,
except the integer value at the top of the stack is the key value
to be found in the table, rather than the index.
</UL>
<H3><A NAME="ManipulatingObjectFields">Manipulating Object Fields</A>
</H3>
<P>
The following instructions provide the capability to access and
modify members of an object:
<UL>
<LI><TT><FONT FACE="Courier">putfield <I>byte1 byte2</I></FONT></TT>-The
values of <TT><FONT FACE="Courier">byte1</FONT></TT> and <TT><FONT FACE="Courier">byte2</FONT></TT>
form an index into the <TT><FONT FACE="Courier">constant_pool</FONT></TT>.
The indexed value holds the class and field name of the member
to change. From that information, the location of the member is
found and the value at the top of the stack is stored into that
location.
<LI><TT><FONT FACE="Courier">getstatic <I>byte1 byte2</I></FONT></TT>-The
values of <TT><FONT FACE="Courier">byte1</FONT></TT> and <TT><FONT FACE="Courier">byte2</FONT></TT>
form an index into the <TT><FONT FACE="Courier">constant_pool</FONT></TT>.
The indexed value holds the class and field name of the static
member to change. From that information, the member location is
found and pushed onto the top of the stack.
<LI><TT><FONT FACE="Courier">putfstatic <I>byte1 byte2</I></FONT></TT>-The
values of <TT><FONT FACE="Courier">byte1</FONT></TT> and <TT><FONT FACE="Courier">byte2</FONT></TT>
form an index into the <TT><FONT FACE="Courier">constant_pool</FONT></TT>.
The indexed value holds the class and field name of the static
member to change. From that information, the member location is
found and the value at the top of the stack is stored into that
location.
<LI><TT><FONT FACE="Courier">getfield <I>byte1 byte2</I></FONT></TT>-The
values of <TT><FONT FACE="Courier">byte1</FONT></TT> and <TT><FONT FACE="Courier">byte2</FONT></TT>
form an index into the <TT><FONT FACE="Courier">constant_pool</FONT></TT>.
The indexed value holds the class and field name of the member
to change. From that information, the member location is found
and pushed onto the top of the stack.
</UL>
<H3><A NAME="MethodInvocation">Method Invocation</A></H3>
<P>
The following instructions provide the capability to execute a
method of an object:
<UL>
<LI><TT><FONT FACE="Courier">invokevirtual byte1 byte2</FONT></TT>-The
values of <TT><FONT FACE="Courier">byte1</FONT></TT> and <TT><FONT FACE="Courier">byte2</FONT></TT>
make an index into the <TT><FONT FACE="Courier">constant_pool</FONT></TT>.
The referenced value is used to find the offset of the method
to execute. The stack is assumed to contain the number of arguments
to be passed to the method.
<LI><TT><FONT FACE="Courier">invokestatic byte1 byte2</FONT></TT>-The
values of <TT><FONT FACE="Courier">byte1</FONT></TT> and <TT><FONT FACE="Courier">byte2</FONT></TT>
make an index into the <TT><FONT FACE="Courier">constant_pool</FONT></TT>.
The referenced value is used to find the offset of the method
to execute. The method type is assumed to be native or synchronized.
If the method is synchronized, the associated monitor will be
executed. The stack is assumed to contain the number of arguments
to be passed to the method.
<LI><TT><FONT FACE="Courier">invokeinterface byte1 byte2</FONT></TT>-The
values of <TT><FONT FACE="Courier">byte1</FONT></TT> and <TT><FONT FACE="Courier">byte2</FONT></TT>
make an index into the <TT><FONT FACE="Courier">constant_pool</FONT></TT>.
The referenced value is used to find the offset of the interface
to execute. The method type is assumed to be native or synchronized.
If the method is synchronized, the associated monitor will be
executed. The stack is assumed to contain the number of arguments
to be passed to the method.
</UL>
<H3><A NAME="ExceptionHandling">Exception Handling</A></H3>
<P>
The <TT><FONT FACE="Courier">athrow</FONT></TT> instruction implements
Java exception handling capabilities:
<UL>
<LI><TT><FONT FACE="Courier">athrow</FONT></TT>-The top exception
object on the stack is thrown. The current method frame is searched
for the nearest catch. If none is found, the classes are then
seated for a handler. If none of the above is found, the JVM default
handler is executed.
</UL>
<H3><A NAME="ObjectUtilityOperations">Object Utility Operations</A>
</H3>
<P>
The following instructions provide some object operations that
don't fall into any other category:
<UL>
<LI><TT><FONT FACE="Courier">new <I>byte1</I> <I>byte2</I></FONT></TT>
creates a new object of the type referenced by the position in
the <TT><FONT FACE="Courier">constant_pool</FONT></TT>, indexed
by the 2-byte index constructed from <TT><I><FONT FACE="Courier">byte1</FONT></I></TT>
and <TT><I><FONT FACE="Courier">byte2</FONT></I></TT>.
<LI><TT><FONT FACE="Courier">checkcast <I>byte1</I> <I>byte2</I></FONT></TT>
checks that the type, resolved by constructing the class's string
name index into the <TT><FONT FACE="Courier">constant_pool</FONT></TT>,
is compatible to the object handle at the top of the stack. If
the objects are a proper cast, execution continues and the handle
remains on the stack. If they are incompatible, the <TT><FONT FACE="Courier">ClassCastException</FONT></TT>
is thrown.
<LI><TT><FONT FACE="Courier">newfromname <I>byte1</I> <I>byte2</I></FONT></TT>
creates a new object of the type referenced by the position in
the <TT><FONT FACE="Courier">constant_pool</FONT></TT>, indexed
by the 2-byte index constructed from <TT><I><FONT FACE="Courier">byte1</FONT></I></TT>
and <TT><I><FONT FACE="Courier">byte2</FONT></I></TT>.
<LI><TT><FONT FACE="Courier">instanceof <I>byte1</I> <I>byte2</I></FONT></TT>
checks to see if an object is an instance of a particular type.
<LI><TT><FONT FACE="Courier">verifystack</FONT></TT> checks to
see if the operand stack is empty. If not, it will be after this
call. This instruction is generated only by a compiler that is
generating debug information.
</UL>
<H3><A NAME="Monitors">Monitors</A></H3>
<P>
Due to the multithreaded nature of the JVM, there is a great need
for a mechanism to access shared memory resources. The following
instructions provide the capability to lock and unlock a memory
object:
<UL>
<LI><TT><FONT FACE="Courier">monitorenter</FONT></TT> locks the
object handle at the top of the stack until the current process
releases the resource.
<LI><TT><FONT FACE="Courier">monitorexit</FONT></TT> releases
the object handle at the top of the stack.
</UL>
<H3><A NAME="ThebreakpointInstruction">The <TT><FONT SIZE=4 FACE="Courier">breakpoint</FONT></TT><FONT SIZE=4>
Instruction</FONT></A></H3>
<P>
The <TT><FONT FACE="Courier">breakpoint</FONT></TT> instruction
calls the breakpoint handler to notify the debugger of a breakpoint.
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A><FONT SIZE=5 COLOR=#FF0000>
</FONT></H2>
<P>
This chapter diagrams the internals of a <TT><FONT FACE="Courier">.class</FONT></TT>
file, discusses the JVM architecture, and provides insight into
the JVM instruction set.
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



