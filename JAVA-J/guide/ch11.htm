<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META>
<H1><FONT COLOR=#FF0000>Chapter 11</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Language Summary</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#ThepackageStatement" >The package Statement</A>
<LI><A HREF="#TheimportStatement" >The import Statement</A>
<LI><A HREF="#Comments" >Comments</A>
<LI><A HREF="#Identifiers" >Identifiers</A>
<LI><A HREF="#ReservedWords" >Reserved Words</A>
<LI><A HREF="#PrimitiveDataTypesandLiteralValues" >Primitive Data Types and Literal Values</A>
<LI><A HREF="#ClassDeclarations" >Class Declarations</A>
<LI><A HREF="#VariableDeclarations" >Variable Declarations</A>
<LI><A HREF="#ConstructorDeclarations" >Constructor Declarations</A>
<LI><A HREF="#AccessMethodDeclarations" >Access Method Declarations</A>
<LI><A HREF="#StaticInitializers" >Static Initializers</A>
<LI><A HREF="#Interfaces" >Interfaces</A>
<LI><A HREF="#BlocksandBlockBodies" >Blocks and Block Bodies</A>
<LI><A HREF="#LocalVariableDeclarations" >Local Variable Declarations</A>
<LI><A HREF="#Statements" >Statements</A>
<UL>
<LI><A HREF="#EmptyStatement" >Empty Statement</A>
<LI><A HREF="#BlockStatement" >Block Statement</A>
<LI><A HREF="#MethodInvocation" >Method Invocation</A>
<LI><A HREF="#AllocationStatements" >Allocation Statements</A>
<LI><A HREF="#AssignmentStatements" >Assignment Statements</A>
<LI><A HREF="#TheifStatement" >The if Statement</A>
<LI><A HREF="#StatementLabels" >Statement Labels</A>
<LI><A HREF="#TheswitchStatement" >The switch Statement</A>
<LI><A HREF="#ThebreakStatement" >The break Statement</A>
<LI><A HREF="#TheforStatement" >The for Statement</A>
<LI><A HREF="#ThewhileStatement" >The while Statement</A>
<LI><A HREF="#ThedoStatement" >The do Statement</A>
<LI><A HREF="#ThecontinueStatement" >The continue Statement</A>
<LI><A HREF="#ThesynchronizedStatement" >The synchronized Statement</A>
<LI><A HREF="#ThetryStatement" >The try Statement</A>
<LI><A HREF="#ThereturnStatement" >The return Statement</A>
<LI>
</UL>
<LI><A HREF="#Operators" >Operators</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
In the previous chapters you've covered most of the elements of
the Java language and learned how to use those elements through
programming examples. This chapter provides a summary of the Java
language syntax. You can use it to review what you've learned
so far, and also as a quick reference guide when you need to look
up a particular aspect of the language.
<H2><A NAME="ThepackageStatement"><B><FONT SIZE=5 COLOR=#FF0000>The
</FONT></B><TT><B><FONT SIZE=5 COLOR=#FF0000 FACE="Courier New">package</FONT></B></TT><B><FONT SIZE=2 COLOR=#FF0000>
</FONT><FONT SIZE=5 COLOR=#FF0000>Statement</FONT></B></A></H2>
<P>
Java programs are organized into <I>packages</I>. Packages contain
the source code declarations of Java classes and interfaces. Packages
are identified by the <TT>package</TT> statement. It is the first
statement in a source code file:
<BLOCKQUOTE>
<TT>package packageName;</TT>
</BLOCKQUOTE>
<P>
If a <TT>package</TT> statement is omitted, the classes and interfaces
declared within the package are put into the default package-the
package with no name.
<P>
The package name and the <TT>CLASSPATH</TT> are used to find a
class. Only one class or interface may be declared as <TT>public</TT>
for a given source code file.
<H2><A NAME="TheimportStatement"><B><FONT SIZE=5 COLOR=#FF0000>The
</FONT></B><TT><B><FONT SIZE=5 COLOR=#FF0000 FACE="Courier New">import</FONT></B></TT><B><FONT SIZE=5 COLOR=#FF0000>
Statement</FONT></B></A></H2>
<P>
The <TT>import</TT> statement is used to reference classes and
interfaces that are declared in other packages. There are three
forms of the <TT>import</TT> statement:
<BLOCKQUOTE>
<TT>import packageName;<BR>
<BR>
<FONT FACE="Courier New">import packageName.className;<BR>
<BR>
import packageName.*;</FONT></TT>
</BLOCKQUOTE>
<P>
The first form allows classes and interfaces to be referenced
using the last component in the package name. The second form
allows the identified classes and interfaces to be referenced
without specifying the name of their package. The third form allows
all classes and interfaces in the specified package to be referenced
without specifying the name of their package.
<H2><A NAME="Comments"><B><FONT SIZE=5 COLOR=#FF0000>Comments</FONT></B></A>
</H2>
<P>
Java provides three styles of comments:
<BLOCKQUOTE>
<TT>/* This is a comment. */<BR>
<BR>
<FONT FACE="Courier New">// This is a comment.<BR>
<BR>
/** This is a javadoc comment */</FONT></TT>
</BLOCKQUOTE>
<P>
The first comment style supports traditional C-language comments.
All text appearing between <TT>/*</TT> and <TT>*/</TT> is treated
as a comment. Comments of this style can span multiple lines.
<P>
The second comment style supports C++ comments. All text following
the <TT>//</TT> until the end of the line is treated as a comment.
Comments of this style do not span multiple lines.
<P>
The third comment style is used by the <TT>javadoc</TT> documentation-generation
tool. All text between the <TT>/**</TT> and <TT>*/</TT> is treated
as a <TT>javadoc</TT> comment. <TT>javadoc</TT> comments may span
multiple lines.
<P>
Comments cannot be nested and cannot appear within string and
character literals.
<H2><A NAME="Identifiers"><B><FONT SIZE=5 COLOR=#FF0000>Identifiers</FONT></B></A>
</H2>
<P>
Identifiers are used to name Java language entities. They begin
with a letter and consist of letters and digits. Identifiers are
case sensitive and cannot be the same as a reserved word.
<H2><A NAME="ReservedWords"><B><FONT SIZE=5 COLOR=#FF0000>Reserved
Words</FONT></B></A></H2>
<P>
The following words are reserved by the Java language; they cannot
be used as names or identifiers:<BR>

<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><FONT FACE="Courier New">abstract</FONT></TD><TD WIDTH=91><FONT FACE="Courier New">do</FONT>
</TD><TD WIDTH=120><FONT FACE="Courier New">implements</FONT>
</TD><TD WIDTH=139><FONT FACE="Courier New">package</FONT></TD>
<TD WIDTH=110><FONT FACE="Courier New">throw</FONT></TD></TR>
<TR><TD WIDTH=101><FONT FACE="Courier New">boolean</FONT></TD><TD WIDTH=91><FONT FACE="Courier New">double</FONT>
</TD><TD WIDTH=120><FONT FACE="Courier New">import</FONT></TD>
<TD WIDTH=139><FONT FACE="Courier New">private</FONT></TD><TD WIDTH=110><FONT FACE="Courier New">throws</FONT>
</TD></TR>
<TR><TD WIDTH=101><FONT FACE="Courier New">break</FONT></TD><TD WIDTH=91><FONT FACE="Courier New">else</FONT>
</TD><TD WIDTH=120><FONT FACE="Courier New">inner</FONT></TD>
<TD WIDTH=139><FONT FACE="Courier New">protected</FONT></TD><TD WIDTH=110><FONT FACE="Courier New">transient</FONT>
</TD></TR>
<TR><TD WIDTH=101><FONT FACE="Courier New">byte</FONT></TD><TD WIDTH=91><FONT FACE="Courier New">extends</FONT>
</TD><TD WIDTH=120><FONT FACE="Courier New">instanceof</FONT>
</TD><TD WIDTH=139><FONT FACE="Courier New">public</FONT></TD>
<TD WIDTH=110><FONT FACE="Courier New">try</FONT></TD></TR>
<TR><TD WIDTH=101><FONT FACE="Courier New">case</FONT></TD><TD WIDTH=91><FONT FACE="Courier New">final</FONT>
</TD><TD WIDTH=120><FONT FACE="Courier New">int</FONT></TD><TD WIDTH=139><FONT FACE="Courier New">rest</FONT>
</TD><TD WIDTH=110><FONT FACE="Courier New">var</FONT></TD></TR>
<TR><TD WIDTH=101><FONT FACE="Courier New">cast</FONT></TD><TD WIDTH=91><FONT FACE="Courier New">finally</FONT>
</TD><TD WIDTH=120><FONT FACE="Courier New">interface</FONT></TD>
<TD WIDTH=139><FONT FACE="Courier New">return</FONT></TD><TD WIDTH=110><FONT FACE="Courier New">void</FONT>
</TD></TR>
<TR><TD WIDTH=101><FONT FACE="Courier New">catch</FONT></TD><TD WIDTH=91><FONT FACE="Courier New">float</FONT>
</TD><TD WIDTH=120><FONT FACE="Courier New">long</FONT></TD><TD WIDTH=139><FONT FACE="Courier New">short</FONT>
</TD><TD WIDTH=110><FONT FACE="Courier New">volatile</FONT></TD>
</TR>
<TR><TD WIDTH=101><FONT FACE="Courier New">char</FONT></TD><TD WIDTH=91><FONT FACE="Courier New">for</FONT>
</TD><TD WIDTH=120><FONT FACE="Courier New">native</FONT></TD>
<TD WIDTH=139><FONT FACE="Courier New">static</FONT></TD><TD WIDTH=110><FONT FACE="Courier New">while</FONT>
</TD></TR>
<TR><TD WIDTH=101><FONT FACE="Courier New">class</FONT></TD><TD WIDTH=91><FONT FACE="Courier New">future</FONT>
</TD><TD WIDTH=120><FONT FACE="Courier New">new</FONT></TD><TD WIDTH=139><FONT FACE="Courier New">super</FONT>
</TD><TD WIDTH=110><FONT FACE="Courier New">&nbsp;</FONT></TD>
</TR>
<TR><TD WIDTH=101><FONT FACE="Courier New">const</FONT></TD><TD WIDTH=91><FONT FACE="Courier New">generic</FONT>
</TD><TD WIDTH=120><FONT FACE="Courier New">null</FONT></TD><TD WIDTH=139><FONT FACE="Courier New">switch</FONT>
</TD><TD WIDTH=110><FONT FACE="Courier New">&nbsp;</FONT></TD>
</TR>
<TR><TD WIDTH=101><FONT FACE="Courier New">continue</FONT></TD><TD WIDTH=91><FONT FACE="Courier New">goto</FONT>
</TD><TD WIDTH=120><FONT FACE="Courier New">operator</FONT></TD>
<TD WIDTH=139><FONT FACE="Courier New">synchronized</FONT></TD>
<TD WIDTH=110><FONT FACE="Courier New">&nbsp;</FONT></TD></TR>
<TR><TD WIDTH=101><FONT FACE="Courier New">default</FONT></TD><TD WIDTH=91><FONT FACE="Courier New">if</FONT>
</TD><TD WIDTH=120><FONT FACE="Courier New">outer</FONT></TD>
<TD WIDTH=139><FONT FACE="Courier New">this</FONT></TD><TD WIDTH=110><FONT SIZE=2>&nbsp;</FONT>
</TD></TR>
</TABLE>
</CENTER>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD WIDTH=469><B>Note</B></TD></TR>
<TR><TD WIDTH=469>
<BLOCKQUOTE>
Some of the reserved words have not yet been implemented.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H2><A NAME="PrimitiveDataTypesandLiteralValues"><B><FONT SIZE=5 COLOR=#FF0000>Primitive
Data Types and Literal Values</FONT></B></A></H2>
<P>
Java defines eight primitive types. Variables that are declared
as a <I>primitive type</I> are not objects; they are only placeholders
to store primitive values. The eight primitive types are <TT>byte</TT>,
<TT>short</TT>, <TT>int</TT>, <TT>long</TT>, <TT>float</TT>, <TT>double</TT>,
<TT>char</TT>, and <TT>boolean</TT>.
<P>
The <TT>byte</TT>, <TT>short</TT>, <TT>int</TT>, and <TT>long</TT>
types represent 8-, 16-, 32-, and 64-bit integer values. The literal
values of these types are written using positive or negative decimal,
hexadecimal, or octal integers. Hexadecimal values are preceded
by <TT>0x</TT> or <TT>0X</TT> and use the letters a through f
(upper- or lowercase) to represent the digits 10 through 15. Octal
numbers are preceded by <TT>0</TT>. Long decimal values have an
<TT>l</TT> or <TT>L</TT> appended to the end of the number.
<P>
The <TT>float</TT> and <TT>double</TT> types represent 32- and
64-bit IEEE 754 floating-point numbers. <TT>float</TT> numbers
have the <TT>f</TT> or <TT>F</TT> suffix. Double numbers have
<TT>d</TT> or <TT>D</TT>. If no suffix is provided, the default
<TT>double</TT> type is assumed. Floating-point numbers may be
written in any of the following four forms:
<BLOCKQUOTE>
<TT><I><FONT FACE="Courier New">digits . optionalDigits optionalExponentPart
suffix<BR>
<BR>
. digits optionalExponentPart suffix<BR>
<BR>
digits exponentPart suffix<BR>
<BR>
</FONT></I>NaN</TT>
</BLOCKQUOTE>
<P>
<TT><I><FONT FACE="Courier New">suffix</FONT></I></TT> is optional.
It consists of <TT>f</TT>, <TT>F</TT>, <TT>d</TT>, or <TT>D</TT>,
as described previously.
<P>
<TT><I><FONT FACE="Courier New">exponentPart</FONT></I></TT> is
optional in the first two forms and required in the third form.
It consists of an <TT>e</TT> or <TT>E</TT> followed by a signed
integer. It is used to identify the exponent of 10 of the number
written in scientific notation. For example, 1000000.0 could be
represented as 1.0E6.
<P>
The special value <TT>NaN</TT> is used to represent the value
&quot;not a number&quot; that occurs as the result of undefined
mathematical operations such as division by zero.
<P>
The <TT>char</TT> type represents 16-bit Unicode characters. <I>Unicode</I>
is a 16-bit superset of the ASCII character set that provides
many foreign-language characters. A single character is specified
by putting the character within single quotes (<TT>'</TT>). There
are three exceptions: single quote (<TT>'</TT>), double quote
(<TT>&quot;</TT>), and backslash (<TT>\</TT>). The backslash character
(<TT>\</TT>) is used as an escape code to represent special character
values. The character escape codes are shown in Table 11.1.
<P>
<CENTER>
<B>Table 11.1. Character escape codes.</B>

<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=60%>
<TR><TD><CENTER><I><FONT SIZE=2>Escape Code</FONT></I></CENTER>
</TD><TD><I><FONT SIZE=2>Character</FONT></I>
</TD></TR>
<TR><TD><CENTER><TT>\b</TT></CENTER></TD><TD WIDTH=144><FONT SIZE=2>backspace</FONT>
</TD></TR>
<TR><TD><CENTER><TT>\t</TT></CENTER></TD><TD WIDTH=144><FONT SIZE=2>tab</FONT>
</TD></TR>
<TR><TD><CENTER><TT>\n</TT></CENTER></TD><TD WIDTH=144><FONT SIZE=2>linefeed</FONT>
</TD></TR>
<TR><TD><CENTER><TT>\f</TT></CENTER></TD><TD WIDTH=144><FONT SIZE=2>form feed</FONT>
</TD></TR>
<TR><TD><CENTER><TT>\r</TT></CENTER></TD><TD WIDTH=144><FONT SIZE=2>carriage return</FONT>
</TD></TR>
<TR><TD><CENTER><TT>\&quot;</TT></CENTER></TD><TD WIDTH=144><FONT SIZE=2>double quote</FONT>
</TD></TR>
<TR><TD><CENTER><TT>\'</TT></CENTER></TD><TD WIDTH=144><FONT SIZE=2>single quote</FONT>
</TD></TR>
<TR><TD><CENTER><TT>\\</TT></CENTER></TD><TD WIDTH=144><FONT SIZE=2>backslash</FONT>
</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
The backslash can also be followed by an 8-bit octal value or
by a <TT>u</TT> or <TT>U</TT> followed by a four-digit hexadecimal
value. The four-digit value is used to specify the value of Unicode
characters.
<P>
The <TT>boolean</TT> type represents the logical values <TT>true</TT>
and <TT>false</TT>.
<P>
String literals are also provided by Java even though strings
are not primitive values. Strings consist of characters enclosed
by double quotes (<TT>&quot;</TT>). The character escape codes
may be used within strings.
<P>
The literal value <TT>null</TT> is used to identify the fact that
an object is not assigned to a value. It may be used with any
variable that is not of a primitive data type.
<H2><A NAME="ClassDeclarations"><B><FONT SIZE=5 COLOR=#FF0000>Class
Declarations</FONT></B></A></H2>
<P>
<I>Class declarations</I> allow new classes to be defined for
use in Java programs. Classes are declared as follows:
<BLOCKQUOTE>
<TT><I><FONT FACE="Courier New">classModifiers </FONT></I>class
<I><FONT FACE="Courier New">className</FONT></I> <I><FONT FACE="Courier New">extendsClause
implementsClause classBody</FONT></I></TT>
</BLOCKQUOTE>
<P>
The class modifiers, <TT>extends</TT> clause, and <TT>implements</TT>
clause are optional.
<P>
The class modifiers are <TT>abstract</TT>, <TT>public</TT>, and
<TT>final</TT>. An <TT>abstract</TT> class provides an abstract
class declaration that cannot be instantiated. <TT>Abstract</TT>
classes are used as building blocks for the declaration of subclasses.
A class that is declared as <TT>public</TT> can be referenced
outside its package. If a class is not declared as <TT>public</TT>,
it can be referenced only within its package. A <TT>final</TT>
class cannot be subclassed. A class cannot be declared as both
<TT>final</TT> and <TT>abstract</TT>.
<P>
The <TT>extends</TT> clause is used to identify the immediate
superclass of a class and thereby position the class within the
overall class hierarchy. It is written as follows:
<BLOCKQUOTE>
<TT>extends <I><FONT FACE="Courier New">immediateSuperclass</FONT></I></TT>
</BLOCKQUOTE>
<P>
The <TT>implements</TT> clause identifies the interfaces that
are implemented by a class. It is written as follows:
<BLOCKQUOTE>
<TT>implements <I><FONT FACE="Courier New">interfaceNames</FONT></I></TT>
</BLOCKQUOTE>
<P>
<TT><I><FONT FACE="Courier New">interfaceNames</FONT></I></TT>
consists of one or more interface names separated by commas.
<P>
The class body declares the variables, constructors, and access
methods of a class. It is written as follows:
<BLOCKQUOTE>
<TT>{ <I><FONT FACE="Courier New">fieldDeclarations</FONT></I>
}</TT>
</BLOCKQUOTE>
<P>
<TT><I><FONT FACE="Courier New">fieldDeclarations</FONT></I></TT>
consists of zero or more variable, constructor, or access method
declarations or static initializers.
<H2><A NAME="VariableDeclarations"><B><FONT SIZE=5 COLOR=#FF0000>Variable
Declarations</FONT></B></A></H2>
<P>
<I>Variables</I> are used to refer to objects and primitive data
types. They are declared as follows:
<BLOCKQUOTE>
<TT><I><FONT FACE="Courier New">variableModifiers </FONT></I>type<I><FONT FACE="Courier New">
extendedVariableName variableInitialization ;</FONT></I></TT>
</BLOCKQUOTE>
<P>
<TT><I><FONT FACE="Courier New">variableModifiers</FONT></I></TT>
and <TT><I><FONT FACE="Courier New">variableInitialization</FONT></I></TT>
are optional. A variable's type may be a primitive data type,
class type, or interface type. The <TT><I><FONT FACE="Courier New">extendedVariableName</FONT></I></TT>
is a variable name followed by zero or more bracket sets (<TT>[]</TT>)
indicating that the variable is an array.
<P>
<TT><I><FONT FACE="Courier New">variableInitialization</FONT></I></TT>
consists of an equals sign (<TT>=</TT>) followed by a variable
initialization.
<P>
A <I>variable initialization</I> is an expression yielding a value
of the variable's type. If the variable being declared is an array,
it can be assigned to an array initializer. Array initializers
are written as follows:
<BLOCKQUOTE>
<TT>{<I><FONT FACE="Courier New">elementInitializers</FONT></I>}</TT>
</BLOCKQUOTE>
<P>
<TT><I><FONT FACE="Courier New">elementInitializers</FONT></I></TT>
are expressions that yield values that are consistent with the
element type of the array.
<P>
There are seven variable modifiers: <TT>public</TT>, <TT>protected</TT>,
<TT>private</TT>, <TT>static</TT>, <TT>final</TT>, <TT>transient</TT>,
and <TT>volatile</TT>.
<P>
The <TT>public</TT>, <TT>protected</TT>, and <TT>private</TT>
modifiers are used to designate the specific manner in which a
variable can be accessed. Variables that are declared as <TT>public</TT>
can be accessed anywhere that the class in which they are defined
can be accessed. Variables that are declared as <TT>protected</TT>
can be accessed within the package in which they are declared
and in subclasses of the class in which they are defined. Variables
that are declared as <TT>private</TT> are only accessible in the
class in which they are defined and not in any of its subclasses.
If a variable is declared as neither <TT>public</TT>, <TT>protected</TT>,
nor <TT>private</TT>, it can be accessed only within the package
in which it is declared.
<P>
A variable that is declared as <TT>static</TT> is associated with
its class and is shared by objects that are instances of its class.
A <TT>static</TT> variable is also known as a <I>class variable</I>.
<P>
A variable that is declared as <TT>final</TT> is a constant and
cannot be modified. <TT>Final</TT> variables must be initialized
when they are declared.
<P>
A variable that is declared as <TT>transient</TT> refers to objects
and primitive values within the Java virtual machine. <TT>Transient</TT>
variables have not been implemented within Java 1.0.
<P>
A variable that is declared as <TT>volatile</TT> refers to objects
and primitive values that can be modified asynchronously. They
are treated in a special manner by the compiler to control the
manner in which they can be updated.
<H2><A NAME="ConstructorDeclarations"><B><FONT SIZE=5 COLOR=#FF0000>Constructor
Declarations</FONT></B></A></H2>
<P>
<I>Constructors</I> are methods that are used to initialize newly
created objects of a class. They are declared as follows:
<BLOCKQUOTE>
<TT><I><FONT FACE="Courier New">constructorModifiers constructorNameAndParameters
throwsClause constructorBody</FONT></I></TT>
</BLOCKQUOTE>
<P>
The constructor modifiers are <TT>public</TT>, <TT>protected</TT>,
and <TT>private</TT>. They control access to the constructor and
are used in the same manner as they are for variables.
<P>
The constructor name is the same as the class name in which it
is declared. It is followed by a parameter list, written as follows:
<BLOCKQUOTE>
<TT>(<I><FONT FACE="Courier New">parameterDeclarations</FONT></I>)</TT>
</BLOCKQUOTE>
<P>
The parameter list consists of an opening parenthesis followed
by zero or more parameter declarations followed by a closing parenthesis.
The parameter declarations are separated by commas. Parameter
declarations are written as follows:
<BLOCKQUOTE>
<TT>type <I><FONT FACE="Courier New">parameterName</FONT></I></TT>
</BLOCKQUOTE>
<P>
Each parameter declaration consists of a type followed by a parameter
name. A parameter name may be followed by sets of matched brackets
(<TT>[]</TT>) to indicate that it is an array.
<P>
The <TT>throws</TT> clause identifies all uncaught exceptions
that are thrown within the constructor. It is written as follows:
<BLOCKQUOTE>
<TT>throws <I><FONT FACE="Courier New">uncaughtExceptions</FONT></I></TT>
</BLOCKQUOTE>
<P>
The exceptions are separated by whitespace characters.
<P>
The body of a constructor specifies the manner in which an object
of the constructor's class is to be initialized. It is written
as follows:
<BLOCKQUOTE>
<TT>{<I><FONT FACE="Courier New">constructorCallStatement blockBody</FONT></I>}</TT>
</BLOCKQUOTE>
<P>
The <TT><I><FONT FACE="Courier New">constructorCallStatement</FONT></I></TT>
and <TT><I><FONT FACE="Courier New">blockBody</FONT></I></TT>
are optional, but the opening and closing braces must be supplied.
<P>
The constructor call statement allows another constructor of the
class or its superclass to be invoked before the constructor's
block body. It is written as follows:
<BLOCKQUOTE>
<TT>this(argumentList);<BR>
<BR>
<FONT FACE="Courier New">super(argumentList);</FONT></TT>
</BLOCKQUOTE>
<P>
The first form results in a constructor for the current class
being invoked with the specified arguments. The second form results
in the constructor of the class's superclass being invoked. The
argument list consists of expressions that evaluate to the allowed
values of a particular constructor.
<P>
If no constructor call statement is specified, a default <TT>super()</TT>
constructor is invoked before the constructor block body.
<H2><A NAME="AccessMethodDeclarations"><B><FONT SIZE=5 COLOR=#FF0000>Access
Method Declarations</FONT></B></A></H2>
<P>
<I>Access methods</I> are methods used to perform operations on
the data contained in an object or on <TT>static</TT> class variables.
They are written as follows:
<BLOCKQUOTE>
<TT><I><FONT FACE="Courier New">methodModifiers returnType methodNameAndParameters
throwsClause methodBody</FONT></I></TT>
</BLOCKQUOTE>
<P>
<TT><I><FONT FACE="Courier New">methodNameAndParameters</FONT></I></TT>
is the same as for constructor declarations. Access method names
are different from their class names.
<P>
The <TT>throws</TT> clause is also the same as for constructor
declarations.
<P>
The method body differs from the constructor body in that it does
not allow a constructor call statement.
<P>
The modifiers allowed for a method include the <TT>public</TT>,
<TT>protected</TT>, and <TT>private</TT> modifiers defined for
constructors as well as the <TT>final</TT>, <TT>static</TT>, <TT>abstract</TT>,
<TT>native</TT>, and <TT>synchronized</TT> modifiers.
<P>
The <TT>final</TT> modifier identifies a method that cannot be
overridden.
<P>
The <TT>static</TT> modifier identifies a class method. Class
methods are allowed to access <TT>static</TT> class variables
only. <TT>Static</TT> methods are <TT>final</TT>.
<P>
An <TT>abstract</TT> method is used to identify a method that
cannot be invoked and must be overridden by any non-abstract subclasses
of the class in which it is declared. An <TT>abstract</TT> method
does not have a method body. Instead, it has a semicolon (<TT>;</TT>).
<P>
A <TT>native</TT> method is a method written in a language other
than Java. It is like an <TT>abstract</TT> method in that its
body is replaced by a semicolon.
<P>
A <TT>synchronized</TT> method is a method that must acquire a
lock on an object or on a class before it can be executed.
<H2><A NAME="StaticInitializers"><B><FONT SIZE=5 COLOR=#FF0000>Static
Initializers</FONT></B></A></H2>
<P>
A <I>static initializer</I> is a block of code that is used to
initialize the <TT>static</TT> variables of a class. It is written
as follows:
<BLOCKQUOTE>
<TT>static <I><FONT FACE="Courier New">block</FONT></I></TT>
</BLOCKQUOTE>
<P>
Static initializers can only access <TT>static</TT> class variables.
They are executed in the order in which they appear in a class
declaration.
<H2><A NAME="Interfaces"><B><FONT SIZE=5 COLOR=#FF0000>Interfaces</FONT></B></A>
</H2>
<P>
An <I>interface</I> specifies a collection of abstract methods
that must be overridden by classes that implement the interface.
Interfaces are declared as follows:
<BLOCKQUOTE>
<TT><I><FONT FACE="Courier New">interfaceModifiers </FONT></I>interface
<I><FONT FACE="Courier New">interfaceName extendsClause interfaceBody</FONT></I></TT>
</BLOCKQUOTE>
<P>
The interface modifiers are <TT>public</TT> and <TT>abstract</TT>.
<TT>public</TT> interfaces can be accessed in other packages.
All interfaces are <TT>abstract</TT>. The <TT>abstract</TT> modifier
is superfluous.
<P>
The optional <TT>extends</TT> clause is used to identify any interfaces
that are extended by an interface. It is written as follows:
<BLOCKQUOTE>
<TT>extends <I><FONT FACE="Courier New">interfaceNames</FONT></I></TT>
</BLOCKQUOTE>
<P>
The interface names are separated by commas. An interface includes
all the methods of all interfaces that it extends.
<P>
The interface body consists of zero or more variable and abstract
method declarations. They are enclosed within braces (<TT>{</TT>
and <TT>}</TT>).
<P>
Variables declared within an interface must be <TT>static</TT>
and <TT>final</TT>. The <TT>static</TT> and <TT>final</TT> modifiers
need not be displayed. Variables declared in a <TT>public</TT>
interface are <TT>public</TT>. The <TT>public</TT> keyword need
not be specified.
<P>
Methods declared within an interface are <TT>abstract</TT>. The
<TT>abstract</TT> keyword need not be specified.
<H2><A NAME="BlocksandBlockBodies"><B><FONT SIZE=5 COLOR=#FF0000>Blocks
and Block Bodies</FONT></B></A></H2>
<P>
<I>Blocks</I> consist of sequences of local variable declarations
and statements. They are written as follows:
<BLOCKQUOTE>
<TT>{ <I><FONT FACE="Courier New">blockBody</FONT></I> }</TT>
</BLOCKQUOTE>
<P>
The <TT><I><FONT FACE="Courier New">blockBody</FONT></I></TT>
is a sequence of local variable declarations or statements.
<P>
A block can also consist of a single statement without the enclosing
braces.
<H2><A NAME="LocalVariableDeclarations"><B><FONT SIZE=5 COLOR=#FF0000>Local
Variable Declarations</FONT></B></A></H2>
<P>
Local variables are declared in the same manner as field declarations
are, except that local variables do not include modifiers. They
are accessible within the block in which they are declared. The
<TT>this</TT> and <TT>super</TT> variables are predefined. They
refer to the current object for which a method is invoked and
the superclass of the current object being invoked.
<H2><A NAME="Statements"><B><FONT SIZE=5 COLOR=#FF0000>Statements</FONT></B></A>
</H2>
<P>
The programming statements provided by Java are described in the
following subsections.
<H3><A NAME="EmptyStatement"><B>Empty Statement</B></A></H3>
<P>
The <I>empty statement</I> performs no processing. It consists
of a single semicolon (<TT>;</TT>).
<H3><A NAME="BlockStatement"><B>Block Statement</B></A></H3>
<P>
A <I>block statement</I> consists of a sequence of statements
and local variable declarations that are treated as a single statement
block. The statements are enclosed within braces (<TT>{</TT> and
<TT>}</TT>).
<H3><A NAME="MethodInvocation"><B>Method Invocation</B></A></H3>
<P>
A <I>method invocation</I> invokes a method for an object or a
class. Method invocations may be used within an expression or
as a separate statement. To be used as a separate statement, the
method being invoked must be declared with a void return value.
Method invocation statements take the following forms:
<BLOCKQUOTE>
<TT>objectName.methodName(argumentList);<BR>
<BR>
<FONT FACE="Courier New">className.methodName(argumentList);</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>argumentList</TT> consists of a comma-separated list of
zero or more expressions that are consistent with the method's
parameters.
<H3><A NAME="AllocationStatements"><B>Allocation Statements</B></A>
</H3>
<P>
When an object is <I>allocated</I>, it is typically assigned to
a variable. However, it is not required to be assigned when it
is allocated. An allocation statement is of the following form:
<BLOCKQUOTE>
<TT>new <I><FONT FACE="Courier New">constructor</FONT></I>(<I><FONT FACE="Courier New">argumentList</FONT></I>);</TT>
</BLOCKQUOTE>
<P>
The <TT>new</TT> operator is used to allocate an object of the
class specified by the constructor. The constructor is then invoked
to initialize the object using the arguments specified in the
argument list.
<H3><A NAME="AssignmentStatements"><B>Assignment Statements</B></A>
</H3>
<P>
The <I>assignment statement</I> assigns an object or value to
a variable. Its general form is
<BLOCKQUOTE>
<TT><I><FONT FACE="Courier New">variableName = expression;</FONT></I></TT>
</BLOCKQUOTE>
<P>
where <TT><I><FONT FACE="Courier New">expression</FONT></I></TT>
yields a value that is consistent with the variable's type.
<P>
Other assignment operators may be used in addition to the <TT>=</TT>
operator. Refer to the section titled &quot;Operators&quot; later
in this chapter.
<H3><A NAME="TheifStatement"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">if</FONT></B></TT><B><FONT SIZE=4>
Statement</FONT></B></A></H3>
<P>
The <TT>if</TT> statement is used to select among alternative
paths of execution. It is written in the following two forms:
<BLOCKQUOTE>
<TT>if ( booleanExpression ) statement<BR>
<BR>
<FONT FACE="Courier New">if ( booleanExpression ) statement1 else
statement2</FONT></TT>
</BLOCKQUOTE>
<P>
In the first form, <TT>statement</TT> is executed only if the
<TT>boolean</TT> expression is <TT>true</TT>. In the second form,
<TT>statement1</TT> is executed if the <TT>boolean</TT> expression
is <TT>true</TT>, and <TT>statement2</TT> is executed if the <TT>boolean</TT>
expression is <TT>false</TT>.
<H3><A NAME="StatementLabels"><B>Statement Labels</B></A></H3>
<P>
A statement can be <I>labeled</I> by prefixing an identifier to
the statement as follows:
<BLOCKQUOTE>
<TT><I><FONT FACE="Courier New">label: statement</FONT></I></TT>
</BLOCKQUOTE>
<P>
The <TT><I><FONT FACE="Courier New">label</FONT></I></TT> can
be a name or an integer.
<H3><A NAME="TheswitchStatement"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">switch</FONT></B></TT><B><FONT SIZE=4>
Statement</FONT></B></A></H3>
<P>
The <TT>switch</TT> statement is similar to the <TT>if</TT> statement
in that it enables a selection from alternative paths of execution.
It is written as follows:
<BLOCKQUOTE>
<TT>switch (<I><FONT FACE="Courier New">expression</FONT></I>)<I><FONT FACE="Courier New">
caseBlock</FONT></I></TT>
</BLOCKQUOTE>
<P>
<TT><I><FONT FACE="Courier New">expression</FONT></I></TT> must
evaluate to a <TT>byte</TT>, <TT>char</TT>, <TT>short</TT>, or
<TT>int</TT> value. Control is transferred to the next statement
in the block that is labeled with a value that matches the expression.
<P>
The <TT><I><FONT FACE="Courier New">caseBlock</FONT></I></TT>
contains a sequence of case-labeled statements. These statements
are written as follows:
<BLOCKQUOTE>
<TT>case <I><FONT FACE="Courier New">value</FONT></I>: <I><FONT FACE="Courier New">statement</FONT></I></TT>
</BLOCKQUOTE>
<P>
An optional default-value statement may also appear in the case
block. It is written as follows:
<BLOCKQUOTE>
<TT>default:<I><FONT FACE="Courier New"> statement</FONT></I></TT>
</BLOCKQUOTE>
<P>
If no value matches the expression and a default-valued statement
is provided, control is transferred to this statement. If there
is no default-value statement, the next statement following the
<TT>switch</TT> statement is executed.
<H3><A NAME="ThebreakStatement"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">break</FONT></B></TT><B><FONT SIZE=4>
Statement</FONT></B></A></H3>
<P>
The <TT>break</TT> statement is used to transfer control to a
labeled statement or out-of-statement block. It takes the following
forms:
<BLOCKQUOTE>
<TT>break;<BR>
<BR>
<FONT FACE="Courier New">break <I>label</I>;</FONT></TT>
</BLOCKQUOTE>
<P>
The first form transfers control to the first statement following
the current statement block. The second form transfers control
to the statement with the identified label.
<H3><A NAME="TheforStatement"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">for</FONT></B></TT><B><FONT SIZE=4>
Statement</FONT></B></A></H3>
<P>
The <TT>for</TT> statement is used to iteratively execute a statement.
It takes the following form:
<BLOCKQUOTE>
<TT>for (initializationStatement booleanExpression ; incrementStatement)
<BR>
<FONT FACE="Courier New">&nbsp;&nbsp;&nbsp;iteratedStatement</FONT></TT>
</BLOCKQUOTE>
<P>
The initialization statement is executed at the beginning of the
<TT>for</TT> statement, and then the <TT>boolean</TT> expression
is tested. If the expression is <TT>true</TT>, the iterated statement
is executed. The increment statement is executed after the iterated
statement, and then the <TT>boolean</TT> expression is retested.
The iterated statement-increment statement loop continues until
the <TT>boolean</TT> expression evaluates to <TT>false</TT>.
<H3><A NAME="ThewhileStatement"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">while</FONT></B></TT><B><FONT SIZE=4>
Statement</FONT></B></A></H3>
<P>
The <TT>while</TT> statement is used to execute a statement while
a <TT>boolean</TT> expression is <TT>true</TT>. It is written
as follows:
<BLOCKQUOTE>
<TT>while (<I><FONT FACE="Courier New">booleanExpression</FONT></I>)<I><FONT FACE="Courier New">
iteratedStatement;</FONT></I></TT>
</BLOCKQUOTE>
<P>
The <TT>boolean</TT> expression is evaluated; if it is <TT>true</TT>
the iterated statement is executed. It continues to execute until
the <TT>boolean</TT> expression is <TT>false</TT>.
<H3><A NAME="ThedoStatement"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">do</FONT></B></TT><B><FONT SIZE=4>
Statement</FONT></B></A></H3>
<P>
The <TT>do</TT> statement, like the <TT>while</TT> statement,
is used to execute a statement until a <TT>boolean</TT> expression
becomes <TT>false</TT>. The only difference is that the expression
is tested after the statement is executed. The <TT>do</TT> statement
is written as follows:
<BLOCKQUOTE>
<TT>do <I><FONT FACE="Courier New">iteratedStatement while </FONT></I>(<I><FONT FACE="Courier New">booleanExpression</FONT></I>);</TT>
</BLOCKQUOTE>
<H3><A NAME="ThecontinueStatement"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">continue</FONT></B></TT><B><FONT SIZE=4>
Statement</FONT></B></A></H3>
<P>
The <TT>continue</TT> statement is used to continue execution
of a loop (<TT>for</TT>, <TT>do</TT>, or <TT>while</TT>) without
completing execution of the iterated statement. The <TT>continue</TT>
statement may take an optional label. It is written as follows:
<BLOCKQUOTE>
<TT>continue <I><FONT FACE="Courier New">label</FONT></I>;</TT>
</BLOCKQUOTE>
<P>
If a label is supplied, the loop continues at the labeled loop.
<H3><A NAME="ThesynchronizedStatement"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">synchronized</FONT></B></TT><B><FONT SIZE=4>
Statement</FONT></B></A></H3>
<P>
The <TT>synchronized</TT> statement is used to execute a statement
after acquiring a lock on an object. It is written as follows:
<BLOCKQUOTE>
<TT>synchronized (<I><FONT FACE="Courier New"> expression </FONT></I>)
<I><FONT FACE="Courier New">statement</FONT></I></TT>
</BLOCKQUOTE>
<P>
The expression yields the object for which the lock must be acquired.
<H3><A NAME="ThetryStatement"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">try</FONT></B></TT><B><FONT SIZE=4>
Statement</FONT></B></A></H3>
<P>
The <TT>try</TT> statement executes a block of statements while
setting up exception handlers. If an exception occurs the appropriate
handler, if any, is executed to handle the exception. A <TT>finally</TT>
clause may also be specified to perform absolutely required processing.
<P>
The <TT>try</TT> statement is written as follows:
<BLOCKQUOTE>
<TT>try <I><FONT FACE="Courier New">block catchClauses finallyClause</FONT></I></TT>
</BLOCKQUOTE>
<P>
At least one <TT>catch</TT> clause or a <TT>finally</TT> clause
must be provided.
<P>
The format of the <TT>catch</TT> clause is as follows:
<BLOCKQUOTE>
<TT>catch (<I><FONT FACE="Courier New">exceptionDeclaration</FONT></I>)
<I><FONT FACE="Courier New">block</FONT></I></TT>
</BLOCKQUOTE>
<P>
If an exception is thrown within the block executed by the <TT>try</TT>
statement and it can be assigned to the type of exception declared
in the <TT>catch</TT> clause, the block of the <TT>catch</TT>
clause is executed.
<P>
The <TT>finally</TT> clause, if it is provided, is always executed
regardless of whether an exception is generated.
<H3><A NAME="ThereturnStatement"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">return</FONT></B></TT><B><FONT SIZE=4>
Statement</FONT></B></A></H3>
<P>
The <TT>return</TT> statement is used to return an object or a
value as the result of a method's invocation. It is written as
follows:
<BLOCKQUOTE>
<TT>return <I><FONT FACE="Courier New">expression</FONT></I>;</TT>
</BLOCKQUOTE>
<P>
The value of the expression must match the return value identified
in the method's<BR>
declaration.
<H2><A NAME="Operators"><B><FONT SIZE=5 COLOR=#FF0000>Operators</FONT></B></A>
</H2>
<P>
Java defines arithmetic, relational, logical, bit-manipulation,
caste, class, selection, and assignment operators. Table 11.2
summarizes these operators.
<P>
<CENTER>
<B>Table 11.2. Java operators.<BR>
</B>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><I><FONT SIZE=2>Operator Type</FONT></I></TD>
<TD WIDTH=102><I><FONT SIZE=2><CENTER>Operator</CENTER></FONT></I></TD><TD WIDTH=195><I><FONT SIZE=2>Description</FONT></I>
</TD><TD WIDTH=160><I><FONT SIZE=2><CENTER>Example</CENTER></FONT></I></TD></TR>
<TR><TD WIDTH=133><FONT SIZE=2>Arithmetic</FONT></TD><TD WIDTH=102>
<BLOCKQUOTE>
<TT>+<BR>
<FONT FACE="Courier New">-<BR>
*<BR>
/<BR>
%</FONT></TT>
</BLOCKQUOTE>
</TD><TD WIDTH=195><FONT SIZE=2>Addition<BR>
Subtraction<BR>
Multiplication<BR>
Division<BR>
Modulus</FONT>
</TD><TD WIDTH=160>
<BLOCKQUOTE>
<TT>a + b<BR>
<FONT FACE="Courier New">a - b<BR>
a * b<BR>
a / b<BR>
a % b</FONT></TT>
</BLOCKQUOTE>

</TD></TR>
<TR><TD WIDTH=133><FONT SIZE=2>Relational</FONT></TD><TD WIDTH=102>
<BLOCKQUOTE>
<TT>&gt;<BR>
<FONT FACE="Courier New">&lt;<BR>
&gt;=<BR>
&lt;=<BR>
!=<BR>
==</FONT></TT>
</BLOCKQUOTE>

</TD><TD WIDTH=195><FONT SIZE=2>Greater than<BR>
Less than<BR>
Greater than or equal<BR>
Less than or equal<BR>
Not equal<BR>
Equal</FONT>
</TD><TD WIDTH=160>
<BLOCKQUOTE>
<TT>a &gt; b<BR>
<FONT FACE="Courier New">a &lt; b<BR>
a &gt;= b<BR>
a &lt;= b<BR>
a != b<BR>
a == b</FONT></TT>
</BLOCKQUOTE>

</TD></TR>
<TR><TD WIDTH=133><FONT SIZE=2>Logical</FONT></TD><TD WIDTH=102>
<BLOCKQUOTE>
<TT>!<BR>
<FONT FACE="Courier New">&amp;&amp;<BR>
||</FONT></TT>
</BLOCKQUOTE>

</TD><TD WIDTH=195><FONT SIZE=2>Not<BR>
AND<BR>
OR</FONT></TD>
<TD WIDTH=160>
<BLOCKQUOTE>
<TT>!a<BR>
<FONT FACE="Courier New">a &amp;&amp; b<BR>
a || b</FONT></TT>
</BLOCKQUOTE>

</TD></TR>
<TR><TD WIDTH=133><FONT SIZE=2>Bit-manipulation</FONT></TD><TD WIDTH=102>
<BLOCKQUOTE>
<TT>~<BR>
<FONT FACE="Courier New">&amp;<BR>
|<BR>
^<BR>
&lt;&lt;<BR>
&gt;&gt;<BR>
&gt;&gt;&gt;</FONT></TT>
</BLOCKQUOTE>

</TD><TD WIDTH=195><FONT SIZE=2>Complement<BR>
AND<BR>
OR<BR>
Exclusive OR<BR>
Left shift<BR>
Right shift<BR>
Zero-filled right shift</FONT>
</TD><TD WIDTH=160>
<BLOCKQUOTE>
<TT>~a<BR>
<FONT FACE="Courier New">a &amp; b<BR>
a | b<BR>
a ^ b<BR>
a &lt;&lt; b<BR>
a &gt;&gt; B<BR>
a &gt;&gt;&gt; b</FONT></TT>
</BLOCKQUOTE>

</TD></TR>
<TR><TD WIDTH=133><FONT SIZE=2>Assignment </FONT></TD><TD WIDTH=102>
<BLOCKQUOTE>
<TT>=<BR>
<FONT FACE="Courier New">++<BR>
--<BR>
+=<BR>
-=<BR>
*=<BR>
/=<BR>
%=<BR>
|=<BR>
&amp;=<BR>
^=<BR>
&lt;&lt;=<BR>
&gt;&gt;=<BR>
&gt;&gt;&gt;=</FONT></TT>
</BLOCKQUOTE>

</TD><TD WIDTH=195><FONT SIZE=2>Assignment<BR>
Increment and assign<BR>
Decrement and assign<BR>
Add and assign<BR>
Subtract and assign<BR>
Multiply and assign<BR>
Divide and assign<BR>
Take modulus and assign<BR>
OR and assign<BR>
AND and assign<BR>
XOR and assign<BR>
Left shift and assign<BR>
Right shift and assign<BR>
Zero-filled left shift and assign</FONT>
</TD><TD WIDTH=160>
<BLOCKQUOTE>
<TT>a = b<BR>
<FONT FACE="Courier New">a++<BR>
a--<BR>
a += b<BR>
a -= b<BR>
a *= b<BR>
a /= b<BR>
a %= b<BR>
a |= b<BR>
a &amp;= b<BR>
a ^= b<BR>
a &lt;&lt;= b<BR>
a &gt;&gt;= b<BR>
a &gt;&gt;&gt;= b</FONT></TT>
</BLOCKQUOTE>

</TD></TR>
<TR><TD WIDTH=133><FONT SIZE=2>Caste</FONT></TD><TD WIDTH=102><TT>(type)</TT>
</TD><TD WIDTH=195><FONT SIZE=2>Convert to type</FONT></TD><TD WIDTH=160><TT>(char) b</TT>
</TD></TR>
<TR><TD WIDTH=133><FONT SIZE=2>Instance</FONT></TD><TD WIDTH=102><TT>instanceof</TT>
</TD><TD WIDTH=195><FONT SIZE=2>Is instance of class?</FONT></TD>
<TD WIDTH=160><TT>a instanceof b</TT></TD></TR>
<TR><TD WIDTH=133><FONT SIZE=2>Allocation</FONT></TD><TD WIDTH=102><TT>new</TT>
</TD><TD WIDTH=195><FONT SIZE=2>Create a new object of a class</FONT>
</TD><TD WIDTH=160><TT>new A()</TT></TD></TR>
<TR><TD WIDTH=133><FONT SIZE=2>Selection</FONT></TD><TD WIDTH=102><TT>? :</TT>
</TD><TD WIDTH=195><FONT SIZE=2>If...Then selection</FONT></TD>
<TD WIDTH=160><TT>a ? b : c</TT></TD></TR>
</TABLE>
</CENTER>
<P>
<H2><A NAME="Summary"><B><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></B></A>
</H2>
<P>
This chapter provides a summary of the Java language. It reviews
the language-specific material covered in <A HREF="ch4.htm" >Chapters 4</A>
through <A HREF="ch10.htm" >10</A>. Part III, &quot;Using the
Java API,&quot; introduces the Java API.
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



