<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META>
<H1><FONT COLOR=#FF0000>Chapter 27</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Server Programs</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#TypesofServers" >Types of Servers</A>
<LI><A HREF="#ServerResponsibilities" >Server Responsibilities</A>
<LI><A HREF="#AnSMTPServer" >An SMTP Server</A>
<UL>
<LI><A HREF="#TheSMTPServerAppProgram" >The SMTPServerApp Program</A>
</UL>
<LI><A HREF="#AWebServer" >A Web Server</A>
<UL>
<LI><A HREF="#TheWebServerAppProgram" >The WebServerApp Program</A>
</UL>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
<FONT COLOR=#000000>In this chapter you'll learn how to write
</FONT>server programs to support Internet client/server applications.
You'll also learn about the server programs found on the Internet
and how they are written. You'll develop simple server programs
that support the sending of mail and the retrieval of Web pages.
This chapter builds on the material presented in <A HREF="ch17.htm" >Chapters 17</A>,
&quot;Network Programming with the <TT><FONT FACE="Courier">java.net</FONT></TT>
Package,&quot; and <A HREF="ch26.htm" >26</A>, &quot;Client
Programs.&quot; You might want to review these chapters before
continuing with the material presented in this chapter.
<H2><A NAME="TypesofServers"><FONT SIZE=5 COLOR=#FF0000>Types
of Servers</FONT></A></H2>
<P>
<A HREF="ch26.htm" >Chapter 26</A> introduced you to the types
of client programs found on the Internet. For every client, there
must be a server. Typical servers include e-mail, Web, FTP, telnet,
netnews, and DNS. Other, less-popular servers such as echo, ping,
and finger are also commonly supported.
<P>
<I>E-mail servers</I> move mail from client programs through the
Internet to their destination hosts and store it until it is retrieved.
The <I>Simple Message Transfer Protocol</I> (SMTP) is used to
move mail. The <I>Post Office Protocol</I> (POP) is used to store
mail and serve it to destination client programs.
<P>
<I>Web servers</I> implement the <I>Hypertext Transfer Protocol</I>
(HTTP) in order to serve Web pages over the Internet. The most
popular Web servers are the NCSA and CERN HTTPD servers, which
are publicly available and may be freely downloaded. Commercial
Web servers, such as those provided by Netscape and Microsoft,
are only a small percentage of those that are in current operation.
<P>
<I>FTP servers</I> implement the File Transfer Protocol to make
files available over the Internet. The most popular FTP server
is a publicly available server developed by Washington University
in St. Louis, Missouri.
<P>
The <I>domain name system</I> provides the backbone for Internet
communication by translating domain names to their IP addresses.
The most popular DNS software is the publicly available BIND software
developed by the University of California at Berkeley.
<P>
<I>Telnet servers</I> are found in UNIX, VMS, and other multiuser
operating systems. These servers allow remote login and implement
the telnet protocol covered in <A HREF="ch26.htm" >Chapter 26</A>.
<H2><A NAME="ServerResponsibilities"><FONT SIZE=5 COLOR=#FF0000>Server
Responsibilities</FONT></A></H2>
<P>
A server program listens for incoming connections on the well-known
port associated with its service protocol. When an incoming connection
is initiated by a client, the server accepts the connection, and
typically spawns a separate thread to service that client. The
client sends service requests over the connection. The server
performs the service and then returns the results to the client.
<H2><A NAME="AnSMTPServer"><FONT SIZE=5 COLOR=#FF0000>An SMTP
Server</FONT></A></H2>
<P>
<A HREF="ch26.htm" >Chapter 26</A> introduced the SMTP and developed
a client program for generating Internet e-mail and sending it
to an SMTP server. This section shows how the other side of the
client/server connection is implemented. RFC 821 describes the
details of this protocol. Here I will implement only a minimal
subset of the available features of SMTP.
<P>
An <I>SMTP server</I> listens on port 25 for incoming client connections.
When a connection request is received, the server accepts the
connection and sends a server-ready notification to the client.
When the client sends the <TT><FONT FACE="Courier">HELO</FONT></TT>
command, the server responds by sending a 250 code, which indicates
that it is okay to initiate a mail transmission. The server then
waits for the client to send the <TT><FONT FACE="Courier">MAIL</FONT></TT>
command. It acknowledges the <TT><FONT FACE="Courier">MAIL</FONT></TT>
command with another 250 code.
<P>
Having processed the <TT><FONT FACE="Courier">MAIL</FONT></TT>
command, the server then waits for the <TT><FONT FACE="Courier">RCPT</FONT></TT>
command. The server processes the <TT><FONT FACE="Courier">RCPT</FONT></TT>
command by checking to see if the destination e-mail address is
valid for the server. It responds by indicating that the address
is valid (using the 250 code) or that the user is not known to
the server (using the 550 code).
<P>
When the client sends the <TT><FONT FACE="Courier">DATA</FONT></TT>
command, the server sends the 354 code to tell the client to start
sending the contents of the mail message. The client then sends
the message data one line at a time. The server checks each line
to see if it consists of a single period (<TT><FONT FACE="Courier">.</FONT></TT>),
indicating the end of the message data. When this happens, it
sends another 250 code to the client, indicating that it has found
the end of the message.
<P>
The server removes the first period occurring in any message text
line that it receives from the client.
<P>
After the server receives the end of the message text, it waits
for the <TT><FONT FACE="Courier">QUIT</FONT></TT> command. When
it receives the <TT><FONT FACE="Courier">QUIT</FONT></TT> command,
it sends a 221 code, indicating that it is closing the transmission
channel. It then closes the socket connection.
<H3><A NAME="TheSMTPServerAppProgram">The <TT><FONT SIZE=4 FACE="Courier">SMTPServerApp</FONT></TT><FONT SIZE=4>
Program</FONT></A></H3>
<P>
The <TT><FONT FACE="Courier">SMTPServerApp</FONT></TT> program
illustrates the basic operation of an SMTP server program. It
implements the basic SMTP commands described in the previous section.
Its source code is shown in Listing 27.1.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 27.1. The source code for the </B><TT><B><FONT FACE="Courier">SMTPServerApp</FONT></B></TT><B>
program.</B><P>
<TT><FONT FACE="Courier">import java.net.*;<BR>
import java.io.*;<BR>
import jdg.ch26.NVTInputStream;<BR>
import jdg.ch26.NVTOutputStream;<BR>
<BR>
public class SMTPServerApp {<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;SMTPServer server = new SMTPServer();<BR>
&nbsp;&nbsp;server.run();<BR>
&nbsp;}<BR>
}<BR>
class SMTPServer {<BR>
&nbsp;static final int HELO = 1;<BR>
&nbsp;static final int MAIL = 2;<BR>
&nbsp;static final int RCPT = 3;<BR>
&nbsp;static final int DATA = 4;<BR>
&nbsp;static final int END_DATA = 5;<BR>
&nbsp;static final int QUIT = 6;<BR>
&nbsp;static final int FINISHED = 9;<BR>
&nbsp;NVTOutputStream out;<BR>
&nbsp;NVTInputStream in;<BR>
&nbsp;String hostName;<BR>
&nbsp;public SMTPServer() {<BR>
&nbsp;&nbsp;super();<BR>
&nbsp;}<BR>
&nbsp;public void run() {<BR>
&nbsp;&nbsp;try{<BR>
&nbsp;&nbsp;&nbsp;ServerSocket server = new ServerSocket(25);
<BR>
&nbsp;&nbsp;&nbsp;int localPort = server.getLocalPort();<BR>
&nbsp;&nbsp;&nbsp;hostName = InetAddress.getLocalHost().getHostName();
<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot;SMTPServerApp is listening
on port &quot;+localPort+&quot;.&quot;);<BR>
&nbsp;&nbsp;&nbsp;boolean finished = false;<BR>
&nbsp;&nbsp;&nbsp;do {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Socket client = server.accept();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String destName = client.getInetAddress().getHostName();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int destPort = client.getPort();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Accepted connection
to &quot;+destName+&quot; on port &quot;+<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;destPort+&quot;.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;out = new NVTOutputStream(client.getOutputStream());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;in = new NVTInputStream(client.getInputStream(),out);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;getMail();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;client.close();<BR>
&nbsp;&nbsp;&nbsp;} while(!finished);<BR>
&nbsp;&nbsp;}catch (UnknownHostException ex) {<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot;UnknownHostException
occurred.&quot;);<BR>
&nbsp;&nbsp;}catch (IOException ex){<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot;IOException occurred.&quot;);
<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;void getMail() {<BR>
&nbsp;&nbsp;out.println(&quot;220 &quot;+hostName+&quot; Simple
Mail Transport Service Ready&quot;);<BR>
&nbsp;&nbsp;int state = HELO;<BR>
&nbsp;&nbsp;do {<BR>
&nbsp;&nbsp;&nbsp;String line = &quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;line = in.readLine();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(line == null) state = FINISHED;<BR>
&nbsp;&nbsp;&nbsp;}catch(IOException ex) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;IOException occurred.&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.exit(1);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;switch(state){<BR>
&nbsp;&nbsp;&nbsp;case HELO:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(commandIs(&quot;HELO&quot;,line)) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.println(&quot;250 Hello&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(line);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state = MAIL;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.println(&quot;500 ERROR&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(line);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;case MAIL:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(commandIs(&quot;MAIL&quot;,line)) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.println(&quot;250 OK&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(line);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state = RCPT;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.println(&quot;500 ERROR&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(line);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;case RCPT:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(commandIs(&quot;RCPT&quot;,line)) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.println(&quot;250 OK&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(line);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state = DATA;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.println(&quot;500 ERROR&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(line);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;case DATA:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(commandIs(&quot;DATA&quot;,line)) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.println(&quot;354 Start mail
input; end with &lt;CRLF&gt;.&lt;CRLF&gt;&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(line);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state = END_DATA;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.println(&quot;500 ERROR&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(line);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;case END_DATA:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(endOfData(line)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.println(&quot;250 OK&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;End of
Message Received.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state = QUIT;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(stripFirstPeriod(line));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;case QUIT:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(commandIs(&quot;QUIT&quot;,line)) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.println(&quot;221 &quot;+hostName+&quot;
Service closing transmission channel&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(line);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state = FINISHED;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.println(&quot;500 ERROR&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(line);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;} while(state != FINISHED);<BR>
&nbsp;}<BR>
&nbsp;boolean commandIs(String s,String line) {<BR>
&nbsp;&nbsp;int n = s.length();<BR>
&nbsp;&nbsp;if(s.equalsIgnoreCase(line.substring(0,n))) return
true;<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
&nbsp;boolean endOfData(String s) {<BR>
&nbsp;&nbsp;if(s.equals(&quot;.&quot;)) return true;<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
&nbsp;String stripFirstPeriod(String s) {<BR>
&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;if(s.charAt(0) == '.') return s.substring(1);
<BR>
&nbsp;&nbsp;}catch(Exception ex){<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return s;<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
To run <TT><FONT FACE="Courier">SMTPServerApp</FONT></TT>, type
<TT><FONT FACE="Courier">java SMTPServer</FONT></TT> at the DOS
prompt. It will then display the following notice to indicate
that it is up and running:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">C:\java\jdg\ch27&gt;java SMTPServerApp
<BR>
SMTPServerApp is listening on port 25.</FONT></TT>
</BLOCKQUOTE>
<P>
In order to use <TT><FONT FACE="Courier">SMTPServerApp</FONT></TT>,
you have to send e-mail to your machine's Internet address. You
can use any e-mail client program to send e-mail to <TT><FONT FACE="Courier">SMTPServerApp</FONT></TT>,
but I'll use the <TT><FONT FACE="Courier">MailClientApp</FONT></TT>
developed in the previous chapter to allow you to track both sides
of the SMTP connection.
<P>
Open a second console window and run <TT><FONT FACE="Courier">MailClientApp</FONT></TT>
as shown in the following code (substitute your host system name
as the e-mail's destination):<BR>
<BLOCKQUOTE>
<TT>jaworski:~/jdg/ch26$ java MailClientApp<BR>
<FONT FACE="Courier New">From: jamie@jaworski.com<BR>
To: jamie@jaworski-pc.hctg.saic.com<BR>
Subject: Test of SMTPServerApp<BR>
Enter message text.<BR>
Terminate message text with an initial period.<BR>
This is a test of SMTPServerApp.<BR>
.<BR>
End of message read.<BR>
Connected to jaworski-pc.hctg.saic.com at port 25.<BR>
220 Jaworski-PC.hctg.saic.com Simple Mail Transport Service Ready
<BR>
&gt;&gt;&gt;HELO jaworski<BR>
250 Hello<BR>
&gt;&gt;&gt;MAIL FROM:&lt;jamie@jaworski.com&gt;<BR>
250 OK<BR>
&gt;&gt;&gt;RCPT TO:&lt;jamie@jaworski-pc.hctg.saic.com&gt;<BR>
250 OK<BR>
&gt;&gt;&gt;DATA<BR>
354 Start mail input; end with &lt;CRLF&gt;.&lt;CRLF&gt;<BR>
Subject: Test of SMTPServerApp<BR>
<BR>
&gt;&gt;&gt;This is a test of SMTPServerApp.<BR>
&gt;&gt;&gt;.<BR>
250 OK<BR>
&gt;&gt;&gt;QUIT<BR>
221 Jaworski-PC.hctg.saic.com Service closing transmission channel
<BR>
jaworski:~/jdg/ch26$</FONT></TT>
</BLOCKQUOTE>
<P>
In this example, I am sending e-mail from my computer at home
(<TT><FONT FACE="Courier">jaworski.com</FONT></TT>) to the computer
I use at work (<TT><FONT FACE="Courier">jaworski-pc.hctg.saic.com</FONT></TT>).
You can work the example by sending e-mail from your computer
to your computer using separate windows for sender and receiver.
<BR>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=563>
<BLOCKQUOTE>
If you cannot determine your hostname or IP address, you can always use <TT><FONT FACE="Courier">localhost</FONT></TT> as your hostname.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
Now look at the data displayed in the <TT><FONT FACE="Courier">SMTPServerApp</FONT></TT>
window:<BR>
<BLOCKQUOTE>
<TT>C:\java\jdg\ch27&gt;java SMTPServerApp<BR>
<FONT FACE="Courier New">SMTPServerApp is listening on port 25.
<BR>
Accepted connection to jaworski.com on port 1205.<BR>
HELO jaworski<BR>
MAIL FROM:&lt;jamie@jaworski.com&gt;<BR>
RCPT TO:&lt;jamie@jaworski-pc.hctg.saic.com&gt;<BR>
DATA<BR>
Subject: Test of SMTPServerApp<BR>
<BR>
This is a test of SMTPServerApp.<BR>
End of Message Received.<BR>
QUIT<BR>
</FONT></TT>
</BLOCKQUOTE>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=567>
<BLOCKQUOTE>
The <TT><FONT FACE="Courier">SMTPServerApp</FONT></TT> program is designed to loop forever to receive and process new SMTP connections. When you are finished running the program, use Ctrl+C to terminate its operation.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
The data display is not as verbose as that of the mail client,
but it shows all the commands and data received. Compare the display
of <TT><FONT FACE="Courier">SMTPServerApp</FONT></TT> with that
of <TT><FONT FACE="Courier">MailClientApp</FONT></TT> to follow
how both sides of the Simple Message Transport Protocol were implemented.
<P>
The <TT><FONT FACE="Courier">main()</FONT></TT> method of <TT><FONT FACE="Courier">SMTPServerApp</FONT></TT>
creates an object of the <TT><FONT FACE="Courier">SMTPServer</FONT></TT>
class and invokes its <TT><FONT FACE="Courier">run()</FONT></TT>
method.
<P>
The <TT><FONT FACE="Courier">SMTPServer</FONT></TT> class declares
seven constants that are used to maintain the state of the mail
protocol as it interacts with a mail client program. It also declares
the <TT><FONT FACE="Courier">NVTInputStream</FONT></TT> and <TT><FONT FACE="Courier">NVTOutputStream</FONT></TT>
objects that it uses for client communication. The <TT><FONT FACE="Courier">hostName</FONT></TT>
variable is used to store the name of the local host running the
SMTP server.
<P>
The <TT><FONT FACE="Courier">run()</FONT></TT> method creates
a <TT><FONT FACE="Courier">ServerSocket</FONT></TT> object on
port 25. It retrieves the local host name and stores it using
the <TT><FONT FACE="Courier">hostName</FONT></TT> variable. It
then identifies on what port it is listening.
<P>
The <TT><FONT FACE="Courier">do</FONT></TT> statement is used
to service individual mail clients in a sequential manner. It
accepts a client socket connection, gets the parameters of the
connection, and displays them to the console window. The input
and output streams associated with the connection are created
and assigned to the <TT><FONT FACE="Courier">in</FONT></TT> and
<TT><FONT FACE="Courier">out</FONT></TT> variables. The <TT><FONT FACE="Courier">getMail()</FONT></TT>
method is then invoked to receive mail from the client.
<P>
The <TT><FONT FACE="Courier">getMail()</FONT></TT> method implements
a subset of SMTP in order to receive mail from the client. It
does not store the messages it receives, but merely displays the
results of the client interaction on the console window.
<P>
When <TT><FONT FACE="Courier">getMail()</FONT></TT> is invoked,
it sends the <TT><FONT FACE="Courier">220 Simple Mail Transport
Service Ready</FONT></TT> line to the mail client along with its
hostname. It then sets the <TT><FONT FACE="Courier">state</FONT></TT>
variable to the <TT><FONT FACE="Courier">HELO</FONT></TT> constant.
The <TT><FONT FACE="Courier">state</FONT></TT> variable is used
to maintain the state of the communication with the client. The
<TT><FONT FACE="Courier">getMail()</FONT></TT> method uses a <TT><FONT FACE="Courier">do</FONT></TT>
statement to receive and process commands that it receives from
the mail client. It reads a line from the client and verifies
that the line is not <TT><FONT FACE="Courier">null</FONT></TT>.
(A <TT><FONT FACE="Courier">null</FONT></TT> line signals that
the connection with the client has been terminated.) The <TT><FONT FACE="Courier">getMail()</FONT></TT>
method processes the newly read line in different ways depending
on the setting of the <TT><FONT FACE="Courier">state</FONT></TT>
variable.
<P>
If the current state is <TT><FONT FACE="Courier">HELO</FONT></TT>,
it checks to see if the received line contains the <TT><FONT FACE="Courier">HELO</FONT></TT>
command. If it does, a <TT><FONT FACE="Courier">250 OK</FONT></TT>
response is sent to the client and the state is set to <TT><FONT FACE="Courier">MAIL</FONT></TT>.
If it does not, a <TT><FONT FACE="Courier">500 ERROR</FONT></TT>
response is sent to the client and the current state remains unchanged.
<P>
If the current state is <TT><FONT FACE="Courier">MAIL</FONT></TT>,
it checks to see if the received line contains the <TT><FONT FACE="Courier">MAIL</FONT></TT>
command. If it does, a <TT><FONT FACE="Courier">250 OK</FONT></TT>
response is sent to the client and the state is set to <TT><FONT FACE="Courier">RCPT</FONT></TT>.
If it does not, a <TT><FONT FACE="Courier">500 ERROR</FONT></TT>
response is sent to the client and the current state remains unchanged.
<P>
If the current state is <TT><FONT FACE="Courier">RCPT</FONT></TT>,
it checks to see if the received line contains the <TT><FONT FACE="Courier">RCPT</FONT></TT>
command. If it does, a <TT><FONT FACE="Courier">250 OK</FONT></TT>
response is sent to the client and the state is set to <TT><FONT FACE="Courier">DATA</FONT></TT>.
If it does not, a <TT><FONT FACE="Courier">500 ERROR</FONT></TT>
response is sent to the client and the current state remains unchanged.
<P>
If the current state is <TT><FONT FACE="Courier">DATA</FONT></TT>,
it checks to see if the received line contains the <TT><FONT FACE="Courier">DATA</FONT></TT>
command. If it does, a <TT><FONT FACE="Courier">354 Start mail
input; end with &lt;CRLF&gt;.&lt;CRLF&gt;</FONT></TT> response
is sent to the client and the state is set to <TT><FONT FACE="Courier">END_DATA</FONT></TT>.
If it does not, a <TT><FONT FACE="Courier">500 ERROR</FONT></TT>
response is sent to the client and the current state remains unchanged.
<P>
If the current state is <TT><FONT FACE="Courier">END_DATA</FONT></TT>,
it checks to see if the received line contains the end-of-message
data command, which is a line consisting of a single period (<TT><FONT FACE="Courier">.</FONT></TT>).
If it does, a <TT><FONT FACE="Courier">250 OK</FONT></TT> response
is sent to the client and the state is set to <TT><FONT FACE="Courier">QUIT</FONT></TT>.
If it does not, the first period of the received line (if any)
is stripped before the line is displayed to the console window.
<P>
If the current state is <TT><FONT FACE="Courier">QUIT</FONT></TT>,
it checks to see if the received line contains the <TT><FONT FACE="Courier">QUIT</FONT></TT>
command. If it does, a <TT><FONT FACE="Courier">250 OK</FONT></TT>
response is sent to the client and the state is set to <TT><FONT FACE="Courier">FINISHED</FONT></TT>.
If it does not, a <TT><FONT FACE="Courier">500 ERROR</FONT></TT>
response is sent to the client and the current state remains unchanged.
<P>
When the current state becomes <TT><FONT FACE="Courier">FINISHED</FONT></TT>,
the <TT><FONT FACE="Courier">do</FONT></TT> statement is terminated.
<P>
The <TT><FONT FACE="Courier">commandIs()</FONT></TT> method is
used to determine whether a command received from a mail client
matches a specific command string.
<P>
The <TT><FONT FACE="Courier">endOfData()</FONT></TT> method checks
a received line to see if it consists of a single period indicating
the end of a message transmission.
<P>
The <TT><FONT FACE="Courier">stripFirstPeriod()</FONT></TT> method
is used to strip out the first period of a message text line.
<H2><A NAME="AWebServer"><FONT SIZE=5 COLOR=#FF0000>A Web Server</FONT></A>
</H2>
<P>
Web servers implement HTTP in order to retrieve Web resources
identified by URLs. HTTP is an application-level protocol that
is designed to be quick and efficient. It is based on the request-response
paradigm. Web browsers initiate connections with Web servers and
submit service requests. The servers, upon receiving a request,
locate the specified resource and perform the requested operation.
Typical Web browser requests are to retrieve a designated file
or send data to a CGI program. HTTP supports several request types,
referred to as <I>methods</I>. These include the <TT><FONT FACE="Courier">GET</FONT></TT>,
<TT><FONT FACE="Courier">HEAD</FONT></TT>, and <TT><FONT FACE="Courier">POST</FONT></TT>
methods. The Web server developed in the following section supports
only the <TT><FONT FACE="Courier">GET</FONT></TT> request.
<P>
The server responds to <TT><FONT FACE="Courier">GET</FONT></TT>
requests by returning the requested resource to the browser. The
server's response begins with a header and is followed by the
requested data. The <I>header</I> consists of a status line and
one or more general header lines. The status line identifies the
version of HTTP being used and a status code. General header lines
include a MIME version identifier, a date/time line, a content
type indicator, and a content length identifier. A blank line
is inserted between the header and the body of the resource data.
<H3><A NAME="TheWebServerAppProgram">The <TT><FONT SIZE=4 FACE="Courier">WebServerApp</FONT></TT><FONT SIZE=4>
Program</FONT></A></H3>
<P>
The <TT><FONT FACE="Courier">WebServerApp</FONT></TT> program
illustrates the basic operation of a Web server. (See Listing
27.2.) It is a single-threaded Web server that supports a subset
of the HTTP 1.0 protocol. Many Web servers are multithreaded,
allowing them to simultaneously support multiple browser connections.
Web servers for low-end PC platforms, such as the Apache Web server,
are single threaded to make up for processing deficiencies of
slow PCs and slower Internet connections. <TT><FONT FACE="Courier">WebServerApp</FONT></TT>
can easily be converted to a multithreaded server by implementing
the interior of the <TT><FONT FACE="Courier">do</FONT></TT> statement
as a separate thread.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 27.2. The source code for the </B><TT><B><FONT FACE="Courier">WebServerApp</FONT></B></TT><B>
program.</B><P>
<TT><FONT FACE="Courier">import java.net.*;<BR>
import java.io.*;<BR>
import jdg.ch26.NVTInputStream;<BR>
import jdg.ch26.NVTOutputStream;<BR>
<BR>
public class WebServerApp {<BR>
&nbsp;public static void main(String args[]){<BR>
&nbsp;&nbsp;WebServer server = new WebServer();<BR>
&nbsp;&nbsp;server.run();<BR>
&nbsp;}<BR>
}<BR>
class WebServer {<BR>
&nbsp;public WebServer() {<BR>
&nbsp;&nbsp;super();<BR>
&nbsp;}<BR>
&nbsp;public void run() {<BR>
&nbsp;&nbsp;try{<BR>
&nbsp;&nbsp;&nbsp;ServerSocket server = new ServerSocket(8080);
<BR>
&nbsp;&nbsp;&nbsp;int localPort = server.getLocalPort();<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot;WebServerApp is listening
on port &quot;+localPort+&quot;.&quot;);<BR>
&nbsp;&nbsp;&nbsp;do {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Socket client = server.accept();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String destName = client.getInetAddress().getHostName();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int destPort = client.getPort();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Accepted connection
to &quot;+destName+<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot; on port &quot;+destPort+&quot;.&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;NVTOutputStream outStream = <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new NVTOutputStream(client.getOutputStream());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;NVTInputStream inStream = <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new NVTInputStream(client.getInputStream(),outStream);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;boolean finished = false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String inLine = inStream.readLine();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Received: &quot;+inLine);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if(getRequest(inLine)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String fileName = getFileName(inLine);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File file = new File(fileName);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(file.exists()) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(fileName+&quot;
requested.&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outStream.println(&quot;HTTP/1.0
200 OK&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outStream.println(&quot;MIME-Version:
1.0&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outStream.println(&quot;Content-Type:
text/html&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int len = (int) file.length();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outStream.println(&quot;Content-Length:
&quot;+len);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outStream.println(&quot;&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sendFile(outStream,file);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outStream.flush();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outStream.println(&quot;HTTP/1.0
404 Not Found&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String notFound = <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&lt;TITLE&gt;Not
Found&lt;/TITLE&gt;&lt;H1&gt;Error 404 - File Not Found&lt;/H1&gt;&quot;;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outStream.println(&quot;Content-Type:
text/html&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outStream.println(&quot;Content-Length:
&quot;+notFound.length()+2);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outStream.println(&quot;&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outStream.println(notFound);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;client.close();<BR>
&nbsp;&nbsp;&nbsp;} while(true);<BR>
&nbsp;&nbsp;}catch (IOException ex){<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot;IOException occurred.&quot;);
<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;boolean getRequest(String s) {<BR>
&nbsp;&nbsp;if(s.length() &gt; 0) {<BR>
&nbsp;&nbsp;&nbsp;if(s.substring(0,3).equalsIgnoreCase(&quot;GET&quot;))
return true;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;return false;<BR>
&nbsp;}<BR>
&nbsp;String getFileName(String s) {<BR>
&nbsp;&nbsp;String f = s.substring(s.indexOf(' ')+1);<BR>
&nbsp;&nbsp;f = f.substring(0,f.indexOf(' '));<BR>
&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;if(f.charAt(0) == '/') f =  f.substring(1);
<BR>
&nbsp;&nbsp;} catch(StringIndexOutOfBoundsException ex) {<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;if(f.equals(&quot;&quot;)) f = &quot;index.htm&quot;;
<BR>
&nbsp;&nbsp;return f;<BR>
&nbsp;}<BR>
&nbsp;void sendFile(NVTOutputStream out,File file) {<BR>
&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;DataInputStream in = new DataInputStream(new
FileInputStream(file));<BR>
&nbsp;&nbsp;&nbsp;int len = (int) file.length();<BR>
&nbsp;&nbsp;&nbsp;byte buffer[] = new byte[len];<BR>
&nbsp;&nbsp;&nbsp;in.readFully(buffer);<BR>
&nbsp;&nbsp;&nbsp;out.write(buffer,0,len);<BR>
&nbsp;&nbsp;&nbsp;in.close();<BR>
&nbsp;&nbsp;}catch(Exception ex){<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot;Error retrieving file.&quot;);
<BR>
&nbsp;&nbsp;&nbsp;System.exit(1);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The standard socket implementation that comes with the Windows
95 version of Java 1.0 has a flaw that does not close sockets
correctly. When you fetch a Web document from <TT><FONT FACE="Courier">WebServerApp</FONT></TT>,
you might have to click on the Stop button of your Web browser
to have it display the retrieved Web page. When I run <TT><FONT FACE="Courier">WebServerApp</FONT></TT>
on other operating system platforms, such as Linux, using Java
1.0.1, there is no socket closure problem and everything works
as it should.
<P>
Run <TT><FONT FACE="Courier">WebServerApp</FONT></TT> as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">C:\java\jdg\ch27&gt;java WebServerApp
<BR>
WebServerApp is listening on port 8080.</FONT></TT>
</BLOCKQUOTE>
<P>
It responds by indicating that it is listening on port 8080. I
had it use port 8080 instead of the standard port 80 so as not
to interfere with any Web server that you might currently have
running on your system.
<P>
I have supplied a default Web page, <TT><FONT FACE="Courier">index.htm</FONT></TT>,
that is retrieved by <TT><FONT FACE="Courier">WebServerApp</FONT></TT>.
(See Listing 27.3.) You can also retrieve other Web pages by placing
them in the same directory as <TT><FONT FACE="Courier">WebServerApp</FONT></TT>
and referencing them in the URL opened by your Web browser.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 27.3. </B><B><I>The contents of the </B></I><TT><FONT FACE="Courier">index.htm</FONT></TT><I><B>
file.</B></I><P>
<TT><FONT FACE="Courier">&lt;HTML&gt;<BR>
&lt;HEAD&gt;&lt;TITLE&gt;Test Document&lt;/TITLE&gt;&lt;/HEAD&gt;
<BR>
&lt;BODY&gt;<BR>
&lt;H1&gt;This is a test.&lt;/H1&gt;<BR>
&lt;/BODY&gt;<BR>
&lt;/HTML&gt;<BR>
</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=551>
<BLOCKQUOTE>
If the <TT><FONT FACE="Courier">WebServerApp</FONT></TT> program does not find the <TT><FONT FACE="Courier">index.htm</FONT></TT> file, it will return an error message.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
Because <TT><FONT FACE="Courier">WebServerApp</FONT></TT> is a
server, you need to use a client program in order to interact
with it. Launch your favorite Web browser and open the URL of
your machine followed by <TT><FONT FACE="Courier">:8080</FONT></TT>
to have the browser submit its request to port 8080 instead of
port 80. For example, if your host name is <TT><FONT FACE="Courier">my.host.name.com</FONT></TT>,
open the URL <TT>http://my.host.name.com:8080</TT>.
<TT><FONT FACE="Courier">WebServerApp</FONT></TT> responds by
identifying the browser connection and sending the <TT><FONT FACE="Courier">index.htm</FONT></TT>
file. You can access other files by appending their names to the
URL. For example, to access the <TT><FONT FACE="Courier">test.htm</FONT></TT>
file in the directory where you launched <TT><FONT FACE="Courier">WebServerApp</FONT></TT>,
use the URL <TT>http://my. host.name.com:8080/test.htm</TT>.
<P>
The following output is displayed by <TT><FONT FACE="Courier">WebServerApp</FONT></TT>
on the console window:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">C:\java\jdg\ch27&gt;java WebServerApp
<BR>
WebServerApp is listening on port 8080.<BR>
Accepted connection to jaworski-pc.hctg.saic.com on port 2145.
<BR>
Received: GET / HTTP/1.0<BR>
index.htm requested.</FONT></TT>
</BLOCKQUOTE>
<P>
When you access the URL <TT>http://my.host.name.com:8080</TT>,
<TT><FONT FACE="Courier">WebServerApp</FONT></TT> is instructed
to return the default no name HTML file. It responds by sending
<TT><FONT FACE="Courier">index.htm</FONT></TT> to the Web browser.
Your browser's display should contain the message shown in <A HREF="f27-1.gif" >Figure 27.1</A>.
<P>
<A HREF="f27-1.gif"><B>Figure 27.1 : </B><I>Web browser display.</I></A>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=543>
<BLOCKQUOTE>
If you cannot find your hostname, you can use <TT>localhost</FONT></TT> instead. For example, the URL <TT>http://localhost:8080</TT> can be used instead of <TT>http://my.host.name.com:8080</TT>.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
Experiment by creating your own HTML files and using your browser
to access them using <TT><FONT FACE="Courier">WebServerApp</FONT></TT>.
Use Ctrl+C to terminate the operation of <TT><FONT FACE="Courier">WebServerApp</FONT></TT>.
<P>
The <TT><FONT FACE="Courier">main()</FONT></TT> method of <TT><FONT FACE="Courier">WebServerApp</FONT></TT>
creates a <TT><FONT FACE="Courier">WebServer</FONT></TT> object
and invokes its <TT><FONT FACE="Courier">run()</FONT></TT> method.
<P>
The <TT><FONT FACE="Courier">WebServer</FONT></TT> class implements
a single default constructor and three access methods.
<P>
The <TT><FONT FACE="Courier">run()</FONT></TT> method supports
Web client retrieval requests and is the heart of the <TT><FONT FACE="Courier">WebServerApp</FONT></TT>
processing. It creates a <TT><FONT FACE="Courier">ServerSocket</FONT></TT>
object using port 8080 and then displays its operational status
on the console window.
<P>
A <TT><FONT FACE="Courier">do</FONT></TT> statement is used to
accept and process incoming client connections. It retrieves the
parameters associated with a connection and displays them to the
console window. The input and output streams associated with the
connection are created and assigned to the <TT><FONT FACE="Courier">inStream</FONT></TT>
and <TT><FONT FACE="Courier">outStream</FONT></TT> variables.
A line is then read from the input stream and displayed to the
console window.
<P>
The line received from the browser client is checked to see if
it is a <TT><FONT FACE="Courier">GET</FONT></TT> request. If it
is, the name of the requested HTML file is retrieved from the
browser request line. If the file exists within the current directory,
a <TT><FONT FACE="Courier">200 OK</FONT></TT> status line is sent
to the browser, followed by a <TT><FONT FACE="Courier">MIME-version
1.0</FONT></TT> header line. This line tells the browser that
the server is cognizant of MIME version 1.0 when returning the
requested file. It then specifies the MIME type of the requested
file as <TT><FONT FACE="Courier">text</FONT></TT> or <TT><FONT FACE="Courier">html</FONT></TT>.
Real Web servers would send a MIME type that matched the extension
of the file returned. <A HREF="ch28.htm" >See Chapter 28</A>,
&quot;Content Handlers,&quot; for a discussion of MIME types and
their use by Web servers and browsers.
<P>
The length of the file to be returned is obtained using the <TT><FONT FACE="Courier">length()</FONT></TT>
method of the <TT><FONT FACE="Courier">File</FONT></TT> class,
and a notification of the file's length is returned to the browser
using a <TT><FONT FACE="Courier">Content-Length</FONT></TT> header
line. A blank line follows the <TT><FONT FACE="Courier">Content-Length</FONT></TT>
header line to signal the end of the HTTP header. The <TT><FONT FACE="Courier">sendFile()</FONT></TT>
method is then invoked to send the requested file to the browser.
<P>
If the file requested by the browser does not exist, the HTTP
status line sent to the browser contains a <TT><FONT FACE="Courier">404
Not Found</FONT></TT> error code and a short HTML file indicating
that the error is sent to the browser.
<P>
If the request received from the browser client is not a <TT><FONT FACE="Courier">GET</FONT></TT>
request, it is ignored and the connection is closed.
<P>
The <TT><FONT FACE="Courier">getRequest()</FONT></TT> method determines
whether an incoming client request uses the <TT><FONT FACE="Courier">GET</FONT></TT>
method.
<P>
The <TT><FONT FACE="Courier">getFileName()</FONT></TT> method
extracts the requested HTML filename from an incoming browser
request line.
<P>
The <TT><FONT FACE="Courier">sendFile()</FONT></TT> method sends
the file requested by a Web client using the output stream of
the server-client connection. It sends the file by reading all
bytes of the file into a byte array and then sending the entire
array over the connection. This approach works well with small
files, but may break with large files, depending on available
memory resources.
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
In this chapter you have learned how to write programs that implement
the server end of Internet client/server applications. You have
learned about the common server programs found on the Internet
and how they are structured. You have developed an SMTP server
and a primitive Web server. In <A HREF="ch28.htm" >Chapter 28</A>
you'll learn how to write content handlers that are used with
Web client applications.
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



