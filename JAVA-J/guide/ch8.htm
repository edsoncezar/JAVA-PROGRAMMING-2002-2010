<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META>
<H1><FONT COLOR=#FF0000>Chapter 8</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Multithreading</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#UnderstandingMultithreading" >Understanding Multithreading</A>
<LI><A HREF="#HowJavaSupportsMultithreading" >How Java Supports Multithreading</A>
<UL>
<LI><A HREF="#CreatingSubclassesofThread" >Creating Subclasses of Thread</A>
<LI><A HREF="#ImplementingRunnable" >Implementing Runnable</A>
</UL>
<LI><A HREF="#ThreadStates" >Thread States</A>
<LI><A HREF="#ThreadPriorityandScheduling" >Thread Priority and Scheduling</A>
<LI><A HREF="#Synchronization" >Synchronization</A>
<LI><A HREF="#DaemonThreads" >Daemon Threads</A>
<LI><A HREF="#ThreadGroups" >Thread Groups</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
<FONT COLOR=#000000>This chapter introduces you to multithreaded
programs and how multithreading is supported in Java. You'll learn
how to create, run, and synchronize multiple threads in your programs.
You'll also learn about thread scheduling and how a thread's priority
determines when it is scheduled. When you finish this chapter
you will be able to develop multithreaded programs using Java.</FONT>
<H2><A NAME="UnderstandingMultithreading"><B><FONT SIZE=5 COLOR=#FF0000>Understanding
Multithreading</FONT></B></A></H2>
<P>
All the sample programs you developed in the preceding chapters
have had only a single thread of execution. Each program proceeded
sequentially, one instruction after another, until it completed
its processing and terminated.
<P>
<I>Multithreaded</I> programs are similar to the single-threaded
programs that you have been studying. They differ only in the
fact that they support more than one <I>concurrent</I> thread
of execution-that is, they are able to simultaneously execute
multiple sequences of instructions. Each instruction sequence
has its own unique flow of control that is independent of all
others. These independently executed instruction sequences are
known as <I>threads</I>.
<P>
If your computer has only a single CPU, you might be wondering
how it can execute more than one thread at the same time. In single-processor
systems, only a single thread of execution occurs at a given instant.
The CPU quickly switches back and forth between several threads
to create the illusion that the threads are executing at the same
time. Single-processor systems support <I>logical concurrency</I>,
not <I>physical concurrency</I>. Logical concurrency is the characteristic
exhibited when multiple threads execute with separate, independent
flows of control. On multiprocessor systems, several threads do,
in fact, execute at the same time, and physical concurrency is
achieved. The important feature of multithreaded programs is that
they support logical concurrency, not whether physical concurrency
is actually achieved.
<P>
Many programming languages support <I>multiprogramming</I>. Multiprogramming
is the logically concurrent execution of multiple programs. For
example, a program can request that the operating system execute
programs A, B, and C by having it spawn a separate process for
each program. These programs can run in parallel, depending upon
the multiprogramming features supported by the underlying operating
system. Multithreading differs from multiprogramming in that multithreading
provides concurrency within the context of a single process and
multiprogramming provides concurrency between processes. Threads
are not complete processes in and of themselves. They are a separate
flow of control that occurs within a process. <A HREF="f8-1.gif" >Figure 8.1</A>
illustrates the difference between multithreading and multiprogramming.
<P>
<A HREF="f8-1.gif"><B>Figure 8.1 : </B><I>Multithreading versus multiprogramming.</I></A>
<P>
An executing program is generally associated with a single process.
The advantage of multithreading is that concurrency can be used
within a process to provide multiple simultaneous services to
the user. Multithreading also requires less processing overhead
than multiprogramming because concurrent threads are able to share
common resources more easily. Multiple executing programs tend
to duplicate resources and share data as the result of more time-consuming
interprocess communication.
<H2><A NAME="HowJavaSupportsMultithreading"><B><FONT SIZE=5 COLOR=#FF0000>How
Java Supports Multithreading</FONT></B></A></H2>
<P>
Java provides extensive support for both multithreading and multiprogramming.
Multithreading is covered in this chapter. Java's support for
multiprogramming is covered in <A HREF="ch12.htm" >Chapter 12</A>,
&quot;Portable Software and the <TT>java.lang</TT> Package.&quot;
<P>
Java's multithreading support is centered around the <TT>java.lang.Thread</TT>
class. The <TT>Thread</TT> class provides the capability to create
objects of class <TT>Thread</TT>, each with its own separate flow
of control. The <TT>Thread</TT> class encapsulates the data and
methods associated with separate threads of execution and allows
multithreading to be integrated within the object-oriented framework.
<P>
Java provides two approaches to creating threads. In the first
approach, you create a subclass of class <TT>Thread</TT> and override
the <TT>run()</TT> method to provide an entry point into the thread's
execution. When you create an instance of your <TT>Thread</TT>
subclass, you invoke its <TT>start()</TT> method to cause the
thread to execute as an independent sequence of instructions.
The <TT>start()</TT> method is inherited from the <TT>Thread</TT>
class. It initializes the <TT>Thread</TT> object using your operating
system's multithreading capabilities and invokes the <TT>run()</TT>
method. You learn how to create threads using this approach in
the next section.<BR>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=550>
<P>
<BLOCKQUOTE>
This chapter makes heavy use of the Java API methods defined for class <TT>Thread</TT> and related classes. If you haven't obtained and installed a copy of the Java API documentation, now is a good time to do so.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The approach to creating threads identified in the previous paragraph
is very simple and straightforward. However, it has the drawback
of requiring your <TT>Thread</TT> objects to be under the <TT>Thread</TT>
class in the class hierarchy. In some cases, as you'll see when
you study applets in Part VI, &quot;Programming the Web with Applets
and Scripts,&quot; this requirement can be somewhat limiting.
<P>
Java's other approach to creating threads does not limit the location
of your <TT>Thread</TT> objects within the class hierarchy. In
this approach, your class implements the <TT>java.lang.Runnable</TT>
interface. The <TT>Runnable</TT> interface consists of a single
method, the <TT>run()</TT> method, which must be overridden by
your class. The <TT>run()</TT> method provides an entry point
into your thread's execution. In order to run an object of your
class as an independent thread, you pass it as an argument to
a constructor of class <TT>Thread</TT>. You learn how to create
threads using this approach later in this chapter in the section
titled &quot;Implementing <TT>Runnable</TT>.&quot;
<H3><A NAME="CreatingSubclassesofThread"><B>Creating Subclasses
of </B><TT><B><FONT SIZE=4 FACE="Courier New">Thread</FONT></B></TT></A>
</H3>
<P>
In this section, you create your first multithreaded program by
creating a subclass of <TT>Thread</TT> and then creating, initializing,
and starting two <TT>Thread</TT> objects from your class. The
threads will execute concurrently and display <TT>Java is hot,
aromatic, and invigorating.</TT> to the console window.
<P>
Create a <TT>ch08</TT> directory under <TT>c:\java\jdg</TT> and
enter the source code from Listing 8.1 into <TT>ThreadTest1.java</TT>.
Then compile it using the command <TT>javac ThreadTest1.java</TT>.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 8.1. The source code of the </B><TT><B><FONT FACE="Courier New">ThreadTest1</FONT></B></TT><B>
program.</B><P>
<TT>import java.lang.Thread;<BR>
<FONT FACE="Courier New">import java.lang.System;<BR>
import java.lang.Math;<BR>
import java.lang.InterruptedException;<BR>
<BR>
class ThreadTest1 {<BR>
&nbsp;public static void main(String args[]) {<BR>
&nbsp;&nbsp;MyThread thread1 = new MyThread(&quot;thread1: &quot;);
<BR>
&nbsp;&nbsp;MyThread thread2 = new MyThread(&quot;thread2: &quot;);
<BR>
&nbsp;&nbsp;thread1.start();<BR>
&nbsp;&nbsp;thread2.start();<BR>
&nbsp;&nbsp;boolean thread1IsAlive = true;<BR>
&nbsp;&nbsp;boolean thread2IsAlive = true;<BR>
&nbsp;&nbsp;do {<BR>
&nbsp;&nbsp;&nbsp;if(thread1IsAlive &amp;&amp; !thread1.isAlive()){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;thread1IsAlive = false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Thread 1 is dead.&quot;);
<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;if(thread2IsAlive &amp;&amp; !thread2.isAlive()){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;thread2IsAlive = false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Thread 2 is dead.&quot;);
<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}while(thread1IsAlive || thread2IsAlive);<BR>
&nbsp;}<BR>
}<BR>
class MyThread extends Thread {<BR>
&nbsp;static String message[] = {&quot;Java&quot;,&quot;is&quot;,&quot;hot,&quot;,&quot;aromatic,&quot;,&quot;and&quot;,
<BR>
&nbsp;&nbsp;&quot;invigorating.&quot;};<BR>
&nbsp;public MyThread(String id) {<BR>
&nbsp;&nbsp;super(id);<BR>
&nbsp;}<BR>
&nbsp;public void run() {<BR>
&nbsp;&nbsp;String name = getName();<BR>
&nbsp;&nbsp;for(int i=0;i&lt;message.length;++i) {<BR>
&nbsp;&nbsp;&nbsp;randomWait();<BR>
&nbsp;&nbsp;&nbsp;System.out.println(name+message[i]);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;void randomWait(){<BR>
&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;sleep((long)(3000*Math.random()));<BR>
&nbsp;&nbsp;}catch (InterruptedException x){<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot;Interrupted!&quot;);
<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
This program creates two threads of execution, <TT>thread1</TT>
and <TT>thread2</TT>, from the <TT>MyThread</TT> class. It then
starts both threads and executes a <TT>do</TT> statement that
waits for the threads to die. The threads display the <TT>Java
is hot, aromatic, and invigorating.</TT> message word by word,
while waiting a short, random amount of time between each word.
Because both threads share the console window, the program's output
identifies which threads were able to write to the console at
various times during the program's execution.<BR>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 BIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=587>
<BLOCKQUOTE>
The Java documentation refers to threads that have completed their execution as being <I>dead</I>. The term is descriptive, but somewhat morose.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
Run <TT>ThreadTest1</TT> to get an idea of the output that it
produces. Each time you run the program you might get a different
program display. This is because the program uses a random number
generator to determine how long each thread should wait before
displaying its output. Look at the following output:
<BLOCKQUOTE>
<TT>C:\java\jdg\ch08&gt;java ThreadTest1<BR>
<FONT FACE="Courier New">thread1: Java<BR>
thread2: Java<BR>
thread2: is<BR>
thread2: hot,<BR>
thread2: aromatic,<BR>
thread1: is<BR>
thread1: hot,<BR>
thread2: and<BR>
thread1: aromatic,<BR>
thread1: and<BR>
thread2: invigorating.<BR>
Thread 2 is dead.<BR>
thread1: invigorating.<BR>
Thread 1 is dead.</FONT></TT>
</BLOCKQUOTE>
<P>
This output shows that <TT>thread1</TT> executed first and displayed
<TT>Java</TT> to the console window. It then waited to execute
while <TT>thread2</TT> displayed <TT>Java</TT>, <TT>is</TT>, <TT>hot,</TT>,
and <TT>aromatic,</TT>. After that, <TT>thread2</TT> waited while
<TT>thread1</TT> continued its execution. <TT>thread1</TT> displayed
<TT>is</TT> and then <TT>hot,</TT>. At this point, <TT>thread2</TT>
took over again. <TT>thread2</TT> displayed <TT>and</TT> and then
went back into waiting. <TT>thread1</TT> then displayed <TT>aromatic,</TT>
and <TT>and</TT>. <TT>thread2</TT> finished its execution by displaying
<TT>invigorating.</TT>. Having completed its execution, <TT>thread2</TT>
died, leaving <TT>thread1</TT> as the only executing task. <TT>thread1
</TT>displayed <TT>invigorating.</TT> and then completed its execution.
<P>
The <TT>ThreadTest1</TT> class consists of a single <TT>main()</TT>
method. This method begins by creating <TT>thread1</TT> and <TT>thread2</TT>
as new objects of class <TT>MyThread</TT>. It then starts both
threads using the <TT>start()</TT> method. At this point, <TT>main()</TT>
enters a <TT>do</TT> loop that continues until both <TT>thread1</TT>
and <TT>thread2</TT> are no longer alive. The loop monitors the
execution of the two threads and displays a message when it has
detected the death of each thread. It uses the <TT>isAlive()</TT>
method of the <TT>Thread</TT> class to tell when a thread has
died. The <TT>thread1IsAlive</TT> and <TT>thread2IsAlive</TT>
variables are used to ensure that a thread's obituary is only
displayed once.
<P>
The <TT>MyThread</TT> class extends class <TT>Thread</TT>. It
declares a statically initialized array, named <TT>message[]</TT>,
that contains the message to be displayed by each thread. It has
a single constructor that invokes the <TT>Thread</TT> class constructor
via <TT>super()</TT>. It contains two access methods: <TT>run()</TT>
and <TT>randomWait()</TT>. The <TT>run()</TT> method is required.
It uses the <TT>getName()</TT> method of class <TT>Thread</TT>
to get the name of the currently executing thread. It then prints
each word of the output display message while waiting a random
length of time between each print. The <TT>randomWait()</TT> method
invokes the <TT>sleep()</TT> method within a <TT>try</TT> statement.
The <TT>sleep()</TT> method is another method inherited from class
<TT>Thread</TT>. It causes the currently executing task to &quot;go
to sleep&quot; or wait until a randomly specified number of milliseconds
has transpired. Because the <TT>sleep()</TT> method throws the
<TT>InterruptedException</TT> when its sleep is interrupted (how
grouchy!), the exception is caught and handled by the <TT>randomWait()</TT>
method. The exception is handled by displaying the fact that an
interruption has occurred to the console window.
<H3><A NAME="ImplementingRunnable"><B>Implementing </B><TT><B><FONT SIZE=4 FACE="Courier New">Runnable</FONT></B></TT></A>
</H3>
<P>
In the previous section, you created a multithreaded program by
creating the <TT>MyThread</TT> subclass of <TT>Thread</TT>. In
this section, you create a program with similar behavior, but
you create your threads as objects of the class <TT>MyClass</TT>,
which is not a subclass of <TT>Thread</TT>. <TT>MyClass</TT> will
implement the <TT>Runnable</TT> interface and objects of <TT>MyClass</TT>
will be executed as threads by passing them as arguments to the
<TT>Thread</TT> constructor.
<P>
The <TT>ThreadTest2</TT> program's source code is shown in Listing
8.2. Enter it into the <TT>ThreadTest2.java</TT> file and compile
it.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 8.2. The source code of the </B><TT><B><FONT FACE="Courier New">ThreadTest2</FONT></B></TT><B>
program.</B><P>
<TT>import java.lang.Thread;<BR>
<FONT FACE="Courier New">import java.lang.System;<BR>
import java.lang.Math;<BR>
import java.lang.InterruptedException;<BR>
import java.lang.Runnable;<BR>
<BR>
class ThreadTest2 {<BR>
&nbsp;public static void main(String args[]) {<BR>
&nbsp;&nbsp;Thread thread1 = new Thread(new MyClass(&quot;thread1:
&quot;));<BR>
&nbsp;&nbsp;Thread thread2 = new Thread(new MyClass(&quot;thread2:
&quot;));<BR>
&nbsp;&nbsp;thread1.start();<BR>
&nbsp;&nbsp;thread2.start();<BR>
&nbsp;&nbsp;boolean thread1IsAlive = true;<BR>
&nbsp;&nbsp;boolean thread2IsAlive = true;<BR>
&nbsp;&nbsp;do {<BR>
&nbsp;&nbsp;&nbsp;if(thread1IsAlive &amp;&amp; !thread1.isAlive()){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;thread1IsAlive = false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Thread 1 is dead.&quot;);
<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;if(thread2IsAlive &amp;&amp; !thread2.isAlive()){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;thread2IsAlive = false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Thread 2 is dead.&quot;);
<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}while(thread1IsAlive || thread2IsAlive);<BR>
&nbsp;}<BR>
}<BR>
class MyClass implements Runnable {<BR>
&nbsp;static String message[] = {&quot;Java&quot;,&quot;is&quot;,&quot;hot,&quot;,&quot;aromatic,&quot;,&quot;and&quot;,
<BR>
&nbsp;&nbsp;&quot;invigorating.&quot;};<BR>
&nbsp;String name;<BR>
&nbsp;public MyClass(String id) {<BR>
&nbsp;&nbsp;name = id;<BR>
&nbsp;}<BR>
&nbsp;public void run() {<BR>
&nbsp;&nbsp;for(int i=0;i&lt;message.length;++i) {<BR>
&nbsp;&nbsp;&nbsp;randomWait();<BR>
&nbsp;&nbsp;&nbsp;System.out.println(name+message[i]);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;void randomWait(){<BR>
&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;Thread.currentThread().sleep((long)(3000*Math.random()));
<BR>
&nbsp;&nbsp;}catch (InterruptedException x){<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot;Interrupted!&quot;);
<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT>ThreadTest2</TT> program is very similar to <TT>ThreadTest1</TT>.
It differs only in the way that the threads are created. You should
run <TT>ThreadTest2</TT> a few times to examine its output. Here
are the results of a sample run I made on my computer:
<BLOCKQUOTE>
<TT>C:\java\jdg\ch08&gt;java ThreadTest2<BR>
<FONT FACE="Courier New">thread2: Java<BR>
thread1: Java<BR>
thread2: is<BR>
thread2: hot,<BR>
thread1: is<BR>
thread2: aromatic,<BR>
thread1: hot,<BR>
thread1: aromatic,<BR>
thread1: and<BR>
thread2: and<BR>
thread1: invigorating.<BR>
Thread 1 is dead.<BR>
thread2: invigorating.<BR>
Thread 2 is dead.</FONT></TT>
</BLOCKQUOTE>
<P>
These results show <TT>thread2</TT> beginning its output before
<TT>thread1</TT>. It does not mean that <TT>thread2</TT> began
executing before <TT>thread1</TT>. <TT>Thread1</TT> executed first,
but went to sleep before generating any output. <TT>Thread2</TT>
then executed and started its output display before going to sleep.
You can follow these results on your own to analyze how <TT>thread1</TT>
and <TT>thread2</TT> switched back and forth during their execution
to display their results to the console window.
<P>
The <TT>main()</TT> method of <TT>ThreadTest2</TT> differs from
that of <TT>ThreadTest1</TT> in the way that it creates <TT>thread1</TT>
and <TT>thread2</TT>. <TT>ThreadTest1</TT> created the threads
as new instances of the <TT>MyThread</TT> class. <TT>ThreadTest2</TT>
was not able to create the threads directly, because <TT>MyClass</TT>
is not a subclass of <TT>Thread</TT>. Instead, <TT>ThreadTest2</TT>
first created instances of <TT>MyClass</TT> and then passed them
to the <TT>Thread()</TT> constructor, creating instances of class
<TT>Thread</TT>. The <TT>Thread()</TT> constructor used by <TT>ThreadTest2</TT>
takes as its argument any class that implements the <TT>Runnable</TT>
interface. This is an example of the flexibility and multiple-inheritance
features provided by Java interfaces. The rest of the <TT>ThreadTest2</TT>
<TT>main()</TT> method is the same as that of <TT>ThreadTest1</TT>.
<P>
<TT>MyClass</TT> is declared as implementing the <TT>Runnable</TT>
interface. This is a simple interface to implement; it only requires
that you implement the <TT>run()</TT> method. <TT>MyClass</TT>
declares the <TT>name</TT> variable to hold the names of <TT>MyClass</TT>
objects that are created. In the first example, the <TT>MyThread</TT>
class did not need to do this because a thread-naming capability
was provided by <TT>Thread</TT> and inherited by <TT>MyThread</TT>.
<TT>MyClass</TT> contains a simple constructor that initializes
the <TT>name</TT> variable.
<P>
The <TT>run()</TT> methods of <TT>ThreadTest2</TT> and <TT>ThreadTest1</TT>
are nearly identical, differing only with respect to the name
issue. This is also true of the <TT>randomWait()</TT> method.
In <TT>ThreadTest2</TT>, the <TT>randomWait()</TT> method must
use the <TT>currentThread()</TT> method of class <TT>Thread</TT>
to acquire a reference to an instance of the current thread in
order to invoke its <TT>sleep()</TT> method.
<P>
Because these two examples are so similar, you might be wondering
why you would pick one approach to creating a class over another.
The advantage of using the <TT>Runnable</TT> interface is that
your class does not need to extend the <TT>Thread</TT> class.
This will be very helpful feature when you start using multithreading
in applets in Part VI of this book. The only disadvantages to
this approach are ones of convenience. You have to do a little
more work to create your threads and to access their methods.
<H2><A NAME="ThreadStates"><B><FONT SIZE=5 COLOR=#FF0000>Thread
States</FONT></B></A></H2>
<P>
You have now learned how to declare, create, initialize, start,
and run Java threads. The <TT>ThreadTest1</TT> and <TT>ThreadTest2</TT>
programs also introduced you to the concept of a thread's death.
Threads transition through several states from the time they are
created until the time of their death. This section reviews these
states.
<P>
A thread is created by creating a new object of class <TT>Thread</TT>
or of one of its subclasses. When a thread is first created, it
does not exist as an independently executing set of instructions.
Instead, it is a template from which an executing thread will
be created. It first executes as a thread when it is started using
the <TT>start()</TT> method and run via the <TT>run()</TT> method.
Before a thread is started it is said to be in the <I>new thread</I>
state. After a thread is started, it is in the <I>runnable</I>
state. When a class is in the runnable state, it may be executing
or temporarily waiting to share processing resources with other
threads. A runnable thread enters an extended wait state when
one of its methods is invoked that causes it to drop from the
runnable state into a not runnable state. In the <I>not runnable</I>
state, a thread is not just waiting for its share of processing
resources, but is blocked waiting for the occurrence of an event
that will send it back to the runnable state.
<P>
For example, the <TT>sleep()</TT> method was invoked in the <TT>ThreadTest1</TT>
and <TT>ThreadTest2</TT> programs to cause a thread to wait for
a short period of time so that the other thread could execute.
The <TT>sleep()</TT> method causes a thread to enter the not runnable
state until the specified time has expired. A thread may also
enter the not runnable state while it is waiting for I/O to be
completed, or as the result of the invocation of other methods.
<A HREF="ch12.htm" >Chapter 12</A> provides a detailed description
of the methods of the <TT>Thread</TT> class that are inherited
by all threads.<BR>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 BIDTH=80%>
<TR><TD><B>Note</B></TD></TR>
<TR><TD WIDTH=588>
<BLOCKQUOTE>
There is no connection between a thread's runnable state and a class's <TT>Runnable</TT> interface.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
A thread leaves the not runnable state and returns to the runnable
state when the event that it is waiting for has occurred. For
example, a sleeping thread must wait for its specified sleep time
to occur. A thread that is waiting on I/O must wait for the I/O
operation to be completed.
<P>
A thread may transition from the new thread, runnable, or not
runnable state to the <I>dead</I> state when its <TT>stop()</TT>
method is invoked or the thread's execution is completed. When
a thread enters the dead state, it's a goner. It can't be revived
and returned to any other state.
<H2><A NAME="ThreadPriorityandScheduling"><B><FONT SIZE=5 COLOR=#FF0000>Thread
Priority and Scheduling</FONT></B></A></H2>
<P>
From an abstract or a logical perspective, multiple threads execute
as concurrent sequences of instructions. This may be physically
true for multiprocessor systems, under certain conditions. However,
in the general case, multiple threads do not always physically
execute at the same time. Instead, the threads share execution
time with each other based on the availability of the system's
CPU (or CPUs).
<P>
The approach used to determining which threads should execute
at a given time is referred to as <I>scheduling</I>. Scheduling
is performed by the Java runtime system. It schedules threads
based on their <I>priority</I>. The highest-priority thread that
is in the runnable state is the thread that is run at any given
instant. The highest-priority thread continues to run until it
enters the death state, enters the not runnable state, or has
its priority lowered, or when a higher-priority thread becomes
runnable.
<P>
A thread's priority is an integer value between <TT>MIN_PRIORITY</TT>
and <TT>MAX_PRIORITY</TT>. These constants are defined in the
<TT>Thread</TT> class. In Java 1.0, <TT>MIN_PRIORITY</TT> is 1
and <TT>MAX_PRIORITY</TT> is 10. A thread's priority is set when
it is created. It is set to the same priority as the thread that
created it. The default priority of a thread is <TT>NORM_PRIORITY</TT>
and is equal to 5. The priority of a thread can be changed using
the <TT>setPriority()</TT> method.
<P>
Java's approach to scheduling is referred to as <I>preemptive
scheduling</I>. When a thread of higher priority becomes runnable,
it preempts threads of lower priority and is immediately executed
in their place. If two or more higher-priority threads become
runnable, the Java scheduler alternates between them when allocating
execution time.
<H2><A NAME="Synchronization"><B><FONT SIZE=5 COLOR=#FF0000>Synchronization</FONT></B></A>
</H2>
<P>
There are many situations in which multiple threads must share
access to common objects. For example, all of the programs in
this chapter have illustrated the effects of multithreading by
having multiple executing threads write to the Java console, a
common shared object. These examples have not required any coordination
or synchronization in the way the threads access the console window:
Whatever thread was currently executing was able to write to the
console window. No coordination between concurrent threads was
required.
<P>
There are times when you might want to coordinate access to shared
resources. For example, in a database system, you might not want
one thread to be updating a database record while another thread
is trying to read it. Java enables you to coordinate the actions
of multiple threads using <I>synchronized methods</I> and <I>synchronized
statements</I>.
<P>
An object for which access is to be coordinated is accessed through
the use of synchronized methods. (Synchronized statements are
covered in <A HREF="ch11.htm" >Chapter 11</A>, &quot;Language
Summary.&quot;) These methods are declared with the <TT>synchronized</TT>
keyword. Only one synchronized method can be invoked for an object
at a given point in time. This keeps synchronized methods in multiple
threads from conflicting with each other.
<P>
All classes and objects are associated with a unique <I>monitor</I>.
The monitor is used to control the way in which synchronized methods
are allowed to access the class or object. When a synchronized
method is invoked for a given object, it is said to <I>acquire</I>
the monitor for that object. No other synchronized method may
be invoked for that object until the monitor is released. A monitor
is automatically released when the method completes its execution
and returns. A monitor may also be released when a synchronized
method executes certain methods, such as <TT>wait()</TT>. The
thread associated with the currently executing synchronized method
becomes not runnable until the wait condition is satisfied and
no other method has acquired the object's monitor.
<P>
The following example shows how synchronized methods and object
monitors are used to coordinate access to a common object by multiple
threads. This example adapts the <TT>ThreadTest1</TT> program
for use with synchronized methods, as shown in Listing 8.3.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 8.3. The source code of the </B><TT><B><FONT FACE="Courier New">ThreadSynchronization</FONT></B></TT><B>
program.</B><P>
<TT>import java.lang.Thread;<BR>
<FONT FACE="Courier New">import java.lang.System;<BR>
import java.lang.Math;<BR>
import java.lang.InterruptedException;<BR>
<BR>
class ThreadSynchronization {<BR>
&nbsp;public static void main(String args[]) {<BR>
&nbsp;&nbsp;MyThread thread1 = new MyThread(&quot;thread1: &quot;);
<BR>
&nbsp;&nbsp;MyThread thread2 = new MyThread(&quot;thread2: &quot;);
<BR>
&nbsp;&nbsp;thread1.start();<BR>
&nbsp;&nbsp;thread2.start();<BR>
&nbsp;&nbsp;boolean thread1IsAlive = true;<BR>
&nbsp;&nbsp;boolean thread2IsAlive = true;<BR>
&nbsp;&nbsp;do {<BR>
&nbsp;&nbsp;&nbsp;if(thread1IsAlive &amp;&amp; !thread1.isAlive()){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;thread1IsAlive = false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Thread 1 is dead.&quot;);
<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;if(thread2IsAlive &amp;&amp; !thread2.isAlive()){
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;thread2IsAlive = false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Thread 2 is dead.&quot;);
<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;}while(thread1IsAlive || thread2IsAlive);<BR>
&nbsp;}<BR>
}<BR>
class MyThread extends Thread {<BR>
&nbsp;static String message[] = {&quot;Java&quot;,&quot;is&quot;,&quot;hot,&quot;,&quot;aromatic,&quot;,
<BR>
&nbsp;&nbsp;&quot;and&quot;,&quot;invigorating.&quot;};<BR>
&nbsp;public MyThread(String id) {<BR>
&nbsp;&nbsp;super(id);<BR>
&nbsp;}<BR>
&nbsp;public void run() {<BR>
&nbsp;&nbsp;SynchronizedOutput.displayList(getName(),message);
<BR>
&nbsp;}<BR>
&nbsp;void randomWait(){<BR>
&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;sleep((long)(3000*Math.random()));<BR>
&nbsp;&nbsp;}catch (InterruptedException x){<BR>
&nbsp;&nbsp;&nbsp;System.out.println(&quot;Interrupted!&quot;);
<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
}<BR>
class SynchronizedOutput {<BR>
&nbsp;public static synchronized void displayList(String name,String
list[]) {<BR>
&nbsp;&nbsp;for(int i=0;i&lt;list.length;++i) {<BR>
&nbsp;&nbsp;&nbsp;MyThread t = (MyThread) Thread.currentThread();
<BR>
&nbsp;&nbsp;&nbsp;t.randomWait();<BR>
&nbsp;&nbsp;&nbsp;System.out.println(name+list[i]);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Compile and run the program before going on with its analysis.
You might be surprised at the results that you've obtained. Here
are the results of an example run on my system:
<BLOCKQUOTE>
<TT>C:\java\jdg\ch08&gt;java ThreadSynchronization<BR>
<FONT FACE="Courier New">thread1: Java<BR>
thread1: is<BR>
thread1: hot,<BR>
thread1: aromatic,<BR>
thread1: and<BR>
thread1: invigorating.<BR>
Thread 1 is dead.<BR>
thread2: Java<BR>
thread2: is<BR>
thread2: hot,<BR>
thread2: aromatic,<BR>
thread2: and<BR>
thread2: invigorating.<BR>
Thread 2 is dead.</FONT></TT>
</BLOCKQUOTE>
<P>
Now edit <TT>ThreadSynchronization.java</TT> and delete the <TT>synchronized</TT>
keyword in the declaration of the <TT>displayList()</TT> method
of class <TT>SynchronizedOutput</TT>. It should look like this
when you are finished:
<BLOCKQUOTE>
<TT>class SynchronizedOutput {<BR>
<FONT FACE="Courier New">&nbsp;public static void displayList(String
name,String list[]) {</FONT></TT>
</BLOCKQUOTE>
<P>
Save <TT>ThreadSynchronization.java</TT>, recompile it, and rerun
it with the new change in place. You may now get output similar
to this:
<BLOCKQUOTE>
<TT>C:\java\jdg\ch08&gt;java ThreadSynchronization<BR>
<FONT FACE="Courier New">thread2: Java<BR>
thread1: Java<BR>
thread1: is<BR>
thread2: is<BR>
thread2: hot,<BR>
thread2: aromatic,<BR>
thread1: hot,<BR>
thread2: and<BR>
thread2: invigorating.<BR>
Thread 2 is dead.<BR>
thread1: aromatic,<BR>
thread1: and<BR>
thread1: invigorating.<BR>
Thread 1 is dead.</FONT></TT>
</BLOCKQUOTE>
<P>
The difference in the program's output should give you a feel
for the effects of synchronization upon multithreaded program
execution. Let's analyze the program and explain these results.
<P>
The <TT>ThreadSynchronization</TT> class is essentially the same
as the <TT>ThreadTest1</TT> class. The only difference is the
class name.
<P>
The <TT>MyThread</TT> class was modified slightly to allow for
the use of the <TT>SynchronizedOutput</TT> class. Instead of the
output being displayed in the <TT>run()</TT> method, as in <TT>ThreadTest1</TT>,
the <TT>run()</TT> method simply invokes the <TT>displayList()</TT>
method of the <TT>SynchronizedOutput</TT> class. It is important
to understand that the <TT>displayList()</TT> method is <TT>static</TT>
and applies to the <TT>SynchronizedOutput</TT> class as a whole,
not to any particular instance of the class. The method displays
the <TT>Java is hot, aromatic, and invigorating.</TT> message
in the same manner as it was displayed in the previous examples
of this chapter. It invokes <TT>randomWait()</TT> to wait a random
amount of time before displaying each word in the message. The
<TT>displayList()</TT> method uses the <TT>currentThread()</TT>
method of class <TT>Thread</TT> to reference the current thread
in order to invoke <TT>randomWait()</TT>.
<P>
What difference, then, does the fact that <TT>displayList()</TT>
is synchronized have on the program's execution? When <TT>displayList()</TT>
is not synchronized, it may be invoked by one thread, say <TT>thread1</TT>,
display some output, and wait while <TT>thread2</TT> executes.
When <TT>thread2</TT> executes, it too invokes <TT>displayList()</TT>
to display some output. Two separate invocations of <TT>displayList()</TT>,
one for <TT>thread1</TT> and the other for <TT>thread2</TT>, execute
concurrently. This explains the mixed output display.
<P>
When the <TT>synchronized</TT> keyword is used, <TT>thread1</TT>
invokes <TT>displayList()</TT>, acquires a monitor for the <TT>SynchronizedOutput</TT>
class (because <TT>displayList()</TT> is a <TT>static</TT> method),
and <TT>displayList()</TT> proceeds with the output display for
<TT>thread1</TT>. Because <TT>thread1</TT> acquired a monitor
for the <TT>SynchronizedOutput</TT> class, <TT>thread2</TT> must
wait until the monitor is released before it is able to invoke
<TT>displayList()</TT> to display its output. This explains why
one task's output is completed before the other's.
<H2><A NAME="DaemonThreads"><B><FONT SIZE=5 COLOR=#FF0000>Daemon
Threads</FONT></B></A></H2>
<P>
Java borrows the notion of a daemon thread from the UNIX daemon
process. A <I>daemon thread</I> is a thread that executes in the
background and provides services to other threads. It typically
executes a continuous loop of instructions that wait for a service
request, perform the service, and wait for the next service request.
Daemon threads continue to execute until there are no more threads
for which services can be provided. At this time, the daemon threads
die and the Java interpreter terminates its execution. Any thread
can be changed to a daemon thread using the <TT>setDaemon()</TT>
method.
<H2><A NAME="ThreadGroups"><B><FONT SIZE=5 COLOR=#FF0000>Thread
Groups</FONT></B></A></H2>
<P>
<I>Thread groups</I> are objects that consist of a collection
of threads. Every thread is a member of a unique thread group.
Thread groups are used to invoke methods that apply to all threads
in the group. For example, a thread group can be used to start
or stop all threads in a group, to change their priorities, or
to change them to daemon threads.
<P>
A thread is entered into a thread group when it is created. After
the thread enters a thread group, it remains a member of the group
throughout its existence. A thread can never become a member of
another group.
<P>
Threads are entered into a group using <TT>Thread</TT> constructors
that take a <TT>ThreadGroup</TT> parameter. These constructors
are described in the <TT>Thread</TT> class API documentation.
If a thread's group is not specified in its constructor, as is
the usual case, the thread is entered into the same group as the
thread that created it. The default thread group for a newly executing
Java application is the <TT>main</TT> group. All of the threads
created in this chapter's examples have been members of the default
<TT>main</TT> thread group. The <TT>ThreadGroup</TT> class is
covered in <A HREF="ch12.htm" >Chapter 12</A>.
<H2><A NAME="Summary"><B><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></B></A>
</H2>
<P>
In this chapter you have learned how to develop multithreaded
programs using Java threads. You have learned how to synchronize
multiple threads in order to share common resources. You have
also learned how to use thread priorities to control thread scheduling.
You have now covered the main features of the Java language. A
complete language summary is provided in <A HREF="ch11.htm" >Chapter 11</A>.
In <A HREF="ch9.htm" >Chapter 9</A>, &quot;Using the Debugger,&quot;
you'll learn how to use the Java debugger to help debug the programs
you develop.
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



