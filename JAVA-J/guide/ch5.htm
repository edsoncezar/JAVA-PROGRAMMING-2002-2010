<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META>
<H1><FONT COLOR=#FF0000>Chapter 5</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Classes and Objects</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#ObjectOrientedProgrammingConcepts" >Object-Oriented Programming Concepts</A>
<UL>
<LI><A HREF="#ItsanObjectOrientedWorld" >It's an Object-Oriented World</A>
<LI><A HREF="#CompositionandReuse" >Composition and Reuse</A>
<LI><A HREF="#Classes" >Classes</A>
<LI><A HREF="#ClassificationandInheritance" >Classification and Inheritance</A>
<LI><A HREF="#MultipleInheritance" >Multiple Inheritance</A>
<LI><A HREF="#MessagesMethodsandObjectInteractio" >Messages, Methods, and Object Interaction</A>
<LI><A HREF="#Encapsulation" >Encapsulation</A>
<LI><A HREF="#Polymorphism" >Polymorphism</A>
<LI><A HREF="#DynamicBinding" >Dynamic Binding</A>
</UL>
<LI><A HREF="#JavaClasses" >Java Classes</A>
<UL>
<LI><A HREF="#ClassSyntax" >Class Syntax</A>
<LI><A HREF="#ThePointClass" >The Point Class</A>
<LI><A HREF="#ClassModifiers" >Class Modifiers</A>
<LI><A HREF="#ExtendingSuperclasses" >Extending Superclasses</A>
<LI><A HREF="#AddingBodytoClasses" >Adding Body to Classes</A>
<LI><A HREF="#TheCGridClass" >The CGrid Class</A>
<LI><A HREF="#TheCGObjectClass" >The CGObject Class</A>
<LI><A HREF="#ThePrintCGridClass" >The PrintCGrid Class</A>
<LI><A HREF="#TheBorderedPrintCGridClass" >The BorderedPrintCGrid Class</A>
<LI><A HREF="#TheCGPointClass" >The CGPoint Class</A>
<LI><A HREF="#TheCGBoxClass" >The CGBox Class</A>
<LI><A HREF="#TheCGTextClass" >The CGText Class</A>
<LI><A HREF="#TheKeyboardInputClass" >The KeyboardInput Class</A>
<LI><A HREF="#TheCDrawAppProgram" >The CDrawApp Program</A>
<LI><A HREF="#RunningCDrawApp" >Running CDrawApp</A>
<LI><A HREF="#CDrawAppsImplementationofObjectOrie" >CDrawApp's Implementation of Object-Oriented Concepts</A>
</UL>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
In this chapter you'll learn all about Java and object-oriented
programming. You'll first cover general object-oriented programming
concepts and then learn how to use Java classes to build object-oriented
software. You'll use the information you learn to develop a sample
Java program that illustrates the benefits of object-oriented
programming.
<H2><A NAME="ObjectOrientedProgrammingConcepts"><B><FONT SIZE=5 COLOR=#FF0000>Object-Oriented
Programming Concepts</FONT></B></A></H2>
<P>
Over the many years since the dawn of computing, people have studied
software-development approaches to figure out which approaches
are quickest, cheapest, most reliable, and produce the best software.
And over the years, many approaches and technologies have reigned
as the best. As time goes on, we learn more about software development
and are able to modify and adapt our approaches based on what
we learn. The type of software we develop also changes over time
as a result of improvements in computer hardware, innovations
in computer science, and changes in user expectations. These improvements
affect our development approaches as well.
<P>
Of all the known approaches to developing software, one approach,
called the <I>object-oriented</I> approach, has repeatedly proven
itself to be the best approach for a large class of common software
applications. It's likely that the object-oriented approach will
undergo further evolution and that a new, improved software-development
paradigm will take its place. But for right now, and the foreseeable
future, it is recognized as the best approach for the majority
of software that we develop today.
<P>
Object-oriented programming focuses on the development of self-contained
software components, called <I>objects</I>. These objects are
modeled after things, such as files, forms, buttons, and windows,
that appear in the real world. Objects are defined in terms of
the information they contain and the operations they provide for
using and manipulating this information.
<H3><A NAME="ItsanObjectOrientedWorld"><B>It's an Object-Oriented
World</B></A></H3>
<P>
This book is an object. It contains a lot of information. (If
you don't believe me, try retyping it.) It also has methods for
accessing the information it contains. For example, you can open
the book, turn a page, read a paragraph, search the table of contents,
and so on. The information contained in the book, together with
the methods for accessing it, are what comprise the object known
as this book.
<P>
In order to read this book, you need some sort of light source.
You could be reading it in the open sunshine or by moonlight,
but let's assume that you are using a lamp of some kind. A lamp
is also an object. It is an example of an object that contains
information about its state. The <I>state</I> of an object is
the particular condition it is in. For example, a lamp can be
on or off. The lamp's methods-turn lamp on and turn lamp off-are
used to access the state of the lamp.
<P>
This book, too, has state information. For example, it can be
open or closed. If it is open, it can be opened to a particular
page. The pages are objects in their own right. They contain information
and can be accessed through the read page method. The book object
can be viewed as being composed of page objects. The book's methods
provide access to pages, and the page methods provide access to
the information contained on a particular page.
<P>
The information contained in an object, whether it is state specific
or not, is referred to as the object's <I>data</I>. The object's
methods are said to <I>access</I> the data. Some methods return
information about the object's data and are said to support <I>read
access</I>. Other methods cause the data to be modified and are
said to provide <I>write access</I> to the data. Finally, as you'll
learn in later sections, some methods, called <I>constructors</I>,
are used to create objects.
<H3><A NAME="CompositionandReuse"><B>Composition and Reuse</B></A>
</H3>
<P>
The fact that one object can be composed of, or built from, other
objects is the heart of object-oriented programming. This allows
more complex objects to be constructed from simple object components.
Just as you would not write a book as one continuous stream of
text (unless you are Jack Kerouac), you wouldn't write a program
as a single sequence of source code instructions. You design your
program as an application object and construct it from other objects
that are built or borrowed.
<P>
For example, suppose you are developing a drawing program. Your
drawing application would consist of objects such as windows,
menus, a drawing canvas, a tool palette, a color palette, and
so on. Some of these objects would be available in object libraries
and others would be built from more primitive components. You
would develop your drawing application by gathering and building
its component objects and assembling them into an integrated whole.
<P>
Object composition not only allows you to simplify the organization
of your programs, it also lets you reuse the software you develop.
For example, you could develop drawing objects as part of your
drawing program and then reuse those objects in a paint program
and a desktop- publishing program. You could also package up your
drawing objects and give or sell them to others so that they can
use them as a foundation for building their own custom objects.
<P>
Object reuse provides you with the capability to build or acquire
a library of objects from which you can more quickly and easily
piece together your programs. Without this capability, you are
forced to start from scratch with every program that you develop.
<P>
Object reuse is not limited to object composition. It also exploits
a powerful capability of object-oriented programming known as
<I>inheritance</I>. Inheritance not only allows objects to be
used as is, but also allows new objects to be created by extending
and tailoring existing objects. Before you learn about inheritance,
however, the concept of an object's class must be explained.
<H3><A NAME="Classes"><B>Classes</B></A></H3>
<P>
At this point, you might be wondering just how you go about developing
objects. The answer, of course, depends on the language you are
using. Java, C++, Smalltalk, and some other object-oriented languages
follow a class-based approach. This approach allows you to declare
<I>classes</I> that serve as a template from which objects are
created.
<P>
As you would expect, a <I>class</I> defines the type of data that
is contained in an object and the methods that are used to access
this data. A class also defines one or more methods to be used
to create objects that are <I>instances</I> of the class. An instance
of a class is a concrete manifestation of the class in your computer's
memory.
<P>
For example, consider a job application form as an object. It
contains data-the different form fields that must be filled out.
There are also methods for accessing the data-for example, fill
in form and read form. Now suppose that you develop an application
form for a company that will use it for new job applicants. When
a job is advertised, 100 potential applicants show up. In order
for these applicants to use your form, they must all be given
a unique instance of the form. These form instances are created
by using the form you developed as a master copy and then duplicating
the master copy as many times as needed to create each instance.
The job applicants then fill in their instances of the form, using
the fill in form method.
<P>
In the preceding example, the master form is analogous to a class.
The master form defines the data to be contained in each of its
instances and implicitly provides methods by which the data can
be accessed. In the same way, a class defines the data that can
be contained in an object as well as the methods that can be used
to access this data.
<H3><A NAME="ClassificationandInheritance"><B>Classification and
Inheritance</B></A></H3>
<P>
Classification is a common way that we organize knowledge. When
we encounter a new object in our daily experience, we try to fit
that object in our hierarchical classification scheme. If it fits
in an existing category, we know what kind of object it is. If
it doesn't fit, we add a new category. <A HREF="f5-1.gif" >Figure 5.1</A>
describes how we use classification to represent knowledge.
<P>
<B>Figure 5.1.  Hierarchical classification of knowledge.</B>
<P>
<A HREF="f5-1.gif"><B>Figure 5.1 : </B><I>Hierarchical classification of knowledge.</I></A>
<P>
When we classify objects in this hierarchical fashion, the object
categories at the top of the classification tree include all the
object categories below them. If an object category appears in
the classification tree, it satisfies the properties of all object
categories above it in the tree. <A HREF="f5-2.gif" >Figure 5.2</A>
presents a classification tree for vehicles. All categories in
the tree below the category automobile, for example, share the
common characteristics of being four-wheeled, self-powered, and
designed for passenger transportation.
<P>
<A HREF="f5-2.gif"><B>Figure 5.2 : </B><I>Vehicle classification tree.</I></A>
<P>
The fact that a lower-level category shares the characteristics
of the categories above it on the classification tree is known
as <I>inheritance</I>. The lower-level categories are said to
inherit the characteristics of the categories above them on the
tree.
<P>
At this point, you're probably wondering what any of this has
to do with object-oriented programming in general, and Java software
development in particular. We're almost there.
<P>
The classes you learned about in the previous section can also
be organized in a hierarchical fashion. A class X is said to <I>extend</I>
another class Y if it contains all the data contained in class
Y and implements all the methods implemented by class Y. Class
X is said to be a <I>subclass</I> of class Y, and class Y is said
to be a <I>superclass</I>, or <I>parent class</I>, of class X.
<P>
Classes form a hierarchical classification tree under the subclass
relationship. If a class X is a subclass of a class Y, it inherits
the properties of Y. This means that all of the data and methods
defined for class Y are available to class X.
<P>
Most object-oriented programming languages, and Java in particular,
allow you to easily define subclasses that automatically inherit
the data and methods of the classes they extend. This is a very
powerful feature for software reuse. Not only can you reuse classes
as they are defined, but you can easily extend and tailor their
definitions by adding additional data and access methods to their
subclasses.
<P>
There are many times that you may have a class definition you
can use in your program, but it would be better if it supported
additional state information or access methods. Java's support
of subclassing enables you to easily extend such classes by supplying
only the additional data and methods that are unique to the subclass.
This allows you to take advantage of all the features of the superclass
without having to implement any of them.
<H3><A NAME="MultipleInheritance"><B>Multiple Inheritance</B></A>
</H3>
<P>
When a class extends another class, it inherits the data and methods
of the class it extends. This is known as <I>single inheritance</I>.
It is also possible for a class to extend classes on more than
one branch of the class hierarchy tree, as shown in Figure 5.3.
This is known as <I>multiple inheritance</I>.
<P>
<A HREF="f5-3.gif"><B>Figure 5.3 : </B><I>Multiple inheritance.</I></A>
<P>
Multiple inheritance poses some difficulties for object-oriented
programming. Most of these difficulties stem from the problem
of determining which parent of a class to use under certain conditions.
Numerous ambiguities arise when a class may have more than one
immediate parent. For example, suppose a class X extends both
a class Y and a class Z. Both class Y and class Z implement a
unique print method. How does the compiler determine what method
should be used to print objects of class X? What if the ambiguity
arises during runtime for an object that inherits methods over
several widely spaced branches of the class hierarchy? What's
a poor compiler to do?
<P>
It is possible to design compilers and runtime systems that solve
the ambiguities resulting from multiple inheritance, but these
solutions tend to introduce a significant amount of processing
overhead, adversely affecting program size and performance. The
developers of Java have opted to support only single inheritance.
This greatly simplifies the Java language, compiler, and runtime
system. Java uses the interface construct to provide the benefits
of multiple inheritance without the drawbacks resulting from parent
ambiguity. You'll learn more about this construct in <A HREF="ch6.htm" >Chapter 6</A>,
&quot;Interfaces.&quot;
<H3><A NAME="MessagesMethodsandObjectInteractio"><B>Messages,
Methods, and Object Interaction</B></A></H3>
<P>
In a pure object-oriented programming model, such as that used
by Smalltalk, objects interact by sending messages to each other.
When an object receives a message, the object invokes a method
to process the message. The method may change the state of the
object, return information contained in the object, or cause objects
to be created or deleted.
<P>
The object model used by Java is consistent with the concept of
message passing, but does not emphasize it. In the Java model,
objects interact by invoking each other's methods. <I>Methods</I>
provide access to the information contained in an object. The
type of access varies depending on the method.
<H3><A NAME="Encapsulation"><B>Encapsulation</B></A></H3>
<P>
One of the characteristics of object-oriented programming that
is often touted in discussions of the subject is <I>encapsulation</I>.
The term carries the connotation of an object being enclosed in
some sort of container-and that is exactly what it means. Encapsulation
is the combining of data and the code that manipulates that data
into a single component-that is, an object. Encapsulation also
refers to the control of access to the details of an object's
implementation. Object access is limited to a well-defined, controlled
interface. This allows objects to be self-contained and protects
them from accidental misuse, both of which are important to reliable
software design.
<H3><A NAME="Polymorphism"><B>Polymorphism</B></A></H3>
<P>
<I>Polymorphism</I> is the ability to assume different forms.
In object-oriented programming, this refers to the ability of
objects to have many methods of the same name, but with different
forms. The compiler and runtime system support polymorphism by
matching each method invocation to the correct method, class,
and object. The ability to figure out which method to use, in
complex situations, is the essence of polymorphism.
<P>
Luckily for us, polymorphism is implemented in the compiler and
runtime system-we don't need to do anything to make it happen.
We just need to know that it works.
<H3><A NAME="DynamicBinding"><B>Dynamic Binding</B></A></H3>
<P>
Sometimes a program might need to interface with objects of many
different classes. For example, consider a program that has the
responsibility of sending out objects over a communication link.
The program may not know what class an object belongs to until
it is time to send it. The capability to defer until runtime decisions
about what class an object belongs to and the methods for accessing
the object is known as <I>dynamic binding</I>.
<P>
Dynamic binding is important to object-oriented programming because
it eliminates many potentially constraining assumptions about
the classes that an object belongs to and enables objects to be
designed in a more general and open manner.
<P>
Dynamic binding also provides capabilities that are necessary
for the advanced network programming capabilities of Java applets.
When a browser executes a Java applet, the applet could require
the loading of classes located on other sites across the Internet.
Furthermore, these classes could be in a continual state of modification
and upgrade. Dynamic binding allows new and modified objects to
be used by executing software without requiring recompilation.
The compiler and interpreter work together to provide executable
code with the capabilities needed to dynamically interface with
unknown objects during program execution.
<H2><A NAME="JavaClasses"><B><FONT SIZE=5 COLOR=#FF0000>Java Classes</FONT></B></A>
</H2>
<P>
In this section, you will develop a Java program, <TT>CDrawApp</TT>,
that illustrates the concepts of encapsulation, composition and
reuse, classification and inheritance, polymorphism, and dynamic
binding. <TT>CDrawApp</TT> will allow you to draw points, boxes,
and text strings on a character-based grid that is displayed using
the Java console window.
<P>
The program will be introduced as a series of Java classes that
cover different aspects of class and object syntax. Each new class
will make use of the capabilities provided by previous classes
and will provide additional building blocks required for the program's
development. It is important that you understand each class that
is presented before moving on to subsequent classes.
<P>
You should create a <TT>ch05</TT> directory, under <TT>c:\java\jdg</TT>,
to store the Java source and bytecode files for this lesson. All
classes will be developed in the <TT>jdg.ch05</TT> package.
<H3><A NAME="ClassSyntax"><B>Class Syntax</B></A></H3>
<P>
The Java language is class and object oriented. Classes are templates
for the creation of objects. They define the data contained in
an object together with methods for accessing that data.
<P>
Classes are declared as follows:
<BLOCKQUOTE>
<TT><I><FONT FACE="Courier New">ClassModifiers class ClassName
ExtendsClause ImplementsClause ClassBody</FONT></I></TT>
</BLOCKQUOTE>
<P>
The <TT><I><FONT FACE="Courier New">ClassModifiers</FONT></I></TT>,
<TT><I><FONT FACE="Courier New">ExtendsClause</FONT></I></TT>,
and <TT><I><FONT FACE="Courier New">ImplementsClause</FONT></I></TT><I>
</I>are optional. Interfaces and the <TT><I><FONT FACE="Courier New">ImplementsClause</FONT></I></TT><I>
</I>are covered in the next chapter. The <TT><I><FONT FACE="Courier New">ClassBody</FONT></I></TT>
is enclosed by braces, and contains zero or more field declarations.
<P>
An example of a simple class declaration is
<BLOCKQUOTE>
<TT>class SimpleClass {<BR>
<FONT FACE="Courier New">}</FONT></TT>
</BLOCKQUOTE>
<P>
It declares a class, named <TT>SimpleClass</TT>, that is a subclass
of <TT>Object</TT>, the highest-level class in the Java class
hierarchy. <TT>SimpleClass</TT> declares no variables or methods
of its own; it has only those that it inherits from <TT>Object</TT>.
<H3><A NAME="ThePointClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">Point</FONT></B></TT><B>
<FONT SIZE=4>Class</FONT></B></A></H3>
<P>
The first class that you'll define for the <TT>CDrawApp</TT> program
is the <TT>Point</TT> class. This class is used to identify a
point on a grid by its x- and y-coordinates. The source code for
the class declaration follows. (See Listing 5.1.) You should enter
the code in a file named <TT>Point.java</TT> and store it in your
<TT>c:\java\jdg\ch05</TT> directory. Then compile it using the
command <TT>javac Point.java</TT>.
<HR>
<BLOCKQUOTE>
<B>Listing 5.1. The </B><TT><B><FONT FACE="Courier New">Point</FONT></B></TT><B>
class source code</B>.<P>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>package jdg.ch05;<BR>
<BR>
<FONT FACE="Courier New">// Point.java<BR>
<BR>
public class Point {<BR>
&nbsp;// Variable declarations<BR>
&nbsp;private int x;<BR>
&nbsp;private int y;<BR>
<BR>
&nbsp;//Method declarations<BR>
&nbsp;public Point() {<BR>
&nbsp;&nbsp;x = 0;<BR>
&nbsp;&nbsp;y = 0;<BR>
&nbsp;}<BR>
&nbsp;public Point(int xValue, int yValue) {<BR>
&nbsp;&nbsp;x = xValue;<BR>
&nbsp;&nbsp;y = yValue;<BR>
&nbsp;}<BR>
&nbsp;public Point(Point p) {<BR>
&nbsp;&nbsp;x = p.x();<BR>
&nbsp;&nbsp;y = p.y();<BR>
&nbsp;}<BR>
&nbsp;public int x() {<BR>
&nbsp;&nbsp;return x;<BR>
&nbsp;}<BR>
&nbsp;public int y() {<BR>
&nbsp;&nbsp;return y;<BR>
&nbsp;}<BR>
&nbsp;public void xSet(int xValue) {<BR>
&nbsp;&nbsp;x = xValue;<BR>
&nbsp;}<BR>
&nbsp;public void ySet(int yValue) {<BR>
&nbsp;&nbsp;y = yValue;<BR>
&nbsp;}<BR>
&nbsp;public Point add(Point p) {<BR>
&nbsp;&nbsp;return new Point(x+p.x(), y+p.y());<BR>
&nbsp;}<BR>
&nbsp;public Point add(int i,int j) {<BR>
&nbsp;&nbsp;return new Point(x+i,y+j);<BR>
&nbsp;}<BR>
&nbsp;public String toString() {<BR>
&nbsp;&nbsp;return new String(&quot;(&quot;+String.valueOf(x)+&quot;,&quot;+String.valueOf(y)+&quot;)&quot;);
<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="ClassModifiers"><B>Class Modifiers</B></A></H3>
<P>
The <TT>Point</TT> class is declared using the <TT>public</TT>
class modifier. <I>Class modifiers</I> are keywords that are used
to specify the properties of a class. Three class modifiers are
supported: <TT>public</TT>, <TT>final</TT>, and <TT>abstract</TT>.
If a class is declared as <TT>public</TT>, it can be accessed
outside of its package; otherwise, it cannot. Because <TT>Point</TT>
is declared as <TT>public</TT>, it can be accessed outside its
package. Only one <TT>public</TT> class or interface is allowed
in a compilation unit. <TT>Point</TT> is the only class in <TT>Point.java</TT>
and, therefore, follows this rule.
<P>
If a class is declared as <TT>final</TT>, it cannot be extended.
<TT>Final</TT> classes form the leaves of the class hierarchy
tree.
<P>
An <TT>abstract</TT> class is used to define the general behavior
for an intended set of subclasses. <TT>abstract</TT> classes are
used to set the stage for subsequent subclass development. They
are, by definition, incomplete and cannot be instantiated in terms
of objects. <TT>abstract</TT> classes describe the behavior expected
of their subclasses through the declaration of <TT><I><FONT FACE="Courier New">abstract</FONT></I></TT><I>
methods</I>. <TT>abstract</TT> methods must be redefined, or <I>overridden</I>,
before they can be used. Only <TT>abstract</TT> classes are allowed
to declare or inherit <TT>abstract</TT> methods. The <TT>CGObject</TT>
class is an example of an <TT>abstract</TT> class. It is presented
in the section &quot;The CGObject class,&quot; later in this chapter.
<H3><A NAME="ExtendingSuperclasses"><B>Extending Superclasses</B></A>
</H3>
<P>
When a class declaration does not contain an <TT>extends</TT>
clause, the class is automatically made a subclass of the <TT>Object</TT>
class. The <TT>Point</TT> class does not contain an <TT>extends</TT>
clause and, therefore, is a subclass of <TT>Object</TT>. The <TT>Object</TT>
class is at the top of the Java class hierarchy, being the <I>superclass</I>
of all Java classes.
<P>
You can change a class's position in the class hierarchy by identifying
its immediate super-class in the class declaration. The <I>immediate
superclass</I> is the parent class directly above it in the class
hierarchy. You identify the immediate superclass of a class using
the <TT>extends</TT> clause in the class declaration. For example,
you can place <TT>SimpleClass</TT> under <TT>ExampleClass</TT>
in the class hierarchy as follows:
<BLOCKQUOTE>
<TT>class SimpleClass extends ExampleClass {<BR>
<FONT FACE="Courier New">}</FONT></TT>
</BLOCKQUOTE>
<P>
<TT>SimpleClass</TT> does not have any unique variables or methods
of its own, but it inherits those of <TT>ExampleClass</TT> and
all superclasses of <TT>ExampleClass</TT>.
<H3><A NAME="AddingBodytoClasses"><B>Adding Body to Classes</B></A>
</H3>
<P>
The body of the <TT>Point</TT> class consists of all declarations
between the opening and closing braces. If a class is to add any
features to its superclass, it does so in its class body. It is
here that additional variables and methods are declared. These
additional declarations are referred to as <I>field declarations</I>.
<P>
The field declarations are identified within the opening and closing
braces (<TT>{</TT> and <TT>}</TT>) of the class body. You need
to supply the braces even if you don't intend to declare any fields,
as you saw in the <TT>SimpleClass</TT> example.
<H4><B>Variable Declarations</B></H4>
<P>
<I>Variables</I> are the components of an object that store data
and state information. They are declared as follows:
<BLOCKQUOTE>
<TT><I><FONT FACE="Courier New">VariableModifiers Type VariableDeclarators</FONT></I></TT>
</BLOCKQUOTE>
<P>
<TT><I><FONT FACE="Courier New">VariableModifiers</FONT></I></TT>
are keywords that identify special properties of the variables
being declared. <TT><I><FONT FACE="Courier New">Type</FONT></I></TT>
is the Java type of the declared variables. It may be a primitive
type, a class type, an interface type, or an array type. <TT><I><FONT FACE="Courier New">VariableDeclarators</FONT></I></TT>
identify the names of the declared variables and can be used to
specify the initial values of these variables.
<P>
The <TT>Point</TT> class declares two integer variables: <TT>x</TT>
and <TT>y</TT>. They are used to store the location of a point
on a two-dimensional grid. These variables are declared with the
<TT>private</TT> modifier. This modifier restricts access to the
<TT>x</TT> and <TT>y</TT> variables to within the <TT>Point</TT>
class. The <TT>Point</TT> class illustrates the principles of
encapsulation. Data and methods are combined with a well-defined
interface to provide maximum modularity. Access to the internal
operation of the class is controlled.
<H4><B>Constructor Declarations</B></H4>
<P>
<I>Constructors</I> are special methods that are used to initialize
newly created objects. They are used together with the <TT>new</TT>
operator to create and initialize objects that are instances of
a class.
<P>
Constructors are declared in a slightly different manner than
other methods. Their syntax is as follows:
<BLOCKQUOTE>
<TT><I><FONT FACE="Courier New">AccessSpecifier ConstructorDeclarator
ThrowsClause ConstructorBody</FONT></I></TT>
</BLOCKQUOTE>
<P>
<TT><I><FONT FACE="Courier New">AccessSpecifier</FONT></I></TT>
identifies the type of access allowed to the constructor. <TT><I><FONT FACE="Courier New">ConstructorDeclarator</FONT></I></TT>
identifies a method with the same name as the class and specifies
its parameter list. The parameter list is a comma-separated list
of parameter declarations where each parameter declaration identifies
the type and name of a parameter that is passed to the constructor
upon invocation.
<P>
<TT><I><FONT FACE="Courier New">ThrowsClause</FONT></I></TT> is
a constructor. Exceptions are covered in <A HREF="ch7.htm" >Chapter 7</A>,
&quot;Exceptions.&quot;
<P>
<TT><I><FONT FACE="Courier New">ConstructorBody</FONT></I></TT>
contains the code that implements the constructor.
<P>
The <TT>Point</TT> class has three constructors:
<BLOCKQUOTE>
<TT><FONT SIZE=2 FACE="Courier">&nbsp;</FONT>public Point() {
<BR>
<FONT FACE="Courier New">&nbsp;&nbsp;x = 0;<BR>
&nbsp;&nbsp;y = 0;<BR>
&nbsp;}<BR>
&nbsp;public Point(int xValue, int yValue) {<BR>
&nbsp;&nbsp;x = xValue;<BR>
&nbsp;&nbsp;y = yValue;<BR>
&nbsp;}<BR>
&nbsp;public Point(Point p) {<BR>
&nbsp;&nbsp;x = p.x();<BR>
&nbsp;&nbsp;y = p.y();<BR>
&nbsp;}</FONT></TT>
</BLOCKQUOTE>
<P>
All three constructors are identified as <TT>public</TT>. This
allows them to be accessed outside of their package. The first
constructor does not have any parameters. It simply initializes
the <TT>x</TT> and <TT>y</TT> variables to <TT>0</TT>. The second
constructor has two parameters, <TT>xValue</TT> and <TT>yValue</TT>,
of integer type. They are used to set the value of <TT>x</TT>
and <TT>y</TT>. The third constructor takes an object of class
<TT>Point</TT> as its parameter. It sets the values of <TT>x</TT>
and <TT>y</TT> based upon the values of the parameter point <TT>p</TT>.
It is an example of a <I>copy constructor</I> because it creates
a new point that is a copy of the point that is passed as its
parameter.
<P>
The declaration of the three <TT>Point</TT> constructors is an
example of <I>overloading</I>. Overloading occurs when two or
more methods with the same name are declared within a class. The
overloaded methods must differ in their parameter lists. The <TT>add()</TT>
methods of the <TT>Point</TT> class are also overloaded.
<P>
Overloading is an example of polymorphism. When an overloaded
method is to be invoked during program execution, the number and
type of method arguments used in the invocation determine which
method is used.
<H4><B>Access Method Declarations</B></H4>
<P>
<I>Methods</I> are executable units of code that provide access
to the data stored in variables. Methods that are not constructors
are referred to as <I>nonconstructor</I> methods, or <I>access</I>
methods. Access methods are declared within the body of a class
as follows:
<BLOCKQUOTE>
<TT><I><FONT FACE="Courier New">MethodModifiers ResultType MethodDeclarator
ThrowsClause MethodBody</FONT></I></TT>
</BLOCKQUOTE>
<P>
<TT><I><FONT FACE="Courier New">MethodModifiers</FONT></I></TT>
identify special properties of a method. All the methods of class
<TT>Point</TT> are <TT>public</TT>, allowing them to be accessed
outside of their package.
<P>
<TT><I><FONT FACE="Courier New">ResultType</FONT></I></TT> of
a method identifies the type of value that is returned by the
method. If an access method does not return a value, it must use
the <TT>void</TT> return type. Constructors do not have a return
type. The access methods of class <TT>Point</TT> have return values
of type <TT>int</TT>, <TT>void</TT>, <TT>Point</TT>, and <TT>String</TT>.
<P>
<TT><I><FONT FACE="Courier New">MethodDeclarator</FONT></I></TT>
identifies the method, by name, and specifies its parameter list.
The parameter list of access methods is specified in the same
manner as with constructors.
<P>
<TT><I><FONT FACE="Courier New">MethodBody</FONT></I></TT> contains
the code that implements the Java method.
<P>
The <TT>Point</TT> class has seven access methods. The <TT>x()</TT>
and <TT>y()</TT> methods return the x- and y-coordinates of a
point. The <TT>xSet()</TT> and <TT>ySet()</TT> methods set the
values of these coordinates based on the values of the <TT>xValue</TT>
and <TT>yValue</TT> parameters. The two <TT>add()</TT> methods
are used to create a new <TT>Point</TT> object by adding to the
coordinates of the point being accessed. The <TT>new</TT> operator
creates new instances of a class. It is always followed by a constructor
that initializes the newly created instance. The <TT>toString()</TT>
method returns an object of class <TT>String</TT> that describes
the point as an ordered pair.
<H3><A NAME="TheCGridClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">CGrid</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>CGrid</TT> class is used to define a grid of characters
of specified dimensions. It provides a basic set of grid methods
and is extended by other classes that add to these methods. Its
source code is shown in Listing 5.2. It should be entered into
the <TT>CGrid.java</TT> file and compiled using <TT>javac</TT>.
<HR>
<BLOCKQUOTE>
<B>Listing 5.2. The </B><TT><B><FONT FACE="Courier New">CGrid</FONT></B></TT><B>
class source code.</B><P>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>package jdg.ch05;<BR>
<BR>
<FONT FACE="Courier New">// CGrid.java<BR>
<BR>
public class CGrid {<BR>
&nbsp;// Variable declarations<BR>
&nbsp;protected int width;<BR>
&nbsp;protected int depth;<BR>
&nbsp;protected char grid[][];<BR>
<BR>
&nbsp;// Method declarations<BR>
&nbsp;public CGrid(int widthValue,int depthValue) {<BR>
&nbsp;&nbsp;width = widthValue;<BR>
&nbsp;&nbsp;depth = depthValue;<BR>
&nbsp;&nbsp;grid = new char[depth][width];<BR>
&nbsp;&nbsp;blankGrid();<BR>
&nbsp;}<BR>
&nbsp;public void blankGrid() {<BR>
&nbsp;&nbsp;fillGrid(' ');<BR>
&nbsp;}<BR>
&nbsp;public void fillGrid(char ch) {<BR>
&nbsp;&nbsp;for(int j=0; j&lt;depth; ++j)<BR>
&nbsp;&nbsp;&nbsp;for(int i=0; i&lt;width; ++i)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;grid[j][i]= ch;<BR>
&nbsp;}<BR>
&nbsp;public void putCharAt(char ch,Point p){<BR>
&nbsp;&nbsp;grid[p.y()][p.x()] = ch;<BR>
&nbsp;}<BR>
&nbsp;public char getCharFrom(Point p) {<BR>
&nbsp;&nbsp;return grid[p.y()][p.x()];<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
<TT>CGrid</TT> declares three variables: <TT>width</TT>, <TT>depth</TT>,
and <TT>grid[][]</TT>. The <TT>width</TT> and <TT>depth</TT> variables
are used to specify the horizontal and vertical dimensions of
<TT>grid[][]</TT>, an array of character arrays that holds the
characters of the grid. The <TT>grid[][]</TT> array is used as
a two-dimensional array of characters, even though Java technically
does not have multidimensional arrays.
<P>
The <TT>CGrid</TT> variables are declared as <TT>protected</TT>.
This specifies that they can only be accessed in the package,
<TT>jdg.ch05</TT>, in which they are declared, and in any subclasses
of <TT>CGrid</TT>.
<P>
<TT>CGrid</TT> has a single constructor that sets the values of
<TT>width</TT> and <TT>depth</TT>, allocates the <TT>grid[][]</TT>
array, and then invokes <TT>blankGrid()</TT> to fill <TT>grid[][]</TT>
with spaces.
<P>
<TT>CGrid</TT> has four access methods. The <TT>fillGrid()</TT>
method sets each element of the <TT>grid[][]</TT> array to the
<TT>ch</TT> parameter. The <TT>blankGrid()</TT> method simply
calls <TT>fillGrid()</TT> with a space character. The <TT>putCharAt()</TT>
and <TT>getCharFrom()</TT> methods are used to set a point in
the grid to a particular character and to find out what character
is at a given location in the grid.
<P>
Note that the <TT>putCharAt()</TT> and <TT>getCharFrom()</TT>
methods use the <TT>Point</TT> class to define their parameters.
Because <TT>Point</TT> is in the same package as <TT>CGrid</TT>,
it does not need to be imported.
<H3><A NAME="TheCGObjectClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">CGObject</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>CGObject</TT> class is an example of an <TT>abstract</TT>
class. <TT>abstract</TT> classes are used to constrain the behavior
of their subclasses by defining <TT>abstract</TT> methods. The
<TT>abstract</TT> methods must be implemented by any non-<TT>abstract</TT>
subclasses. Listing 5.3 shows the source code of the <TT>CGObject</TT>
class.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 5.3. The </B><TT><B><FONT FACE="Courier New">CGObject</FONT></B></TT><B>
class source code.</B>
<P>
<TT>package jdg.ch05;<BR>
<BR>
<FONT FACE="Courier New">// CGObject.java<BR>
<BR>
public abstract class CGObject {<BR>
&nbsp;// Variable declarations<BR>
&nbsp;public Point location;<BR>
&nbsp;public char drawCharacter;<BR>
<BR>
&nbsp;// Method declarations<BR>
&nbsp;public void addToGrid(PrintCGrid grid) {<BR>
&nbsp;&nbsp;grid.addCGObject(this);<BR>
&nbsp;}<BR>
&nbsp;public abstract void display(PrintCGrid grid);<BR>
&nbsp;public abstract void describe();<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT>CGObject</TT> class is used to define the general behavior
of objects that may be displayed on a grid. It declares two variables:
<TT>location</TT> and <TT>drawCharacter</TT>. The <TT>location</TT>
variable is of type <TT>Point</TT> and is used to specify the
point on a grid where an object is located. The <TT>drawCharacter</TT>
variable identifies the character that should be used to draw
the object.
<P>
<TT>CGObject</TT> has three methods and no constructors. <TT>abstract</TT>
classes cannot have constructors because they are incompletely
defined and, therefore, cannot have object instances.
<P>
The first method, <TT>addToGrid()</TT>, is not <TT>abstract</TT>.
It takes an object of class <TT>PrintCGrid</TT> as a parameter
and invokes the <TT>addCGObject()</TT> method of <TT>PrintCGrid</TT>
to add <TT>this</TT> to the grid. The <TT>this</TT> keyword is
used to refer to the current object. Whatever object of a subclass
of <TT>CGObject</TT> that is invoked with the <TT>addToGrid()</TT>
method is added to an object of class <TT>PrintCGrid</TT>.
<P>
<TT>CGObject</TT>'s other two methods are declared with the <TT>abstract</TT>
keyword. This signifies that they must be overridden before they
can be used by any non-<TT>abstract</TT> subclasses of <TT>CGObject</TT>.
The overridden methods must have the same names, parameters, and
return values as the <TT>abstract</TT> methods. The <TT>display()</TT>
method will be used to display an object on a grid of class <TT>PrintCGrid</TT>.
The <TT>describe()</TT> method will be used to display a description
of a grid object.
<P>
Don't forget to enter and compile <TT>CGObject</TT> before going
on to the next class. In case you forgot, it should be entered
into a file of the same name, with the <TT>.java</TT> extension-that
is, <TT>CGObject.java</TT>.
<H3><A NAME="ThePrintCGridClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">PrintCGrid</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>PrintCGrid</TT> class is a subclass of the <TT>CGrid</TT>
class. It defines additional variables and methods that allow
objects to be added to a grid. It also provides methods for displaying
the grid. The source code of the <TT>PrintCGrid</TT> class is
shown in Listing 5.4.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 5.4. The </B><TT><B><FONT FACE="Courier New">PrintCGrid</FONT></B></TT><B>
class source code.</B>
<P>
<TT>package jdg.ch05;<BR>
<BR>
<FONT FACE="Courier New">import java.lang.System;<BR>
<BR>
// PrintCGrid.java<BR>
<BR>
public class PrintCGrid extends CGrid {<BR>
&nbsp;// Variable declarations<BR>
&nbsp;protected CGObject displayList[];<BR>
&nbsp;protected static final int maxObjects = 100;<BR>
&nbsp;protected int numObjects;<BR>
<BR>
&nbsp;// Method declarations<BR>
&nbsp;public PrintCGrid(int x,int y) {<BR>
&nbsp;&nbsp;super(x,y);<BR>
&nbsp;&nbsp;numObjects = 0;<BR>
&nbsp;&nbsp;displayList = new CGObject[maxObjects];<BR>
&nbsp;}<BR>
&nbsp;public void addCGObject(CGObject obj) {<BR>
&nbsp;&nbsp;if(numObjects &lt; maxObjects) {<BR>
&nbsp;&nbsp;&nbsp;displayList[numObjects] = obj;<BR>
&nbsp;&nbsp;&nbsp;++numObjects;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;public void deleteCGObject(int index) {<BR>
&nbsp;&nbsp;if(index &lt; numObjects &amp;&amp; numObjects &gt;
0) {<BR>
&nbsp;&nbsp;&nbsp;for(int i = index; i &lt; numObjects -1 ; ++i)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;displayList[i] = displayList[i+1];<BR>
&nbsp;&nbsp;&nbsp;--numObjects;<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;public void deleteLastObject() {<BR>
&nbsp;&nbsp;&nbsp;if(numObjects &gt; 0) --numObjects;<BR>
&nbsp;}<BR>
&nbsp;public int getNumObjects() {<BR>
&nbsp;&nbsp;return numObjects;<BR>
&nbsp;}<BR>
&nbsp;public CGObject getObject(int index) {<BR>
&nbsp;&nbsp;return displayList[index];<BR>
&nbsp;}<BR>
&nbsp;public void clearGrid() {<BR>
&nbsp;&nbsp;numObjects = 0;<BR>
&nbsp;}<BR>
&nbsp;public void drawGrid() {<BR>
&nbsp;&nbsp;blankGrid();<BR>
&nbsp;&nbsp;for(int i = 0; i &lt; numObjects ; ++i)<BR>
&nbsp;&nbsp;&nbsp;displayList[i].display(this);<BR>
&nbsp;}<BR>
&nbsp;public void displayGrid() {<BR>
&nbsp;&nbsp;for(int i=0;i&lt;depth;++i)<BR>
&nbsp;&nbsp;&nbsp;System.out.println(String.valueOf(grid[i]));
<BR>
&nbsp;}<BR>
&nbsp;public void displayRow(int row) {<BR>
&nbsp;&nbsp;System.out.print(String.valueOf(grid[row]));<BR>
&nbsp;}<BR>
&nbsp;public void show() {<BR>
&nbsp;&nbsp;drawGrid();<BR>
&nbsp;&nbsp;displayGrid();<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
<TT>PrintCGrid</TT> is identified as a subclass of <TT>CGrid</TT>
by the <TT>extends</TT> clause in the <TT>PrintCGrid</TT> class
declaration. This means that all the variables and methods defined
in <TT>CGrid</TT> are available to <TT>PrintCGrid</TT>. You should
now begin to get a feel for the power of inheritance. <TT>PrintCGrid</TT>
uses <TT>CGrid</TT> as a base to which other grid display variables
and methods are added.
<P>
<TT>PrintCGrid</TT> declares three variables: <TT>displayList[]</TT>,
<TT>maxObjects</TT>, and <TT>numObjects</TT>. These  variables
are declared as <TT>protected</TT>, thereby limiting their access
to the <TT>jdg.ch05</TT> package and subclasses of <TT>PrintCGrid</TT>.
<P>
The <TT>displayList[]</TT> variable is an array of class <TT>CGObject</TT>.
This does not mean that it will contain objects that are instances
of this class. That would be impossible, because <TT>CGObject</TT>
is <TT>abstract</TT>. Declaring <TT>displayList[]</TT> to be an
array of class <TT>CGObject</TT> allows it to hold objects of
any class that is a subclass of <TT>CGObject</TT>. In general,
if a variable is declared to be of class X, then the variable
can be assigned any object of a class that is a subclass of X.
<P>
The <TT>maxObjects</TT> variable is declared as both <TT>static</TT>
and <TT>final</TT>. Variables that are declared using the <TT>static</TT>
modifier are common to all objects that are instances of a class
and are not replicated for each instance. <TT>Static</TT> variables
are referred to as class variables. Variables that aren't declared
as <TT>static</TT> are instance variables and are replicated for
each object that is an instance of a class.
<P>
The <TT>final</TT> modifier is used to identify a variable as
a constant. A variable that is declared with the <TT>final</TT>
modifier must be initialized in its declaration and cannot be
assigned a value anywhere else outside its declaration. The <TT>maxObjects</TT>
constant is initialized to <TT>100</TT>. It is used to identify
the maximum number of objects that can be added to <TT>displayList[]</TT>.
<P>
The <TT>numObjects</TT> variable is used to count the actual number
of objects that have been added to the grid's <TT>displayList[]</TT>.
<P>
<TT>PrintCGrid</TT> has a single constructor. This constructor
has two parameters, <TT>x</TT> and <TT>y</TT>, that represent
the horizontal and vertical dimensions of the grid. The constructor
invokes the <TT>super()</TT> method, passing these variables as
arguments. The <TT>super()</TT> method is an example of a <I>constructor
call statement</I>. It invokes the constructor of <TT>PrintCGrid</TT>'s
superclass, that is, <TT>CGrid</TT>, with the arguments <TT>x</TT>
and <TT>y</TT>. <TT>CGrid</TT>'s constructor initializes its <TT>width</TT>
and <TT>depth</TT> variables, allocates the <TT>grid[][]</TT>
array, and fills it with spaces. When <TT>CGrid</TT>'s constructor
is finished, <TT>PrintCGrid</TT>'s constructor continues by setting
<TT>numObjects</TT> to <TT>0</TT> and allocating the <TT>displayList[]</TT>
array.
<P>
<TT>PrintCGrid</TT> provides 10 access methods. The <TT>addCGObject()</TT>
method adds an object to the <TT>displayList[]</TT> array. The
<TT>deleteCGObject()</TT> method deletes the object at the specified
<TT>index</TT>. All subsequent objects in the array are moved
to fill the hole left by the deleted object. The <TT>deleteLastObject()</TT>
method deletes the last object by merely decrementing <TT>numObjects</TT>.
<P>
The <TT>getNumObjects()</TT> method returns the number of objects
in <TT>displayList[]</TT>. The <TT>getObject()</TT> method returns
the object at the specified position within <TT>displayList[]</TT>.
The <TT>clearGrid()</TT> method clears all objects by setting
<TT>numObjects</TT> to <TT>0</TT>.
<P>
The <TT>drawGrid()</TT> method is an interesting example of dynamic
binding and the use of <TT>abstract</TT> classes. It blanks the
grid, using the method that it inherits from <TT>CGrid</TT>, and
then invokes the <TT>display()</TT> method of each object in <TT>displayList[]</TT>.
It does not know what kind of objects are contained in <TT>displayList[]</TT>.
It only knows that they are of some subclass of <TT>CGObject</TT>,
and therefore must implement the <TT>display()</TT> method. Dynamic
binding enables the <TT>display()</TT> method to be invoked for
the correct object class.
<P>
The <TT>displayGrid()</TT> method displays each row of the grid
to the console window. It is an example of inheritance. The <TT>grid[][]</TT>
array was defined in the <TT>CGrid</TT> class and inherited by
<TT>PrintCGrid</TT>. It is updated by <TT>drawGrid()</TT> and
the <TT>display()</TT> methods of all subclasses of <TT>CGObject</TT>.
It is used by <TT>PrintCGrid</TT> to print characters to the console
window.
<P>
The <TT>valueOf()</TT> method used in <TT>displayGrid()</TT> is
a <TT>static</TT> method of the <TT>String</TT> class. It converts
an array of characters into a <TT>String</TT> object. A <TT>static</TT>
method is similar to a <TT>static</TT> variable in that it applies
to the class as a whole rather than to objects that are instances
of the class. Because of this class orientation, a <TT>static</TT>
method can access only <TT>static</TT> variables. All <TT>static</TT>
methods are <TT>final</TT>. <TT>final</TT> methods cannot be overridden.
<P>
The <TT>displayRow()</TT> method displays a single row of the
grid to the console window and the <TT>show()</TT> method combines
the <TT>drawGrid()</TT> and <TT>displayGrid()</TT> methods into
a single method.
<H3><A NAME="TheBorderedPrintCGridClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">BorderedPrintCGrid</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>BorderedPrintCGrid</TT> class further extends the <TT>CGrid</TT>
class by subclassing <TT>PrintCGrid</TT>. It adds additional variables
and methods for creating a border around objects of class <TT>PrintCGrid</TT>.
Listing 5.5 contains the source code of the <TT>BorderedPrintCGrid</TT>
class.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 5.5. The </B><TT><B><FONT FACE="Courier New">BorderedPrintCGrid</FONT></B></TT><B><FONT SIZE=5>
</FONT>class source code.</B>
<P>
<TT>package jdg.ch05;<BR>
<BR>
<FONT FACE="Courier New">// BorderedPrintCGrid.java<BR>
<BR>
public class BorderedPrintCGrid extends PrintCGrid {<BR>
&nbsp;// Variable declarations<BR>
&nbsp;private boolean useBorder;<BR>
&nbsp;private char borderCharacter;<BR>
&nbsp;private String horizEdge;<BR>
&nbsp;private String vertEdge;<BR>
<BR>
&nbsp;// Method declarations<BR>
&nbsp;public BorderedPrintCGrid() {<BR>
&nbsp;&nbsp;super(75,20);<BR>
&nbsp;&nbsp;setBorderDefaults('*');<BR>
&nbsp;}<BR>
&nbsp;public BorderedPrintCGrid(int x,int y,char ch) {<BR>
&nbsp;&nbsp;super(x,y);<BR>
&nbsp;&nbsp;setBorderDefaults(ch);<BR>
&nbsp;}<BR>
&nbsp;private void setBorderDefaults(char ch) {<BR>
&nbsp;&nbsp;useBorder = true;<BR>
&nbsp;&nbsp;setBorderCharacter(ch);<BR>
&nbsp;}<BR>
&nbsp;public void enableBorder(boolean toggle) {<BR>
&nbsp;&nbsp;useBorder = toggle;<BR>
&nbsp;}<BR>
&nbsp;public void setBorderCharacter(char ch) {<BR>
&nbsp;&nbsp;borderCharacter = ch;<BR>
&nbsp;&nbsp;char border[] = new char[width+2];<BR>
&nbsp;&nbsp;for(int i=0;i&lt;width+2;++i) border[i] = borderCharacter;
<BR>
&nbsp;&nbsp;horizEdge = new String(border);<BR>
&nbsp;&nbsp;vertEdge = String.valueOf(borderCharacter);<BR>
&nbsp;}<BR>
&nbsp;public void displayGrid() {<BR>
&nbsp;&nbsp;if(useBorder) {<BR>
&nbsp;&nbsp;&nbsp;System.out.println(horizEdge);<BR>
&nbsp;&nbsp;&nbsp;for(int i=0;i&lt;depth;++i) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(vertEdge);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;displayRow(i);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(vertEdge);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;System.out.println(horizEdge);<BR>
&nbsp;&nbsp;}else super.displayGrid();<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
<TT>BorderedPrintCGrid</TT> declares four private variables: <TT>useBorder</TT>,
<TT>borderCharacter</TT>, <TT>horizEdge</TT>, and <TT>vertEdge</TT>.
The <TT>useBorder</TT> variable is of type <TT>boolean</TT> and
determines whether a border should be displayed. The <TT>borderCharacter</TT>
variable contains the character to be used to display the border.
The <TT>horizEdge</TT> and <TT>vertEdge</TT> variables contain
the <TT>String</TT> objects to be displayed for the horizontal
and vertical edges of the border. These objects are computed from
the <TT>borderEdge</TT> character based on the <TT>grid[][]</TT>
dimensions.
<P>
<TT>BorderedPrintCGrid</TT> has two constructors. The first does
not take any parameters. It constructs a grid 75 characters wide
and 20 rows high by calling the constructor of <TT>PrintCGrid</TT>.
Note that <TT>PrintCGrid</TT>'s constructor passes the call farther
up the class hierarchy to <TT>CGrid</TT>'s constructor. This is
an example of how classification and inheritance work together
to simplify the development of new classes and methods. The <TT>setBorderDefaults()</TT>
method is used to initialize the variables of <TT>BorderedPrintCGrid</TT>.
The second constructor is similar to the first, but provides the
capability for the grid's dimensions to be specified directly.
<P>
<TT>BorderedPrintCGrid</TT> provides four access methods. The
<TT>setBorderDefaults()</TT> method initializes the variables
of the <TT>BorderedPrintCGrid</TT> class using the <TT>enableBorder()</TT>
and <TT>setBorderCharacter()</TT> methods. The <TT>enableBorder()</TT>
method allows the <TT>useBorder</TT> variable to be set to <TT>true</TT>
or <TT>false</TT>. The <TT>setBorderCharacter()</TT> method sets
the <TT>borderCharacter</TT>, <TT>horizEdge</TT>, and <TT>vertEdge</TT>
variables for use by the <TT>displayGrid()</TT> method.
<P>
The <TT>displayGrid()</TT> method overrides the <TT>displayGrid()</TT>
method of the <TT>PrintCGrid</TT> class. By doing so, it redefines
the method to suit its own needs. It checks to see if the <TT>useBorder</TT>
variable is <TT>true</TT>. If it is <TT>true</TT>, then a bordered
grid is displayed using the <TT>displayRow()</TT> method of <TT>PrintCGrid</TT>.
If it is <TT>false</TT>, it invokes the <TT>displayGrid()</TT>
method of its superclass, <TT>PrintCGrid</TT>, to display the
grid. The <TT>super</TT> keyword is used to identify the fact
that a superclass method should be used instead of the one defined
for the current class. The name of the superclass can also be
used to indicate which method should be used. The method invocation
could have used <TT>PrintCGrid.displayGrid()</TT> instead of <TT>super.displayGrid()</TT>.
<H3><A NAME="TheCGPointClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">CGPoint</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>CGPoint</TT> class shows how a non-<TT>abstract</TT> class
extends an <TT>abstract</TT> class. The <TT>CGPoint</TT> class
extends <TT>CGObject</TT>. It does not add any new variables to
those that it inherits, and the only methods that it declares
are constructors and the <TT>abstract</TT> methods that it is
required to implement. Listing 5.6 shows the source code of the
<TT>CGPoint</TT> class.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 5.6. The </B><TT><B><FONT FACE="Courier New">CGPoint</FONT></B></TT><B><FONT SIZE=5>
</FONT>class source code.</B>
<P>
<TT>package jdg.ch05;<BR>
<BR>
<FONT FACE="Courier New">// CGPoint.java<BR>
<BR>
public class CGPoint extends CGObject {<BR>
&nbsp;// Method declarations<BR>
&nbsp;public CGPoint(int x, int y,char ch) {<BR>
&nbsp;&nbsp;location = new Point(x,y);<BR>
&nbsp;&nbsp;drawCharacter = ch;<BR>
&nbsp;}<BR>
&nbsp;public CGPoint(int x, int y) {<BR>
&nbsp;&nbsp;this(x,y,'+');<BR>
&nbsp;}<BR>
&nbsp;public CGPoint(Point p) {<BR>
&nbsp;&nbsp;this(p.x(),p.y(),'+');<BR>
&nbsp;}<BR>
&nbsp;public CGPoint(Point p,char ch) {<BR>
&nbsp;&nbsp;this(p.x(),p.y(),ch);<BR>
&nbsp;}<BR>
&nbsp;public void display(PrintCGrid grid) {<BR>
&nbsp;&nbsp;grid.putCharAt(drawCharacter,location);<BR>
&nbsp;}<BR>
&nbsp;public void describe() {<BR>
&nbsp;&nbsp;System.out.print(&quot;CGPoint &quot;+String.valueOf(drawCharacter)+&quot;
&quot;);<BR>
&nbsp;&nbsp;System.out.println(location.toString());<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
<TT>CGPoint</TT> has four constructors. The first takes the x-
and y-coordinates of a point and the character to be displayed,
and initializes the <TT>location</TT> and <TT>drawCharacter</TT>
variables declared in <TT>CGObject</TT>. The remaining constructors
invoke the <TT>this()</TT> constructor. The <TT>this()</TT> constructor
invokes a constructor for the current class that has a matching
argument list. The matching constructor is the first constructor,
in all three cases. The second, third, and fourth constructors
provide a variety of parameter lists by which objects of <TT>CGPoint</TT>
can be constructed. The second and third constructors supply default
values for <TT>drawCharacter</TT>.
<P>
The <TT>this()</TT> constructor call statement is similar to the
<TT>super()</TT> constructor call statement used with the <TT>PrintCGrid</TT>
and <TT>BorderedPrintCGrid</TT> classes. Each allows part of the
construction details to be handed off to other constructors in
the same and parent classes. If no constructor call statement
is used, a default <TT>super()</TT> constructor is used. This
ensures that when an object is created, constructors from all
of its superclasses are called to initialize all variables inherited
by the object.
<P>
<TT>CGPoint</TT> overrides the <TT>display()</TT> and <TT>describe()</TT>
abstract methods defined by <TT>CGObject</TT>. The <TT>display()</TT>
method uses the <TT>putCharAt()</TT> method defined for class
<TT>CGrid</TT> to draw a character in the <TT>grid[][]</TT> array.
The <TT>describe()</TT> method prints a description of the point
to the console window. It uses the <TT>toString()</TT> method
of the <TT>Point</TT> class.
<H3><A NAME="TheCGBoxClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">CGBox</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>CGBox</TT> class also extends <TT>CGObject</TT>. It provides
an additional variable to allow a rectangle to be displayed on
a grid. Listing 5.7 contains the <TT>CGBox</TT> class source code.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 5.7. The </B><TT><B><FONT FACE="Courier New">CGBox</FONT></B></TT><B>
class source code.</B>
<P>
<TT>package jdg.ch05;<BR>
<BR>
<FONT FACE="Courier New">// CGBox.java<BR>
<BR>
public class CGBox extends CGObject {<BR>
&nbsp;// Variable declarations<BR>
&nbsp;protected Point lr; // Lower right corner of a box<BR>
<BR>
&nbsp;// Method declarations<BR>
&nbsp;public CGBox(Point ulCorner, Point lrCorner,char ch) {<BR>
&nbsp;&nbsp;location = ulCorner;<BR>
&nbsp;&nbsp;lr = lrCorner;<BR>
&nbsp;&nbsp;drawCharacter = ch;<BR>
&nbsp;}<BR>
&nbsp;public CGBox(Point ulCorner, Point lrCorner) {<BR>
&nbsp;&nbsp;this(ulCorner,lrCorner,'#');<BR>
&nbsp;}<BR>
&nbsp;public void display(PrintCGrid grid) {<BR>
&nbsp;&nbsp;int width = lr.x() - location.x() + 1;<BR>
&nbsp;&nbsp;int height = lr.y() - location.y() + 1;<BR>
&nbsp;&nbsp;Point topRow = new Point(location);<BR>
&nbsp;&nbsp;Point bottomRow = new Point(location.x(),lr.y());
<BR>
&nbsp;&nbsp;for(int i=0; i&lt;width; ++i) {<BR>
&nbsp;&nbsp;&nbsp;grid.putCharAt(drawCharacter,topRow);<BR>
&nbsp;&nbsp;&nbsp;grid.putCharAt(drawCharacter,bottomRow);<BR>
&nbsp;&nbsp;&nbsp;topRow = topRow.add(1,0);<BR>
&nbsp;&nbsp;&nbsp;bottomRow = bottomRow.add(1,0);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;Point leftCol = new Point(location);<BR>
&nbsp;&nbsp;Point rightCol = new Point(lr.x(),location.y());<BR>
&nbsp;&nbsp;for(int i=0;i&lt;height;++i){<BR>
&nbsp;&nbsp;&nbsp;grid.putCharAt(drawCharacter,leftCol);<BR>
&nbsp;&nbsp;&nbsp;grid.putCharAt(drawCharacter,rightCol);<BR>
&nbsp;&nbsp;&nbsp;leftCol = leftCol.add(0,1);<BR>
&nbsp;&nbsp;&nbsp;rightCol = rightCol.add(0,1);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;public void describe() {<BR>
&nbsp;&nbsp;System.out.print(&quot;CGBox &quot;+String.valueOf(drawCharacter)+&quot;
&quot;);<BR>
&nbsp;&nbsp;System.out.println(location.toString()+&quot; &quot;+lr.toString());
<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT>location</TT> variable defined in <TT>CGObject</TT> is
used as the upper-left corner of the rectangle. The <TT>lr</TT>
variable defined by <TT>CGBox</TT> is the lower-right corner of
the rectangle.
<P>
<TT>CGBox</TT> provides two constructors. The first takes arguments
for the upper-left and lower-right corners of the rectangle and
a character to be used as the <TT>drawCharacter</TT>. The second
constructor provides for a default box <TT>drawCharacter</TT>
and uses a call to the first constructor to accomplish its initialization.
<P>
The <TT>display()</TT> method displays a box on an object of class
<TT>PrintCGrid</TT>. It is a good example of object composition
because it uses objects of several different classes to accomplish
this purpose. It begins by calculating the box's <TT>width</TT>
and <TT>height</TT> dimensions from the <TT>location</TT> and
<TT>lr</TT> variables. The <TT>location</TT> variable is the upper-left
corner of the box, and the <TT>lr</TT> variable is the lower-right
corner. It then creates two points, <TT>topRow</TT> and <TT>bottomRow</TT>,
that will be used to step through the top and bottom rows of the
box's display. The first <TT>for</TT> statement is used to display
the box's top and bottom rows. The <TT>putCharAt()</TT> method
of <TT>CGrid</TT> is used to display the <TT>drawCharacter</TT>
at the locations specified by <TT>topRow</TT> and <TT>bottomRow</TT>.
The <TT>putCharAt()</TT> method is inherited by objects of class
<TT>PrintCGrid</TT>. The x-coordinates of the <TT>topRow</TT>
and <TT>bottomRow</TT> variables are incremented by 1 to step
through the rows' display using the <TT>add()</TT> method of the
<TT>Point</TT> class.
<P>
The <TT>display()</TT> method creates the <TT>leftCol</TT> and
<TT>rightCol</TT> points to be used to step through the display
of the box's left and right columns. The second <TT>for</TT> statement
displays these columns in a similar manner to the first <TT>for</TT>
statement. The y-coordinates of the <TT>leftCol</TT> and <TT>rightCol</TT>
variables are incremented by 1 to step through the columns' display.
<P>
The <TT>describe()</TT> method displays a description of a box's
parameters to the console window. This description identifies
the <TT>drawCharacter</TT> and upper-left and lower-right corners
of the box.
<H3><A NAME="TheCGTextClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">CGText</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>CGText</TT> class is the third and final subclass of <TT>CGObject</TT>
that is declared in this chapter. (See Listing 5.8.) The <TT>CGObject</TT>
class hierarchy is extended further in <A HREF="ch6.htm" >Chapter 6</A>.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 5.8. The </B><TT><B><FONT FACE="Courier New">CGText</FONT></B></TT><B>
class source code.</B>
<P>
<TT>package jdg.ch05;<BR>
<BR>
<FONT FACE="Courier New">// CGText.java<BR>
<BR>
public class CGText extends CGObject {<BR>
&nbsp;// Variable declarations<BR>
&nbsp;String text;<BR>
<BR>
&nbsp;// Method declarations<BR>
&nbsp;public CGText(Point p,String s) {<BR>
&nbsp;&nbsp;location = p;<BR>
&nbsp;&nbsp;drawCharacter = ' ';<BR>
&nbsp;&nbsp;text = s;<BR>
&nbsp;}<BR>
&nbsp;public void display(PrintCGrid grid) {<BR>
&nbsp;&nbsp;Point p = new Point(location);<BR>
&nbsp;&nbsp;for(int i=0;i&lt;text.length();++i){<BR>
&nbsp;&nbsp;&nbsp;grid.putCharAt(text.charAt(i),p);<BR>
&nbsp;&nbsp;&nbsp;p = p.add(1,0);<BR>
&nbsp;&nbsp;}<BR>
&nbsp;}<BR>
&nbsp;public void describe() {<BR>
&nbsp;&nbsp;System.out.println(&quot;CGText &quot;+location.toString()+&quot;
&quot;+text);<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
<TT>CGText</TT> declares one variable, <TT>text</TT>, that is
used to store a string of text to be displayed on the grid. It
has a single constructor that takes two arguments: a <TT>Point</TT>
value that identifies the point on the grid where the text is
to be displayed and a <TT>String</TT> value that specifies this
text. Because <TT>drawCharacter</TT> is not displayed, it is initialized
to a space. <TT>CGText</TT> implements the two abstract methods
required of it. The <TT>display()</TT> method displays the text
variable at the location specified by the location variable. The
<TT>describe()</TT> method displays the location of the point
and its text to the console window.
<H3><A NAME="TheKeyboardInputClass"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">KeyboardInput</FONT></B></TT><B><FONT SIZE=4>
Class</FONT></B></A></H3>
<P>
The <TT>KeyboardInput</TT> class extends the <TT>DataInputStream</TT>
class of the Java API to provide a set of common simple methods
for getting keyboard input from the user. (See Listing 5.9.)
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 5.9. The </B><TT><B><FONT FACE="Courier New">KeyboardInput</FONT></B></TT><B>
class source code.</B>
<P>
<TT>package jdg.ch05;<BR>
<BR>
<FONT FACE="Courier New">import java.lang.System;<BR>
import java.io.DataInputStream;<BR>
import java.io.InputStream;<BR>
import java.io.IOException;<BR>
<BR>
public class KeyboardInput extends DataInputStream {<BR>
&nbsp;public KeyboardInput(InputStream inStream) {<BR>
&nbsp;&nbsp;super(inStream);<BR>
&nbsp;}<BR>
&nbsp;public char getChar() throws IOException {<BR>
&nbsp;&nbsp;String line = readLine();<BR>
&nbsp;&nbsp;if(line.length()==0) return ' ';<BR>
&nbsp;&nbsp;return line.charAt(0);<BR>
&nbsp;}<BR>
&nbsp;public String getText() throws IOException {<BR>
&nbsp;&nbsp;String line = readLine();<BR>
&nbsp;&nbsp;return line;<BR>
&nbsp;}<BR>
&nbsp;public int getInt() throws IOException {<BR>
&nbsp;&nbsp;String line = readLine();<BR>
&nbsp;&nbsp;Integer i = new Integer(line);<BR>
&nbsp;&nbsp;return i.intValue();<BR>
&nbsp;}<BR>
&nbsp;public Point getPoint() throws IOException {<BR>
&nbsp;&nbsp;System.out.print(&quot;  x-coordinate: &quot;);<BR>
&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;int x = getInt();<BR>
&nbsp;&nbsp;System.out.print(&quot;  y-coordinate: &quot;);<BR>
&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;int y = getInt();<BR>
&nbsp;&nbsp;return new Point(x,y);<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
<TT>KeyboardInput</TT> has a single constructor that takes an
object of class <TT>InputStream</TT> as a parameter. This object
should be <TT>java.lang.System.in</TT>, but may be mapped to other
input streams if necessary. The <TT>KeyboardInput</TT> constructor
passes the <TT>InputStream</TT> object to <TT>DataInputStream</TT>'s
constructor using the <TT>super()</TT> constructor call.
<P>
<TT>KeyboardInput</TT> defines four access methods that get objects
of type <TT>char</TT>, <TT>String</TT>, <TT>int</TT>, and <TT>Point</TT>
from the user. The <TT>getChar()</TT> method uses the <TT>readLine()</TT>
method of <TT>DataInputStream</TT> to read a line of data entered
by the user. If the line is blank, it returns the space character;
otherwise it returns the first character in the input line. The
<TT>getText()</TT> method simply returns the entire line entered
by the user, whether it is blank or not. The <TT>getInt()</TT>
method works the same way as <TT>getChar()</TT> except that it
uses a constructor of the <TT>Integer</TT> class to construct
an object of class <TT>Integer</TT> directly from the input line.
It then converts the <TT>Integer</TT> object to an object of type
<TT>int</TT> before it returns it using the <TT>return</TT> statement.
The <TT>Integer</TT> class is an example of a class that wraps
the primitive type <TT>int</TT>. Class wrappers are covered in
<A HREF="ch12.htm" >Chapter 12</A>, &quot;Portable Software and
the <TT>java.lang</TT> Package.&quot;
<P>
The <TT>getPoint()</TT> method interacts with the user to get
the x- and y-coordinates of a point. It then constructs an object
of class <TT>Point</TT> that it uses as its return value. The
<TT>getPoint()</TT> method uses the <TT>getInt()</TT> method to
get the values of the x- and y-coordinates.
<H3><A NAME="TheCDrawAppProgram"><B>The </B><TT><B><FONT SIZE=4 FACE="Courier New">CDrawApp</FONT></B></TT><B><FONT SIZE=4>
Program</FONT></B></A></H3>
<P>
You're finally ready to use all the classes that you've developed
in this chapter to build the <TT>CDrawApp</TT> program. Make sure
that you've compiled all the classes that have been introduced.
Your <TT>c:\java\jdg\ch05</TT> directory should have compiled
classes for <TT>Point.java</TT>, <TT>CGrid.java</TT>, <TT>CGObject.java</TT>,
<TT>PrintCGrid.java</TT>, <TT>BorderedPrintCGrid.java</TT>, <TT>CGPoint.java</TT>,
<TT>CGBox.java</TT>, <TT>CGText.java</TT>, and <TT>KeyboardInput.java</TT>.
The <TT>CDrawApp.java</TT> file is shown in Listing 5.10.
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 5.10. The </B><TT><B><FONT FACE="Courier New">CDrawApp</FONT></B></TT><B>
and </B><TT><B><FONT FACE="Courier New">CDraw</FONT></B></TT><B>
classes.</B>
<P>
<TT>package jdg.ch05;<BR>
<BR>
<FONT FACE="Courier New">import java.lang.System;<BR>
import java.io.DataInputStream;<BR>
import java.io.IOException;<BR>
<BR>
class CDrawApp {<BR>
&nbsp;public static void main(String args[]) throws IOException
{<BR>
&nbsp;&nbsp;CDraw program = new CDraw();<BR>
&nbsp;&nbsp;program.run();<BR>
&nbsp;}<BR>
}<BR>
<BR>
class CDraw {<BR>
&nbsp;// Variable declarations<BR>
&nbsp;static KeyboardInput kbd = new KeyboardInput(System.in);
<BR>
&nbsp;BorderedPrintCGrid grid;<BR>
<BR>
&nbsp;// Method declarations<BR>
&nbsp;CDraw() {<BR>
&nbsp;&nbsp;grid = new BorderedPrintCGrid();<BR>
&nbsp;}<BR>
&nbsp;void run() throws IOException {<BR>
&nbsp;&nbsp;boolean finished = false;<BR>
&nbsp;&nbsp;do {<BR>
&nbsp;&nbsp;&nbsp;char command = getCommand();<BR>
&nbsp;&nbsp;&nbsp;switch(command){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case 'P':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addPoint();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case 'B':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addBox();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case 'T':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addText();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case 'U':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid.deleteLastObject();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case 'C':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid.clearGrid();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case 'S':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid.show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;case 'X':<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finished = true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;default:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println();<BR>
&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;} while (!finished);<BR>
&nbsp;}<BR>
&nbsp;char getCommand() throws IOException {<BR>
&nbsp;&nbsp;System.out.println(&quot;CDrawApp    P - Add a Point
  U - Undo Last Add&quot;);<BR>
&nbsp;&nbsp;System.out.print(&quot;Main Menu   B - Add a Box 
   C - Clear Grid&quot;);<BR>
&nbsp;&nbsp;System.out.println(&quot;      X - Exit CDrawApp&quot;);
<BR>
&nbsp;&nbsp;System.out.print(&quot;            T - Add Text  
   S - Show Grid&quot;);<BR>
&nbsp;&nbsp;System.out.print(&quot;       Enter command: &quot;);
<BR>
&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;return Character.toUpperCase(kbd.getChar());<BR>
&nbsp;}<BR>
&nbsp;void addPoint() throws IOException {<BR>
&nbsp;&nbsp;System.out.println(&quot;Add Point Menu&quot;);<BR>
&nbsp;&nbsp;System.out.println(&quot; Location:&quot;);<BR>
&nbsp;&nbsp;Point p = kbd.getPoint();<BR>
&nbsp;&nbsp;System.out.print(&quot; Character: &quot;);<BR>
&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;char ch = kbd.getChar();<BR>
&nbsp;&nbsp;if(ch==' ') ch = '+';<BR>
&nbsp;&nbsp;CGPoint cgp = new CGPoint(p,ch);<BR>
&nbsp;&nbsp;cgp.addToGrid(grid);<BR>
&nbsp;}<BR>
&nbsp;void addBox() throws IOException {<BR>
&nbsp;&nbsp;System.out.println(&quot;Add Box Menu&quot;);<BR>
&nbsp;&nbsp;System.out.println(&quot; Upper Left Corner:&quot;);
<BR>
&nbsp;&nbsp;Point ul = kbd.getPoint();<BR>
&nbsp;&nbsp;System.out.println(&quot; Lower Right Corner:&quot;);
<BR>
&nbsp;&nbsp;Point lr = kbd.getPoint();<BR>
&nbsp;&nbsp;System.out.print(&quot; Character: &quot;);<BR>
&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;char ch = kbd.getChar();<BR>
&nbsp;&nbsp;if(ch==' ') ch = '#';<BR>
&nbsp;&nbsp;CGBox box = new CGBox(ul,lr,ch);<BR>
&nbsp;&nbsp;box.addToGrid(grid);<BR>
&nbsp;}<BR>
&nbsp;void addText() throws IOException {<BR>
&nbsp;&nbsp;System.out.println(&quot;Add Text Menu&quot;);<BR>
&nbsp;&nbsp;System.out.println(&quot; Location:&quot;);<BR>
&nbsp;&nbsp;Point p = kbd.getPoint();<BR>
&nbsp;&nbsp;System.out.print(&quot; Text: &quot;);<BR>
&nbsp;&nbsp;System.out.flush();<BR>
&nbsp;&nbsp;String text = kbd.getText();<BR>
&nbsp;&nbsp;CGText cgt = new CGText(p,text);<BR>
&nbsp;&nbsp;cgt.addToGrid(grid);<BR>
&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The declaration of the <TT>CDrawApp</TT> class is very small.
It consists of a <TT>main()</TT> method that creates an object
of class <TT>CDraw</TT> and then invokes the <TT>run()</TT> method
for that object. A separate <TT>CDraw</TT> object is created because
the <TT>main()</TT> method is <TT>static</TT>. <TT>static</TT>
methods are like <TT>static</TT> variables. They apply to the
class as a whole and not to objects that are individual instances
of a class. <TT>static</TT> methods can only access variables
that they create or that are <TT>static</TT> variables of the
class. By creating the <TT>CDraw</TT> class, you are able to avoid
any limitations posed by <TT>static</TT>'s <TT>main()</TT> method.
<P>
The <TT>CDraw</TT> class declares two variables: <TT>kbd</TT>
and <TT>grid</TT>. The <TT>kbd</TT> variable is used to get input
from the user. The <TT>grid</TT> variable is used to display objects
such as points, boxes, and text. The <TT>kbd</TT> variable is
created as a <TT>static</TT> variable of class <TT>KeyboardInput</TT>.
It is initialized using the <TT>KeyboardInput()</TT> constructor
and the predefined <TT>java.lang.System.in</TT> input stream.
A variable initializer is used to create and initialize the value
of <TT>kbd</TT>. Other initializers, called <I>static initializers</I>,
are also supported by Java. Static initializers allow blocks of
statements to be executed during class initialization. They are
covered in <A HREF="ch11.htm" >Chapter 11</A>, &quot;Language
Summary.&quot;
<P>
<TT>CDraw</TT> has a single constructor that creates an object
that is a new instance of <TT>BorderedPrintCGrid</TT> and assigns
it to the <TT>grid</TT> variable. The <TT>BorderedPrintCGrid()</TT>
constructor creates a default grid 75 characters wide and 20 characters
high. The default border character is an asterisk (<TT>*</TT>).
<P>
<TT>CDraw</TT> has five access methods. The <TT>run()</TT> method
implements the core processing of the <TT>CDrawApp</TT> program.
It uses a <TT>do</TT> statement that repeatedly processes user
keyboard commands. It invokes the <TT>getCommand()</TT> method
to display a menu to the user and retrieve the user's command
selection. It then uses a <TT>switch</TT> statement to process
the command. It invokes the <TT>addPoint()</TT>, <TT>addBox()</TT>,
and <TT>addText()</TT> methods to add points, boxes, and text
to the grid. It invokes the <TT>deleteLastObject()</TT> and <TT>clearGrid()</TT>
methods of the <TT>PrintCGrid</TT> class to remove the last object
added to the grid or to completely clear the grid of all objects.
The <TT>show()</TT> method of <TT>PrintCGrid</TT> is used to draw
and display the grid. If the user enters a command line beginning
with <TT>X</TT> or <TT>x</TT>, the <TT>boolean</TT> variable <TT>finished</TT>
is set to <TT>true</TT>, the <TT>do</TT> statement finishes, and
the <TT>CDrawApp</TT> program terminates.
<P>
The <TT>getCommand()</TT> method displays a menu to the user and
uses the <TT>getChar()</TT> method of the <TT>KeyboardInput</TT>
class to get a character command from the user. The <TT>static</TT>
<TT>toUpperCase()</TT> method of the <TT>Character</TT> class
is used to convert the character returned by <TT>getChar()</TT>
to uppercase.
<P>
The <TT>addPoint()</TT> method queries the user to enter the location
of a point and the character to be used to displayed at that location.
It uses the <TT>getPoint()</TT> and <TT>getChar()</TT> methods
of the <TT>KeyboardInput</TT> class. If a user enters a space
for the display character, <TT>addPoint()</TT> uses the plus (<TT>+</TT>)
character as a default. It uses the data obtained from the user
to construct an object of class <TT>CGPoint</TT> and adds the
object to <TT>grid</TT> using the <TT>addToGrid()</TT> method
of class <TT>CGObject</TT> that is inherited by class <TT>CGPoint</TT>.
<P>
The <TT>addBox()</TT> method is similar to the <TT>addPoint()</TT>
method except that it must obtain two points from the user-the
upper-left and lower-right corners of a rectangle. It also obtains
a box display character from the user, the default value of which
is the pound (<TT>#</TT>) sign. An object of class <TT>CGBox</TT>
is constructed from the user-supplied information and added to
the grid using the <TT>CGObject</TT> <TT>addToGrid()</TT> method.
<P>
The final method of <TT>CDraw</TT>, <TT>addText()</TT>, retrieves
a location and a text string from the user and uses this information
to create an object of class <TT>CGText</TT>. The new object is
then added to the grid in the same manner as the <TT>CGPoint</TT>
and <TT>CGBox</TT> objects.
<H3><A NAME="RunningCDrawApp"><B>Running </B><TT><B><FONT SIZE=4 FACE="Courier New">CDrawApp</FONT></B></TT></A>
</H3>
<P>
Assuming that you have compiled all the classes introduced in
this chapter, go ahead and compile <TT>CDrawApp</TT>. You can
then run <TT>CDrawApp</TT> using the following command line:
<BLOCKQUOTE>
<TT>C:\java\jdg\ch05&gt;java jdg.ch05.CDrawApp</TT>
</BLOCKQUOTE>
<P>
<TT>CDrawApp</TT> begins by displaying the following menu:
<BLOCKQUOTE>
<TT>CDrawApp&nbsp;&nbsp;&nbsp;&nbsp;P - Add a Point&nbsp;&nbsp;&nbsp;U
- Undo Last Add<BR>
<FONT FACE="Courier New">Main Menu&nbsp;&nbsp;&nbsp;B - Add a
Box&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C - Clear Grid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X
- Exit CDrawApp<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T
- Add Text&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S - Show Grid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enter
command:</FONT></TT>
</BLOCKQUOTE>
<P>
This menu provides you with seven command options: <TT>P</TT>,
<TT>B</TT>, <TT>T</TT>, <TT>U</TT>, <TT>C</TT>, <TT>S</TT>, and
<TT>X</TT>. Entering <TT>X</TT> will cause <TT>CDrawApp</TT> to
terminate. You don't want to do this yet. Entering <TT>S</TT>
will cause <TT>CDrawApp</TT> to display the character grid. Go
ahead and enter <TT>S</TT>. Your screen should look like this:
<BLOCKQUOTE>
<TT>***************************************************************************
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
***************************************************************************</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>CDrawApp&nbsp;&nbsp;&nbsp;&nbsp;P - Add a Point&nbsp;&nbsp;&nbsp;U
- Undo Last Add<BR>
<FONT FACE="Courier New">Main Menu&nbsp;&nbsp;&nbsp;B - Add a
Box&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C - Clear Grid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X
- Exit CDrawApp<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T
- Add Text&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S - Show Grid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enter
command:</FONT></TT>
</BLOCKQUOTE>
<P>
<TT>CDrawApp</TT> displays a blank bordered grid using the <TT>show()</TT>
method of the <TT>PrintCGrid</TT> class. You should be able to
trace program execution up to this point by examining the source
code files of the classes used in this chapter. The <TT>CDraw</TT>
<TT>run()</TT> and <TT>getCommand()</TT> methods perform most
of the user interface processing.
<P>
You can add a point to the grid by entering a <TT>P</TT> command.
You will get the following display:
<BLOCKQUOTE>
<TT>Add Point Menu<BR>
<FONT FACE="Courier New">&nbsp;Location:<BR>
&nbsp;&nbsp;x-coordinate:</FONT></TT>
</BLOCKQUOTE>
<P>
The Add Point Menu prompt is displayed by the <TT>addPoint()</TT>
method of the <TT>CDraw</TT> class. It prompts you to enter the
x-coordinate of a grid point. The upper-left corner of the grid
is 0,0 and the lower-right corner of the grid is 74,19, where
74 is the maximum x-coordinate and 19 is the maximum y-coordinate.
Enter <TT>35</TT> for the x-coordinate. The Add Point Menu then
prompts you to enter the y-coordinate:
<BLOCKQUOTE>
<TT>Add Point Menu<BR>
<FONT FACE="Courier New">&nbsp;Location:<BR>
&nbsp;&nbsp;x-coordinate: 35<BR>
&nbsp;&nbsp;y-coordinate:</FONT></TT>
</BLOCKQUOTE>
<P>
Enter <TT>10</TT> for the y-coordinate. You are prompted to enter
the character to be displayed at location 35,10. Enter <TT>x</TT>
to finish adding a point:
<BLOCKQUOTE>
<TT>Add Point Menu<BR>
<FONT FACE="Courier New">&nbsp;Location:<BR>
&nbsp;&nbsp;x-coordinate: 35<BR>
&nbsp;&nbsp;y-coordinate: 10<BR>
&nbsp;Character: x<BR>
</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>CDrawApp&nbsp;&nbsp;&nbsp;&nbsp;P - Add a Point&nbsp;&nbsp;&nbsp;U
- Undo Last Add<BR>
<FONT FACE="Courier New">Main Menu&nbsp;&nbsp;&nbsp;B - Add a
Box&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C - Clear Grid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X
- Exit CDrawApp<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T
- Add Text&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S - Show Grid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enter
command:</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>CDrawApp</TT> main menu is displayed again. To verify
that the point you just entered was, in fact, added to the grid,
redisplay the grid by entering <TT>S</TT>. You will see the <TT>x</TT>
in the middle of the grid:
<BLOCKQUOTE>
<TT>***************************************************************************
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
***************************************************************************</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>CDrawApp&nbsp;&nbsp;&nbsp;&nbsp;P - Add a Point&nbsp;&nbsp;&nbsp;U
- Undo Last Add<BR>
<FONT FACE="Courier New">Main Menu&nbsp;&nbsp;&nbsp;B - Add a
Box&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C - Clear Grid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X
- Exit CDrawApp<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T
- Add Text&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S - Show Grid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enter
command:</FONT></TT>
</BLOCKQUOTE>
<P>
Now use the <TT>B</TT> command to enter a box:
<BLOCKQUOTE>
<TT>CDrawApp&nbsp;&nbsp;&nbsp;&nbsp;P - Add a Point&nbsp;&nbsp;&nbsp;U
- Undo Last Add<BR>
<FONT FACE="Courier New">Main Menu&nbsp;&nbsp;&nbsp;B - Add a
Box&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C - Clear Grid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X
- Exit CDrawApp<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T
- Add Text&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S - Show Grid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enter
command: b</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>Add Box Menu<BR>
<FONT FACE="Courier New">&nbsp;Upper Left Corner:<BR>
&nbsp;&nbsp;x-coordinate:</FONT></TT>
</BLOCKQUOTE>
<P>
You will have to enter two points and a character to specify a
box. Enter <TT>5</TT> for the x-coordinate of the upper-left corner
and <TT>1</TT> for its y-coordinate:
<BLOCKQUOTE>
<TT>Add Box Menu<BR>
<FONT FACE="Courier New">&nbsp;Upper Left Corner:<BR>
&nbsp;&nbsp;x-coordinate: 5<BR>
&nbsp;&nbsp;y-coordinate: 1<BR>
&nbsp;Lower Right Corner:<BR>
&nbsp;&nbsp;x-coordinate:</FONT></TT>
</BLOCKQUOTE>
<P>
Enter <TT>70</TT> for the x-coordinate of the lower-right corner
and <TT>18</TT> for its y-coordinate:
<BLOCKQUOTE>
<TT>Add Box Menu<BR>
<FONT FACE="Courier New">&nbsp;Upper Left Corner:<BR>
&nbsp;&nbsp;x-coordinate: 5<BR>
&nbsp;&nbsp;y-coordinate: 1<BR>
&nbsp;Lower Right Corner:<BR>
&nbsp;&nbsp;x-coordinate: 70<BR>
&nbsp;&nbsp;y-coordinate: 18<BR>
&nbsp;Character:</FONT></TT>
</BLOCKQUOTE>
<P>
Finally, set the box character to the equals sign (<TT>=</TT>):
<BLOCKQUOTE>
<TT>Add Box Menu<BR>
<FONT FACE="Courier New">&nbsp;Upper Left Corner:<BR>
&nbsp;&nbsp;x-coordinate: 5<BR>
&nbsp;&nbsp;y-coordinate: 1<BR>
&nbsp;Lower Right Corner:<BR>
&nbsp;&nbsp;x-coordinate: 70<BR>
&nbsp;&nbsp;y-coordinate: 18<BR>
&nbsp;Character: =<BR>
</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>CDrawApp&nbsp;&nbsp;&nbsp;&nbsp;P - Add a Point&nbsp;&nbsp;&nbsp;U
- Undo Last Add<BR>
<FONT FACE="Courier New">Main Menu&nbsp;&nbsp;&nbsp;B - Add a
Box&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C - Clear Grid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X
- Exit CDrawApp<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T
- Add Text&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S - Show Grid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enter
command:</FONT></TT>
</BLOCKQUOTE>
<P>
Go ahead and redisplay the grid using the <TT>ShowGrid</TT> command:
<BLOCKQUOTE>
<TT>***************************************************************************
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==================================================================&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==================================================================&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
***************************************************************************</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>CDrawApp&nbsp;&nbsp;&nbsp;&nbsp;P - Add a Point&nbsp;&nbsp;&nbsp;U
- Undo Last Add<BR>
<FONT FACE="Courier New">Main Menu&nbsp;&nbsp;&nbsp;B - Add a
Box&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C - Clear Grid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X
- Exit CDrawApp<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T
- Add Text&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S - Show Grid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enter
command:</FONT></TT>
</BLOCKQUOTE>
<P>
Notice how the box was added to the grid. Now, let's add text
to the grid. Enter <TT>T</TT> to bring up the Add Text Menu prompt:
<BLOCKQUOTE>
<TT>Add Text Menu<BR>
<FONT FACE="Courier New">&nbsp;Location:<BR>
&nbsp;&nbsp;x-coordinate:</FONT></TT>
</BLOCKQUOTE>
<P>
Set the x-coordinate to <TT>36</TT> and the y-coordinate to <TT>11</TT>:
<BLOCKQUOTE>
<TT>Add Text Menu<BR>
<FONT FACE="Courier New">&nbsp;Location:<BR>
&nbsp;&nbsp;x-coordinate: 36<BR>
&nbsp;&nbsp;y-coordinate: 11<BR>
&nbsp;Text:</FONT></TT>
</BLOCKQUOTE>
<P>
Enter <TT>I love Java.</TT> at the <TT>Text:</TT> prompt:
<BLOCKQUOTE>
<TT>Add Text Menu<BR>
<FONT FACE="Courier New">&nbsp;Location:<BR>
&nbsp;&nbsp;x-coordinate: 36<BR>
&nbsp;&nbsp;y-coordinate: 11<BR>
&nbsp;Text: I love Java.</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT>CDrawApp</TT> main menu is displayed. Use the <TT>Show
Grid</TT> command to redisplay the grid:
<BLOCKQUOTE>
<TT>***************************************************************************
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==================================================================&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;I&nbsp;love&nbsp;Java. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==================================================================&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
***************************************************************************</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>CDrawApp&nbsp;&nbsp;&nbsp;&nbsp;P - Add a Point&nbsp;&nbsp;&nbsp;U
- Undo Last Add<BR>
<FONT FACE="Courier New">Main Menu&nbsp;&nbsp;&nbsp;B - Add a
Box&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C - Clear Grid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X
- Exit CDrawApp<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T
- Add Text&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S - Show Grid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enter
command:</FONT></TT>
</BLOCKQUOTE>
<P>
Enter <TT>U</TT> to invoke the <TT>Undo Last Add </TT>command.
This results in the text being deleted from the display. Verify
this by redisplaying the grid. Then clear the grid by entering
<TT>C</TT>. Once again, use the <TT>Show Grid</TT> command to
verify that the command worked correctly.
<P>
You have now covered all the commands of <TT>CDrawApp</TT>. Enter
<TT>X</TT> to exit the program.
<H3><A NAME="CDrawAppsImplementationofObjectOrie"><TT><B><FONT SIZE=4 FACE="Courier New">CDrawApp</FONT></B></TT><B><FONT SIZE=4>'s
Implementation of Object-Oriented Concepts</FONT></B></A></H3>
<P>
The purpose of <TT>CDrawApp</TT> isn't to bolster your graphics
production capabilities. It is used as a comprehensive example
of how Java classes, objects, and methods can be used to implement
the object-oriented programming concepts studied earlier in the
chapter.
<P>
In building <TT>CDrawApp</TT>, you created 11 classes, 6 of which
extended classes other than <TT>Object</TT>. The class hierarchy
for the <TT>CDrawApp</TT> program is shown in Figure 5.4.
<P>
<A HREF="f5-4.gif"><B>Figure 5.4 : </B><I>The <TTCDrawApp</TT> class hierarchy.</I></A>
<P>
The development of the <TT>CGrid</TT>, <TT>PrintCGrid</TT>, and
<TT>BorderedPrintCGrid</TT> classes shows how  subclasses extend
the data and methods inherited from their parents to successively
add more features to their branch of the class hierarchy. <TT>CGrid</TT>
provides the basic data and methods to implement character grid
objects. <TT>PrintCGrid</TT> adds the capability to add and remove
objects from the grid, and to display these objects on the console
window. <TT>BorderedPrintCGrid</TT> uses the methods provided
by <TT>CGrid</TT> and <TT>PrintCGrid</TT> to develop additional
capabilities for displaying a bordered grid.
<P>
The <TT>CGObject</TT>, <TT>CGPoint</TT>, <TT>CGBox</TT>, and <TT>CGText</TT>
classes are examples of how <TT>abstract</TT> classes are used
to specify the behavior of their subclasses. <TT>CGObject</TT>
provides the <TT>addToGrid()</TT> method, which is inherited by
all of its subclasses. It defines the <TT>display()</TT> and <TT>describe()</TT>
methods as  <TT>abstract</TT>, requiring all subclasses to implement
these methods in a manner that is applicable to the subclass.
<TT>CGPoint</TT>, <TT>CGBox</TT>, and <TT>CGText</TT> define specific
types of graphical objects that fit within the framework established
by <TT>CGObject</TT>.
<P>
The <TT>drawGrid()</TT> method of <TT>PrintCGrid</TT> utilizes
the <TT>CGObject</TT> class as an abstraction for dealing with
objects in the <TT>displayList[]</TT>. The dynamic binding and
polymorphic capabilities of the Java compiler and runtime system
enable <TT>drawGrid()</TT> to interact with objects of subclasses
of <TT>CGObject</TT> without specific knowledge of their class
type.
<P>
The grid object of class <TT>BorderedPrintCGrid</TT> that is used
in the <TT>CDraw</TT> class provides an example of advanced polymorphic
behavior. When <TT>grid</TT>'s <TT>show()</TT> method is invoked,
the <TT>show()</TT> method of the <TT>PrintCGrid</TT> class is
used. The <TT>show()</TT> method invokes the <TT>PrintCGrid</TT>
<TT>drawGrid()</TT> method to cause each object in the <TT>displayList[]</TT>
to display itself on the grid. It then invokes the <TT>displayGrid()</TT>
method to display the grid. <TT>BorderedPrintCGrid</TT> overrides
the <TT>displayGrid()</TT> method of <TT>PrintCGrid</TT>. Which
<TT>displayGrid()</TT> method does <TT>show()</TT> invoke-that
of <TT>PrintCGrid</TT> or <TT>BorderedPrintCGrid</TT>? The <TT>show()</TT>
method is able to discern from runtime information that it is
being invoked for an object of class <TT>BorderedPrintCGrid</TT>,
so it uses the <TT>BorderedPrintCGrid</TT> <TT>displayGrid()</TT>
method. This method checks to see if the <TT>useBorder</TT> variable
is <TT>true</TT>, and if so, displays a grid with a border. However,
if <TT>useBorder</TT> is <TT>false</TT>, it invokes the <TT>displayGrid()</TT>
method of <TT>PrintCGrid</TT>.
<P>
The <TT>Point</TT> class is an example of encapsulation. It has
a modular, well-defined interface and hides the details of its
implementation from other classes. The x- and y-coordinates of
a point are inaccessible to methods outside of the <TT>Point</TT>
class. Even the methods within <TT>Point</TT> use the <TT>x()</TT>
and <TT>y()</TT> methods to access these values. The <TT>Point</TT>
class, because of this encapsulation, can be reused in many other
applications that use two-dimensional grids.
<P>
The <TT>KeyboardInput</TT> class shows how classes from the Java
API may be extended by user-defined subclasses. It uses the <TT>readLine()</TT>
method from <TT>DataInputStream</TT>, the <TT>charAt()</TT> method
from the <TT>String</TT> class, and the <TT>intValue()</TT> method
of the <TT>Integer</TT> class to provide convenient methods for
accessing user input lines.
<P>
The <TT>CDraw</TT> and <TT>CDrawApp</TT> classes illustrate the
principle of object composition. They assemble the other classes
defined in this chapter into a short, two-page program that uses
all of the features provided by these classes.
<H2><A NAME="Summary"><B><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></B></A>
</H2>
<P>
In this chapter you have learned some general object-oriented
programming concepts and how these concepts apply to Java programs.
You have learned how to use classes to develop a sample Java program
that illustrates the fundamental elements of Java object-oriented
programming.
<P>
The classes you developed in this chapter will be reused in <A HREF="ch6.htm" >Chapters 6</A>
and <A HREF="ch7.htm" >7</A>. In <A HREF="ch6.htm" >Chapter 6</A>
you'll learn how to use interfaces to support features of multiple
inheritance. In <A HREF="ch7.htm" >Chapter 7</A> you'll learn
how to use exceptions to respond to errors and other anomalies
during programm execution.
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



