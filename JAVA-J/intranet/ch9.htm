<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
<H1><FONT COLOR=#FF0000>Chapter 9</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Logging Classes</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>



<UL>
<LI><A HREF="#Introduction" >Introduction</A>
<LI><A HREF="#TheLog" >The Log</A>
<UL>
<LI><A HREF="#TheLogEntry" >The Log Entry</A>
<LI><A HREF="#TheLogInterface" >The Log Interface</A>
</UL>
<LI><A HREF="#TheLoggingClasses" >The Logging Classes</A>
<UL>
<LI><A HREF="#DiskLog" >DiskLog</A>
<LI><A HREF="#ScreenLog" >ScreenLog</A>
</UL>
<LI><A HREF="#ASampleLoggingProgram" >A Sample Logging Program</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
<I><B><FONT SIZE=5 COLOR=#000000>log \'log\ n:</FONT></B><FONT SIZE=5 COLOR=#000000>
any record of performance</FONT></I>
<H2><A NAME="Introduction"><FONT SIZE=5 COLOR=#FF0000>Introduction</FONT></A>
</H2>
<P>
The output of your programs is important to you, especially if
there are errors. The standard Java outputting mechanism is just
fine for UNIX; it can be captured and redirected to files easily.
But for Windows and Macintosh, it doesn't cut the mustard.
<P>
The biggest problem with output on the Windows and Macintosh platforms
is that once your application has finished running, the output
disappears. This is very annoying and does not help you in any
way. Your intranet applications require much better log facilities
than are available. You'll need nice logs that are easy to search.
These logs are important for tracking errors and finding problems
with your intranet and the applications that run on it.
<P>
This chapter will present two classes that implement a log file
strategy that can be used in all of your applications. This strategy
includes a common log file format and centralized log location.
Finally, you'll take this log strategy even farther and apply
it to Java's own output mechanism. This can be useful for Java
applets or for running your applications on diskless workstations.
<H2><A NAME="TheLog"><FONT SIZE=5 COLOR=#FF0000>The Log</FONT></A>
</H2>
<P>
Logs and logging have been around since prehistoric times. The
drawings left on cave walls by early man are logs of his day.
After that, logs were used to record daily life in many ancient
civilizations. Then, logs were used to record the voyages of sea
captains. The versatility of the log is unbelievable, so why not
utilize some of its charm in your own software?
<P>
You should, and you can. But writing log files with Java can be
a hassle. If every time you create an application you have to
perform the same initialization for logging, you'll soon not use
your log for quick-and-dirty programs. But by making it simple,
and providing an interface to the logging mechanism that is easy
to use, logging becomes automatic and painless.
<P>
But what should you put into your log? How can you make it easy
to read and search? Read on.
<H3><A NAME="TheLogEntry">The Log Entry</A></H3>
<P>
A log entry is nothing more than a line of text documenting an
event. The event might be a debug message or perhaps an error.
It really doesn't matter what you're documenting because it is
probably important to you. But your only real log choice with
Java is writing information to the screen.
<P>
But writing information to the screen in Java is not the best
solution for logs. The main reason for this is that if you are
running from a window, the output disappears upon completion of
your program. This is where the log classes come in. If you can
use these classes to write your output, it will not disappear
or be lost. It will be stored forever in a disk file.
<P>
The classes write log entries in a standard format. The format
is as follows:
<BLOCKQUOTE>
<TT>appName|date|user|level|text</TT>
</BLOCKQUOTE>
<P>
where
<BLOCKQUOTE>
<TT><I>appName</FONT></I></TT> is the name
of the application that created the entry.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>date</FONT></I></TT> is the date of
the entry.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>user</FONT></I></TT> is the user running
the application.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>level</FONT></I></TT> is an indicator
of the severity of the log entry.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>text</FONT></I></TT> is the text of
the log entry.
</BLOCKQUOTE>
<P>
Listing 9.1 lists a sample log file output.
<HR>
<BLOCKQUOTE>
<B>Listing 9.1. Sample log file entries.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>Employee|960609|munster|I|Application
[Employee] started at Sun Jun 9 11:22:07<BR>
Employee|960609|munster|I|Application [Employee] ended at Sun
Jun 9 11:22:18<BR>
Employee|960609|munster|I|Application [Employee] started at Sun
Jun 9 12:24:57<BR>
Employee|960609|munster|I|Application [Employee] ended at Sun
Jun 9 12:25:15</TT>
</BLOCKQUOTE>
<HR>
<P>
Each portion of the log entry is separated by the pipe character
(<TT>|</TT>). This is a standard UNIX
delimiter. It doesn't appear often in normal text and is easily
spotted.
<P>
Nothing else in the entry needs explaining except the level indicator.
This indicator allows you to place an importance level on your
log entries. Afterwards, you can filter out the levels that you
are interested in.
<P>
The levels and the interface to the logging mechanism are defined
by the <TT>Log</TT> interface.
<H3><A NAME="TheLogInterface">The <TT><FONT SIZE=4 FACE="Courier">Log</TT></FONT><FONT SIZE=4>
Interface</FONT></A></H3>
<P>
The <TT>Log</TT> interface provides
the template or pattern for all logging objects. There are two
important parts to the <TT>Log</TT>
interface. The first is the level indicators.
<H4>Log Level Indicators</H4>
<P>
There are five defined log level indicators. They are as follows:
<UL>
<LI><TT>D</TT>: Debug
<LI><TT>I</TT>: Informational
<LI><TT>W</TT>: Warning
<LI><TT>E</TT>: Error
<LI><TT>F</TT>: Fatal
</UL>
<P>
Each indicates the level of importance, or severity, of the log
entry it is applied to. Debug is, of course, the least severe
of all entries. Fatal is the most severe. The rest are all in
between. As you code, choose the severity level that fits the
situation.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
The log levels mean absolutely nothing to the program. They are simply a way for you, the programmer, to identify the severity of an event.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The severity levels are defined as <TT>char</TT>s
and are declared <TT>static</TT> <TT>final</TT>.
Here is the definition of the log level indicators as found in
the <TT>Log</TT> interface:
<BLOCKQUOTE>
<TT>public static final char&nbsp;&nbsp;&nbsp;&nbsp;
DEBUG = 'D';<BR>
public static final char&nbsp;&nbsp;&nbsp;&nbsp; INFO = 'I';<BR>
public static final char&nbsp;&nbsp;&nbsp;&nbsp; WARNING = 'W';
<BR>
public static final char&nbsp;&nbsp;&nbsp;&nbsp; ERROR = 'E';
<BR>
public static final char&nbsp;&nbsp;&nbsp;&nbsp; FATAL = 'F';</TT>
</BLOCKQUOTE>
<P>
The uppercased word is the constant value that you use when indicating
log levels. These levels are used by passing it along to the logging
method. The logging method will then store it into the log file.
The logging method is the second part of the <TT>Log</TT>
interface.
<H4>The <TT>log</TT> Method</H4>
<P>
The <TT>Log</TT> interface defines
a single method called <TT>log</TT>.
It is as follows:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* log&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;log( char logLevel, String logEntry )
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;throws IOException;</TT>
</BLOCKQUOTE>
<P>
This method must be implemented by users of this interface. The
<TT>log</TT> method accepts, as arguments,
a log level and a log entry. The rest of the log implementation
is up to the implementor of this interface. I've chosen to implement
this method to produce log files with entries such as the ones
shown in Listing 9.1.
<H2><A NAME="TheLoggingClasses"><FONT SIZE=5 COLOR=#FF0000>The
Logging Classes</FONT></A></H2>
<P>
There are two classes that provide standard logging, as described
earlier in this chapter. They are <TT>DiskLog</TT>
and <TT>ScreenLog</TT>. <TT>DiskLog</TT>
writes all log entries to a disk file. The <TT>ScreenLog</TT>
writes all the log entries to the screen or a window. The <TT>ScreenLog</TT>
is useful in cases where perhaps a <TT>DiskLog</TT>
cannot be created, or is not needed.
<P>
When a <TT>DiskLog</TT> object is
created, it opens the log file and moves to the end of the file,
never overwriting what is currently stored inside. This gives
you a persistent log file. It also allows several processes to
share the same log file. Instead, the <TT>DiskLog</TT>
object by default creates a new log file each day.
<P>
Take a closer look at the two classes.
<H3><A NAME="DiskLog"><TT><FONT SIZE=4 FACE="Courier">DiskLog</TT></FONT></A>
</H3>
<P>
The <TT>DiskLog</TT> class extends
Java's <TT>RandomAccessFile</TT> class.
The <TT>RandomAccessFile</TT> class
is the only Java file class capable of not deleting the contents
of a file when opened. This allows you to create a persistent
disk log file. The declaration of the <TT>DiskLog</TT>
class is as follows:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* DiskLog&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
public class<BR>
DiskLog<BR>
extends RandomAccessFile<BR>
implements Log</TT>
</BLOCKQUOTE>
<P>
As you can see, you extend <TT>RandomAccessFile</TT>
and implement the <TT>Log</TT> interface.
<H4>Log File Names</H4>
<P>
Log file names can be anything you want. However, because you
want your applications to share a common log file, a single log
file should be used. To achieve this, the <TT>DiskLog</TT>
class names its log files <TT>syslog.YYMMDD</TT>
where <TT>YYMMDD</TT> is the date
of the log file. This is the default name. If you do not choose
a name, this is the one that will be used. You can always override
the default and select your own log file name.
<P>
By default, this log file is stored in the directory where your
program is located. There are ways to override these mechanisms
in the constructors.
<P>
<TT>DiskLog</TT> has three constructors.
All of them require the name of the application that is going
to be using it. This is because the application name is the first
thing the log entry contains. The other two constructors accept
a filename, overriding the default name, and a path name, overriding
the default location of the log file. I'll discuss each one in
detail.
<P>
The first constructor creates a default log filename in the current
directory. Here is the call:
<BLOCKQUOTE>
<TT>public<BR>
DiskLog( String name )<BR>
throws IOException</TT>
</BLOCKQUOTE>
<P>
The second constructor accepts, as input, the log filename and
the application name. This is one way to override the default
name given to a log file. The file, however, still resides in
the current directory. Here is the constructor call:
<BLOCKQUOTE>
<TT>public<BR>
DiskLog( String logName, String name )<BR>
throws IOException</TT>
</BLOCKQUOTE>
<P>
The last constructor accepts the path to the log file, the name
of the log file, and the application name. It combines the path-
and filenames together to make a complete path to the file. Here
is the constructor code:
<BLOCKQUOTE>
<TT>public<BR>
DiskLog( String logDir, String logName, String name )<BR>
throws IOException<BR>
</TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=543><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=543>
<BLOCKQUOTE>
Note that all three constructors throw the <TT>IOException</TT>. This is because you've extended the <TT>RandomAccessFile</TT> class. In your constructor, you call the base class's constructor. Whenever you override a constructor of a base class, you must throw the same exceptions that the base class throws.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H4>Making a Log</H4>
<P>
Opening a log file is as simple as constructing an object in Java.
The following code example from the LogTester sample program illustrates
the construction technique for the <TT>DiskLog</TT>
class:
<BLOCKQUOTE>
<TT>//&nbsp;&nbsp;&nbsp;&nbsp;Create a disk
log...<BR>
try<BR>
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;dLog = new DiskLog( &quot;Log Tester&quot;
);<BR>
}<BR>
catch ( IOException e )<BR>
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sLog.log( Log.ERROR, &quot;Could not create
the DiskLog object [&quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.toString() +
&quot;]&quot; );<BR>
}</TT>
</BLOCKQUOTE>
<P>
First you <TT>try</TT> to create a
new <TT>DiskLog</TT> and assign it
to the variable <TT>dLog</TT>. If
it fails and <TT>IOException</TT>
is thrown, the <TT>sLog</TT> (an instance
of <TT>ScreenLog</TT>) shows the error.
<P>
Now all you have to do is write to your new log file.
<H4>Writing to the Log</H4>
<P>
To write an entry to the log, <TT>DiskLog</TT>
provides a single method: <TT>log</TT>.
This method is the implementation of the <TT>Log</TT>
interface's abstract method <TT>log</TT>.
It accepts two parameters as input: a <BR>
logging level and the text of the log entry. The <TT>log</TT>
method constructs a log entry from the information passed and
what it has, and writes it out to the log file.
<P>
There is a method available for you to specify what to do with
log entries should the primary log facility fail, such as a log
entry on another disk drive, or a log on the screen. Whatever
the case, the <TT>setBackupLog()</TT>
method accepts any class that implements the <TT>Log</TT>
interface as input and stores this when writing to the primary
log fails. You'll see this implemented below. The following is
the source code for the <TT>log</TT>
method:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* log&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;log( char logLevel, String logEntry )
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;logLine
= appName + &quot;|&quot;;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Use
the jif.util.FileDate for this new method...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logLine += ( new
FileDate() ).toFileString() + &quot;|&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logLine += System.getProperty(
&quot;user.name&quot; ) + &quot;|&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logLine += logLevel
+ &quot;|&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logLine += logEntry;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Let
the system define how lines are terminated...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logLine += System.getProperty(
&quot;line.separator&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Write
it out to disk...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeBytes(
logLine );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch ( IOException
e )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( backupLog != null )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Write
to backup...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;backupLog.log(
Log.ERROR, &quot;Error [&quot; + e.toString() +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;]
writing the following entry to the log file:&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;backupLog.log(
logLevel, logEntry );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch
( IOException e2 )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Write
to screen<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScreenLog
sl = new ScreenLog();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sl.log(
Log.ERROR, &quot;Backup log failed [&quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e2.toString()
+ &quot;] writing the following entry:&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sl.log(
logLevel, logEntry );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Write
to screen!<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScreenLog
sl = new ScreenLog();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sl.log(
Log.ERROR, &quot;Disk log failed [&quot; + e.toString() +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;]
writing the following entry:&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sl.log(
logLevel, logEntry );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
Basically, you construct a string called <TT>logLine</TT>
using the input received plus some additional system information.
The <TT>log</TT> method then throws
a linefeed or carriage return/linefeed on the end and writes it
out to the file. Don't forget that the <TT>DiskLog</TT>
extends the <TT>RandomAccessFile</TT>
class; therefore, the <TT>writeBytes()</TT>
method is inherited.
<P>
Around the <TT>writeBytes()</TT> method
you wrap a try/catch clause. You do this so the user of this class
doesn't have to. If an error occurs while writing a log entry
to disk, try to write the entry to the backup log. If writing
to the backup fails, write it to the screen. If no backup log
is defined, write the error to the screen. No matter what, the
log entry will be shown somewhere.
<H4>Closing the Log</H4>
<P>
The log file closes by itself at shutdown. However, you might
want to close the log a little sooner. There is no specialized
code in the <TT>DiskLog</TT> object
to close a disk log. However, you might call the <TT>close</TT>
method of the <TT>RandomAccessFile</TT>
class to close a disk log.
<H3><A NAME="ScreenLog"><TT><FONT SIZE=4 FACE="Courier">ScreenLog</TT></FONT></A>
</H3>
<P>
The <TT>ScreenLog</TT> class is identical
to the <TT>DiskLog</TT> class in output.
However, there are a few slight differences. The first variation
of the <TT>ScreenLog</TT> writes standard
log lines to the screen. Here is the constructor:
<BLOCKQUOTE>
<TT>public<BR>
ScreenLog( String name )</TT>
</BLOCKQUOTE>
<P>
This takes the name of the application for the log entries as
input. Because this log type displays to the screen, there is
no need for a disk filename or path. Figure 9.1 shows the output
of a <TT>ScreenLog</TT>.
<P>
<A HREF="f9-1.gif" ><B>Figure 9.1 : </B><I>The output of the </I>ScreenLog <I>class to the screen</I></A>
<P>
The second type of <TT>ScreenLog</TT>
creates a <TT>Frame</TT> window and
displays all of the log entries in it. The constructor for this
type takes two input arguments. The first argument is the title
to show on the log's window. The second argument is a Boolean
value that denotes whether or not to show the window.
<P>
Here is that constructor:
<BLOCKQUOTE>
<TT>public<BR>
ScreenLog( String windowTitle, boolean popup )</TT>
</BLOCKQUOTE>
<P>
The output is written to a <TT>Frame</TT>
window. The output is shown in Figure 9.2.
<P>
<A HREF="f9-2.gif" ><B>Figure 9.2 : </B><I>The output of the </I>ScreenLog <I>class to a window.</I></A>
<H2><A NAME="ASampleLoggingProgram"><FONT SIZE=5 COLOR=#FF0000>A
Sample Logging Program</FONT></A></H2>
<P>
The following is the LogTester sample program. It is also included
on the CD-ROM.
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* Imports&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;JIF Imports...<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jif.util.*;<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jif.awt.*;<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jif.log.*;
<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Java Imports...<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java.io.*;
<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java.awt.*;
<BR>
<BR>
//****************************************************************************
<BR>
//* LogTester&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
public class<BR>
LogTester<BR>
extends Frame<BR>
{<BR>
<BR>
//****************************************************************************
<BR>
//* Members&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;ScreenLog&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sLog;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;ScreenLog&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wLog;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;DiskLog&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dLog;
<BR>
<BR>
//****************************************************************************
<BR>
//* main&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;main( String args[] )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new LogTester(
args );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* Constructor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public<BR>
&nbsp;&nbsp;&nbsp;&nbsp;LogTester( String args[] )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super( &quot;Log
Tester!&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Create
a screen log...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sLog = new ScreenLog(
&quot;Log Tester&quot;, true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wLog = new ScreenLog(
&quot;Log Tester&quot;, false );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Create
a disk log...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dLog
= new DiskLog( &quot;Log Tester&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch ( IOException
e )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sLog.log(
Log.ERROR, &quot;Could not create the DiskLog object [&quot; +
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.toString()
+ &quot;]&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Tell
our disk log that the screen is the backup...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dLog.setBackupLog(
sLog );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sLog.log( Log.INFO,
&quot;Log object created&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dLog.log( Log.INFO,
&quot;Log object created&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wLog.log( Log.INFO,
&quot;Log object created&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Pack
the panels...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pack();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sLog.log( Log.INFO,
&quot;Layout packed&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dLog.log( Log.INFO,
&quot;Layout packed&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wLog.log( Log.INFO,
&quot;Layout packed&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resize( 100, 100
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sLog.log( Log.INFO,
&quot;Running!&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dLog.log( Log.INFO,
&quot;Running!&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wLog.log( Log.INFO,
&quot;Running!&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* handleEvent&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;handleEvent( Event anEvent )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( anEvent.id
== Event.WINDOW_DESTROY )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispose();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sLog.log(
Log.INFO, &quot;Exiting!&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dLog.log(
Log.INFO, &quot;Exiting!&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wLog.log(
Log.INFO, &quot;Exiting!&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(
0 );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;I
didn't handle it, pass it up...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( super.handleEvent(
anEvent ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
}</TT>
</BLOCKQUOTE>
<P>
The program is quite simple. You create a log of each possible
type: a screen log in a window, a screen log that goes to the
screen (<TT>stdout</TT>), and a disk
log. Various things are written to each of the logs. The output
of this program is shown in Figures 9.1 and 9.2.
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
You've come to the end of your second extension discussion. By
now you should have a good understanding of what a log is and
how it can help you in your programming. You've been introduced
to the <TT>DiskLog</TT> and the <TT>ScreenLog</TT>
classes, and given a little background on how they work.
<P>
In <A HREF="ch10.htm" >Chapter 10</A>, &quot;Database Classes,&quot;
you will find information about  extending Java to communicate
with database servers, as well as reading and writing data.

<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



