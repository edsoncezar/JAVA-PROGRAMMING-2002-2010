<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
<H1><FONT COLOR=#FF0000>Chapter 11</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>User Interface Classes</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>


</BLOCKQUOTE>
<UL>
<LI><A HREF="#Introduction" >Introduction</A>
<LI><A HREF="#DEffects" >3-D Effects</A>
<UL>
<LI><A HREF="#TheEffectsInterface" >The Effects Interface</A>
</UL>
<LI><A HREF="#TheJifPanelClass" >The JifPanel Class</A>
<UL>
<LI><A HREF="#JifPanelDesign" >JifPanel Design</A>
<LI><A HREF="#ConstructingaJifPanel" >Constructing a JifPanel</A>
<LI><A HREF="#SmokeandMirrors" >Smoke and Mirrors</A>
<LI><A HREF="#DrawingDBorders" >Drawing 3-D Borders</A>
<LI><A HREF="#TabbingBetweenComponents" >Tabbing Between Components</A>
</UL>
<LI><A HREF="#SQLGeneration" >SQL Generation</A>
<LI><A HREF="#TheJifPanelDescendants" >The JifPanel Descendants</A>
<UL>
<LI><A HREF="#TheCalendarPanelClass" >The CalendarPanel Class</A>
<LI><A HREF="#TheImagePanelClass" >The ImagePanel Class</A>
<LI><A HREF="#TheJifLabelClass" >The JifLabel Class</A>
<LI><A HREF="#TheJifTabPanelClass" >The JifTabPanel Class</A>
<LI><A HREF="#TheStatusBarClass" >The StatusBar Class</A>
</UL>
<LI><A HREF="#TheJifDialogClass" >The JifDialog Class</A>
<UL>
<LI><A HREF="#TheMessageBoxClass" >The MessageBox Class</A>
<LI><A HREF="#ThePickListClass" >The PickList Class</A>
</UL>
<LI><A HREF="#JavaTextComponentExtensions" >Java TextComponent Extensions</A>
<UL>
<LI><A HREF="#ChangeDetection" >Change Detection</A>
</UL>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
<I><B><FONT SIZE=5 COLOR=#000000>t</FONT><FONT SIZE=5>ool \'t&uuml;l&nbsp;\
n:</FONT></B><FONT SIZE=5> an instrument or apparatus necessary
in the practice of a vocation or profession</FONT></I>
<H2><A NAME="Introduction"><FONT SIZE=5 COLOR=#FF0000>Introduction</FONT></A>
</H2>
<P>
Java's Abstract Windowing Toolkit (AWT) package contains classes
with which you can interact with the user of your programs. Though
the AWT classes are nice, there are no bells and whistles. This
chapter is dedicated to providing you with those bells and whistles
to extend the visual beauty of your intranet applications.
<P>
The main thrust of this chapter is to introduce you to the interfaces
and classes with which you can enhance your user interface. You
will use these classes in your programs mainly to construct visual
elements to enhance the look and feel of your Java programs.
<P>
Before you dig into the classes, however, let's look at a little
3-D theory.
<H2><A NAME="DEffects"><FONT SIZE=5 COLOR=#FF0000>3-D Effects</FONT></A>
</H2>
<P>
Two features that I like to use in my GUI applications are 3-D
panels and group boxes. They give a nice touch to any input screen
and can transform a boring screen into one bubbling with personality.
<P>
Core Java cannot create these hip containers, however. Enter the
<TT>JifPanel</TT> class. With this
class, you can create an array of interesting effects with the
greatest of ease. Figures 11.1 and 11.2 show the different things
a <TT>JifPanel</TT> can do.
<P>
<A HREF="f11-1.gif" ><B>Figure 11.1 :</B><I> The versatile JifPanel.</I></A>
<P>
<A HREF="f11-2.gif" ><B>Figure 11.2 :</B> <I>The JifPanel behaving like a group box.</I></A>
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
JIF stands for Java Intranet Framework. As you'll see in <A HREF="ch12.htm" >Chapter 12</A>, &quot;Putting Them All Together,&quot; all of the classes you've talked about, including those in this chapter, are packaged together into the Java Intranet Framework, or JIF. You will see other objects that start with JIF.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The <TT>JifPanel</TT> class is covered
in greater detail later in this chapter. For now, let's discuss
the interface behind the <TT>JifPanel</TT>
class: <TT>Effects</TT>.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
Figure 11.1 represents the output of one example program on the CD-ROM. The program is called <TT>PanelTester</TT>.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
Figure 11.2 represents the output of one example program on the CD-ROM. The program is called <TT>GroupBoxTester</TT>.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="TheEffectsInterface">The <TT><FONT SIZE=4 FACE="Courier">Effects</TT></FONT><FONT SIZE=4>
Interface</FONT></A></H3>
<P>
The <TT>Effects</TT> interface extends
the components' look and feel. The <TT>Effects</TT>
interface only consists of constants defining the styles available.
Only the <TT>JifPanel</TT> class implements
this interface.
<P>
The <TT>Effects</TT> styles are divided
into three areas:
<UL>
<LI><FONT COLOR=#000000>Border Styles: Govern the look of the
border surrounding the component</FONT>
<LI><FONT COLOR=#000000>Text Styles: Govern the look of any text
that is contained within the component</FONT>
<LI><FONT COLOR=#000000>Text Placement: Governs the placement
of any text that is contained within the component</FONT>
</UL>
<P>
Let's examine each set of styles individually.
<H4>Border Styles</H4>
<P>
The first set of styles is the border styles. These dictate how
a component will render its border. The available styles are
<UL>
<LI><TT>Effects.NONE</TT>: No cool
3-D look at all.
<LI><TT>Effects.FLAT</TT>: Provides
a 2-D border around the component. Very boring.
<LI><TT>Effects.GROOVED</TT>: Provides
a 3-D border that looks like a groove. The opposite of <TT>Effects.RIDGED</TT>.
<LI><TT>Effects.LOWERED</TT>: Provides
a 3-D border that looks sunken into the component. The opposite
of <TT>Effects.RAISED</TT>.
<LI><TT>Effects.ROUNDED</TT>: Rounds
the corners of the border.
<LI><TT>Effects.RAISED</TT>: Provides
a 3-D border that looks popped up. The opposite of <TT>Effects.LOWERED</TT>.
<LI><TT>Effects.RIDGED</TT>: This
3-D effect looks like a little wall around your component. The
opposite of <TT>Effects.GROOVED</TT>.
<LI><TT>Effects.CAPTION</TT>: This
style makes any text draw at the upper left-hand corner of the
component.
</UL>
<P>
Each of these styles is represented in Figure 11.1. Listing 11.1
shows the actual definitions of these styles.
<HR>
<BLOCKQUOTE>
<B>Listing 11.1. The border styles available in the </B><TT><B>Effects</FONT></B></TT><B>
interface.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;public final
static int&nbsp;&nbsp;&nbsp;&nbsp; NONE = 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;
FLAT = 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;
GROOVED = 2;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;
LOWERED = 4;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;
ROUNDED = 8;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;
RAISED = 16;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;
RIDGED = 32;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;
CAPTION = 64;</TT>
</BLOCKQUOTE>
<HR>
<P>
Notice that the styles are offsets in a bit-mapped field. That
means that they can be added together to combine the effects.
Some effects do not warrant combining and are pointless. For instance,
you won't want to combine <TT>GROOVED</TT>
with <TT>RIDGED</TT>, or <TT>LOWERED</TT>
with <TT>RAISED</TT>. Sometimes you
might want to combine <TT>RAISED</TT>
and <TT>ROUNDED</TT>, however.
<H4>Text Styles</H4>
<P>
Text effects, the second set of styles defined by the <TT>Effects</TT>
interface, dictate the way a component will draw the text it contains.
Four styles are available:
<UL>
<LI><TT>Effects.TEXT_NORMAL</TT>:
Normal, boring text.
<LI><TT>Effects.TEXT_LOWERED</TT>:
Text appears to be sunken into the component.
<LI><TT>Effects.TEXT_RAISED</TT>:
Text appears to jump right off the screen.
<LI><TT>Effects.TEXT_SHADOWED</TT>:
Text appears to have a drop shadow.
</UL>
<P>
Each of these styles is represented in Figure 11.1. Listing 11.2
shows the actual definitions of these styles.
<HR>
<BLOCKQUOTE>
<B>Listing 11.2. The text styles available in the </B><TT><B>Effects</FONT></B></TT><B>
interface.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;public final
static int&nbsp;&nbsp;&nbsp;&nbsp;TEXT_NORMAL = 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;TEXT_LOWERED
= 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;TEXT_RAISED
= 2;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;TEXT_SHADOW
= 3;</TT>
</BLOCKQUOTE>
<HR>
<P>
Unlike the border styles, these styles increment sequentially.
They cannot be combined.
<H4>Text Placement</H4>
<P>
The third and final style set is the text placement styles. While
not styles so much as locations, they indicate one aspect of the
display of the text. Three styles are available:
<UL>
<LI><TT>Effects.CENTER</TT>: Text
is centered within a component.
<LI><TT>Effects.LEFT</TT>: Text is
left justified.
<LI><TT>Effects.RIGHT</TT>: Text is
right justified.
</UL>
<P>
Again, please refer to Figure 11.1. Each of the preceding styles
is demonstrated in the example. Listing 11.3 shows the actual
definitions of these styles.
<HR>
<BLOCKQUOTE>
<B>Listing 11.3. The text placements available in the </B><TT><B>Effects</FONT></B></TT><B>
interface.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;public final
static int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CENTER
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LEFT
= 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RIGHT
= 2;</TT>
</BLOCKQUOTE>
<HR>
<P>
Like the text styles, these placement styles increment sequentially.
They also cannot be combined.
<H2><A NAME="TheJifPanelClass"><FONT SIZE=5 COLOR=#FF0000>The
</FONT><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">JifPanel</TT></FONT><FONT SIZE=5 COLOR=#FF0000>
Class</FONT></A></H2>
<P>
The most important user interface class you'll develop is the
<TT>JifPanel</TT> class, which implements
the <TT>Effects</TT> interface and
provides many 3-D effects along with some special features. To
fully explain the <TT>JifPanel</TT>,
this section discusses its design and then covers some of the
constructors and the source code.
<H3><A NAME="JifPanelDesign"><TT><FONT SIZE=4 FACE="Courier">JifPanel</TT></FONT><FONT SIZE=4>
Design</FONT></A></H3>
<P>
The <TT>JifPanel</TT> extends Java's
<TT>Panel</TT> class. As you know,
the <TT>Panel</TT> class extends the
<TT>Container</TT> class, which allows
the <TT>Panel</TT> to hold or contain
other components. You can assemble this panel of components, along
with other panels of components, to construct a complete user
interface for an application.
<P>
The following is the declaration of the <TT>JifPanel</TT>
class:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* JifPanel&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
public class JifPanel<BR>
extends Panel<BR>
implements Effects</TT>
</BLOCKQUOTE>
<P>
The <TT>JifPanel</TT> implements the
<TT>Effects</TT> interface. As the
<TT>Effects</TT> interface only contains
constants, it imposes no structure on the <TT>JifPanel</TT>
class. All of the constants available in <TT>Effects</TT>
are available to the <TT>JifPanel</TT>,
however.
<H3><A NAME="ConstructingaJifPanel">Constructing a <TT><FONT SIZE=4 FACE="Courier">JifPanel</TT></FONT></A>
</H3>
<P>
You can construct a <TT>JifPanel</TT>
in several ways. You can use it as a regular Java <TT>Panel</TT>
by creating it with no arguments:
<BLOCKQUOTE>
<TT>JifPanel myPanel = new JifPanel();</TT>
</BLOCKQUOTE>
<P>
You can create one that has a specific type of border:
<BLOCKQUOTE>
<TT>JifPanel myPanel = new JifPanel( Effects.RAISED
);</TT>
</BLOCKQUOTE>
<P>
You can specify a fixed size for your panel:
<BLOCKQUOTE>
<TT>JifPanel myPanel = new JifPanel( Effects.RAISED,
100, 100 );</TT>
</BLOCKQUOTE>
<P>
You can create one that contains a text string:
<BLOCKQUOTE>
<TT>JifPanel myPanel = new JifPanel( &quot;JIF
Rules!!&quot; );</TT>
</BLOCKQUOTE>
<P>
Finally, you can create one with a cool border that is of a fixed
size with text inside:
<BLOCKQUOTE>
<TT>JifPanel myPanel = new JifPanel( Effects.RAISED,
100, 100, &quot;JIF Rules!!&quot; );</TT>
</BLOCKQUOTE>
<P>
Hopefully there are enough options from which you can choose.
If there aren't, you can always subclass the <TT>JifPanel</TT>
and create your own extensions.
<P>
Once again, refer to Figure 11.1 for a gander at the different
border, text, and text placement styles available for a <TT>JifPanel</TT>.
<H3><A NAME="SmokeandMirrors">Smoke and Mirrors</A></H3>
<P>
If you're at all like me, you are probably ready to look at some
source code. I'm sure you're wondering how to create those cool
3-D border and text effects. It doesn't take smoke and mirrors
or a degree from a clown college. It's quite simple, and I'll
show you how.
<H3><A NAME="DrawingDBorders">Drawing 3-D Borders</A></H3>
<P>
A 3-D border around a component is one of the easiest and most
professional looking effects to program. Drawing a 3-D border
around any component requires two details: border style and border
thickness.
<P>
The first step is to decide on the style of the 3-D border you
want to draw. The two basic styles are lowered and raised.
<H5>Lowered Borders</H5>
<BLOCKQUOTE>
A lowered border is a border that looks sunken or lower than the
area that contains it. Figure 11.3 illustrates the concept of
a lowered border.
</BLOCKQUOTE>
<P>
<A HREF="f11-3.gif" ><B>Figure 11.3 : </B><I>A lowered border</I>.</A>
<BLOCKQUOTE>
To make an object appear as if it is sunken, you need to create
what appears to be a shadow. To do this, the upper and left side
of your component should be darker than the lower and right side.
In Figure 11.3, a 10<FONT FACE="Symbol">&#165;</FONT>10 grid represents
a 10<FONT FACE="Symbol">&#165;</FONT>10 grid of pixels. The dark
pixels represent the area in the shadow. The clear, or white,
pixels represent the area that is lit up. If you squint your eyes
and look at the figure, it will look lowered into the book.
</BLOCKQUOTE>
<H5>Raised Borders</H5>
<BLOCKQUOTE>
A raised border is a border that looks as if it is coming off
of the screen. This is a common look for buttons and other clickable
objects. Figure 11.4 illustrates the concept of a raised border.
</BLOCKQUOTE>
<P>
<A HREF="f11-4.gif" ><B>Figure 11.4 : </B><I>A raised border.</I></A>
<BLOCKQUOTE>
To make the object appear as if it is raised, you need to create
a shadow at the bottom of the object. To do this, the upper and
left side of your component should be lighter than the lower and
right side. In Figure 11.4, a 10<FONT FACE="Symbol">&#165;</FONT>10
grid represents a 10<FONT FACE="Symbol">&#165;</FONT>10 grid of
pixels. The dark pixels represent the area in the shadow. The
clear, or white, pixels represent the area that is lit up. Again,
if you squint your eyes and look at the figure, it will look raised
from the book.
</BLOCKQUOTE>
<H5>Grooved and Lowered Borders</H5>
<BLOCKQUOTE>
The grooved and lowered border types are worth mentioning. You
can create group boxes with these two borders. Figure 11.5 illustrates
the method for creating a grooved and lowered border.
</BLOCKQUOTE>
<P>
<A HREF="f11-5.gif" ><B>Figure 11.5 : </B><I>A grooved border</I></A><I>.</I>
<BLOCKQUOTE>
Figure 11.6 illustrates the method for creating a lowered border.
</BLOCKQUOTE>
<P>
<A HREF="f11-6.gif" ><B>Figure 11.6 : </B><I>A lowered border</I></A><I>.</I>
<H5>Border Thickness</H5>
<BLOCKQUOTE>
The last detail you need before you dig into the code is the thickness
of the border. The thickness of the border is the width of the
border in pixels. The default thickness for a <TT>JifPanel</TT>
is two pixels.
</BLOCKQUOTE>
<BLOCKQUOTE>
Thicker borders look odd, and borders thinner than two pixels
almost defeat the purpose of the 3-D effect.
</BLOCKQUOTE>
<H5>Drawing the Border</H5>
<BLOCKQUOTE>
The <TT>drawFrame()</TT> method in
the <TT>JifPanel</TT> class is responsible
for drawing the 3-D border. The source code for that method follows:
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* drawFrame&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;drawFrame( Graphics g )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i,
j, offset = 0, rounded = 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dimension&nbsp;&nbsp;&nbsp;&nbsp;bounds
= size();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( isStyleSet(
CAPTION ) )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Fix
up for font...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FontMetrics
fm = g.getFontMetrics();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offset
= fm.getHeight() / 2;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for ( i = 0, j
= 1; i &lt; thickness; i++, j += 2 )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( i != 0 )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rounded
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( isStyleSet( ROUNDED ) )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rounded
= 1;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( isStyleSet( RAISED ) ||<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(
isStyleSet( RIDGED ) &amp;&amp; ( j &lt; <BR>
thickness ) ) ||<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(
isStyleSet( GROOVED ) &amp;&amp; ( j &gt; <BR>
thickness ) ) )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(
Color.white );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(
Color.gray );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Draw
top line...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.fillRect(
i + rounded,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i
+ offset,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bounds.width
- ( 2 * ( i + rounded ) ),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Draw
the left side...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.fillRect(
i,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i
+ rounded + offset,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bounds.height
- ( 2 * i + 1 + rounded ) - offset );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( isStyleSet( RAISED ) || isStyleSet( <BR>
FLAT ) ||<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(
isStyleSet( RIDGED ) &amp;&amp; ( j &lt; thickness ) ) ||<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(
isStyleSet( GROOVED ) &amp;&amp; ( j &gt; <BR>
thickness ) ) )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(
Color.gray );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(
Color.white );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Draw
the bottom line...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.fillRect(
i + rounded,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bounds.height
- ( i + 1 ),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bounds.width
- ( 2 * ( i + rounded ) ),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Draw
the right side...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.fillRect(
bounds.width - ( i + 1 ),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i
+ rounded + offset,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bounds.height
- ( 2 * i + 1 + rounded ) <BR>
- offset );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
The <TT>drawFrame()</TT> method draws
the border in a loop fashion. Each run through represents one
pixel from the thickness of the border. If the border thickness
was set to two, the default, this loop would be performed twice.
</BLOCKQUOTE>
<BLOCKQUOTE>
This method first draws the upper and left lines of the border.
It then swaps colors and draws the lower and right lines of the
border. Each time through the loop, it thickens the border by
one pixel.
</BLOCKQUOTE>
<BLOCKQUOTE>
Ridged and grooved borders are a little bit more complex. They
swap colors halfway through the loop, giving them a walled or
grooved look.
</BLOCKQUOTE>
<H4>Drawing 3-D Text</H4>
<P>
Drawing 3-D text isn't nearly as complicated as drawing the 3-D
borders. Making the text look lowered or raised is very simple.
The following source code is for the <TT>JifPanel</TT>
method <TT>drawText()</TT>:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* drawText&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;drawText( Graphics g )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldColor
= g.getColor();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xx
= 0, yy = 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FontMetrics&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fm
= g.getFontMetrics();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dimension&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bounds
= size();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Decide
where to place the text...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( !isStyleSet(
CAPTION ) )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch
( textPlacement )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
CENTER:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xx
= ( bounds.width / 2 ) - ( fm.stringWidth( text ) / 2 );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yy
= ( bounds.height / 2 ) - ( fm.getHeight() / 2 );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
LEFT:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xx
= thickness + TEXT_OFFSET;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yy
= ( bounds.height / 2 ) - ( fm.getHeight() / 2 );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
RIGHT:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xx
= bounds.width - thickness - TEXT_OFFSET -<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fm.stringWidth(
text );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yy
= ( bounds.height / 2 ) - ( fm.getHeight() / 2 );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
spacer = fm.charWidth( 'i' );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xx
= thickness + TEXT_OFFSET + spacer;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yy
= 0;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Fill
a rectangle in the bounding space of the string...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(
getBackground() );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.fillRect(
xx, yy,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fm.stringWidth(
text ) + ( spacer * 2 ),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fm.getHeight()
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xx
+= spacer;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Adjust
for drawString weirdness...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yy += fm.getHeight()
- fm.getDescent() - 1;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( textStyle
== TEXT_LOWERED )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Draw
highlight to right and below text<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(
Color.white );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(
text, xx + 1, yy + 1 );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( textStyle
== TEXT_RAISED )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Draw
highlight to left and above text<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(
Color.white );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(
text, xx - 1, yy - 1 );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( textStyle
== TEXT_SHADOW )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Draw
shadow to right and below text<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(
Color.gray );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(
text, xx + 1, yy + 1 );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor( Color.black
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(
text, xx, yy );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Restore
the old color...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor( oldColor
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
The first half of this method sets the starting point for the
text to be drawn. Based on the text placement, the x and y coordinates
for drawing the text are calculated. For <TT>CENTER</TT>,
the text is centered in the width of the component. For <TT>LEFT</TT>,
the text is offset by five pixels. For <TT>RIGHT</TT>,
the text is offset by five pixels from the right side of the component.
<P>
Now, if the <TT>CAPTION</TT> style
is set, you need special processing because the <TT>CAPTION</TT>
style requires a background to be drawn before the text is drawn.
The method calculates the size of the rectangle that will be drawn.
This rectangle will be a little wider than the text itself but
exactly the same height.
<P>
The second half of this method draws the specialty text, which
is the lowered, raised, and shadowed text styles. These effects
are achieved simply by drawing a copy of the text in white and
then drawing the text again in black, offset by one pixel. This
offset is important. If you offset up and over one, you get that
lowered look. If you offset down and to the right, you get a raised
look. The shadowed text is just like the lowered text, but the
background color is gray instead of white.
<P>
Finally, you restore the old color to the <TT>Graphics</TT>
canvas. Others may depend on this color being there. If you don't
do this, subsequent drawing of other components may be colored
incorrectly.
<H3><A NAME="TabbingBetweenComponents">Tabbing Between Components</A>
</H3>
<P>
Another feature of the <TT>JifPanel</TT>
class is that you can tab between the components contained in
the panel. This behavior of tabbing from one component to another
is a GUI standard that many have come to feel comfortable with.
But creating the effect is quite simple as you'll see.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
As of the JDK v1.0.2 for Windows NT and Windows 95, this tabbing feature was not available and has been reported as a bug. I have added it here for this reason. If later versions of the JDK support tabbing, this feature of the <TT>JifPanel</TT> will no longer be necessary.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
You took over the event handler in our <TT>JifPanel</TT>
class and looked for the pressed Tab key. The Tab key's value
is 9, and you created a constant called <TT>TAB_KEY</TT>
to hold that value:
<BLOCKQUOTE>
<TT>final static public int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TAB_KEY
= 9;</TT>
</BLOCKQUOTE>
<P>
The instance variable called <TT>currentPos</TT>
keeps track of the component that currently has the focus.
<P>
When you press a key on the keyboard, a <TT>KEY_PRESS</TT>
event is generated. Capturing keystrokes is as easy as overriding
the <TT>handleEvent()</TT> method.
<P>
When you press the Tab key, you check to see if the target of
the key press is a component. If it is, you jump the focus to
the component directly following the target in the creation order.
If you hold down the Shift key when you press the Tab key, you
jump backward one component. This handles the jumping from the
Tab key.
<P>
One last thing you need to do is keep track of mouse clicks. When
the user clicks the mouse on a component, that component receives
the focus and then generates a <TT>GOT_FOCUS</TT>
event. You capture this event as well and set your internal pointer,
<TT>currentPos</TT>, to point at this
component.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=590><B>Caution</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=590>
<BLOCKQUOTE>
As of the JDK v1.0.2 specifically on the Windows NT and Windows 95 platform, components did not properly generate the <TT>GOT_FOCUS</TT> and <TT>LOST_FOCUS</TT> events when they received and lost the focus. This appears to be a bug in the implementation, but it might turn out that some components never will generate these events.
</BLOCKQUOTE>
<BLOCKQUOTE>
In any case, the behavior of tabbing can be affected by the user clicking on a component out of the tab order because of this bug. You might see the Tab key cause the cursor to jump around.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The following is the source code for the <TT>handleEvent()</TT>
method of <TT>JifPanel</TT>:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* handleEvent&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;handleEvent( Event event )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Look
for certain events to move the focus...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( ( event.id
== Event.GOT_FOCUS || event.id == Event.ACTION_EVENT )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;
event.target instanceof Component )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Set
the focus to this comoponent...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setFocus(
( Component )event.target );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Handle
tabs nicely...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( event.id
== Event.KEY_PRESS &amp;&amp; event.key == TAB_KEY )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( event.target instanceof Component )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( !event.shiftDown() )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;focusForward(
( Component )event.target );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;focusBackward(
( Component )event.target );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;I
handled it...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;I
don't want this...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( super.handleEvent(
event ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
The two methods, <TT>focusForward()</TT>
and <TT>focusBackward()</TT>, move
the focus to the next or previous component, respectively. These
two methods skip <TT>Label</TT>s and
disabled components. You don't want an inert object to get the
focus; you'll never get the focus back.
<H2><A NAME="SQLGeneration"><FONT SIZE=5 COLOR=#FF0000>SQL Generation</FONT></A>
</H2>
<P>
The last feature of the wonderful <TT>JifPanel</TT>
is that it can generate a SQL statement suitable for sending to
a database. This feature only works when the panel itself contains
other components that implement the <TT>SQLFactory</TT>
interface, however. (<A HREF="ch10.htm" >See Chapter 10</A>, &quot;Database
Classes,&quot; for more information on <TT>SQLFactory</TT>.)
<P>
When you request a <TT>JifPanel</TT>
to generate a SQL statement for the components contained within,
the <TT>JifPanel</TT> queries each
component for some information. First and foremost, the panel
needs to know if the component implements the <TT>SQLFactory</TT>
interface. If it does not, there is really no way to generate
SQL for that component. To see whether a class implements an interface,
the operator <TT>instanceof</TT> returns
<TT>true</TT>. The following code
shows this in action:
<BLOCKQUOTE>
<TT>//&nbsp;&nbsp;&nbsp;&nbsp;Is this a non-mundane
component?<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if ( cList[ i ] instanceof SQLFactory
)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Get
the SQL statement...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String sql = (
( SQLFactory )cList[ i ] ).generateUpdateSQL( false );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
The <TT>cList</TT> is an array of
the components contained within the panel. You check each element
in the array with the <TT>instanceof</TT>
operator. If the component implements the <TT>SQLFactory</TT>
interface, you then can call its <TT>generateUpdateSQL()</TT>
method by casting the component array variable to that of a <TT>SQLFactory</TT>
object.
<P>
In any case, the <TT>JifPanel</TT>
will return complete <TT>INSERT</TT>
or <TT>UPDATE</TT> SQL statements
if filled with components that implement the <TT>SQLFactory</TT>
interface. These strings are suitable for sending directly to
your database.
<H2><A NAME="TheJifPanelDescendants"><FONT SIZE=5 COLOR=#FF0000>The
</FONT><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">JifPanel</TT></FONT><FONT SIZE=5 COLOR=#FF0000>
Descendants</FONT></A></H2>
<P>
Five classes descend from the <TT>JifPanel</TT>
class: <TT>CalendarPanel</TT>, <TT>ImagePanel</TT>,
<TT>JifLabel</TT>, <TT>JifTabPanel</TT>,
and <TT>StatusBar</TT>. Let's look
at each one in detail.
<H3><A NAME="TheCalendarPanelClass">The <TT><FONT SIZE=4 FACE="Courier">CalendarPanel</TT></FONT><FONT SIZE=4>
Class</FONT></A></H3>
<P>
As the name implies, the <TT>CalendarPanel</TT>
represents a calendar. (See Figure 11.7.) The calendar starts
at a certain month and can be moved forward or backward one month
at a time. Each day is implemented as a button that the user can
press.
<P>
<A HREF="f11-7.gif" ><B>Figure 11.7 : </B><I>The </I>CalendarPanel<I> as used in the </I>CalenderTester<I> program.</I></A>
<P>
When the user presses one of the days, an <TT>ACTION_EVENT</TT>
is sent to the parent of the object. This event contains the date
selected in a Java <TT>Date</TT> object
as the argument.
<P>
Listing 11.4 is from the <TT>CalendarTester</TT>
program. It creates and displays a <TT>CalendarPanel</TT>
object for you to play with. The complete source code is available
on the CD-ROM. The output of the <TT>CalendarTester</TT>
program is shown in Figure 11.8.
<P>
<A HREF="f11-8.gif" ><B>Figure 11.8 : </B><I>The output of the </I>CalenderTester<I> program.</I></A>
<HR>
<BLOCKQUOTE>
<B>Listing 11.4. A code snippet from the </B><TT><B>CalendarTssester</FONT></B></TT><B>
program.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* CalendarTester&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public<BR>
&nbsp;&nbsp;&nbsp;&nbsp;CalendarTester()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super( &quot;Calendar
Tester&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Let's
use a nicer font...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setFont( new Font(
&quot;Helvetica&quot;, Font.PLAIN, 14 ) );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Create
the calendar...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myPanel = new
CalendarPanel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add( &quot;Center&quot;,
myPanel );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Pack
it up!<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* action&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;action( Event e, Object a )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Was
this my boy?<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( e.target
== myPanel )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Tell
the user!<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageBox
mb = new MessageBox( this, &quot;Hey!&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;You
picked &quot; + ( ( Date )a ).toString() );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( false
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<P>
This program simply creates a <TT>CalendarPanel</TT>
object and adds it to the center of its <TT>BorderLayout</TT>.
The <TT>ACTION_EVENT</TT> event tells
you that someone clicked a button. So, you've added an <TT>action()</TT>
method to receive these <TT>ACTION_EVENT</TT>
events. When the events are received, you verify that they were
generated from your <TT>CalendarPanel</TT>.
If all checks out, you notify the user that a day has been picked
with another cool class-the <TT>MessageBox</TT>.
This class is discussed later in this chapter.
<H3><A NAME="TheImagePanelClass">The <TT><FONT SIZE=4 FACE="Courier">ImagePanel</TT></FONT><FONT SIZE=4>
Class</FONT></A></H3>
<P>
The <TT>ImagePanel</TT> class is an
extension of the <TT>JifPanel</TT>
class that loads an image and resizes itself to the size of the
image. This is useful for many applications, including in the
<TT>JifDialog</TT> descendant class
<TT>MessageBox</TT>. Later in this
chapter you'll see more about the <TT>MessageBox</TT>
class.
<P>
<TT>ImagePanel</TT>s are constructed
in the following manner:
<BLOCKQUOTE>
<TT>ImagePanel ip = new ImagePanel( &quot;c:\\image.gif&quot;,
15 );</TT>
</BLOCKQUOTE>
<P>
or
<BLOCKQUOTE>
<TT>ImagePanel ip = new ImagePanel( &quot;c:\\image.gif
);</TT>
</BLOCKQUOTE>
<P>
Each constructor takes as the first argument the name of the graphic
file to load. Whatever image types Java supports, the <TT>ImagePanel</TT>
also supports. Currently, only GIF and JPEG image formats are
supported.
<P>
The second, optional, argument allows to you specify a pixel border
between the edge of the panel and where the image is drawn. The
default is five pixels.
<H3><A NAME="TheJifLabelClass">The <TT><FONT SIZE=4 FACE="Courier">JifLabel</TT></FONT><FONT SIZE=4>
Class</FONT></A></H3>
<P>
One shortcoming of Java's <TT>Label</TT>
class is that it can only nicely display a single line of text.
If you put a second line in there, separated by a line feed perhaps,
you get an ugly display on the screen. The <TT>JifLabel</TT>
fills this niche. It creates a multiline label in an easy manner.
<P>
Another Java book that includes an excellent multiline label class
is on the market, so I tried to do one better. The other multiline
label class depends on when you created the components and manages
the size of the text. Ugh! While elegant and visually pleasing,
it was too much work. I like the KISS principle of software construction:
Keep It Simple, Stupid. On that note, I present the entire source
code for the <TT>JifLabel</TT>:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* JifLabel&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
public class<BR>
JifLabel<BR>
extends JifPanel<BR>
{<BR>
<BR>
//****************************************************************************
<BR>
//* Constructors&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifLabel( String s )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Stuff
the string in a tokenizer to get at each line...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringTokenizer
st = new StringTokenizer( s, &quot;\n&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int tCount = st.countTokens();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Make
a grid...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout( new
GridLayout( tCount + 2, 1, 0, 0 ) );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Leave
some space...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add( new Label(
&quot; &quot; ) );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Make
each line a new label and add to layout...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for ( int i =
0; i &lt; tCount; i++ )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(
new Label( st.nextToken() ) );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Leave
some space...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add( new Label(
&quot; &quot; ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
}</TT>
</BLOCKQUOTE>
<P>
The <TT>JifLabel</TT> is extremely
simple. First, you break the string into bits on the new-line
(<TT>\n</TT>) boundaries. Using Java's
<TT>StringTokenizer</TT> makes this
task very simple.
<P>
Second, you store the number of lines of text in the variable
<TT>tCount</TT> to create a new layout
for the label. You create a grid layout that is <TT>tCount</TT>
plus two rows high and one column wide. The extra two rows are
spacer rows to make the <TT>JifLabel</TT>
look even nicer.
<P>
Now you are ready to construct the actual label. Add a spacer
label at the top. Next, spin through a loop and take out each
line from the tokenizer. Each line you take out is added to the
layout as a new <TT>Label</TT>. Lastly,
add a new spacer to the bottom.
<P>
Pretty simple, eh? I think you'll like the results considering
the code that created it. Figure 11.9 shows a sample <TT>JifLabel</TT>
in the output of the <TT>LabelTester</TT>
program.
<P>
<A HREF="f11-9.gif" ><B>Figure 11.9 : </B><I>The output of the </I>LabelTester<I> program.</I></A>
<P>
The following code is part of the <TT>LabelTester</TT>
program so you can see how easy it is to create <TT>JifLabel</TT>s:
<BLOCKQUOTE>
<TT>public<BR>
&nbsp;&nbsp;&nbsp;&nbsp;LabelTester()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super( &quot;Label
Tester&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String labelString
=<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Hi,
this is the versatile JifLabel!\n&quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;It
is a multi-line label that was\n&quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;very
easy to program!\n\n&quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;What
do you think?&quot;;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JifLabel myLabel
= new JifLabel( labelString );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myLabel.setFont(
new Font( &quot;Helvetica&quot;, Font.BOLD, 14&nbsp;&nbsp;) );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add( &quot;Center&quot;,
myLabel );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Pack
it up!<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<H3><A NAME="TheJifTabPanelClass">The <TT><FONT SIZE=4 FACE="Courier">JifTabPanel</TT></FONT><FONT SIZE=4>
Class</FONT></A></H3>
<P>
Another shortcoming of the stock Java widgets is the lack of a
tabbed panel, or folder widget. This widget presents information
one sheet at a time. This new metaphor is common in Microsoft
Windows and is becoming popular on other platforms as well.
<P>
Sun Microsystems, Inc. noted that this would catch on, so they
provided the <TT>CardLayout</TT> layout
manager. This layout presents a stack of components with only
one component visible at a time. You must bring one card in the
stack to the top to view it.
<P>
The <TT>JifTabPanel</TT> class has
used this layout. This class provides a simple Microsoft Windows-like
tabbed panel for your applications. This simple device uses a
<TT>BorderLayout</TT> for its components.
<P>
The <TT>JifTabPanel</TT> class consists
of a <TT>JifPanel</TT>, a row of tabs
from which to select in the North layout, and a <TT>CardLayout</TT>
of components in the center layout. The <TT>JifTabPanel</TT>
is limited in that it only provides a single layer of tabs. (See
Figure 11.10.)
<P>
<A HREF="f11-10.gif" ><B>Figure 11.10 : </B><I>The output of the </I>TabTester<I> program</I></A><I>.</I>
<P>
The following code is from the <TT>TabTester</TT>
program. You can see how easy it is to use:
<BLOCKQUOTE>
<TT>public<BR>
TabTester()<BR>
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;super( &quot;Tab Tester&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Create a Tab
panel...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifTabPanel myPanel = new JifTabPanel();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Add some panes
to it...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;myPanel.addPane( &quot;Pane 1&quot;, 
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new JifPanel(
JifPanel.RAISED, 275, 375, &quot;Panel 1&quot; ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;myPanel.addPane( &quot;Pane 2&quot;, 
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new JifPanel(
JifPanel.RAISED, 275, 375, &quot;Panel 2&quot; ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;myPanel.addPane( &quot;Pane 3&quot;, 
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new JifPanel(
JifPanel.RAISED, 275, 375, &quot;Panel 3&quot; ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;myPanel.addPane( &quot;Pane 4&quot;, 
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new JifPanel(
JifPanel.RAISED, 275, 375, &quot;Panel 4&quot; ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;myPanel.addPane( &quot;Pane 5&quot;, 
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new JifPanel(
JifPanel.RAISED, 275, 375, &quot;Panel 5&quot; ) );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Add to the center...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add( &quot;Center&quot;, myPanel );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Pack it up!
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;show();<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="TheStatusBarClass">The <TT><FONT SIZE=4 FACE="Courier">StatusBar</TT></FONT><FONT SIZE=4>
Class</FONT></A></H3>
<P>
The final <TT>JifPanel</TT> extension
is the <TT>StatusBar</TT> class, the
area at the bottom of our model intranet application (<A HREF="ch7.htm" >see Chapter 7</A>,
&quot;A Model Intranet Application,&quot; for more information).
You can use the <TT>StatusBar</TT>
class to display messages to the user. If you leave it at its
default value, it simply says &quot;Ready.&quot; You can set it
to anything you want, however.
<P>
The <TT>StatusBar</TT> class has only
a single method useful to your program: the <TT>clear()</TT>
method. This method sets the text to nothing so the status bar
shows nothing. It relies on the <TT>setText()</TT>
method of the parent class, which is used to change the text displayed
in the status bar.
<H2><A NAME="TheJifDialogClass"><FONT SIZE=5 COLOR=#FF0000>The
</FONT><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">JifDialog</TT></FONT><FONT SIZE=5 COLOR=#FF0000>
Class</FONT></A></H2>
<P>
The next major user interface class is the <TT>JifDialog</TT>
class. This class extends the basic Java <TT>Dialog</TT>
class and adds a few cool behaviors:
<UL>
<LI><FONT COLOR=#000000>The font is defaulted to 12-point Dialog.</FONT>
<LI><FONT COLOR=#000000>Resizing is turned off.</FONT>
<LI><FONT COLOR=#000000>The actual window destroys itself when
the user closes it.</FONT>
</UL>
<P>
You would have to implement these three features for each dialog
box you create, so why not put them in a centralized base class?
That's what the <TT>JifDialog</TT>
class is-a centralized location.
<P>
A method also included in this class, <TT>center()</TT>,
centers the dialog box within either the screen or the window
that owns it.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
The Windows NT/95 JDK v1.0.2 has a bug that causes all windows to report their <TT>x,y</TT> location as <TT>0,0</TT>. This makes it impossible to center the dialog box within the parent window. Therefore, the parent centering will not work until the bug is fixed or used on another platform.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Three classes descend from <TT>JifDialog</TT>:
<TT>MessageBox</TT>, <TT>ResponseDialog</TT>,
and <TT>PickList</TT>. All of these
classes, except <TT>PickList</TT>,
are demonstrated in the <TT>DialogTester</TT>
program. The source code for this program is shown in Listing
11.5.
<HR>
<BLOCKQUOTE>
<B>Listing 11.5. The </B><TT><B>DialogTester</FONT></B></TT><B>
program.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* DialogTester&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
public class<BR>
DialogTester<BR>
extends Frame<BR>
{<BR>
<BR>
//****************************************************************************
<BR>
//* Members&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;ResponseDialog&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myDialog;
<BR>
<BR>
//****************************************************************************
<BR>
//* main&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;main( String args[] )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new DialogTester(
args );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* Constructor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public<BR>
&nbsp;&nbsp;&nbsp;&nbsp;DialogTester( String args[] )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super( &quot;Dialog
Tester!&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JifPanel p = new
JifPanel( Effects.LOWERED );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.setLayout( new
FlowLayout() );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.add( new Button(
&quot;Plain MessageBox&quot; ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.add( new Button(
&quot;Info MessageBox&quot; ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.add( new Button(
&quot;Stop MessageBox&quot; ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.add( new Button(
&quot;Exclamation MessageBox&quot; ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.add( new Button(
&quot;Question MessageBox&quot; ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.add( new Button(
&quot;ResponseDialog&quot; ) );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Add
the timer panel to the frame...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add( &quot;Center&quot;,
p );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Pack
the panels...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pack();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;show();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* action&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;action( Event event, Object arg )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageBox&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb
= null;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( arg.equals(
&quot;Plain MessageBox&quot; ) )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb
= new MessageBox( this, &quot;Plain MessageBox&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;This
is a plain message box&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if ( arg.equals(
&quot;Info MessageBox&quot; ) )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb
= new MessageBox( this, &quot;Info MessageBox&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;This
is an info message box&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageBox.INFO
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if ( arg.equals(
&quot;Stop MessageBox&quot; ) )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb
= new MessageBox( this, &quot;Stop MessageBox&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;This
is an stop message box&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageBox.STOP
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if ( arg.equals(
&quot;Exclamation MessageBox&quot; ) )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb
= new MessageBox( this, &quot;Exclamation MessageBox&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;This
is an exclamation message box&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageBox.EXCLAMATION
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if ( arg.equals(
&quot;Question MessageBox&quot; ) )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb
= new MessageBox( this, &quot;Question MessageBox&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;This
is an question message box&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageBox.QUESTION
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if ( arg.equals(
&quot;ResponseDialog&quot; ) )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myDialog
= new ResponseDialog( this, &quot;ResponseDialog&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;This
is a response dialog with three buttons&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Yes,No,Cancel&quot;
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myDialog.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( mb != null
)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( event.target
== myDialog )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageBox
mb2 = new MessageBox( this, &quot;Response Received!&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;A
response was received from the response dialog!\n&quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;You
pressed button #&quot; + ( ( Integer )arg ).toString() );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb2.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(
event.toString() );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( false
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT>PickList</TT> dialog, an abstract
class, is demonstrated in its own example program.
<H3><A NAME="TheMessageBoxClass">The <TT><FONT SIZE=4 FACE="Courier">MessageBox</TT></FONT><FONT SIZE=4>
Class</FONT></A></H3>
<P>
The <TT>MessageBox</TT> class displays
a message to the user and has a single button along the bottom
of the dialog box. This button is usually an OK button. It allows
the user to dismiss the dialog.
<P>
As an option, the <TT>MessageBox</TT>
can show an image along the left edge of the dialog box to further
enhance it. Figure 11.9, the output from <TT>LabelTester</TT>,
illustrates a <TT>MessageBox</TT>
without an image. Figure 11.11 shows a <TT>MessageBox</TT>
with an image.
<P>
<A HREF="f11-11.gif" ><B>Figure 11.11 : </B><I>A </I>MessageBox<I> with the </I>STOP<I> image.</I></A>
<P>
You can display four stock images, or icons, in your message box.
Each image is represented by a constant defined in the <TT>MessageBox</TT>
class. The stop sign shown in Figure 11.11 is just one of those.
The other three are as follows:
<UL>
<LI><FONT COLOR=#000000>Informational: The letter </FONT><TT>i</TT>
icon is displayed.
<LI><FONT COLOR=#000000>Exclamation: An exclamation point icon
is displayed.</FONT>
<LI><FONT COLOR=#000000>Question: A question mark icon is displayed.</FONT>
</UL>
<P>
The constants are defined as follows:
<BLOCKQUOTE>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;public static
final String&nbsp;&nbsp;&nbsp;&nbsp; INFO = &quot;Information.gif&quot;;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final String&nbsp;&nbsp;&nbsp;&nbsp;
EXCLAMATION = &quot;Exclamation.gif&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final String&nbsp;&nbsp;&nbsp;&nbsp;
STOP = &quot;Stop.gif&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final String&nbsp;&nbsp;&nbsp;&nbsp;
QUESTION = &quot;Question.gif&quot;;<BR>
</TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
The images that come with JIF are from Windows 95. Microsoft Windows has an API function called <TT>MessageBox</TT><B> </B>that generates similar output. This class closely models the Microsoft Windows message box.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The constructor for the <TT>MessageBox</TT>
follows:
<BLOCKQUOTE>
<TT>MessageBox( Frame <I>parent</I>, String
<I>title</I>, String <I>message<BR>
</I>&nbsp;&nbsp;&nbsp;&nbsp;[, String <I>imageToUse</I>[, boolean
<I>addButtons</I> ] )</TT>
</BLOCKQUOTE>
<P>
In the preceding code:
<BLOCKQUOTE>
<TT><I>parent</FONT></I></TT><I> </I>is the
parent frame.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>title</FONT></I></TT><I> </I>is the
title of the message box.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>message</FONT></I></TT><I> </I>is
the message to be displayed to the user.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>imageToUse</FONT></I></TT><I> </I>is
an optional constant indicating which image to display. If not
specified, it defaults to <TT>MessageBox.INFO</TT>.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>addButtons</FONT></I></TT><I> </I>is
a boolean with which you can have the message box create itself
without an OK button along the bottom. With this feature, you
can extend its functionality.
</BLOCKQUOTE>
<P>
Some examples of the <TT>MessageBox</TT>'s
creations follow:
<BLOCKQUOTE>
<TT>MessageBox mb = new MessageBox( this,
&quot;Plain MessageBox&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;This is a plain message box&quot;
);<BR>
<BR>
MessageBox mb = new MessageBox( this, &quot;Stop MessageBox&quot;,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;This is an stop message box&quot;,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;MessageBox.STOP );<BR>
<BR>
MessageBox mb = new MessageBox( this, &quot;Info MessageBox&quot;,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;This is an info message box&quot;,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;MessageBox.INFO );<BR>
<BR>
MessageBox mb = new MessageBox( this, &quot;Exclamation MessageBox&quot;,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;This is an exclamation message box&quot;,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;MessageBox.EXCLAMATION );<BR>
<BR>
MessageBox mb = new MessageBox( this, &quot;Question MessageBox&quot;,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;This is an question message box&quot;,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;MessageBox.QUESTION );</TT>
</BLOCKQUOTE>
<P>
The <TT>MessageBox</TT> is quite a
versatile class. As you'll see, it can help out in almost any
situation.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=579><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=579>
<BLOCKQUOTE>
In order for the <TT>MessageBox</TT> to work properly, the image files must reside in the same directory as your program. Otherwise, the image loader will not be able to find them.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H4>The <TT>ResponseDialog</TT> Class
</H4>
<P>
The <TT>ResponseDialog</TT> is the
only descendant of the <TT>MessageBox</TT>
class. This class extends the base class and adds a user-specified
number of buttons. Furthermore, the <TT>ResponseDialog</TT>
returns the number of the button that was pressed via an <TT>ACTION_EVENT</TT>
event.
<P>
The following code is the constructor for the <TT>ResponseDialog</TT>:
<BLOCKQUOTE>
<TT>public<BR>
ResponseDialog( Frame <I>parent</I>, String <I>title</I>, String
<I>message</I>,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String <I>buttons</I> )</TT>
</BLOCKQUOTE>
<P>
In the preceding code
<BLOCKQUOTE>
<TT><I>parent</FONT></I></TT><I> </I>is the
parent frame.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>title</FONT></I></TT><I> </I>is the
title of the message box.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>message</FONT></I></TT><I> </I>is
the message to be displayed to the user.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>imageToUse</FONT></I></TT><I> </I>is
an optional constant indicating which image to display. If an
image is not specified, the constant defaults to <TT>MessageBox.INFO</TT>.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>buttons</FONT></I></TT><I> </I>is
the comma-separated list of button names to create along the bottom
of the dialog.<BR>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=577><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=577>
<BLOCKQUOTE>
With this button freedom, you can create all sorts of dialog boxes: Yes/No, Yes/No/Cancel, Maybe, and so on. The choice is yours, and there is no need to create a new class. This class is completely usable as is.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
To notify you of which button was pressed, the <TT>ResponseDialog</TT>
generates an <TT>ACTION_EVENT</TT>
event with an argument of the zero-based index of the button.
For example, if you create a dialog with the buttons OK and Cancel
and the user presses the OK button, the <TT>ACTION_EVENT</TT>
event generated would have an argument of <TT>0</TT>.
If the user pressed the Cancel button, the argument would be <TT>1</TT>.
<P>
If the user closes the box without pressing a button, the <TT>ResponseDialog</TT>
generates an argument of <TT>-1</TT>.
This gives you total control to interpret the result.
<H3><A NAME="ThePickListClass">The <TT><FONT SIZE=4 FACE="Courier">PickList</TT></FONT><FONT SIZE=4>
Class</FONT></A></H3>
<P>
The last descendant from <TT>JifDialog</TT>
is the <TT>PickList</TT> class. This
abstract class is a framework for creating pick lists of data.
Figure 11.12 shows the pick list from the employee maintenance
application.
<P>
<A HREF="f11-12.gif" ><B>Figure 11.12 : </B><I>The employee pick list.</I></A>
<P>
To complete the class, thus making it usable, the derived class
must supply the <TT>init()</TT> method.
This should initialize the <TT>List</TT>
object contained within the pick list.
<P>
The <TT>init()</TT> source code for
the employee pick list is shown in Listing 11.6.
<HR>
<BLOCKQUOTE>
<B>Listing 11.6. The </B><TT><B>init()</FONT></B></TT><B>
source code for the employee pick list.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* init&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;init()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int rows = retrieveEmployees();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//*&nbsp;retrieveEmployees&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int<BR>
&nbsp;&nbsp;&nbsp;&nbsp;retrieveEmployees()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sql;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rv
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rows
= 0;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sql = &quot;select
* from emp_t order by last_name, first_name&quot;;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rv
= myConnection.getStatement().execute( sql );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch ( SQLException
e )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;No
employees to return...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
0 );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Is
this a result set?<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( rv )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResultSet
rs = myConnection.getStatement().getResultSet();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Spin
through the results and add them to the list...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while
( rs.next() )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EmployeeRecord
er = new EmployeeRecord( rs );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Add
to list...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( er.emp_id != -1 )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myList.addItem(
er.nice_name );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Add
to row mapper...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rowMap.insertElementAt(
er, rows );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Increment
row counter...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rows++;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch
( SQLException e )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Indicate
an error!<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rows
= -1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;We're
done!<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( rows );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<HR>
<P>
As you can see, the <TT>init()</TT>
method calls another method called <TT>retrieveEmployees()</TT>.
This method retrieves a list of employees from the database and
loads them into the list.
<P>
The <TT>PickList</TT> generates an
<TT>ACTION_EVENT</TT> event to the
owner of the pick list when the user clicks on a row or presses
a button.
<H2><A NAME="JavaTextComponentExtensions"><FONT SIZE=5 COLOR=#FF0000>Java
</FONT><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">TextComponent</TT></FONT><FONT SIZE=5 COLOR=#FF0000>
Extensions</FONT></A></H2>
<P>
The last two user interface classes are <TT>JifTextArea</TT>
and <TT>JifTextField</TT>. These classes
extend the default Java classes, <TT>TextArea</TT>
and <TT>TextField</TT>, by implementing
the <TT>SQLFactory</TT> interface
from our database classes (<A HREF="ch10.htm" >see Chapter 10</A>,
&quot;Database Classes,&quot; for more information). This interface,
in conjunction with the <TT>JifPanel</TT>
class, generates SQL code from a container of these text objects.
The two classes also add change-detection functionality.
<H3><A NAME="ChangeDetection">Change Detection</A></H3>
<P>
To generate correct SQL, the component needs to know whether the
data that it contains has changed. If it has not changed, no SQL
is needed. If the data has changed, however, a SQL statement should
be generated.
<P>
To handle this, the <TT>JifTextArea</TT>
and <TT>JifTextField</TT> classes
contain an instance variable called <TT>dataChange</TT>.
This Boolean declaration follows:
<BLOCKQUOTE>
<TT>protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataChange
= false;</TT>
</BLOCKQUOTE>
<P>
Whenever there is a change to the component's text, this variable
is set to <TT>true</TT> and an <TT>ACTION_EVENT</TT>
event is sent to the owner of this component. This way, the parent
container can act on the notice as well.
<P>
The <TT>didDataChange()</TT> method
determines whether there has been a change. The source follows:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* didDataChange&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;didDataChange()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( dataChange
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
You can call this method from anywhere.
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
This chapter introduced you to many of the user interface classes
that you've created. You learned about many user interface classes
that extend Java. These classes provide your intranet applications
with some really cool widgets for which your users will thank
you. With these classes you also can generate cool 3-D effects
in addition to awesome <TT>Dialog</TT>
extensions that really simplify a lot of coding efforts. All of
these classes can be used to extend and enhance your intranet
applications.
<P>
In the next chapter, &quot;Putting Them All Together,&quot; you
combine all the classes you've learned about into packages. In
addition, you create a new package that contains some classes
that uses all of those classes.

<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



