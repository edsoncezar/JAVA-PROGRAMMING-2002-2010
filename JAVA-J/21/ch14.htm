<HTML>
<HEAD>
<TITLE>Day 14 -- Windows, Networking, and Other Tidbits</TITLE>

<META>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT SIZE=6 COLOR=#FF0000>Day&nbsp;14</FONT></H1>
<H1><FONT SIZE=6 COLOR=#FF0000>Windows, Networking, and Other
Tidbits</FONT></H1>
<P>
<I><B>by Laura Lemay</B></I>
<HR>
<P>
<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENETS</A></FONT></B></CENTER>
<UL>
<LI><A HREF="#WindowsMenusandDialogBoxes">
Windows, Menus, and Dialog Boxes</A>
<UL>
<LI><A HREF="#TheawtWindowClasses">
The awt Window Classes</A>
<LI><A HREF="#Frames">
Frames</A>
<LI><A HREF="#ClosingWindows">
Closing Windows</A>
<LI><A HREF="#Menus">
Menus</A>
<LI><A HREF="#DialogBoxes">
Dialog Boxes</A>
<LI><A HREF="#Cursors">
Cursors</A>
<LI><A HREF="#WindowEvents">
Window Events</A>
<LI><A HREF="#StandaloneawtApplications">
Standalone awt Applications</A>
</UL>
<LI><A HREF="#NetworkinginJava">
Networking in Java</A>
<UL>
<LI><A HREF="#CreatingLinksInsideApplets">
Creating Links Inside Applets</A>
<LI><A HREF="#OpeningWebConnections">
Opening Web Connections</A>
<LI><A HREF="#TTFONTSIZEFACECourieropenStreamFONTTT">
<TT>openStream()</TT></A>
<LI><A HREF="#Sockets">
Sockets</A>
<LI><A HREF="#ChangestoSocketsforJava">
Changes to Sockets for Java 1.1</A>
</UL>
<LI><A HREF="#OtherAppletHints">
Other Applet Hints</A>
<UL>
<LI><A HREF="#TheTTFONTSIZEFACECouriershowStatusFONTTTFONTSIZEMethodFONT">
The <TT>showStatus()</TT>
Method</FONT></A>
<LI><A HREF="#AppletInformation">
Applet Information</A>
<LI><A HREF="#CommunicatingBetweenApplets">
Communicating Between Applets</A>
</UL>
<LI><A HREF="#Summary">
Summary</A>
<LI><A HREF="#QampABR">
Q&amp;A<BR>
</A>
</UL>

<HR>
<P>
Here you are on the last day of the second week, and you're just
about finished with applets and the awt. With the information
you'll learn today you can create a wide variety of applets and
applications using Java. Next week's lessons provide more of the
advanced stuff that you'll need if you start doing really serious
work in Java.
<P>
Today, to finish up this week, we'll cover three very different
topics:
<UL>
<LI>Windows, menus, and dialog boxes-the last of the awt classes
that enable you to pop up real windows and dialog boxes from applets,
to add menus to those windows, and to create standalone graphical
Java applications that can use all the awt features you've learned
about this week.
<LI>Networking-how to load new HTML files from a Java-enabled
browser, how to retrieve files from Web sites, and some basics
on how to work with generic sockets in Java.
<LI>Extra tidbits-the smaller stuff that didn't fit in anywhere
else, but that might be useful to you as you write your Java applets
and applications.
</UL>
<H2><A NAME="WindowsMenusandDialogBoxes"><FONT SIZE=5 COLOR=#FF0000>
Windows, Menus, and Dialog Boxes</FONT></A></H2>
<P>
Today you'll finish up the last bits of the awt that didn't fit
into yesterday's lesson. In addition to all the graphics, events,
user interface, and layout mechanisms that the awt provides, it
also provides windows, menus, and dialog boxes, enabling to you
create fully featured applications either as part of your applet
or independently for standalone Java applications.
<H3><A NAME="TheawtWindowClasses">
The awt Window Classes</A></H3>
<P>
The Java awt classes to produce windows and dialogs inherit from
a single class: <TT>Window</TT>. The
<TT>Window</TT> class, which itself
inherits from <TT>Container</TT> (and
is therefore a standard awt component), provides generic behavior
for all window-like things. Generally you don't use instances
of <TT>Window</TT>, however; you use
instances of <TT>Frame</TT> or <TT>Dialog</TT>.
Figure 14.1 shows the simple Window class hierarchy.
<P>
<A HREF="f14-1.gif"><B>Figure 14.1 : </B><I>The Window class hierarchy</I>.</A>
<P>
The <TT>Frame</TT> class provides
a window with a title bar, close boxes, and other platform-specific
window features. Frames also let you add menu bars. <TT>Dialog</TT>
is a more limited form of <TT>Frame</TT>
that typically doesn't have a title. <TT>FileDialog</TT>,
a subclass of <TT>Dialog</TT>, provides
a standard file-picker dialog box (usually only usable from inside
Java applications because of security restrictions on applets).
<P>
When you want to add a new window or dialog to your applet or
application, you'll create subclasses of the <TT>Frame</TT>
and <TT>Dialog</TT> classes.
<H3><A NAME="Frames">
Frames</A></H3>
<P>
Frames are windows that are independent of an applet and of the
browser that contains it-they are separate windows with their
own titles, resize handles, close boxes, and menu bars. You can
create frames for your own applets to produce windows, or you
can use frames in Java applications to hold the contents of that
application. 
<P>
A <I>frame</I> is a platform-specific window with a title, a menu
bar, close boxes, resize handles, and other window features. 
<P>
To create a frame, use one of the following constructors:
<UL>
<LI><TT>new Frame()</TT> creates a
basic frame without a title.
<LI><TT>new Frame(<I>String</I>)</TT>
creates a basic frame with the given title.
</UL>
<P>
Because frames inherit from <TT>Window</TT>,
which inherits from <TT>Container</TT>,
which inherits from <TT>Component</TT>,
frames are created and used much in the same way that other awt
components are created and used. Frames are containers, just like
panels are, so you can add other components to them just as you
would regular panels, using the <TT>add()</TT>
method. The default layout for frames is <TT>BorderLayout</TT>.
Here's a single example that creates a frame, sets its layout,
and adds two buttons:
<BLOCKQUOTE>
<PRE>
win = new Frame(&quot;My Cool Window&quot;);
win.setLayout(new BorderLayout(10, 20));
win.add(&quot;North&quot;, new Button(&quot;Start&quot;));
win.add(&quot;Center&quot;, new Button(&quot;Move&quot;));
</PRE>
</BLOCKQUOTE>
<P>
To set a size for the new frame, use the <TT>resize()</TT>
method with the width and height of the new frame. So, for example,
this line of code resizes the window to be 100 pixels wide and
200 pixels high:
<BLOCKQUOTE>
<PRE>
win.resize(100, 200);
</PRE>
</BLOCKQUOTE>
<P>
Note that because different systems have different ideas of what
a pixel is and different resolutions for those pixels, it's difficult
to create a window that is the &quot;right&quot; size for every
platform. Windows that work fine for one may be way too large
or too small for another. One way around this is to use the <TT>pack()</TT>
method instead of <TT>resize()</TT>.
The <TT>pack()</TT> method, which
has no arguments, creates a window of the smallest possible size
given the current sizes of all the components inside that window
and the layout manager and insets in use. Here's an example that
creates two buttons, and adds them to a window. The window will
then be resized to the smallest possible window that can still
hold those buttons:
<BLOCKQUOTE>
<PRE>
win = new Frame(&quot;My Other Cool Window&quot;);
win.setLayout(new FlowLayout()));
win.add(&quot;North&quot;, new Button(&quot;OK&quot;));
win.add(&quot;Center&quot;, new Button(&quot;Cancel&quot;));
win.pack();
</PRE>
</BLOCKQUOTE>
<P>
When you initially create a window, it's invisible. You need to
use the <TT>show()</TT> method to
make the window appear onscreen (you can use <TT>hide()</TT>
to hide it again):
<BLOCKQUOTE>
<PRE>
win.show();
</PRE>
</BLOCKQUOTE>
<P>
Note that when you pop up windows from inside applets, the browser
may indicate in some way that the window is not a regular browser
window-usually with a warning in the window itself. In Netscape,
there's a yellow bar at the bottom of every window that says <TT>Untrusted
Java Window</TT>. This warning is intended to let your
users know that your window comes from the applet and not from
the browser itself (remember that the frame class produces windows
that look just like normal system windows). The warning is to
prevent you from creating a malicious applet that might, for example,
ask the user for his password. There isn't anything you can do
to avoid this warning; it's there to stay as long as you want
to use windows with applets.
<P>
Listings14.1 and 14.2 show examples of a simple applet with a
pop-up window frame (both the applet and the window are shown
in Figure 14.2). The applet has two buttons: one to show the window,
and one to hide the window. The frame itself, created from a subclass
I created called <TT>BaseFrame</TT>,
contains a single label: <TT>This is a Window.</TT>
You'll use this basic window and applet all through this section,
so the more you understand what's going on here the easier it
will be later.
<P>
<A HREF="f14-2.gif"><B>Figure 14.2 : </B><I>Windows</I>.</A>
<HR>
<BLOCKQUOTE>
<B>Listing 14.1. A pop-up window.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
 1:import java.awt.*;
 2:
 3:public class PopupWindow extends java.applet.Applet {
 4:    Frame window;
 5:
 6:    public void init() {
 7:      add(new Button(&quot;Open Window&quot;));
 8:      add(new Button(&quot;Close Window&quot;));
 9:
10:      window = new BaseFrame(&quot;A Popup Window&quot;);
11:      window.resize(150,150);
12:      window.show();
13:    }
14:
15:    public boolean action(Event evt, Object arg) {
16:       if (evt.target instanceof Button) {
17:          String label = (String)arg;
18:          if (label.equals(&quot;Open Window&quot;)) {
19:              if (!window.isShowing()) 
20:                  window.show();
21:          }
22:          else if (label.equals(&quot;Close Window&quot;)) {
23:              if (window.isShowing())
24:                  window.hide();
25:          }
26:          return true;
27:       }  
28:       else return false;
29:    }
30:}
</PRE>
</BLOCKQUOTE>
<HR>
<HR>
<BLOCKQUOTE>
<B>Listing 14.2. The </B><TT><B>BaseFrame
</B></TT><B>class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
 1:import java.awt.*;
 2:
 3:class BaseFrame extends Frame {
 4:  String message = &quot;This is a Window&quot;;
 5:
 6:  BaseFrame1(String title) {
 7:    super(title);
 8:    setFont(new Font(&quot;Helvetica&quot;, Font.BOLD, 12));
 9:  }
10:
11:  public void paint(Graphics g) {
12:     g.drawString(message, 20, 20);
13:  }
14:}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
There are two classes that make up this example: The first, <TT>PopupWindow</TT>,
is the applet class that creates and controls the pop-up window.
In the <TT>init()</TT> method for
that class (lines 6 to 13), we added two control buttons to the
applet to control the window, and then created, resized, and showed
the window itself.
<P>
The control in this applet occurs when one of the buttons is pressed.
Here, the Open Window button simply shows the window if it's hidden
(lines 18 to 21), and hides it if it's showing (lines 22 to 25).
<P>
The window itself is a special kind of frame called <TT>BaseFrame</TT>.
In this example, the frame is fairly simple; all it does is paint
a text message near the top of the frame. Because frames are components,
just like other components, you could have just as easily added
a layout manager, buttons, text fields, and so on, to this frame.
<H3><A NAME="ClosingWindows">
Closing Windows</A></H3>
<P>
You may have noticed, if you started up that pop-up window applet
to play with it, that the new window's close box doesn't work.
Nothing happens when you click the mouse on the box. To implement
behavior for closing the window-for pop-up windows as in applets
to hide them, or to exit the application altogether for applications-you'll
have to use a <TT>handleEvent()</TT>
method in your <TT>Frame</TT> class
to test for the <TT>WINDOW_DESTROY</TT>
event.
<P>
In the pop-up window example, choosing the close box should hide
the window (call the <TT>hide()</TT>
method). You can then show it again using the Open Window button
in the applet. This is a very simple fix; just add the following
<TT>handleEvent()</TT> to your <TT>BaseFrame1</TT>
class:
<BLOCKQUOTE>
<PRE>
public boolean handleEvent(Event evt) {
   if (evt.id == Event.WINDOW_DESTROY) hide();
   return super.handleEvent(evt);
}
</PRE>
</BLOCKQUOTE>
<H3><A NAME="Menus">
Menus</A></H3>
<P>
Each new window you create can have its own menu bar along the
top of that window. Each menu bar can have a number of menus,
and each menu, in turn, can have menu items. The awt provides
classes for all these things called, respectively, <TT>MenuBar</TT>,
<TT>Menu</TT>, and <TT>MenuItem</TT>.
Figure 14.3 shows the menu classes.
<P>
<A HREF="f14-3.gif"><B>Figure 14.3 : </B><I>The awt menu classes</I>.</A>
<P>
Note that you can have menu bars and individual menus in Java
only on components that have title bars-frames in pop-up windows
from applets work just fine, as do Java application windows, but
you cannot have a menu bar attached to an applet itself. 
<H4>Menus and Menu Bars</H4>
<P>
To create a menu bar for a given window, create a new instance
of the class <TT>MenuBar</TT>:
<BLOCKQUOTE>
<PRE>
MenuBar mbar = new MenuBar();
</PRE>
</BLOCKQUOTE>
<P>
To set this menu bar as the default menu for the window, use the
<TT>setMenuBar()</TT> method (defined
in the <TT>Frame</TT> class):
<BLOCKQUOTE>
<PRE>
window.setMenuBar(mbar);
</PRE>
</BLOCKQUOTE>
<P>
Add individual menus (File, Edit, and so on) to the menu bar by
creating them and then adding them to the menu bar using <TT>add()</TT>:
<BLOCKQUOTE>
<PRE>
Menu myMenu = new Menu(&quot;File&quot;);
mbar.add(myMenu);
</PRE>
</BLOCKQUOTE>
<P>
Some systems provide a special help menu, which is drawn on the
right side of the menu bar as opposed to somewhere in the middle.
You can indicate that a specific menu is the help menu with the
<TT>setHelpMenu()</TT> method. The
given menu should already be added to the menu itself before being
made a help menu:
<BLOCKQUOTE>
<PRE>
Menu helpmenu = new Menu(&quot;Help&quot;);
mbar.add(helpmenu);
mbar.setHelpMenu(helpmenu);
</PRE>
</BLOCKQUOTE>
<P>
If, for any reason, you want to prevent a user from selecting
a menu, you can use the <TT>disable()</TT>
command on that menu (and the <TT>enable()</TT>
command to make it available again):
<BLOCKQUOTE>
<PRE>
myMenu.disable();
</PRE>
</BLOCKQUOTE>
<H4>Menu Items</H4>
<P>
There are four kinds of items you can add to individual menus:
<UL>
<LI>Instances of the class <TT>MenuItem</TT>,
for regular menu items
<LI>Instances of the class <TT>CheckBoxMenuItem</TT>,
for toggled menu items
<LI>Other menus, with their own menu items
<LI>Separators, for lines that separate groups of items on menus
</UL>
<P>
Regular menu items are added by using the <TT>MenuItem</TT>
class. Add them to a menu using the <TT>add()</TT>
method:
<BLOCKQUOTE>
<PRE>
Menu myMenu = new Menu(&quot;Tools&quot;);
myMenu.add(new MenuItem(&quot;Info&quot;));
myMenu.add(new MenuItem(&quot;Colors&quot;));
</PRE>
</BLOCKQUOTE>
<P>
Submenus can be added simply by creating a new instance of <TT>Menu</TT>
and adding it to the first menu. You can then add items to <I>that</I>
menu:
<BLOCKQUOTE>
<PRE>
Menu submenu = new Menu(&quot;Sizes&quot;);
myMenu.add(submenu);
submenu.add(new MenuItem(&quot;Small&quot;));
submenu.add(new MenuItem(&quot;Medium&quot;));
submenu.add(new MenuItem(&quot;Large&quot;));
</PRE>
</BLOCKQUOTE>
<P>
The <TT>CheckBoxMenuItem</TT> class
creates a menu item with a check box on it, enabling the menu
state to be toggled on and off (selecting it once makes the check
box appear selected; selecting it again unselects the check box).
Create and add a check box menu item the same way you create and
add regular menu items:
<BLOCKQUOTE>
<PRE>
CheckboxMenuItem coords =
    new CheckboxMenuItem(&quot;Show Coordinates&quot;);
myMenu.add(coords);
</PRE>
</BLOCKQUOTE>
<P>
Finally, to add a separator to a menu (a line used to separate
groups of items in a menu), create and add a menu item with a
single dash (<TT>-</TT>) as the label.
That special menu item will be drawn with a separator line. These
next two lines of Java code create a separator menu item and add
it to the menu <TT>myMenu</TT>:
<BLOCKQUOTE>
<PRE>
MenuItem msep = new MenuItem(&quot;-&quot;);
myMenu.add(msep);
</PRE>
</BLOCKQUOTE>
<P>
Any menu item can be disabled by using the <TT>disable()</TT>
method and enabled again using <TT>enable()</TT>.
Disabled menu items cannot be selected:
<BLOCKQUOTE>
<PRE>
MenuItem item = new MenuItem(&quot;Fill&quot;);
myMenu.addItem(item);
item.disable();
</PRE>
</BLOCKQUOTE>
<P>
You'll add a typical menu and menu bar to the pop-up window applet
in a bit; but first let's learn about how to activate menu items
when they're selected.
<H4>Menu Actions</H4>
<P>
The act of selecting a menu item causes an action event to be
generated. You can handle that action the same way you handle
other <TT>action</TT> methods-by overriding
<TT>action()</TT>. Both regular menu
items and check box menu items have actions that generate an extra
argument representing the label for that menu. You can use that
label to determine which action to take. Note, also, that because
<TT>CheckBoxMenuItem</TT> is a subclass
of <TT>MenuItem</TT>, you don't have
to treat that menu item as a special case. In this example, the
Show Coordinates menu item is a <TT>CheckBoxMenuItem</TT>,
and Fill is a regular menu item:
<BLOCKQUOTE>
<PRE>
public boolean action(Event evt, Object arg) {
    if (evt.target instanceof MenuItem) {
        String label = (String)arg;
        if (label.equals(&quot;Show Coordinates&quot;)) toggleCoords();
        else if (label.equals(&quot;Fill&quot;)) fillcurrentArea();
        return true;
    }
    else return false;
}
</PRE>
</BLOCKQUOTE>
<H4>A Pop-up Window with Menus</H4>
<P>
Let's add a menu to the pop-up window you created in the previous
section. There are two steps here: creating and adding the menu,
with all its menu items, to the layout, and then adding an action
method to deal with the actions. Here we'll modify the <TT>BaseFrame</TT>
class to include both these things; Listing 14.3 shows the new
code. Figure 14.4 shows the menu in action.
<P>
<A HREF="f14-4.gif"><B>Figure 14.4 : </B><I>A menu</I>.</A><BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
In the sample code on the CD, I created a new class called <TT>BaseFrame2</TT> for this part of the example, and a new class <TT>PopupWindowMenu.java</TT> to be the applet that owns this window. Use <TT>PopupWindowMenu.html</TT> to view it.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 14.3. </B><TT><B>BaseFrame</B></TT><B>
with a menu.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
 1:import java.awt.*;
 2:
 3:class BaseFrame2 extends Frame {
 4:  String message = &quot;This is a Window&quot;;
 5:
 6:  BaseFrame2(String title) {
 7:    super(title);
 8:    setFont(new Font(&quot;Helvetica&quot;, Font.BOLD, 12));
 9:
10:    MenuBar mb = new MenuBar();
11:    Menu m = new Menu(&quot;Colors&quot;);
12:    m.add(new MenuItem(&quot;Red&quot;));
13:    m.add(new MenuItem(&quot;Blue&quot;));
14:    m.add(new MenuItem(&quot;Green&quot;));
15:    m.add(new MenuItem(&quot;-&quot;));
16:    m.add(new CheckboxMenuItem(&quot;Reverse Text&quot;));
17:    mb.add(m);
18:    setMenuBar(mb);
19:  }
20:
21:  public boolean action(Event evt, Object arg) {
22:    String label = (String)arg;
23:    if (evt.target instanceof MenuItem) {
24:      if (label.equals(&quot;Red&quot;)) setBackground(Color.red);
25:      else if (label.equals(&quot;Blue&quot;)) setBackground(Color.blue);
26:      else if (label.equals(&quot;Green&quot;)) setBackground(Color.green);
27:      else if (label.equals(&quot;Reverse Text&quot;)) {
28:         if (getForeground() == Color.black) {
29:            setForeground(Color.white);
30:         } else setForeground(Color.black);
31:      }
32:      repaint();
33:      return true;
34:    } else return false;
35:  }
36:  
37:  public void paint(Graphics g) {
38:     g.drawString(message, 20, 20);
39:  }
40:
41:  public boolean handleEvent(Event evt) {
42:     if (evt.id == Event.WINDOW_DESTROY) hide();
43:      return super.handleEvent(evt);
44:  }
45:}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
This menu has four items: one each for the colors red, blue, and
green (which, when selected, change the background of the window),
and one check box menu item for reversing the color of the text
(to white). All are added as part of the constructor to this class,
in lines 6 to 19. 
<P>
To handle these menu items when they're chosen, you need an <TT>action()</TT>
method. Inside <TT>action()</TT> you
test to see if the action came from a menu item (which includes
the one check box menu item), and if so, test for each of the
menu labels in turn. For the red, blue, and green menu items,
all you need to do is set the background. For the Reverse Text
toggle, you need to first find out the current color of the text,
and then reverse it.
<P>
To finish up, call a <TT>repaint()</TT>
to make sure the background and the text get updated properly
and return the appropriate boolean.
<H3><A NAME="DialogBoxes">
Dialog Boxes</A></H3>
<P>
Dialog boxes are functionally similar to frames in that they pop
up new windows on the screen. However, dialog boxes are intended
to be used for transient windows-for example, windows that let
you know about warnings, windows that ask you for specific information,
and so on. Dialogs don't usually have title bars or many of the
more general features that windows have (although you can create
one with a title bar), and they can be made nonresizable or modal
(modal dialogs prevent input to any other windows on the screen
until they are dismissed).
<P>
<I>Dialogs</I> are transient windows intended to alert the user
to some event or to get input from the user. Unlike frames, dialogs
do not generally have a title bar or close boxes.
<P>
A <I>modal dialog</I> prevents input to any of the other windows
on the screen until that dialog is dismissed. (You won't be able
to bring other windows to the front or iconify a modal dialog
window; you must actually dismiss the modal dialog before being
able to do anything else on the system. Warnings and alerts are
typically modal dialogs.)
<P>
The awt provides two kinds of dialog boxes: the <TT>Dialog</TT>
class, which provides a generic dialog, and <TT>FileDialog</TT>,
which produces the platform-specific file browser dialog.
<H4><TT>Dialog </TT>Objects</H4>
<P>
Dialogs are created and used in much the same way as windows.
To create a generic dialog, use one of these constructors:
<UL>
<LI><TT>Dialog(Frame, boolean)</TT>
creates an initially invisible dialog, attached to the current
frame, which is either modal (<TT>true</TT>)
or not (<TT>false</TT>).
<LI><TT>Dialog(Frame, String, boolean)</TT>
is the same as the previous constructor, with the addition of
a title bar and a title indicated by the string argument.
</UL>
<P>
The dialog window, like the frame window, is a panel on which
you can lay out and draw user interface components and perform
graphics operations, just as you would any other panel. Like other
windows, the dialog is initially invisible, but you can show it
with <TT>show()</TT> and hide it with
<TT>hide()</TT>.
<P>
Let's add a dialog to that same example with the pop-up window.
Here we'll modify the <TT>BaseFrame</TT>
class once again to include a dialog, and add a new class, <TT>TextDialog</TT>,
which produces a text entry dialog similar to the one shown in
Figure 14.5.
<P>
<A HREF="f14-5.gif"><B>Figure 14.5 : </B><I>The Enter Text dialog</I>.</A>
<P>
To add the dialog to the <TT>BaseFrame</TT>
class, the changes are minor. First you'll need an instance variable
to hold the dialog, since you'll be referring to it throughout
this class:
<BLOCKQUOTE>
<PRE>
TextDialog dl;
</PRE>
</BLOCKQUOTE>
<P>
Next you'll add a menu item to the <TT>BaseFrame</TT>
class's constructor method to change the text the pop-up window
displays. This new menu item goes just after the Reverse Text
item:
<BLOCKQUOTE>
<PRE>
...
m.add(new CheckboxMenuItem(&quot;Reverse Text&quot;));
m.add(new MenuItem(&quot;Set Text...&quot;));
...
</PRE>
</BLOCKQUOTE>
<P>
In that same constructor method, you can create the dialog (an
instance of the new class <TT>TextDialog</TT>
you'll create in a bit), assign it to the <TT>dl</TT>
instance variable, and resize it (as shown in the next two lines
of code). You don't want to show it yet because it should only
appear when the correct menu item is selected:
<BLOCKQUOTE>
<PRE>
dl = new TextDialog(this, &quot;Enter Text&quot;, true);
dl.resize(150,100);
</PRE>
</BLOCKQUOTE>
<P>
To get the dialog to appear at the appropriate time, you'll add
a line to the <TT>action()</TT> method
so that when the Set Text menu item is chosen, the <TT>dl.show()</TT>
method is called. You can put this action in the same <TT>if-else</TT>
block as the rest of the actions:
<BLOCKQUOTE>
<PRE>
...
else if (label.equals(&quot;Green&quot;)) setBackground(Color.green);
else if (label.equals(&quot;Set Text...&quot;)) dl.show();
else if (label.equals(&quot;Reverse Text&quot;)) {
...
</PRE>
</BLOCKQUOTE>
<P>
That's the end of the behavior you have to add to the window to
create a dialog; the rest of the behavior goes into the <TT>TextDialog</TT>
class, the code for which is shown in Listing 14.4.
<HR>
<BLOCKQUOTE>
<B>Listing 14.4. The </B><TT><B>TextDialog
</B></TT><B>class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
 1:import java.awt.*;
 2:
 3:class TextDialog extends Dialog {
 4:  TextField tf;
 5:  BaseFrame3 theFrame;
 6:
 7:  TextDialog(Frame parent, String title, boolean modal) {
 8:    super(parent, title, modal);
 9:
10:    theFrame = (BaseFrame3)parent;
11:    setLayout(new BorderLayout(10,10));
12:    setBackground(Color.white);
13:    tf = new TextField(theFrame.message,20);
14:    add(&quot;Center&quot;, tf);
15:    add(&quot;South&quot;, new Button(&quot;OK&quot;));
16:    resize(150,75);
17:  }
18:
19:  public Insets insets() {
20:    return new Insets(30,10,10,10);
21:  }
22:
23:  public boolean action(Event evt, Object arg) {
24:    String label = (String)arg;
25:    if (evt.target instanceof Button) {
26:      if (label == &quot;OK&quot;) {
27:         hide();
28:         theFrame.message = tf.getText();
29:         theFrame.repaint();
30:      }
31:    }
32:    else return false;
33:    return true;
34:  } 
35:}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
In many ways this dialog class is very nearly the same as the
<TT>BaseFrame</TT> class. It has a
constructor that sets up the layout of the components, and an
<TT>action()</TT> method to deal with
its behavior. This one also has an <TT>insets()</TT>
method for more layout information, but that's not a significant
difference.
<P>
There are a few things to note about this code. First of all,
note that the <TT>TextDialog</TT>
class has a reference back up to its parent frame. It needs to
reference this so it can update that frame with the new text information.
Why does the dialog need to update the frame, rather than the
frame figuring out when it needs updating? Because only the dialog
knows when it's been dismissed. It's the dialog that deals with
the change when the user presses OK, not the frame. So the dialog
needs to be able to reach back to the original frame. Line 5 defines
an instance variable to hold that reference.
<P>
The text dialog gets a reference to the parent frame through its
constructor. This is actually the standard constructor for dialogs,
so nothing new needs to be created here. You can simply call <TT>super()</TT>
to initialize the dialog, and then add other bits to it. The first
argument to the constructor is the frame argument. This is that
hookup to the frame. But since you're getting a frame object,
and you want a <TT>BaseFrame</TT>
object, you'll have to cast it before you can assign it to the
<TT>theFrame</TT> instance variable.
Do this in line 10. 
<P>
The remainder of the constructor for this dialog class simply
creates the layout: a text field and a button in a border layout.
<P>
The <TT>action()</TT> method is what
tells the dialog to hide itself. Mouse actions are broadcast to
the window on which they occur; they do not percolate across windows,
which is why you can't test to see if the OK button in the dialog
was pressed from inside the <TT>BaseFrame</TT>
class. Here you'll create an <TT>action()</TT>
method to do two things when the OK button is pressed: hide the
dialog and update the text message in the frame. Here's where
that frame reference is important; in line 28 you're extracting
the text that was entered into the dialog's text field and putting
it into the frame's message instance variable. The next time the
frame goes to paint (and you tell it to <TT>repaint()</TT>
in line 29), the text message will get updated.
<H4>Attaching Dialogs to Applets</H4>
<P>
Dialogs can only be attached to frames; to create a dialog you
have to pass an instance of the <TT>Frame</TT>
class to one of the dialog's constructor methods.
<P>
This would imply that you cannot create dialog boxes that are
attached to applets. Because applets don't have explicit frames,
you cannot give the <TT>Dialog</TT>
class a frame argument. Through a bit of sneaky code, however,
you can get ahold of the frame object that contains that applet
(often the browser or applet viewer window itself) and then use
that object as the dialog's frame. 
<P>
This sneaky code makes use of the <TT>getParent()</TT>
method, defined for all awt components. The <TT>getParent()</TT>
method returns the object that contains this object. The parent
of all awt applications, then, must be a frame. Applets behave
in this same way; by calling <TT>getParent()</TT>
repeatedly, eventually you should be able to get ahold of an instance
of <TT>Frame</TT>. Here's the sneaky
code to do this that you can put inside your applet:
<BLOCKQUOTE>
<PRE>
Object anchorpoint = getParent()
while (! (anchorpoint instanceof Frame))
   anchorpoint = ((Component)anchorpoint).getParent();
</PRE>
</BLOCKQUOTE>
<P>
In the first line of this code, you create a local variable, called
<TT>anchorpoint</TT>, to hold the
eventual frame for this applet. The object assigned to <TT>anchorpoint</TT>
may be one of many classes, so we'll declare its type to be <TT>Object</TT>.
<P>
The second two lines of this code are a <TT>while</TT>
loop that calls <TT>getParent()</TT>
on each different object up the chain until it gets to an actual
<TT>Frame</TT> object. Note here that
since the <TT>getParent()</TT> method
is only defined on objects that inherit from <TT>Component</TT>,
we have to cast the value of <TT>anchorpoint</TT>
to <TT>Component</TT> each time for
the <TT>getParent()</TT> method to
work.
<P>
After the loop exits, the object contained in the <TT>anchorpoint</TT>
variable will be an instance of the <TT>Frame</TT>
class (or one of its subclasses). You can then create a <TT>Dialog</TT>
object attached to that frame, casting the <TT>anchorpoint
</TT>one more time to make sure you've got a <TT>Frame</TT>
object:
<BLOCKQUOTE>
<PRE>
TextDialog dl = new TextDialog((Frame)anchorpoint, 
   &quot;Enter Text&quot;, true);
</PRE>
</BLOCKQUOTE>
<H4>File Dialog Objects</H4>
<P>
The <TT>FileDialog</TT> class provides
a basic file open/save dialog box that enables you to access the
file system. The <TT>FileDialog</TT>
class is system-independent, but depending on the platform, the
standard Open File or Save File dialog is brought up.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
For applets, whether or not you can even use instances of <TT>FileDialog</TT> is dependent on the browser (Netscape simply produces an error). <TT>FileDialog</TT> is much more useful in standalone applications.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
To create a file dialog, use the following constructors:
<UL>
<LI><TT>FileDialog(Frame, String)</TT>
creates an Open File dialog, attached to the given frame, with
the given title. This form creates a dialog to load a file.
<LI><TT>FileDialog(Frame, String, int)</TT>
also creates a file dialog, but that integer argument is used
to determine whether the dialog is for loading a file or saving
a file (the only difference is the labels on the buttons; the
file dialog does not actually open or save anything). The possible
options for the mode argument are <TT>FileDialog.LOAD</TT>
and <TT>FileDialog.SAVE</TT>.
</UL>
<P>
After you create a <TT>FileDialog</TT>
instance, use <TT>show()</TT> to display
it:
<BLOCKQUOTE>
<PRE>
FileDialog fd = new FileDialog(this, &quot;FileDialog&quot;);
fd.show();
</PRE>
</BLOCKQUOTE>
<P>
When the reader chooses a file in the File dialog and dismisses
it, you can then access the filename they chose by using the <TT>getDirectory()</TT>
and <TT>getFile()</TT> methods; both
return strings indicating the values the reader chose. You can
then open that file by using the stream and file handling methods
(which you'll learn about next week) and then read from or write
to that file.
<H3><A NAME="Cursors">
Cursors</A></H3>
<P>
If you use frames in your applets or applications, you can also
set the cursor's icon at given moments in your program's execution,
to signal wait conditions or other events happening in your program.
<P>
The <TT>getCursorType()</TT> and <TT>setCursor()</TT>
methods are defined in the <TT>Frame</TT>
class. If you can get at a <TT>Frame</TT>
object, you can set the cursor (you'll typically set cursors for
windows, but you can also set cursors for applets using the <TT>getParent()</TT>
method that I explained in the section &quot;Attaching Dialogs
to Applets&quot;). Both of these methods use a set of predefined
cursor types in the <TT>Frame</TT>
class. Table 14.1 shows the cursor types you can use (and test
for) in your windows.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Keep in mind that not all platforms use the same cursors. For example, cursors for resizing windows do not exist on Macintoshes.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
<CENTER><B>Table 14.1. Cursor types.</B></CENTER>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=233><B>Class Variable</B></TD><TD WIDTH=357><B>Cursor</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=233><TT>Frame.CROSSHAIR_CURSOR</TT>
</TD><TD WIDTH=357>A cross-hair (plus-shaped) cursor</TD></TR>
<TR VALIGN=TOP><TD WIDTH=233><TT>Frame.DEFAULT_CURSOR</TT>
</TD><TD WIDTH=357>The default cursor (usually a pointer or arrow)
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=233><TT>Frame.E_RESIZE_CURSOR</TT>
</TD><TD WIDTH=357>A cursor to indicate something is being resized
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=233><TT>Frame.HAND_CURSOR</TT>
</TD><TD WIDTH=357>A hand-shaped cursor (to move an object or the background)
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=233><TT>Frame.MOVE_CURSOR</TT>
</TD><TD WIDTH=357>A cursor to indicate that something is being moved
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=233><TT>Frame.N_RESIZE_CURSOR</TT>
</TD><TD WIDTH=357>The top edge of a window is being resized</TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=233><TT>Frame.NE_RESIZE_CURSOR</TT>
</TD><TD WIDTH=357>The top-right corner of a window is being resized
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=233><TT>Frame.NW_RESIZE_CURSOR</TT>
</TD><TD WIDTH=357>The top-left corner of a window is being resized
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=233><TT>Frame.S_RESIZE_CURSOR</TT>
</TD><TD WIDTH=357>The bottom edge of a window is being resized
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=233><TT>Frame.SE_RESIZE_CURSOR</TT>
</TD><TD WIDTH=357>The bottom-right corner of the window is being resized
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=233><TT>Frame.SW_RESIZE_CURSOR</TT>
</TD><TD WIDTH=357>The bottom-left corner of the window is being resized
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=233><TT>Frame.TEXT_CURSOR</TT>
</TD><TD WIDTH=357>A text-entry cursor (sometimes called an I-beam)
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=233><TT>Frame.W_RESIZE_CURSOR</TT>
</TD><TD WIDTH=357>The left edge of a window is being resized
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=233><TT>Frame.WAIT_CURSOR</TT>
</TD><TD WIDTH=357>A long operation is taking place (usually an icon for a watch or an hourglass)
</TD></TR>
</TABLE>
</CENTER>
<P>
<H3><A NAME="WindowEvents">
Window Events</A></H3>
<P>
Yesterday you learned about writing your own event handler methods,
and you noted that the <TT>Event</TT>
class defines many standard events for which you can test. Window
events are part of that list, so if you use windows, these events
may be of interest to you, (for example, to hide a window when
it's closed, to stop a thread from running when the window is
iconified, or to perform some operation when a file is loaded
or saved).
<P>
You can test the <TT>id</TT> instance
variable of the event object in your <TT>handleEvent()</TT>
method to see if any of these events have occurred:
<BLOCKQUOTE>
<PRE>
if (evt.id == Event.WINDOW_DESTROY) hide();
</PRE>
</BLOCKQUOTE>
<P>
Table 14.2. shows the various Window events.<BR>
<P>
<CENTER><B>Table 14.2. Window events from the </B><TT><B>Event
</B></TT><B>class.</B></CENTER>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=176><TT>WINDOW_DESTROY</TT>
</TD><TD WIDTH=414>Generated when a window is destroyed using the close box or the Close menu item
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=176><TT>WINDOW_EXPOSE</TT>
</TD><TD WIDTH=414>Generated when the window is brought forward from behind other windows
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=176><TT>WINDOW_ICONIFY</TT>
</TD><TD WIDTH=414>Generated when the window is iconified</TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=176><TT>WINDOW_DEICONIFY</TT>
</TD><TD WIDTH=414>Generated when the window is restored from an icon
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=176><TT>WINDOW_MOVED</TT>
</TD><TD WIDTH=414>Generated when the window is moved</TD></TR>
</TABLE>
</CENTER>
<P>
<H3><A NAME="StandaloneawtApplications">
Standalone awt Applications</A></H3>
<P>
After all the space and time I've devoted to creating applets
up to this point, you may be surprised that I'm sticking a description
of graphical Java applications here at the end, and in a fairly
small section at that. The reason for this is that other than
a few simple lines of code and in the environment each runs in,
there's not a lot of difference between a Java applet and a graphical
Java application. Everything you've learned up to this point about
the awt including the graphics methods, animation techniques,
events, UI components, and windows and dialogs, can be used the
same way in Java applications as they can in applets. And applications
have the advantage of being &quot;outside the sandbox&quot;-they
have none of the security restrictions that applets have. You
can do just about anything you want to with an application.
<P>
So how do you go about creating a graphical Java application?
The code to do it is almost trivial. Your main application class
should inherit from <TT>Frame</TT>.
If it uses threads (for animation or other processing), it should
also implement <TT>Runnable</TT>:
<BLOCKQUOTE>
<PRE>
class MyawtApplication extends Frame implements Runnable {
...
}
</PRE>
</BLOCKQUOTE>
<P>
Inside the <TT>main()</TT> method
for your application, you create a new instance of your class-because
your class extends <TT>Frame</TT>,
that'll give you a new awt window that you can then resize and
show as you would any awt window. Inside the constructor method
for your class you'll set up the usual awt features for a window
that you might usually do in an <TT>init()</TT>
method for an applet: Set the title, add a layout manager, create
and add components such as a menu bar or other UI elements, start
up a thread, and so on. Here's a simple example:
<BLOCKQUOTE>
<PRE>
class MyawtApplication extends Frame implements Runnable {
    
    MyawtApplication(String title) {
       super(title);

       setLayout(new FlowLayout());
       add(new Button(&quot;OK&quot;));
       add(new Button(&quot;Reset&quot;));
       add(new Button(&quot;Cancel&quot;));
    }

    public static void main(String args[]) {
      MyawtApplications app = new MyawtApplication(&quot;Hi!  I'm an application&quot;);
      app.resize(300,300);
      app.show();
   }
}
</PRE>
</BLOCKQUOTE>
<P>
For the most part, you can use any of the methods you've learned
about this week to control and manage your application. The only
methods you cannot use are those specific to applets (that is,
those defined in <TT>java.applet.Applet</TT>,
which includes methods for retrieving URL information and playing
audio clips-see the API documentation for that class for more
details).
<H2><A NAME="NetworkinginJava"><FONT SIZE=5 COLOR=#FF0000>
Networking in Java</FONT></A></H2>
<P>
Networking is the capability of making connections from your applet
or application to a system over the network. Networking in Java
involves classes in the <TT>java.net</TT>
package, which provide cross-platform abstractions for simple
networking operations, including connecting and retrieving files
by using common Web protocols and creating basic UNIX-like sockets.
Used in conjunction with input and output streams (which you'll
learn much more about next week), reading and writing files over
the network becomes as easy as reading or writing to files on
the local disk.
<P>
There are restrictions, of course. Java applets usually cannot
read or write from the disk on the machine where the browser is
running. Java applets cannot connect to systems other than the
one on which they were originally stored. Even given these restrictions,
you can still accomplish a great deal and take advantage of the
Web to read and process information over the Net.
<P>
This section describes three ways you can communicate with systems
on the Net:
<UL>
<LI><TT>showDocument()</TT>, which
enables an applet to tell the browser to load and link to another
page on the Web
<LI><TT>openStream()</TT>, a method
that opens a connection to a URL and enables you to extract data
from that connection
<LI>The socket classes, <TT>Socket</TT>
and <TT>ServerSocket</TT>, which enable
you to open standard socket connections to hosts and read to and
write from those connections
</UL>
<H3><A NAME="CreatingLinksInsideApplets">
Creating Links Inside Applets</A></H3>
<P>
Probably the easiest way to use networking inside an applet is
to tell the browser running that applet to load a new page. You
can use this, for example, to create animated image maps that,
when clicked, load a new page.
<P>
To link to a new page, you create a new instance of the class
URL. You saw some of this when you worked with images, but let's
go over it a little more thoroughly here.
<P>
The <TT>URL</TT> class represents
a uniform resource locator. To create a new URL, you can use one
of four different forms:
<UL>
<LI><TT>URL(String, String, int, String)</TT>
creates a new URL object, given a protocol (http, ftp, gopher,
file), a hostname (<TT>www.lne.com</TT>,
<TT>ftp.netcom.com</TT>), a port number
(<TT>80</TT> for http), and a filename
or pathname.
<LI><TT>URL(String, String, String)</TT>
does the same thing as the previous form, minus the port number.
<LI><TT>URL(URL, String)</TT> creates
a URL, given a base path and a relative path. For the base, you
can use <TT>getDocumentBase()</TT>
for the URL of the current HTML file, or <TT>getCodeBase()</TT>
for the URL of the Java applet class file. The relative path will
be tacked onto the last directory in those base URLs (just like
with images and sounds).
<LI><TT>URL(String)</TT> creates a
URL object from a URL string (which should include the protocol,
hostname, optional port name, and filename).
</UL>
<P>
For the last one (creating a URL from a string), you have to catch
a malformed URL exception, so surround the URL constructor with
a <TT>try...catch</TT>:
<BLOCKQUOTE>
<PRE>
String url = &quot;<A HREF="http://www.yahoo.com/">http://www.yahoo.com/</A>&quot;;
try { theURL = new URL(url); }
catch ( MalformedURLException e) {
    System.out.println(&quot;Bad URL: &quot; + theURL);
}
</PRE>
</BLOCKQUOTE>
<P>
Getting a URL object is the hard part. Once you have one, all
you have to do is pass it to the browser. Do this by using this
single line of code, where <TT>theURL</TT>
is the URL object to link to:
<BLOCKQUOTE>
<PRE>
getAppletContext().showDocument(theURL);
</PRE>
</BLOCKQUOTE>
<P>
The browser that contains the Java applet with this code will
then load and display the document at that URL.
<P>
Listing 14.5 shows two classes: <TT>ButtonLink</TT>
and its helper class <TT>Bookmark</TT>.
<TT>ButtonLink</TT> is a simple applet
that displays three buttons that represent important Web locations
(the buttons are shown in Figure 14.6). Clicking on the buttons
causes the document to be loaded from the locations to which those
buttons refer.
<P>
<A HREF="f14-6.gif"><B>Figure 14.6 : </B><I>Bookmark buttons</I>.</A>
<HR>
<BLOCKQUOTE>
<B>Listing 14.5. Bookmark buttons.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
 1: // Buttonlink.java starts here
 2: import java.awt.*;
 3: import java.net.*;
 4:
 5: public class ButtonLink extends java.applet.Applet {
 6:
 7:    Bookmark bmlist[] = new Bookmark[3];
 8:
 9:    public void init() {
10:        bmlist[0] = new Bookmark(&quot;Laura's Home Page&quot;,
11:             &quot;<A HREF="http://www.lne.com/lemay/">http://www.lne.com/lemay/</A>&quot;);
12:         bmlist[1] = new Bookmark(&quot;Gamelan&quot;,
13:             &quot;<A HREF="http://www.gamelan.com">http://www.gamelan.com</A>&quot;);
14:         bmlist[2]= new Bookmark(&quot;Java Home Page&quot;,
15:             &quot;<A HREF="http://java.sun.com">http://java.sun.com</A>&quot;);
16:
17:         setLayout(new GridLayout(bmlist.length,1, 10, 10));
18:         for (int i = 0; i &lt; bmlist.length; i++) {
19:             add(new Button(bmlist[i].name));
20:         }
21:     }
22:
23:     public boolean action(Event evt, Object arg) {
24:         if (evt.target instanceof Button) {
25:             linkTo((String)arg);
26:             return true;
27:         }
28:         else return false;
29:     }
30: 
31:     void linkTo(String name) {
32:         URL theURL = null;
33:         for (int i = 0; i &lt; bmlist.length; i++) {
34:             if (name.equals(bmlist[i].name))
35:                 theURL = bmlist[i].url;
36:         }
37:         if (theURL != null)
38:             getAppletContext().showDocument(theURL);
39:     }
40: } //ButtonLink.java ends here
41:
42: //Bookmark.java starts here
43: import java.net.URL;
44: import java.net.MalformedURLException;
45:
46: class Bookmark {
47:     String name;
48:     URL url;
49: 
50:     Bookmark(String name, String theURL) {
51:         this.name = name;
52:         try { this.url = new URL(theURL); }
53:         catch ( MalformedURLException e) {
54:         System.out.println(&quot;Bad URL: &quot; + theURL);
55:     }
56: }
57:} //Bookmark.java ends here
</PRE>
</BLOCKQUOTE>
<HR>
<P>
Two classes make up this applet: The first, <TT>ButtonLink</TT>,
implements the actual applet itself; the second, <TT>Bookmark</TT>,
is a class representing a bookmark. Bookmarks have two parts:
a name and a URL.
<P>
This particular applet creates three bookmark instances (lines
10 through 15) and stores them in an array of bookmarks (this
applet could be easily modified to accept bookmarks as parameters
from an HTML file). For each bookmark, a button is created whose
label is the value of the bookmark's name.
<P>
When the buttons are pressed, the <TT>linkTo()</TT>
method is called. <TT>linkTo()</TT>,
defined in lines 31 to 38, extracts the name of the button from
the event, uses it to look up the actual URL from the bookmark
object, and then tells the browser to load the URL referenced
by that bookmark.
<H3><A NAME="OpeningWebConnections">
Opening Web Connections</A></H3>
<P>
Rather than asking the browser to just load the contents of a
file, sometimes you might want to get hold of that file's contents
so that your applet can use them. If the file you want to grab
is stored on the Web, and can be accessed using the more common
URL forms (<TT>http</TT>, <TT>ftp</TT>,
and so on), your applet can use the URL class to get it.
<P>
Note that for security reasons, applets can by default connect
back only to the same host from which they originally loaded.
This means that if you have your applets stored on a system called
<TT>www.myhost.com</TT>, the only
machine your applet can open a connection to will be that same
host (and that same host<I>name</I>, so be careful with host aliases).
If the file the applet wants to retrieve is on that same system,
using URL connections is the easiest way to get it.
<P>
This security restriction will change how you've been writing
and testing applets up to this point. Because we haven't been
dealing with network connections, we've been able to do all our
testing on the local disk simply by opening the HTML files in
a browser or with the <TT>appletviewer </TT>tool.
You cannot do this with applets that open network connections.
In order for those applets to work correctly, you must do one
of two things:
<UL>
<LI>Run your browser on the same machine that your Web server
is running on. If you don't have access to your Web server, you
can often install and run a Web server on your local machine.
<LI>Upload your class and HTML files to your Web server each time
you want to test them. Then, instead of using Open File to test
your applets, use the actual URL of the HTML file instead. 
</UL>
<P>
You'll know when you're not doing things right in regard to making
sure your applet, and the connection it's opening, are on the
same server. If you try to load an applet or a file from different
servers, you'll get a security exception along with a lot of other
scary error messages printed to your screen or to the Java console.
<P>
That said, let's move on to the methods and classes for retrieving
files from the Web.
<H3><A NAME="TTFONTSIZEFACECourieropenStreamFONTTT">
<TT>openStream()</TT></A></H3>
<P>
The URL class defines a method called <TT>openStream()</TT>,
which opens a network connection using the given URL (an HTTP
connection for Web URLs, an FTP connection for FTP URLs, and so
on) and returns an instance of the class <TT>InputStream</TT>
(part of the <TT>java.io</TT> package).
If you convert that stream to a <TT>DataInputStream</TT>
(with a <TT>BufferedInputStream</TT>
in the middle for better performance), you can then read characters
and lines from that stream (you'll learn all about streams on
<A HREF="ch19.htm">Day 19</A>, &quot;Streams and I/O&quot;). For example, these lines
open a connection to the URL stored in the variable <TT>theURL</TT>,
and then read and echo each line of the file to the standard output:
<BLOCKQUOTE>
<PRE>
try {
    InputStream in = theURL.openStream();
    DataInputStream data = new DataInputStream(new BufferedInputStream(in);

    String line;
    while ((line = data.readLine()) != null) {
        System.out.println(line);
    }
}
catch (IOException e) {
    System.out.println(&quot;IO Error: &quot; + e.getMessage());
}<BR>
</PRE>
</BLOCKQUOTE>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
You need to wrap all those lines in a <TT>try...catch</TT> statement to catch <TT>IOException</TT>s generated. You'll learn more about IOExceptions and the <TT>try</TT> and <TT>catch</TT> statements on <A HREF="ch17.htm">Day 17</A>, &quot;Exceptions.&quot;

</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
Here's an example of an applet that uses the <TT>openStream()</TT>
method to open a connection to a Web site, reads a file from that
connection (Edgar Allen Poe's poem &quot;The Raven&quot;), and
displays the result in a text area. Listing 14.6 shows the code;
Figure 14.7 shows the result after the file has been read.
<P>
<A HREF="f14-7.gif"><B>Figure 14.7 : </B><I>The </I><TT>GetRaven</TT><I>
applet</I>.</A>
<P>
An important note: If you compile this code as written, it won't
work-you'll get a security exception. The reason is that this
applet opens a connection to the server <TT>www.lne.com</TT>
to get the file <TT>raven.txt</TT>.
When you compile and run this applet, that applet isn't running
on <TT>www.lne.com</TT> (unless you're
me, and I already know about this problem). Before you compile
this applet, make sure you change line 18 to point to a copy of
<TT>raven.txt</TT> on your server,
and install your applet and your HTML files on that same server
(you can get <TT>raven.txt</TT> from
the CD or from that very URL).
<P>
Alternately, you can use your browser to point to the URL <TT><A HREF="http://www.lne.com/Web/JavaProf/GetRaven.html">http://www.lne.com/Web/JavaProf/GetRaven.html</A></TT>.
That Web page loads this very applet and downloads the file correctly.
Because both the applet and the text file are on the same server,
it works just fine.
<HR>
<BLOCKQUOTE>
<B>Listing 14.6. The </B><TT><B>GetRaven</B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
 1: import java.awt.*;
 2: import java.io.DataInputStream;
 3: import java.io.BufferedInputStream;
 4: import java.io.IOException;
 5: import java.net.URL;
 6: import java.net.URLConnection;
 7: import java.net.MalformedURLException;
 8:
 9: public class GetRaven extends java.applet.Applet implements Runnable {
10:   URL theURL;
11:  Thread runner;
12:   TextArea ta = new TextArea(&quot;Getting text...&quot;);
13: 
14:   public void init() {
15:    setLayout(new GridLayout(1,1));
16: 
17:     // chANGE THIS NEXT LINE BEFORE COMPILING!!!
18:     String url = &quot;<A HREF="http://www.lne.com/Web/JavaProf/raven.txt">http://www.lne.com/Web/JavaProf/raven.txt</A>&quot;;
19:     try { this.theURL = new URL(url); }
20:     catch ( MalformedURLException e) {
21:       System.out.println(&quot;Bad URL: &quot; + theURL);
22:     }
23:     add(ta);
24:  }
25: 
26:   public Insets insets() {
27:     return new Insets(10,10,10,10);
28:  }
29:   
30:   public void start() {
31:     if (runner == null) {
32:       runner = new Thread(this);
33:       runner.start();
34:     }
35:  }
36:   
37:   public void stop() {
38:     if (runner != null) {
39:       runner.stop();
40:       runner = null;
41:     }
42:  }
43: 
44:   public void run() {
45:     URLConnection conn = null;
46:     DataInputStream data = null;
47:     String line;
48:    StringBuffer buf = new StringBuffer();
49: 
50:     try { 
51:       conn = this.theURL.openConnection();
52:       conn.connect();
53:      ta.setText(&quot;Connection opened...&quot;);
54:       data = new DataInputStream(new BufferedInputStream(
55:          conn.getInputStream()));
56:       ta.setText(&quot;Reading data...&quot;);
57:      while ((line = data.readLine()) != null) {
58:         buf.append(line + &quot;\n&quot;);
59:       } 
60:       ta.setText(buf.toString());
61:     }
62:     catch (IOException e) {
63:       System.out.println(&quot;IO Error:&quot; + e.getMessage());
64:     }
65:}
66:}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
The <TT>init()</TT> method (lines
14 to 24) sets up the URL and the text area in which that file
will be displayed. The URL could be easily passed into the applet
via an HTML parameter; here, it's just hard coded for simplicity.
<P>
Because it might take some time to load the file over the network,
you put that routine into its own thread and use the familiar
<TT>start()</TT>, <TT>stop()</TT>,
and <TT>run()</TT> methods to control
that thread.
<P>
Inside <TT>run()</TT> (lines 44 to
64), the work takes place. Here, you initialize a bunch of variables
and then open the connection to the URL (using the <TT>openStream()</TT>
method in line 50). Once the connection is open, you set up an
input stream in lines 51 to 55 and read from it, line by line,
putting the result into an instance of <TT>StringBuffer</TT>
(a string buffer is a modifiable string). I put all this work
into a thread because it may take some time for the connection
to open and for the file to be read-particularly across slower
connections. There may be other things going on in the applet
that need to take place concurrently to the file loading. 
<P>
Once all the data has been read, line 60 converts the <TT>StringBuffer</TT>
object into a real string and then puts that result in the text
area.
<P>
One other thing to note about this example is that the part of
the code that opened a network connection, read from the file,
and created a string is surrounded by a <TT>try</TT>
and <TT>catch</TT> statement. If any
errors occur while you're trying to read or process the file,
these statements enable you to recover from them without the entire
program crashing (in this case, the program exits with an error,
because there's little else to be done if the applet can't read
the file). <TT>try</TT> and <TT>catch</TT>
give you the capability of handling and recovering from errors.
You'll learn more about exceptions on <A HREF="ch17.htm">Day 17</A>.
<H3><A NAME="Sockets">
Sockets</A></H3>
<P>
For networking applications beyond what the <TT>URL</TT>
and <TT>URLconnection</TT> classes
offer (for example, for other protocols or for more general networking
applications), Java provides the <TT>Socket</TT>
and <TT>ServerSocket</TT> classes
as an abstraction of standard socket programming techniques. You'll
learn more about working with Java sockets on <A HREF="ch26.htm">Day 26</A>, &quot;Client/Server
Networking in Java,&quot; but for now here's a very short rundown
of the socket capabilities in Java.
<P>
The <TT>Socket</TT> class provides
a client-side socket interface similar to standard UNIX sockets.
To open a connection, create a new instance of <TT>Socket</TT>
(where <TT><I>hostname</I></TT> is
the host to connect to, and <TT><I>portnum</I></TT>
is the port number):
<BLOCKQUOTE>
<PRE>
Socket connection = new Socket(<I>hostname</I>, </FONT><I>portnum</I>);
<BR>

</PRE>
</BLOCKQUOTE>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
If you use sockets in an applet, you are still subject to the applet security restrictions that prevent you from connecting to any system other than the same one the applet came from.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
Once the socket is open, you can use input and output streams
to read and write from that socket (you'll learn all about input
and output streams on <A HREF="ch19.htm">Day 19</A>):
<BLOCKQUOTE>
<PRE>
DataInputStream in = new DataInputStream(
    new BufferedInputStream(connection.getInputStream()));
DataOutputStream out= new DataOutputStream(
    new BufferedOutputStream(connection.getOutputStream()));
</PRE>
</BLOCKQUOTE>
<P>
Once you're done with the socket, don't forget to close it (this
also closes all the input and output streams you may have set
up for that socket):
<BLOCKQUOTE>
<PRE>
connection.close();
</PRE>
</BLOCKQUOTE>
<P>
Server-side sockets work similarly, with the exception of the
<TT>accept()</TT> method. A server
socket listens on a TCP port for a connection from a client; when
a client connects to that port, the <TT>accept()</TT>
method accepts a connection from that client. By using both client
and server sockets, you can create applications that communicate
with each other over the network. 
<P>
To create a server socket and bind it to a port, create a new
instance of <TT>ServerSocket</TT>
with the port number:
<BLOCKQUOTE>
<PRE>
ServerSocket sconnection = new ServerSocket(8888);
</PRE>
</BLOCKQUOTE>
<P>
To listen on that port (and to accept a connection from any clients
if one is made), use the <TT>accept()</TT>
method:
<BLOCKQUOTE>
<PRE>
sconnection.accept();
</PRE>
</BLOCKQUOTE>
<P>
Once the socket connection is made, you can use input and output
streams to read from and write to the client.
<P>
See the <TT>java.net</TT> package
for more information about Java sockets.
<H3><A NAME="ChangestoSocketsforJava">
Changes to Sockets for Java 1.1</A></H3>
<P>
In the 1.0.2 version of Java, the <TT>Socket</TT>
and <TT>ServerSocket</TT> classes
provide a basic abstract socket implementation. You can create
new instances of these classes to make or accept connections and
to pass data back and forth from a client to a server.
<P>
The problem comes when you try to extend or change Java's socket
behavior. The <TT>Socket</TT> and
<TT>ServerSocket</TT> classes in the
<TT>java.net</TT> package are final
classes, which means you cannot create subclasses of those classes
(you'll learn more about finalizing classes on <A HREF="ch15.htm">Day 15</A>, &quot;Modifiers,
Access Control, and Class Design&quot;). To extend the behavior
of the socket classes- for example, to allow network connections
to work across a firewall or a proxy, you can use the abstract
classes <TT>SocketImpl</TT> and the
interface <TT>SocketImplFactory</TT>
to create a new transport-layer socket implementation. This design
fits with the original goal of Java's socket classes: to allow
those classes to be portable to other systems with different transport
mechanisms.
<P>
The problem with this mechanism is that while it works for simple
cases, it prevents you from adding other protocols on top of TCP
(for example, to implement an encryption mechanism such as SSL)
or for having multiple socket implementations per Java runtime.
<P>
For these reasons, in Java 1.1 sockets will change such that the
<TT>Socket</TT> and <TT>ServerSocket</TT>
classes are nonfinal and extendable. You will be able to create
subclasses of these classes in Java 1.1, which use either the
default socket implementation or one of your own making. This
will allow much more flexible network capabilities to Java in
1.1. 
<P>
In addition, Java 1.1 has added several other new features to
the <TT>java.net</TT> package:
<UL>
<LI>New options for sockets, based on BSD's socket options (for
example, <TT>TCP_NODELAY</TT>, <TT>IP_MULTICAST_LOOP</TT>,
<TT>SO_BINDADDR)</TT>
<LI>Many new subclasses of the <TT>SocketException</TT>
class, to represent network errors on a finer level of granularity
than in Java 1.0.2 (for example, <TT>NoRouteToHostException</TT>
or <TT>ConnectException</TT>)
</UL>
<P>
For more information about all the networking changes between
Java 1.02 and 1.1, see the pages at <TT><A HREF="http://java.sun.com/products/JDK/1.1/designspecs/net/index.html">http://java.sun.com/products/JDK/1.1/designspecs/net/index.html</A></TT>.
<H2><A NAME="OtherAppletHints"><FONT SIZE=5 COLOR=#FF0000>
Other Applet Hints</FONT></A></H2>
<P>
On this, the last section of the last day of the second week,
let's finish with some small hints that didn't fit in anywhere
else: using <TT>showStatus()</TT>
to print messages in the browser status window, providing applet
information, and communicating between multiple applets on the
same page.
<H3><A NAME="TheTTFONTSIZEFACECouriershowStatusFONTTTFONTSIZEMethodFONT">
The <TT>showStatus()</TT>
Method</FONT></A></H3>
<P>
The <TT>showStatus()</TT> method,
available in the <TT>Applet</TT> class,
enables you to display a string in the status bar of the browser,
which contains the applet. You can use this for printing error,
link, help, or other status messages:
<BLOCKQUOTE>
<PRE>
getAppletContext().showStatus(&quot;Change the color&quot;);
</PRE>
</BLOCKQUOTE>
<P>
The <TT>getAppletContext()</TT> method
enables your applet to access features of the browser that contains
it. You already saw a use of this with links, wherein you could
use the <TT>showDocument()</TT> method
to tell the browser to load a page. <TT>showStatus()</TT>
uses that same mechanism to print status messages.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
<TT>showStatus()</TT> may not be supported in all browsers, so do not depend on it for your applet's functionality or interface. It is a useful way of communicating optional information to your user-if you need a more reliable method of communication, set 
up a label in your applet and update it to reflect changes in its message.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H3><A NAME="AppletInformation">
Applet Information</A></H3>
<P>
The awt gives you a mechanism for associating information with
your applet. Usually, there is a mechanism in the browser viewing
the applet to view display information. You can use this mechanism
to sign your name or your organization to your applet, or to provide
contact information so that users can get hold of you if they
want.
<P>
To provide information about your applet, override the <TT>getAppletInfo()</TT>
method:
<BLOCKQUOTE>
<PRE>
public String getAppletInfo() {
    return &quot;GetRaven copyright 1995 Laura Lemay&quot;;
}
</PRE>
</BLOCKQUOTE>
<H3><A NAME="CommunicatingBetweenApplets">
Communicating Between Applets</A></H3>
<P>
Sometimes you want to have an HTML page that has several different
applets on it. To do this, all you have to do is include several
different iterations of the applet tag. The browser will create
different instances of your applet for each one that appears on
the HTML page.
<P>
What if you want to communicate between those applets? What if
you want a change in one applet to affect the other applets in
some way? The best way to do this is to use the applet context
to get to different applets on the same page. <BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Be forewarned that before you do extensive work with inter-applet communication, the mechanism described in this section is implemented differently (and often unreliably) in different browsers and different Java environments. If you need to rely on 
communicating between applets for your Web pages, make sure you test those applets extensively in different browsers on different platforms.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
The applet context is defined in a class called, appropriately,
<TT>AppletContext</TT>. To get an
instance of this class for you applet, you use the <TT>getAppletContext()</TT>
method. You've already seen the use of the <TT>getAppletContext()</TT>
method for other uses; you can also use it to get hold of the
other applets on the page. For example, to call a method named
<TT>sendMessage()</TT> on all the
applets on a page (including the current applet), use the <TT>getApplets()</TT>
method and a <TT>for</TT> loop that
looks something like this:
<BLOCKQUOTE>
<PRE>
for (Enumeration e = getAppletContext().getApplets();
        e.hasMoreElements();) {
     Applet current = (MyAppletSubclass)(e.nextElement());
     current.sendMessage();
}
</PRE>
</BLOCKQUOTE>
<P>
The <TT>getApplets()</TT> method returns
an <TT>Enumeration</TT> object with
a list of the applets on the page. Iterating over the <TT>Enumeration</TT>
object in this way enables you to access each element in the <TT>Enumeration</TT>
in turn. Note that each element in the <TT>Enumeration</TT>
object is an instance of the <TT>Object</TT>
class; to get that applet to behave the way you want it to (and
accept messages from other applets), you'll have to cast it to
be an instance of your applet subclass (here, the class <TT>MyAppletSubclass</TT>).
<P>
If you want to call a method in a specific applet, it's slightly
more complicated. To do this, you give your applets a name and
then refer to them by name inside the body of code for that applet.
<P>
To give an applet a name, use the <TT>NAME</TT>
attribute to <TT>&lt;APPLET&gt;</TT>
in your HTML file:
<BLOCKQUOTE>
<PRE>
&lt;P&gt;This applet sends information:
&lt;APPLET CODE=&quot;MyApplet.class&quot; WIDTH=100 HEIGHT=150
    NAME=&quot;sender&quot;&gt; &lt;/APPLET&gt;
&lt;P&gt;This applet receives information from the sender:
&lt;APPLET CODE=&quot;MyApplet.class&quot; WIDTH=100 HEIGHT=150
    NAME=&quot;receiver&quot;&gt; &lt;/APPLET&gt;
</PRE>
</BLOCKQUOTE>
<P>
To get a reference to another applet on the same page, use the
<TT>getApplet()</TT> method from the
applet context with the name of that applet. This gives you a
reference to the applet of that name. You can then refer to that
applet as if it were just another object: call methods, set its
instance variables, and so on. Here's some code to do just that:
<BLOCKQUOTE>
<PRE>
// get ahold of the receiver applet
Applet receiver = (MyAppletSubclass)getAppletContext().getApplet(&quot;receiver&quot;);
// tell it to update itself.
receiver.update(text, value);
</PRE>
</BLOCKQUOTE>
<P>
In this example you use the <TT>getApplet()</TT>
method to get a reference to the applet with the name <TT>receiver</TT>.
Note that the object returned by <TT>getApplet</TT>
is an instance of the generic <TT>Applet</TT>
class; you'll most likely want to cast that object to an instance
of your subclass. Given the reference to the named applet, you
can then call methods in that applet as if it were just another
object in your own environment. Here, for example, if both applets
have an <TT>update()</TT> method,
you can tell <TT>receiver</TT> to
update itself by using the information the current applet has.
<P>
Naming your applets and then referring to them by using the methods
described in this section enables your applets to communicate
and stay in sync with each other, providing uniform behavior for
all the applets on your page.
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>
Summary</FONT></A></H2>
<P>
Congratulations! Take a deep breath-you're finished with Week
2. This week has been full of useful information about creating
applets and using the Java awt classes to display, draw, animate,
process input, and create fully fledged interfaces in your applets.
<P>
Today you finished exploring applets and the awt by learning about
three concepts.
<P>
First, you learned about windows, frames, menus, and dialogs,
which enable you to create a framework for your applets-or enable
your Java applications to take advantage of applet features.
<P>
Second, you had a brief introduction to Java networking through
some of the classes in the <TT>java.net</TT>
package. Applet networking includes things as simple as pointing
the browser to another page from inside your applet, but can also
include retrieving files from the Web by using standard Web protocols
(<TT>http</TT>, <TT>ftp</TT>,
and so on). For more advanced networking capabilities, Java provides
basic socket interfaces that can be used to implement many basic
network-oriented applets-client/server interactions, chat sessions,
and so on.
<P>
Finally, you finished up with the tidbits-small features of the
Java awt and of applets that didn't fit anywhere else, including
<TT>showStatus()</TT>, providing information
about your applet, and communicating between multiple applets
on a single page.
<H2><A NAME="QampABR"><FONT SIZE=5 COLOR=#FF0000>
Q&amp;A<BR>
</FONT></A></H2>

<TABLE>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>Q:</B></CENTER></TD><TD><B>When I create pop-up windows, they all show up with this big yellow bar that says <TT><B>Warning: applet window</B></TT>. What does this mean?</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>A:</B></CENTER></TD><TD>The warning is to tell you (and the users of your applet) that the window being displayed was generated by an applet, and not by the browser itself. This is a security feature to keep an applet 
programmer from popping up a window that masquerades as a browser window and, for example, asks users for their passwords.
<P>
There's nothing you can do to hide or obscure the warning. 
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>Q:</B></CENTER></TD><TD><B>What good is having a file dialog box if you can't read or write files from the local file system?</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>A:</B></CENTER></TD><TD>Applets often can't read or write from the local file system (depending on the browser), but because you can use awt components in Java applications as well as applets, the file dialog box is 
also very useful for them.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>Q:</B></CENTER></TD><TD><B>How can I mimic an HTML form submission in a Java applet?</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>A:</B></CENTER></TD><TD>Currently, applets make it difficult to do this. The best (and easiest way) is to use <TT>GET</TT> notation to get the browser to submit the form contents for you.
<P>
<TT><A HREF="http://www.blah.com/cgi-bin/myscript?foo=1&amp;bar=2&amp;name=Laura">http://www.blah.com/cgi-bin/myscript?foo=1&amp;bar=2&amp;name=Laura</A></TT>
<P>
Because the form input is encoded in the URL, you can write a Java applet to mimic a form, get input from the user, and then construct a new URL object with the form data included on the end. Then just pass that URL to the browser by using 
<TT>getAppletContext().showDocument()</TT>, and the browser will submit the form results itself. For simple forms, this is all you need.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>Q:</B></CENTER></TD><TD><B>How can I do <TT><B>POST</B></TT> form submissions?</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>A:</B></CENTER></TD><TD>You'll have to mimic what a browser does to send forms using <TT>POST</TT>: Open a socket to the server and send the data, which looks something like this (the exact format is determined by the 
HTTP protocol; this is only a subset of it):
<P>
<TT>POST /cgi-bin/mailto.cgi HTTP/1.0<BR>
Content-type: application/x-www-form-urlencoded<BR>
Content-length: 36<BR>
{your encoded form data here}</TT>
<P>
If you've done it right, you get the CGI form output back from the server. It's then up to your applet to handle that output properly. Note that if the output is in HTML, there really isn't a way to pass that output to the browser that is running your 
applet yet. This capability may end up in future Java releases. If you get back a URL, however, you can redirect the browser to that URL.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>Q:</B></CENTER></TD><TD><TT><B>showStatus()</B></TT><B> doesn't work in my browser. How can I give my readers status information?</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>A:</B></CENTER></TD><TD>As you learned in the section on <TT>showStatus()</TT>, whether or not a browser supports <TT>showStatus()</TT> is up to that browser. If you must have status-like behavior in your applet, 
consider creating a status label in the applet itself that is updated with the information you need to present.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>Q:</B></CENTER></TD><TD><B>I've been trying to communicate between two applets in my Web page using the <TT><B>getAppletContext()</B></TT> and <TT><B>getApplet()</B></TT> methods. My applets keep crashing with 
<TT><B>NullPointerException</B></TT> errors. What does this mean?</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>A:</B></CENTER></TD><TD>The mechanism I described for communicating between applets is how Sun and the Java class library says it's supposed </FONT>to work. However, like <TT>showStatus()</TT>, whether or not a 
browser implements that mechanism, or implements it correctly, depends on that browser. Version of Netscape before 3.0 and Internet Explorer both have strange problems with inter-applet communication.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>Q:</B></CENTER></TD><TD><B>It looks like the <TT><B>openStream()</B></TT> method and the <TT><B>Socket</B></TT> classes implement TCP sockets. Does Java support UDP (User Datagram Protocol, often just called datagram) 
sockets?</B>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=40><CENTER><B>A:</B></CENTER></TD><TD>The JDK 1.0 provides two classes, <TT>DatagramSocket</TT> and <TT>DatagramPacket</TT>, which implement UDP sockets. The <TT>DatagramSocket</TT> class operates similarly to the <TT>Socket</TT> 
class. Use instances of <TT>DatagramPacket</TT> for each packet you send or receive over the socket.
<P>
See the API documentation for the <TT>java.net</TT> package for more information.
</TD></TR>
</TABLE>
</CENTER>
<HR>

<CENTER><P><A HREF="ch13.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch15.htm"><IMG SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
