<HTML>
<HEAD>
<TITLE>appendix F -- java.awt Package Reference</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.0z">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT SIZE=6 COLOR=#FF0000>appendix&nbsp;F</FONT></H1>
<H1><FONT COLOR=#FF0000><TT>java.awt</TT></font><FONT SIZE=6 COLOR=#FF0000 FACE="Times New Roman Bold">
Package Reference</FONT></H1>
<HR>
<P>
<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>
<UL>
<LI><A HREF="#TTFONTSIZEFACECourierLayoutManagerFONTTT">
<TT>LayoutManager</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierMenuContainerFONTTT">
<TT>MenuContainer</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierBorderLayoutFONTTT">
<TT>BorderLayout</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierButtonFONTTT">
<TT>Button</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierCanvasFONTTT">
<TT>Canvas</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierCardLayoutFONTTT">
<TT>CardLayout</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierCheckboxFONTTT">
<TT>Checkbox</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierCheckboxGroupFONTTT">
<TT>CheckboxGroup</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierCheckboxMenuItemFONTTT">
<TT>CheckboxMenuItem</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierChoiceFONTTT">
<TT>Choice</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierColorFONTTT">
<TT>Color</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierComponentFONTTT">
<TT>Component</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierContainerFONTTT">
<TT>Container</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierDialogFONTTT">
<TT>Dialog</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierDimensionFONTTT">
<TT>Dimension</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierEventFONTTT">
<TT>Event</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierFileDialogFONTTT">
<TT>FileDialog</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierFlowLayoutFONTTT">
<TT>FlowLayout</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierFontFONTTT">
<TT>Font</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierFontMetricsFONTTT">
<TT>FontMetrics</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierFrameFONTTT">
<TT>Frame</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierGraphicsFONTTT">
<TT>Graphics</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierGridBagConstraintsFONTTT">
<TT>GridBagConstraints</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierGridBagLayoutFONTTT">
<TT>GridBagLayout</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierGridLayoutFONTTT">
<TT>GridLayout</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierImageFONTTT">
<TT>Image</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierInsetsFONTTT">
<TT>Insets</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierLabelFONTTT">
<TT>Label</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierListFONTTT">
<TT>List</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierMediaTrackerFONTTT">
<TT>MediaTracker</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierMenuFONTTT">
<TT>Menu</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierMenuBarFONTTT">
<TT>MenuBar</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierMenuComponentFONTTT">
<TT>MenuComponent</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierMenuItemFONTTT">
<TT>MenuItem</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierPanelFONTTT">
<TT>Panel</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierPointFONTTT">
<TT>Point</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierPolygonFONTTT">
<TT>Polygon</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierRectangleFONTTT">
<TT>Rectangle</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierScrollbarFONTTT">
<TT>Scrollbar</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierTextAreaFONTTT">
<TT>TextArea</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierTextComponentFONTTT">
<TT>TextComponent</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierTextFieldFONTTT">
<TT>TextField</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierToolkitFONTTT">
<TT>Toolkit</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierWindowFONTTT">
<TT>Window</TT></A>
<UL>
<LI><A HREF="#TTFONTSIZEFACECourierawtExceptionFONTTT">
<TT>awtException</TT></A>
</UL>
<LI><A HREF="#TTFONTSIZEFACECourierawtErrorFONTTT">
<TT>awtError</TT></A>
</UL>

<HR>
<P>
The <TT>java.awt</TT> package contains
what is known as the Java Abstract Windowing Toolkit. The classes
within this package make up the prebuilt graphical user interface
components that are available to Java developers through the Java
Developer's Kit. Classes defined within this package include such
useful components as colors, fonts, and widgets such as buttons
and scrollbars.
<H2><A NAME="TTFONTSIZEFACECourierLayoutManagerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>LayoutManager</TT>
</FONT></A></H2>
<P>
The <TT>LayoutManager</TT> interface
is provided so that it can be implemented by objects that know
how to lay out containers.
<H4><TT>addLayoutComponent</TT></H4>
<BLOCKQUOTE>
<TT>void addLayoutComponent(String name,
Component comp)<BR>
</TT>The <TT>addLayoutComponent</TT>
method lays out the specified component within the layout manager.
<BR>
<I><B>Parameters: <BR>
</B></I><TT>name</TT>-the name of
the component to be laid out.<BR>
<TT>comp</TT>-the <TT>Component</TT>
object to be laid out within the layout manager.
</BLOCKQUOTE>
<H4><TT>removeLayoutComponent</TT>
</H4>
<BLOCKQUOTE>
<TT>void removeLayoutComponent(Component
comp)<BR>
</TT>The <TT>removeLayoutComponent</TT>
method removes a specified component from the layout manager.
<BR>
<I><B>Parameters: </B></I><TT>comp</TT>-the
<TT>Component</TT> object that is
to be removed from within the layout manager.
</BLOCKQUOTE>
<H4><TT>preferredLayoutSize</TT></H4>
<BLOCKQUOTE>
<TT>Dimension preferredLayoutSize(Container
parent)<BR>
</TT>The <TT>preferredLayoutSize</TT>
method determines the preferred layout size for a specified container.
<BR>
<I><B>Parameters: </B></I><TT>parent</TT>-a
<TT>Container</TT> object that is
to be laid out using the layout manager.<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object containing the preferred size of the <TT>Container</TT>
parameter.
</BLOCKQUOTE>
<H4><TT>minimumLayoutSize</TT></H4>
<BLOCKQUOTE>
<TT>Dimension minimumLayoutSize(Container
parent)<BR>
</TT>The <TT>minimumLayoutSize</TT>
method determines the minimum layout size for a specified container.
<BR>
<I><B>Parameters: </B></I><TT>parent</TT>-a
<TT>Container</TT> object that is
to be laid out using the layout manager.<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object containing the minimum size of the <TT>Container</TT>
parameter.
</BLOCKQUOTE>
<H4><TT>layoutContainer</TT></H4>
<BLOCKQUOTE>
<TT>void layoutContainer(Container parent)
<BR>
</TT>The <TT>layoutContainer</TT>
method will lay out the specified <TT>Container</TT>
object within the layout manager.<BR>
<I><B>Parameters: </B></I><TT>parent</TT>-a
<TT>Container</TT> object that is
to be laid out using the layout manager.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierMenuContainerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>MenuContainer</TT>
</FONT></A></H2>
<P>
The <TT>MenuContainer</TT> is an interface
that is implemented by all menu-related containers.
<H4><TT>getFont</TT></H4>
<BLOCKQUOTE>
<TT>Font getFont()<BR>
</TT>The <TT>getFont</TT> method
returns the current font of the menu container.<BR>
<I><B>Returns: </B></I>The current <TT>Font</TT>
object.
</BLOCKQUOTE>
<H4><TT>postEvent</TT></H4>
<BLOCKQUOTE>
<TT>boolean postEvent(Event evt)<BR>
</TT>The <TT>postEvent</TT>
method posts the specified event to the <TT>MenuContainer</TT>.
<BR>
<I><B>Parameters: </B></I><TT>evt</TT>-the
<TT>Event</TT> object to be posted
to the menu container.<BR>
<I><B>Returns: </B></I>A boolean value containing <TT>true</TT>
if the event was handled, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>remove</TT></H4>
<BLOCKQUOTE>
<TT>void remove(MenuComponent comp)<BR>
</TT>The <TT>remove</TT> method
removes the specified <TT>MenuComponent</TT>
object from the <TT>MenuContainer</TT>.
<BR>
<I><B>Parameters: </B></I><TT>comp</TT>-the
<TT>MenuComponent</TT> class to be
removed from the <TT>MenuContainer</TT>.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierBorderLayoutFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>BorderLayout</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends:</B></I> <TT>Object<BR>
</TT><I><B>Implements:</B></I> <TT>LayoutManager
<BR>
</TT>A <TT>BorderLayout</TT>
is used to lay out components on a panel by implementing the <TT>LayoutManager</TT>
interface. Components are laid out using members named <TT>North</TT>,
<TT>South</TT>, <TT>East</TT>,
<TT>West</TT>, and <TT>Center</TT>.
</BLOCKQUOTE>
<H4><TT>BorderLayout</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public BorderLayout()<BR>
</TT>This <TT>BorderLayout</TT>
constructor constructs a <TT>BorderLayout</TT>
layout manager.
</BLOCKQUOTE>
<H4><TT>BorderLayout</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public BorderLayout(int hgap, int vgap)
<BR>
</TT>This <TT>BorderLayout</TT>
constructor constructs a <TT>BorderLayout</TT>
layout manager using the <TT>hgap</TT>
and <TT>vgap</TT> values to set the
horizontal and vertical gap sizes.<BR>
<I><B>Parameters: <BR>
</B></I><TT>hgap</TT>-an integer value
used to set the horizontal gap size.<BR>
<TT>vgap</TT>-an integer value used
to set the vertical gap size.
</BLOCKQUOTE>
<H4><TT>addLayoutComponent</TT></H4>
<BLOCKQUOTE>
<TT>public void addLayoutComponent(String
name, Component comp)<BR>
addLayoutComponent</TT> adds a component to the border
layout according to that component's name (<TT>North</TT>,
<TT>South</TT>, <TT>East</TT>,
<TT>West</TT>, or <TT>Center</TT>).
The component's preferred size is used for all layout types except
<TT>Center</TT>.<BR>
<I><B>Parameters: <BR>
</B></I><TT>name</TT>-a string value
that must correspond to one of the following names: <TT>North</TT>,
<TT>South</TT>, <TT>East</TT>,
<TT>West</TT>, or <TT>Center</TT>.
<BR>
<TT>comp</TT>-a <TT>Component</TT>
object to be added to this layout manager.
</BLOCKQUOTE>
<H4><TT>removeLayoutComponent</TT>
</H4>
<BLOCKQUOTE>
<TT>public void removeLayoutComponent(Component
comp)<BR>
removeLayoutComponent</TT> removes the specified component
from the layout manager.<BR>
<I><B>Parameters: </B></I><TT>comp</TT>-the
<TT>Component</TT> object to be removed
</BLOCKQUOTE>
<H4><TT>minimumLayoutSize</TT></H4>
<BLOCKQUOTE>
<TT>public Dimension minimumLayoutSize(Container
target)<BR>
minimumLayoutSize</TT> returns the minimum dimension needed
to lay out the components contained in the <TT>target</TT>
parameter. Note that this function only determines the required
size based on visible components.<BR>
<I><B>Parameters: </B></I><TT>target</TT>-a
<TT>Container</TT> class containing
components to be laid out.
</BLOCKQUOTE>
<H4><TT>preferredLayoutSize</TT></H4>
<BLOCKQUOTE>
<TT>public Dimension preferredLayoutSize(Container
target)<BR>
preferredLayoutSize</TT> returns the preferred dimension
needed to lay out the components contained in the <TT>target</TT>
parameter. This dimension is based on the individual component's
preferred sizes. Note that this function only determines the required
size based on visible components.<BR>
<I><B>Parameters: </B></I><TT>target</TT>-a
<TT>Container</TT> class containing
components to be laid out.
</BLOCKQUOTE>
<H4><TT>layoutContainer</TT></H4>
<BLOCKQUOTE>
<TT>public void layoutContainer(Container
target)<BR>
layoutContainer</TT> will lay out the components contained
in the <TT>target</TT> <TT>Container</TT>
parameter. This method will reshape the components in the container
based on the requirements of the border layout itself.<BR>
<I><B>Parameters: </B></I><TT>target</TT>-a
<TT>Container</TT> class containing
components to be laid out.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
toString</TT> returns a string representation of the <TT>BorderLayout</TT>
class.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value containing the <TT>BorderLayout</TT>
class's name plus its <TT>hgap</TT>
and <TT>vgap</TT> values.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierButtonFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Button</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Component<BR>
</TT>A button can be placed on any type of layout because
it derives directly from <TT>Component</TT>.
</BLOCKQUOTE>
<H4><TT>Button</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Button()<BR>
</TT>This <TT>BUTTON</TT> constructor
constructs a simple button with no text label.
</BLOCKQUOTE>
<H4><TT>Button</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Button(String label)<BR>
</TT>This <TT>Button</TT> constructor
constructs a simple button with a text label.<BR>
<I><B>Parameters: </B></I><TT>label</TT>-a
<TT>String</TT> value used to set
the button's label.
</BLOCKQUOTE>
<H4><TT>addNotify</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void addNotify()
<BR>
addNotify</TT> sets the peer of the button using the function
<TT>getToolkit.createButton</TT>.
Using peer interfaces allows the user interface of the button
to be changed without changing its functionality.
</BLOCKQUOTE>
<H4><TT>getLabel</TT></H4>
<BLOCKQUOTE>
<TT>public String getLabel()<BR>
getLabel</TT> returns the button's label string.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value representing the button's label string.
</BLOCKQUOTE>
<H4><TT>setLabel</TT></H4>
<BLOCKQUOTE>
<TT>public void setLabel(String label)<BR>
setLabel</TT> modifies the button's label string.<BR>
<I><B>Parameters: </B></I><TT>label</TT>-a
<TT>String</TT> value representing
the button's new label string.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierCanvasFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Canvas</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Component<BR>
</TT>A Canvas is used as a drawing surface for GUI applications.
</BLOCKQUOTE>
<H4><TT>addNotify</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void addNotify()
<BR>
addNotify</TT> sets the peer of the canvas using the function
<TT>getToolkit.createCanvas</TT>.
Using peer interfaces allows the user interface of the canvas
to be changed without changing its functionality.
</BLOCKQUOTE>
<H4><TT>paint</TT></H4>
<BLOCKQUOTE>
<TT>public void paint(Graphics g)<BR>
</TT>The <TT>paint</TT> method
paints the canvas using the default background color (determine
by calling <TT>getBackground</TT>).
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierCardLayoutFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>CardLayout</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends:</B></I> <TT>Object<BR>
</TT><I><B>Implements: </B></I><TT>LayoutManager</TT>
<BR>
The <TT>CardLayout</TT> class is a
layout manager that allows the addition of &quot;cards,&quot;
only one of which may be visible at any given time. The user can
&quot;flip&quot; through the cards.
</BLOCKQUOTE>
<H4><TT>CardLayout</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public CardLayout()<BR>
</TT>This <TT>CardLayout</TT>
constructor creates a new <TT>CardLayout</TT>
layout manager.
</BLOCKQUOTE>
<H4><TT>CardLayout</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public CardLayout(int hgap, int vgap)
<BR>
</TT>This <TT>CardLayout</TT>
constructor constructs a <TT>CardLayout</TT>
layout manager using the <TT>hgap</TT>
and <TT>vgap</TT> values to set the
horizontal and vertical gap sizes.<BR>
<I><B>Parameters:<BR>
</B></I><TT>hgap</TT>-an integer value
used to set the horizontal gap size.<BR>
<TT>vgap</TT>-an integer value used
to set the vertical gap size.
</BLOCKQUOTE>
<H4><TT>addLayoutComponent</TT></H4>
<BLOCKQUOTE>
<TT>public void addLayoutComponent(String
name, Component comp)<BR>
addLayoutComponent</TT> adds a component to the card layout.
<BR>
<I><B>Parameters:</B></I> <BR>
<TT>name</TT>-a string value that
corresponds to the component's name.<BR>
<TT>comp</TT>-a <TT>Component</TT>
object to be added to this layout manager.
</BLOCKQUOTE>
<H4><TT>removeLayoutComponent</TT>
</H4>
<BLOCKQUOTE>
<TT>public void removeLayoutComponent(Component
comp)<BR>
removeLayoutComponent</TT> removes the specified component
from the layout manager.<BR>
<I><B>Parameters: </B></I><TT>comp</TT>-the
<TT>Component</TT> object to be removed.
</BLOCKQUOTE>
<H4><TT>minimumLayoutSize</TT></H4>
<BLOCKQUOTE>
<TT>public Dimension minimumLayoutSize(Container
target)<BR>
minimumLayoutSize</TT> returns the minimum dimension needed
to lay out the components contained in the <TT>target</TT>
parameter. Note that this function only determines the required
size based on visible components.<BR>
<I><B>Parameters: </B></I><TT>target</TT>-a
<TT>Container</TT> class containing
components to be laid out.
</BLOCKQUOTE>
<H4><TT>preferredLayoutSize</TT></H4>
<BLOCKQUOTE>
<TT>public Dimension preferredLayoutSize(Container
target)<BR>
preferredLayoutSize</TT> returns the preferred dimension
needed to lay out the components contained in the <TT>target</TT>
parameter. This dimension is based on the individual component's
preferred sizes. Note that this function only determines the required
size based on visible components.<BR>
<I><B>Parameters: </B></I><TT>target</TT>-a
<TT>Container</TT> class containing
components to be laid out.<BR>
<TT>LayoutContainer<BR>
public void layoutContainer(Container parent)<BR>
layoutContainer</TT> will lay out the components contained
in the <TT>target</TT> <TT>Container</TT>
parameter. This method will reshape the components in the container
based on the requirements of the border layout itself.<BR>
<I><B>Parameters: </B></I><TT>target</TT>-a
<TT>Container</TT> class containing
components to be laid out.
</BLOCKQUOTE>
<H4><TT>first</TT></H4>
<BLOCKQUOTE>
<TT>public void first(Container parent)<BR>
</TT>The <TT>first</TT> method
shows the first component in the card layout (the first card).
<BR>
<I><B>Parameters: </B></I><TT>parent</TT>-the
parent <TT>Container</TT> class containing
the components to be flipped through.
</BLOCKQUOTE>
<H4><TT>next</TT></H4>
<BLOCKQUOTE>
<TT>public void next(Container parent)<BR>
</TT>The <TT>next</TT> method
shows the next component in the card layout (the next card).<BR>
<I><B>Parameters: </B></I><TT>parent</TT>-the
parent <TT>Container</TT> class containing
the components to be flipped through.
</BLOCKQUOTE>
<H4><TT>previous</TT></H4>
<BLOCKQUOTE>
<TT>public void previous (Container parent)
<BR>
</TT>The <TT>previous</TT>
method shows the previous component in the card layout (the previous
card).<BR>
<I><B>Parameters: </B></I><TT>parent</TT>-the
parent <TT>Container</TT> class containing
the components to be flipped through.
</BLOCKQUOTE>
<H4><TT>last</TT></H4>
<BLOCKQUOTE>
<TT>public void last(Container parent)<BR>
</TT>The <TT>last</TT> method
shows the last component in the card layout (the last card).<BR>
<I><B>Parameters: </B></I><TT>parent</TT>-the
parent <TT>Container</TT> class containing
the components to be flipped through.
</BLOCKQUOTE>
<H4><TT>show</TT></H4>
<BLOCKQUOTE>
<TT>public void show(Container parent, String
name)<BR>
</TT>The <TT>show</TT> method
flips to the component specified in the <TT>name</TT>
parameter.<BR>
<I><B>Parameters: <BR>
</B></I><TT>parent</TT>-the parent
<TT>Container</TT> class containing
the components to be flipped through.<BR>
<TT>name</TT>-a string value representing
the name of the component to be displayed.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
toString</TT> returns a string representation of the card
layout class.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value containing the card layout class's name plus its <TT>hgap</TT>
and <TT>vgap</TT> values.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierCheckboxFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Checkbox</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Component<BR>
</TT>A <TT>Checkbox</TT> is
a user interface component that is used to represent a true/false
(or on/off) <BR>
value.
</BLOCKQUOTE>
<H4><TT>Checkbox</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public Checkbox()<BR>
</TT>This <TT>Checkbox</TT>
constructor constructs the simplest of all check boxes: one with
no label, no group, and a <TT>false</TT>
state value.
</BLOCKQUOTE>
<H4><TT>Checkbox</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public Checkbox(String label)<BR>
</TT>This <TT>Checkbox</TT>
constructor constructs a check box using the <TT>label</TT>
parameter to set the check box's label. This check box will belong
to no group and will be set to a <TT>false</TT>
state value.<BR>
<I><B>Parameters: </B></I><TT>label</TT>-a
string value representing the check box's label.
</BLOCKQUOTE>
<H4><TT>Checkbox</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public Checkbox(String label, CheckboxGroup
group, boolean state)<BR>
</TT>This <TT>Checkbox</TT>
constructor constructs a check box including the label, group,
and initial value.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>label</TT>-a string value representing
the check box's label.<BR>
<TT>group</TT>-a <TT>CheckboxGroup</TT>
object that this check box will be a member of.<BR>
<TT>state</TT>-the initial state value
for this check box.
</BLOCKQUOTE>
<H4><TT>addNotify</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void addNotify()
<BR>
addNotify</TT> sets the peer of the check box using the
function <TT>getToolkit.createCheckbox</TT>.
Using peer interfaces allows the user interface of the check box
to be changed without changing its functionality.
</BLOCKQUOTE>
<H4><TT>getLabel</TT></H4>
<BLOCKQUOTE>
<TT>public String getLabel()<BR>
getLabel</TT> returns the check box's label string.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value representing the check box's label string.
</BLOCKQUOTE>
<H4><TT>setLabel</TT></H4>
<BLOCKQUOTE>
<TT>public void setLabel(String label)<BR>
setLabel</TT> modifies the check box's label string.<BR>
<I><B>Parameters: </B></I><TT>label</TT>-a
<TT>String</TT> value representing
the check box's new label string.
</BLOCKQUOTE>
<H4><TT>getState</TT></H4>
<BLOCKQUOTE>
<TT>public boolean getState()<BR>
getState</TT> returns the check box's current state value.
<BR>
<I><B>Returns: </B></I>A boolean value representing the check
box's current state.
</BLOCKQUOTE>
<H4><TT>setState</TT></H4>
<BLOCKQUOTE>
<TT>public void setState(boolean state)<BR>
setState</TT> sets the check box to the value represented
by the <TT>state</TT> parameter.<BR>
<I><B>Parameters: </B></I><TT>state</TT>-a
boolean value containing the new value of the check box's state.
</BLOCKQUOTE>
<H4><TT>getCheckboxGroup</TT></H4>
<BLOCKQUOTE>
<TT>public CheckboxGroup getCheckboxGroup()
<BR>
</TT>The <TT>getCheckboxGroup</TT>
method returns the <TT>CheckboxGroup</TT>
that this check box is a <BR>
member of.<BR>
<I><B>Returns: </B></I>A <TT>CheckboxGroup</TT>
class that this check box is a member of.
</BLOCKQUOTE>
<H4><TT>setCheckboxGroup</TT></H4>
<BLOCKQUOTE>
<TT>public void setCheckboxGroup(CheckboxGroup
g)<BR>
</TT>The <TT>setCheckboxGroup</TT>
method is used to add this check box to a <TT>CheckboxGroup</TT>.
<BR>
<I><B>Parameters: </B></I><TT>g</TT>-a
<TT>CheckboxGroup</TT> class to which
this check box is to be added.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierCheckboxGroupFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>CheckboxGroup</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>A CheckboxGroup is used to group a set of Checkbox
classes. When check boxes are created within a CheckboxGroup,
only one check box may be selected at one time.
</BLOCKQUOTE>
<H4><TT>CheckboxGroup</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public CheckboxGroup()<BR>
</TT>This <TT>CheckboxGroup</TT>
constructor constructs a <TT>CheckboxGroup</TT>
instance with no check box members.
</BLOCKQUOTE>
<H4><TT>getCurrent</TT></H4>
<BLOCKQUOTE>
<TT>public Checkbox getCurrent()<BR>
</TT>The <TT>getCurrent</TT>
method returns the current check box.<BR>
<I><B>Returns: </B></I>A <TT>Checkbox</TT>
object representing the currently selected check box.
</BLOCKQUOTE>
<H4><TT>setCurrent</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void setCurrent(Checkbox
box)<BR>
</TT>The <TT>setCurrent</TT>
method sets the current check box in this <TT>CheckboxGroup</TT>.
<BR>
<I><B>Parameters: </B></I><TT>box</TT>-the
<TT>Checkbox</TT> object that is to
be made current.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
toString</TT> returns a string containing <TT>Checkboxgroup</TT>
information.<BR>
<I><B>Returns: </B></I>A string value containing the <TT>CheckboxGroup</TT>'s
name as well as the name of the currently selected check box.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierCheckboxMenuItemFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>CheckboxMenuItem</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>MenuItem<BR>
</TT>A CheckboxMenuItem is a user interface component that
can be added to a menu to represent a boolean value selection.
</BLOCKQUOTE>
<H4><TT>CheckboxMenuItem</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public CheckboxMenuItem(String label)
<BR>
</TT>This <TT>CheckboxMenuItem</TT>
constructor creates a <TT>CheckboxMenuItem</TT>
with a text label containing the string passed in.<BR>
<I><B>Parameters: </B></I><TT>label</TT>-a
string value representing the label of the <TT>CheckboxMenuItem</TT>
to be displayed.
</BLOCKQUOTE>
<H4><TT>addNotify</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void addNotify()
<BR>
addNotify</TT> sets the peer of the <TT>CheckboxMenuItem</TT>
using the function <TT>getToolkit.createCheckboxMenuItem</TT>.
Using peer interfaces allows the user interface of the <TT>CheckboxMenuItem</TT>
to be changed without changing its functionality.
</BLOCKQUOTE>
<H4><TT>getState</TT></H4>
<BLOCKQUOTE>
<TT>public boolean getState()<BR>
getState</TT> returns the state value of the <TT>CheckboxMenuItem</TT>'s
check box.<BR>
<I><B>Returns: </B></I>A boolean value representing the <TT>CheckboxMenuItem's</TT>
check box state.
</BLOCKQUOTE>
<H4><TT>setState</TT></H4>
<BLOCKQUOTE>
<TT>public void setState(boolean t)<BR>
setState</TT> is used to set the <TT>CheckboxMenuItem</TT>'s
check box state value.<BR>
<I><B>Parameters: </B></I><TT>t</TT>-a
boolean value representing the <TT>CheckboxMenuItem</TT>'s
check box state value.
</BLOCKQUOTE>
<H4><TT>paramString</TT></H4>
<BLOCKQUOTE>
<TT>public String paramString()<BR>
paramString</TT> returns a string containing <TT>CheckboxMenuItem</TT>
information<BR>
<I><B>Returns: </B></I>A string value containing the <TT>CheckboxMenuItem</TT>'s
label as well as the state value of the <TT>CheckboxMenuItem</TT>'s
check box.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierChoiceFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Choice</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Component<BR>
</TT>A <TT>Choice</TT> is a
user interface component that displays a pop-up menu. The current
selection is displayed as the pop-up menu's title.
</BLOCKQUOTE>
<H4><TT>Choice</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Choice()<BR>
</TT>This <TT>Choice</TT> constructor
creates a default <TT>Choice</TT>
object that contains no information.
</BLOCKQUOTE>
<H4><TT>addNotify</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void addNotify()
<BR>
addNotify</TT> sets the peer of the <TT>Choice</TT>
using the function <TT>getToolkit.createChoice</TT>.
Using peer interfaces allows the user interface of the <TT>Choice</TT>
to be changed without changing its functionality.
</BLOCKQUOTE>
<H4><TT>countItems</TT></H4>
<BLOCKQUOTE>
<TT>public int countItems()<BR>
countItems</TT> returns the number of items (or choices)
that are available in this <TT>Choice</TT>
object.<BR>
<I><B>Returns: </B></I>An integer value containing the number
of items stored in this <TT>Choice</TT>
object.
</BLOCKQUOTE>
<H4><TT>getItem</TT></H4>
<BLOCKQUOTE>
<TT>public String getItem(int index)<BR>
</TT>The <TT>getItem</TT> method
returns the choice string at the index represented by the index
value passed in.<BR>
<I><B>Parameters: </B></I><TT>index</TT>-an
integer value representing the index of the string item to be
returned.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value representing the string at the index passed into this method.
</BLOCKQUOTE>
<H4><TT>addItem</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void addItem(String
item)<BR>
addItem</TT> is used to add a <TT>String</TT>
to a <TT>Choice</TT> object's internal
list. The currently selected item will be displayed in the <TT>Choice</TT>
object's pop-up menu.<BR>
<I><B>Parameters: </B></I><TT>item</TT>-a
<TT>String</TT> object containing
a string to be added to the choice list.<BR>
<I><B>Throws:</B></I> <TT>NullPointerException</TT>
if the string item to be added is null.
</BLOCKQUOTE>
<H4><TT>getSelectedItem</TT></H4>
<BLOCKQUOTE>
<TT>public String getSelectedItem()<BR>
getSelectedItem</TT> returns the string value of the currently
selected item.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value containing the currently selected item's string.
</BLOCKQUOTE>
<H4><TT>getSelectedIndex</TT></H4>
<BLOCKQUOTE>
<TT>public int getSelectedIndex()<BR>
getSelectedIndex</TT> returns the index of the currently
selected item.<BR>
<I><B>Returns: </B></I>An integer value containing the index of
the currently selected item.
</BLOCKQUOTE>
<H4><TT>select</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void select(int pos)
<BR>
</TT>This <TT>select</TT> method
selects the item at the position represented by the <TT>pos</TT>
parameter.<BR>
<I><B>Parameters: </B></I><TT>pos</TT>-an
integer value representing the position of the item to be selected
<BR>
<I><B>Throws:</B></I> <TT>IllegalArgumentException</TT>
if the position value passed in is invalid.
</BLOCKQUOTE>
<H4><TT>select</TT></H4>
<BLOCKQUOTE>
<TT>public void select(String str)<BR>
</TT>This <TT>select</TT> method
selects the item represented by the <TT>String</TT>
parameter.<BR>
<I><B>Parameters: </B></I><TT>str</TT>-a
<TT>String</TT> value representing
the string value of the choice to be selected.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierColorFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Color</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>The Color class is provided to encapsulate RGB (red-green-blue)
color values.
</BLOCKQUOTE>
<H4>Member Constants</H4>
<BLOCKQUOTE>
<TT>
public final static Color white
</TT><br>
Static value representing the color white.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public final static Color lightGray
</TT><BR>
Static value representing the color light gray.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public final static Color gray
</TT><BR>
Static value representing the color gray.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public final static Color darkGray
</TT><BR>
Static value representing the color dark gray.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public final static Color black
</TT><BR>
Static value representing the color black.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public final static Color red
</TT><BR>
Static value representing the color red.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public final static Color pink
</TT>
<BR>
Static value representing the color pink.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public final static Color orange
</TT><BR>
Static value representing the color orange.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public final static Color yellow
</TT><BR>
Static value representing the color yellow.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public final static Color green
</TT><BR>
Static value representing the color green.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public final static Color magenta
</TT><BR>
Static value representing the color magenta.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public final static Color cyan
</TT><BR>
Static value representing the color cyan.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public final static Color blue
</TT><BR>
Static value representing the color blue.
</BLOCKQUOTE>
<H4><TT>Color</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Color(int r, int g, int b)<BR>
</TT>This <TT>Color</TT> constructor
accepts as arguments individual red, green, and blue color values.
These values must be in the range 0-255.<BR>
<I><B>Parameters: <BR>
</B></I><TT>r</TT>-the red color value.
<BR>
<TT>g</TT>-the green color value.
<BR>
<TT>b</TT>-the blue color value.
</BLOCKQUOTE>
<H4><TT>Color</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Color(int rgb)<BR>
</TT>This <TT>Color</TT> constructor
creates a <TT>Color</TT> object based
on the RGB color value passed in.<BR>
<I><B>Parameters: </B></I><TT>rgb</TT>-an
integer value containing the red, green, and blue color values
that will be used to create this <TT>Color</TT>
object.
</BLOCKQUOTE>
<H4><TT>Color</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Color(float r, float g, float
b)<BR>
</TT>This <TT>Color</TT> constructor
create a <TT>Color</TT> object based
on the color values passed in. This constructor is similar to
the <TT>Color</TT> constructor that
accepts integer red, green, and blue inputs except that this <TT>Color</TT>
constructor accepts <TT>float</TT>
values. These values must be in the <BR>
range 0-1.0.<BR>
<I><B>Parameters:<BR>
</B></I><TT>r</TT>-the red color value.
<BR>
<TT>g</TT>-the green color value.
<BR>
<TT>b</TT>-the blue color value.
</BLOCKQUOTE>
<H4><TT>getRed</TT></H4>
<BLOCKQUOTE>
<TT>public int getRed()<BR>
</TT>The <TT>getRed</TT> method
returns the red component of this color.<BR>
<I><B>Returns: </B></I>An integer value representing this color's
red component.
</BLOCKQUOTE>
<H4><TT>getGreen</TT></H4>
<BLOCKQUOTE>
<TT>public int getGreen()<BR>
</TT>The <TT>getGreen</TT>
method returns the green component of this color.<BR>
<I><B>Returns: </B></I>An integer value representing this color's
green component.
</BLOCKQUOTE>
<H4><TT>getBlue</TT></H4>
<BLOCKQUOTE>
<TT>public int getBlue()<BR>
</TT>The <TT>getBlue</TT> method
returns the blue component of this color.<BR>
<I><B>Returns: </B></I>An integer value representing this color's
blue component.
</BLOCKQUOTE>
<H4><TT>getRGB</TT></H4>
<BLOCKQUOTE>
<TT>public int getRGB()<BR>
</TT>The <TT>getRGB</TT> method
returns the RGB value of this color.<BR>
<I><B>Returns: </B></I>An integer value representing this color's
RGB value in the default RGB color model.
</BLOCKQUOTE>
<H4><TT>brighter</TT></H4>
<BLOCKQUOTE>
<TT>public Color brighter()<BR>
</TT>The <TT>brighter</TT>
method brightens this color by modifying the RGB color value.
This method increases the individual red, green, and blue color
components by a factor of approximately 1.4.<BR>
<I><B>Returns: </B></I>A <TT>Color</TT>
object representing a brighter version of the current color.
</BLOCKQUOTE>
<H4><TT>darker</TT></H4>
<BLOCKQUOTE>
<TT>public Color darker()<BR>
</TT>The <TT>darker</TT> method
darkens this color by modifying the RGB color value. This method
decreases the individual red, green, and blue color components
by a factor of approximately 1.4.<BR>
<I><B>Returns: </B></I>A <TT>Color</TT>
object representing a darker version of the current color.
</BLOCKQUOTE>
<H4><TT>hashCode</TT></H4>
<BLOCKQUOTE>
<TT>public int hashCode()<BR>
hashCode</TT> returns this color's hash code. This is useful
when storing colors in a hash table.<BR>
<I><B>Returns: </B></I>An integer value representing this color's
hash code.
</BLOCKQUOTE>
<H4><TT>equals</TT></H4>
<BLOCKQUOTE>
<TT>public boolean equals(Object obj)<BR>
</TT>The <TT>equals</TT> method
compares the <TT>Object</TT> parameter
with this <TT>Color</TT> object. It
returns a boolean value representing the result of this comparison.
<BR>
<I><B>Parameters: </B></I><TT>obj</TT>-an
<TT>Object</TT> object to be compared
with this color.<BR>
<I><B>Returns: </B></I>A boolean value representing the result
of the comparison of the <TT>Object</TT>
parameter to this color.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
toString</TT> returns a string representation of the <TT>Color</TT>
class.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value containing the <TT>Color</TT>
class's name plus its red, green, and blue values.
</BLOCKQUOTE>
<H4><TT>getColor</TT></H4>
<BLOCKQUOTE>
<TT>public static Color getColor(String nm)
<BR>
getColor</TT> returns the specified color property based
on the name that is passed in.<BR>
<I><B>Parameters: </B></I><TT>nm</TT>-the
name of the color property.<BR>
<I><B>Returns: </B></I>A <TT>Color</TT>
value representing the desired color property.
</BLOCKQUOTE>
<H4><TT>getColor</TT></H4>
<BLOCKQUOTE>
<TT>public static Color getColor(String nm,
Color v)<BR>
getColor</TT> returns the specified <TT>Color</TT>
property of the specified color.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>nm</TT>-the name of the color
property.<BR>
<TT>v</TT>-the specified color to
be examined.<BR>
<I><B>Returns: </B></I>A <TT>Color</TT>
value representing the desired color property.
</BLOCKQUOTE>
<H4><TT>getColor</TT></H4>
<BLOCKQUOTE>
<TT>public static Color getColor(String nm,
int v)<BR>
getColor</TT> returns the specified <TT>Color</TT>
property of the color value that is passed in.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>nm</TT>-the name of the color
property.<BR>
<TT>v</TT>-the color value.<BR>
<I><B>Returns: </B></I>A <TT>Color</TT>
value representing the desired color property.
</BLOCKQUOTE>
<H4><TT>HSBtoRGB</TT></H4>
<BLOCKQUOTE>
<TT>public static int HSBtoRGB(float hue,
float saturation, float brightness)<BR>
</TT>HSB stands for hue, saturation, and brightness. To
convert from an HSB value to an RGB value, simply call this function
with the appropriate arguments.<BR>
<I><B>Parameters:<BR>
</B></I><TT>hue</TT>-the color's hue
component.<BR>
<TT>saturation</TT>-the color's saturation
component.<BR>
<TT>brightness</TT>-the color's brightness
component.<BR>
<I><B>Returns: </B></I>An RGB value that corresponds to the HSB
inputs.
</BLOCKQUOTE>
<H4><TT>RGBtoHSB</TT></H4>
<BLOCKQUOTE>
<TT>public static float[] RGBtoHSB(int r,
int g, int b, float[] hsbvals)<BR>
</TT>HSB stands for hue, saturation, and brightness. To
convert from an RGB value to an HSB value, simply call this function
with the appropriate arguments.<BR>
<I><B>Parameters:<BR>
</B></I><TT>r</TT>-the color's red
component.<BR>
<TT>g</TT>-the color's green component.
<BR>
<TT>b</TT>-the color's blue component.
<BR>
<TT>hsbvals</TT>-an array that will
be used to store the HSB result values.<BR>
<I><B>Returns: </B></I>An array containing the resultant HSB values.
</BLOCKQUOTE>
<H4><TT>getHSBColor</TT></H4>
<BLOCKQUOTE>
<TT>public static Color getHSBColor(float
h, float s, float b)<BR>
</TT>The <TT>getHSBColor</TT>
method returns a <TT>Color</TT> object
representing the RGB value of the input HSB parameters.<BR>
<I><B>Parameters:</B></I>  <BR>
<TT>h</TT>-the color's hue component.
<BR>
<TT>s</TT>-the color's saturation
component.<BR>
<TT>b</TT>-the color's brightness
component.<BR>
<I><B>Returns: </B></I>A <TT>Color</TT>
object representing the RGB value of the input hue, saturation,
and brightness.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierComponentFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Component</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT><I><B>Implements:</B></I> <TT>ImageObserver</TT>
<BR>
The <TT>Component</TT> class is used
to represent a generic user interface component. All awt UI components
derive from the <TT>Component</TT>
class.
</BLOCKQUOTE>
<H4><TT>getParent</TT></H4>
<BLOCKQUOTE>
<TT>public Container getParent()<BR>
getParent</TT> returns this component's parent (a <TT>Container</TT>
class).<BR>
<I><B>Returns: </B></I>A <TT>Container</TT>
class representing the component's parent.
</BLOCKQUOTE>
<H4><TT>getPeer</TT></H4>
<BLOCKQUOTE>
<TT>public ComponentPeer getPeer()<BR>
getPeer</TT> returns this component's peer (A <TT>ComponentPeer</TT>
interface).<BR>
<I><B>Returns: </B></I>A <TT>ComponentPeer</TT>
interface representing the component's peer.
</BLOCKQUOTE>
<H4><TT>getToolkit</TT></H4>
<BLOCKQUOTE>
<TT>public Toolkit getToolkit()<BR>
getToolkit</TT> returns the toolkit of this component.
The toolkit is used to create the peer for the component.<BR>
<I><B>Returns: </B></I>A <TT>Toolkit</TT>
class. A toolkit is required to bind the abstract awt classes
to a native toolkit implementation.
</BLOCKQUOTE>
<H4><TT>isValid</TT></H4>
<BLOCKQUOTE>
<TT>public boolean isValid()<BR>
isValid</TT> determines whether this component is valid.
A component is considered to be invalid when it is first shown
on the screen.<BR>
<I><B>Returns: </B></I>A boolean value representing the valid
state of this component.
</BLOCKQUOTE>
<H4><TT>isVisible</TT></H4>
<BLOCKQUOTE>
<TT>public boolean isVisible()<BR>
isVisible</TT> determines whether this component is visible.
A component is, by default, visible until told otherwise. A component
can be visible yet not show on the screen if the component's container
is invisible.<BR>
<I><B>Returns: </B></I>A boolean value representing the visible
state of this component.
</BLOCKQUOTE>
<H4><TT>isShowing</TT></H4>
<BLOCKQUOTE>
<TT>public boolean isShowing()<BR>
isShowing</TT> determines whether this component is shown
on the screen. A component can be visible yet not show on the
screen if the component's container is invisible.<BR>
<I><B>Returns: </B></I>A boolean value representing the show state
of this component.
</BLOCKQUOTE>
<H4><TT>isEnabled</TT></H4>
<BLOCKQUOTE>
<TT>public boolean isEnabled()<BR>
isEnabled</TT> determines whether this component is currently
enabled. By default, components are enabled until told otherwise.
<BR>
<I><B>Returns: </B></I>A boolean value representing the enabled
state of this component.
</BLOCKQUOTE>
<H4><TT>location</TT></H4>
<BLOCKQUOTE>
<TT>public Point location()<BR>
location</TT> returns the location of this component in
its parent's coordinate space. Note that the <TT>Point</TT>
object returned contains the top-left corner coordinates of this
component.<BR>
<I><B>Returns: </B></I>A <TT>Point</TT>
object containing the location of the component.
</BLOCKQUOTE>
<H4><TT>size</TT></H4>
<BLOCKQUOTE>
<TT>public Dimension size()<BR>
size</TT> returns the current size of the component.<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object containing the size of the component.
</BLOCKQUOTE>
<H4><TT>bounds</TT></H4>
<BLOCKQUOTE>
<TT>public Rectangle bounds()<BR>
bounds</TT> returns the bounding rectangle of the component.
<BR>
<I><B>Returns: </B></I>A <TT>Rectangle</TT>
object containing the boundaries for the component.
</BLOCKQUOTE>
<H4><TT>enable</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void enable()<BR>
</TT>The <TT>enable</TT> method
is used to enable a component. When a component is disabled, it
may be &quot;grayed out&quot; or simply not respond to user inputs.
</BLOCKQUOTE>
<H4><TT>enable</TT></H4>
<BLOCKQUOTE>
<TT>public void enable(boolean cond)<BR>
</TT>This <TT>enable</TT> method
is used to conditionally enable a component. When a component
is disabled, it may be &quot;grayed out&quot; or simply not respond
to user inputs.<BR>
<I><B>Parameters: </B></I><TT>cond</TT>-a
boolean value representing the new enabled state of the component.
</BLOCKQUOTE>
<H4><TT>disable</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void disable()<BR>
</TT>The <TT>disable</TT> method
disables a component. When a component is disabled, it may be
&quot;grayed out&quot; or simply not respond to user inputs.
</BLOCKQUOTE>
<H4><TT>show</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void show()<BR>
show</TT> shows the component.
</BLOCKQUOTE>
<H4><TT>show</TT></H4>
<BLOCKQUOTE>
<TT>public void show(boolean cond)<BR>
</TT>This <TT>show</TT> method
conditionally shows the component. If the input parameter is <TT>true</TT>,
the component will be shown. If the input parameter is <TT>false</TT>,
the component will be hidden.<BR>
<I><B>Parameters: </B></I><TT>cond</TT>-a
boolean value representing the new visible state of the component.
</BLOCKQUOTE>
<H4><TT>hide</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void hide()<BR>
</TT>The <TT>hide</TT> method
hides the component from view.
</BLOCKQUOTE>
<H4><TT>getForeground</TT></H4>
<BLOCKQUOTE>
<TT>public Color getForeground()<BR>
getForeground</TT> returns the foreground color of the
component. If the component's foreground color has not been set,
the foreground color of its parent is returned.<BR>
<I><B>Returns: </B></I>A <TT>Color</TT>
object representing the foreground color of this component.
</BLOCKQUOTE>
<H4><TT>setForeground</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void setForeground(Color
c)<BR>
setForeground</TT> sets the foreground color of the component.
<BR>
<I><B>Parameters: </B></I><TT>c</TT>-the
new foreground color of this component.
</BLOCKQUOTE>
<H4><TT>getBackground</TT></H4>
<BLOCKQUOTE>
<TT>public Color getBackground()<BR>
getBackground</TT> returns the background color of the
component. If the component's background color has not been set,
the background color of its parent is returned.<BR>
<I><B>Returns: </B></I>A <TT>Color</TT>
object representing the background color of this component.
</BLOCKQUOTE>
<H4><TT>setBackground</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void setBackground(Color
c)<BR>
setBackground</TT> sets the background color of the component.
<BR>
<I><B>Parameters: </B></I><TT>c</TT>-the
new background color of this component.
</BLOCKQUOTE>
<H4><TT>getFont</TT></H4>
<BLOCKQUOTE>
<TT>public Font getFont()<BR>
getFont</TT> returns the font of the component. If the
component's font has not been set, the font of its parent is returned.
</BLOCKQUOTE>
<H4><TT>setFont</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void setFont(Font
f)<BR>
setFont</TT> sets the font of the component.<BR>
<I><B>Parameters: </B></I><TT>f</TT>-the
new font of this component.
</BLOCKQUOTE>
<H4><TT>getColorModel</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized ColorModel getColorModel()
<BR>
getColorModel</TT> gets the color model that will be used
to display this component on an output device.<BR>
<I><B>Returns: </B></I>A <TT>ColorModel</TT>
object representing the color model used by this component.
</BLOCKQUOTE>
<H4><TT>move</TT></H4>
<BLOCKQUOTE>
<TT>public void move(int x, int y)<BR>
</TT>The <TT>move</TT> method
moves a component to a new location within its parent's coordinate
space.<BR>
<I><B>Parameters: <BR>
</B></I><TT>x</TT>-the new x coordinate
of the component within its parent's coordinate space.<BR>
<TT>y</TT>-the new y coordinate of
the component within its parent's coordinate space.
</BLOCKQUOTE>
<H4><TT>resize</TT></H4>
<BLOCKQUOTE>
<TT>public void resize(int width, int height)
<BR>
resize</TT> resizes the component to the specified width
and height.<BR>
<I><B>Parameters:<BR>
</B></I><TT>width</TT>-the new width
size of the component.<BR>
<TT>height</TT>-the new height size
of the component.
</BLOCKQUOTE>
<H4><TT>resize</TT></H4>
<BLOCKQUOTE>
<TT>public void resize(Dimension d)<BR>
resize</TT> resizes the component to the specified dimension.
<BR>
<I><B>Parameters: </B></I><TT>d</TT>-a
<TT>Dimension</TT> object representing
the new size of the component.
</BLOCKQUOTE>
<H4><TT>reshape</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void reshape(int
x, int y, int width, int height)<BR>
reshape</TT> completely changes the bounding box of the
component by changing its size and location.<BR>
<I><B>Parameters:<BR>
</B></I><TT>x</TT>-the new x coordinate
of the component within its parent's coordinate space.<BR>
<TT>y</TT>-the new y coordinate of
the component within its parent's coordinate space.<BR>
<TT>width</TT>-the new width size
of the component.<BR>
<TT>height</TT>-the new height size
of the component.
</BLOCKQUOTE>
<H4><TT>preferredSize</TT></H4>
<BLOCKQUOTE>
<TT>public Dimension preferredSize()<BR>
</TT>The <TT>preferredSize</TT>
method returns the preferred size of the component.<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object representing the preferred size of the component.
</BLOCKQUOTE>
<H4><TT>minimumSize</TT></H4>
<BLOCKQUOTE>
<TT>public Dimension minimumSize()<BR>
minimumSize</TT> returns the minimum size of the component.
<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object representing the minimum size of the component.
</BLOCKQUOTE>
<H4><TT>layout</TT></H4>
<BLOCKQUOTE>
<TT>public void layout()<BR>
</TT>The <TT>layout</TT> method
is called when the component needs to be laid out.
</BLOCKQUOTE>
<H4><TT>validate</TT></H4>
<BLOCKQUOTE>
<TT>public void validate()<BR>
validate</TT> validates a component by calling its <TT>layout</TT>
method.
</BLOCKQUOTE>
<H4><TT>invalidate</TT></H4>
<BLOCKQUOTE>
<TT>public void invalidate()<BR>
invalidate</TT> invalidates a component, forcing the component
and all parents above it to be laid out.
</BLOCKQUOTE>
<H4><TT>getGraphics</TT></H4>
<BLOCKQUOTE>
<TT>public Graphics getGraphics()<BR>
getGraphics</TT> returns a <TT>Graphics</TT>
context for the component. If the component is not currently on
the screen, this function will return null.<BR>
<I><B>Returns: </B></I>A <TT>Graphics</TT>
object representing the component's graphics context.
</BLOCKQUOTE>
<H4><TT>getFontMetrics</TT></H4>
<BLOCKQUOTE>
<TT>public FontMetrics getFontMetrics(Font
font)<BR>
getFontMetrics</TT> returns the current font metrics for
a specified font. If the component is not currently on the screen,
this function will return null.<BR>
<I><B>Parameters: </B></I><TT>font</TT>-a
<TT>Font</TT> object to be examined.
<BR>
<I><B>Returns: </B></I>A <TT>FontMetrics</TT>
object representing the component's font metrics.
</BLOCKQUOTE>
<H4><TT>paint</TT></H4>
<BLOCKQUOTE>
<TT>public void paint(Graphics g)<BR>
</TT>The <TT>paint</TT> method
paints the component on the screen using the <TT>Graphics</TT>
context parameter.<BR>
<I><B>Parameters: </B></I><TT>g</TT>-the
<TT>Graphics</TT> context that the
component will paint itself onto.
</BLOCKQUOTE>
<H4><TT>update</TT></H4>
<BLOCKQUOTE>
<TT>public void update(Graphics g)<BR>
</TT>The <TT>update</TT> method
repaints the component in response to a call to the <TT>repaint</TT>
method.<BR>
<I><B>Parameters: </B></I><TT>g</TT>-the
<TT>Graphics</TT> context that the
component will paint itself onto.
</BLOCKQUOTE>
<H4><TT>paintAll</TT></H4>
<BLOCKQUOTE>
<TT>public void paintAll(Graphics g)<BR>
</TT>The <TT>paintAll</TT>
method is used to paint the component along with all of its subcomponents.
<BR>
<I><B>Parameters: </B></I><TT>g</TT>-the
<TT>Graphics</TT> context that the
component will paint itself onto.
</BLOCKQUOTE>
<H4><TT>repaint</TT></H4>
<BLOCKQUOTE>
<TT>public void repaint()<BR>
repaint</TT> is used to force a component to repaint itself.
Calling this function will result in a call to <TT>repaint</TT>.
</BLOCKQUOTE>
<H4><TT>repaint</TT></H4>
<BLOCKQUOTE>
<TT>public void repaint(long tm)<BR>
</TT>This repaint method is used to force a component to
repaint itself in <TT>tm</TT> milliseconds.
<BR>
<I><B>Parameters: </B></I><TT>tm</TT>-the
time span, in milliseconds, from the time this function was called
that the component will repaint itself.
</BLOCKQUOTE>
<H4><TT>repaint</TT></H4>
<BLOCKQUOTE>
<TT>public void repaint(int x, int y, int
width, int height)<BR>
</TT>This <TT>repaint</TT>
method will force the component to repaint part of its surface
area based on the input coordinates.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate marking
the surface area to be repainted.<BR>
<TT>y</TT>-the y coordinate marking
the surface area to be repainted.<BR>
<TT>width</TT>-the width of the surface
area to be repainted.<BR>
<TT>height</TT>-the height of the
surface area to be repainted.
</BLOCKQUOTE>
<H4><TT>repaint</TT></H4>
<BLOCKQUOTE>
<TT>public void repaint(long tm, int x, int
y, int width, int height)<BR>
</TT>This <TT>repaint</TT>
method will force the component to repaint part of its surface
area based on the input coordinates at a specified time in the
future.<BR>
<I><B>Parameters:<BR>
</B></I><TT>tm</TT>-the time, in milliseconds,
from the time this method was called that the component will need
to repaint itself.<BR>
<TT>x</TT>-the x coordinate marking
the surface area to be repainted.<BR>
<TT>y</TT>-the y coordinate marking
the surface area to be repainted.<BR>
<TT>width</TT>-the width of the surface
area to be repainted.<BR>
<TT>height</TT>-the height of the
surface area to be repainted.
</BLOCKQUOTE>
<H4><TT>print</TT></H4>
<BLOCKQUOTE>
<TT>public void print(Graphics g)<BR>
print</TT> prints the component using the <TT>Graphics</TT>
context. The default implementation of this method calls <TT>paint</TT>.
<BR>
<I><B>Parameters: </B></I><TT>g</TT>-the
<TT>Graphics</TT> context to be printed
on.
</BLOCKQUOTE>
<H4><TT>printAll</TT></H4>
<BLOCKQUOTE>
<TT>public void printAll(Graphics g)<BR>
printAll</TT> prints the component and all of its subcomponents
using the <TT>Graphics</TT> context.
<BR>
<I><B>Parameters: </B></I><TT>g</TT>-the
<TT>Graphics</TT> context to be printed
on.
</BLOCKQUOTE>
<H4><TT>imageUpdate</TT></H4>
<BLOCKQUOTE>
<TT>public boolean imageUpdate(Image img,
int flags, int x, int y, int w, int h)<BR>
imageUpdate</TT> repaints the component when the specified
image has changed.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>img</TT>-an <TT>Image</TT>
object to be examined for changes.<BR>
<TT>flags</TT>-a <TT>flags</TT>
parameter contains imaging flags such as <TT>FRAMEBITS</TT>,
<TT>ALLBITS</TT>, and <TT>SOMEBITS</TT>.
<BR>
<TT>x</TT>-the x coordinate marking
the surface area to be repainted.<BR>
<TT>y</TT>-the y coordinate marking
the surface area to be repainted.<BR>
<TT>width</TT>-the width of the surface
area to be repainted.<BR>
<TT>height</TT>-the height of the
surface area to be repainted.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the image has changed, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>createImage</TT></H4>
<BLOCKQUOTE>
<TT>public Image createImage(ImageProducer
producer)<BR>
createImage</TT> creates an <TT>Image</TT>
using the specified image producer.<BR>
<I><B>Parameters: </B></I><TT>producer</TT>-an
<TT>ImageProducer</TT> interface that
will be used to produce a new image.<BR>
<I><B>Returns: </B></I>An <TT>Image</TT>
object.<BR>
<TT>createImage<BR>
public Image createImage(int width, int height)<BR>
</TT>This <TT>createImage</TT>
creates an offscreen <TT>Image</TT>
object using the specified width and height. This <TT>Image</TT>
object can be used for things like double buffering.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>width</TT>-the width of the <TT>Image</TT>
object to be created.<BR>
<TT>height</TT>-the height of the
<TT>Image</TT> object to be created.
<BR>
<I><B>Returns: </B></I>An <TT>Image</TT>
object.
</BLOCKQUOTE>
<H4><TT>prepareImage</TT></H4>
<BLOCKQUOTE>
<TT>public boolean prepareImage(Image image,
ImageObserver observer)<BR>
prepareImage</TT> prepares an image for rendering on this
component. Because the <TT>Image</TT>
is downloaded using a separate thread, the <TT>ImageObserver</TT>
interface is notified when the image is ready to be rendered.
<BR>
<I><B>Parameters:<BR>
</B></I><TT>image</TT>-an <TT>Image</TT>
object that will be rendered on this component.<BR>
<TT>observer</TT>-an <TT>Observer</TT>
interface that will be notified when the <TT>Image</TT>
is ready to be rendered.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the image has been prepared, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>prepareImage</TT></H4>
<BLOCKQUOTE>
<TT>public</TT> boolean prepareImage(Image
image, int width, int height,<BR>
  ImageObserver observer)<BR>
This <TT>prepareImage</TT> method
is similar to the <TT>prepareImage</TT>
method documented previously except that this method scales the
image based on the width and height parameters.<BR>
<I><B>Parameters:<BR>
</B></I><TT>image</TT>-an <TT>Image</TT>
object that will be rendered on this component.<BR>
<TT>width</TT>-the width of the image
to be rendered.<BR>
<TT>height</TT>-the height of the
image to be rendered.<BR>
<TT>observer</TT>-an <TT>Observer</TT>
interface that will be notified when the <TT>Image</TT>
is ready to be rendered.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the image has been prepared, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>checkImage</TT></H4>
<BLOCKQUOTE>
<TT>public int checkImage(Image image, ImageObserver
observer)<BR>
checkImage</TT> checks the status of the construction of
the image to be rendered.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>image</TT>-an <TT>Image</TT>
object that will be rendered on this component.<BR>
<TT>observer</TT>-an <TT>Observer</TT>
interface that will be notified when the <TT>Image</TT>
is ready to be rendered.<BR>
<I><B>Returns: </B></I>An integer value that is the boolean <TT>OR</TT>
of the <TT>ImageObserver</TT> flags
for the data that is currently available.
</BLOCKQUOTE>
<H4><TT>checkImage</TT></H4>
<BLOCKQUOTE>
<TT>public int checkImage(Image image, int
width, int height, ImageObserver <BR>
  observer)<BR>
</TT>This <TT>checkImage</TT>
method checks the status of the construction of a scaled representation
of this image.<BR>
<I><B>Parameters:<BR>
</B></I><TT>image</TT>-an <TT>Image</TT>
object that will be rendered on this component.<BR>
<TT>width</TT>-the width of the image
to be checked.<BR>
<TT>height</TT>-the height of the
image to be checked.<BR>
<TT>observer</TT>-an <TT>Observer</TT>
interface that will be notified when the image is ready to be
rendered.<BR>
<I><B>Returns: </B></I>An integer value that is the boolean <TT>OR</TT>
of the <TT>ImageObserver</TT> flags
for the data that is currently available.
</BLOCKQUOTE>
<H4><TT>inside</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized boolean inside(int
x, int y)<BR>
</TT>The <TT>inside</TT> method
determines whether the x and y coordinates are within the bounding
rectangle of the component.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate to be
examined.<BR>
<TT>y</TT>-the y coordinate to be
examined.<BR>
<I><B>Returns: </B></I>A boolean value representing the result
of the coordinate check.
</BLOCKQUOTE>
<H4><TT>locate</TT></H4>
<BLOCKQUOTE>
<TT>public Component locate(int x, int y)
<BR>
locate</TT> returns the <TT>Component</TT>
at the specified x and y coordinates.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate to be
examined.<BR>
<TT>y</TT>-the y coordinate to be
examined.<BR>
<I><B>Returns: </B></I>The <TT>Component</TT>
that is found at the specified x and y coordinates.
</BLOCKQUOTE>
<H4><TT>deliverEvent</TT></H4>
<BLOCKQUOTE>
<TT>public void deliverEvent(Event e)<BR>
deliverEvent</TT> delivers an event to the component.<BR>
<I><B>Parameters: </B></I><TT>e</TT>-an
<TT>Event</TT> object encapsulating
the event.
</BLOCKQUOTE>
<H4><TT>postEvent</TT></H4>
<BLOCKQUOTE>
<TT>public boolean postEvent(Event e)<BR>
postEvent</TT> posts an event to the component resulting
in a call to <TT>handleEvent</TT>.
<BR>
<I><B>Parameters: </B></I><TT>e</TT>-an
<TT>Event</TT> object encapsulating
the event.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the event was handled, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>handleEvent</TT></H4>
<BLOCKQUOTE>
<TT>public boolean handleEvent(Event evt)
<BR>
handleEvent</TT> is used to handle individual events by
the component.<BR>
<I><B>Parameters: </B></I><TT>evt</TT>-an
<TT>Event</TT> object encapsulating
the event.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the event was handled, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>mouseDown</TT></H4>
<BLOCKQUOTE>
<TT>public boolean mouseDown(Event evt, int
x, int y)<BR>
</TT>The <TT>mouseDown</TT>
method is called if the mouse is down.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>evt</TT>-an <TT>Event</TT>
object encapsulating the event.<BR>
<TT>x</TT>-the x coordinate of the
mouse down click point.<BR>
<TT>y</TT>-the y coordinate of the
mouse down click point.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the event was handled, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>mouseDrag</TT></H4>
<BLOCKQUOTE>
<TT>public boolean mouseDrag(Event evt, int
x, int y)<BR>
</TT>The <TT>mouseDrag</TT>
method is called if the mouse is dragged.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>evt</TT>-an <TT>Event</TT>
object encapsulating the event.<BR>
<TT>x</TT>-the x coordinate of the
current mouse point coordinate.<BR>
<TT>y</TT>-the y coordinate of the
current mouse point coordinate.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the event was handled, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>mouseUp</TT></H4>
<BLOCKQUOTE>
<TT>public boolean mouseUp(Event evt, int
x, int y)<BR>
</TT>The <TT>mouseUp</TT> method
is called when the mouse button is let up.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>evt</TT>-an <TT>Event</TT>
object encapsulating the event.<BR>
<TT>x</TT>-the x coordinate of the
mouse up point.<BR>
<TT>y</TT>-the y coordinate of the
mouse up point.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the event was handled, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>mouseMove</TT></H4>
<BLOCKQUOTE>
<TT>public boolean mouseMove(Event evt, int
x, int y)<BR>
</TT>The <TT>mouseMove</TT>
method is called if the mouse is moved.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>evt</TT>-an <TT>Event</TT>
object encapsulating the event.<BR>
<TT>x</TT>-the x coordinate of the
current mouse point coordinate.<BR>
<TT>y</TT>-the y coordinate of the
current mouse point coordinate.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the event was handled, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>mouseEnter</TT></H4>
<BLOCKQUOTE>
<TT>public boolean mouseEnter(Event evt,
int x, int y)<BR>
</TT>The <TT>mouseEnter</TT>
method is called if the mouse enters the component.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>evt</TT>-an <TT>Event</TT>
object encapsulating the event.<BR>
<TT>x</TT>-the x coordinate of the
current mouse point coordinate.<BR>
<TT>y</TT>-the y coordinate of the
current mouse point coordinate.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the event was handled, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>mouseExit</TT></H4>
<BLOCKQUOTE>
<TT>public boolean mouseExit(Event evt, int
x, int y)<BR>
</TT>The <TT>mouseExit</TT>
method is called if the mouse exits the component.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>evt</TT>-an <TT>Event</TT>
object encapsulating the event.<BR>
<TT>x</TT>-the x coordinate of the
mouse exit point.<BR>
<TT>y</TT>-the y coordinate of the
mouse exit point.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the event was handled, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>keyDown</TT></H4>
<BLOCKQUOTE>
<TT>public boolean keyDown(Event evt, int
key)<BR>
</TT>The <TT>keyDown</TT> method
is called when a key is pressed.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>evt</TT>-an <TT>Event</TT>
object encapsulating the event.<BR>
<TT>key</TT>-an integer value representing
the code of the key that was pressed.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the event was handled, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>keyUp</TT></H4>
<BLOCKQUOTE>
<TT>public boolean keyUp(Event evt, int key)
<BR>
</TT>The <TT>keyUp</TT> method
is called when a key is let up.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>evt</TT>-an <TT>Event</TT>
object encapsulating the event.<BR>
<TT>key</TT>-an integer value representing
the code of the key that was pressed.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the event was handled, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>action</TT></H4>
<BLOCKQUOTE>
<TT>public boolean action(Event evt, Object
what)<BR>
</TT>The <TT>action</TT> method
is called if an action occurs within the component.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>evt</TT>-an <TT>Event</TT>
object encapsulating the event.<BR>
<TT>what</TT>-an object representing
the action that is occurring.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the event was handled, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>addNotify</TT></H4>
<BLOCKQUOTE>
<TT>public void addNotify()<BR>
addNotify</TT> notifies a component to create a peer object.
</BLOCKQUOTE>
<H4><TT>removeNotify</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void removeNotify()
<BR>
removeNotify</TT> notifies a component to destroy the peer
object.
</BLOCKQUOTE>
<H4><TT>gotFocus</TT></H4>
<BLOCKQUOTE>
<TT>public boolean gotFocus(Event evt, Object
what)<BR>
</TT>The <TT>gotFocus</TT>
method is called when the component receives the input focus.
<BR>
<I><B>Parameters:</B></I> <BR>
<TT>evt</TT>-an <TT>Event</TT>
object encapsulating the event.<BR>
<TT>what</TT>-an object representing
the action that is occurring.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the event was handled, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>lostFocus</TT></H4>
<BLOCKQUOTE>
<TT>public boolean lostFocus(Event evt, Object
what)<BR>
</TT>The <TT>lostFocus</TT>
method is called when the component loses the input focus.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>evt</TT>-an <TT>Event</TT>
object encapsulating the event.<BR>
<TT>what</TT>-an object representing
the action that is occurring.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the event was handled, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>requestFocus</TT></H4>
<BLOCKQUOTE>
<TT>public void requestFocus()<BR>
</TT>The <TT>requestFocus</TT>
method requests the current input focus. If this method is successful,
<TT>gotFocus</TT> will then be called.
</BLOCKQUOTE>
<H4><TT>nextFocus</TT></H4>
<BLOCKQUOTE>
<TT>public void nextFocus()<BR>
</TT>The <TT>nextFocus</TT>
method switches the focus to the next component. The next component
can be determined by examining the tab order of the components
on a form.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
toString</TT> returns a string representation of the <TT>Component</TT>
class.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value containing the <TT>Component</TT>
class's name plus its x, y, height, and width values.
</BLOCKQUOTE>
<H4><TT>list</TT></H4>
<BLOCKQUOTE>
<TT>public void list()<BR>
</TT>The <TT>list</TT> method
prints a listing of the component to the print stream.
</BLOCKQUOTE>
<H4><TT>list</TT></H4>
<BLOCKQUOTE>
<TT>public void list(PrintStream out)<BR>
</TT>This <TT>list</TT> method
prints a listing of the component to the specified output stream.
<BR>
<I><B>Parameters: </B></I><TT>out</TT>-a
<TT>PrintStream</TT> object.
</BLOCKQUOTE>
<H4><TT>list</TT></H4>
<BLOCKQUOTE>
<TT>public void list(PrintStream out, int
indent)<BR>
</TT>This <TT>list</TT> method
prints a listing of the component to the specified output stream
at the specified indention.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>out</TT>-a <TT>PrintStream</TT>
object.<BR>
<TT>indent</TT>-an integer value representing
the amount to be indented.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierContainerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Container</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Component<BR>
</TT>A <TT>Container</TT> class
is defined as a class that can contain other components.<BR>
<TT>countComponents<BR>
public int countComponents()<BR>
countComponents</TT> returns the number of components contained
within the container.<BR>
<I><B>Returns: </B></I>An integer value representing the number
of components within the container.
</BLOCKQUOTE>
<H4><TT>getComponent</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized Component getComponent(int
n)<BR>
</TT>The <TT>getComponent</TT>
method returns the component at the specified index.<BR>
<I><B>Parameters: </B></I><TT>n</TT>-an
integer value representing the index at which to retrieve a component.
<BR>
<I><B>Returns: </B></I>A <TT>Component</TT>
object within the container.
</BLOCKQUOTE>
<H4><TT>getComponents</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized Component[] getComponents()
<BR>
getComponents</TT> returns an array of <TT>Component</TT>
objects contained within the <TT>Container</TT>.
<BR>
<I><B>Returns: </B></I>An array of <TT>Component</TT>
objects contained within the container.
</BLOCKQUOTE>
<H4><TT>insets</TT></H4>
<BLOCKQUOTE>
<TT>public Insets insets()<BR>
</TT>The <TT>insets</TT> methods
returns the borders of this container.<BR>
<I><B>Returns: </B></I>An <TT>Insets</TT>
object representing the insets of the container.
</BLOCKQUOTE>
<H4><TT>add</TT></H4>
<BLOCKQUOTE>
<TT>public Component add(Component comp)
<BR>
</TT>The <TT>add</TT> method
adds a <TT>Component</TT> to the container
at the end of the container's array of components.<BR>
<I><B>Parameters: </B></I><TT>comp</TT>-the
component to be added.<BR>
<I><B>Returns: </B></I>The <TT>Component</TT>
object that was added to the container's list.
</BLOCKQUOTE>
<H4><TT>add</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized Component add(Component
comp, int pos)<BR>
</TT>This <TT>add</TT> method
adds a <TT>Component</TT> to the container
at the specified index in the container's array of components.
<BR>
<I><B>Parameters: <BR>
</B></I><TT>comp</TT>-the component
to be added.<BR>
<TT>pos</TT>-the position the component
is to be added at.<BR>
<I><B>Returns: </B></I>The <TT>Component</TT>
object that was added to the container's list.
</BLOCKQUOTE>
<H4><TT>add</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized Component add(String
name, Component comp)<BR>
</TT>This <TT>add</TT> method
adds a <TT>Component</TT> using the
<TT>Component</TT> argument and that
<TT>Component</TT>'s name.<BR>
<I><B>Parameters: <BR>
</B></I><TT>name</TT>-a <TT>String</TT>
representing the name of the component.<BR>
<TT>comp</TT>-the component to be
added.<BR>
<I><B>Returns: </B></I>The <TT>Component</TT>
object that was added to the container's list.
</BLOCKQUOTE>
<H4><TT>remove</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void remove(Component
comp)<BR>
</TT>The <TT>remove</TT> method
removes the specified component from the <TT>Container</TT>'s
list.<BR>
<I><B>Parameters: </B></I><TT>comp</TT>-the
component to be removed.
</BLOCKQUOTE>
<H4><TT>removeAll</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void removeAll()
<BR>
</TT>The <TT>removeAll</TT>
method removes all components from within the <TT>Container</TT>.
</BLOCKQUOTE>
<H4><TT>getLayout</TT></H4>
<BLOCKQUOTE>
<TT>public LayoutManager getLayout()<BR>
getLayout</TT> returns this container's layout manager.
<BR>
<I><B>Returns: </B></I>A layout manager interface representing
the container's <TT>LayoutManager</TT>.
</BLOCKQUOTE>
<H4><TT>setLayout</TT></H4>
<BLOCKQUOTE>
<TT>public void setLayout(LayoutManager mgr)
<BR>
setLayout</TT> sets the current layout manager of the container.
<BR>
<I><B>Parameters: </B></I><TT>mgr</TT>-the
layout manager that will control the layouts of this <TT>Container</TT>'s
components.
</BLOCKQUOTE>
<H4><TT>layout</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void layout()<BR>
</TT>The <TT>layout</TT> method
is called to perform a layout on this component.
</BLOCKQUOTE>
<H4><TT>validate</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void validate()<BR>
</TT>The <TT>validate</TT>
method refreshes the container and all of the components within
it by validating the container and all of its components.
</BLOCKQUOTE>
<H4><TT>preferredSize</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized Dimension preferredSize()
<BR>
preferredSize</TT> returns the preferred size of this container.
<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object representing the preferred size of this <TT>Container</TT>.
</BLOCKQUOTE>
<H4><TT>minimumSize</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized Dimension minimumSize()
<BR>
minimumSize</TT> returns the minimum size of this container.
<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object representing the minimum size of this <TT>Container</TT>.
</BLOCKQUOTE>
<H4><TT>paintComponents</TT></H4>
<BLOCKQUOTE>
<TT>public void paintComponents(Graphics
g)<BR>
</TT>The <TT>paintComponents</TT>
method is used to paint each of the components within the container.
<BR>
<I><B>Parameters: </B></I><TT>g</TT>-the
<TT>Graphics</TT> context that the
container's components will be painted on.
</BLOCKQUOTE>
<H4><TT>printComponents</TT></H4>
<BLOCKQUOTE>
<TT>public void printComponents(Graphics
g)<BR>
</TT>The <TT>printComponents</TT>
method is used to print each of the components within the container.
<BR>
<I><B>Parameters: </B></I><TT>g</TT>-the
<TT>Graphics</TT> context that the
container's components will be printed on.
</BLOCKQUOTE>
<H4><TT>deliverEvent</TT></H4>
<BLOCKQUOTE>
<TT>public void deliverEvent(Event e)<BR>
deliverEvent</TT> locates the appropriate component within
the container that the event applies to and delivers the event
to that component.<BR>
<I><B>Parameters: </B></I><TT>e</TT>-the
event to be delivered.
</BLOCKQUOTE>
<H4><TT>locate</TT></H4>
<BLOCKQUOTE>
<TT>public Component locate(int x, int y)
<BR>
</TT>The <TT>locate</TT> method
locates and returns the component that lies at the specified x
and y coordinates within the container.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate of the
component to be located.<BR>
<TT>y</TT>-the y coordinate of the
component to be located.
</BLOCKQUOTE>
<H4><TT>addNotify</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void addNotify()
<BR>
addNotify</TT> notifies the container to create a peer
interface. This method will also notify each of the container's
components to do likewise.
</BLOCKQUOTE>
<H4><TT>removeNotify</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void removeNotify()
<BR>
removeNotify</TT> notifies the container to remove its
peer. This method will also notify each of the container's components
to do likewise.
</BLOCKQUOTE>
<H4><TT>list</TT></H4>
<BLOCKQUOTE>
<TT>public void list(PrintStream out, int
indent)<BR>
</TT>The <TT>list</TT> method
prints a list for each component within the container to the specified
output stream at the specified indentation.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>out</TT>-a <TT>PrintStream</TT>
object.<BR>
<TT>indent</TT>-an integer amount
representing the value to indent the list.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierDialogFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Dialog</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Window<BR>
</TT>The <TT>Dialog</TT> class
is used to create a window that can be closed by the user. Dialogs
are normally temporary windows that are used for inputting information.
</BLOCKQUOTE>
<H4><TT>Dialog</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Dialog(Frame parent, boolean modal)
<BR>
</TT>This <TT>Dialog</TT> constructor
constructs a <TT>Dialog</TT> object
from a parent <TT>Frame</TT> object.
This dialog is initially invisible.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>parent</TT>-the parent frame of
the dialog.<BR>
<TT>modal</TT>-a boolean value designating
this dialog to be either modal or nonmodal.
</BLOCKQUOTE>
<H4><TT>Dialog</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Dialog(Frame parent, String title,
boolean modal)<BR>
</TT>This <TT>Dialog</TT> constructor
constructs a <TT>Dialog</TT> object
from a parent <TT>Frame</TT> object.
This dialog is initially invisible.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>parent</TT>-the parent frame of
the dialog.<BR>
<TT>title</TT>-a <TT>String</TT>
value representing the title to be displayed for this dialog.
<BR>
<TT>modal</TT>-a boolean value designating
this dialog to be either modal or nonmodal.
</BLOCKQUOTE>
<H4><TT>addNotify</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void addNotify()
<BR>
</TT>The <TT>addNotify</TT>
method creates the dialog's peer. Making use of a peer interface
allows the dialog's appearance to be changed without changing
its functionality.
</BLOCKQUOTE>
<H4><TT>isModal</TT></H4>
<BLOCKQUOTE>
<TT>public boolean isModal()<BR>
isModal</TT> returns the modal status of the dialog.<BR>
<I><B>Returns: </B></I>A boolean value representing the dialog's
modal status. If this is <TT>true</TT>,
the dialog is modal. If <TT>false</TT>,
the dialog is nonmodal.
</BLOCKQUOTE>
<H4><TT>getTitle</TT></H4>
<BLOCKQUOTE>
<TT>public String getTitle()<BR>
getTitle</TT> returns the dialog's title string.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value representing the title string of the dialog.
</BLOCKQUOTE>
<H4><TT>setTitle</TT></H4>
<BLOCKQUOTE>
<TT>public void setTitle(String title)<BR>
</TT>The <TT>setTitle</TT>
method sets the dialog's title string.<BR>
<I><B>Parameters: </B></I><TT>title</TT>-a
<TT>String</TT> value representing
the dialog's new title.
</BLOCKQUOTE>
<H4><TT>isResizable</TT></H4>
<BLOCKQUOTE>
<TT>public boolean isResizable()<BR>
</TT>The <TT>isResizable</TT>
method is called to determine whether or not this dialog can be
resized.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the dialog is resizable, <TT>false</TT>
if it is not.
</BLOCKQUOTE>
<H4><TT>setResizable</TT></H4>
<BLOCKQUOTE>
<TT>public void setResizable(boolean resizable)
<BR>
</TT>The <TT>setResizable</TT>
method is used to change whether a dialog can be resized.<BR>
<I><B>Parameters: </B></I><TT>resizable</TT>-a
boolean value that is <TT>true</TT>
if the dialog is to be resizable and <TT>false</TT>
if not.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierDimensionFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Dimension</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>A Dimension class is used to encapsulate an object's
height and width.
</BLOCKQUOTE>
<H4>Member Variables</H4>
<BLOCKQUOTE>
<TT>public int width<BR>
</TT>The <TT>width</TT> instance
variable contains the integer value representing the <TT>Dimension</TT>'s
width value.<P>
<TT>public int height<BR>
</TT>The <TT>height</TT> instance
variable contains the integer value representing the <TT>Dimension</TT>'s
height value.
</BLOCKQUOTE>
<H4><TT>Dimension</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public Dimension()<BR>
</TT>This <TT>Dimension</TT>
constructor constructs an empty <TT>Dimension</TT>
object.
</BLOCKQUOTE>
<H4><TT>Dimension</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public Dimension(Dimension d)<BR>
</TT>This <TT>Dimension</TT>
constructor constructs a <TT>Dimension</TT>
object from an existing <TT>Dimension</TT>
object.<BR>
<I><B>Parameters: </B></I><TT>d</TT>-a
<TT>Dimension</TT> object whose values
will be used to create the new dimension.
</BLOCKQUOTE>
<H4><TT>Dimension</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public Dimension(int width, int height)
<BR>
</TT>This <TT>Dimension</TT>
constructor constructs a <TT>Dimension</TT>
object based on the <TT>width</TT>
and <TT>height</TT> input parameters.
<BR>
<I><B>Parameters:</B></I> <BR>
<TT>width</TT>-an integer value representing
the width of the new dimension.<BR>
<TT>height</TT>-an integer value representing
the height of the new dimension.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>The <TT>toString</TT>
method is used to return a string representation of this <TT>Dimension</TT>
object.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
containing this dimension's height and width values.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierEventFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Event</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>The <TT>Event</TT> class
is used to encapsulate GUI event's in a platform-independent manner.
</BLOCKQUOTE>
<H4>Member Constants</H4>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int SHIFT_MASK
</TT><BR>
The SHIFT_MASK value represents the Shift Modifier constant.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int CTRL_MASK
</TT><BR>
The CTRL_MASK value represents the Control Modifier constant.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int META_MASK
</TT><BR>
The META_MASK value represents the Meta Modifier constant.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int ALT_MASK
</TT><BR>
The ALT_MASK value represents the Alt Modifier constant.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int HOME
</TT><BR>
The HOME value represents the Home key.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int END
</TT><BR>
The END value represents the End key.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int PGUP
</TT><BR>
The PGUP value represents the Page Up key.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int PGDN
</TT><BR>
The PGDN value represents the Page Down key.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int UP
</TT><BR>
The UP value represents the up-arrow key.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int DOWN
</TT><BR>
The DOWN value represents the down-arrow key.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int LEFT
</TT><BR>
The LEFT value represents the left-arrow key.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int RIGHT
</TT><BR>
The RIGHT value represents the right-arrow key.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int f1
</TT><BR>
The f1 value represents the f1 key.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int f2
</TT><BR>
The f2 value represents the f2 key.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int f3
</TT><BR>
The f3 value represents the f3 key.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int f4
</TT><BR>
The f4 value represents the f4 key.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int f5
</TT><BR>
The f5 value represents the f5 key.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int f6
</TT><BR>
The f6 value represents the f6 key.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int f7
</TT><BR>
The f7 value represents the f7 key.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int f8
</TT><BR>
The f8 value represents the f8 key.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int f9
</TT><BR>
The f9 value represents the f9 key.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int f10
</TT><BR>
The f10 value represents the f10 key.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int f11
</TT><BR>
The f11 value represents the f11 key.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int f12
</TT><BR>
The f12 value represents the f12 key.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int WINDOW_DESTROY
</TT><BR>
The WINDOW_DESTROY value represents the destroy window event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int WINDOW_EXPOSE
</TT><BR>
The WINDOW_EXPOSE value represents the expose window event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int WINDOW_ICONIFY
</TT><BR>
The WINDOW_ICONIFY value represents the iconify window event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int WINDOW_DEICONIFY
</TT><BR>
The DEICONIFY_WINDOW value represents the deiconify window event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int WINDOW_MOVED
</TT><BR>
The WINDOW_MOVED value represents the window moved event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int KEY_PRESS
</TT><BR>
The KEY_PRESS value represents the keypress event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int KEY_RELEASE
</TT><BR>
The KEY_RELEASE value represents the key release event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int KEY_ACTION
</TT><BR>
The KEY_ACTION value represents the key action keyboard event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int KEY_ACTION_RELEASE
</TT><BR>
The KEY_ACTION_RELEASE value represents the key action release
keyboard event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int MOUSE_DOWN
</TT><BR>
The MOUSE_DOWN value represents the mouse down event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int MOUSE_UP
</TT><BR>
The MOUSE_UP value represents the mouse up event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int MOUSE_MOVE
</TT><BR>
The MOUSE_MOVE value represents the mouse move event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int MOUSE_ENTER
</TT><BR>
The MOUSE_ENTER value represents the mouse enter event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int MOUSE_EXIT
</TT><BR>
The MOUSE_EXIT value represents the mouse exit event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int MOUSE_DRAG
</TT><BR>
The MOUSE_DRAG value represents the mouse drag event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int SCROLL_LINE_UP
</TT><BR>
The SCROLL_LINE_UP value represents the line up scroll event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int SCROLL_LINE_DOWN
</TT><BR>
The SCROLL_LINE_DOWN value represents the line down scroll event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int SCROLL_PAGE_UP
</TT><BR>
The SCROLL_PAGE_UP value represents the page up scroll event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int SCROLL_PAGE_DOWN
</TT><BR>
The SCROLL_PAGE_DOWN value represents the page down scroll event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int SCROLL_ABSOLUTE
</TT><BR>
The SCROLL_ABSOLUTE value represents the absolute scroll event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int LIST_SELECT
</TT><BR>
The LIST_SELECT value represents the select list event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int LIST_DESELECT
</TT><BR>
The LIST_DESELECT value represents the deselect list event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int ACTION_EVENT
</TT><BR>
The ACTION_EVENT value represents an action event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int LOAD_FILE
</TT><BR>
The LOAD_FILE value represents a file load event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int SAVE_FILE
</TT><BR>
The SAVE_FILE value represents a file save event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int GOT_FOCUS
</TT><BR>
The GOT_FOCUS value represents a got focus event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int LOST_FOCUS
</TT><BR>
The LOST_FOCUS value represents a lost focus event.
<H4>Member Variables</H4>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public Object target
</TT><BR>
The target instance variable represents the object that is the
target of the event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public long when
</TT><BR>
The when instance variable represents the time stamp of the event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public int id
</TT><BR>
The id instance variable represents the type of the event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public int x
</TT><BR>
The x instance variable represents the x coordinate of the event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public int y
</TT><BR>
The y instance variable represents the y coordinate of the event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public int key
</TT><BR>
The key instance variable represents the key that was pressed
to trigger the keyboard event.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public int modifiers
</TT><BR>
The modifiers instance variable represents the state of the modifier
keys.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public int clickCount
</TT><BR>
The clickCount instance variable represents the number of clicks
during the mouse down event. If this event wasn't triggered by
a mouse down action, this value will be 0. It will be 1 for a
single click, and 2 for a double click.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public Object arg
</TT><BR>
The arg instance variable represents an arbitrary argument.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public Event evt
</TT><BR>
The evt instance variable represents the next event. This is useful
when multiple events will be stored in an array or linked list.
</BLOCKQUOTE>

<H4><TT>Event</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Event(Object target, long when,
int id, int x, int y, int key, int modifiers, Object arg)<BR>
</TT>This <TT>Event</TT> constructor
constructs an event using the target, current time, event ID,
location, key pressed and modifiers, and some argument.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>target</TT>-the target object
for the event.<BR>
<TT>when</TT>-the time stamp for the
event.<BR>
<TT>id</TT>-the event type.<BR>
<TT>x</TT>-the x coordinate of the
event.<BR>
<TT>y</TT>-the y coordinate of the
event.<BR>
<TT>key</TT>-the key pressed that
triggered a keyboard event.<BR>
<TT>modifiers</TT>-the state of the
modifier keys.<BR>
<TT>arg</TT>-an arbitrary argument.
</BLOCKQUOTE>
<H4><TT>Event</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Event(Object target, long when,
int id, int x, int y, int key, int modifiers)<BR>
</TT>This <TT>Event</TT> constructor
constructs an event using the target, current time, event ID,
location, key pressed, and modifiers.<BR>
<I><B>Parameters:<BR>
</B></I><TT>target</TT>-the target
object for the event.<BR>
<TT>when</TT>-the time stamp for the
event.<BR>
<TT>id</TT>-the event type.<BR>
<TT>x</TT>-the x coordinate of the
event.<BR>
<TT>y</TT>-the y coordinate of the
event.<BR>
<TT>key</TT>-the key pressed that
triggered a keyboard event.
</BLOCKQUOTE>
<H4><TT>Event</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Event(Object target, int id, Object
arg)<BR>
</TT>This <TT>Event</TT> constructor
constructs an event using the target, event ID, and some argument.
<BR>
<I><B>Parameters:</B></I> <BR>
<TT>target</TT>-the target object
for the event.<BR>
<TT>id</TT>-the event type.<BR>
<TT>arg</TT>-an arbitrary argument.
</BLOCKQUOTE>
<H4><TT>translate</TT></H4>
<BLOCKQUOTE>
<TT>public void translate(int x, int y)<BR>
</TT>The <TT>translate</TT>
method translates coordinates for a given component. If the object
sending this event has targeted a certain component, this method
will translate the coordinates to make sense for that particular
component.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate.<BR>
<TT>y</TT>-the y coordinate.
</BLOCKQUOTE>
<H4><TT>shiftDown</TT></H4>
<BLOCKQUOTE>
<TT>public boolean shiftDown()<BR>
</TT>The <TT>shiftDown</TT>
method returns the current state of the Shift key.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the Shift key is down, <TT>false</TT>
if it is up.
</BLOCKQUOTE>
<H4><TT>controlDown</TT></H4>
<BLOCKQUOTE>
<TT>public boolean controlDown()<BR>
</TT>The <TT>controlDown</TT>
method returns the current state of the Ctrl key.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the Ctrl key is down, <TT>false</TT>
if it is up.
</BLOCKQUOTE>
<H4><TT>metaDown</TT></H4>
<BLOCKQUOTE>
<TT>public boolean metaDown()<BR>
</TT>The <TT>metaDown</TT>
method returns the current state of the Meta key.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the meta key is down, <TT>false</TT>
if it is up.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>The <TT>toString</TT>
method returns the string representation of the current event.
<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value containing information on the event, including the <TT>id</TT>,
<TT>x</TT>, <TT>y</TT>,
<TT>key</TT>, <TT>shiftDown</TT>,
<TT>controlDown</TT>, and <TT>metaDown</TT>
values.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierFileDialogFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>FileDialog</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Dialog<BR>
</TT>A <TT>FileDialog</TT>
is presented to a user in order for that user to select a file.
This dialog is a modal dialog, therefore the calling thread will
be blocked until this dialog exits.
</BLOCKQUOTE>
<H4>Member Constants</H4>
<BLOCKQUOTE>
<TT>public static final int LOAD<BR>
</TT>The <TT>LOAD</TT> static
value represents the file load variable.<P>
<TT>public static final int SAVE<BR>
</TT>The <TT>SAVE</TT> static
value represents the file save variable.
</BLOCKQUOTE>
<H4><TT>FileDialog</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public FileDialog(Frame parent, String
title)<BR>
</TT>This <TT>FileDialog</TT>
constructor constructs a file dialog using a parent frame and
a title string.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>parent</TT>-the parent frame of
the file dialog.<BR>
<TT>title</TT>-a <TT>String</TT>
containing the dialog's title.
</BLOCKQUOTE>
<H4><TT>FileDialog</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public FileDialog(Frame parent, String
title, int mode)<BR>
</TT>This <TT>FileDialog</TT>
constructor constructs a file dialog using a parent frame, a title
string, and a mode value representing either a load or save dialog.
<BR>
<I><B>Parameters:</B></I> <BR>
<TT>parent</TT>-the parent frame of
the file dialog.<BR>
<TT>title</TT>-a <TT>String</TT>
containing the dialog's title.<BR>
<TT>mode</TT>-an integer value representing
the dialog mode (<TT>LOAD</TT> or
<TT>SAVE</TT>).
</BLOCKQUOTE>
<H4><TT>addNotify</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void addNotify()
<BR>
addNotify</TT> notifies <TT>FileDialog</TT>
to create a peer. Using a peer interface allows the user interface
of the file dialog to be changed without changing its functionality.
</BLOCKQUOTE>
<H4><TT>getMode</TT></H4>
<BLOCKQUOTE>
<TT>public int getMode()<BR>
getMode</TT> returns the current mode of the file dialog.
<BR>
<I><B>Returns: </B></I>An integer value representing the current
mode (<TT>LOAD</TT> or <TT>SAVE</TT>)
of the file dialog.
</BLOCKQUOTE>
<H4><TT>getDirectory</TT></H4>
<BLOCKQUOTE>
<TT>public String getDirectory()<BR>
</TT>The <TT>getDirectory</TT>
method returns the current directory of the file dialog.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value representing <TT>FileDialog</TT>'s
current directory.
</BLOCKQUOTE>
<H4><TT>setDirectory</TT></H4>
<BLOCKQUOTE>
<TT>public void setDirectory(String dir)
<BR>
</TT>The <TT>setDirectory</TT>
method is used to set the current directory of the <TT>FileDialog</TT>.
<BR>
<I><B>Parameters: </B></I><TT>dir</TT>-a
<TT>String</TT> value representing
the directory to be set.
</BLOCKQUOTE>
<H4><TT>getFile</TT></H4>
<BLOCKQUOTE>
<TT>public String getFile()<BR>
</TT>The <TT>getFile</TT> method
returns the currently selected file within <TT>FileDialog</TT>.
<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value representing the file dialog's current file.
</BLOCKQUOTE>
<H4><TT>setFile</TT></H4>
<BLOCKQUOTE>
<TT>public void setFile(String file)<BR>
</TT>The <TT>setFile</TT> method
is used to set the current file of the file dialog.<BR>
<I><B>Parameters: </B></I><TT>file</TT>-a
<TT>String</TT> value representing
the file to be set.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierFlowLayoutFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>FlowLayout</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT><I><B>Implements: </B></I><TT>LayoutManager</TT>
<BR>
A <TT>FlowLayout</TT> implements the
<TT>LayoutManager</TT> interface.
This class is used to lay out buttons from left to right until
no more buttons fit on the <TT>Panel</TT>.
</BLOCKQUOTE>
<H4>Member Constants</H4>
<BLOCKQUOTE>
<TT>public static final int LEFT<BR>
</TT>The <TT>LEFT</TT> static
value represents the left alignment variable.<P>
<TT>public static final int CENTER<BR>
</TT>The <TT>CENTER</TT> static
value represents the center alignment variable.<P>
<TT>public static final int RIGHT<BR>
</TT>The <TT>RIGHT</TT> static
value represents the right alignment variable.
</BLOCKQUOTE>
<H4><TT>FlowLayout</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public FlowLayout()<BR>
</TT>This <TT>FlowLayout</TT>
constructor constructs a default <TT>FlowLayout</TT>
class with a centered alignment.
</BLOCKQUOTE>
<H4><TT>FlowLayout</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public FlowLayout(int align)<BR>
</TT>This <TT>FlowLayout</TT>
constructor constructs a <TT>FlowLayout</TT>
class using the specified alignment.<BR>
<I><B>Parameters: </B></I><TT>align</TT>-the
alignment value (<TT>LEFT</TT>, <TT>CENTER</TT>,
or <TT>RIGHT</TT>).
</BLOCKQUOTE>
<H4><TT>FlowLayout</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public FlowLayout(int align, int hgap,
int vgap)<BR>
</TT>This <TT>FlowLayout</TT>
constructor constructs a <TT>FlowLayout</TT>
class using the specified alignment and gap values.<BR>
<I><B>Parameters: <BR>
</B></I><TT>align</TT>-the alignment
value (<TT>LEFT</TT>, <TT>CENTER</TT>,
or <TT>RIGHT</TT>).<BR>
<TT>hgap</TT>-the horizontal gap value.
<BR>
<TT>vgap</TT>-the vertical gap value.
</BLOCKQUOTE>
<H4><TT>addLayoutComponent</TT></H4>
<BLOCKQUOTE>
<TT>public void addLayoutComponent(String
name, Component comp)<BR>
</TT>The <TT>addLayoutComponent</TT>
method adds a component to the <TT>FlowLayout</TT>
class.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>name</TT>-a <TT>String</TT>
value representing the name of the <TT>Component</TT>
to be added.<BR>
<TT>comp</TT>-the <TT>Component</TT>
object to be added to <TT>FlowLayout</TT>.
</BLOCKQUOTE>
<H4><TT>removeLayoutComponent</TT>
</H4>
<BLOCKQUOTE>
<TT>public void removeLayoutComponent(Component
comp)<BR>
removeLayoutComponent</TT> removes a component from the
<TT>FlowLayout</TT> class.<BR>
<I><B>Parameters: </B></I><TT>comp</TT>-a
<TT>Component</TT> object to be removed
from <TT>FlowLayout</TT>.
</BLOCKQUOTE>
<H4><TT>preferredLayoutSize</TT></H4>
<BLOCKQUOTE>
<TT>public Dimension preferredLayoutSize(Container
target)<BR>
</TT>The <TT>preferredLayoutSize</TT>
method returns the preferred size for this <TT>FlowLayout</TT>
given the components in the specified container.<BR>
<I><B>Parameters: </B></I><TT>target</TT>-a
<TT>Container</TT> object that will
be examined to determine the preferred layout size for this <TT>FlowLayout</TT>.
<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
class containing the preferred size of the <TT>FlowLayout</TT>.
</BLOCKQUOTE>
<H4><TT>minimumLayoutSize</TT></H4>
<BLOCKQUOTE>
<TT>public Dimension minimumLayoutSize(Container
target)<BR>
</TT>The <TT>minimumLayoutSize</TT>
method returns the minimum size for this <TT>FlowLayout</TT>
given the components in the specified container.<BR>
<I><B>Parameters: </B></I><TT>target</TT>-a
<TT>Container</TT> object that will
be examined to determine the minimum layout size for this <TT>FlowLayout</TT>.
<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
class containing the minimum size of the <TT>FlowLayout</TT>.
</BLOCKQUOTE>
<H4><TT>layoutContainer</TT></H4>
<BLOCKQUOTE>
<TT>public void layoutContainer(Container
target)<BR>
</TT>The <TT>layoutContainer</TT>
method lays out the components within the specified container.
<BR>
<I><B>Parameters: </B></I><TT>target</TT>-a
<TT>Container</TT> class containing
a set of components that will be laid out according to the <TT>FlowLayout</TT>
rules.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>The <TT>toString</TT>
method returns a string representation of the <TT>FlowLayout</TT>
class.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
containing information about the <TT>FlowLayout</TT>,
including the <TT>FlowLayout</TT>'s
<TT>name</TT>, <TT>alignment</TT>,
<TT>hgap</TT>, and <TT>vgap</TT>
values.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierFontFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Font</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>This class is used to encapsulate a font.
</BLOCKQUOTE>
<H4>Member Constants</H4>
<BLOCKQUOTE>
<TT>public static final int PLAIN<BR>
</TT>The <TT>PLAIN</TT> static
value represents the plain style constant.<P>
<TT>public static final int BOLD<BR>
</TT>The <TT>BOLD</TT> static
value represents the bold style constant.<P>
<TT>public static final int ITALIC<BR>
</TT>The <TT>ITALIC</TT> static
value represents the italic style constant.
</BLOCKQUOTE>
<H4><TT>Font</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Font(String name, int style, int
size)<BR>
</TT>The <TT>Font</TT> constructor
constructs a font of the specified name, style, and size.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>name</TT>-the name of the font
to be created.<BR>
<TT>style</TT>-the style (<TT>PLAIN</TT>
and/or <TT>BOLD</TT> and/or <TT>ITALIC</TT>)
of the font to be created.<BR>
<TT>size</TT>-the size of the font
to be created.
</BLOCKQUOTE>
<H4><TT>getFamily</TT></H4>
<BLOCKQUOTE>
<TT>public String getFamily()<BR>
getFamily</TT> returns the font family that this font belongs
to.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value representing the font's family name.
</BLOCKQUOTE>
<H4><TT>getName</TT></H4>
<BLOCKQUOTE>
<TT>public String getName()<BR>
getName</TT> returns the name of the <TT>Font</TT>
object.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value representing the name of the font.
</BLOCKQUOTE>
<H4><TT>getStyle</TT></H4>
<BLOCKQUOTE>
<TT>public int getStyle()<BR>
getStyle</TT> returns the style of the <TT>Font</TT>
object.<BR>
<I><B>Returns: </B></I>An integer value representing the style
of the font.
</BLOCKQUOTE>
<H4><TT>getSize</TT></H4>
<BLOCKQUOTE>
<TT>public int getSize()<BR>
getSize</TT> returns the size of the <TT>Font</TT>
object.<BR>
<I><B>Returns: </B></I>An integer value representing the point
size of the font.
</BLOCKQUOTE>
<H4><TT>isPlain</TT></H4>
<BLOCKQUOTE>
<TT>public boolean isPlain()<BR>
isPlain</TT> returns the plain style state of the <TT>Font</TT>.
<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the font is plain, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>isBold</TT></H4>
<BLOCKQUOTE>
<TT>public boolean isBold()<BR>
isBold</TT> returns the bold style state of the <TT>Font</TT>.
<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the font is bold, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>isItalic</TT></H4>
<BLOCKQUOTE>
<TT>public boolean isItalic()<BR>
isItalic</TT> returns the italic style state of the <TT>Font</TT>.
<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the font is italic, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>getFont</TT></H4>
<BLOCKQUOTE>
<TT>public static Font getFont(String nm)
<BR>
getFont</TT> returns a <TT>Font</TT>
based on the system properties list and the name passed in.<BR>
<I><B>Parameters: </B></I><TT>nm</TT>-the
name of the font to be returned from the system properties list.
<BR>
<I><B>Returns: </B></I>A <TT>Font</TT>
object based on the system properties list.
</BLOCKQUOTE>
<H4><TT>getFont</TT></H4>
<BLOCKQUOTE>
<TT>public static Font getFont(String nm,
Font font)<BR>
</TT>This <TT>getFont</TT>
method returns a <TT>Font</TT> based
on the system properties list, the name passed in, and a default
font in case the specified name is not found.<BR>
<I><B>Parameters: <BR>
</B></I><TT>nm</TT>-the name of the
font to be returned from the system properties list.<BR>
<TT>font</TT>-the default font to
be returned if the font specified by the <TT>nm</TT>
variable is not found.<BR>
<I><B>Returns: </B></I>A <TT>Font</TT>
object based on the system properties list.
</BLOCKQUOTE>
<H4><TT>hashCode</TT></H4>
<BLOCKQUOTE>
<TT>public int hashCode()<BR>
hashCode</TT> returns a hash code for this font.<BR>
<I><B>Returns: </B></I>An integer value representing the hash
code for the font.
</BLOCKQUOTE>
<H4><TT>equals</TT></H4>
<BLOCKQUOTE>
<TT>public boolean equals(Object obj)<BR>
equals</TT> compares an object with the <TT>Font</TT>
object.<BR>
<I><B>Parameters: </B></I><TT>obj</TT>-the
object to compare the font with.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the objects are equal, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>The <TT>toString</TT>
method is used to return a string representation of the font.
<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value containing the font family, name, style, and size values.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierFontMetricsFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>FontMetrics</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>The <TT>FontMetrics</TT>
class is used to encapsulate a <TT>FontMetrics</TT>
object containing font information.
</BLOCKQUOTE>
<H4><TT>getFont</TT></H4>
<BLOCKQUOTE>
<TT>public Font getFont()<BR>
</TT>The <TT>getFont</TT> method
returns the font that these <TT>FontMetrics</TT>
refer to.<BR>
<I><B>Returns: </B></I>A <TT>Font</TT>
object.
</BLOCKQUOTE>
<H4><TT>getLeading</TT></H4>
<BLOCKQUOTE>
<TT>public int getLeading()<BR>
</TT>The <TT>getLeading</TT>
method gets the line spacing of the font.<BR>
<I><B>Returns: </B></I>An integer value containing the standard
leading, or line spacing, of the font. The line spacing of a font
is the space reserved between the descent of a text character
and the ascent of a text character below it.
</BLOCKQUOTE>
<H4><TT>getAscent</TT></H4>
<BLOCKQUOTE>
<TT>public int getAscent()<BR>
</TT>The <TT>getAscent</TT>
method gets the ascent value for a font.<BR>
<I><B>Returns: </B></I>An integer value containing the ascent
value for a font. This value is the distance from the bottom of
a character to its top.
</BLOCKQUOTE>
<H4><TT>getDescent</TT></H4>
<BLOCKQUOTE>
<TT>public int getDescent()<BR>
</TT>The <TT>getDescent</TT>
method gets the descent value for a font.<BR>
<I><B>Returns: </B></I>An integer value containing the descent
value for a font. This value is the bottom coordinate of a character.
</BLOCKQUOTE>
<H4><TT>getHeight</TT></H4>
<BLOCKQUOTE>
<TT>public int getHeight()<BR>
</TT>The <TT>getHeight</TT>
method gets the height of a line of text using the current <TT>Font</TT>.
<BR>
<I><B>Returns: </B></I>An integer value containing the height
of a line of text. This value is calculated by adding the ascent,
descent, and leading values.
</BLOCKQUOTE>
<H4><TT>getMaxAscent</TT></H4>
<BLOCKQUOTE>
<TT>public int getMaxAscent()<BR>
getMaxAscent</TT> returns the maximum value of a font's
ascent.<BR>
<I><B>Returns: </B></I>An integer value containing the maximum
value of a font's ascent for all of that <BR>
font's characters.
</BLOCKQUOTE>
<H4><TT>getMaxDescent</TT></H4>
<BLOCKQUOTE>
<TT>public int getMaxDescent()<BR>
getMaxDescent</TT> returns the maximum value of a font's
descent.<BR>
<I><B>Returns: </B></I>An integer value containing the maximum
value of a font's descent for all of that font's characters.
</BLOCKQUOTE>
<H4><TT>getMaxDecent</TT></H4>
<BLOCKQUOTE>
<TT>public int getMaxDecent()<BR>
</TT>The <TT>getMaxDecent</TT>
method is provided only for backward compatibility. It simply
calls the <TT>getMaxDescent</TT> method.
<BR>
<I><B>Returns: </B></I>An integer value containing the maximum
value of a font's descent for all of that font's characters.
</BLOCKQUOTE>
<H4><TT>getMaxAdvance</TT></H4>
<BLOCKQUOTE>
<TT>public int getMaxAdvance()<BR>
</TT>The <TT>getMaxAdvance</TT>
method gets the maximum amount for a character's advance value.
The advance is the amount that is advanced from the beginning
of one character to the next character.
</BLOCKQUOTE>
<H4><TT>charWidth</TT></H4>
<BLOCKQUOTE>
<TT>public int charWidth(int ch)<BR>
charWidth</TT> returns the width of a particular character
for the current font.<BR>
<I><B>Parameters: </B></I><TT>ch</TT>-an
integer value representing the character to be checked.<BR>
<I><B>Returns: </B></I>An integer value representing the width
of the specified character.
</BLOCKQUOTE>
<H4><TT>charWidth</TT></H4>
<BLOCKQUOTE>
<TT>public int charWidth(char ch)<BR>
</TT>This <TT>charWidth</TT>
method returns the width of a particular character for the current
font.<BR>
<I><B>Parameters: </B></I><TT>ch</TT>-a
string value representing the character to be checked.<BR>
<I><B>Returns: </B></I>An integer value representing the width
of the specified character.
</BLOCKQUOTE>
<H4><TT>stringWidth</TT></H4>
<BLOCKQUOTE>
<TT>public int stringWidth(String str)<BR>
</TT>The <TT>stringWidth</TT>
method returns the width of a specified string using the current
font.<BR>
<I><B>Parameters: </B></I><TT>str</TT>-a
string representing the characters to be checked.<BR>
<I><B>Returns: </B></I>An integer value representing the advance
width of the specified string.
</BLOCKQUOTE>
<H4><TT>charsWidth</TT></H4>
<BLOCKQUOTE>
<TT>public int charsWidth(char data[], int
off, int len)<BR>
</TT>The <TT>charsWidth</TT>
method returns the width of a specified string of characters using
the current font.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>data</TT>-an array of characters
to be checked.<BR>
<TT>off</TT>-an integer value representing
the offset into the array where the string will start.<BR>
<TT>len</TT>-the number of characters
to be measured.<BR>
<I><B>Returns: </B></I>An integer value representing the advance
width of the specified string.
</BLOCKQUOTE>
<H4><TT>bytesWidth</TT></H4>
<BLOCKQUOTE>
<TT>public int bytesWidth(byte data[], int
off, int len)<BR>
</TT>The <TT>bytesWidth</TT>
method returns the width of a specified array of bytes<BR>
<I><B>Parameters:</B></I> <BR>
<TT>data</TT>-an array of bytes to
be checked.<BR>
<TT>off</TT>-an integer value representing
the offset into the array where the string will start.<BR>
<TT>len</TT>-the number of bytes to
be measured.<BR>
<I><B>Returns: </B></I>An integer value representing the advance
width of the specified string.
</BLOCKQUOTE>
<H4><TT>getWidths</TT></H4>
<BLOCKQUOTE>
<TT>public int[] getWidths()<BR>
</TT>The <TT>getWidths</TT>
method gets the advance widths of the first 256 characters of
the font.<BR>
<I><B>Returns: </B></I>An integer array containing the advance
widths of the first 256 characters of the font.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>The <TT>toString</TT>
method is used to return a string representation of the <TT>FontMetrics</TT>
class.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value containing the font metrics' name, font, ascent, descent,
and height.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierFrameFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Frame</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Window<BR>
</TT><I><B>Implements: </B></I><TT>MenuContainer
<BR>
</TT>A <TT>Frame</TT> class
represents a basic window.
</BLOCKQUOTE>
<H4>Member Constants</H4>
<BLOCKQUOTE>
<TT>
public static final int     DEFAULT_CURSOR
</TT><BR>
The DEFAULT_CURSOR static value represents the default cursor.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int     CROSSHAIR_CURSOR
</TT><BR>
The CROSSHAIR_CURSOR static value represents the crosshair cursor.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int     TEXT_CURSOR
</TT><BR>
The TEXT_CURSOR static value represents the text cursor.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int     WAIT_CURSOR
</TT><BR>
The WAIT_CURSOR static value represents the wait cursor.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int     SW_RESIZE_CURSOR
</TT><BR>
The SW_RESIZE_CURSOR static value represents the southwest resize
cursor.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int     SE_RESIZE_CURSOR
</TT><BR>
The SE_RESIZE_CURSOR static value represents the southeast resize
cursor.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int     NW_RESIZE_CURSOR
</TT><BR>
The NW_RESIZE_CURSOR static value represents the northwest resize
cursor.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int     NE_RESIZE_CURSOR
</TT><BR>
The NE_RESIZE_CURSOR static value represents the northeast resize
cursor.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int     N_RESIZE_CURSOR
</TT><BR>
The N_RESIZE_CURSOR static value represents the north resize cursor.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int     S_RESIZE_CURSOR
</TT><BR>
The S_RESIZE_CURSOR static value represents the south resize cursor.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int     W_RESIZE_CURSOR
</TT><BR>
The W_RESIZE_CURSOR static value represents the west resize cursor.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int     E_RESIZE_CURSOR
</TT><BR>
The E_RESIZE_CURSOR static value represents the east resize cursor.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int     HAND_CURSOR
</TT><BR>
The HAND_CURSOR static value represents the hand cursor.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int     MOVE_CURSOR
</TT><BR>
The MOVE_CURSOR static value represents the move cursor.
</BLOCKQUOTE>
<H4><TT>Frame</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Frame()<BR>
</TT>The <TT>Frame</TT> constructor
constructs a default frame that is invisible and that uses the
<TT>BorderLayout</TT> layout manager.
</BLOCKQUOTE>
<H4><TT>Frame</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Frame(String title)<BR>
</TT>This <TT>Frame</TT> constructor
constructs a default frame using the specified title that is invisible
and that uses the <TT>BorderLayout</TT>
layout manager.<BR>
<I><B>Parameters: </B></I><TT>title</TT>-a
<TT>String</TT> value containing the
frame's title string.
</BLOCKQUOTE>
<H4><TT>addNotify</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void addNotify()
<BR>
</TT>The <TT>addNotify</TT>
method creates a peer interface for the frame. Peer interfaces
allow the user interface of the frame to be changed without changing
its functionality.
</BLOCKQUOTE>
<H4><TT>getTitle</TT></H4>
<BLOCKQUOTE>
<TT>public String getTitle()<BR>
getTitle</TT> returns the frame's title.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value representing the title of the frame.
</BLOCKQUOTE>
<H4><TT>setTitle</TT></H4>
<BLOCKQUOTE>
<TT>public void setTitle(String title)<BR>
setTitle</TT> sets the frame's title.<BR>
<I><B>Parameters: </B></I><TT>title</TT>-a
<TT>String</TT> value representing
the title of the frame.
</BLOCKQUOTE>
<H4><TT>getIconImage</TT></H4>
<BLOCKQUOTE>
<TT>public Image getIconImage()<BR>
</TT>The <TT>getIconImage</TT>
method returns an image representing the iconized image of the
frame.<BR>
<I><B>Returns: </B></I>An <TT>Image</TT>
class representing the iconized image of the frame.
</BLOCKQUOTE>
<H4><TT>setIconImage</TT></H4>
<BLOCKQUOTE>
<TT>public</TT> void setIconImage(Image
image)<BR>
<TT>setIconImage</TT> is used to set
the image that will be used when the frame is iconized.<BR>
<I><B>Parameters: </B></I><TT>image</TT>-an
<TT>Image</TT> class that will be
displayed when the frame is iconized.
</BLOCKQUOTE>
<H4><TT>getMenuBar</TT></H4>
<BLOCKQUOTE>
<TT>public MenuBar getMenuBar()<BR>
</TT>The <TT>getMenuBar</TT>
method returns the <TT>MenuBar</TT>
object that is contained within this frame.<BR>
<I><B>Returns: </B></I>A <TT>MenuBar</TT>
class that is displayed within this frame.
</BLOCKQUOTE>
<H4><TT>setMenuBar</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void setMenuBar(MenuBar
mb)<BR>
setMenuBar</TT> sets the <TT>MenuBar</TT>
class to be displayed within the frame.<BR>
<I><B>Parameters: </B></I><TT>mb</TT>-a
<TT>MenuBar</TT> object to be used
for the frame's menu bar.
</BLOCKQUOTE>
<H4><TT>remove</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void remove(MenuComponent
m)<BR>
</TT>The <TT>remove</TT> method
removes the specified <TT>MenuComponent</TT>
from the frame.<BR>
<I><B>Parameters: </B></I>A <TT>MenuComponent</TT>
object that is to be removed from the frame.
</BLOCKQUOTE>
<H4><TT>dispose</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void dispose()<BR>
</TT>The <TT>dispose</TT> method
disposes of the frame. This method first disposes of the frame's
menu bar, and then disposes of the frame itself.
</BLOCKQUOTE>
<H4><TT>isResizable</TT></H4>
<BLOCKQUOTE>
<TT>public boolean isResizable()<BR>
</TT>The <TT>isResizable</TT>
method returns the frame's resizable state.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the frame can be resized, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>setResizable</TT></H4>
<BLOCKQUOTE>
<TT>public void setResizable(boolean resizable)
<BR>
</TT>The <TT>setResizable</TT>
method sets the frame's resizable state.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the frame can be resized, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>setCursor</TT></H4>
<BLOCKQUOTE>
<TT>public void setCursor(int cursorType)
<BR>
</TT>The <TT>setCursor</TT>
method sets the cursor to be displayed within the frame.<BR>
<I><B>Returns: </B></I>An integer value representing the cursor
to be displayed, which can be any of the frame's static values
such as <TT>WAIT_CURSOR</TT>, <TT>MOVE_CURSOR</TT>,
and so on.
</BLOCKQUOTE>
<H4><TT>getCursorType</TT></H4>
<BLOCKQUOTE>
<TT>public int getCursorType()<BR>
</TT>The <TT>getCursorType</TT>
method returns the frame's current cursor type.<BR>
<I><B>Returns: </B></I>An integer value representing the current
cursor type for the frame.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierGraphicsFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Graphics</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>The <TT>Graphics</TT>
class represents the base class for all types of graphics contexts.
</BLOCKQUOTE>
<H4><TT>create</TT></H4>
<BLOCKQUOTE>
<TT>public abstract Graphics create()<BR>
</TT>This abstract function creates a new <TT>Graphics</TT>
object.
</BLOCKQUOTE>
<H4><TT>create</TT></H4>
<BLOCKQUOTE>
<TT>public Graphics create(int x, int y,
int width, int height)<BR>
</TT>The <TT>create</TT> method
creates a new <TT>Graphics</TT> object
using the specified parameters.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate of the
graphics context.<BR>
<TT>y</TT>-the y coordinate of the
graphics context.<BR>
<TT>width</TT>-the width of the graphics
context.<BR>
<TT>height</TT>-the height of the
graphics context.<BR>
<I><B>Returns: </B></I>A <TT>Graphics</TT>
class corresponding to the <TT>create</TT>
method's specifications.
</BLOCKQUOTE>
<H4><TT>translate</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void translate(int x,
int y)<BR>
</TT>The <TT>translate</TT>
method translates the <TT>Graphics</TT>
object to the new x and y origin coordinates.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the new x origin coordinate.
<BR>
<TT>y</TT>-the new y origin coordinate.
</BLOCKQUOTE>
<H4><TT>getColor</TT></H4>
<BLOCKQUOTE>
<TT>public abstract Color getColor()<BR>
</TT>The <TT>getColor</TT>
method returns the current color.<BR>
<I><B>Returns: </B></I>A <TT>Color</TT>
object representing the current color used for drawing operations.
</BLOCKQUOTE>
<H4><TT>setColor</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void setColor(Color c)
<BR>
</TT>The <TT>setColor</TT>
method sets the current color.<BR>
<I><B>Parameters: </B></I><TT>c</TT>-a
<TT>Color</TT> object to be used for
graphics drawing operations.
</BLOCKQUOTE>
<H4><TT>setPaintMode</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void setPaintMode()<BR>
</TT>The <TT>setPaintMode</TT>
method sets the paint mode to overwrite the destination with the
current color.
</BLOCKQUOTE>
<H4><TT>setXORMode</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void setXORMode(Color
c1)<BR>
</TT>The <TT>setXORMode</TT>
method sets the paint mode to <TT>XOR</TT>
the current colors with the specified color. This means that when
redrawing over an existing area, colors that match the current
color will be changed to the specified color <TT>c1</TT>
and vice versa.<BR>
<I><B>Parameters: </B></I><TT>c1</TT>-the
<TT>Color</TT> object specified to
be <TT>XOR</TT>'d with the current
color.
</BLOCKQUOTE>
<H4><TT>getFont</TT></H4>
<BLOCKQUOTE>
<TT>public abstract Font getFont()<BR>
</TT>The <TT>getFont</TT> method
returns the current font used for the graphics context.<BR>
<I><B>Returns: </B></I>A <TT>Font</TT>
object representing the graphics context's current font.
</BLOCKQUOTE>
<H4><TT>setFont</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void setFont(Font font)
<BR>
</TT>The <TT>setFont</TT> method
sets the graphics context's font.<BR>
<I><B>Parameters: </B></I>A <TT>Font</TT>
object that will be used as the current font.
</BLOCKQUOTE>
<H4><TT>getFontMetrics</TT></H4>
<BLOCKQUOTE>
<TT>public FontMetrics getFontMetrics()<BR>
</TT>The <TT>getFontMetrics</TT>
method will return the font metrics for the current font.<BR>
<I><B>Returns: </B></I>A <TT>FontMetrics</TT>
object representing the font metrics for the current font.
</BLOCKQUOTE>
<H4><TT>getFontMetrics</TT></H4>
<BLOCKQUOTE>
<TT>public abstract FontMetrics getFontMetrics(Font
f)<BR>
</TT>This <TT>getFontMetrics</TT>
method will return the font metrics for the specified font.<BR>
<I><B>Returns: </B></I>A <TT>FontMetrics</TT>
object representing the font metrics for the specified font.
</BLOCKQUOTE>
<H4><TT>getClipRect</TT></H4>
<BLOCKQUOTE>
<TT>public abstract Rectangle getClipRect()
<BR>
</TT>The <TT>getClipRect</TT>
method will return the current clipping rectangle for the <TT>Graphics</TT>
class.<BR>
<I><B>Returns: </B></I>A <TT>Rectangle</TT>
object representing the current clipping rectangle.
</BLOCKQUOTE>
<H4><TT>clipRect</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void clipRect(int x,
int y, int width, int height)<BR>
</TT>The <TT>clipRect</TT>
method will set the current clipping rectangle for the <TT>Graphics</TT>
class.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate of the
clipping rectangle.<BR>
<TT>y</TT>-the y coordinate of the
clipping rectangle.<BR>
<TT>width</TT>-the width of the clipping
rectangle.<BR>
<TT>height</TT>-the height of the
clipping rectangle.
</BLOCKQUOTE>
<H4><TT>copyArea</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void copyArea(int x,
int y, int width, int height, int dx, <BR>
int dy)<BR>
</TT>The <TT>copyArea</TT>
method copies a specified section of the screen to another location.
<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate of the
region to be copied.<BR>
<TT>y</TT>-the y coordinate of the
region to be copied.<BR>
<TT>width</TT>-the width of the region
to be copied.<BR>
<TT>height</TT>-the height of the
region to be copied.<BR>
<TT>dx</TT>-the horizontal distance
of the region to be copied to.<BR>
<TT>dy</TT>-the vertical distance
of the region to be copied to.<BR>
<TT>drawLine<BR>
public abstract void drawLine(int x1, int y1, int x2, int y2)
<BR>
</TT>The <TT>drawLine</TT>
method will draw a line on the graphics context from one point
to another point specified by the input parameters.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x1</TT>-the x coordinate of the
line's starting point.<BR>
<TT>y1</TT>-the y coordinate of the
line's starting point.<BR>
<TT>x2</TT>-the x coordinate of the
line's ending point.<BR>
<TT>y2</TT>-the y coordinate of the
line's ending point.
</BLOCKQUOTE>
<H4><TT>fillRect</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void fillRect(int x,
int y, int width, int height)<BR>
</TT>The <TT>fillRect</TT>
method fills the specified rectangular region with the current
color.<BR>
<I><B>Parameters:<BR>
</B></I><TT>x</TT>-the x coordinate
of the rectangle to be filled.<BR>
<TT>y</TT>-the y coordinate of the
rectangle to be filled.<BR>
<TT>width</TT>-the width of the rectangle
to be filled.<BR>
<TT>height</TT>-the height of the
rectangle to be filled.<BR>
<TT>drawRect<BR>
public void drawRect(int x, int y, int width, int height)<BR>
</TT>The <TT>drawRect</TT>
method draws the outline of a rectangle using the current color
and the specified dimensions.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate of the
rectangle to be drawn.<BR>
<TT>y</TT>-the y coordinate of the
rectangle to be drawn.<BR>
<TT>width</TT>-the width of the rectangle
to be drawn.<BR>
<TT>height</TT>-the height of the
rectangle to be drawn.
</BLOCKQUOTE>
<H4><TT>clearRect</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void clearRect(int x,
int y, int width, int height)<BR>
</TT>The <TT>clearRect</TT>
method clears a rectangle by filling it with the current background
color of the current drawing surface.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate of the
rectangle to be cleared.<BR>
<TT>y</TT>-the y coordinate of the
rectangle to be cleared.<BR>
<TT>width</TT>-the width of the rectangle
to be cleared.<BR>
<TT>height</TT>-the height of the
rectangle to be cleared.
</BLOCKQUOTE>
<H4><TT>drawRoundRect</TT></H4>
<BLOCKQUOTE>
<TT>public</TT> abstract void drawRoundRect(int
x, int y, int width, int height,<BR>
  int arcWidth, int arcHeight)<BR>
The <TT>drawRoundRect</TT> method
draws the outline of a rectangle with rounded edges using the
current color and the specified coordinates.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate of the
rectangle to be drawn.<BR>
<TT>y</TT>-the y coordinate of the
rectangle to be drawn.<BR>
<TT>width</TT>-the width of the rectangle
to be drawn.<BR>
<TT>height</TT>-the height of the
rectangle to be drawn.<BR>
<TT>arcWidth</TT>-the horizontal diameter
of the arc at the four corners.<BR>
<TT>arcHeight</TT>-the vertical diameter
of the arc at the four corners.
</BLOCKQUOTE>
<H4><TT>fillRoundRect</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void fillRoundRect(int
x, int y, int width, int height, int arcWidth, int arcHeight)
<BR>
</TT>The <TT>fillRoundRect</TT>
method fills a rectangle with rounded edges using the current
color and the specified coordinates.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate of the
rectangle to be drawn.<BR>
<TT>y</TT>-the y coordinate of the
rectangle to be drawn.<BR>
<TT>width</TT>-the width of the rectangle
to be drawn.<BR>
<TT>height</TT>-the height of the
rectangle to be drawn.<BR>
<TT>arcWidth</TT>-the horizontal diameter
of the arc at the four corners.<BR>
<TT>arcHeight</TT>-the vertical diameter
of the arc at the four corners.
</BLOCKQUOTE>
<H4><TT>draw3DRect</TT></H4>
<BLOCKQUOTE>
<TT>public void draw3DRect(int x, int y,
int width, int height, boolean raised)<BR>
</TT>The <TT>draw3Drect</TT>
method draws a highlighted 3D rectangle at a default viewing angle.
<BR>
<I><B>Parameters:<BR>
</B></I><TT>x</TT>-the x coordinate
of the rectangle to be drawn.<BR>
<TT>y</TT>-the y coordinate of the
rectangle to be drawn.<BR>
<TT>width</TT>-the width of the rectangle
to be drawn.<BR>
<TT>height</TT>-the height of the
rectangle to be drawn.<BR>
<TT>raised</TT>-a boolean value determining
whether the rectangle is raised.
</BLOCKQUOTE>
<H4><TT>fill3DRect</TT></H4>
<BLOCKQUOTE>
<TT>public void fill3DRect(int x, int y,
int width, int height, boolean raised)<BR>
</TT>The <TT>fill3Drect</TT>
method fills a highlighted 3D rectangle using the current color
and specified coordinates at a default viewing angle.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate of the
rectangle to be drawn.<BR>
<TT>y</TT>-the y coordinate of the
rectangle to be drawn.<BR>
<TT>width</TT>-the width of the rectangle
to be drawn.<BR>
<TT>height</TT>-the height of the
rectangle to be drawn.<BR>
<TT>raised</TT>-a boolean value determining
whether the rectangle is raised.
</BLOCKQUOTE>
<H4><TT>drawOval</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void drawOval(int x,
int y, int width, int height)<BR>
</TT>The <TT>drawOval</TT>
method draws the outline of an oval shape using the current color
and the specified coordinates. The oval is drawn inside the rectangle
represented by the input coordinates.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate of the
rectangle to draw the oval within.<BR>
<TT>y</TT>-the y coordinate of the
rectangle to draw the oval within.<BR>
<TT>width</TT>-the width of the rectangle
to draw the oval within.<BR>
<TT>height</TT>-the height of the
rectangle to draw the oval within.<BR>
<TT>fillOval<BR>
public abstract void fillOval(int x, int y, int width, int height)
<BR>
</TT>The <TT>fillOval</TT>
method fills an oval using the current color and the specified
coordinates. The oval is drawn inside the rectangle represented
by the input coordinates.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate of the
rectangle to draw the oval within.<BR>
<TT>y</TT>-the y coordinate of the
rectangle to draw the oval within.<BR>
<TT>width</TT>-the width of the rectangle
to draw the oval within.<BR>
<TT>height</TT>-the height of the
rectangle to draw the oval within.
</BLOCKQUOTE>
<H4><TT>drawArc</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void drawArc(int x, int
y, int width, int height, int startAngle, int arcAngle)<BR>
</TT>The <TT>drawArc</TT> method
draws an arc outline using the current color and bounded by the
specified input coordinates. Note that 0 degrees represents the
three o'clock position and that positive angles are measured going
counterclockwise.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate of the
rectangle to draw the arc within.<BR>
<TT>y</TT>-the y coordinate of the
rectangle to draw the arc within.<BR>
<TT>width</TT>-the width of the rectangle
to draw the arc within.<BR>
<TT>height</TT>-the height of the
rectangle to draw the arc within.<BR>
<TT>startAngle</TT>-the starting angle
of the arc to be drawn.<BR>
<TT>arcAngle</TT>-the angle of the
arc relative to the start angle.
</BLOCKQUOTE>
<H4><TT>fillArc</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void fillArc(int x, int
y, int width, int height, int startAngle, int arcAngle)<BR>
</TT>The <TT>fillArc</TT> method
fills an arc using the current color and bounded by the specified
input coordinates. Note that 0 degrees represents the three o'clock
position and that positive angles are measured going counterclockwise.
<BR>
<I><B>Parameters:<BR>
</B></I><TT>x</TT>-the x coordinate
of the rectangle to draw the arc within.<BR>
<TT>y</TT>-the y coordinate of the
rectangle to draw the arc within.<BR>
<TT>width</TT>-the width of the rectangle
to draw the arc within.<BR>
<TT>height</TT>-the height of the
rectangle to draw the arc within.<BR>
<TT>startAngle</TT>-the starting angle
of the arc to be drawn.<BR>
<TT>arcAngle</TT>-the angle of the
arc relative to the start <TT>Angle</TT>.
</BLOCKQUOTE>
<H4><TT>drawPolygon</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void drawPolygon(int
xPoints[], int yPoints[], int nPoints)<BR>
</TT>The <TT>drawPolygon</TT>
method draws a polygon using the current color and the specified
coordinates.<BR>
<I><B>Parameters: <BR>
</B></I><TT>xPoints</TT>-an array
of integers containing the starting x coordinates for each edge
of the polygon.<BR>
<TT>yPoints</TT>-an array of integers
containing the starting y coordinates for each edge of the polygon.
<BR>
<TT>nPoints</TT>-an integer value
representing the number of edges of the polygon.
</BLOCKQUOTE>
<H4><TT>drawPolygon</TT></H4>
<BLOCKQUOTE>
<TT>public void drawPolygon(Polygon p)<BR>
</TT>This <TT>drawPolygon</TT>
method draws a polygon using the specified <TT>Polygon</TT>
class.<BR>
<I><B>Parameters: </B></I><TT>p</TT>-a
<TT>Polygon</TT> object containing
the coordinates for the polygon to be drawn.
</BLOCKQUOTE>
<H4><TT>fillPolygon</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void fillPolygon(int
xPoints[], int yPoints[], int nPoints)<BR>
</TT>The <TT>fillPolygon</TT>
method fills a polygon using the current color and the specified
coordinates.<BR>
<I><B>Parameters: <BR>
</B></I><TT>xPoints</TT>-an array
of integers containing the starting x coordinates for each edge
of the polygon.<BR>
<TT>yPoints</TT>-an array of integers
containing the starting y coordinates for each edge of the polygon.
<BR>
<TT>nPoints</TT>-an integer value
representing the number of edges of the polygon.
</BLOCKQUOTE>
<H4><TT>fillPolygon</TT></H4>
<BLOCKQUOTE>
<TT>public void fillPolygon(Polygon p)<BR>
</TT>This <TT>fillPolygon</TT>
method fills a polygon using the specified <TT>Polygon</TT>
object and the current color.<BR>
<I><B>Parameters: </B></I><TT>p</TT>-a
<TT>Polygon</TT> object containing
the coordinates for the polygon to be drawn.
</BLOCKQUOTE>
<H4><TT>drawString</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void drawString(String
str, int x, int y)<BR>
</TT>The <TT>drawString</TT>
method will draw a string using the current font at the specified
coordinates.<BR>
<I><B>Parameters: <BR>
</B></I><TT>str</TT>-the string to
be displayed.<BR>
<TT>x</TT>-the x coordinate to draw
the string at.<BR>
<TT>y</TT>-the y coordinate to draw
the string at.
</BLOCKQUOTE>
<H4><TT>drawChars</TT></H4>
<BLOCKQUOTE>
<TT>public void drawChars(char data[], int
offset, int length, int x, int y)<BR>
</TT>The <TT>drawChars</TT>
method will draw a string using the current font at the specified
coordinates.<BR>
<I><B>Parameters: <BR>
</B></I><TT>data</TT>-an array of
characters.<BR>
<TT>offset</TT>-the offset within
the array of characters that the displayed string will start at.
<BR>
<TT>length</TT>-the number of characters
to draw.<BR>
<TT>x</TT>-the x coordinate to draw
the string at.<BR>
<TT>y</TT>-the y coordinate to draw
the string at.
</BLOCKQUOTE>
<H4><TT>drawBytes</TT></H4>
<BLOCKQUOTE>
<TT>public void drawBytes(byte data[], int
offset, int length, int x, int y)<BR>
</TT>The <TT>drawChars</TT>
method will draw a string using the current font at the specified
coordinates.<BR>
<I><B>Parameters: <BR>
</B></I><TT>data</TT>-an array of
bytes.<BR>
<TT>offset</TT>-the offset within
the array of bytes that the displayed string will start at.<BR>
<TT>length</TT>-the number of bytes
to draw.<BR>
<TT>x</TT>-the x coordinate to draw
the string at.<BR>
<TT>y</TT>-the y coordinate to draw
the string at.
</BLOCKQUOTE>
<H4><TT>drawImage</TT></H4>
<BLOCKQUOTE>
<TT>public abstract boolean drawImage(Image
img, int x, int y, ImageObserver observer)<BR>
</TT>The <TT>drawImage</TT>
method will draw an image at a specified location.<BR>
<I><B>Parameters: <BR>
</B></I><TT>img</TT>-an <TT>Image</TT>
class to be drawn using the graphics context.<BR>
<TT>x</TT>-the x coordinate to draw
the image at.<BR>
<TT>y</TT>-the y coordinate to draw
the image at.<BR>
<TT>observer</TT>-an <TT>ImageObserver</TT>
interface that will be used to notify when the drawing is done.
<BR>
<I><B>Returns: </B></I>A boolean value indicating the success/failure
of the draw operation.
</BLOCKQUOTE>
<H4><TT>drawImage</TT></H4>
<BLOCKQUOTE>
<TT>public</TT> abstract boolean drawImage(Image
img, int x, int y, int width, <BR>
  int height, ImageObserver observer)<BR>
This <TT>drawImage</TT> method will
draw an image at a specified location within the specified bounding
rectangle.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>img</TT>-an <TT>Image</TT>
class to be drawn using the graphics context.<BR>
<TT>x</TT>-the x coordinate to draw
the image at.<BR>
<TT>y</TT>-the y coordinate to draw
the image at.<BR>
<TT>width</TT>-the width of the rectangle
to draw the image within.<BR>
<TT>height</TT>-the height of the
rectangle to draw the image within.<BR>
<TT>observer</TT>-an <TT>ImageObserver</TT>
interface that will be used to notify when the drawing is done.
<BR>
<I><B>Returns:</B></I> A boolean value indicating the success/failure
of the draw operation.
</BLOCKQUOTE>
<H4><TT>drawImage</TT></H4>
<BLOCKQUOTE>
<TT>public</TT> abstract boolean drawImage(Image
img, int x, int y, Color bgcolor,<BR>
  ImageObserver observer)<BR>
This <TT>drawImage</TT> method will
draw an image at a specified location using the specified background
color.<BR>
<I><B>Parameters:<BR>
</B></I><TT>img</TT>-an <TT>Image</TT>
class to be drawn using the graphics context.<BR>
<TT>x</TT>-the x coordinate to draw
the image at.<BR>
<TT>y</TT>-the y coordinate to draw
the image at.<BR>
<TT>bgcolor</TT>-the background color
to be used.<BR>
<TT>observer</TT>-an <TT>ImageObserver</TT>
derived object that will be used to notify when the drawing is
done.<BR>
<I><B>Returns: </B></I>A boolean value indicating the success/failure
of the draw operation.
</BLOCKQUOTE>
<H4><TT>drawImage</TT></H4>
<BLOCKQUOTE>
<TT>public</TT> abstract boolean drawImage(Image
img, int x, int y, int width,<BR>
  int height, Color bgcolor, ImageObserver observer)<BR>
The <TT>drawImage</TT> method will
draw an image at a specified location within a specified bounding
rectangle using a specified background color.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>img</TT>-an <TT>Image</TT>
class to be drawn using the graphics context.<BR>
<TT>x</TT>-the x coordinate to draw
the image at.<BR>
<TT>y</TT>-the y coordinate to draw
the image at.<BR>
<TT>width</TT>-the width of the bounding
rectangle.<BR>
<TT>height</TT>-the height of the
bounding rectangle.<BR>
<TT>bgcolor</TT>-the background color
to be used.<BR>
<TT>observer</TT>-an <TT>ImageObserver</TT>
interface that will be used to notify when the drawing is done.
<BR>
<I><B>Returns: </B></I>A boolean value indicating the success/failure
of the draw operation.
</BLOCKQUOTE>
<H4><TT>dispose</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void dispose()<BR>
</TT>The <TT>dispose</TT> method
disposes of the <TT>Graphics</TT>
object.
</BLOCKQUOTE>
<H4><TT>finalize</TT></H4>
<BLOCKQUOTE>
<TT>public void finalize()<BR>
</TT>The <TT>finalize</TT>
method disposes of the <TT>Graphics</TT>
object once it is no longer referenced.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>The <TT>toString</TT>
method returns a string representation of the <TT>Graphics</TT>
object.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
containing the <TT>Graphics</TT> class
name, current color, and current font.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierGridBagConstraintsFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>GridBagConstraints</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT><I><B>Implements:</B></I> <TT>Cloneable</TT>
<BR>
A <TT>GridBagConstraints</TT> class
is used in conjunction with a <TT>GridBagLayout</TT>
in order to specify the constraints of the objects being laid
out.
</BLOCKQUOTE>
<H4>Member Constants</H4>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int RELATIVE
</TT><BR>
A <TT>public</TT> static value representing
the relative constraint.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int REMAINDER
</TT><BR>
A <TT>public</TT> static value representing
the remainder constraint.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int NONE
</TT><BR>
A <TT>public</TT> static value representing
the none constraint.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int BOTH
</TT><BR>
A <TT>public</TT> static value representing
the both constraint.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int HORIZONTAL
</TT><BR>
A <TT>public</TT> static value representing
the horizontal constraint.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int VERTICAL
</TT><BR>
A <TT>public</TT> static value representing
the vertical constraint.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int CENTER
</TT><BR>
A <TT>public</TT> static value representing
the center constraint.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int NORTH
</TT><BR>
A <TT>public</TT> static value representing
the north constraint.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int NORTHEAST
</TT><BR>
A <TT>public</TT> static value representing
the northeast constraint.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int EAST
</TT><BR>
A <TT>public</TT> static value representing
the east constraint.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int SOUTHEAST
</TT><BR>
A <TT>public</TT> static value representing
the southeast constraint.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int SOUTH
</TT><BR>
A <TT>public</TT> static value representing
the south constraint.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int SOUTHWEST
</TT><BR>
A <TT>public</TT> static value representing
the southwest constraint.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int WEST
</TT><BR>
A <TT>public</TT> static value representing
the west constraint.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int NORTHWEST
</TT><BR>
A <TT>public</TT> static value representing
the northwest constraint.
</BLOCKQUOTE>
<H4>Member Variables</H4>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public int gridx
</TT><BR>
The <TT>gridx</TT> variable is used
to store the grid x coordinate.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public int gridy
</TT><BR>
The <TT>gridy</TT> variable is used
to store the grid y coordinate.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public int gridwidth
</TT><BR>
The <TT>gridwidth</TT> variable is
used to store the grid bounding rectangle width.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public int gridheight
</TT><BR>
The <TT>gridheight</TT> variable is
used to store the grid bounding rectangle height.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public double weightx
</TT><BR>
The <TT>weightx</TT> variable is used
to store the horizontal space for a component to reserve for itself.
If this is set to <TT>0</TT> (the
default), all components within a row will be bunched together
in the center of the row.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public double weighty
</TT><BR>
The <TT>weighty</TT> variable is used
to store the vertical space for a component to reserve for itself.
If this is set to <TT>0</TT> (the
default), all components within a column will be bunched together
in the center of the column.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public int anchor
</TT><BR>
The <TT>anchor</TT> variable is used
to determine how to display a component when it is smaller than
its display area. Valid values for this variable are <TT>CENTER</TT>
(the default), <TT>NORTH</TT>, <TT>NORTHEAST</TT>,
<TT>EAST</TT>, <TT>SOUTHEAST</TT>,
<TT>SOUTH</TT>, <TT>SOUTHWEST</TT>,
<TT>WEST</TT>, and <TT>NORTHWEST</TT>.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public int fill
</TT><BR>
The <TT>fill</TT> variable is used
to determine how to display a component when it is larger than
its display area. Valid values for this variable are <TT>NONE</TT>,
<TT>HORIZONTAL</TT>, <TT>VERTICAL</TT>,
and <TT>BOTH</TT>.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public Insets insets
</TT><BR>
The <TT>insets</TT> variable is used
to determine the space between the component and its bounding
area.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public int ipadx
</TT><BR>
The <TT>ipadx</TT> variable is used
to determine the amount of padding to always add to the component
on its left and right sides.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public int ipady
</TT><BR>
The <TT>ipady</TT> variable is used
to determine the amount of padding to always add to the component
on its top and bottom sides.
</BLOCKQUOTE>
<H4><TT>GridBagConstraints</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public GridBagConstraints ()<BR>
</TT>The <TT>GridBagConstraints</TT>
constructor creates a <TT>GridBagConstraints</TT>
class containing default values.
</BLOCKQUOTE>
<H4><TT>clone</TT></H4>
<BLOCKQUOTE>
<TT>public Object clone()<BR>
</TT>The <TT>clone</TT> method
creates a clone of this <TT>GridBagConstraints</TT>
object.<BR>
<I><B>Returns: </B></I>An <TT>Object</TT>
object representing a clone of this <TT>GridBagConstraints</TT>
object.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierGridBagLayoutFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>GridBagLayout</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT><I><B>Implements: </B></I><TT>LayoutManager
<BR>
</TT>The <TT>GridBagLayout</TT>
implements the <TT>LayoutManager</TT>
interface. This class uses a rectangular grid of cells to lay
out components within the cells. Each component is associated
with a <TT>GridBagConstraints</TT>
object that controls how the component is actually laid out within
the grid.
</BLOCKQUOTE>
<H4>Member Variables</H4>
<BLOCKQUOTE>
<TT>
public int columnWidths[]
</TT><BR>
The columnWidths variable is an array of integers representing
the widths of each column used by GridBagLayout.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public int rowHeights[]
</TT><BR>
The<I> </I>rowHeights variable is an array of integers representing
the heights of each column used by GridBagLayout.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public double columnWeights[]
</TT><BR>
The columnWeights variable is an array of doubles representing
the space to be distributed for each column.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public double rowWeights[]
</TT><BR>
The rowWeights variable is an array of doubles representing the
space to be distributed for each row.
</BLOCKQUOTE>
<H4><TT>GridBagLayout</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public GridBagLayout()</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
The <TT>GridBagLayout</TT> constructor
constructs a <TT>GridBagLayout</TT>
class for use in laying out components on a form.
</BLOCKQUOTE>
<H4><TT>setConstraints</TT></H4>
<BLOCKQUOTE>
<TT>public void setConstraints(Component
comp, GridBagConstraints constraints)<BR>
</TT>The <TT>setConstraints</TT>
method sets <TT>GridBagConstraints</TT>
for the specified component.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>comp</TT>-a component to be modified
within <TT>GridBagLayout</TT>.<BR>
<TT>constraints</TT>-the <TT>GridBagConstraints</TT>
that will be applied to the component.
</BLOCKQUOTE>
<H4><TT>getConstraints</TT></H4>
<BLOCKQUOTE>
<TT>public GridBagConstraints getConstraints(Component
comp)<BR>
</TT>The <TT>getConstraints</TT>
method returns the constraints currently applied to the specified
component.<BR>
<I><B>Parameters: </B></I><TT>comp</TT>-a
component managed by <TT>GridBagLayout</TT>.
<BR>
<I><B>Returns: </B></I>A <TT>GridBagConstraints</TT>
class representing the constraints placed upon the specified component.
</BLOCKQUOTE>
<H4><TT>getLayoutOrigin</TT></H4>
<BLOCKQUOTE>
<TT>public Point getLayoutOrigin ()<BR>
</TT>The <TT>getLayoutOrigin</TT>
method returns the origin of the layout manager.<BR>
<I><B>Returns: </B></I>A <TT>Point</TT>
class representing the origin of <TT>GridBagLayout</TT>.
</BLOCKQUOTE>
<H4><TT>getLayoutDimensions</TT></H4>
<BLOCKQUOTE>
<TT>public int [][] getLayoutDimensions ()
<BR>
</TT>The <TT>getLayoutDimensions</TT>
method returns an array of dimensions with an element for each
component.<BR>
<I><B>Returns: </B></I>An array containing layout dimensions for
components managed by the <TT>GridBagLayout</TT>.
</BLOCKQUOTE>
<H4><TT>getLayoutWeights</TT></H4>
<BLOCKQUOTE>
<TT>public double [][] getLayoutWeights()
<BR>
</TT>The <TT>getLayoutWeights</TT>
method returns an array of weights with an element for each component.
<BR>
<I><B>Returns: </B></I>An array containing layout weights for
components managed by <TT>GridBagLayout</TT>.
</BLOCKQUOTE>
<H4><TT>location</TT></H4>
<BLOCKQUOTE>
<TT>public Point location(int x, int y)<BR>
</TT>The <TT>location</TT>
method returns a <TT>Point</TT> object
representing the point within the layout manager corresponding
to the specified coordinates.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate.<BR>
<TT>y</TT>-the y coordinate.<BR>
<I><B>Returns: </B></I>A <TT>Point</TT>
object.
</BLOCKQUOTE>
<H4><TT>addLayoutComponent</TT></H4>
<BLOCKQUOTE>
<TT>public void addLayoutComponent(String
name, Component comp)<BR>
</TT>The <TT>addLayoutComponent</TT>
method adds a component to <TT>GridBagLayout</TT>.
<BR>
<I><B>Parameters:</B></I> <BR>
<TT>name</TT>-the name of the component
to be added.<BR>
<TT>comp</TT>-the component to be
added.
</BLOCKQUOTE>
<H4><TT>removeLayoutComponent</TT>
</H4>
<BLOCKQUOTE>
<TT>public void removeLayoutComponent(Component
comp)<BR>
</TT>The <TT>removeLayoutComponent</TT>
method removes a component from the <TT>GridBagLayout</TT>.
<BR>
<I><B>Parameters: </B></I><TT>comp</TT>-the
component to be removed.
</BLOCKQUOTE>
<H4><TT>preferredLayoutSize</TT></H4>
<BLOCKQUOTE>
<TT>public Dimension preferredLayoutSize(Container
parent)<BR>
</TT>The <TT>preferredLayoutSize</TT>
method returns the preferred size for the layout manager given
the specified container and the components within it.<BR>
<I><B>Parameters: </B></I><TT>parent</TT>-a
<TT>Container</TT> object containing
components.<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object specifying the preferred size of the layout manager.
</BLOCKQUOTE>
<H4><TT>minimumLayoutSize</TT></H4>
<BLOCKQUOTE>
<TT>public Dimension minimumLayoutSize(Container
parent)<BR>
</TT>The minimum <TT>preferredLayoutSize</TT>
method returns the minimum size for the layout manager given the
specified container and the components within it.<BR>
<I><B>Parameters: </B></I><TT>parent</TT>-a
<TT>Container</TT> object containing
components.<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object specifying the minimum size of the layout manager.
</BLOCKQUOTE>
<H4><TT>layoutContainer</TT></H4>
<BLOCKQUOTE>
<TT>public void layoutContainer(Container
parent)<BR>
</TT>The <TT>layoutContainer</TT>
method lays out the specified container within the layout manager.
<BR>
<I><B>Parameters: </B></I><TT>parent</TT>-a
<TT>Container</TT> object containing
components.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>The <TT>toString</TT>
method returns a string containing information about the <TT>GridBagLayout</TT>.
<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
containing the name of <TT>GridBagLayout</TT>.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierGridLayoutFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>GridLayout</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT><I><B>Implements: </B></I><TT>LayoutManager
<BR>
</TT>The <TT>GridLayout</TT>
class implements the <TT>LayoutManager</TT>
interface. It is used to lay out grid objects.
</BLOCKQUOTE>
<H4><TT>GridLayout</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public GridLayout(int rows, int cols)
<BR>
</TT>The <TT>GridLayout</TT>
constructor constructs a grid layout manager using the specified
number of rows and columns.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>rows</TT>-the number of rows to
be laid out.<BR>
<TT>cols</TT>-the number of columns
to be laid out.
</BLOCKQUOTE>
<H4><TT>GridLayout</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public GridLayout(int rows, int cols,
int hgap, int vgap)<BR>
</TT>This <TT>GridLayout</TT>
constructor constructs a grid layout manager using the specified
number of rows and columns as well as the horizontal and vertical
gaps to be used.<BR>
<I><B>Parameters: <BR>
</B></I><TT>rows</TT>-the number of
rows to be laid out.<BR>
<TT>cols</TT>-the number of columns
to be laid out.<BR>
<TT>hgap</TT>-the horizontal gap value.
<BR>
<TT>vgap</TT>-the vertical gap value.
</BLOCKQUOTE>
<H4><TT>addLayoutComponent</TT></H4>
<BLOCKQUOTE>
<TT>public void addLayoutComponent(String
name, Component comp)<BR>
</TT>The <TT>addLayoutComponent</TT>
method adds a component to <TT>GridLayout</TT>.
<BR>
<I><B>Parameters:</B></I> <BR>
<TT>name</TT>-the name of the component
to be added.<BR>
<TT>comp</TT>-the component to be
added.
</BLOCKQUOTE>
<H4><TT>removeLayoutComponent</TT>
</H4>
<BLOCKQUOTE>
<TT>public void removeLayoutComponent(Component
comp)<BR>
</TT>The <TT>removeLayoutComponent</TT>
method removes a component from the <TT>GridBagLayout</TT>.
<BR>
<I><B>Parameters: </B></I><TT>comp</TT>-the
component to be removed.
</BLOCKQUOTE>
<H4><TT>preferredLayoutSize</TT></H4>
<BLOCKQUOTE>
<TT>public Dimension preferredLayoutSize(Container
parent)<BR>
</TT>The <TT>preferredLayoutSize</TT>
method returns the preferred size for the layout manager given
the specified container and the components within it.<BR>
<I><B>Parameters: </B></I><TT>parent</TT>-a
<TT>Container</TT> object containing
components.<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object specifying the preferred size of the layout manager.
</BLOCKQUOTE>
<H4><TT>minimumLayoutSize</TT></H4>
<BLOCKQUOTE>
<TT>public Dimension minimumLayoutSize(Container
parent)<BR>
</TT>The minimum <TT>preferredLayoutSize</TT>
method returns the minimum size for the layout manager given the
specified container and the components within it.<BR>
<I><B>Parameters: </B></I><TT>parent</TT>-a
<TT>Container</TT> object containing
components.<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object specifying the minimum size of the layout manager.
</BLOCKQUOTE>
<H4><TT>layoutContainer</TT></H4>
<BLOCKQUOTE>
<TT>public void layoutContainer(Container
parent)<BR>
</TT>The <TT>layoutContainer</TT>
method lays out the specified container within the layout manager.
<BR>
<I><B>Parameters: </B></I><TT>parent</TT>-a
<TT>Container</TT> object containing
components.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>The <TT>toString</TT>
method returns a string containing information about the <TT>GridLayout</TT>.
<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
containing the grid layout's <TT>name</TT>,
<TT>hgap</TT>, <TT>vgap</TT>,
<TT>rows</TT>, and <TT>cols</TT>
values.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierImageFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Image</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>An <TT>Image</TT> class
is actually an abstract class. A platform-specific implementation
must be provided for it to be used.
</BLOCKQUOTE>
<H4><TT>getWidth</TT></H4>
<BLOCKQUOTE>
<TT>public abstract int getWidth(ImageObserver
observer)<BR>
</TT>The <TT>getWidth</TT>
method returns the width of the image. If the width of the image
is not yet known, <TT>ImageObserver</TT>
will be notified at a later time and <TT>-1</TT>
will be returned.<BR>
<I><B>Parameters: </B></I><TT>observer</TT>-an
<TT>ImageObserver</TT>-derived object
that will be notified if the image is not yet available.<BR>
<I><B>Returns: </B></I>An integer value representing the width
of the image, or <TT>-1</TT> if the
image is not yet available.
</BLOCKQUOTE>
<H4><TT>getHeight</TT></H4>
<BLOCKQUOTE>
<TT>public abstract int getHeight(ImageObserver
observer)<BR>
</TT>The <TT>getWidth</TT>
method returns the height of the image. If the height of the image
is not yet known, <TT>ImageObserver</TT>
will be notified at a later time and <TT>-1</TT>
will be returned.<BR>
<I><B>Parameters: </B></I><TT>observer</TT>-an
<TT>ImageObserver</TT>-derived object
that will be notified if the image is not yet available.<BR>
<I><B>Returns: </B></I>An integer value representing the height
of the image, or <TT>-1</TT> if the
image is not yet available.
</BLOCKQUOTE>
<H4><TT>getSource</TT></H4>
<BLOCKQUOTE>
<TT>public abstract ImageProducer getSource()
<BR>
</TT>The <TT>getSource</TT>
method returns the <TT>ImageProducer</TT>
interface responsible for producing the <TT>Image</TT>'s
pixels.<BR>
<I><B>Returns: </B></I>An <TT>ImageProducer</TT>
interface used by the image-filtering classes in package <TT>java.awt.Image</TT>.
</BLOCKQUOTE>
<H4><TT>getGraphics</TT></H4>
<BLOCKQUOTE>
<TT>public abstract Graphics getGraphics()
<BR>
</TT>The <TT>getGraphics</TT>
method is used to return a graphics context for drawing into.
This function is used for offscreen image operations such as double
buffering of an image.<BR>
<I><B>Returns: </B></I>A <TT>Graphics</TT>
object used for image-drawing purposes.
</BLOCKQUOTE>
<H4><TT>getProperty</TT></H4>
<BLOCKQUOTE>
<TT>public abstract Object getProperty(String
name, ImageObserver observer)<BR>
</TT>The <TT>getProperty</TT>
method is used to return image property information (each image
type has its own set of properties).<BR>
<I><B>Parameters:</B></I> <BR>
<TT>name</TT>-the image property name
to be returned.<BR>
<TT>observer</TT>-an <TT>ImageObserver</TT>-derived
object that will be notified if the image is not yet ready.<BR>
<I><B>Returns: </B></I>The <TT>Property</TT>
object that corresponds with the property requested. If the image
is not yet available, this method returns null. If the property
was undefined, an <TT>UndefinedProperty</TT>
object is returned.
</BLOCKQUOTE>
<H4><TT>flush</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void flush()<BR>
</TT>The <TT>flush</TT> method
flushes all image data. Calling this method returns the image
to its initial empty state; therefore, the image will need to
be re-created after calling this method. 
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierInsetsFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Insets</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT><I><B>Implements: </B></I><TT>Cloneable
<BR>
</TT>The <TT>Insets</TT> class
encapsulate the insets of a container.
</BLOCKQUOTE>
<H4>Member Variables</H4>
<BLOCKQUOTE>
<TT>
public int top
</TT>><BR>
An integer value representing the inset from the top.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public int left
</TT><BR>
An integer value representing the inset from the left.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public int bottom
</TT><BR>
An integer value representing the inset from the bottom.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public int right
</TT><BR>
An integer value representing the inset from the right.
</BLOCKQUOTE>
<H4><TT>Insets</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Insets(int top, int left, int
bottom, int right)<BR>
</TT>This <TT>Insets</TT> constructor
creates an <TT>Insets</TT> object
from the specified values.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>top</TT>-an integer value representing
the inset from the top.<BR>
<TT>left</TT>-an integer value representing
the inset from the left.<BR>
<TT>bottom</TT>-an integer value representing
the inset from the bottom.<BR>
<TT>right</TT>-an integer value representing
the inset from the right.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>The <TT>toString</TT>
method provides a string representation of the <TT>Insets</TT>
class.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value containing the <TT>Insets</TT>'s
name, top, left, bottom, and right values.
</BLOCKQUOTE>
<H4><TT>clone</TT></H4>
<BLOCKQUOTE>
<TT>public Object clone()<BR>
</TT>The <TT>clone</TT> method
creates and returns a clone of the <TT>Insets</TT>
object.<BR>
<I><B>Returns: </B></I>An <TT>Object</TT>
class representing a clone of the current <TT>Insets</TT>.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierLabelFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Label</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Component<BR>
</TT>A <TT>Label</TT> is a
component used to display a single line of text on the screen.
</BLOCKQUOTE>
<H4>Member Constants</H4>
<BLOCKQUOTE>
<TT>
public static final int LEFT
</TT><BR>
A static integer value representing left alignment.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int CENTER
</TT><BR>
A static integer value representing center alignment.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int RIGHT
</TT><BR>
A static integer value representing right alignment.
</BLOCKQUOTE>
<H4><TT>Label</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Label()<BR>
</TT>The <TT>Label</TT> constructor
constructs a label with no string.
</BLOCKQUOTE>
<H4><TT>Label</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Label(String label)<BR>
</TT>This <TT>Label</TT> constructor
constructs a label using the specified string.<BR>
<I><B>Parameters: </B></I><TT>label</TT>-a
<TT>String</TT> that will be displayed
as the label.
</BLOCKQUOTE>
<H4><TT>Label</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Label(String label, int alignment)
<BR>
</TT>This <TT>Label</TT> constructor
constructs a label using the specified string and alignment.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>label</TT>-a <TT>String</TT>
that will be displayed as the label.<BR>
<TT>alignment</TT>-an alignment value
(<TT>CENTER</TT>, <TT>LEFT</TT>,
or <TT>RIGHT</TT>).
</BLOCKQUOTE>
<H4><TT>addNotify</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void addNotify()
<BR>
</TT>The <TT>addNotify</TT>
method creates the peer interface for the label. Using a peer
interface allows the user interface of the label to be modified
without changing the functionality.
</BLOCKQUOTE>
<H4><TT>getAlignment</TT></H4>
<BLOCKQUOTE>
<TT>public int getAlignment()<BR>
</TT>The <TT>getAlignment</TT>
method returns the label's current alignment.<BR>
<I><B>Returns: </B></I>An integer value representing the label's
current alignment (<TT>LEFT</TT>,
<TT>RIGHT</TT>, or <TT>CENTER</TT>).
</BLOCKQUOTE>
<H4><TT>setAlignment</TT></H4>
<BLOCKQUOTE>
<TT>public void setAlignment(int alignment)
<BR>
</TT>The <TT>setAlignment</TT>
method sets the label's current alignment.<BR>
<I><B>Parameters: </B></I><TT>alignment</TT>-an
integer value representing the label's new alignment (<TT>LEFT</TT>,
<TT>RIGHT</TT>, or <TT>CENTER</TT>).
</BLOCKQUOTE>
<H4><TT>getText</TT></H4>
<BLOCKQUOTE>
<TT>public String getText()<BR>
</TT>The <TT>getText</TT> method
returns the label's current text string.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value representing the label's current text.
</BLOCKQUOTE>
<H4><TT>setText</TT></H4>
<BLOCKQUOTE>
<TT>public void setText(String label)<BR>
</TT>The <TT>setText</TT> method
sets the label's current text string.<BR>
<I><B>Parameters: </B></I><TT>label</TT>-a
<TT>String</TT> value representing
the label's new text.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierListFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>List</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Component<BR>
</TT>A <TT>List</TT> component
is a scrolling list of text items. Lists can allow multiple selection
and visible lines.
</BLOCKQUOTE>
<H4><TT>List</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public List()<BR>
</TT>The <TT>List</TT> constructor
creates a <TT>List</TT> object with
no lines or multiple selection capability.
</BLOCKQUOTE>
<H4><TT>List</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public List(int rows, boolean multipleSelections)
<BR>
</TT>This <TT>List</TT> constructor
constructs a <TT>List</TT> object
with the specified lines and multiple selection capability.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>rows</TT>-the number of items
in the list.<BR>
<TT>multipleSelections</TT>-a boolean
value that is <TT>true</TT> if multiple
selections are allowed, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>addNotify</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void addNotify()
<BR>
</TT>The <TT>addNotify</TT>
method creates the peer interface for the list. Using a peer interface
allows the user interface of the list to be modified without changing
the functionality.
</BLOCKQUOTE>
<H4><TT>removeNotify</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void removeNotify()
<BR>
</TT>The <TT>removeNotify</TT>
method removes the peer for the list.
</BLOCKQUOTE>
<H4><TT>countItems</TT></H4>
<BLOCKQUOTE>
<TT>public int countItems()<BR>
</TT>The <TT>countItems</TT>
method returns the number of items in the list.<BR>
<I><B>Returns: </B></I>An integer value representing the number
of items in the list.
</BLOCKQUOTE>
<H4><TT>getItem</TT></H4>
<BLOCKQUOTE>
<TT>public String getItem(int index)<BR>
</TT>The <TT>getItem</TT> method
returns the item at the specified list index.<BR>
<I><B>Parameters: </B></I><TT>index</TT>-an
integer value representing the index into the list's string elements.
<BR>
<I><B>Returns: </B></I>The <TT>String</TT>
value stored at the specified list index.
</BLOCKQUOTE>
<H4><TT>addItem</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void addItem(String
item)<BR>
</TT>The <TT>addItem</TT> method
adds a <TT>String</TT> item to the
end of the list.<BR>
<I><B>Parameters: </B></I><TT>item</TT>-a
<TT>String</TT> item to be added to
the end of the list.
</BLOCKQUOTE>
<H4><TT>addItem</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void addItem(String
item, int index)<BR>
</TT>This <TT>addItem</TT>
method adds a <TT>String</TT> item
at the specified index within the list.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>item</TT>-a <TT>String</TT>
item to be added to the list.<BR>
<TT>index</TT>-an integer value representing
the index within the list to add the <TT>String</TT>
to (if this value is <TT>-1</TT> or
greater than the number of items within the list, the <TT>String</TT>
item will be added to the end of the list).
</BLOCKQUOTE>
<H4><TT>replaceItem</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void replaceItem(String
newValue, int index)<BR>
</TT>The <TT>replaceItems</TT>
method replaces the current item at the specified index with the
new <TT>String</TT> item.<BR>
<I><B>Parameters:<BR>
</B></I><TT>newValue</TT>-a <TT>String</TT>
value representing the new <TT>String</TT>
to be used to modify the list.<BR>
<TT>index</TT>-an integer value representing
the index within the list to be replaced with the new string (if
this value is <TT>-1</TT> or greater
than the number of items within the list, the <TT>String</TT>
item will be added to the end of the list).
</BLOCKQUOTE>
<H4><TT>clear</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void clear()<BR>
</TT>The <TT>clear</TT> method
will clear the list's string of items.
</BLOCKQUOTE>
<H4><TT>delItem</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void delItem(int
position)<BR>
</TT>The <TT>delItem</TT> method
will delete the <TT>String</TT> item
stored at the specified position within the list.<BR>
<I><B>Parameters: </B></I><TT>position</TT>-an
integer value representing the position of the string to be deleted.
</BLOCKQUOTE>
<H4><TT>delItems</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void delItems(int
start, int end)<BR>
</TT>The <TT>delItems</TT>
method will delete a sequence of <TT>String</TT>
items stored at the specified positions within the list.<BR>
<I><B>Parameters:<BR>
</B></I><TT>start</TT>-an integer
value representing the first position containing a string to be
deleted.<BR>
<TT>end</TT>-an integer value representing
the last position containing a string to be deleted.
</BLOCKQUOTE>
<H4><TT>getSelectedIndex</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized int getSelectedIndex()
<BR>
</TT>The <TT>getSelectedIndex</TT>
method returns the index of the currently selected position within
the list.<BR>
<I><B>Returns: </B></I>An integer value representing the currently
selected position within the list.
</BLOCKQUOTE>
<H4><TT>getSelectedIndexes</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized int[] getSelectedIndexes()
<BR>
</TT>The <TT>getSelectedIndexes</TT>
method returns an array containing all of the currently selected
positions within the list.<BR>
<I><B>Returns: </B></I>An array of integers containing the currently
selected positions within the list.
</BLOCKQUOTE>
<H4><TT>getSelectedItem</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized String getSelectedItem()
<BR>
</TT>The <TT>getSelectedItem</TT>
method returns the string at the currently selected position within
the list.<BR>
<I><B>Returns: </B></I>The <TT>String</TT>
value that is at the currently selected position within the list.
</BLOCKQUOTE>
<H4><TT>getSelectedItems</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized String[] getSelectedItems()
<BR>
</TT>The <TT>getSelectedItems</TT>
method returns an array of <TT>String</TT>s
that are at the currently selected positions within the list.
<BR>
<I><B>Returns: </B></I>An array of strings that are at the currently
selected positions within the list.
</BLOCKQUOTE>
<H4><TT>select</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void select(int index)
<BR>
</TT>The <TT>select</TT> method
selects the item in the list at the specified index position.
<BR>
<I><B>Parameters: </B></I><TT>index</TT>-an
integer value representing the position to be selected within
the list.
</BLOCKQUOTE>
<H4><TT>deselect</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void deselect(int
index)<BR>
</TT>The <TT>deselect</TT>
method deselects the item in the list at the specified index position.
<BR>
<I><B>Parameters: </B></I><TT>index</TT>-an
integer value representing the position to be deselected within
the list.
</BLOCKQUOTE>
<H4><TT>isSelected</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized boolean isSelected(int
index)<BR>
</TT>The <TT>isSelected</TT>
method checks the specified index position to see wether it is
currently selected.<BR>
<I><B>Parameters: </B></I><TT>index</TT>-an
integer value representing the position to be checked within the
list.<BR>
<I><B>Returns: </B></I>A boolean value that will be <TT>true</TT>
if the specified index position is slected, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>getRows</TT></H4>
<BLOCKQUOTE>
<TT>public int getRows()<BR>
</TT>The <TT>getRows</TT> method
returns the number of rows within the list.<BR>
<I><B>Returns: </B></I>An integer value representing the number
of rows currently in the list.
</BLOCKQUOTE>
<H4><TT>allowsMultipleSelections</TT>
</H4>
<BLOCKQUOTE>
<TT>public boolean allowsMultipleSelections()
<BR>
</TT>The <TT>allowsMultipleSelections</TT>
method returns the multiple selection state of the <TT>List</TT>
object.<BR>
<I><B>Returns: </B></I>A boolean value that will be <TT>true</TT>
if multiple selections are allowed, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>setMultipleSelections</TT>
</H4>
<BLOCKQUOTE>
<TT>public void setMultipleSelections(boolean
v)<BR>
</TT>The <TT>setMultipleSelections</TT>
method sets the multiple selection state of the <TT>List</TT>
object.<BR>
<I><B>Parameters: </B></I><TT>v</TT>-a
boolean value that will be <TT>true</TT>
if multiple selections are to be allowed, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>getVisibleIndex</TT></H4>
<BLOCKQUOTE>
<TT>public int getVisibleIndex()<BR>
</TT>The <TT>getVisibleIndex</TT>
method returns the index of the item that was last made visible
by the <TT>makeVisible</TT> method.
<BR>
<I><B>Returns: </B></I>An integer value representing the index
of the item that was just made visible by the <TT>makeVisible</TT>
method.
</BLOCKQUOTE>
<H4><TT>makeVisible</TT></H4>
<BLOCKQUOTE>
<TT>public void makeVisible(int index)<BR>
</TT>The <TT>makeVisible</TT>
method forces the list item at the specified index position to
be visible.<BR>
<I><B>Parameters: </B></I><TT>index</TT>-the
index position of the item that is to be made visible.
</BLOCKQUOTE>
<H4><TT>preferredSize</TT></H4>
<BLOCKQUOTE>
<TT>public Dimension preferredSize(int rows)
<BR>
</TT>The <TT>preferredSize</TT>
method returns the preferred size of the <TT>List</TT>
object based on the specified number of rows.<BR>
<I><B>Parameters: </B></I><TT>rows</TT>-the
number of rows used to determine the list's preferred size.<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object representing the preferred size of the list.
</BLOCKQUOTE>
<H4><TT>preferredSize</TT></H4>
<BLOCKQUOTE>
<TT>public Dimension preferredSize()<BR>
</TT>This <TT>preferredSize</TT>
method returns the preferred size of the <TT>List</TT>
object based on its current number of rows.<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object representing the preferred size of the list.
</BLOCKQUOTE>
<H4><TT>minimumSize</TT></H4>
<BLOCKQUOTE>
<TT>public Dimension minimumSize(int rows)
<BR>
</TT>The <TT>minimumSize</TT>
method returns the minimum size of the <TT>List</TT>
object based on the specified number of rows.<BR>
<I><B>Parameters: </B></I><TT>rows</TT>-the
number of rows used to determine the list's minimum size.<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object representing the minimum size of the list.
</BLOCKQUOTE>
<H4><TT>minimumSize</TT></H4>
<BLOCKQUOTE>
<TT>public Dimension minimumSize()<BR>
</TT>This <TT>minimumSize</TT>
method returns the minimum size of the <TT>List</TT>
object based on its current number of rows.<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object representing the minimum size of the list.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierMediaTrackerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>MediaTracker</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>The <TT>MediaTracker</TT>
class is provided to track the status of media objects. At the
current time, only images are supported, but this functionality
could be extended to support audio and video as well.
</BLOCKQUOTE>
<H4>Member Constants</H4>
<BLOCKQUOTE>
<TT>
public static final int LOADING
</TT><BR>
A static integer value representing the LOADING status.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int ABORTED
</TT><P>
A static integer value representing the ABORTED status.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int ERRORED
</TT><BR>
A static integer value representing the ERRORED status.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public static final int COMPLETE
</TT><BR>
A static integer value representing the COMPLETE status.
</BLOCKQUOTE>
<H4><TT>MediaTracker</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public MediaTracker(Component comp)<BR>
</TT>The <TT>MediaTracker</TT>
constructor creates a <TT>MediaTracker</TT>
object to track images for the specified component.<BR>
<I><B>Parameters: </B></I><TT>comp</TT>-a
component that will use a <TT>MediaTracker</TT>
object to track images.
</BLOCKQUOTE>
<H4><TT>addImage</TT></H4>
<BLOCKQUOTE>
<TT>public void addImage(Image image, int
id)<BR>
</TT>The <TT>addImage</TT>
method will add the specified <TT>Image</TT>
to the list of images being tracked by the <TT>MediaTracker</TT>.
The <TT>Image</TT> will be rendered
at its default size.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>image</TT>-the <TT>Image</TT>
object to be added to the list.<BR>
<TT>id</TT>-an identification used
to reference the <TT>Image</TT> object.
</BLOCKQUOTE>
<H4><TT>addImage</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void addImage(Image
image, int id, int w, int h)<BR>
</TT>This <TT>addImage</TT>
method will add the specified <TT>Image</TT>
to the list of images being tracked by the <TT>MediaTracker</TT>.
The image will be rendered at its specified size.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>image</TT>-the <TT>Image</TT>
object to be added to the list.<BR>
<TT>id</TT>-an ID used to reference
the <TT>Image</TT> object.<BR>
<TT>w</TT>-the width the image will
be rendered at.<BR>
<TT>h</TT>-the height the image will
be rendered at.
</BLOCKQUOTE>
<H4><TT>checkAll</TT></H4>
<BLOCKQUOTE>
<TT>public boolean checkAll()<BR>
</TT>The <TT>checkAll</TT>
method is used to check if all of the images have been loaded.
<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if all of the images have been loaded, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>checkAll</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized boolean checkAll(boolean
load)<BR>
</TT>This <TT>checkAll</TT>
method is used to check whether all of the images have been loaded.
The <TT>load</TT> parameter forces
the <TT>MediaTracker</TT> to load
any images that are not currently being loaded.<BR>
<I><B>Parameters: </B></I><TT>load</TT>-a
boolean value that, if <TT>true</TT>,
will force the <TT>MediaTracker</TT>
to load any images that are not currently being loaded.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if all of the images have been loaded, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>isErrorAny</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized boolean isErrorAny()
<BR>
</TT>The <TT>isErrorAny</TT>
method checks the status of all images being tracked by the <TT>MediaTracker</TT>.
<BR>
<I><B>Returns: </B></I>A boolean value that will be <TT>true</TT>
if any image loaded had an error value, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>getErrorsAny</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized Object[] getErrorsAny()
<BR>
</TT>The <TT>getErrorsAny</TT>
method checks the status of all images being tracked by the <TT>MediaTracker</TT>
and returns an array of all media objects that have generated
an error.<BR>
<I><B>Returns: </B></I>An array of media objects that have encountered
an error. This array will be null if no objects have encountered
an error.
</BLOCKQUOTE>
<H4><TT>waitForAll</TT></H4>
<BLOCKQUOTE>
<TT>public void waitForAll() throws InterruptedException
<BR>
</TT>The <TT>waitForAll</TT>
method begins to load all <TT>Image</TT>s
without being interrupted. If there is an error, the <TT>InterruptedException</TT>
is thrown.<BR>
<I><B>Throws:</B></I> <TT>InterruptedException</TT>
if another thread has interrupted this thread.
</BLOCKQUOTE>
<H4><TT>waitForAll</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized boolean waitForAll(long
ms) throws InterruptedException<BR>
</TT>This <TT>waitForAll</TT>
method begins to load all images without being interrupted. This
method will continue to load images until there is an error or
until the specified timeout has elapsed. If there is an error,
the <TT>InterruptedException</TT>
is thrown.<BR>
<I><B>Parameters: </B></I><TT>ms</TT>-a
long integer value representing the timeout value (in milliseconds)
to wait before halting the loading of images.<BR>
<I><B>Returns: </B></I>A boolean value that will return <TT>true</TT>
if all of the images were successfully loaded before timing out,
<TT>false</TT> if not.<BR>
<I><B>Throws:</B></I> <TT>InterruptedException</TT>
if another thread has interrupted this thread.
</BLOCKQUOTE>
<H4><TT>statusAll</TT></H4>
<BLOCKQUOTE>
<TT>public int statusAll(boolean load)<BR>
</TT>The <TT>statusAll</TT>
method returns the boolean <TT>OR</TT>
of all of the media objects being tracked.<BR>
<I><B>Parameters: </B></I><TT>load</TT>-a
boolean value that specifies whether to start the image loading.
<BR>
<I><B>Returns: </B></I>The boolean <TT>OR</TT>
of all of the media objects being tracked. This value can be <TT>LOADED</TT>,
<TT>ABORTED</TT>, <TT>ERRORED</TT>,
or <TT>COMPLETE</TT>.
</BLOCKQUOTE>
<H4><TT>checkID</TT></H4>
<BLOCKQUOTE>
<TT>public boolean checkID(int id)<BR>
</TT>The <TT>checkID</TT> method
checks to see if all images tagged with the specified ID have
been loaded.<BR>
<I><B>Parameters: </B></I><TT>id</TT>-an
integer tag used to identify a media object or objects.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if all objects with the specified ID have been loaded, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>checkID</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized boolean checkID(int
id, boolean load)<BR>
</TT>The <TT>checkID</TT> method
checks to see whether all images tagged with the specified <TT>id</TT>
have been loaded. These images will be loaded based on the value
of the <TT>load</TT> parameter.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>id</TT>-an integer tag used to
identify a media object or objects.<BR>
<TT>load</TT>-a boolean value that
is <TT>true</TT> if all objects with
the specified identifier are to be loaded, <TT>false</TT>
if not.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if all objects with the specified identifier have been loaded,
<TT>false</TT> if not.
</BLOCKQUOTE>
<H4><TT>isErrorID</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized boolean isErrorID(int
id)<BR>
</TT>The <TT>isErrorID</TT>
method checks the error status of all media objects with the specified
<TT>id</TT>.<BR>
<I><B>Parameters: </B></I><TT>id</TT>-an
integer tag used to identify a media object or objects.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if all objects were loaded without error, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>getErrorsID</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized Object[] getErrorsID(int
id)<BR>
</TT>The <TT>getErrorsAny</TT>
method checks the status of all images being tracked by the <TT>MediaTracker</TT>
whose <TT>id</TT> match the specified
<TT>id</TT>. It returns an array of
all media objects that have generated an error.<BR>
<I><B>Parameters: </B></I><TT>id</TT>-an
integer tag used to identify a media object or objects.<BR>
<I><B>Returns: </B></I>An array of media objects that have encountered
an error. This array will be null if no objects have encountered
an error.
</BLOCKQUOTE>
<H4><TT>waitForID</TT></H4>
<BLOCKQUOTE>
<TT>public void waitForID(int id) throws
InterruptedException<BR>
</TT>The <TT>waitForID</TT>
method begins to load all images with the specified <TT>id</TT>
without being interrupted. If there is an error, the <TT>InterruptedException</TT>
is thrown.<BR>
<I><B>Parameters: </B></I><TT>id</TT>-an
integer tag used to identify a media object or objects.<BR>
<I><B>Throws:</B></I> <TT>InterruptedException</TT>
if another thread has interrupted this thread.
</BLOCKQUOTE>
<H4><TT>waitForID</TT></H4>
<BLOCKQUOTE>
<TT>public</TT> synchronized boolean
waitForID(int id, long ms) throws<BR>
  InterruptedException<BR>
This <TT>waitForID</TT> method begins
to load all images with the specified ID without being interrupted.
This method will continue to load images until there is an error
or until the specified timeout has elapsed. If there is an error,
the <TT>InterruptedException</TT>
is thrown.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>id</TT>-an integer tag used to
identify a media object or objects.<BR>
<TT>ms</TT>-a long integer value representing
the timeout value (in milliseconds) to wait before halting the
loading of images.<BR>
<I><B>Returns: </B></I>A boolean value that will return <TT>true</TT>
if all of the images were successfully loaded before timing out,
<TT>false</TT> if not.<BR>
<I><B>Throws:</B></I> <TT>InterruptedException</TT>
if another thread has interrupted this thread.
</BLOCKQUOTE>
<H4><TT>statusID</TT></H4>
<BLOCKQUOTE>
<TT>public int statusID(int id, boolean load)
<BR>
</TT>The <TT>statusID</TT>
method returns the boolean <TT>OR</TT>
of all of the media objects being tracked with the specified <TT>id</TT>.
<BR>
<I><B>Parameters:</B></I> <BR>
<TT>id</TT>-an integer tag used to
identify a media object or objects.<BR>
<TT>load</TT>-a boolean value that
specifies whether to start the image loading.<BR>
<I><B>Returns: </B></I>The boolean <TT>OR</TT>
of all the media objects being tracked. This value can be <TT>LOADED</TT>,
<TT>ABORTED</TT>, <TT>ERRORED</TT>,
or <TT>COMPLETE</TT>.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierMenuFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Menu</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>MenuItem<BR>
</TT><I><B>Implements: </B></I><TT>MenuContainer
<BR>
</TT>A <TT>Menu</TT> is a component
of a menu bar.
</BLOCKQUOTE>
<H4><TT>Menu</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Menu(String label)<BR>
</TT>The <TT>Menu</TT> constructor
constructs a menu using the specified label string.<BR>
<I><B>Parameters: </B></I><TT>label</TT>-a
<TT>String</TT> value that will be
displayed as the menu's label.
</BLOCKQUOTE>
<H4><TT>Menu</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Menu(String label, boolean tearOff)
<BR>
</TT>This <TT>Menu</TT> constructor
constructs a menu using the specified label string and tear-off
option.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>label</TT>-a <TT>String</TT>
value that will be displayed as the menu's label.<BR>
<TT>tearOff</TT>-a boolean value that
is <TT>true</TT> if this menu is to
be a tear-off menu, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>addNotify</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void addNotify()
<BR>
</TT>The <TT>addNotify</TT>
method creates the peer interface for the menu. Using a peer interface
allows the user interface of the menu to be modified without changing
the functionality.
</BLOCKQUOTE>
<H4><TT>removeNotify</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void removeNotify()
<BR>
</TT>The <TT>removeNotify</TT>
method removes the peer for the menu.
</BLOCKQUOTE>
<H4><TT>isTearOff</TT></H4>
<BLOCKQUOTE>
<TT>public boolean isTearOff()<BR>
</TT>The <TT>isTearOff</TT>
method returns the tear-off status of the menu.<BR>
<I><B>Returns: </B></I>A boolean value that will be <TT>true</TT>
if the menu is a tear-off menu, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>countItems</TT></H4>
<BLOCKQUOTE>
<TT>public int countItems()<BR>
</TT>The <TT>countItems</TT>
method returns the number of items in this menu.<BR>
<I><B>Returns: </B></I>An integer value representing the number
of items that have been added to this menu.
</BLOCKQUOTE>
<H4><TT>getItem</TT></H4>
<BLOCKQUOTE>
<TT>public MenuItem getItem(int index)<BR>
</TT>The <TT>getItem</TT> method
returns the <TT>MenuItem</TT> object
at the specified index in the menu list.<BR>
<I><B>Parameters: </B></I><TT>index</TT>-an
integer value representing the position of the menu item to be
returned.<BR>
<I><B>Returns: </B></I>A <TT>MenuItem</TT>
object at the specified position.
</BLOCKQUOTE>
<H4><TT>add</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized MenuItem add(MenuItem
mi)<BR>
</TT>The <TT>add</TT> method
adds the specified menu item to the menu's list.<BR>
<I><B>Parameters: </B></I><TT>mi</TT>-the
<TT>MenuItem</TT> object to be added
to the list.<BR>
<I><B>Returns: </B></I>A <TT>MenuItem</TT>
object that was added to the list.
</BLOCKQUOTE>
<H4><TT>add</TT></H4>
<BLOCKQUOTE>
<TT>public void add(String label)<BR>
</TT>This <TT>add</TT> method
adds a <TT>MenuItem</TT> with the
specified label to the menu.<BR>
<I><B>Parameters: </B></I><TT>label</TT>-a
<TT>String</TT> value representing
the label to be added to the menu's list.
</BLOCKQUOTE>
<H4><TT>addSeparator</TT></H4>
<BLOCKQUOTE>
<TT>public void addSeparator()<BR>
</TT>The <TT>addSeparator</TT>
method adds a separator menu item to the menu.<BR>
<TT>remove<BR>
public synchronized void remove(int index)<BR>
</TT>The <TT>remove</TT> method
removes the menu item at the specified index.<BR>
<I><B>Parameters: </B></I><TT>index</TT>-the
position within the menu's item list to be removed from the list.
</BLOCKQUOTE>
<H4><TT>remove</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void remove(MenuComponent
item)<BR>
</TT>This <TT>remove</TT> method
removes the menu item specified in the <TT>item</TT>
parameter.<BR>
<I><B>Parameters: </B></I><TT>item</TT>-the
<TT>MenuComponent</TT> object to be
removed from the menu's item list.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierMenuBarFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>MenuBar</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>MenuComponent
<BR>
</TT><I><B>Implements: </B></I><TT>MenuContainer
<BR>
</TT>A <TT>MenuBar</TT> object
represents a menu bar on a frame. A <TT>MenuBar</TT>
object attaches to a <TT>Frame</TT>
object using the method <TT>Frame.setMenuBar</TT>.
</BLOCKQUOTE>
<H4><TT>MenuBar</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public MenuBar()<BR>
</TT>The <TT>MenuBar</TT> constructor
constructs an empty <TT>MenuBar</TT>
object.
</BLOCKQUOTE>
<H4><TT>addNotify</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void addNotify()
<BR>
</TT>The <TT>addNotify</TT>
method creates the peer interface for the menu bar. Using a peer
interface allows the user interface of the menu bar to be modified
without changing the functionality.
</BLOCKQUOTE>
<H4><TT>removeNotify</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void removeNotify()
<BR>
</TT>The <TT>removeNotify</TT>
method removes the peer for the menu bar.
</BLOCKQUOTE>
<H4><TT>getHelpMenu</TT></H4>
<BLOCKQUOTE>
<TT>public Menu getHelpMenu()<BR>
</TT>The <TT>getHelpMenu</TT>
method returns the help menu on the menu bar.<BR>
<I><B>Returns: </B></I>A <TT>Menu</TT>
object representing the menu bar's help menu.
</BLOCKQUOTE>
<H4><TT>setHelpMenu</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void setHelpMenu(Menu
m)<BR>
</TT>The <TT>setHelpMenu</TT>
method sets the help menu for the menu bar.<BR>
<I><B>Parameters: </B></I><TT>m</TT>-a
<TT>Menu</TT> object representing
the menu bar's help menu.
</BLOCKQUOTE>
<H4><TT>add</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized Menu add(Menu m)
<BR>
</TT>The <TT>add</TT> method
adds the specified menu to the menu bar.<BR>
<I><B>Parameters: </B></I><TT>m</TT>-a
<TT>Menu</TT> object that is to be
added to the menu bar.<BR>
<I><B>Returns: </B></I>The <TT>Menu</TT>
object that was added to the menu bar.
</BLOCKQUOTE>
<H4><TT>remove</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void remove(int index)
<BR>
</TT>The <TT>remove</TT> method
removes the menu located at the specified index on the menu bar.
<BR>
<I><B>Parameters: </B></I><TT>index</TT>-the
position of the menu to be removed within the menu bar's list
of menus.
</BLOCKQUOTE>
<H4><TT>remove</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void remove(MenuComponent
m)<BR>
</TT>This <TT>remove</TT> method
removes the specified menu component from the menu bar.<BR>
<I><B>Parameters: </B></I><TT>m</TT>-a
<TT>MenuComponent</TT> object to be
removed from the menu bar.
</BLOCKQUOTE>
<H4><TT>countMenus</TT></H4>
<BLOCKQUOTE>
<TT>public int countMenus()<BR>
</TT>The <TT>countMenus</TT>
method returns the number of menus located on this menu bar.<BR>
<I><B>Returns: </B></I>An integer value representing the number
of menus located on this menu bar.
</BLOCKQUOTE>
<H4><TT>getMenu</TT></H4>
<BLOCKQUOTE>
<TT>public Menu getMenu(int i)<BR>
</TT>The <TT>getMenu</TT> method
returns the <TT>Menu</TT> object at
the specified location within the menu bar's list of menus.<BR>
<I><B>Parameters: </B></I><TT>i</TT>-an
integer value representing the position of the menu to be retrieved
from the menu bar's list.<BR>
<I><B>Returns: </B></I>A <TT>Menu</TT>
object returned from the menu bar's list.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierMenuComponentFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>MenuComponent</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>The <TT>MenuComponent</TT>
class serves as the base class for all menu-type components such
as <TT>Menu</TT>, <TT>MenuBar</TT>,
and <TT>MenuItem</TT>.
</BLOCKQUOTE>
<H4><TT>getParent</TT></H4>
<BLOCKQUOTE>
<TT>public MenuContainer getParent()<BR>
</TT>The <TT>getParent</TT>
method returns the parent menu container of the menu component.
<BR>
<I><B>Returns: </B></I>A <TT>MenuContainer</TT>
object that is the parent of the menu component.
</BLOCKQUOTE>
<H4><TT>getPeer</TT></H4>
<BLOCKQUOTE>
<TT>public MenuComponentPeer getPeer()<BR>
</TT>The <TT>getPeer</TT> method
returns the <TT>MenuComponentPeer</TT>
interface for the <TT>MenuComponent</TT>
object. The <TT>MenuComponentPeer</TT>
interface allows the user interface of a <TT>MenuComponent</TT>
to be changed without changing its functionality.<BR>
<I><B>Returns: </B></I>A <TT>MenuComponentPeer</TT>
interface.
</BLOCKQUOTE>
<H4><TT>getFont</TT></H4>
<BLOCKQUOTE>
<TT>public Font getFont()<BR>
</TT>The <TT>getFont</TT> method
returns the current default font for the <TT>MenuComponent</TT>.
<BR>
<I><B>Returns: </B></I>A <TT>Font</TT>
object.
</BLOCKQUOTE>
<H4><TT>setFont</TT></H4>
<BLOCKQUOTE>
<TT>public void setFont(Font f)<BR>
</TT>The <TT>setFont</TT> method
is used to set the display font for the <TT>MenuComponent</TT>.
<BR>
<I><B>Parameters: </B></I><TT>f</TT>-the
<TT>Font</TT> object representing
the menu component's new font.
</BLOCKQUOTE>
<H4><TT>removeNotify</TT></H4>
<BLOCKQUOTE>
<TT>public void removeNotify()<BR>
</TT>The <TT>removeNotify</TT>
removes the peer for this menu component.
</BLOCKQUOTE>
<H4><TT>postEvent</TT></H4>
<BLOCKQUOTE>
<TT>public boolean postEvent(Event evt)<BR>
</TT>The <TT>postEvent</TT>
method posts the specified event to the menu component.<BR>
<I><B>Parameters: </B></I><TT>evt</TT>-the
<TT>Event</TT> object containing the
current event that applies to the menu component.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>The <TT>toString</TT>
method returns a string representation of the <TT>MenuComponent</TT>
object.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
containing the menu component's name.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierMenuItemFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>MenuItem</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>MenuComponent
<BR>
</TT>A <TT>MenuItem</TT> represents
a choice in a menu.
</BLOCKQUOTE>
<H4><TT>MenuItem</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public MenuItem(String label)<BR>
</TT>The <TT>MenuItem</TT>
constructor constructs a menu item using the specified label string.
<BR>
<I><B>Parameters: </B></I><TT>label</TT>-the
<TT>String</TT> that will be displayed
as the menu item's label.
</BLOCKQUOTE>
<H4><TT>addNotify</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void addNotify()
<BR>
</TT>The <TT>addNotify</TT>
method creates the peer interface for the menu item. Using a peer
interface allows the user interface of the menu item to be modified
without changing the functionality.
</BLOCKQUOTE>
<H4><TT>getLabel</TT></H4>
<BLOCKQUOTE>
<TT>public String getLabel()<BR>
</TT>The <TT>getLabel</TT>
method returns the label string for the menu item.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value representing the menu item's displayed label.
</BLOCKQUOTE>
<H4><TT>setLabel</TT></H4>
<BLOCKQUOTE>
<TT>public void setLabel(String label)<BR>
</TT>The <TT>setLabel</TT>
method is used to change the string label of the menu item.<BR>
<I><B>Parameters: </B></I><TT>label</TT>-a
<TT>String</TT> value representing
the menu item's displayed label.
</BLOCKQUOTE>
<H4><TT>isEnabled</TT></H4>
<BLOCKQUOTE>
<TT>public boolean isEnabled()<BR>
</TT>The <TT>isEnabled</TT>
method can be called to determine whether the menu item is enabled.
<BR>
<I><B>Returns: </B></I>A boolean value that will be <TT>true</TT>
if the menu item is enabled, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>enable</TT></H4>
<BLOCKQUOTE>
<TT>public void enable()<BR>
</TT>The <TT>enable</TT> method
enables the menu item.
</BLOCKQUOTE>
<H4><TT>enable</TT></H4>
<BLOCKQUOTE>
<TT>public void enable(boolean cond)<BR>
</TT>This <TT>enable</TT> method
enables the menu item based on the specified condition.<BR>
<I><B>Parameters: </B></I><TT>cond</TT>-a
boolean value that will conditionally enable the menu item.
</BLOCKQUOTE>
<H4><TT>disable</TT></H4>
<BLOCKQUOTE>
<TT>public void disable()<BR>
</TT>The <TT>disable</TT> method
disables the menu item, making it unselectable by the user.
</BLOCKQUOTE>
<H4><TT>paramString</TT></H4>
<BLOCKQUOTE>
<TT>public String paramString()<BR>
</TT>The <TT>paramString</TT>
method returns a string representation of the menu item.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value containing the menu item's label string.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierPanelFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Panel</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Container</TT>
<BR>
The <TT>Panel</TT> class represents
a generic container for graphical elements.
</BLOCKQUOTE>
<H4><TT>Panel</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Panel()<BR>
</TT>The <TT>Panel</TT> constructor
constructs a default <TT>Panel</TT>
object that will use the <TT>FlowLayout</TT>
layout manager.
</BLOCKQUOTE>
<H4><TT>addNotify</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void addNotify()
<BR>
</TT>The <TT>addNotify</TT>
method creates the peer interface for the panel. Using a peer
interface allows the user interface of the panel to be modified
without changing the functionality.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierPointFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Point</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>A <TT>Point</TT> class
encapsulates an x,y coordinate.
</BLOCKQUOTE>
<H4>Member Variables</H4>
<BLOCKQUOTE>
<TT>
public int x
</TT><BR>
The <TT>x</TT> variable represents
the x coordinate of the point.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public int y
</TT><BR>
The <TT>y</TT> variable represents
the y coordinate of the point.
</BLOCKQUOTE>
<H4><TT>Point</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Point(int x, int y)<BR>
</TT>The <TT>Point</TT> constructor
constructs a <TT>Point</TT> object
using the specified coordinates.<BR>
<I><B>Parameters: <BR>
</B></I><TT>x</TT>-the x coordinate
of the point.<BR>
<TT>y</TT>-the y coordinate of the
point.
</BLOCKQUOTE>
<H4><TT>move</TT></H4>
<BLOCKQUOTE>
<TT>public void move(int x, int y)<BR>
</TT>The <TT>move</TT> method
moves the point to the new specified coordinates.<BR>
<I><B>Parameters: <BR>
</B></I><TT>x</TT>-the new x coordinate
of the point.<BR>
<TT>y</TT>-the new y coordinate of
the point.
</BLOCKQUOTE>
<H4><TT>translate</TT></H4>
<BLOCKQUOTE>
<TT>public void translate(int x, int y)<BR>
</TT>The <TT>translate</TT>
method translates the point by the specified coordinates.<BR>
<I><B>Parameters: <BR>
</B></I><TT>x</TT>-the x amount to
transfer the point.<BR>
<TT>y</TT>-the y amount to transfer
the point.
</BLOCKQUOTE>
<H4><TT>hashCode</TT></H4>
<BLOCKQUOTE>
<TT>public int hashCode()<BR>
</TT>The <TT>hashCode</TT>
method returns a hash code for the point.<BR>
<I><B>Returns: </B></I>An integer value that represents the point's
hash code.
</BLOCKQUOTE>
<H4><TT>equals</TT></H4>
<BLOCKQUOTE>
<TT>public boolean equals(Object obj)<BR>
</TT>The <TT>equals</TT> method
compares the <TT>Point</TT> object
to the specified object.<BR>
<I><B>Parameters: </B></I><TT>obj</TT>-the
object to compare the point to.<BR>
<I><B>Returns: </B></I>A boolean value representing the result
of the comparison (<TT>true</TT> or
<TT>false</TT>).
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>The <TT>toString</TT>
method returns a string representation of the <TT>Point</TT>
object.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
containing the point's name and x and y values.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierPolygonFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Polygon</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>A <TT>Polygon</TT> contains
a list of x,y coordinates, unlike a <TT>Point</TT>
class, which contains only one coordinate set.
</BLOCKQUOTE>
<H4>Member Variables</H4>
<BLOCKQUOTE>
<TT>
public int npoints
</TT><BR>
The npoint variable represents the total number of points within
the Polygon.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public int xpoints[]
</TT><BR>
The xpoints<I> </I>variable is an integer array of all of the
x coordinate points.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public int ypoints[]
</TT><BR>
The ypoints variable is an integer array of all of the y coordinate
points.
</BLOCKQUOTE>
<H4><TT>Polygon</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Polygon()<BR>
</TT>The <TT>Polygon</TT> constructor
constructs an empty <TT>Polygon</TT>
object.
</BLOCKQUOTE>
<H4><TT>Polygon</TT></H4>
<BLOCKQUOTE>
<TT>public</TT> Polygon(int xpoints[],
int ypoints[], int npoints)<BR>
This <TT>Polygon</TT> constructor
constructs a <TT>Polygon</TT> object
using the specified coordinates.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>xpoints</TT>-an array of integers
representing the x coordinate points of the polygon.<BR>
<TT>ypoints</TT>-an array of integers
representing the y coordinate points of the polygon.<BR>
<TT>npoints</TT>-an integer value
representing the number of points in the polygon.
</BLOCKQUOTE>
<H4><TT>addPoint</TT></H4>
<BLOCKQUOTE>
<TT>public void addPoint(int x, int y)<BR>
</TT>The <TT>addPoint</TT>
method adds a point to the polygon.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate of the
point to be added.<BR>
<TT>y</TT>-the y coordinate of the
point to be added.
</BLOCKQUOTE>
<H4><TT>getBoundingBox</TT></H4>
<BLOCKQUOTE>
<TT>public Rectangle getBoundingBox()<BR>
</TT>The <TT>getBoundingBox</TT>
returns the rectangular bounding box for the polygon.<BR>
<I><B>Returns: </B></I>A <TT>Rectangle</TT>
object representing the bounding box for the polygon.
</BLOCKQUOTE>
<H4><TT>inside</TT></H4>
<BLOCKQUOTE>
<TT>public boolean inside(int x, int y)<BR>
</TT>The <TT>inside</TT> method
determines whether the specified coordinates are inside the polygon's
bounding rectangle.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate to check.
<BR>
<TT>y</TT>-the y coordinate to check.
<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the coordinates are inside the polygon's bounding rectangle,
<TT>false</TT> if not.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierRectangleFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Rectangle</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>A <TT>Rectangle</TT> class
specifies the dimensions of a rectangle using <TT>x</TT>,
<TT>y</TT>, <TT>height</TT>,
and <TT>width</TT> values.
</BLOCKQUOTE>
<H4>Member Variables</H4>
<BLOCKQUOTE>
<TT>
public int x
</TT><BR>
The x variable stores the rectangle's x coordinate.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public int y
</TT><BR>
The y variable stores the rectangle's y coordinate.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public int width
</TT><BR>
The width variable stores the rectangle's width.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>
public int height
</TT><BR>
The height variable stores the rectangle's height.
</BLOCKQUOTE>
<H4><TT>Rectangle</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public Rectangle()<BR>
</TT>The <TT>Rectangle</TT>
constructor constructs a rectangle of zero size.
</BLOCKQUOTE>
<H4><TT>Rectangle</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public Rectangle(int x, int y, int width,
int height)<BR>
</TT>This <TT>Rectangle</TT>
constructor constructs a rectangle using the specified coordinates.
<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate of the
rectangle.<BR>
<TT>y</TT>-the y coordinate of the
rectangle.<BR>
<TT>width</TT>-the width of the rectangle.
<BR>
<TT>height</TT>-the height of the
rectangle.
</BLOCKQUOTE>
<H4><TT>Rectangle</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public Rectangle(int width, int height)
<BR>
</TT>This <TT>Rectangle</TT>
constructor constructs a rectangle using the specified width and
height.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>width</TT>-the width of the rectangle.
<BR>
<TT>height</TT>-the height of the
rectangle.
</BLOCKQUOTE>
<H4><TT>Rectangle</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public Rectangle(Point p, Dimension d)
<BR>
</TT>This <TT>Rectangle</TT>
constructor constructs a rectangle using the specified coordinates
and size.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>p</TT>-a <TT>Point</TT>
object containing the rectangle's x and y coordinates.<BR>
<TT>d</TT>-a <TT>Dimension</TT>
object containing the rectangle's size.
</BLOCKQUOTE>
<H4><TT>Rectangle</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public Rectangle(Point p)<BR>
</TT>This <TT>Rectangle</TT>
constructor constructs a rectangle using the specified point.
<BR>
<I><B>Parameters: </B></I><TT>p</TT>-a
<TT>Point</TT> object containing the
rectangle's x and y coordinates.
</BLOCKQUOTE>
<H4><TT>Rectangle</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public Rectangle(Dimension d)<BR>
</TT>This <TT>Rectangle</TT>
constructor constructs a rectangle using the specified <TT>Dimension</TT>.
<BR>
<I><B>Parameters: </B></I><TT>d</TT>-a
<TT>Dimension</TT> object containing
the rectangle's size.
</BLOCKQUOTE>
<H4><TT>reshape</TT></H4>
<BLOCKQUOTE>
<TT>public void reshape(int x, int y, int
width, int height)<BR>
</TT>The <TT>reshape</TT> method
resizes the rectangle's coordinates and size.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate of the
rectangle.<BR>
<TT>y</TT>-the y coordinate of the
rectangle.<BR>
<TT>width</TT>-the width of the rectangle.
<BR>
<TT>height</TT>-the height of the
rectangle.
</BLOCKQUOTE>
<H4><TT>move</TT></H4>
<BLOCKQUOTE>
<TT>public void move(int x, int y)<BR>
</TT>The <TT>move</TT> method
moves the rectangle to the specified coordinates.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate of the
rectangle.<BR>
<TT>y</TT>-the y coordinate of the
rectangle.
</BLOCKQUOTE>
<H4><TT>translate</TT></H4>
<BLOCKQUOTE>
<TT>public void translate(int x, int y)<BR>
</TT>The <TT>translate</TT>
method translates the rectangle by the specified coordinates.
<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x translation amount
of the rectangle's coordinates.<BR>
<TT>y</TT>-the y translation amount
of the rectangle's coordinates.
</BLOCKQUOTE>
<H4><TT>resize</TT></H4>
<BLOCKQUOTE>
<TT>public void resize(int width, int height)
<BR>
</TT>The <TT>resize</TT> method
changes the rectangle's size to the specified parameters.<BR>
<I><B>Parameters:<BR>
</B></I><TT>width</TT>-the width of
the rectangle.<BR>
<TT>height</TT>-the height of the
rectangle.
</BLOCKQUOTE>
<H4><TT>inside</TT></H4>
<BLOCKQUOTE>
<TT>public boolean inside(int x, int y)<BR>
</TT>The <TT>inside</TT> method
determines whether the specified coordinates are inside the rectangle's
bounding rectangle.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate to be
checked.<BR>
<TT>y</TT>-the y coordinate to be
checked.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the coordinates are within the bounding rectangle, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>intersects</TT></H4>
<BLOCKQUOTE>
<TT>public boolean intersects(Rectangle r)
<BR>
</TT>The <TT>intersects</TT>
method determines whether the specified rectangle intersects the
rectangle's bounding rectangle.<BR>
<I><B>Parameters: </B></I><TT>r</TT>-a
<TT>Rectangle</TT> object to be checked
for intersection with the rectangle.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the objects intersect, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>intersection</TT></H4>
<BLOCKQUOTE>
<TT>public Rectangle intersection(Rectangle
r)<BR>
</TT>The <TT>intersection</TT>
computes the intersection rectangle (if any) of the two rectangles.
<BR>
<I><B>Parameters: </B></I><TT>r</TT>-a
<TT>Rectangle</TT> object to be tested
for intersection with the rectangle.<BR>
<I><B>Returns: </B></I>A <TT>Rectangle</TT>
object that is the intersection of the two <TT>Rectangle</TT>
objects.
</BLOCKQUOTE>
<H4><TT>union</TT></H4>
<BLOCKQUOTE>
<TT>public Rectangle union(Rectangle r)<BR>
</TT>The <TT>union</TT> method
returns the union of the two rectangles.<BR>
<I><B>Parameters: </B></I><TT>r</TT>-a
<TT>Rectangle</TT> object that will
be used to determine the union rectangle.<BR>
<I><B>Returns: </B></I>A <TT>Rectangle</TT>
object representing the union of the two rectangles.
</BLOCKQUOTE>
<H4><TT>add</TT></H4>
<BLOCKQUOTE>
<TT>public void add(int newx, int newy)<BR>
</TT>The <TT>add</TT> method
adds a new point to the rectangle using the specified coordinates.
This results in the smallest possible rectangle that contains
the current rectangle and the coordinates.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>newx</TT>-an integer value representing
the x coordinate of the point.<BR>
<TT>newy</TT>-an integer value representing
the y coordinate of the point.
</BLOCKQUOTE>
<H4><TT>add</TT></H4>
<BLOCKQUOTE>
<TT>public void add(Point pt)<BR>
</TT>This <TT>add</TT> method
adds a new point to the rectangle using the specified <TT>Point</TT>
object. This results in the smallest possible rectangle that contains
the current rectangle and the point's coordinates.<BR>
<I><B>Parameters: </B></I><TT>pt</TT>-a
<TT>Point</TT> object representing
the point's coordinates.
</BLOCKQUOTE>
<H4><TT>add</TT></H4>
<BLOCKQUOTE>
<TT>public void add(Rectangle r)<BR>
</TT>This <TT>add</TT> method
adds a new rectangle to the existing rectangle. This results in
the union of the two rectangles (current and new).<BR>
<I><B>Parameters: </B></I><TT>r</TT>-a
<TT>Rectangle</TT> object that will
be used to perform a union with the rectangle.
</BLOCKQUOTE>
<H4><TT>grow</TT></H4>
<BLOCKQUOTE>
<TT>public void grow(int h, int v)<BR>
</TT>The <TT>grow</TT> method
grows the <TT>Rectangle</TT> object
by the specified horizontal and vertical amounts. The x and y
coordinates will be shifted by the specified amounts, and the
height and width sizes will also be increased by the specified
amounts.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>h</TT>-an integer amount representing
the amount to grow the rectangle by in the horizontal direction.
<BR>
<TT>v</TT>-an integer amount representing
the amount to grow the rectangle by in the vertical direction.
</BLOCKQUOTE>
<H4><TT>isEmpty</TT></H4>
<BLOCKQUOTE>
<TT>public boolean isEmpty()<BR>
</TT>The <TT>isEmpty</TT> method
is used to determine whether the rectangle's width and height
are less than or equal to zero.<BR>
<I><B>Returns: </B></I>A boolean value that will be <TT>true</TT>
if the rectangle is empty, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>hashCode</TT></H4>
<BLOCKQUOTE>
<TT>public int hashCode()<BR>
</TT>The <TT>hashCode</TT>
method returns the hash code for the rectangle.<BR>
<I><B>Parameters: </B></I>An integer value representing the rectangle's
hash code.
</BLOCKQUOTE>
<H4><TT>equals</TT></H4>
<BLOCKQUOTE>
<TT>public boolean equals(Object obj)<BR>
</TT>The <TT>equals</TT> method
compares the specified object with the rectangle.<BR>
<I><B>Parameters: </B></I><TT>obj</TT>-an
object to be compared with the rectangle.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the two objects are equal, <TT>false</TT>
if they are not.
</BLOCKQUOTE>
<H4><TT>toString</TT></H4>
<BLOCKQUOTE>
<TT>public String toString()<BR>
</TT>The <TT>toString</TT>
method returns a <TT>String</TT> representation
of the rectangle's contents.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
containing the rectangle's name, <TT>x</TT>,
<TT>y</TT>, <TT>height</TT>,
and <TT>width</TT> values.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierScrollbarFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Scrollbar</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Component<BR>
</TT>A <TT>Scrollbar</TT> component
can be added to a frame or other object to provide scrolling capabilities.
</BLOCKQUOTE>
<H4>Member Constants</H4>
<BLOCKQUOTE>
<TT>public static final int HORIZONTAL<BR>
</TT>The <TT>HORIZONTAL</TT>
static <TT>int</TT> value represents
the horizontal scrollbar orientation variable.<P>
<TT>public static final int VERTICAL<BR>
</TT>The <TT>VERTICAL</TT>
static <TT>int</TT> value represents
the vertical scrollbar orientation variable.
</BLOCKQUOTE>
<H4><TT>Scrollbar</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public Scrollbar()<BR>
</TT>The <TT>Scrollbar</TT>
constructor constructs a default scrollbar.
</BLOCKQUOTE>
<H4><TT>Scrollbar</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public Scrollbar(int orientation)<BR>
</TT>This <TT>Scrollbar</TT>
constructor constructs a scrollbar with the specified orientation.
<BR>
<I><B>Parameters: </B></I><TT>orientation</TT>-an
integer value that can be either <TT>HORIZONTAL</TT>
or <TT>VERTICAL</TT>.
</BLOCKQUOTE>
<H4><TT>Scrollbar</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public</TT> Scrollbar(int orientation,
int value, int visible, int minimum,<BR>
  int maximum)<BR>
This <TT>Scrollbar</TT> constructor
constructs a complete scrollbar using the specified orientation
and properties.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>orientation</TT>-an integer value
that can be either <TT>HORIZONTAL</TT>
or <TT>VERTICAL</TT>.<BR>
<TT>value</TT>-an integer value representing
the scrollbar's value.<BR>
<TT>visible</TT>-an integer value
representing the size of the scrollbar's visible portion.<BR>
<TT>minimum</TT>-an integer value
representing the scrollbar's minimum value.<BR>
<TT>maximum</TT>-an integer value
representing the scrollbar's maximum value.
</BLOCKQUOTE>
<H4><TT>addNotify</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void addNotify()
<BR>
</TT>The <TT>addNotify</TT>
method creates the peer interface for the scrollbar. Using a peer
interface allows the user interface of the scrollbar to be modified
without changing the functionality.
</BLOCKQUOTE>
<H4><TT>getOrientation</TT></H4>
<BLOCKQUOTE>
<TT>public int getOrientation()<BR>
</TT>The <TT>getOrientation</TT>
method returns the orientation value of the scrollbar.<BR>
<I><B>Returns: </B></I>An integer value that can be either <TT>HORIZONTAL</TT>
or <TT>VERTICAL</TT>.
</BLOCKQUOTE>
<H4><TT>getValue</TT></H4>
<BLOCKQUOTE>
<TT>public int getValue()<BR>
</TT>The <TT>getValue</TT>
method returns the current value of the scrollbar.<BR>
<I><B>Returns: </B></I>An integer value representing the value
of the scrollbar.
</BLOCKQUOTE>
<H4><TT>setValue</TT></H4>
<BLOCKQUOTE>
<TT>public void setValue(int value)<BR>
</TT>The <TT>setValue</TT>
method set the value of the scrollbar to the specified value.
<BR>
<I><B>Parameters: </B></I><TT>value</TT>-An
integer value representing the new value of the scrollbar.
</BLOCKQUOTE>
<H4><TT>getMinimum</TT></H4>
<BLOCKQUOTE>
<TT>public int getMinimum()<BR>
</TT>The <TT>getMinimum</TT>
method returns the minimum value of the scrollbar.<BR>
<I><B>Returns: </B></I>An integer value representing the scrollbar's
minimum value.
</BLOCKQUOTE>
<H4><TT>getMaximum</TT></H4>
<BLOCKQUOTE>
<TT>public int getMaximum()<BR>
</TT>The <TT>getMaximum</TT>
method returns the maximum value of the scrollbar.<BR>
<I><B>Returns: </B></I>An integer value representing the scrollbar's
maximum value.
</BLOCKQUOTE>
<H4><TT>getVisible</TT></H4>
<BLOCKQUOTE>
<TT>public int getVisible()<BR>
</TT>The <TT>getVisible</TT>
portion returns the visible amount of the scrollbar.<BR>
<I><B>Returns: </B></I>An integer value representing the scrollbar's
visible amount.
</BLOCKQUOTE>
<H4><TT>setLineIncrement</TT></H4>
<BLOCKQUOTE>
<TT>public void setLineIncrement(int l)<BR>
</TT>The <TT>setLineIncrement</TT>
method sets the line increment for the scrollbar.<BR>
<I><B>Parameters: </B></I><TT>l</TT>-an
integer value representing the line increment for the scrollbar,
which is the amount that the scrollbar's position increases or
decreases when the user clicks its up or down widgets.
</BLOCKQUOTE>
<H4><TT>getLineIncrement</TT></H4>
<BLOCKQUOTE>
<TT>public int getLineIncrement()<BR>
</TT>The <TT>getLineIncrement</TT>
method returns the line increment for the scrollbar.<BR>
<I><B>Returns: </B></I>An integer value representing the line
increment for the scrollbar, which is the amount that the scrollbar's
position increases or decreases when the user clicks its up or
down widgets.
</BLOCKQUOTE>
<H4><TT>setPageIncrement</TT></H4>
<BLOCKQUOTE>
<TT>public void setPageIncrement(int l)<BR>
</TT>The <TT>setPageIncrement</TT>
method sets the page increment for the scrollbar.<BR>
<I><B>Parameters: </B></I><TT>l</TT>-an
integer value representing the page increment for the scrollbar,
which is the amount that the scrollbar's position increases or
decreases when the user clicks its page up or page down widgets.
</BLOCKQUOTE>
<H4><TT>getPageIncrement</TT></H4>
<BLOCKQUOTE>
<TT>public int getPageIncrement()<BR>
</TT>The <TT>getPageIncrement</TT>
method returns the page increment for the scrollbar.<BR>
<I><B>Returns: </B></I>An integer value representing the page
increment for the scrollbar, which is the amount that the scrollbar's
position increases or decreases when the user clicks its page
up or page down widgets.
</BLOCKQUOTE>
<H4><TT>setValues</TT></H4>
<BLOCKQUOTE>
<TT>public void setValues(int value, int
visible, int minimum, int maximum)<BR>
</TT>The <TT>setValues</TT>
method sets the scrollbar's properties based on the specified
values.<BR>
<I><B>Parameters: <BR>
</B></I><TT>value</TT>-an integer
value representing the current value of the scrollbar.<BR>
<TT>visible</TT>-an integer value
representing the visible amount of the scrollbar.<BR>
<TT>minimum</TT>-an integer value
representing the scrollbar's minimum value.<BR>
<TT>maximum</TT>-an integer value
representing the scrollbar's maximum value.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierTextAreaFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>TextArea</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>TextComponent</TT>
<BR>
A <TT>TextArea</TT> class represents
a multiline component that can be used for text display or editing.
</BLOCKQUOTE>
<H4><TT>TextArea</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public TextArea()<BR>
</TT>The <TT>TextArea</TT>
constructor constructs a <TT>TextArea</TT>
object.
</BLOCKQUOTE>
<H4><TT>TextArea</TT></H4>
<BLOCKQUOTE>
<TT>public TextArea(int rows, int cols)<BR>
</TT>This <TT>TextArea</TT>
constructor constructs a <TT>TextArea</TT>
object using the specified row and column values.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>rows</TT>-an integer value specifying
the number of rows to use.<BR>
<TT>cols</TT>-an integer value specifying
the number of columns to use.
</BLOCKQUOTE>
<H4><TT>TextArea</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public TextArea(String text)<BR>
</TT>This <TT>TextArea</TT>
constructor constructs a <TT>TextArea</TT>
object using the specified text.<BR>
<I><B>Parameters: </B></I><TT>text</TT>-a
<TT>String</TT> value containing the
text to be displayed in the text area.
</BLOCKQUOTE>
<H4><TT>TextArea</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public TextArea(String text, int rows,
int cols)<BR>
</TT>This <TT>TextArea</TT>
constructor constructs a <TT>TextArea</TT>
object using the specified row, column, and text values.<BR>
<I><B>Parameters:<BR>
</B></I><TT>text</TT>-a <TT>String</TT>
value containing the text to be displayed in the text area.<BR>
<TT>rows</TT>-an integer value specifying
the number of rows to use.<BR>
<TT>cols</TT>-an integer value specifying
the number of columns to use.
</BLOCKQUOTE>
<H4><TT>addNotify</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void addNotify()
<BR>
</TT>The <TT>addNotify</TT>
method creates the peer interface for the text area. Using a peer
interface allows the user interface of the text area to be modified
without changing the functionality.
</BLOCKQUOTE>
<H4><TT>insertText</TT></H4>
<BLOCKQUOTE>
<TT>public void insertText(String str, int
pos)<BR>
</TT>The <TT>insertText</TT>
method inserts a text string into the text area's text at the
specified position.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>str</TT>-a <TT>String</TT>
value containing the text to be inserted in the text area.<BR>
<TT>pos</TT>-an integer value specifying
the position to insert the text string into.
</BLOCKQUOTE>
<H4><TT>appendText</TT></H4>
<BLOCKQUOTE>
<TT>public void appendText(String str)<BR>
</TT>The <TT>appendText</TT>
method appends a text string onto the text area's text.<BR>
<I><B>Parameters: </B></I><TT>str</TT>-a
<TT>String</TT> value containing the
text to be appended in the text area.
</BLOCKQUOTE>
<H4><TT>replaceText</TT></H4>
<BLOCKQUOTE>
<TT>public void replaceText(String str, int
start, int end)<BR>
</TT>The <TT>replaceText</TT>
method replaces a section of the text area's text at the specified
positions with the specified text string.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>str</TT>-a <TT>String</TT>
value containing the text that will replace the text area's current
text.<BR>
<TT>start</TT>-the starting position
of the text to be replaced within the text area.<BR>
<TT>end</TT>-the ending position of
the text to be replaced within the text area.
</BLOCKQUOTE>
<H4><TT>getRows</TT></H4>
<BLOCKQUOTE>
<TT>public int getRows()<BR>
</TT>The <TT>getRows</TT> method
returns the number of rows within the text area.<BR>
<I><B>Returns: </B></I>An integer value representing the number
of rows within the text area.
</BLOCKQUOTE>
<H4><TT>getColumns</TT></H4>
<BLOCKQUOTE>
<TT>public int getColumns()<BR>
</TT>The <TT>getColumns</TT>
method returns the number of columns within the text area.<BR>
<I><B>Returns: </B></I>An integer value representing the number
of rows within the text area.
</BLOCKQUOTE>
<H4><TT>preferredSize</TT></H4>
<BLOCKQUOTE>
<TT>public Dimension preferredSize(int rows,
int cols)<BR>
</TT>The <TT>preferredSize</TT>
method returns the preferred size of a text area comprising the
specified rows and columns.<BR>
<I><B>Parameters:<BR>
</B></I><TT>rows</TT>-the number of
rows in the text area.<BR>
<TT>cols</TT>-the number of columns
in the text area.<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object representing the preferred size of the specified text area.
</BLOCKQUOTE>
<H4><TT>preferredSize</TT></H4>
<BLOCKQUOTE>
<TT>public Dimension preferredSize()<BR>
</TT>This <TT>preferredSize</TT>
method returns the preferred size dimension of a <TT>TextArea</TT>
object.<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object representing the preferred size of a text area.
</BLOCKQUOTE>
<H4><TT>minimumSize</TT></H4>
<BLOCKQUOTE>
<TT>public Dimension minimumSize(int rows,
int cols)<BR>
</TT>The <TT>minimumSize</TT>
method returns the minimum size of a text area comprised of the
specified rows and columns.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>rows</TT>-the number of rows in
the text area.<BR>
<TT>cols</TT>-the number of columns
in the text area.<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object representing the minimum size of the specified text area.
</BLOCKQUOTE>
<H4><TT>minimumSize</TT></H4>
<BLOCKQUOTE>
<TT>public Dimension minimumSize()<BR>
</TT>This <TT>minimumSize</TT>
method returns the minimum size dimension of a <TT>TextArea</TT>
object.<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object representing the minimum size of a text area.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierTextComponentFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>TextComponent</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Component<BR>
</TT>The <TT>TextComponent</TT>
class is a component that provides some text for display or editing.
It serves as the base class for the <TT>TextArea</TT>
and <TT>TextField</TT> classes.
</BLOCKQUOTE>
<H4><TT>removeNotify</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void removeNotify()
<BR>
</TT>The <TT>removeNotify</TT>
method removes the text component's peer interface. A peer interface
can be used to modify the text component's user interface without
changing its functionality.
</BLOCKQUOTE>
<H4><TT>setText</TT></H4>
<BLOCKQUOTE>
<TT>public void setText(String t)<BR>
</TT>The <TT>setText</TT> method
sets the text component's displayed text to the specified <TT>String</TT>
value.<BR>
<I><B>Parameters: </B></I><TT>t</TT>-a
<TT>String</TT> value representing
the string to be stored in the text component's text value.
</BLOCKQUOTE>
<H4><TT>getText</TT></H4>
<BLOCKQUOTE>
<TT>public String getText()<BR>
</TT>The <TT>getText</TT> method
returns the text component's text value.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value representing the text component's text value.
</BLOCKQUOTE>
<H4><TT>getSelectedText</TT></H4>
<BLOCKQUOTE>
<TT>public String getSelectedText()<BR>
</TT>The <TT>getSelectedText</TT>
method returns the selected text contained in this text component.
<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value representing the text component's text value.
</BLOCKQUOTE>
<H4><TT>isEditable</TT></H4>
<BLOCKQUOTE>
<TT>public boolean isEditable()<BR>
</TT>The <TT>isEditable</TT>
method is used to determine whether the text component's text
can be edited.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the text can be edited, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>setEditable</TT></H4>
<BLOCKQUOTE>
<TT>public void setEditable(boolean t)<BR>
</TT>The <TT>setEditable</TT>
method is used to set the text component's edit property.<BR>
<I><B>Parameters: </B></I><TT>t</TT>-a
boolean value that is <TT>true</TT>
if the text can be edited, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>getSelectionStart</TT></H4>
<BLOCKQUOTE>
<TT>public int getSelectionStart()<BR>
</TT>The <TT>getSelectionStart</TT>
method returns the starting position of the selected text in the
text component.<BR>
<I><B>Returns: </B></I>An integer value representing the position
of the first selected character in the text component.
</BLOCKQUOTE>
<H4><TT>getSelectionEnd</TT></H4>
<BLOCKQUOTE>
<TT>public int getSelectionEnd()<BR>
</TT>The <TT>getSelectionEnd</TT>
method returns the ending position of the selected text in the
text component.<BR>
<I><B>Returns: </B></I>An integer value representing the position
of the last selected character in the text component.
</BLOCKQUOTE>
<H4><TT>select</TT></H4>
<BLOCKQUOTE>
<TT>public void select(int selStart, int
selEnd)<BR>
</TT>The <TT>select</TT> method
selects a portion of the text component's text based on the specified
position.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>selStart</TT>-an integer value
representing the position of the first character to be selected
in the text component.<BR>
<TT>selEnd</TT>-an integer value representing
the position of the last character to be selected in the text
component.
</BLOCKQUOTE>
<H4><TT>selectAll</TT></H4>
<BLOCKQUOTE>
<TT>public void selectAll()<BR>
</TT>The <TT>selectAll</TT>
method selects all of the text component's text.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierTextFieldFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>TextField</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>TextComponent</TT>
<BR>
The <TT>TextField</TT> class provides
a single line of text for display or editing.
</BLOCKQUOTE>
<H4><TT>TextField</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public TextField()<BR>
</TT>The <TT>TextField</TT>
constructor constructs a text field of default size.
</BLOCKQUOTE>
<H4><TT>TextField</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public TextField(int cols)<BR>
</TT>This <TT>TextField</TT>
constructor constructs a text field using the specified column
size.<BR>
<I><B>Parameters: </B></I><TT>cols</TT>-the
number of characters that can be entered into the text field.
</BLOCKQUOTE>
<H4><TT>TextField</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public TextField(String text)<BR>
</TT>This <TT>TextField</TT>
constructor constructs a text field using the specified input
string.<BR>
<I><B>Parameters: </B></I><TT>text</TT>-the
default text to be displayed within the text field.
</BLOCKQUOTE>
<H4><TT>TextField</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public TextField(String text, int cols)
<BR>
</TT>This <TT>TextField</TT>
constructor constructs a text field using the specified input
string and column values.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>text</TT>-the default text to
be displayed within the text field.<BR>
<TT>Cols</TT>-the number of columns
to display.
</BLOCKQUOTE>
<H4><TT>addNotify</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void addNotify()
<BR>
</TT>The <TT>addNotify</TT>
method creates the peer interface for the text field. Using a
peer interface allows the user interface of the text field to
be modified without changing the functionality.
</BLOCKQUOTE>
<H4><TT>getEchoChar</TT></H4>
<BLOCKQUOTE>
<TT>public char getEchoChar()<BR>
</TT>The <TT>getEchoChar</TT>
method retrieves the character that will be used for echoing.
<BR>
<I><B>Returns: </B></I>A character value that represents the character
that will be used for echoing.
</BLOCKQUOTE>
<H4><TT>echoCharIsSet</TT></H4>
<BLOCKQUOTE>
<TT>public boolean echoCharIsSet()<BR>
</TT>The <TT>echoCharIsSet</TT>
method is used to determine whether the echo character has been
set.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the echo character has been set, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>getColumns</TT></H4>
<BLOCKQUOTE>
<TT>public int getColumns()<BR>
</TT>The <TT>getColumns</TT>
method returns the number of columns used in the display area
of this text field.<BR>
<I><B>Returns: </B></I>An integer value representing the number
of columns (characters) that will be displayed by the text field.
</BLOCKQUOTE>
<H4><TT>setEchoCharacter</TT></H4>
<BLOCKQUOTE>
<TT>public void setEchoCharacter(char c)
<BR>
</TT>The <TT>setEchoCharacter</TT>
method is used to set the character that will be used for echoing.
Echoing is often used on password fields so that the actual characters
entered won't be echoed to the screen.<BR>
<I><B>Parameters: </B></I><TT>c</TT>-a
character value representing the character to be echoed to the
screen.
</BLOCKQUOTE>
<H4><TT>preferredSize</TT></H4>
<BLOCKQUOTE>
<TT>public Dimension preferredSize(int cols)
<BR>
</TT>This <TT>preferredSize</TT>
method returns the preferred size dimension of a text field object.
<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object representing the preferred size of a text field.
</BLOCKQUOTE>
<H4><TT>minimumSize</TT></H4>
<BLOCKQUOTE>
<TT>public Dimension minimumSize(int cols)
<BR>
</TT>The <TT>minimumSize</TT>
method returns the minimum size of a text field comprised of the
specified number of columns.<BR>
<I><B>Parameters: </B></I><TT>cols</TT>-the
number of columns in the text field.<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object representing the minimum size of the specified text field.
</BLOCKQUOTE>
<H4><TT>minimumSize</TT></H4>
<BLOCKQUOTE>
<TT>public Dimension minimumSize()<BR>
</TT>This <TT>minimumSize</TT>
method returns the minimum size dimension of a <TT>TextField</TT>
object.<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object representing the minimum size of a text field.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierToolkitFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Toolkit</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>The <TT>Toolkit</TT> class
is used to bind a native toolkit to the awt classes.
</BLOCKQUOTE>
<H4><TT>getScreenSize</TT></H4>
<BLOCKQUOTE>
<TT>public abstract Dimension getScreenSize()
<BR>
</TT>The <TT>getScreenSize</TT>
method returns the size of the screen.<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object containing the size of the screen.
</BLOCKQUOTE>
<H4><TT>getScreenResolution</TT></H4>
<BLOCKQUOTE>
<TT>public abstract int getScreenResolution()
<BR>
</TT>The <TT>getScreenResolution</TT>
method returns the current screen resolution in units of dots
per inch.<BR>
<I><B>Returns: </B></I>An integer value representing the current
screen resolution in dots per inch.
</BLOCKQUOTE>
<H4><TT>getColorModel</TT></H4>
<BLOCKQUOTE>
<TT>public abstract ColorModel getColorModel()
<BR>
</TT>The <TT>getColorModel</TT>
method returns the current color model being used.<BR>
<I><B>Returns: </B></I>A <TT>ColorModel</TT>
object representing the current color model.
</BLOCKQUOTE>
<H4><TT>getFontList</TT></H4>
<BLOCKQUOTE>
<TT>public abstract String[] getFontList()
<BR>
</TT>The <TT>getFontList</TT>
method returns a list of the fonts available.<BR>
<I><B>Returns: </B></I>An array of strings containing the names
of all fonts available to the system.
</BLOCKQUOTE>
<H4><TT>getFontMetrics</TT></H4>
<BLOCKQUOTE>
<TT>public abstract FontMetrics getFontMetrics(Font
font)<BR>
</TT>The <TT>getFontMetrics</TT>
method returns the font metrics for a specified font.<BR>
<I><B>Parameters: </B></I>A <TT>Font</TT>
object.<BR>
<I><B>Returns: </B></I>A <TT>FontMetrics</TT>
object containing information on the specified font.
</BLOCKQUOTE>
<H4><TT>sync</TT></H4>
<BLOCKQUOTE>
<TT>public abstract void sync()<BR>
</TT>The <TT>sync</TT> method
syncs the graphics state. This is useful when doing animation.
</BLOCKQUOTE>
<H4><TT>getDefaultToolkit</TT></H4>
<BLOCKQUOTE>
<TT>public static synchronized Toolkit getDefaultToolkit()
<BR>
</TT>The <TT>getDefaultToolkit</TT>
method returns a <TT>Toolkit</TT>
object that is used as the default toolkit.<BR>
<I><B>Returns: </B></I>A <TT>Toolkit</TT>
object representing the default system toolkit.
</BLOCKQUOTE>
<H4><TT>getImage</TT></H4>
<BLOCKQUOTE>
<TT>public abstract Image getImage(String
filename)<BR>
</TT>The <TT>getImage</TT>
method returns an <TT>Image</TT> object
that corresponds with the specified <TT>Image</TT>
filename.<BR>
<I><B>Parameters: </B></I><TT>filename</TT>-a
<TT>String</TT> value containing the
filename of the image to be loaded.<BR>
<I><B>Returns: </B></I>An <TT>Image</TT>
object.
</BLOCKQUOTE>
<H4><TT>getImage</TT></H4>
<BLOCKQUOTE>
<TT>public abstract Image getImage(URL url)
<BR>
</TT>The <TT>getImage</TT>
method retrieves an <TT>Image</TT>
object that corresponds with the specified URL.<BR>
<I><B>Parameters: </B></I><TT>url</TT>-the
uniform resource locator (URL) of the specified image object.
<BR>
<I><B>Returns: </B></I>An <TT>Image</TT>
object.
</BLOCKQUOTE>
<H4><TT>prepareImage</TT></H4>
<BLOCKQUOTE>
<TT>public abstract boolean prepareImage(Image
image, int width, int height,<BR>
  ImageObserver observer)<BR>
</TT>The <TT>prepareImage</TT>
method prepares an image for rendering on the screen based on
the specified image sizes.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>image</TT>-an <TT>Image</TT>
object.<BR>
<TT>width</TT>-an integer value representing
the width of the image when displayed.<BR>
<TT>height</TT>-an integer value representing
the height of the image when displayed.<BR>
<TT>observer</TT>-an <TT>ImageObserver</TT>
object that will be notified when the image is prepared.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the image was prepared successfully, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>checkImage</TT></H4>
<BLOCKQUOTE>
<TT>public</TT> abstract int checkImage(Image
image, int width, int height,<BR>
  ImageObserver observer)<BR>
The <TT>checkImage</TT> method checks
the status of the image construction.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>image</TT>-an <TT>Image</TT>
object.<BR>
<TT>width</TT>-an integer value representing
the width of the image when displayed.<BR>
<TT>height</TT>-an integer value representing
the height of the image when displayed.<BR>
<TT>observer</TT>-an <TT>ImageObserver</TT>
object that will be notified when the image is prepared.<BR>
<I><B>Returns: </B></I>An integer value representing the status
of the image construction.
</BLOCKQUOTE>
<H4><TT>createImage</TT></H4>
<BLOCKQUOTE>
<TT>public abstract Image createImage(ImageProducer
producer)<BR>
</TT>The <TT>createImage</TT>
method creates an image using the <TT>ImageProducer</TT>
interface.<BR>
<I><B>Parameters: </B></I><TT>producer</TT>-an
<TT>ImageProducer</TT> object that
will be notified when the image is prepared.<BR>
<I><B>Returns: </B></I>An <TT>Image</TT>
object. 
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierWindowFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>Window</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Container</TT>
<BR>
The <TT>Window</TT> class is defined
as a top-level window with no borders and no menu bar.
</BLOCKQUOTE>
<H4><TT>Window</TT> Constructor</H4>
<BLOCKQUOTE>
<TT>public Window(Frame parent)<BR>
</TT>The <TT>Window</TT> constructor
constructs a window whose parent is specified by the <TT>parent</TT>
parameter. This window will be invisible after creation and will
act as a modal dialog when initially shown.<BR>
<I><B>Parameters: </B></I><TT>parent</TT>-a
<TT>Frame</TT> object that is the
parent of this window.
</BLOCKQUOTE>
<H4><TT>addNotify</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void addNotify()
<BR>
</TT>The <TT>addNotify</TT>
method creates the peer interface for the window. Using a peer
interface allows the user interface of the window to be modified
without changing the functionality.
</BLOCKQUOTE>
<H4><TT>pack</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void pack()<BR>
</TT>The <TT>pack</TT> method
packs the components within the window based on the components'
preferred sizes.
</BLOCKQUOTE>
<H4><TT>show</TT></H4>
<BLOCKQUOTE>
<TT>public void show()<BR>
</TT>The <TT>show</TT> method
shows the window after it has been constructed. If the window
is already visible, the <TT>show</TT>
method will bring the window to the front.
</BLOCKQUOTE>
<H4><TT>dispose</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void dispose()<BR>
</TT>The <TT>dispose</TT> method
disposes of the window and all of its contents. This method must
be called to release the window's resources.
</BLOCKQUOTE>
<H4><TT>toFront</TT></H4>
<BLOCKQUOTE>
<TT>public void toFront()<BR>
</TT>The <TT>toFront</TT> method
brings the parent frame to the front of the window.
</BLOCKQUOTE>
<H4><TT>toBack</TT></H4>
<BLOCKQUOTE>
<TT>public void toBack()<BR>
</TT>The <TT>toBack</TT> method
sends the parent frame to the back of the window.
</BLOCKQUOTE>
<H4><TT>getToolkit</TT></H4>
<BLOCKQUOTE>
<TT>public Toolkit getToolkit()<BR>
</TT>The <TT>getToolkit</TT>
method returns the current toolkit for the window.<BR>
<I><B>Returns: </B></I>A <TT>Toolkit</TT>
object.
</BLOCKQUOTE>
<H4><TT>getWarningString</TT></H4>
<BLOCKQUOTE>
<TT>public final String getWarningString()
<BR>
</TT>The <TT>getWarningString</TT>
method returns a string that is used to warn users. This string
typically displays a security warning and is displayed in an area
of the window visible to users.<BR>
<I><B>Returns: </B></I>A <TT>String</TT>
value containing a warning string for users to read.
</BLOCKQUOTE>
<H3><A NAME="TTFONTSIZEFACECourierawtExceptionFONTTT">
<TT>awtException</TT></A></H3>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Exception</TT>
<BR>
The <TT>awtException</TT> class is
used to signal that an awt exception has occurred.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierawtErrorFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>awtError</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Error</TT>
<BR>
The <TT>awtError</TT> encapsulates
an awt error.
</BLOCKQUOTE>
<HR>

<CENTER><P><A HREF="ch33.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch35.htm"><IMG SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
