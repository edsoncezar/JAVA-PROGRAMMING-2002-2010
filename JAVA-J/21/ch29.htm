<HTML>
<HEAD>
<TITLE>appendix A -- Language Summary</TITLE>

<META>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT SIZE=6 COLOR=#FF0000>appendix&nbsp;A</FONT></H1>
<H1><FONT SIZE=6 COLOR=#FF0000>Language Summary</FONT></H1>
<P>
<I><B>by Laura Lemay</B></I>
<HR>
<P>
<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>
<UL>
<LI><A HREF="#ReservedWords">
Reserved Words</A>
<LI><A HREF="#Comments">
Comments</A>
<LI><A HREF="#LiteralsBR">
Literals<BR>
</A>
<LI><A HREF="#VariableDeclarationBR">
Variable Declaration<BR>
</A>
<LI><A HREF="#VariableAssignmentBR">
Variable Assignment<BR>
</A>
<LI><A HREF="#OperatorsBR">
Operators<BR>
</A>
<LI><A HREF="#ObjectsBR">
Objects<BR>
</A>
<LI><A HREF="#ArraysBR">
Arrays<BR>
</A>
<LI><A HREF="#LoopsandConditionalsBR">
Loops and Conditionals<BR>
</A>
<LI><A HREF="#ClassDefinitionsBR">
Class Definitions<BR>
</A>
<LI><A HREF="#MethodandConstructorDefinitions">
Method and Constructor Definitions</A>
<LI><A HREF="#PackagesInterfacesandImporting">
Packages, Interfaces, and Importing</A>
<LI><A HREF="#ExceptionsandGuardingBR">
Exceptions and Guarding<BR>
</A>
</UL>

<HR>
<P>
This appendix contains a summary or quick reference for the Java
language, as described in this book.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Technical Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
This is not a grammar overview, nor is it a technical overview of the language itself. It's a quick reference to be used after you already know the basics of how the language works. If you need a technical description of the language, your best bet is to 
visit the Java Web site (<TT><A HREF="http://java.sun.com">http://java.sun.com</A></TT>) and download the actual specification, which includes a full BNF grammar.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
Language keywords and symbols are shown in a monospace font. Arguments
and other parts to be substituted are in italic monospace.
<P>
Optional parts are indicated by brackets (except in the array
syntax section). If there are several options that are mutually
exclusive, they are shown separated by pipes (<TT>[|]</TT>)
like this:
<BLOCKQUOTE>
<PRE>
[ public | private | protected ] <I>type varname</I>
</PRE>
</BLOCKQUOTE>
<H2><A NAME="ReservedWords"><FONT SIZE=5 COLOR=#FF0000>
Reserved Words</FONT></A></H2>
<P>
The following words are reserved for use by the Java language
itself (some of them are reserved but not currently used). You
cannot use these words to refer to classes, methods, or variable
names:<BR>

<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=60%>
<TR VALIGN=TOP><TD WIDTH=197><TT>abstract</TT>
</TD><TD WIDTH=197>float</FONT></TD><TD WIDTH=197>public</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=197><TT>boolean</TT>
</TD><TD WIDTH=197>for</FONT></TD><TD WIDTH=197>return</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=197><TT>break</TT></TD>
<TD WIDTH=197>goto</FONT></TD><TD WIDTH=197>short</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=197><TT>byte</TT></TD>
<TD WIDTH=197>if</FONT></TD><TD WIDTH=197>static</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=197><TT>case</TT></TD>
<TD WIDTH=197>implements</FONT></TD><TD WIDTH=197>super</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=197><TT>catch</TT></TD>
<TD WIDTH=197>import</FONT></TD><TD WIDTH=197>switch</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=197><TT>char</TT></TD>
<TD WIDTH=197>instanceof</FONT></TD><TD WIDTH=197>synchronize</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=197><TT>class</TT></TD>
<TD WIDTH=197>int</FONT></TD><TD WIDTH=197>this</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=197><TT>const</TT></TD>
<TD WIDTH=197>interface</FONT></TD><TD WIDTH=197>throw</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=197><TT>continue</TT>
</TD><TD WIDTH=197>long</FONT></TD><TD WIDTH=197>throws</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=197><TT>do</TT></TD>
<TD WIDTH=197>native</FONT></TD><TD WIDTH=197>transient</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=197><TT>double</TT>
</TD><TD WIDTH=197>new</FONT></TD><TD WIDTH=197>try</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=197><TT>else</TT></TD>
<TD WIDTH=197>null</FONT></TD><TD WIDTH=197>void</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=197><TT>extends</TT>
</TD><TD WIDTH=197>packa</FONT></TD><TD WIDTH=197>volatilege</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=197><TT>final</TT></TD>
<TD WIDTH=197>private</FONT></TD><TD WIDTH=197>while</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=197><TT>finally</TT>
</TD><TD WIDTH=197>protected</FONT></TD>
<TD WIDTH=197>&nbsp;</TD></TR>
</TABLE>
</CENTER>
<P>
<H2><A NAME="Comments"><FONT SIZE=5 COLOR=#FF0000>
Comments</FONT></A></H2>
<BLOCKQUOTE>
<PRE>
/* this is a multiline comment */
// this is a single-line comment
/** Javadoc comment */
</PRE>
</BLOCKQUOTE>
<H2><A NAME="LiteralsBR"><FONT SIZE=5 COLOR=#FF0000>
Literals<BR>
</FONT></A></H2>

<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=60%>
<TR VALIGN=TOP><TD WIDTH=192><TT><I>number</I></TT>
</TD><TD WIDTH=223>Type int</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT><I>number</FONT></I>[l | L]</TT>
</TD><TD WIDTH=223>Type long</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>0x<I>hex</I></TT>
</TD><TD WIDTH=223>Hex integer</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>0X<I>hex</I></TT>
</TD><TD WIDTH=223>Hex integer</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>0<I>octal</I></TT>
</TD><TD WIDTH=223>Octal integer</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>[<I> number </I>]<I>.number</I></TT>
</TD><TD WIDTH=223>Type double</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT><I>number</FONT></I>[ f | f]</TT>
</TD><TD WIDTH=223>Type float</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT><I>number</FONT></I>[ d | D]</TT>
</TD><TD WIDTH=223>Type double</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>[ + | - ]<I> number</I></TT>
</TD><TD WIDTH=223>Signed</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT><I>number</FONT></I>e<I>number</I></TT>
</TD><TD WIDTH=223>Exponent</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT><I>number</FONT></I>E<I>number</I></TT>
</TD><TD WIDTH=223>Exponent</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>'<I>character</I>'</TT>
</TD><TD WIDTH=223>Single character</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>&quot;<I>characters</I>&quot;</TT>
</TD><TD WIDTH=223>String</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>&quot;&quot;</TT>
</TD><TD WIDTH=223>Empty string</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>\b</TT></TD>
<TD WIDTH=223>Backspace</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>\t</TT></TD>
<TD WIDTH=223>Tab</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>\n</TT></TD>
<TD WIDTH=223>Line feed</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>\f</TT></TD>
<TD WIDTH=223>Form feed</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>\r</TT></TD>
<TD WIDTH=223>Carriage return</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>\&quot;</TT>
</TD><TD WIDTH=223>Double quote</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>\'</TT></TD>
<TD WIDTH=223>Single quote</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>\\</TT></TD>
<TD WIDTH=223>Backslash</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>\uNNNN</TT>
</TD><TD WIDTH=223>Unicode escape (NNNN is hex)</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>true</TT></TD>
<TD WIDTH=223>Boolean</TD></TR>
<TR VALIGN=TOP><TD WIDTH=192><TT>false</TT></TD>
<TD WIDTH=223>Boolean</TD></TR>
</TABLE>
</CENTER>
<P>
<H2><A NAME="VariableDeclarationBR"><FONT SIZE=5 COLOR=#FF0000>
Variable Declaration<BR>
</FONT></A></H2>

<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=70%>
<TR VALIGN=TOP><TD WIDTH=70%><TT>[ byte | short | int | long ] <I>varname</I> </TT>
</TD><TD WIDTH=30%>Integers (pick one type)</TD></TR>
<TR VALIGN=TOP><TD WIDTH=70%><TT>[ float | double ] <I>varname</I></TT>
</TD><TD WIDTH=30%>Floats (pick one type)</TD></TR>
<TR VALIGN=TOP><TD WIDTH=70%><TT>char <I>varname</I></TT>
</TD><TD WIDTH=30%>Characters</TD></TR>
<TR VALIGN=TOP><TD WIDTH=70%><TT>boolean <I>varname</I></TT>
</TD><TD WIDTH=30%>Boolean</TD></TR>
<TR VALIGN=TOP><TD WIDTH=70%><TT><I>classname varname</I></TT>
</TD><TD WIDTH=30%>Class types</TD></TR>
<TR VALIGN=TOP><TD WIDTH=70%><TT><I>interfacename varname</I></TT>
</TD><TD WIDTH=30%>Interface types</TD></TR>
<TR VALIGN=TOP><TD WIDTH=70%><TT>type <I>varname</I>, <I>varname</I>, <I>varname</I></TT>
</TD><TD WIDTH=30%>Multiple variables</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
The following options are available only for class and instance
variables. Any of these options can be used with a variable declaration:
<BR>

<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=70%>
<TR VALIGN=TOP><TD WIDTH=70%><TT>[ static ] <I>variableDeclaration</I></TT>
</TD><TD WIDTH=30%>Class variable</TD></TR>
<TR VALIGN=TOP><TD WIDTH=70%><TT>[ final ] <I>variableDeclaration</I></TT>
</TD><TD WIDTH=30%>Constants</TD></TR>
<TR VALIGN=TOP><TD WIDTH=70%><TT>[ public | private | protected ] <I>variableDeclaration</I> </TT>
</TD><TD WIDTH=30%>Access control</TD></TR>
<TR VALIGN=TOP><TD WIDTH=70%><TT>[volatile] <I>varname</I></TT>
</TD><TD WIDTH=30%>Modified asynchronously </TD></TR>
<TR VALIGN=TOP><TD WIDTH=70%><TT>[transient] <I>varname</I></TT>
</TD><TD WIDTH=30%>Not persistent (not yet implemented)</TD></TR>
</TABLE>
</CENTER>
<P>
<H2><A NAME="VariableAssignmentBR"><FONT SIZE=5 COLOR=#FF0000>
Variable Assignment<BR>
</FONT></A></H2>

<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=70%>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>variable</FONT></I> = <I>value</I></TT>
</TD><TD WIDTH=221>Assignment</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>variable</FONT></I>++</TT>
</TD><TD WIDTH=221>Postfix increment</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT>++<I>variable</I></TT>
</TD><TD WIDTH=221>Prefix increment</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>variable</FONT></I>--</TT>
</TD><TD WIDTH=221>Postfix decrement</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT>--<I>variable</I></TT>
</TD><TD WIDTH=221>Prefix decrement</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>variable</FONT></I> += <I>value</I></TT>
</TD><TD WIDTH=221>Add and assign</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>variable</FONT></I> -= <I>value</I></TT>
</TD><TD WIDTH=221>Subtract and assign</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>variable</FONT></I> *= <I>value</I></TT>
</TD><TD WIDTH=221>Multiply and assign</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>variable</FONT></I> /= <I>value</I></TT>
</TD><TD WIDTH=221>Divide and assign</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>variable</FONT></I> %= <I>value</I></TT>
</TD><TD WIDTH=221>Modulus and assign</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>variable</FONT></I> &amp;= <I>value</I></TT>
</TD><TD WIDTH=221>AND and assign</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>variable</FONT></I> |= <I>value</I></TT>
</TD><TD WIDTH=221>OR and assign</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>variable</FONT></I> ^= <I>value</I></TT>
</TD><TD WIDTH=221>XOR and assign</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>variable</FONT></I> &lt;&lt;= <I>value</I></TT>
</TD><TD WIDTH=221>Left-shift and assign</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>variable</FONT></I> &gt;&gt;= <I>value</I></TT>
</TD><TD WIDTH=221>Right-shift and assign</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>variable</FONT></I> &gt;&gt;&gt;= <I>value</I></TT>
</TD><TD WIDTH=221>Zero-fill right-shift and assign</TD></TR>
</TABLE>
</CENTER>
<P>
<H2><A NAME="OperatorsBR"><FONT SIZE=5 COLOR=#FF0000>
Operators<BR>
</FONT></A></H2>

<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=70%>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>arg</FONT></I> + <I>arg</I></TT>
</TD><TD WIDTH=221>Addition</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>arg</FONT></I> - <I>arg</I></TT>
</TD><TD WIDTH=221>Subtraction</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>arg</FONT></I> * <I>arg</I></TT>
</TD><TD WIDTH=221>Multiplication</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>arg</FONT></I> /<I> arg</I></TT>
</TD><TD WIDTH=221>Division</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>arg</FONT></I> % <I>arg</I></TT>
</TD><TD WIDTH=221>Modulus</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>arg</FONT></I> &lt; <I>arg</I></TT>
</TD><TD WIDTH=221>Less than</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>arg</FONT></I> &gt; <I>arg</I></TT>
</TD><TD WIDTH=221>Greater than</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>arg</FONT></I> &lt;= <I>arg</I></TT>
</TD><TD WIDTH=221>Less than or equal to</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>arg</FONT></I> &gt;= <I>arg</I></TT>
</TD><TD WIDTH=221>Greater than or equal to</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>arg</FONT></I> == <I>arg</I></TT>
</TD><TD WIDTH=221>Equal</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>arg </FONT></I>!= <I>arg</I></TT>
</TD><TD WIDTH=221>Not equal</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>arg</FONT></I> &amp;&amp; <I>arg</I></TT>
</TD><TD WIDTH=221>Logical AND</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>arg</FONT></I> || <I>arg</I></TT>
</TD><TD WIDTH=221>Logical OR</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT>! <I>arg</I></TT>
</TD><TD WIDTH=221>Logical NOT</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>arg</FONT></I> &amp; <I>arg</I></TT>
</TD><TD WIDTH=221>AND</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>arg</FONT></I> | <I>arg</I></TT>
</TD><TD WIDTH=221>OR</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>arg</FONT></I> ^ <I>arg</I></TT>
</TD><TD WIDTH=221>XOR</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>arg</FONT></I> &lt;&lt; <I>arg</I></TT>
</TD><TD WIDTH=221>Left-shift</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>arg</FONT></I> &gt;&gt; <I>arg</I></TT>
</TD><TD WIDTH=221>Right-shift</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>arg</FONT></I> &gt;&gt;&gt; <I>arg</I></TT>
</TD><TD WIDTH=221>Zero-fill right-shift</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT>~ <I>arg</I></TT>
</TD><TD WIDTH=221>Complement</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT>(<I>type</I>)<I>thing</I></TT>
</TD><TD WIDTH=221>Casting</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>arg</FONT></I> instanceof <I>class</I></TT>
</TD><TD WIDTH=221>Instance of</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT><I>test</FONT></I> ? <I>trueOp</I> : <I>falseOp</I></TT>
</TD><TD WIDTH=221>Ternary (if) operator</TD></TR>
</TABLE>
</CENTER>
<P>
<H2><A NAME="ObjectsBR"><FONT SIZE=5 COLOR=#FF0000>
Objects<BR>
</FONT></A></H2>

<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=70%>
<TR VALIGN=TOP><TD WIDTH=295><TT>new <I>class</I>()</TT>
</TD><TD WIDTH=288>Creates new instance</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT>new <I>class</I>(<I>arg</I>,<I>arg</I>,<I>arg</I>...)</TT>
</TD><TD WIDTH=288>New instance with parameters</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><I>object</FONT></I>.<I>variable</I></TT>
</TD><TD WIDTH=288>Instance variable</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><I>object</FONT></I>.<I>classvar</I></TT>
</TD><TD WIDTH=288>Class variable</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><I>Class</FONT></I>.<I>classvar</I></TT>
</TD><TD WIDTH=288>Class variable</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><I>object</FONT></I>.<I>method</I>()</TT>
</TD><TD WIDTH=288>Instance method (no args)</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><I>object</FONT></I>.<I>method</I>(<I>arg</I>,<I>arg</I>,<I>arg</I>...)</TT>
</TD><TD WIDTH=288>Instance method</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><I>object</FONT></I>.<I>classmethod</I>()</TT>
</TD><TD WIDTH=288>Class method (no args)</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><I>object</FONT></I>.<I>classmethod</I>(<I>arg</I>,<I>arg</I>,<I>arg</I>...)</TT>
</TD><TD WIDTH=288>Class method</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><I>Class</FONT></I>.<I>classmethod</I>()</TT>
</TD><TD WIDTH=288>Class method (no args)</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT><I>Class</FONT></I>.<I>classmethod</I>(<I>arg</I>,<I>arg</I>,<I>arg</I>...)</TT>
</TD><TD WIDTH=288>Class method</TD></TR>
</TABLE>
</CENTER>
<P>
<H2><A NAME="ArraysBR"><FONT SIZE=5 COLOR=#FF0000>
Arrays<BR>
</FONT></A></H2>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
The brackets in this section are parts of the array creation or access statements. They do not denote optional parts as they do in other parts of this appendix.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>

<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=70%>
<TR VALIGN=TOP><TD WIDTH=221><TT>Type varname[]</TT>
</TD><TD WIDTH=221>Array variable</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT>type[] varname</TT>
</TD><TD WIDTH=221>Array variable</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT>new type[numElements]</TT>
</TD><TD WIDTH=221>New array object</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT>array[index]</TT>
</TD><TD WIDTH=221>Element access</TD></TR>
<TR VALIGN=TOP><TD WIDTH=221><TT>array.length</TT>
</TD><TD WIDTH=221>Length of array</TD></TR>
</TABLE>
</CENTER>
<P>
<H2><A NAME="LoopsandConditionalsBR"><FONT SIZE=5 COLOR=#FF0000>
Loops and Conditionals<BR>
</FONT></A></H2>
<CENTER>
<TABLE BORDER=1 WIDTH=70%>
<TR VALIGN=TOP><TD WIDTH=70%><TT>if ( test) block</TT>
</TD><TD WIDTH=30%>Conditional</TD></TR>
<TR VALIGN=TOP><TD WIDTH=70%><TT>if ( test ) block else block </TT>
</TD><TD WIDTH=30%>Conditional with else</TD></TR>
<TR VALIGN=TOP><TD WIDTH=70%>switch (test) {
<br>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;case value : statements</TT>
<br>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;case value : statements</TT>
<br>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;...</TT>
<br>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;default : statement<BR>
}</TT>
</TD><TD WIDTH=30%>switch (only with integer or char types)</TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=70%><TT>for (initializer; test; change ) block</TT>
</TD><TD WIDTH=30%>for loop</TD></TR>
<TR VALIGN=TOP><TD WIDTH=70%><TT>while ( test ) block</TT>
</TD><TD WIDTH=30%>while loop</TD></TR>
<TR VALIGN=TOP><TD WIDTH=70%><TT>do block</TT>
<P>
<TT>while (test)</TT>
</TD><TD WIDTH=30%>do loop</TD></TR>
<TR VALIGN=TOP><TD WIDTH=70%><TT>break [ label ]</TT>
</TD><TD WIDTH=30%>break from loop or switch</TD></TR>
<TR VALIGN=TOP><TD WIDTH=70%><TT>continue [ label ]</TT>
</TD><TD WIDTH=30%>continue loop</TD></TR>
<TR VALIGN=TOP><TD WIDTH=70%><TT>label:</TT>
</TD><TD WIDTH=30%>Labeled loop</TD></TR>
</TABLE>
</CENTER>
<P>
<H2><A NAME="ClassDefinitionsBR"><FONT SIZE=5 COLOR=#FF0000>
Class Definitions<BR>
</FONT></A></H2>
<CENTER>
<TABLE BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=301><TT>class classname block</TT>
</TD><TD WIDTH=288>Simple class definition</TD></TR>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=589>Any of the following optional modifiers can be added to the class definition:
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=301><TT>[ final ] class classname block</TT>
</TD><TD WIDTH=288>Cannot be subclassed</TD></TR>
<TR VALIGN=TOP><TD WIDTH=301><TT>[ abstract ] class classname block</TT>
</TD><TD WIDTH=288>Cannot be instantiated</TD></TR>
<TR VALIGN=TOP><TD WIDTH=301><TT>[ public ] class classname block</TT>
</TD><TD WIDTH=288>Accessible outside package</TD></TR>
<TR VALIGN=TOP><TD WIDTH=301><TT>class classname [ extends Superclass ] block</TT>
</TD><TD WIDTH=288>Define superclass</TD></TR>
<TR VALIGN=TOP><TD WIDTH=301><TT>class classname [ implements interfaces ] block</TT>
</TD><TD WIDTH=288>Implement one or more  interfaces</TD></TR>
</TABLE>
</CENTER>
<P>
<H2><A NAME="MethodandConstructorDefinitions"><FONT SIZE=5 COLOR=#FF0000>
Method and Constructor Definitions</FONT></A></H2>
<P>
The basic method looks like this, where <TT><I>returnType</I></TT>
is a type name, a class name, or <TT>void</TT>.
<BR>
<CENTER>
<TABLE BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=475><TT><I>ReturnType methodName</FONT></I>() <I>block</I></TT> 
</TD><TD WIDTH=150>Basic method</TD></TR>
<TR VALIGN=TOP><TD WIDTH=475><TT><I>returnType methodName</FONT></I>(<I>parameter</I>, <I>parameter</I>, ...) <I>block</I></TT>   
</TD><TD WIDTH=150>Method with parameters</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
Method parameters look like this:<BR>
<CENTER>
<TABLE BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><TT><I>type parameterName</I></TT>
</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
Method variations can include any of the following optional keywords:
<BR>
<CENTER>
<TABLE BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=475><TT>[ abstract ] <I>returnType methodName</I>() <I>block</I></TT>
</TD><TD WIDTH=150>Abstract method</TD></TR>
<TR VALIGN=TOP><TD WIDTH=475><TT>[ static ] <I>returnType methodName</I>() <I>block</I></TT>
</TD><TD WIDTH=150>Class method</TD></TR>
<TR VALIGN=TOP><TD WIDTH=475><TT>[ native ] <I>returnType methodName</I>() <I>block</I></TT>
</TD><TD WIDTH=150>Native method</TD></TR>
<TR VALIGN=TOP><TD WIDTH=475><TT>[ final ] <I>returnType methodName</I>() <I>block</I></TT>
</TD><TD WIDTH=150><TT>final method</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=475><TT>[ synchronized ] <I>returnType methodName</I>() <I>block</I></TT>
</TD><TD WIDTH=150>Thread lock before executing</TD></TR>
<TR VALIGN=TOP><TD WIDTH=475><TT>[ public | private | protected ] <I>returnType</I> <I>methodName</I>()  </TT>
</TD><TD WIDTH=150>Access control</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
Constructors look like this:<BR>
<CENTER>
<TABLE BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=475><TT><I>classname</FONT></I>() <I>block</I></TT>
</TD><TD WIDTH=150>Basic constructor</TD></TR>
<TR VALIGN=TOP><TD WIDTH=475><TT><I>classname</FONT></I>(<I>parameter</I>, <I>parameter</I>, <I>parameter</I>...) <I>block</I></TT>
</TD><TD WIDTH=150>Constructor with parameters</TD></TR>
<TR VALIGN=TOP><TD WIDTH=475><TT>[ public | private | protected] <I>classname</I>()<I> block</I></TT>
</TD><TD WIDTH=150>Access control</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
In the method/constructor body you can use these references and
methods:<BR>
<CENTER>
<TABLE BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=295><TT>this</TT></TD>
<TD WIDTH=288>Refers to current object</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT>super</TT></TD>
<TD WIDTH=288>Refers to superclass</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT>super.<I>methodName</I>()</TT>
</TD><TD WIDTH=288>Calls a superclass's method</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT>this(...)</TT>
</TD><TD WIDTH=288>Calls class's constructor</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT>super(...)</TT>
</TD><TD WIDTH=288>Calls superclass's constructor</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT>return [ <I>value</I> ]</TT>
</TD><TD WIDTH=288>Returns a value</TD></TR>
</TABLE>
</CENTER>
<P>
<H2><A NAME="PackagesInterfacesandImporting"><FONT SIZE=5 COLOR=#FF0000>
Packages, Interfaces, and Importing</FONT></A></H2>
<CENTER>
<TABLE BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=295><TT>import <I>package</I>.<I>className</I></TT>
</TD><TD WIDTH=295>Imports specific class name</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT>import <I>package</I>.*</TT>
</TD><TD WIDTH=295>Imports all public classes in package</TD>
</TR>
</TABLE>
</CENTER>
<P>
<CENTER>
<TABLE BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=295><TT>package<I> packagename</I></TT>
</TD><TD WIDTH=295>Classes in this file belong to this package
</TD></TR>
</TABLE>
</CENTER>
<P>

<CENTER>
<TABLE BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=590><TT>interface <I>interfaceName</I> [ extends <I>anotherInterface</I> ] <I>block</I></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=590><TT>[ public ] interface <I>interfaceName</I> <I>block</I></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=590><TT>[ abstract ] interface <I>interfaceName</I> <I>block</I></TT>
</TD></TR>
</TABLE>
</CENTER>
<P>
<H2><A NAME="ExceptionsandGuardingBR"><FONT SIZE=5 COLOR=#FF0000>
Exceptions and Guarding<BR>
</FONT></A></H2>

<CENTER>
<TABLE BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=295><TT>synchronized ( <I>object</I> ) <I>block</I></TT>
</TD><TD WIDTH=295>Waits for lock on <I>object</I></TD></TR>
</TABLE>
</CENTER>
<P>

<CENTER>
<TABLE BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=295><TT>try <I>block</I></TT>
</TD><TD WIDTH=295>Guarded statements</TD></TR>
<TR VALIGN=TOP><TD WIDTH=295><TT>catch ( <I>exception</I> ) <I>block</I></TT>
</TD><TD WIDTH=295>Executed if <I>exception</I> is thrown</TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=295><TT>[ finally <I>block</I> ]</TT>
</TD><TD WIDTH=295>Cleanup code</TD></TR>
</TABLE>
</CENTER>
<P>

<CENTER>
<TABLE BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=295><TT>try <I>block<BR>
</I>[ catch ( <I>exception</I> ) <I>block</I> ]<BR>
finally <I>block</I></TT>
</TD><TD WIDTH=295>Same as previous example (can use optional catch or finally, or both)
</TD></TR>
</TABLE>
</CENTER>
<HR>

<CENTER><P><A HREF="ch28.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch30.htm"><IMG SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
