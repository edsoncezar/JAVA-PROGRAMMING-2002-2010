<HTML>
<HEAD>
<TITLE>appendix G -- java.awt.image Package Reference</TITLE>

<META>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT SIZE=6 COLOR=#FF0000>appendix&nbsp;G</FONT></H1>
<H1><FONT COLOR=#FF0000><TT>java.awt.image</TT></FONT><FONT SIZE=6 COLOR=#FF0000>
Package Reference</FONT></H1>
<HR>
<P>
<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>
<UL>
<LI><A HREF="#TTFONTSIZEFACECourierImageConsumerFONTTT">
<TT>ImageConsumer</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierImageObserverFONTTT">
<TT>ImageObserver</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierImageProducerFONTTT">
<TT>ImageProducer</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierColorModelFONTTT">
<TT>ColorModel</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierCropImageFilterFONTTT">
<TT>CropImageFilter</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierDirectColorModelFONTTT">
<TT>DirectColorModel</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierFilteredImageSourceFONTTT">
<TT>FilteredImageSource</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierImageFilterFONTTT">
<TT>ImageFilter</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierIndexColorModelFONTTT">
<TT>IndexColorModel</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierMemoryImageSourceFONTTT">
<TT>MemoryImageSource</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierPixelGrabberFONTTT">
<TT>PixelGrabber</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierRGBImageFilterFONTTT">
<TT>RGBImageFilter</TT>
</A>
</UL>

<HR>
<P>
While nearly all of the <TT>java.awt</TT>
package consists of graphical user interface components to be
used for screen layout, the <TT>java.awt.image</TT>
package contains classes that provide functionality for various
image transformations and operations.
<H2><A NAME="TTFONTSIZEFACECourierImageConsumerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>ImageConsumer</TT>
</FONT></A></H2>
<P>
The <TT>ImageConsumer</TT> interface
is implemented by objects interested in acquiring data provided
by the <TT>ImageProducer</TT> interface.
<H4>Member Variables</H4>
<BLOCKQUOTE>
<PRE>
int RANDOMPIXELORDER
</PRE>
</BLOCKQUOTE>
<P>
The pixels will be delivered in a random order.
<BLOCKQUOTE>
<PRE>
int TOPDOWNLEFTRIGHT
</PRE>
</BLOCKQUOTE>
<P>
The pixels will be delivered in top-down, left-right order.
<BLOCKQUOTE>
<PRE>
int COMPLETESCANLINES
</PRE>
</BLOCKQUOTE>
<P>
The pixels will be delivered in complete scan lines.
<BLOCKQUOTE>
<PRE>
int SINGLEPASS
</PRE>
</BLOCKQUOTE>
<P>
The pixels will be delivered in a single pass.
<BLOCKQUOTE>
<PRE>
int SINGLEFRAME
</PRE>
</BLOCKQUOTE>
<P>
The pixels will be delivered in a single frame.
<BLOCKQUOTE>
<PRE>
int IMAGEERROR
</PRE>
</BLOCKQUOTE>
<P>
An error occurred during image processing.
<BLOCKQUOTE>
<PRE>
int SINGLEFRAMEDONE
</PRE>
</BLOCKQUOTE>
<P>
A single frame is complete, but the overall operation has not
been completed.
<BLOCKQUOTE>
<PRE>
int STATICIMAGEDONE
</PRE>
</BLOCKQUOTE>
<P>
The image construction is complete.
<BLOCKQUOTE>
<PRE>
int IMAGEABORTED
</PRE>
</BLOCKQUOTE>
<P>
The image creation was aborted.
<H4><TT>setDimensions</TT></H4>
<BLOCKQUOTE>
<TT>void setDimensions(int width, int height)
<BR>
</TT>The <TT>setDimensions</TT>
method is used to report the dimensions of the source image to
the image consumer.<BR>
<I><B>Parameters: <BR>
</B></I><TT>width</TT>-the width of
the source image.<BR>
<TT>height</TT>-the height of the
source image.
</BLOCKQUOTE>
<H4><TT>setProperties</TT></H4>
<BLOCKQUOTE>
<TT>void setProperties(Hashtable props)<BR>
</TT>The <TT>setProperties</TT>
method is used to report the properties of the source image to
the image consumer.<BR>
<I><B>Parameters: </B></I><TT>props</TT>-a
<TT>Hashtable</TT> object containing
the image properties.
</BLOCKQUOTE>
<H4><TT>setColorModel</TT></H4>
<BLOCKQUOTE>
<TT>void setColorModel(ColorModel model)
<BR>
</TT>The <TT>setColorModel</TT>
method is used to report the color model of the source image to
the image consumer.<BR>
<I><B>Parameters: </B></I><TT>model</TT>-the
color model used by the source image.
</BLOCKQUOTE>
<H4><TT>setHints</TT></H4>
<BLOCKQUOTE>
<TT>void setHints(int hintflags)<BR>
</TT>The <TT>setHints</TT>
method is used to report hints to the image consumer.<BR>
<I><B>Parameters: </B></I><TT>hintflags</TT>-an
integer value containing hints about the manner in which the pixels
will be delivered.
</BLOCKQUOTE>
<H4><TT>setPixels</TT></H4>
<BLOCKQUOTE>
void setPixels(int x, int y, int w, int h, ColorModel model, byte
pixels[],<BR>
  int off, int scansize)<BR>
The setPixels method is used to deliver the pixels to the ImageConsumer.
Note: Pixel (x,y) is stored in the pixels array at index (y *
scansize + x + off).<BR>
<I><B>Parameters:</B></I> <BR>
x-the x coordinate.<BR>
y-the y coordinate.<BR>
w-the width of the image.<BR>
h-the height of the image.<BR>
model-the color model used.<BR>
pixels-an array of bytes containing pixel information.<BR>
off-the offset value.<BR>
scansize-the scansize value.
</BLOCKQUOTE>
<H4><TT>setPixels</TT></H4>
<BLOCKQUOTE>
void setPixels(int x, int y, int w, int h, ColorModel model, 
<BR>
int pixels[],  int off, int scansize)<BR>
The setPixels method is used to deliver the pixels to the ImageConsumer.
Note: Pixel (x,y) is stored in the pixels array at index (y *
scansize + x + off).<BR>
<I><B>Parameters:</B></I> <BR>
x-the x coordinate.<BR>
y-the y coordinate.<BR>
w-the width of the image.<BR>
h-the height of the image.<BR>
model-the color model used.<BR>
pixels-an array of integers containing pixel information.<BR>
off-the offset value.<BR>
scansize-the scansize value.
</BLOCKQUOTE>
<H4><TT>imageComplete</TT></H4>
<BLOCKQUOTE>
<TT>void imageComplete(int status)<BR>
</TT>The <TT>imageComplete</TT>
method is called when the image producer is finished delivering
an image frame. The image consumer should remove itself from the
image producer's list at this time.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierImageObserverFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>ImageObserver</TT>
</FONT></A></H2>
<P>
The <TT>ImageObserver</TT> interface
is an asynchronous update interface used to receive information
on the status of image construction.
<H4>Member Constants</H4>
<BLOCKQUOTE>
<PRE>
public static final int WIDTH
</PRE>
</BLOCKQUOTE>
<P>
The width of the base image is now available.
<BLOCKQUOTE>
<PRE>
public static final int HEIGHT
</PRE>
</BLOCKQUOTE>
<P>
The height of the base image is now available.
<BLOCKQUOTE>
<PRE>
public static final int PROPERTIES
</PRE>
</BLOCKQUOTE>
<P>
The properties of the base image are now available.
<BLOCKQUOTE>
<PRE>
public static final int SOMEBITS
</PRE>
</BLOCKQUOTE>
<P>
Some bits of the image for drawing are now available.
<BLOCKQUOTE>
<PRE>
public static final int FRAMEBITS
</PRE>
</BLOCKQUOTE>
<P>
Another complete frame of a multiframe image is now available.
<BLOCKQUOTE>
<PRE>
public static final int ALLBITS
</PRE>
</BLOCKQUOTE>
<P>
A static image that was previously drawn is now complete and can
be drawn again.
<BLOCKQUOTE>
<PRE>
public static final int ERROR
</PRE>
</BLOCKQUOTE>
<P>
An image that was being tracked asynchronously has encountered
an error.
<BLOCKQUOTE>
<PRE>
public static final int ABORT
</PRE>
</BLOCKQUOTE>
<P>
An image that was being tracked was aborted before production
was completed.
<H4><TT>imageUpdate</TT></H4>
<BLOCKQUOTE>
<TT>public boolean imageUpdate(Image img,
int infoflags, int x, <BR>
int y, int width,  int height)<BR>
</TT>The <TT>imageUpdate</TT>
method is called every time image information becomes available.
The recipients of the update messages are <TT>ImageObserver</TT>
objects that have requested information about an image using asynchronous
interfaces.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>img</TT>-the image of interest.
<BR>
<TT>infoflags</TT>-status flags indicating
the progress of the image process.<BR>
<TT>x</TT>-the x coordinate that applies
(if necessary).<BR>
<TT>y</TT>-the y coordinate that applies
(if necessary).<BR>
<TT>width</TT>-the width of the image
(if necessary).<BR>
<TT>height</TT>-the height of the
image (if necessary).
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierImageProducerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>ImageProducer</TT>
</FONT></A></H2>
<P>
The <TT>ImageProducer</TT> interface
is implemented by objects that produce images. Each image contains
an image producer.
<H4><TT>addConsumer</TT></H4>
<BLOCKQUOTE>
<TT>public void addConsumer(ImageConsumer
ic)<BR>
</TT>The <TT>addConsumer</TT>
method adds the image consumer to a list to receive image data
during reconstruction of the image.<BR>
<I><B>Parameters: </B></I><TT>ic</TT>-an
<TT>ImageConsumer</TT>-derived object.
</BLOCKQUOTE>
<H4><TT>isConsumer</TT></H4>
<BLOCKQUOTE>
<TT>public boolean isConsumer(ImageConsumer
ic)<BR>
</TT>The <TT>isConsumer</TT>
method determines whether the specified image consumer is currently
on the image producer's list of recipients.<BR>
<I><B>Parameters: </B></I><TT>ic</TT>-an
<TT>ImageConsumer</TT>-derived object
<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the image consumer is registered, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>removeConsumer</TT></H4>
<BLOCKQUOTE>
<TT>public void removeConsumer(ImageConsumer
ic)<BR>
</TT>The <TT>removeConsumer</TT>
method removes the specified image consumer from the internal
list.<BR>
<I><B>Parameters: </B></I><TT>ic</TT>-an
<TT>ImageConsumer</TT>-derived object.
</BLOCKQUOTE>
<H4><TT>startProduction</TT></H4>
<BLOCKQUOTE>
<TT>public void startProduction(ImageConsumer
ic)<BR>
</TT>The <TT>startProduction</TT>
method adds the specified image consumer to the list of image
data recipients and immediately begins production of the image
data.<BR>
<I><B>Parameters: </B></I><TT>ic</TT>-an
<TT>ImageConsumer</TT>-derived object.
</BLOCKQUOTE>
<H4><TT>requestTopDownLeftRightResend</TT>
</H4>
<BLOCKQUOTE>
<TT>public void requestTopDownLeftRightResend(ImageConsumer
ic)<BR>
</TT>The <TT>requestTopDownLeftRightResend</TT>
method is used to deliver the image data to the specified image
consumer in top-down, left-right order.<BR>
<I><B>Parameters: </B></I><TT>ic</TT>-an
<TT>ImageConsumer</TT>-derived object.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierColorModelFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>ColorModel</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT>The <TT>ColorModel</TT>
class is an abstract class that provides functions for translating
pixel values into RGB color values.
</BLOCKQUOTE>
<H4><TT>ColorModel</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public ColorModel(int bits)<BR>
</TT>The <TT>ColorModel</TT>
constructor constructs a color model that describes a pixel of
the specified number of bits.<BR>
<I><B>Parameters: </B></I><TT>bits</TT>-an
integer value containing the number of bits that will describe
a pixel using this color model.
</BLOCKQUOTE>
<H4><TT>getRGBdefault</TT></H4>
<BLOCKQUOTE>
<TT>public static ColorModel getRGBdefault()
<BR>
</TT>The <TT>getRGBdefault</TT>
method returns the default color model that is used throughout
all awt image interfaces. This default color model uses a pixel
format that encapsulates alpha, red, green, and blue color values
(8 bits each) using the following methodology: <TT>0xAARRGGBB</TT>.
<BR>
<I><B>Returns: </B></I>A <TT>ColorModel</TT>
object representing the default color model for all awt image
interfaces.
</BLOCKQUOTE>
<H4><TT>getPixelSize</TT></H4>
<BLOCKQUOTE>
<TT>public int getPixelSize()<BR>
</TT>The <TT>getPixelSize</TT>
method returns the size of the color model's pixel.<BR>
<I><B>Returns: </B></I>An integer value representing the number
of bits that make up a pixel in this color model.
</BLOCKQUOTE>
<H4><TT>getRed</TT></H4>
<BLOCKQUOTE>
<TT>public abstract int getRed(int pixel)
<BR>
</TT>The <TT>getRed</TT> method
returns the red component of the specified pixel.<BR>
<I><B>Parameters: </B></I><TT>pixel</TT>-an
integer containing the pixel representation for this color model.
<BR>
<I><B>Returns: </B></I>An integer value representing the red component
of the pixel.
</BLOCKQUOTE>
<H4><TT>getGreen</TT></H4>
<BLOCKQUOTE>
<TT>public abstract int getGreen(int pixel)
<BR>
</TT>The <TT>getGreen</TT>
method returns the green component of the specified pixel.<BR>
<I><B>Parameters: </B></I><TT>pixel</TT>-an
integer containing the pixel representation for this color model.
<BR>
<I><B>Returns: </B></I>An integer value representing the green
component of the pixel.
</BLOCKQUOTE>
<H4><TT>getBlue</TT></H4>
<BLOCKQUOTE>
<TT>public abstract int getBlue(int pixel)
<BR>
</TT>The <TT>getBlue</TT> method
returns the blue component of the specified pixel.<BR>
<I><B>Parameters: </B></I><TT>pixel</TT>-an
integer containing the pixel representation for this color model.
<BR>
<I><B>Returns: </B></I>An integer value representing the blue
component of the pixel.
</BLOCKQUOTE>
<H4><TT>getAlpha</TT></H4>
<BLOCKQUOTE>
<TT>public abstract int getAlpha(int pixel)
<BR>
</TT>The <TT>getAlpha</TT>
method returns the alpha component of the specified pixel.<BR>
<I><B>Parameters: </B></I><TT>pixel</TT>-an
integer containing the pixel representation for this color model.
<BR>
<I><B>Returns: </B></I>An integer value representing the alpha
component of the pixel.
</BLOCKQUOTE>
<H4><TT>getRGB</TT></H4>
<BLOCKQUOTE>
<TT>public int getRGB(int pixel)<BR>
</TT>The <TT>getRGB</TT> method
returns the RGB value of the pixel using the default color model.
<BR>
<I><B>Parameters: </B></I><TT>pixel</TT>-an
integer containing the pixel representation for this color model.
<BR>
<I><B>Returns: </B></I>An integer value representing the RGB value
of the pixel using the default color model.
</BLOCKQUOTE>
<H4><TT>finalize</TT></H4>
<BLOCKQUOTE>
<TT>public void finalize()<BR>
</TT>The <TT>finalize</TT>
method is used to clean up internal data allocated by the <TT>ColorModel</TT>.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierCropImageFilterFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>CropImageFilter</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>ImageFilter</TT>
<BR>
The <TT>CropImageFilter</TT> class
provides the capability to extract a rectangular subset of a given
image (that is, crop it). This class is used in conjunction with
a <TT>FilteredImageSource</TT> class
to provide a source for the cropped image.
</BLOCKQUOTE>
<H4><TT>CropImageFilter</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public CropImageFilter(int x, int y,
int w, int h)<BR>
</TT>The <TT>CropImageFilter</TT>
constructor constructs a <TT>CropImageFilter</TT>
to crop an image using the specified parameters.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate of the
image to be cropped.<BR>
<TT>y</TT>-the y coordinate of the
image to be cropped.<BR>
<TT>w</TT>-the width of the image
to be cropped.<BR>
<TT>h</TT>-the height of the image
to be cropped.
</BLOCKQUOTE>
<H4><TT>setProperties</TT></H4>
<BLOCKQUOTE>
<TT>public void setProperties(Hashtable props)
<BR>
</TT>The <TT>setProperties</TT>
method takes the <TT>props</TT> parameter
from a source object and adds the <TT>croprect</TT>
property to it to identify the region being cropped.<BR>
<I><B>Parameters: </B></I><TT>props</TT>-a
<TT>Hashtable</TT> object containing
properties from the source object.
</BLOCKQUOTE>
<H4><TT>setDimensions</TT></H4>
<BLOCKQUOTE>
<TT>public void setDimensions(int w, int
h)<BR>
</TT>The <TT>setDimensions</TT>
method overrides the source's dimensions and passes the dimensions
of the cropped region to the <TT>ImageConsumer</TT>
interface.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>w</TT>-the width value.<BR>
<TT>h</TT>-the height value.
</BLOCKQUOTE>
<H4><TT>setPixels</TT></H4>
<BLOCKQUOTE>
public void setPixels(int x, int y, int w, int h, ColorModel 
<BR>
model,  int pixels[], int off, int scansize)<BR>
The setPixels method filters the pixels array by determining which
pixels lie in the cropped region. Those that do are passed on
to the Consumer interface.<BR>
<I><B>Parameters:<BR>
</B></I>x-the x coordinate of the image.<BR>
y-the y coordinate of the image.<BR>
w-the width of the image.<BR>
h-the height of the image.<BR>
model-the color model to which the pixels array conforms.<BR>
pixels-an array of integers containing pixels to be examined.
<BR>
off-a variable that is passed on to the image consumer class's
setPixels method.<BR>
scansize-an integer value representing the scansize of the operation.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierDirectColorModelFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>DirectColorModel</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>ColorModel<BR>
</TT>The DirectColorModel class specifies translations
from pixel values to RGB color values for pixels that have the
colors embedded directly in the pixel bits.
</BLOCKQUOTE>
<H4><TT>DirectColorModel</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public DirectColorModel(int bits, int
rmask, int gmask, int bmask)<BR>
</TT>The <TT>DirectColorModel</TT>
constructor constructs a direct color model using the specified
parameters. <TT>DirectColorModel</TT>s
built using this constructor have a default alphamask value of
255.<BR>
<I><B>Parameters: <BR>
</B></I><TT>bits</TT>-the number of
bits used to represent a pixel.<BR>
<TT>rmask</TT>-the number of bits
required to represent the red component.<BR>
<TT>gmask</TT>-the number of bits
required to represent the green component.<BR>
<TT>bmask</TT>-the number of bits
required to represent the blue component.
</BLOCKQUOTE>
<H4><TT>DirectColorModel</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public DirectColorModel(int bits, int
rmask, int gmask, int <BR>
bmask, int amask)<BR>
</TT>The <TT>DirectColorModel</TT>
constructor constructs a direct color model using the specified
parameters.<BR>
<I><B>Parameters: <BR>
</B></I><TT>bits</TT>-the number of
bits used to represent a pixel.<BR>
<TT>rmask</TT>-the number of bits
required to represent the red component.<BR>
<TT>gmask</TT>-the number of bits
required to represent the green component.<BR>
<TT>bmask</TT>-the number of bits
required to represent the blue component.<BR>
<TT>amask</TT>-the number of bits
required to represent the alpha component. 
</BLOCKQUOTE>
<H4><TT>getRedMask</TT></H4>
<BLOCKQUOTE>
<TT>final public int getRedMask()<BR>
</TT>The <TT>getRedMask</TT>
method returns the current red mask value.<BR>
<I><B>Returns: </B></I>An integer value representing the red mask
value.
</BLOCKQUOTE>
<H4><TT>getGreenMask</TT></H4>
<BLOCKQUOTE>
<TT>final public int getGreenMask()<BR>
</TT>The <TT>getGreenMask</TT>
method returns the current green mask value.<BR>
<I><B>Returns: </B></I>An integer value representing the green
mask value.
</BLOCKQUOTE>
<H4><TT>getBlueMask</TT></H4>
<BLOCKQUOTE>
<TT>final public int getBlueMask()<BR>
</TT>The <TT>getBlueMask</TT>
method returns the current blue mask value.<BR>
<I><B>Returns: </B></I>An integer value representing the blue
mask value.
</BLOCKQUOTE>
<H4><TT>getAlphaMask</TT></H4>
<BLOCKQUOTE>
<TT>final public int getAlphaMask()<BR>
</TT>The <TT>getAlphaMask</TT>
method returns the current alpha mask value.<BR>
<I><B>Returns: </B></I>An integer value representing the alpha
mask value.
</BLOCKQUOTE>
<H4><TT>getRed</TT></H4>
<BLOCKQUOTE>
<TT>final public int getRed(int pixel)<BR>
</TT>The <TT>getRed</TT> method
returns the red component for the specified pixel in the range
0-255.<BR>
<I><B>Parameters: </B></I><TT>pixel</TT>-an
integer value representing a pixel under the direct color model.
<BR>
<I><B>Returns: </B></I>An integer value representing the red component
of the pixel.
</BLOCKQUOTE>
<H4><TT>getGreen</TT></H4>
<BLOCKQUOTE>
<TT>final public int getGreen(int pixel)
<BR>
</TT>The <TT>getGreen</TT>
method returns the green component for the specified pixel in
the range 0-255.<BR>
<I><B>Parameters: </B></I><TT>pixel</TT>-an
integer value representing a pixel under the direct color model.
<BR>
<I><B>Returns: </B></I>An integer value representing the green
component of the pixel.
</BLOCKQUOTE>
<H4><TT>getBlue</TT></H4>
<BLOCKQUOTE>
<TT>final public int getBlue(int pixel)<BR>
</TT>The <TT>getBlue</TT> method
returns the blue component for the specified pixel in the range
0-255.<BR>
<I><B>Parameters: </B></I><TT>pixel</TT>-an
integer value representing a pixel under the direct color model.
<BR>
<I><B>Returns: </B></I>An integer value representing the blue
component of the pixel.
</BLOCKQUOTE>
<H4><TT>getAlpha</TT></H4>
<BLOCKQUOTE>
<TT>final public int getAlpha(int pixel)
<BR>
</TT>The <TT>getAlpha</TT>
method returns the alpha component for the specified pixel in
the range 0-255.<BR>
<I><B>Parameters: </B></I><TT>pixel</TT>-an
integer value representing a pixel under the direct color model.
<BR>
<I><B>Returns: </B></I>An integer value representing the alpha
component of the pixel.
</BLOCKQUOTE>
<H4><TT>getRGB</TT></H4>
<BLOCKQUOTE>
<TT>final public int getRGB(int pixel)<BR>
</TT>The <TT>getRGB</TT> method
returns the RGB color value for the specified pixel in the range
0-255.<BR>
<I><B>Parameters: </B></I><TT>pixel</TT>-an
integer value representing a pixel under the direct color model.
<BR>
<I><B>Returns: </B></I>An integer value representing the RGB color
value of the pixel using the default RGB color model.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierFilteredImageSourceFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>FilteredImageSource</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT><I><B>Implements: </B></I><TT>ImageProducer
<BR>
FilteredImageSource</TT> takes as input an existing image
and a filter object. It applies the filter to the image to produce
a new version of the original image. The <TT>FilteredImageSource</TT>
class implements the <TT>ImageProducer</TT>
interface.
</BLOCKQUOTE>
<H4><TT>FilteredImageSource</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public FilteredImageSource(ImageProducer
orig, ImageFilter imgf)<BR>
</TT>The <TT>FilteredImageSource</TT>
constructor constructs a <TT>FilteredImageSource</TT>
object that takes a producer source and an image filter to produce
a filtered version of the image.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>orig</TT>-an <TT>ImageProducer</TT>-derived
object that supplies the image source.<BR>
<TT>imgf</TT>-an <TT>ImageFilter</TT>
object that filters the image to produce a new image.
</BLOCKQUOTE>
<H4><TT>addConsumer</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void addConsumer(ImageConsumer
ic)<BR>
</TT>The <TT>addConsumer</TT>
method adds an <TT>ImageConsumer</TT>
interface to a list of consumers interested in image data.<BR>
<I><B>Parameters: </B></I><TT>ic</TT>-an
<TT>ImageConsumer</TT>-derived object
to be added to a list of image consumers.
</BLOCKQUOTE>
<H4><TT>isConsumer</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized boolean isConsumer(ImageConsumer
ic)<BR>
</TT>The <TT>isConsumer</TT>
method determines whether the specified image consumer is currently
on the list of image consumers for the image data.<BR>
<I><B>Parameters: </B></I><TT>ic</TT>-an
image consumer derived object to be used for the check.<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the specified image consumer is on the list, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>removeConsumer</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void removeConsumer(ImageConsumer
ic)<BR>
</TT>The <TT>removeConsumer</TT>
method removes the specified image consumer from the list of image
consumers.<BR>
<I><B>Parameters: </B></I><TT>ic</TT>-the
image consumer to be removed from the list.
</BLOCKQUOTE>
<H4><TT>startProduction</TT></H4>
<BLOCKQUOTE>
<TT>public void startProduction(ImageConsumer
ic)<BR>
</TT>The <TT>startProduction</TT>
method adds the specified image consumer to the list of image
consumers and immediately starts delivery of the image data to
the interface.<BR>
<I><B>Parameters: </B></I><TT>ic</TT>-the
image consumer that will be used to produce new image data.
</BLOCKQUOTE>
<H4><TT>requestTopDownLeftRightResend</TT>
</H4>
<BLOCKQUOTE>
<TT>public void requestTopDownLeftRightResend(ImageConsumer
ic)<BR>
</TT>The <TT>requestTopDownLeftRightResend</TT>
method is used to deliver the image data to the specified image
consumer in top-down, left-right order.<BR>
<I><B>Parameters: </B></I><TT>ic</TT>-the
image consumer that will be the recipient of the image data when
it is present.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierImageFilterFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>ImageFilter</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT><I><B>Implements: </B></I><TT>ImageConsumer</TT>,
<TT>Cloneable</TT> <BR>
The <TT>ImageFilter</TT> class acts
as a base class for all image-filtering classes. It implements
the <TT>ImageConsumer</TT> and <TT>Cloneable</TT>
interfaces.
</BLOCKQUOTE>
<H4><TT>getFilterInstance</TT></H4>
<BLOCKQUOTE>
<TT>public ImageFilter getFilterInstance(ImageConsumer
ic)<BR>
</TT>The <TT>getFilterInstance</TT>
method returns an <TT>ImageFilter</TT>
object that will be used to perform the filtering for the specified
image consumer.<BR>
<I><B>Parameters: </B></I><TT>ic</TT>-the
image consumer that requires the image filtering.<BR>
<I><B>Returns: </B></I>An <TT>ImageFilter</TT>
object to be used to perform the image filtering.
</BLOCKQUOTE>
<H4><TT>setDimensions</TT></H4>
<BLOCKQUOTE>
<TT>public void setDimensions(int width,
int height}<BR>
</TT>The <TT>setDimensions</TT>
method filters the information provided in the <TT>setDimensions</TT>
method of the <TT>ImageConsumer</TT>
interface.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>width</TT>-the filter width.<BR>
<TT>height</TT>-the filter height.
</BLOCKQUOTE>
<H4><TT>setProperties</TT></H4>
<BLOCKQUOTE>
<TT>public void setProperties(Hashtable props)
<BR>
</TT>The <TT>setProperties</TT>
method passes the <TT>props</TT> value
along after a property is added that identifies which filters
have been applied to the image.<BR>
<I><B>Parameters: </B></I><TT>props</TT>-a
<TT>Hashtable</TT> object containing
a set of properties.
</BLOCKQUOTE>
<H4><TT>setColorModel</TT></H4>
<BLOCKQUOTE>
<TT>public void setColorModel(ColorModel
model)<BR>
</TT>The <TT>setColorModel</TT>
method filters the information provided in the <TT>setColorModel</TT>
method of the <TT>ImageConsumer</TT>
interface.<BR>
<I><B>Parameters: </B></I><TT>model</TT>-a
<TT>ColorModel</TT> object.
</BLOCKQUOTE>
<H4><TT>setHints</TT></H4>
<BLOCKQUOTE>
<TT>public void setHints(int hints)<BR>
</TT>The <TT>setHints</TT>
method filters the information provided in the <TT>setHints</TT>
method of the <TT>Image ImageConsumer</TT>
interface.<BR>
<I><B>Parameters: </B></I><TT>hints</TT>-an
integer value containing hints.
</BLOCKQUOTE>
<H4><TT>setPixels</TT></H4>
<BLOCKQUOTE>
public void setPixels(int x, int y, int w, int h, ColorModel 
<BR>
model,  byte pixels[], int off, int scansize)<BR>
The setPixels method filters the pixels array. The pixels that
pass through the filter are passed onto the ImageConsumer interface.
<BR>
<I><B>Parameters:</B></I> <BR>
x-the x coordinate of the image.<BR>
y-the y coordinate of the image.<BR>
w-the width of the image.<BR>
h-the height of the image.<BR>
model-the ColorModel to which the pixels array conforms.<BR>
pixels-a byte array containing pixels to be examined.<BR>
off-a variable that is passed on to the image consumer's setPixels
method.<BR>
scansize-an integer value representing the scansize of the operation.
</BLOCKQUOTE>
<H4><TT>imageComplete</TT></H4>
<BLOCKQUOTE>
<TT>public void imageComplete(int status)
<BR>
</TT>The <TT>imageComplete</TT>
method filters the information provided by the <TT>imageComplete</TT>
method in the <TT>ImageConsumer</TT>
interface.<BR>
<I><B>Parameters: </B></I><TT>status</TT>-an
integer value representing the status of the filter operation
</BLOCKQUOTE>
<H4><TT>resendTopDownLeftRight</TT>
</H4>
<BLOCKQUOTE>
<TT>public void resendTopDownLeftRight(ImageProducer
ip)<BR>
</TT>The <TT>resendTopDownLeftRight</TT>
method is used to deliver the image data to the specified image
consumer in top-down, left-right order.<BR>
<I><B>Parameters: </B></I><TT>ip</TT>-the
image producer that is responsible for production of the image
data.
</BLOCKQUOTE>
<H4><TT>clone</TT></H4>
<BLOCKQUOTE>
<TT>public Object clone()<BR>
</TT>The <TT>clone</TT> method
returns a clone of the image filter.<BR>
<I><B>Returns: </B></I>An object that is identical to the image
filter.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierIndexColorModelFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>IndexColorModel</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>ColorModel<BR>
</TT>This class translates from pixel values to RGB color
values for pixels that represent indexes into a color map.
</BLOCKQUOTE>
<H4><TT>IndexColorModel</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public IndexColorModel(int bits, int
size, byte r[], byte g[], byte b[])<BR>
</TT>The <TT>IndexColorModel</TT>
constructor constructs a color model from the specified information.
<BR>
<I><B>Parameters:</B></I> <BR>
<TT>bits</TT>-the number of bits required
to represent a pixel.<BR>
<TT>size</TT>-the size of the color
arrays.<BR>
<TT>r</TT>-the red color array.<BR>
<TT>g</TT>-the green color array.
<BR>
<TT>b</TT>-the blue color array.
</BLOCKQUOTE>
<H4><TT>IndexColorModel</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public IndexColorModel(int bits, int
size, byte r[], byte g[], byte b[],<BR>
  int trans)<BR>
</TT>The <TT>IndexColorModel</TT>
constructor constructs a color model from the specified information.
<BR>
<I><B>Parameters:</B></I> <BR>
<TT>bits</TT>-the number of bits required
to represent a pixel.<BR>
<TT>size</TT>-the size of the color
arrays.<BR>
<TT>r</TT>-the red color array.<BR>
<TT>g</TT>-the green color array.
<BR>
<TT>b</TT>-the blue color array.<BR>
<TT>trans</TT>-an integer value representing
the index that identifies the transparent pixel.
</BLOCKQUOTE>
<H4><TT>IndexColorModel</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public IndexColorModel(int bits, int
size, byte r[], byte g[], byte b[],<BR>
  byte a[])<BR>
</TT>The <TT>IndexColorModel</TT>
constructor constructs a color model from the specified information.
<BR>
<I><B>Parameters: <BR>
</B></I><TT>bits</TT>-the number of
bits required to represent a pixel.<BR>
<TT>size</TT>-the size of the color
arrays.<BR>
<TT>r</TT>-the red color array.<BR>
<TT>g</TT>-the green color array.
<BR>
<TT>b</TT>-the blue color array.<BR>
<TT>a</TT>-the alpha color array.
</BLOCKQUOTE>
<H4><TT>IndexColorModel</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public IndexColorModel(int bits, int
size, byte cmap[], int start,<BR>
  boolean hasalpha)<BR>
</TT>The <TT>IndexColorModel</TT>
constructor constructs a color model from the specified information.
<BR>
<I><B>Parameters:</B></I> <BR>
<TT>bits</TT>-the number of bits required
to represent a pixel.<BR>
<TT>size</TT>-the size of the color
arrays.<BR>
<TT>cmap</TT>-a byte array representing
the color map array.<BR>
<TT>start</TT>-the index representing
the first color component within the color array.<BR>
<TT>hasalpha</TT>-a boolean value
indicating whether alpha values are contained within the color
map.
</BLOCKQUOTE>
<H4><TT>IndexColorModel</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public IndexColorModel(int bits, int
size, byte cmap[], int start,<BR>
  boolean hasalpha, int trans)<BR>
</TT>The <TT>IndexColorModel</TT>
constructor constructs a color model from the specified information.
<BR>
<I><B>Parameters:</B></I> <BR>
<TT>bits</TT>-the number of bits required
to represent a pixel.<BR>
<TT>size</TT>-the size of the color
arrays.<BR>
<TT>cmap</TT>-a byte array representing
the color map array.<BR>
<TT>start</TT>-the index representing
the first color component within the color array.<BR>
<TT>hasalpha</TT>-a boolean value
indicating whether alpha values are contained within the color
map.<BR>
<TT>trans</TT>-an integer value representing
the index of the transparent pixel.
</BLOCKQUOTE>
<H4><TT>getMapSize</TT></H4>
<BLOCKQUOTE>
<TT>final public int getMapSize()<BR>
</TT>The <TT>getMapSize</TT>
method returns the size of the color map used by the <TT>IndexColorModel</TT>.
<BR>
<I><B>Returns: </B></I>An integer value representing the size
of the color map used by the index color model.
</BLOCKQUOTE>
<H4><TT>getTransparentPixel</TT></H4>
<BLOCKQUOTE>
<TT>final public int getTransparentPixel()
<BR>
</TT>The <TT>getTransparentPixel</TT>
method returns the index into the color map of the transparent
pixel.<BR>
<I><B>Returns: </B></I>An integer value representing the index
into the color map of the transparent pixel. If there is no transparent
pixel, this method returns <TT>-1</TT>.
</BLOCKQUOTE>
<H4><TT>getReds</TT></H4>
<BLOCKQUOTE>
<TT>final public void getReds(byte r[])<BR>
</TT>The <TT>getReds</TT> method
fills the byte array with the red color components.<BR>
<I><B>Parameters: </B></I><TT>r</TT>-a
byte array that is filled by the <TT>getReds</TT>
method with the red color components.
</BLOCKQUOTE>
<H4><TT>getGreens</TT></H4>
<BLOCKQUOTE>
<TT>final public void getGreens(byte g[])
<BR>
</TT>The <TT>getGreens</TT>
method fills the byte array with the green color components.<BR>
<I><B>Parameters: </B></I><TT>g</TT>-a
byte array that is filled by the <TT>getGreens</TT>
method with the green color components.
</BLOCKQUOTE>
<H4><TT>getBlues</TT></H4>
<BLOCKQUOTE>
<TT>final public void getBlues(byte b[])
<BR>
</TT>The <TT>getBlues</TT>
method fills the byte array with the blue color components.<BR>
<I><B>Parameters: </B></I><TT>b</TT>-a
byte array that is filled by the <TT>getBlues</TT>
method with the blue color components.
</BLOCKQUOTE>
<H4><TT>getAlphas</TT></H4>
<BLOCKQUOTE>
<TT>final public void getAlphas(byte a[])
<BR>
</TT>The <TT>getAlphas</TT>
method fills the byte array with the alpha components.<BR>
<I><B>Parameters: </B></I><TT>a</TT>-a
byte array that is filled by the <TT>getAlphas</TT>
method with the alpha components.
</BLOCKQUOTE>
<H4><TT>getRed</TT></H4>
<BLOCKQUOTE>
<TT>final public int getRed(int pixel)<BR>
</TT>The <TT>getRed</TT> method
returns the red color component for the specified pixel using
the index color model.<BR>
<I><B>Parameters: </B></I><TT>pixel</TT>-an
integer value representing a pixel.<BR>
<I><B>Returns: </B></I>An integer value in the range 0-255 representing
the red component for the specified pixel.
</BLOCKQUOTE>
<H4><TT>getGreen</TT></H4>
<BLOCKQUOTE>
<TT>final public int getGreen(int pixel)
<BR>
</TT>The <TT>getGreen</TT>
method returns the green color component for the specified pixel
using the index color model.<BR>
<I><B>Parameters: </B></I><TT>pixel</TT>-an
integer value representing a pixel.<BR>
<I><B>Returns: </B></I>An integer value in the range 0-255 representing
the green component for the specified pixel.
</BLOCKQUOTE>
<H4><TT>getBlue</TT></H4>
<BLOCKQUOTE>
<TT>final public int getBlue(int pixel)<BR>
</TT>The <TT>getBlue</TT> method
returns the blue color component for the specified pixel using
the index color model.<BR>
<I><B>Parameters: </B></I><TT>pixel</TT>-an
integer value representing a pixel.<BR>
<I><B>Returns: </B></I>An integer value in the range 0-255 representing
the blue component for the specified pixel.
</BLOCKQUOTE>
<H4><TT>getAlpha</TT></H4>
<BLOCKQUOTE>
<TT>final public int getAlpha(int pixel)
<BR>
</TT>The <TT>getAlpha</TT>
method returns the alpha color component for the specified pixel
using the index color model.<BR>
<I><B>Parameters: </B></I><TT>pixel</TT>-an
integer value representing a pixel.<BR>
<I><B>Returns: </B></I>An integer value in the range 0-255 representing
the alpha component for the specified pixel.
</BLOCKQUOTE>
<H4><TT>getRGB</TT></H4>
<BLOCKQUOTE>
<TT>final public int getRGB(int pixel)<BR>
</TT>The <TT>getRGB</TT> method
returns the RGB color value for the specified pixel using the
default RGB color model.<BR>
<I><B>Parameters: </B></I><TT>pixel</TT>-an
integer value representing a pixel.<BR>
<I><B>Returns: </B></I>An integer value in the range 0-255 representing
the RGB color value for the specified pixel.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierMemoryImageSourceFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>MemoryImageSource</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT><I><B>Implements: </B></I><TT>ImageProducer
<BR>
</TT>This class uses an array to produce image pixel values.
</BLOCKQUOTE>
<H4><TT>MemoryImageSource</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public MemoryImageSource(int w, int h,
ColorModel cm, byte[] pix, int off,<BR>
  int scan)<BR>
</TT>The <TT>MemoryImageSource</TT>
constructor uses an array of bytes to produce image data for an
<BR>
<TT>Image</TT> object.<BR>
<I><B>Parameters: <BR>
</B></I><TT>w</TT>-the width of the
image to be created in pixels.<BR>
<TT>h</TT>-the height of the image
to be created in pixels.<BR>
<TT>cm</TT>-the color model used to
translate the pixel values.<BR>
<TT>pix</TT>-a byte array containing
the image data.<BR>
<TT>off</TT>-the offset into the array
to begin reading.<BR>
<TT>scan</TT>-the scan value.
</BLOCKQUOTE>
<H4><TT>MemoryImageSource</TT> Constructor
</H4>
<BLOCKQUOTE>
public MemoryImageSource(int w, int h, ColorModel cm, byte[] pix,
int off,<BR>
  int scan, Hashtable props)<BR>
The MemoryImageSource constructor uses an array of bytes to produce
image data for an Image object.<BR>
<I><B>Parameters:</B></I> <BR>
w-the width of the image to be created in pixels.<BR>
h-the height of the image to be created in pixels.<BR>
cm-the color model used to translate the pixel values.<BR>
pix-a byte array containing the image data.<BR>
off-the offset into the array to begin reading.<BR>
scan-the scan value.<BR>
props-a Hashtable object containing properties to be used by the
image producer.
</BLOCKQUOTE>
<H4><TT>MemoryImageSource</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public MemoryImageSource(int w, int h,
ColorModel cm, int[] <BR>
pix, int off,  int scan)<BR>
</TT>The <TT>MemoryImageSource</TT>
constructor uses an array of bytes to produce image data for an
<TT>Image</TT> object.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>w</TT>-the width of the image
to be created in pixels.<BR>
<TT>h</TT>-the height of the image
to be created in pixels.<BR>
<TT>cm</TT>-the color model used to
translate the pixel values.<BR>
<TT>pix</TT>-an integer array containing
the image data.<BR>
<TT>off</TT>-the offset into the array
to begin reading.<BR>
<TT>scan</TT>-the scan value.
</BLOCKQUOTE>
<H4><TT>MemoryImageSource</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public MemoryImageSource(int w, int h,
ColorModel cm, int[] pix, int off,<BR>
  int scan, Hashtable props)<BR>
</TT>The MemoryImageSource constructor uses an array of
bytes to produce image data for an Image object.<BR>
<I><B>Parameters:<BR>
</B></I>w-the width of the image to be created in pixels.<BR>
h-the height of the image to be created in pixels.<BR>
cm-the color model used to translate the pixel values.<BR>
pix-an integer array containing the image data.<BR>
off-the offset into the array to begin reading.<BR>
scan-the scan value.<BR>
props-a Hashtable object containing properties to be used by the
image producer.
</BLOCKQUOTE>
<H4><TT>MemoryImageSource</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public MemoryImageSource(int w, int h,
int pix[], int off, int scan)<BR>
</TT>The <TT>MemoryImageSource</TT>
constructor uses an array of bytes to produce image data for an
<TT>Image</TT> object.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>w</TT>-the width of the image
to be created in pixels.<BR>
<TT>h</TT>-the height of the image
to be created in pixels.<BR>
<TT>pix</TT>-an integer array containing
the image data.<BR>
<TT>off</TT>-the offset into the array
to begin reading.<BR>
<TT>scan</TT>-the scan value.
</BLOCKQUOTE>
<H4><TT>MemoryImageSource</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public MemoryImageSource(int w, int h,
int pix[], int off, int scan,<BR>
  Hashtable props)<BR>
</TT>The <TT>MemoryImageSource</TT>
constructor uses an array of bytes to produce image data for an
<TT>Image</TT> object.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>w</TT>-the width of the image
to be created in pixels.<BR>
<TT>h</TT>-the height of the image
to be created in pixels.<BR>
<TT>pix</TT>-an integer array containing
the image data.<BR>
<TT>off</TT>-the offset into the array
to begin reading.<BR>
<TT>scan</TT>-the scan value.<BR>
<TT>props</TT>-a <TT>Hashtable</TT>
object containing properties to be used by the image producer.
</BLOCKQUOTE>
<H4><TT>addConsumer</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void addConsumer(ImageConsumer
ic)<BR>
</TT>The <TT>addConsumer</TT>
method adds an <TT>ImageConsumer</TT>
interface to a list of image consumers who are interested in data
for the image.<BR>
<I><B>Parameters: </B></I><TT>ic</TT>-an
<TT>ImageConsumer</TT>-derived object.
</BLOCKQUOTE>
<H4><TT>isConsumer</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized boolean isConsumer(ImageConsumer
ic)<BR>
</TT>The <TT>isConsumer</TT>
method determines if the specified image consumer is currently
in the list.<BR>
<I><B>Parameters: </B></I><TT>ic</TT>-an
<TT>ImageConsumer</TT>-derived object.
<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the <TT>ImageConsumer</TT> object
is already in the list, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>removeConsumer</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void removeConsumer(ImageConsumer
ic)<BR>
</TT>The <TT>removeConsumer</TT>
method removes the specified image consumer from the list of image
consumers interested in receiving image data.<BR>
<I><B>Parameters: </B></I><TT>ic</TT>-an
<TT>ImageConsumer</TT>-derived object.
</BLOCKQUOTE>
<H4><TT>startProduction</TT></H4>
<BLOCKQUOTE>
<TT>public void startProduction(ImageConsumer
ic)<BR>
</TT>The <TT>startProduction</TT>
method adds the specified image consumer to a list of image consumers
interested in receiving image data. This method also immediately
starts production of image data to be sent to the <TT>ImageConsumer</TT>
interfaces.<BR>
<I><B>Parameters: </B></I><TT>ic</TT>-an
<TT>ImageConsumer</TT>-derived object.
</BLOCKQUOTE>
<H4><TT>requestTopDownLeftRightResend</TT>
</H4>
<BLOCKQUOTE>
<TT>public void requestTopDownLeftRightResend(ImageConsumer
ic)<BR>
</TT>The <TT>requestTopDownLeftRightResend</TT>
method is used to deliver the image data to the specified image
consumer in top-down, left-right order.<BR>
<I><B>Parameters: </B></I><TT>ic</TT>-an
<TT>ImageConsumer</TT>-derived object.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierPixelGrabberFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>PixelGrabber</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>Object<BR>
</TT><I><B>Implements: </B></I><TT>ImageConsumer
<BR>
</TT>The <TT>PixelGrabber</TT>
class implements the <TT>ImageConsumer</TT>
interface to retrieve a subset of pixels from an image.
</BLOCKQUOTE>
<H4><TT>PixelGrabber</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public PixelGrabber(Image img, int x,
int y, int w, int h, int[] pix, int off,<BR>
  int scansize)<BR>
</TT>The PixelGrabber constructor constructs a PixelGrabber
object to retrieve a subset of pixels from the image. In this
case, the PixelGrabber will grab a rectangular section of pixels.
<BR>
<I><B>Parameters:<BR>
</B></I>img-an Image object to be &quot;grabbed.&quot;<BR>
x-the x coordinate from which to begin grabbing pixels.<BR>
y-the y coordinate from which to begin grabbing pixels.<BR>
w-the width of the PixelGrabber bounding rectangle.<BR>
h-the height of the PixelGrabber bounding rectangle.<BR>
pix-an array of integers used to store the grabbed pixels.<BR>
off-the offset into the image to begin calculations.<BR>
scan-an integer value used to represent the scansize.
</BLOCKQUOTE>
<H4><TT>PixelGrabber</TT> Constructor
</H4>
<BLOCKQUOTE>
<TT>public PixelGrabber(ImageProducer ip,
int x, int y, int w, int h, int[] pix,<BR>
  int off, int scansize)<BR>
</TT>The PixelGrabber constructor constructs a PixelGrabber
object to retrieve a subset of pixels from the image. In this
case, the PixelGrabber will grab a rectangular section of pixels.
<BR>
<I><B>Parameters:</B></I> <BR>
ip-an ImageProducer object to be grabbed.<BR>
x-the x coordinate from which to begin grabbing pixels.<BR>
y-the y coordinate from which to begin grabbing pixels.<BR>
w-the width of the PixelGrabber bounding rectangle.<BR>
h-the height of the PixelGrabber bounding rectangle.<BR>
pix-an array of integers used to store the grabbed pixels.<BR>
off-the offset into the image to begin calculations.<BR>
scan-an integer value used to represent the scansize.
</BLOCKQUOTE>
<H4><TT>grabPixels</TT></H4>
<BLOCKQUOTE>
<TT>public boolean grabPixels() throws InterruptedException
<BR>
</TT>The <TT>grabPixels</TT>
method notifies the pixel grabber to begin grabbing pixels and
wait until all of the pixels to be grabbed have been delivered.
<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the operation was successful, <TT>false</TT>
if not.<BR>
<I><B>Throws:</B></I> <TT>InterruptedException</TT>
if the process was interrupted.
</BLOCKQUOTE>
<H4><TT>grabPixels</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized boolean grabPixels(long
ms) throws InterruptedException<BR>
</TT>This <TT>grabPixels</TT>
method notifies the pixel grabber to begin grabbing pixels at
some specified time in the future and wait until all of the pixels
to be grabbed have been delivered.<BR>
<I><B>Parameters: </B></I><TT>ms</TT>-a
long integer value representing the start time in milliseconds.
<BR>
<I><B>Returns: </B></I>A boolean value that is <TT>true</TT>
if the operation was successful, <TT>false</TT>
if not.<BR>
<I><B>Throws:</B></I> <TT>InterruptedException</TT>
if the process was interrupted.
</BLOCKQUOTE>
<H4><TT>status</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized int status()<BR>
</TT>The <TT>status</TT> method
returns a value representing the status of the grab operation.
<BR>
<I><B>Returns: </B></I>An integer value representing the operation's
status. This value will be a bitwise <TT>OR</TT>
of all relevant image observer flags.
</BLOCKQUOTE>
<H4><TT>setDimensions</TT></H4>
<BLOCKQUOTE>
<TT>public void setDimensions(int width,
int height)<BR>
</TT>The <TT>setDimensions</TT>
method must be implemented by this class to fulfill its interface
with the <TT>ImageConsumer</TT> interface.
<BR>
<I><B>Parameters: </B></I><TT>width</TT>-the
width parameter.<BR>
<I><B>Parameters: </B></I><TT>height</TT>-the
height parameter.
</BLOCKQUOTE>
<H4><TT>setHints</TT></H4>
<BLOCKQUOTE>
<TT>public void setHints(int hints)<BR>
</TT>The <TT>setHints</TT>
method must be implemented by this class to fulfill its interface
with the <TT>ImageConsumer</TT> interface.
<BR>
<I><B>Parameters: </B></I><TT>hints</TT>-the
hints parameter.
</BLOCKQUOTE>
<H4><TT>setProperties</TT></H4>
<BLOCKQUOTE>
<TT>public void setProperties(Hashtable props)
<BR>
</TT>The <TT>setProperties</TT>
method must be implemented by this class to fulfill its interface
with the <TT>ImageConsumer</TT> interface.
<BR>
<I><B>Parameters: </B></I><TT>props</TT>-a
<TT>Hashtable</TT> object.
</BLOCKQUOTE>
<H4><TT>setColorModel</TT></H4>
<BLOCKQUOTE>
<TT>public void setColorModel(ColorModel
model)<BR>
</TT>The <TT>setColorModel</TT>
method must be implemented by this class to fulfill its interface
with the <TT>ImageConsumer</TT> interface.
<BR>
<I><B>Parameters: </B></I><TT>model</TT>-a
<TT>ColorModel</TT> object.
</BLOCKQUOTE>
<H4><TT>setPixels</TT></H4>
<BLOCKQUOTE>
<TT>public void setPixels(int srcX, int srcY,
int srcW, int srcH,<BR>
  ColorModel model, byte pixels[], int srcOff, int srcScan)<BR>
</TT>The setPixels method must be implemented by this class
to fulfill its interface with the ImageConsumer interface.<BR>
<I><B>Parameters:</B></I> <BR>
srcX-an integer value representing the source x coordinate.<BR>
srcY-an integer value representing the source y coordinate.<BR>
srcW-an integer value representing the source width.<BR>
srcH-an integer value representing the source height.<BR>
model-the color model to be used.<BR>
pixels-a byte array of pixel values.<BR>
srcOff-the offset into the source array.<BR>
srcScan-the source scan value.
</BLOCKQUOTE>
<H4><TT>imageComplete</TT></H4>
<BLOCKQUOTE>
<TT>public synchronized void imageComplete(int
status)<BR>
</TT>The <TT>imageComplete</TT>
method must be implemented by this class to fulfill its interface
with the <TT>ImageConsumer</TT> interface.
<BR>
<I><B>Parameters: </B></I><TT>status</TT>-an
integer value representing the status of the pixel grab operation.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierRGBImageFilterFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>RGBImageFilter</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>ImageFilter<BR>
</TT>The RGBImageFilter abstract class provides the functionality
to process image data within a single method which converts pixels
in the default RGB ColorModel.setColorModel
</BLOCKQUOTE>
<H4><TT>SetColorModel</TT></H4>
<BLOCKQUOTE>
<TT>public void setColorModel(ColorModel
model)<BR>
</TT>The <TT>setColorModel</TT>
method checks the type of the specified color model. If it is
an <TT>IndexColorModel</TT> and the
protected <TT>canFilterIndexColorModel</TT>
variable is <TT>true</TT>, the color
model will be set to the <TT>IndexColorModel</TT>.
Otherwise, the default RGB color model will be used for all filtering
operations.<BR>
<I><B>Parameters: </B></I><TT>Model</TT>-the
color model to be used for filtering.
</BLOCKQUOTE>
<H4><TT>substituteColorModel</TT>
</H4>
<BLOCKQUOTE>
<TT>public void substituteColorModel(ColorModel
oldcm, ColorModel newcm)<BR>
</TT>The <TT>substituteColorModel</TT>
method allows color models to be interchanged on-the-fly. If the
old color model is encountered during a <TT>setPixels</TT>
method call, the new color model will be used instead.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>oldcm</TT>-the old color model
to be replaced.<BR>
<TT>newcm</TT>-the new color model.
</BLOCKQUOTE>
<H4><TT>filterIndexColorModel</TT>
</H4>
<BLOCKQUOTE>
<TT>public IndexColorModel filterIndexColorModel(IndexColorModel
icm)<BR>
</TT>The filterIndexColorModel method runs each entry in
the specified IndexColorModel through the filterRGB method and
returns a new color model.<BR>
<I><B>Parameters: </B></I>icm-the IndexColorModel object to be
filtered.<BR>
<I><B>Returns: </B></I>An IndexColorModel object that has been
filtered by the RGBImageFilter class.
</BLOCKQUOTE>
<H4><TT>filterRGBPixels</TT></H4>
<BLOCKQUOTE>
<TT>public void filterRGBPixels(int x, int
y, int w, int h, int pixels[], int off,<BR>
  int scansize)<BR>
</TT>The <TT>filterRGBPixels</TT>
method filters an array of pixels through the <TT>filterRGB</TT>
method.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate from which
to start the filtering.<BR>
<TT>y</TT>-the y coordinate from which
to start the filtering.<BR>
<TT>w</TT>-the width of the image
to be filtered.<BR>
<TT>h</TT>-the height of the image
to be filtered.<BR>
<TT>pixels</TT>-an array of integers
representing pixel values.<BR>
<TT>off</TT>-the offset used.<BR>
<TT>scansize</TT>-the scansize used.
</BLOCKQUOTE>
<H4><TT>setPixels</TT></H4>
<BLOCKQUOTE>
<TT>public void setPixels(int x, int y, int
w, int h, ColorModel model,<BR>
  int pixels[], int off, int scansize)<BR>
</TT>The <TT>setPixels</TT>
method converts the pixels and color model before passing them
on. If the color model has already been converted, the pixels
are passed through with the converted color model. If not, then
the pixel array is converted to the default RGB color model using
the <TT>filterRGBPixels</TT> method.
<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate from which
to start the filtering.<BR>
<TT>y</TT>-the y coordinate from which
to start the filtering.<BR>
<TT>w</TT>-the width of the image
to be filtered.<BR>
<TT>h</TT>-the height of the image
to be filtered.<BR>
<TT>model</TT>-the color model with
which the pixels comply.<BR>
<TT>pixels</TT>-an array of integers
representing pixel values.<BR>
<TT>off</TT>-the offset used.<BR>
<TT>scansize</TT>-the scansize used.
</BLOCKQUOTE>
<H4><TT>filterRGB</TT></H4>
<BLOCKQUOTE>
<TT>public abstract int filterRGB(int x,
int y, int rgb)<BR>
</TT>The <TT>filterRGB</TT>
method allows subclasses to specify a method that converts an
input pixel using the default RGB color model to an output pixel.
<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate of the
pixel.<BR>
<TT>y</TT>-the y coordinate of the
pixel.<BR>
<TT>rgb</TT>-the pixel value using
the default RGB color model.<BR>
<I><B>Returns: </B></I>An integer value representing the filtered
pixel value.
</BLOCKQUOTE>
<HR>

<CENTER><P><A HREF="ch34.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch36.htm"><IMG SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
