<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
<H1><FONT COLOR=#FF0000>Chapter 31</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Package </FONT><TT><FONT SIZE=6 COLOR=#FF0000 FACE="Courier">java.io</FONT></FONT></TT></FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>

<UL>
<LI><A HREF="#DataInput" >DataInput</A>
<LI><A HREF="#DataOutput" >DataOutput</A>
<LI><A HREF="#BufferedInputStream" >BufferedInputStream</A>
<LI><A HREF="#BufferedOutputStream" >BufferedOutputStream</A>
<LI><A HREF="#ByteArrayInputStream" >ByteArrayInputStream</A>
<LI><A HREF="#ByteArrayOutputStream" >ByteArrayOutputStream</A>
<LI><A HREF="#DataInputStream" >DataInputStream</A>
<LI><A HREF="#DataOutputStream" >DataOutputStream</A>
<LI><A HREF="#File" >File</A>
<LI><A HREF="#FileDescriptor" >FileDescriptor</A>
<LI><A HREF="#FileInputStream" >FileInputStream</A>
<LI><A HREF="#FileOutputStream" >FileOutputStream</A>
<LI><A HREF="#FilterInputStream" >FilterInputStream</A>
<LI><A HREF="#FilterOutputStream" >FilterOutputStream</A>
<LI><A HREF="#InputStream" >InputStream</A>
<LI><A HREF="#LineNumberInputStream" >LineNumberInputStream</A>
<LI><A HREF="#OutputStream" >OutputStream</A>
<LI><A HREF="#PipedInputStream" >PipedInputStream</A>
<LI><A HREF="#PipedOutputStream" >PipedOutputStream</A>
<LI><A HREF="#PrintStream" >PrintStream</A>
<LI><A HREF="#PushbackInputStream" >PushbackInputStream</A>
<LI><A HREF="#RandomAccessFile" >RandomAccessFile</A>
<LI><A HREF="#SequenceInputStream" >SequenceInputStream</A>
<LI><A HREF="#StreamTokenizer" >StreamTokenizer</A>
<LI><A HREF="#StringBufferInputStream" >StringBufferInputStream</A>
<LI><A HREF="#EOFException" >EOFException</A>
<LI><A HREF="#FileNotFoundException" >FileNotFoundException</A>
<LI><A HREF="#IOException" >IOException</A>
<LI><A HREF="#InterruptedIOException" >InterruptedIOException</A>
<LI><A HREF="#UTFDataFormatException" >UTFDataFormatException</A>
</UL>
<HR>
<P>
The Java I/O package, also known as <TT><FONT FACE="Courier">java.io</FONT></TT>,
gives classes support for reading and writing data to and from
different input and output devices, including files, strings,
and other data sources. The I/O package includes classes for inputting
streams of data, outputting streams of data, working with files,
and tokenizing streams of data. Table 31.1 shows the contents
of the <TT><FONT FACE="Courier">java.io</FONT></TT> package, and
Figure 31.1 illustrates the contents' hierarchy.
<P>
<A HREF="f31-1.gif" ><B>Figure 31.1:</B> <I>Contents of the</I> java.io <I>package.</I></A>
<P>
<CENTER><B>Table 31.1. Contents of the </B><TT><B><FONT FACE="Courier">java.io</FONT></B></TT><B>
package.</B></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WITH=80%>
<TR VALIGN=TOP><TD WIDTH=187><I>Class index</I></TD><TD WIDTH=179><I>Exception index</I>
</TD><TD WIDTH=151><I>Interface index</I></TD></TR>
<TR VALIGN=TOP><TD WIDTH=187><TT><FONT FACE="Courier">BufferedInputStream</FONT></TT>
</TD><TD WIDTH=179><TT><FONT FACE="Courier">EOFException</FONT></TT>
</TD><TD WIDTH=151><TT><FONT FACE="Courier">DataInput</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=187><TT><FONT FACE="Courier">BufferedOutputStream</FONT></TT>
</TD><TD WIDTH=179><TT><FONT FACE="Courier">FileNotFoundException</FONT></TT>
</TD><TD WIDTH=151><TT><FONT FACE="Courier">DataOutput</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=187><TT><FONT FACE="Courier">ByteArrayInputStream</FONT></TT>
</TD><TD WIDTH=179><TT><FONT FACE="Courier">InterruptedIOException</FONT></TT>
</TD><TD WIDTH=151><TT><FONT FACE="Courier">FilenameFilter</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=187><TT><FONT FACE="Courier">ByteArrayOutputStream</FONT></TT>
</TD><TD WIDTH=179><TT><FONT FACE="Courier">IOException</FONT></TT>
</TD><TD WIDTH=151>&nbsp;</TD></TR>
<TR VALIGN=TOP><TD WIDTH=187><TT><FONT FACE="Courier">DataInputStream</FONT></TT>
</TD><TD WIDTH=179><TT><FONT FACE="Courier">UTFDataFormatException</FONT></TT>
</TD><TD WIDTH=151>&nbsp;</TD></TR>
<TR VALIGN=TOP><TD WIDTH=187><TT><FONT FACE="Courier">DataOutputStream</FONT></TT>
</TD><TD WIDTH=179>&nbsp;</TD><TD WIDTH=151>&nbsp;</TD></TR>
<TR VALIGN=TOP><TD WIDTH=187><TT><FONT FACE="Courier">File</FONT></TT></TD>
<TD WIDTH=179>&nbsp;</TD><TD WIDTH=151>&nbsp;</TD></TR>
<TR VALIGN=TOP><TD WIDTH=187><TT><FONT FACE="Courier">FileDescriptor</FONT></TT>
</TD><TD WIDTH=179>&nbsp;</TD><TD WIDTH=151>&nbsp;</TD></TR>
<TR VALIGN=TOP><TD WIDTH=187><TT><FONT FACE="Courier">FileInputStream</FONT></TT>
</TD><TD WIDTH=179>&nbsp;</TD><TD WIDTH=151>&nbsp;</TD></TR>
<TR VALIGN=TOP><TD WIDTH=187><TT><FONT FACE="Courier">FileOutputStream</FONT></TT>
</TD><TD WIDTH=179>&nbsp;</TD><TD WIDTH=151>&nbsp;</TD></TR>
<TR VALIGN=TOP><TD WIDTH=187><TT><FONT FACE="Courier">FilterInputStream</FONT></TT>
</TD><TD WIDTH=179>&nbsp;</TD><TD WIDTH=151>&nbsp;</TD></TR>
<TR VALIGN=TOP><TD WIDTH=187><TT><FONT FACE="Courier">FilterOutputStream</FONT></TT>
</TD><TD WIDTH=179>&nbsp;</TD><TD WIDTH=151>&nbsp;</TD></TR>
<TR VALIGN=TOP><TD WIDTH=187><TT><FONT FACE="Courier">InputStream</FONT></TT>
</TD><TD WIDTH=179>&nbsp;</TD><TD WIDTH=151>&nbsp;</TD></TR>
<TR VALIGN=TOP><TD WIDTH=187><TT><FONT FACE="Courier">LineNumberInputStream</FONT></TT>
</TD><TD WIDTH=179>&nbsp;</TD><TD WIDTH=151>&nbsp;</TD></TR>
<TR VALIGN=TOP><TD WIDTH=187><TT><FONT FACE="Courier">OutputStream</FONT></TT>
</TD><TD WIDTH=179>&nbsp;</TD><TD WIDTH=151>&nbsp;</TD></TR>
<TR VALIGN=TOP><TD WIDTH=187><TT><FONT FACE="Courier">PipedInputStream</FONT></TT>
</TD><TD WIDTH=179>&nbsp;</TD><TD WIDTH=151>&nbsp;</TD></TR>
<TR VALIGN=TOP><TD WIDTH=187><TT><FONT FACE="Courier">PipedOutputStream</FONT></TT>
</TD><TD WIDTH=179>&nbsp;</TD><TD WIDTH=151>&nbsp;</TD></TR>
<TR VALIGN=TOP><TD WIDTH=187><TT><FONT FACE="Courier">PrintStream</FONT></TT>
</TD><TD WIDTH=179>&nbsp;</TD><TD WIDTH=151>&nbsp;</TD></TR>
<TR VALIGN=TOP><TD WIDTH=187><TT><FONT FACE="Courier">PushbackInputStream</FONT></TT>
</TD><TD WIDTH=179>&nbsp;</TD><TD WIDTH=151>&nbsp;</TD></TR>
<TR VALIGN=TOP><TD WIDTH=187><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT>
</TD><TD WIDTH=179>&nbsp;</TD><TD WIDTH=151>&nbsp;</TD></TR>
<TR VALIGN=TOP><TD WIDTH=187><TT><FONT FACE="Courier">SequenceInputStream</FONT></TT>
</TD><TD WIDTH=179>&nbsp;</TD><TD WIDTH=151>&nbsp;</TD></TR>
<TR VALIGN=TOP><TD WIDTH=187><TT><FONT FACE="Courier">StreamTokenizer</FONT></TT>
</TD><TD WIDTH=179>&nbsp;</TD><TD WIDTH=151>&nbsp;</TD></TR>
<TR VALIGN=TOP><TD WIDTH=187><TT><FONT FACE="Courier">StringBufferInputStream</FONT></TT>
</TD><TD WIDTH=179>&nbsp;</TD><TD WIDTH=151>&nbsp;</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="DataInput"><IMG SRC="Inter.gif"></A></TD><TD WIDTH=499>
<H2><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">DataInput</FONT></TT>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
See also: DataInputStream, DataOutput.
<P>
The <TT><FONT FACE="Courier">DataInput</FONT></TT> interface describes
an input stream that can read input data in a platform-independent
manner; here is its definition:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public interface java.io.DataInput {
<BR>
&nbsp;&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;&nbsp;public abstract boolean readBoolean();<BR>
&nbsp;&nbsp;&nbsp;public abstract byte readByte();<BR>
&nbsp;&nbsp;&nbsp;public abstract char readChar();<BR>
&nbsp;&nbsp;&nbsp;public abstract double readDouble();<BR>
&nbsp;&nbsp;&nbsp;public abstract float readFloat();<BR>
&nbsp;&nbsp;&nbsp;public abstract void readFully(byte b[]);<BR>
&nbsp;&nbsp;&nbsp;public abstract void readFully(byte b[], int
off, int len);<BR>
&nbsp;&nbsp;&nbsp;public abstract int readInt();<BR>
&nbsp;&nbsp;&nbsp;public abstract String readLine();<BR>
&nbsp;&nbsp;&nbsp;public abstract long readLong();<BR>
&nbsp;&nbsp;&nbsp;public abstract short readShort();<BR>
&nbsp;&nbsp;&nbsp;public abstract int readUnsignedByte();<BR>
&nbsp;&nbsp;&nbsp;public abstract int readUnsignedShort();<BR>
&nbsp;&nbsp;&nbsp;public abstract String readUTF();<BR>
&nbsp;&nbsp;&nbsp;public abstract int skipBytes(int n);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">readBoolean</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract boolean readBoolean()
throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads a Boolean value (byte) from the input stream.
A value of <TT><FONT FACE="Courier">0</FONT></TT> is interpreted
as <TT><FONT FACE="Courier">false</FONT></TT>, but all other values
are interpreted as <TT><FONT FACE="Courier">true</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the Boolean value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadByte</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract byte readByte() throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads a signed byte (8-bit) value from the input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the byte value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadChar</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract char readChar() throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads a Unicode character (16-bit) value from the
input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the Unicode character value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadDouble</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract double readDouble() throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads a double (64-bit) value from the input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the double value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadFloat</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract float readFloat() throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads a float (32-bit) value from the input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the float value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>



<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadFully</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract void readFully(byte b[])
throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads up to <TT><FONT FACE="Courier">b.length</FONT></TT>
bytes from the input stream into the byte array <TT><FONT FACE="Courier">b</FONT></TT>,
blocking until all bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array into which the data is read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the specified number of bytes.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadFully</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract void readFully(byte b[],
int off, int len) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads up to <TT><FONT FACE="Courier">len</FONT></TT>
bytes from the input stream into the byte array <TT><FONT FACE="Courier">b</FONT></TT>
beginning <TT><FONT FACE="Courier">off</FONT></TT> bytes into
the array, blocking until all bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT>  is the byte array into which the data is read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array for the data to be written to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the maximum number of bytes to read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the specified number of bytes.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadInt</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract int readInt() throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads an integer (32-bit) value from the input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the integer value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadLine</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract String readLine() throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads a line of text from the input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >a string containing the line of text read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the line of text.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadLong</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract long readLong() throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads a long (64-bit) value from the input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the long value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadShort</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract short readShort() throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads a short (16-bit) value from the input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the short value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadUnsignedByte</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract int readUnsignedByte()
throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads an unsigned byte (8-bit) value from the input
stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the unsigned byte value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadUnsignedShort</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract int readUnsignedShort()
throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads an unsigned short (16-bit) value from the input
stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the short value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadUTF</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract String readUTF() throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads a string encoded by using a modified UTF-8 format
from the input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the string read.</TD>
</TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the string.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">UTFDataFormatException</FONT> if the bytes read do not represent a valid UTF-8 encoding of a string.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SkipBytes</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract int skipBytes(int n)
throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method skips <TT><FONT FACE="Courier">n</FONT></TT> bytes
of data in the input stream, blocking until all bytes are skipped.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">n</FONT> is the number of bytes to skip.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the actual number of bytes skipped.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before skipping the specified number of bytes.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="DataOutput"><IMG SRC="Inter.gif"></A></TD><TD WIDTH=499>
<H2><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">DataOutput</FONT></TT>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
See also: <TT><FONT FACE="Courier">DataOutputStream</FONT></TT>,
<TT><FONT FACE="Courier">DataInput</FONT></TT>.
<P>
The <TT><FONT FACE="Courier">DataOutput</FONT></TT> interface
describes an output stream that can write output data in a platform-independent
manner; this is its definition:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public interface java.io.DataOutput {
<BR>
&nbsp;&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;&nbsp;public abstract void write(byte b[]);<BR>
&nbsp;&nbsp;&nbsp;public abstract void write(byte b[], int off,
int len)<BR>
&nbsp;&nbsp;&nbsp;public abstract void write(int b);<BR>
&nbsp;&nbsp;&nbsp;public abstract void writeBoolean(boolean v);
<BR>
&nbsp;&nbsp;&nbsp;public abstract void writeByte(int v);<BR>
&nbsp;&nbsp;&nbsp;public abstract void writeBytes(String s);<BR>
&nbsp;&nbsp;&nbsp;public abstract void writeChar(int v);<BR>
&nbsp;&nbsp;&nbsp;public abstract void writeChars(String s);<BR>
&nbsp;&nbsp;&nbsp;public abstract void writeDouble(double v);
<BR>
&nbsp;&nbsp;&nbsp;public abstract void writeFloat(float v);<BR>
&nbsp;&nbsp;&nbsp;public abstract void writeInt(int v);<BR>
&nbsp;&nbsp;&nbsp;public abstract void writeLong(long v);<BR>
&nbsp;&nbsp;&nbsp;public abstract void writeShort(int v);<BR>
&nbsp;&nbsp;&nbsp;public abstract void writeUTF(String str);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">write</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract void write(byte b[])
throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes <TT><FONT FACE="Courier">b.length</FONT></TT>
bytes to the output stream from the byte array <TT><FONT FACE="Courier">b</FONT></TT>,
blocking until all bytes are written.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array from which the data is written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Write</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract void write(byte b[],
int off, int len) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes <TT><FONT FACE="Courier">len</FONT></TT> bytes
to the output stream from the byte array <TT><FONT FACE="Courier">b</FONT></TT>
beginning <TT><FONT FACE="Courier">off</FONT></TT> bytes into
the array, blocking until all bytes are written.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array from which the data is written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array for the data to be read from.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the number of bytes to write.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Write</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract void write(int b) throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes a byte value to the output stream, blocking
until the byte is written.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="Throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">WriteBoolean</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract void writeBoolean(boolean
v) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes a Boolean value to the output stream. The Boolean
value <TT><FONT FACE="Courier">true</FONT></TT> is written as
the byte value <TT><FONT FACE="Courier">1</FONT></TT>, and <TT><FONT FACE="Courier">false</FONT></TT>
is written as the byte value <TT><FONT FACE="Courier">0</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the Boolean value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">WriteByte</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract void writeByte(int v)
throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes a byte (8-bit) value to the output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the byte value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">WriteBytes</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract void writeBytes(String
s) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes a string to the output stream as a sequence
of bytes.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the string to be written as bytes.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">WriteChar</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract void writeChar(int v)
throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes a character (16-bit) value to the output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the character value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">WriteChars</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract void writeChars(String
s) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes a string to the output stream as a sequence
of characters.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the string to be written as characters.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">WriteDouble</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract void writeDouble(double
v) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes a double (64-bit) value to the output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the double value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">WriteFloat</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract void writeFloat(float
v) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes a float (32-bit) value to the output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the float value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">WriteInt</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract void writeInt(int v)
throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes an integer (32-bit) value to the output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the integer value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">WriteLong</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract void writeLong(long v)
throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes a long (64-bit) value to the output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the long value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">WriteShort</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutput</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract void writeShort(int v)
throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes a short (16-bit) value to the output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the short value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></TD>
<TD >
<H4>WriteUTF</H4>
</TD><TD WIDTH=8%><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT>
</TD><TD WIDTH=20%><FONT FACE="Courier">DataOutput</FONT></TD>
<TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract void writeUTF(String
str) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method encodes a string using a modified UTF-8 format and
writes it to the output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">str</FONT> is the string to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="Inter.gif"></TD><TD WIDTH=499><H2><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">FilenameFilter</FONT></TT>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
See also: File
<P>
The FilenameFilter interface describes a filename filter used
to filter directory listings. Filename filters are used by the
list method defined in the File class, as well as the AWT's FileDialog
component; here is the definition for the interface:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public interface java.io.FilenameFilter
{<BR>
   // Methods<BR>
   public abstract boolean accept(File dir, String name);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">accept</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="inter.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FilenameFilter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract boolean accept(File dir,
String name)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether a file should be included in a
directory listing.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">dir</FONT> is the directory in which the file is located.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">name</FONT> is the filename.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">true</FONT> if the file should be included in the directory list; <TT><FONT FACE="Courier">false</FONT></TT> otherwise.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="BufferedInputStream"><IMG SRC="class.gif"></A></TD>
<TD WIDTH=499>
<H2><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">BufferedInputStream</FONT></TT>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">FilterInputStream</FONT></TD>
</TR>
</TABLE></CENTER>
<P>
See also: <TT><FONT FACE="Courier">BufferedOutputStream</FONT></TT>.
<P>
This class implements a buffered input stream, which allows you
to read data from a stream without causing a call to the underlying
system for each byte read. This is done by reading blocks of data
into a buffer, where the data is readily accessible, independent
of the underlying stream. Subsequent reads are much faster since
they read from the buffer rather than the underlying input stream.
Here is the definition for the <TT><FONT FACE="Courier">BufferedInputStream</FONT></TT>
class:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.io.BufferedInputStream
extends java.io.FilterInputStream<BR>
{<BR>
&nbsp;&nbsp;&nbsp;// Member Variables<BR>
&nbsp;&nbsp;&nbsp;protected byte buf[];<BR>
&nbsp;&nbsp;&nbsp;protected int count;<BR>
&nbsp;&nbsp;&nbsp;protected int marklimit;<BR>
&nbsp;&nbsp;&nbsp;protected int markpos;<BR>
&nbsp;&nbsp;&nbsp;protected int pos;<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;&nbsp;public BufferedInputStream(InputStream in);
<BR>
&nbsp;&nbsp;&nbsp;public BufferedInputStream(InputStream in, int
size);<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;&nbsp;public int available();<BR>
&nbsp;&nbsp;&nbsp;public void mark(int readlimit);<BR>
&nbsp;&nbsp;&nbsp;public boolean markSupported();<BR>
&nbsp;&nbsp;&nbsp;public int read();<BR>
&nbsp;&nbsp;&nbsp;public int read(byte b[], int off, int len);
<BR>
&nbsp;&nbsp;&nbsp;public void reset();<BR>
&nbsp;&nbsp;&nbsp;public long skip(long n);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=589><H4>Member Variables</H4>
</TD></TR>
</TABLE></CENTER>
<P>
Following are the member variables defined in <TT><FONT FACE="Courier">BufferedInputStream</FONT></TT>:
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">protected byte buf[]</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is the buffer where data is stored.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">protected int count</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is the number of bytes of data currently in the buffer.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">protected int marklimit</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is the maximum number of bytes that can be read before the
marked position (<TT><FONT FACE="Courier">markpos</FONT></TT>)
is invalidated.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">protected int markpos</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is the position in the buffer of the current mark, used to
return to a particular location in the buffer with the <TT><FONT FACE="Courier">mark</FONT></TT>
and <TT><FONT FACE="Courier">reset</FONT></TT> methods. The mark
position is set to <TT><FONT FACE="Courier">-1</FONT></TT> if
there is no current mark.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">protected int pos</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is the current read position in the buffer.<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>


<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">BufferedInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="Class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BufferedInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public BufferedInputStream(InputStream
in)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a new buffered input stream, with a default
buffer size of 512 bytes, to read data from the <TT><FONT FACE="Courier">in</FONT></TT>
input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">in</FONT> is the input stream to read data from.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">BufferedInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BufferedInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public BufferedInputStream(InputStream
in, int size)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a new buffered input stream, with a buffer
size of <TT><FONT FACE="Courier">size</FONT></TT> bytes, to read
data from the <TT><FONT FACE="Courier">in</FONT></TT> input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">in</FONT> is the input stream to read data from.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">size</FONT> is the buffer size.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Available</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BufferedInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int available() throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the number of bytes that can be read from
the input stream without blocking. That number is calculated by
adding the number of free bytes in the buffer and the number of
bytes available in the input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the number of available bytes.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">available</FONT> in class <TT><FONT FACE="Courier">FilterInputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Mark</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BufferedInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void mark(int readlimit)</FONT></TT>
</BLOCKQUOTE>
<P>
This method marks the current read position in the input stream.
The <TT><FONT FACE="Courier">reset</FONT></TT> method can be used
to reset the read position to this mark; subsequent reads will
read data beginning at the mark position. The mark position is
invalidated after <TT><FONT FACE="Courier">readlimit</FONT></TT>
bytes have been read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">readlimit</FONT> is the maximum number of bytes that can be read before the mark position becomes invalid.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">mark</FONT> in class <TT><FONT FACE="Courier">FilterInputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">MarkSupported</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BufferedInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean markSupported()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the input stream supports the <TT><FONT FACE="Courier">mark</FONT></TT>
and <TT><FONT FACE="Courier">reset</FONT></TT> methods.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">true</FONT> if the <TT><FONT FACE="Courier">mark</FONT></TT> and <TT><FONT FACE="Courier">reset</FONT></TT> methods are supported; <TT><FONT FACE="Courier">false</FONT></TT> otherwise.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">markSupported</FONT> in class <TT><FONT FACE="Courier">FilterInputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BufferedInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int read() throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads a byte value from the buffered input stream,
blocking until the byte is read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >an integer representing the byte value read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">read</FONT> in class <TT><FONT FACE="Courier">FilterInputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BufferedInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int read(byte b[], int off, int
len) throws IOException</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
This method reads up to <TT><FONT FACE="Courier">len</FONT></TT>
bytes from the buffered input stream into the byte array <TT><FONT FACE="Courier">b</FONT></TT>
beginning <TT><FONT FACE="Courier">off</FONT></TT> bytes into
the array, blocking until all bytes are read.
</BLOCKQUOTE>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array into which the data is read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array for the data to be written to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the maximum number of bytes to read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the actual number of bytes read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">read</FONT> in class <TT><FONT FACE="Courier">FilterInputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Reset</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BufferedInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void reset() throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method resets the read position in the input stream to the
current mark position, as set by the <TT><FONT FACE="Courier">mark</FONT></TT>
method.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IOException</FONT> if the stream has not been marked or if the mark is invalid.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">reset</FONT> in class <TT><FONT FACE="Courier">FilterInputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Skip</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BufferedInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public long skip(long n) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method skips <TT><FONT FACE="Courier">n</FONT></TT> bytes
of data in the input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">n</FONT> is the number of bytes to skip.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the actual number of bytes skipped.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">skip</FONT> in class <TT><FONT FACE="Courier">FilterInputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="BufferedOutputStream"><IMG SRC="class.gif"></A></TD>
<TD WIDTH=499>
<H2><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">BufferedOutputStream</FONT></TT>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">FilterOutputStream</FONT></TD>
</TR>
</TABLE></CENTER>
<P>
See also: <TT><FONT FACE="Courier">BufferedInputStream</FONT></TT>.
<P>
This class implements a buffered output stream, which enables
you to write data to a stream without causing a call to the underlying
system for each byte written. This is done by writing blocks of
data into a buffer rather than directly to the underlying output
stream. The buffer is then written to the underlying output stream
when the buffer fills up or is flushed or when the stream is closed.
This is the definition for the <TT><FONT FACE="Courier">BufferedOutputStream</FONT></TT>
class:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.io.BufferedOutputStream
extends java.io.FilterOutputStream {<BR>
&nbsp;&nbsp;&nbsp;// Member Variables<BR>
&nbsp;&nbsp;&nbsp;protected byte buf[];<BR>
&nbsp;&nbsp;&nbsp;protected int count;<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;&nbsp;public BufferedOutputStream(OutputStream out);
<BR>
&nbsp;&nbsp;&nbsp;public BufferedOutputStream(OutputStream out,
int size);<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;&nbsp;public void flush();<BR>
&nbsp;&nbsp;&nbsp;public void write(byte b[], int off, int len);
<BR>
&nbsp;&nbsp;&nbsp;public void write(int b);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=589><H4>Member Variables</H4>
</TD></TR>
</TABLE></CENTER>
<P>
Following are the member variables defined in <TT><FONT FACE="Courier">BufferedOutputStream</FONT></TT>:
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">protected byte buf[]</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is the buffer where data is stored.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">protected int count</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is the number of bytes of data currently in the buffer.
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">BufferedOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BufferedOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public BufferedOutputStream(OutputStream
out)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a new buffered output stream, with a
default buffer size of 512 bytes, to write data to the <TT><FONT FACE="Courier">out</FONT></TT>
output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">out</FONT> is the output stream to write data to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">BufferedOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BufferedOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public BufferedOutputStream(OutputStream
out, int size)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a new buffered output stream, with a
buffer size of <TT><FONT FACE="Courier">size</FONT></TT> bytes,
to write data to the <TT><FONT FACE="Courier">out</FONT></TT>
output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">out</FONT> is the output stream to write data to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">size</FONT> is the buffer size.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Flush</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BufferedOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void flush() throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method flushes the output stream, resulting in any buffered
data being written to the underlying output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">flush</FONT> in class <TT><FONT FACE="Courier">FilterOutputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Write</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BufferedOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
public void write(byte b[], int off, int len) throws IOException
</BLOCKQUOTE>
<P>
This method writes len bytes to the buffered output stream from
the byte array b beginning off bytes into the array.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="parame.gif"></TD><TD >b is the byte array from which the data is written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="parame.gif"></TD><TD >off is the starting offset into the array for the data to be read from.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="parame.gif"></TD><TD >len is the number of bytes to write.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="throws.gif"></TD><TD >IOException if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="overr.gif"></TD><TD >write in class FilterOutputStream.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Write</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">BufferedOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void write(int b) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes a byte value to the buffered output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">write</FONT> in class <TT><FONT FACE="Courier">FilterOutputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="ByteArrayInputStream"><IMG SRC="class.gif"></A></TD>
<TD WIDTH=499>
<H2><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">ByteArrayInputStream</FONT></TT>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">InputStream</FONT></TD></TR>
</TABLE></CENTER>
<P>
See also: <TT><FONT FACE="Courier">ByteArrayOutputStream</FONT></TT>.
<P>
The <TT><FONT FACE="Courier">ByteArrayInputStream</FONT></TT>
class implements an input stream whose data is read from an array
of bytes; here is the definition for the class:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.io.ByteArrayInputStream
extends java.io.InputStream {<BR>
&nbsp;&nbsp;&nbsp;// Member Variables<BR>
&nbsp;&nbsp;&nbsp;protected byte buf[];<BR>
&nbsp;&nbsp;&nbsp;protected int count;<BR>
&nbsp;&nbsp;&nbsp;protected int pos;<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;&nbsp;public ByteArrayInputStream(byte b[]);<BR>
&nbsp;&nbsp;&nbsp;public ByteArrayInputStream(byte b[], int off,
int len);<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public int available();<BR>
&nbsp;&nbsp;public int read();<BR>
&nbsp;&nbsp;public int read(byte b[], int off, int len);<BR>
&nbsp;&nbsp;public void reset();<BR>
&nbsp;&nbsp;public long skip(long n);<BR>
}</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=583><B>Member Variables</B></TD></TR>
</TABLE></CENTER>
<P>
Following are the member variables defined in <TT><FONT FACE="Courier">ByteArrayInputStream</FONT></TT>:
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">protected byte buf[]</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is the buffer where data is stored.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">protected int count</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is the number of bytes of data currently in the buffer.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">protected int pos</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is the current read position in the buffer.<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ByteArrayInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ByteArrayInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public ByteArrayInputStream(byte b[])</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a new input stream from the byte array
<TT><FONT FACE="Courier">b</FONT></TT>. Note that the byte array
is not copied to create the stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array from which the data is read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ByteArrayInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ByteArrayInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
public ByteArrayInputStream(byte b[], int off, int len)
</BLOCKQUOTE>
<P>
This constructor creates a new input stream of size len from the
byte array b beginning off bytes into the array. Note that the
byte array is not copied to create the stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="parame.gif"></TD><TD >b is the byte array from which the data is read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="parame.gif"></TD><TD >off is the starting offset into the array for the data to be read from.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="parame.gif"></TD><TD >len is the maximum number of bytes to read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Available</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ByteArrayInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int available()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the number of bytes that can be read from
the input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the number of available bytes.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">available</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ByteArrayInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int read()</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads a byte value from the input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >an integer representing the byte value read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">read</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ByteArrayInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int read(byte b[], int off, int
len)</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads up to <TT><FONT FACE="Courier">len</FONT></TT>
bytes from the input stream into the byte array <TT><FONT FACE="Courier">b</FONT></TT>
beginning <TT><FONT FACE="Courier">off</FONT></TT> bytes into
the array.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array into which the data is read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array for the data to be written to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the maximum number of bytes to read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the actual number of bytes read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="Overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">read</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Reset</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ByteArrayInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void reset()</FONT></TT>
</BLOCKQUOTE>
<P>
This method resets the read position to the beginning of the input
stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="overr.gif"></TD><TD >reset in class InputStream.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Skip</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ByteArrayInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public long skip(long n)</FONT></TT>
</BLOCKQUOTE>
<P>
This method skips <TT><FONT FACE="Courier">n</FONT></TT> bytes
of data in the input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">n</FONT> is the number of bytes to skip.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the actual number of bytes skipped.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">skip</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="ByteArrayOutputStream"><IMG SRC="class.gif"></A></TD>
<TD WIDTH=499>
<H2><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">ByteArrayOutputStream</FONT></TT>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">OutputStream</FONT></TD></TR>
</TABLE></CENTER>
<P>
See also: <TT><FONT FACE="Courier">ByteArrayInputStream</FONT></TT>.
<P>
The <TT><FONT FACE="Courier">ByteArrayOutputStream</FONT></TT>
class implements an output stream whose data is written to an
array of bytes. The byte array automatically grows as data is
written to it. Here is the definition for the class:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.io.ByteArrayOutputStream
extends java.io.OutputStream {<BR>
&nbsp;&nbsp;// Member Variables<BR>
&nbsp;&nbsp;protected byte buf[];<BR>
&nbsp;&nbsp;protected int count;<BR>
<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public ByteArrayOutputStream();<BR>
&nbsp;&nbsp;public ByteArrayOutputStream(int size);<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public void reset();<BR>
&nbsp;&nbsp;public int size();<BR>
&nbsp;&nbsp;public byte[] toByteArray();<BR>
&nbsp;&nbsp;public String toString();<BR>
&nbsp;&nbsp;public String toString(int hibyte);<BR>
&nbsp;&nbsp;public void write(byte b[], int off, int len);<BR>
&nbsp;&nbsp;public void write(int b);<BR>
&nbsp;&nbsp;public void writeTo(OutputStream out);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=583><H4>Member Variables</H4>
</TD></TR>
</TABLE></CENTER>
<P>
Following are the member variables defined in <TT><FONT FACE="Courier">ByteArrayOutputStream</FONT></TT>:
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">protected byte buf[]</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is the buffer where data is stored.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">protected int count</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is the number of bytes of data currently in the buffer.
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ByteArrayOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ByteArrayOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public ByteArrayOutputStream()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a new output stream with a default buffer
size of 32 bytes. The size of the buffer automatically grows as
data is written to it.
<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ByteArrayOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ByteArrayOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public ByteArrayOutputStream(int size)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a new output stream with an initial size
of <TT><FONT FACE="Courier">size</FONT></TT> bytes. The size of
the buffer automatically grows as data is written to it.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">size</FONT> is the initial size of the buffer.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Reset</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ByteArrayOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void reset()</FONT></TT>
</BLOCKQUOTE>
<P>
This method resets the contents of the underlying byte array by
setting the <TT><FONT FACE="Courier">count</FONT></TT> member
variable to zero, resulting in the accumulated data being discarded.
<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Size</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ByteArrayOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int size()</FONT></TT>
</BLOCKQUOTE>
<P>
This method returns the current size of the buffer, which is stored
in the <TT><FONT FACE="Courier">count</FONT></TT> member variable.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the current size of the buffer.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ToByteArray</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ByteArrayOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public byte[] toByteArray()</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a new byte array containing the data currently
stored in the underlying byte array associated with the output
stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >a byte array containing the current data stored in the output stream.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ToString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ByteArrayOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String toString()</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a new string containing the data currently
stored in the underlying byte array associated with the output
stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >a string containing the current data stored in the output stream.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">toString</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ToString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ByteArrayOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String toString(int hibyte)</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a new string containing the data currently
stored in the underlying byte array associated with the output
stream, with the top 8 bits of each string character set to <TT><FONT FACE="Courier">hibyte</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">hibyte</FONT> is the high byte value for each character.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >a string containing the current data stored in the output stream, with the high byte of each character set to <TT><FONT FACE="Courier">hibyte</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Write</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ByteArrayOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void write(byte b[], int off,
int len)</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes <TT><FONT FACE="Courier">len</FONT></TT> bytes
to the output stream from the byte array <TT><FONT FACE="Courier">b</FONT></TT>
beginning <TT><FONT FACE="Courier">off</FONT></TT> bytes into
the array.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array from which the data is written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array for the data to be read from.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the number of bytes to write.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">write</FONT> in class <TT><FONT FACE="Courier">OutputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Write</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ByteArrayOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void write(int b)</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes a byte value to the output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">write</FONT> in class <TT><FONT FACE="Courier">OutputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">WriteTo</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ByteArrayOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void writeTo(OutputStream out)
throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes the contents of the underlying byte array to
another output 
<P>
stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">out</FONT> is the output stream to write to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="DataInputStream"><IMG SRC="class.gif"></A></TD><TD WIDTH=499>
<H2><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">DataInputStream</FONT></TT>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">FilterInputStream</FONT></TD>
</TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="implem.gif"></FONT></TT>
</TD><TD > <TT><FONT FACE="Courier">DataInput</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>
See also: <TT><FONT FACE="Courier">DataOutputStream</FONT></TT>.
<P>
The <TT><FONT FACE="Courier">DataInputStream</FONT></TT> class
implements an input stream that can read Java primitive data types
in a platform-independent manner. Here is the definition for the
class:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.io.DataInputStream
extends java.io.FilterInputStream<BR>
&nbsp;&nbsp;implements java.io.DataInput {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public DataInputStream(InputStream in);<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public final int read(byte b[]);<BR>
&nbsp;&nbsp;public final int read(byte b[], int off, int len);
<BR>
&nbsp;&nbsp;public final boolean readBoolean();<BR>
&nbsp;&nbsp;public final byte readByte();<BR>
&nbsp;&nbsp;public final char readChar();<BR>
&nbsp;&nbsp;public final double readDouble();<BR>
&nbsp;&nbsp;public final float readFloat();<BR>
&nbsp;&nbsp;public final void readFully(byte b[]);<BR>
&nbsp;&nbsp;public final void readFully(byte b[], int off, int
len);<BR>
&nbsp;&nbsp;public final int readInt();<BR>
&nbsp;&nbsp;public final String readLine();<BR>
&nbsp;&nbsp;public final long readLong();<BR>
&nbsp;&nbsp;public final short readShort();<BR>
&nbsp;&nbsp;public final int readUnsignedByte();<BR>
&nbsp;&nbsp;public final int readUnsignedShort();<BR>
&nbsp;&nbsp;public final String readUTF();<BR>
&nbsp;&nbsp;public final static String readUTF(DataInput in);
<BR>
&nbsp;&nbsp;public final int skipBytes(int n);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">DataInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public DataInputStream(InputStream in)</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a new data input stream to read data from
the <TT><FONT FACE="Courier">in</FONT></TT> input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">in</FONT> is the input stream to read data from.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInputStream</FONT></TT></H4>
</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>

</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final int read(byte b[]) throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads up to <TT><FONT FACE="Courier">b.length</FONT></TT>
bytes from the data input stream into the byte array <TT><FONT FACE="Courier">b</FONT></TT>,
blocking until all bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array into which the data is read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<IMG SRC="returns.gif"></TD><TD >the actual number of bytes read, or <TT>
<FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">read</FONT> in class <TT><FONT FACE="Courier">FilterInputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final int read(byte b[], int off,
int len) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads up to <TT><FONT FACE="Courier">len</FONT></TT>
bytes from the data input stream into the byte array <TT><FONT FACE="Courier">b</FONT></TT>
beginning <TT><FONT FACE="Courier">off</FONT></TT> bytes into
the array, blocking until all bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array into which the data is read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array for the data to be written to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the maximum number of bytes to read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the actual number of bytes read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">read</FONT> in class <TT><FONT FACE="Courier">FilterInputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadBoolean</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final boolean readBoolean() throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads a Boolean value (byte) from the data input stream,
blocking until the byte is read. A value of <TT><FONT FACE="Courier">0</FONT></TT>
is interpreted as <TT><FONT FACE="Courier">false</FONT></TT>,
and all other values are interpreted as <TT><FONT FACE="Courier">true</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the Boolean value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadByte</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final byte readByte() throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads a signed byte (8-bit) value from the data input
stream, blocking until the byte is read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the byte value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadChar</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final char readChar() throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads a character (16-bit) value from the data input
stream, blocking until both bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the character value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadDouble</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final double readDouble() throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads a double (64-bit) value from the data input
stream, blocking until all eight bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the double value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadFloat</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>


<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final float readFloat() throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads a float (32-bit) value from the data input stream,
blocking until all four bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the float value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></TD>
<TD ><TT><B><FONT FACE="Courier">ReadFully</FONT></B></TT>
</TD><TD WIDTH=8%><IMG SRC="Class.gif"></TD><TD WIDTH=20%><B><FONT FACE="Courier">DataInputStream</FONT></B>
</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void readFully(byte b[])
throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads up to <TT><FONT FACE="Courier">b.length</FONT></TT>
bytes from the data input stream into the byte array <TT><FONT FACE="Courier">b</FONT></TT>,
blocking until all bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array into which the data is read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the specified number of bytes.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadFully</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ReadFully</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BR>



<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void readFully(byte b[],
int off, int len) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads up to <TT><FONT FACE="Courier">len</FONT></TT>
bytes from the data input stream into the byte array <TT><FONT FACE="Courier">b</FONT></TT>
beginning <TT><FONT FACE="Courier">off</FONT></TT> bytes into
the array, blocking until all bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array into which the data is read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array for the data to be written to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the maximum number of bytes to read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the specified number of bytes.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadInt</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final int readInt() throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads an integer (32-bit) value from the data input
stream, blocking until all four bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the integer value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadLine</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final String readLine() throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads a line of text from the data input stream, blocking
until either a newline character (<TT><FONT FACE="Courier">\n</FONT></TT>)
or a carriage return character (<TT><FONT FACE="Courier">\r</FONT></TT>)
is read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >a string containing the line of text read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the line of text.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadLong</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final long readLong() throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads a long (64-bit) value from the data input stream,
blocking until all eight bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the long value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadShort</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final short readShort() throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads a signed short (16-bit) value from the data
input stream, blocking until both bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the short value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadUnsignedByte</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final int readUnsignedByte() throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads an unsigned byte (8-bit) value from the data
input stream, blocking until the byte is read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the unsigned byte value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadUnsignedShort</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final int readUnsignedShort()
throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads an unsigned short (16-bit) value from the data
input stream, blocking until both bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the unsigned short value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadUTF</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final String readUTF() throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads a string that has been encoded using a modified
UTF-8 format from the data input stream, blocking until all bytes
are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the string read.</TD>
</TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the string.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">UTFDataFormatException</FONT> if the bytes read do not represent a valid UTF-8 encoding of a string.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ReadUTF</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final static String readUTF(DataInput
in) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads a string from the <TT><FONT FACE="Courier">in</FONT></TT>
data input stream that has been encoded using a modified UTF-8
format, blocking until all bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">in</FONT> is the data input stream to read the string from.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the string read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the string.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">UTFDataFormatException</FONT> if the bytes read do not represent a valid UTF-8 encoding of a string.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SkipBytes</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final int skipBytes(int n) throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method skips <TT><FONT FACE="Courier">n</FONT></TT> bytes
of data in the data input stream, blocking until all bytes are
skipped.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">n</FONT> is the number of bytes to skip.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the actual number of bytes skipped.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before skipping the specified number of bytes.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="DataOutputStream"><IMG SRC="class.gif"></A></TD><TD WIDTH=499>
<H2><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">DataOutputStream</FONT></TT>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">FilterOutputStream</FONT></TD>
</TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="Implem.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">DataOutput</FONT></TD>
</TR>
</TABLE></CENTER>
<P>
See also: <TT><FONT FACE="Courier">DataInputStream</FONT></TT>.
<P>
The <TT><FONT FACE="Courier">DataOutputStream</FONT></TT> class
implements an output stream that can write Java primitive data
types in a platform-independent manner; this is the definition
for the class:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.io.DataOutputStream
extends java.io.FilterOutputStream<BR>
&nbsp;&nbsp;implements java.io.DataOutput {<BR>
&nbsp;&nbsp;// Member Variables<BR>
&nbsp;&nbsp;protected int written;<BR>
<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public DataOutputStream(OutputStream out);<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public void flush();<BR>
&nbsp;&nbsp;public final int size();<BR>
&nbsp;&nbsp;public void write(byte b[], int off, int len);<BR>
&nbsp;&nbsp;public void write(int b);<BR>
&nbsp;&nbsp;public final void writeBoolean(boolean v);<BR>
&nbsp;&nbsp;public final void writeByte(int v);<BR>
&nbsp;&nbsp;public final void writeBytes(String s);<BR>
&nbsp;&nbsp;public final void writeChar(int v);<BR>
&nbsp;&nbsp;public final void writeChars(String s);<BR>
&nbsp;&nbsp;public final void writeDouble(double v);<BR>
&nbsp;&nbsp;public final void writeFloat(float v);<BR>
&nbsp;&nbsp;public final void writeInt(int v);<BR>
&nbsp;&nbsp;public final void writeLong(long v);<BR>
&nbsp;&nbsp;public final void writeShort(int v);<BR>
&nbsp;&nbsp;public final void writeUTF(String str);<BR>
}</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=589><B>Member Variables</B></TD></TR>
</TABLE></CENTER>
<P>
Following are the member variables defined in <TT><FONT FACE="Courier">DataOutputStream</FONT></TT>:
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">protected int written</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is the number of bytes written to the output stream so far.<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">DataOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
public DataOutputStream(OutputStream out)
</BLOCKQUOTE>
<P>
This method creates a new data output stream to write data to
the out output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="parame.gif"></TD><TD >out is the output stream to write data to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Flush</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void flush() throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method flushes the data output stream, resulting in any buffered
data being written to the underlying output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">flush</FONT> in class <TT><FONT FACE="Courier">FilterOutputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Size</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final int size()</FONT></TT>
</BLOCKQUOTE>
<P>
This method returns the number of bytes written to the data output
stream thus far, which is stored in the <TT><FONT FACE="Courier">written</FONT></TT>
member variable.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the number of bytes written to the data output stream so far.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Write</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void write(byte b[], int off,
int len) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes <TT><FONT FACE="Courier">len</FONT></TT> bytes
to the data output stream from the byte array <TT><FONT FACE="Courier">b</FONT></TT>
beginning <TT><FONT FACE="Courier">off</FONT></TT> bytes into
the array.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array from which the data is written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array for the data to be read from.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the number of bytes to write.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">write</FONT> in class <TT><FONT FACE="Courier">FilterOutputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Write</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void write(int b) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes a byte value to the data output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">write</FONT> in class <TT><FONT FACE="Courier">FilterOutputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">WriteBoolean</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void writeBoolean(boolean
v) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes a Boolean value to the data output stream.
The Boolean value <TT><FONT FACE="Courier">true</FONT></TT> is
written as the byte value <TT><FONT FACE="Courier">1</FONT></TT>,
and <TT><FONT FACE="Courier">false</FONT></TT> is written as the
byte value <TT><FONT FACE="Courier">0</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the Boolean value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">WriteByte</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void writeByte(int v) throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes a byte (8-bit) value to the data output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the byte value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">WriteBytes</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void writeBytes(String s)
throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes a string to the data output stream as a sequence
of bytes.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the string to be written as bytes.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">WriteChar</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void writeChar(int v) throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes a character (16-bit) value to the data output
stream.
<P>
<CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD><TD><FONT FACE="Courier">v</FONT></TT> is the character value to be written.
</TD></TR>
</TABLE></CENTER>
<P>
<CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><FONT FACE="Courier"><IMG SRC="Throws.gif"></FONT></TT></TD>
<TD><TT><FONT FACE="Courier">IOException</FONT></TT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P>
<CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">WriteChars</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void writeChars(String s)
throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes a string to the data output stream as a sequence
of characters.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the string to be written as characters.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">WriteDouble</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void writeDouble(double
v) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes a double (64-bit) value to the data output
stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the double value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">WriteFloat</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void writeFloat(float v)
throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes a float (32-bit) value to the data output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the float value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">WriteInt</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void writeInt(int v) throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes an integer (32-bit) value to the data output
stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the integer value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">WriteLong</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void writeLong(long v) throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes a long (64-bit) value to the data output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the long value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">WriteShort</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void writeShort(int v) throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes a short (16-bit) value to the data output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the short value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">WriteUTF</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">DataOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void writeUTF(String str)
throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method encodes a string using a modified UTF-8 format and
writes it to the data output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">str</FONT> is the string to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="File"><IMG SRC="class.gif"></A></TD><TD WIDTH=499>
<H2><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">File</FONT></TT>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
See also: <TT><FONT FACE="Courier">FileDescriptor</FONT></TT>.
<P>
The <TT><FONT FACE="Courier">File</FONT></TT> class implements
a filename in a platform-independent manner; it gives you the
functionality needed to work with filenames and directories without
having to deal with the complexities associated with filenames
on a particular platform. Here is the class definition:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.io.File extends java.lang.Object
{<BR>
&nbsp;&nbsp;// Member Variables<BR>
&nbsp;&nbsp;public final static String pathSeparator;<BR>
&nbsp;&nbsp;public final static char pathSeparatorChar;<BR>
&nbsp;&nbsp;public final static String separator;<BR>
&nbsp;&nbsp;public final static char separatorChar;<BR>
<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public File(File dir, String name);<BR>
&nbsp;&nbsp;public File(String path);<BR>
&nbsp;&nbsp;public File(String path, String name);<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public boolean canRead();<BR>
&nbsp;&nbsp;public boolean canWrite();<BR>
&nbsp;&nbsp;public boolean delete();<BR>
&nbsp;&nbsp;public boolean equals(Object obj);<BR>
&nbsp;&nbsp;public boolean exists();<BR>
&nbsp;&nbsp;public String getAbsolutePath();<BR>
&nbsp;&nbsp;public String getName();<BR>
&nbsp;&nbsp;public String getParent();<BR>
&nbsp;&nbsp;public String getPath();<BR>
&nbsp;&nbsp;public int hashCode();<BR>
&nbsp;&nbsp;public boolean isAbsolute();<BR>
&nbsp;&nbsp;public boolean isDirectory();<BR>
&nbsp;&nbsp;public boolean isFile();<BR>
&nbsp;&nbsp;public long lastModified();<BR>
&nbsp;&nbsp;public long length();<BR>
&nbsp;&nbsp;public String[] list();<BR>
&nbsp;&nbsp;public String[] list(FilenameFilter filter);<BR>
&nbsp;&nbsp;public boolean mkdir();<BR>
&nbsp;&nbsp;public boolean mkdirs();<BR>
&nbsp;&nbsp;public boolean renameTo(File dest);<BR>
&nbsp;&nbsp;public String toString();<BR>
}</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=589><B>Member Variables</B></TD></TR>
</TABLE></CENTER>
<P>
Following are the member variables defined in <TT><FONT FACE="Courier">File</FONT></TT>:
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static String pathSeparator</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is the platform-specific path separator string.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static char pathSeparatorChar</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is the platform-specific path separator character, which
separates filenames in a path list.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static String separator</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is the platform-specific file separator string.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static char separatorChar</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is the platform-specific file separator character, which
separates the file and directory components in a filename.<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public File(File dir, String name)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates the filename of an underlying file based
on the specified directory and filename. If no directory is specified
in the <TT><FONT FACE="Courier">dir</FONT></TT> argument, the
constructor assumes the file is in the current directory.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">dir</FONT> is the directory where the file is located.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">name</FONT> is the filename.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public File(String path)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates the filename of an underlying file based
on the specified file path.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">path</FONT> is the file path.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NullPointerException</FONT> if the file path is null.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public File(String path, String name)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates the filename of an underlying file based
on the specified path and filename.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">path</FONT> is the path where the file is located.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">name</FONT> is the filename.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">CanRead</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean canRead()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the underlying file can be read
from. In other words, if the file is readable, <TT><FONT FACE="Courier">canRead</FONT></TT>
determines whether the file exists.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">true</FONT> if the file can be read from; <TT><FONT FACE="Courier">false</FONT></TT> otherwise.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">SecurityException</FONT> if the application doesn't have read access to the file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">CanWrite</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean canWrite()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the underlying file can be written
to. In other words, if the file is writeable, <TT><FONT FACE="Courier">canWrite</FONT></TT>
determines whether the file exists.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">true</FONT> if the file can be written to; <TT><FONT FACE="Courier">false</FONT></TT> otherwise.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the application doesn't have write access to the file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Delete</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean delete()</FONT></TT>
</BLOCKQUOTE>
<P>
This method deletes the underlying file.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">true</FONT> if the file is deleted; <TT><FONT FACE="Courier">false</FONT></TT> otherwise.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the application doesn't have access to delete the file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Equals</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean equals(Object obj)</FONT></TT>
</BLOCKQUOTE>
<P>
This method compares the path name of the <TT><FONT FACE="Courier">obj</FONT></TT>
<TT><FONT FACE="Courier">File</FONT></TT> object to the path name
of the underlying file.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">obj</FONT> is the object to compare with.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">true</FONT> if the path names are equal; <TT><FONT FACE="Courier">false</FONT></TT> otherwise.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">equals</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">exists</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean exists()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the underlying file exists by opening
it for reading and then closing it.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">true</FONT> if the file exists; <TT><FONT FACE="Courier">false</FONT></TT> otherwise.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the application doesn't have read access to the file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">getAbsolutePath</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String getAbsolutePath()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the platform-specific absolute path name
of the underlying file.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the absolute path name of the file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">getName</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String getName()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the filename of the underlying file, which
doesn't include any path information.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the filename of the file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">getParent</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String getParent()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the parent directory of the underlying
file, which is the immediate directory where the file is located.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the parent directory of the file, or <TT><FONT FACE="Courier">null</FONT></TT> if the file is located in the root directory.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">getPath</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String getPath()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the path name of the underlying file.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the path name of the file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">hashCode</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int hashCode()</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates a hash code for the underlying file.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >a hash code for the file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="Overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">hashCode</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">isAbsolute</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean isAbsolute()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether this object represents an absolute
path name for the underlying file. Note that absolute path names
are platform specific.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">true</FONT> if the path name for the file is absolute; <TT><FONT FACE="Courier">false</FONT></TT> otherwise.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">isDirectory</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean isDirectory()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the underlying file is actually
a directory.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">true</FONT> if the file is actually a directory; <TT><FONT FACE="Courier">false</FONT></TT> otherwise.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the application doesn't have read access to the file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">isFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean isFile()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the underlying file is a normal
file-that is, not a directory.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">true</FONT> if the file is a normal file; <TT><FONT FACE="Courier">false</FONT></TT> otherwise.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the application doesn't have read access to the file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">lastModified</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public long lastModified()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the last modification time of the underlying
file. Note that this time is system specific and is not absolute;
in other words, use the time only to compare against other times
retrieved by using this method.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the last modification time of the file, or <TT><FONT FACE="Courier">0</FONT></TT> if the file doesn't exist.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the application doesn't have read access to the file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">length</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public long length()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the length in bytes of the underlying file.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the length of the file in bytes.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the application doesn't have read access to the file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">list</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String[] list()</FONT></TT>
</BLOCKQUOTE>
<P>
This method builds a list of the filenames in the directory represented
by this object. Note that the underlying file must actually be
a directory for this method to work.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >an array containing the filenames located in the directory.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the application doesn't have read access to the file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">list</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String[] list(FilenameFilter filter)</FONT></TT>
</BLOCKQUOTE>
<P>
This method builds a list, using the specified filename filter,
of the filenames in the directory represented by this object.
Note that the underlying file must actually be a directory for
this method to work.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">filter</FONT> is the filename filter used to select the filenames.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >an array containing the filtered filenames in the directory.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the application doesn't have read access to the file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">mkdir</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean mkdir()</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a directory based on the path name specified
by this object.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">true</FONT> if the directory is created; <TT><FONT FACE="Courier">false</FONT></TT> otherwise.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the application doesn't have write access to the file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">mkdirs</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean mkdirs()</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a directory based on the path name specified
by this object, including all necessary parent directories.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">true</FONT> if the directory (or directories) is created; <TT><FONT FACE="Courier">false</FONT></TT> otherwise.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the application doesn't have write access to the file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">renameTo</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean renameTo(File dest)</FONT></TT>
</BLOCKQUOTE>
<P>
This method renames the underlying file to the filename specified
by the <TT><FONT FACE="Courier">dest</FONT></TT> file object.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">dest</FONT> is the new filename.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">true</FONT> if the file is renamed; <TT><FONT FACE="Courier">false</FONT></TT> otherwise.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the application doesn't have write access to both the underlying file and the file represented by the <TT><FONT FACE="Courier">dest</FONT></TT> file object.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">File</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String toString()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a string representation of the path name
for the underlying file.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >a string representing the path name of the file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">toString</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="FileDescriptor"><IMG SRC="class.gif"></A></TD><TD WIDTH=499>
<H2><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">FileDescriptor</FONT></TT>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD > <TT><FONT FACE="Courier">Object</FONT></TT></TD>
</TR>
</TABLE></CENTER>
<P>
See also: <TT><FONT FACE="Courier">File</FONT></TT>.
<P>
The <TT><FONT FACE="Courier">FileDescriptor</FONT></TT> class
implements a handle to a platform-specific file or socket structure.
<TT><FONT FACE="Courier">FileDescriptor</FONT></TT> objects are
primarily used internally by the Java system and are never created
by an application directly. Here is the class definition:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final class java.io.FileDescriptor
extends java.lang.Object {<BR>
&nbsp;&nbsp;// Member Variables<BR>
&nbsp;&nbsp;public final static FileDescriptor err;<BR>
&nbsp;&nbsp;public final static FileDescriptor in;<BR>
&nbsp;&nbsp;public final static FileDescriptor out;<BR>
<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public FileDescriptor();<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public boolean valid();<BR>
}</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=589><B>Member Variables</B></TD></TR>
</TABLE></CENTER>
<P>
Following are the member variables defined in <TT><FONT FACE="Courier">FileDescriptor</FONT></TT>:
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static FileDescriptor
err</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is a handle to the standard error stream.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static FileDescriptor
in</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is a handle to the standard input stream.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static FileDescriptor
out</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is a handle to the standard output stream.<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">FileDescriptor</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FileDescriptor</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public FileDescriptor()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default <TT><FONT FACE="Courier">FileDescriptor</FONT></TT>
object.<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">valid</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FileDescriptor</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean valid()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether this object represents a valid
open file or socket.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">true</FONT> if the underlying file or socket is valid; <TT><FONT FACE="Courier">false</FONT></TT> otherwise.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="FileInputStream"><IMG SRC="class.gif"></A></TD><TD WIDTH=499>
<H2><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">FileInputStream</FONT></TT>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">InputStream</FONT></TD></TR>
</TABLE></CENTER>
<P>
See also: <TT><FONT FACE="Courier">FileOutputStream</FONT></TT>.
<P>
The <TT><FONT FACE="Courier">FileInputStream</FONT></TT> class
implements an input stream for reading data from a file or file
descriptor; this is the class definition:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.io.FileInputStream
extends java.io.InputStream<BR>
{<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public FileInputStream(File file);<BR>
&nbsp;&nbsp;public FileInputStream(FileDescriptor fdObj);<BR>
&nbsp;&nbsp;public FileInputStream(String name);<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public int available();<BR>
&nbsp;&nbsp;public void close();<BR>
&nbsp;&nbsp;protected void finalize();<BR>
&nbsp;&nbsp;public final FileDescriptor getFD();<BR>
&nbsp;&nbsp;public int read();<BR>
&nbsp;&nbsp;public int read(byte b[]);<BR>
&nbsp;&nbsp;public int read(byte b[], int off, int len);<BR>
&nbsp;&nbsp;public long skip(long n);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">FileInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FileInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public FileInputStream(File file) throws
FileNotFoundException</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a file input stream to read data from
the specified file.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">file</FONT> is the file to be opened for reading.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">FileNotFoundException</FONT> if the file is not found.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the application doesn't have read access to the file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">FileInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FileInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public FileInputStream(FileDescriptor
fdObj)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a file input stream to read data from
the file represented by the specified file descriptor.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">fdObj</FONT> is the file descriptor representing the file to be opened for reading.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the application doesn't have read access to the file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">FileInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FileInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public FileInputStream(String name) throws
FileNotFoundException</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a file input stream to read data from
the file with the specified filename.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">name</FONT> is the filename of the file to be opened for reading.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">FileNotFoundException</FONT> if the file is not found.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the application doesn't have read access to the file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">available</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FileInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int available() throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the number of bytes that can be read from
the file input stream without blocking.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the number of available bytes.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">available</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">close</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FileInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void close() throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method closes the file input stream, releasing any resources
associated with the stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">close</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">finalize</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FileInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">protected void finalize() throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method makes sure the <TT><FONT FACE="Courier">close</FONT></TT>
method is called when the file input stream is cleaned up by the
Java garbage collector.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">finalize</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">getFD</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FileInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final FileDescriptor getFD() throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the file descriptor associated with the
file input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the file descriptor associated with the stream.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FileInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int read() throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads a byte value from the file input stream, blocking
until the byte is read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >an integer representing the byte value read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">read</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FileInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int read(byte b[]) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads up to <TT><FONT FACE="Courier">b.length</FONT></TT>
bytes from the file input stream into the byte array <TT><FONT FACE="Courier">b</FONT></TT>,
blocking until all bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array into which the data is read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the actual number of bytes read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">read</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FileInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int read(byte b[], int off, int
len) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads up to <TT><FONT FACE="Courier">len</FONT></TT>
bytes from the file input stream into the byte array <TT><FONT FACE="Courier">b</FONT></TT>
beginning <TT><FONT FACE="Courier">off</FONT></TT> bytes into
the array, blocking until all bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array into which the data is read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array for the data to be written to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the maximum number of bytes to read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the actual number of bytes read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">read</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">skip</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FileInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public long skip(long n) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method skips <TT><FONT FACE="Courier">n</FONT></TT> bytes
of data in the file input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">n</FONT> is the number of bytes to skip.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the actual number of bytes skipped.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">skip</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="FileOutputStream"><IMG SRC="class.gif"></A></TD><TD WIDTH=499>
<H2><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">FileOutputStream</FONT></TT>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">OutputStream</FONT></TD></TR>
</TABLE></CENTER>
<P>
See also: <TT><FONT FACE="Courier">FileInputStream</FONT></TT>.
<P>
The <TT><FONT FACE="Courier">FileOutputStream</FONT></TT> class
implements an output stream for writing data to a file or file
descriptor; this is the class definition:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.io.FileOutputStream
extends java.io.OutputStream<BR>
{<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public FileOutputStream(File file);<BR>
&nbsp;&nbsp;public FileOutputStream(FileDescriptor fdObj);<BR>
&nbsp;&nbsp;public FileOutputStream(String name);<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public void close();<BR>
&nbsp;&nbsp;protected void finalize();<BR>
&nbsp;&nbsp;public final FileDescriptor getFD();<BR>
&nbsp;&nbsp;public void write(byte b[]);<BR>
&nbsp;&nbsp;public void write(byte b[], int off, int len);<BR>
&nbsp;&nbsp;public void write(int b);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">FileOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FileOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public FileOutputStream(File file) throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a file output stream to write data to
the specified file.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">file</FONT> is the file to be opened for writing.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">FileNotFoundException</FONT> if the file could not be opened for writing.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the application doesn't have write access to the file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">FileOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FileOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public FileOutputStream(FileDescriptor
fdObj)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a file output stream to write data to
the file represented by the specified file descriptor.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">fdObj</FONT> is the file descriptor representing the file to be opened for writing.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the application doesn't have write access to the file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">FileOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FileOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public FileOutputStream(String name)
throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a file output stream to write data to
the file with the specified filename.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">name</FONT> is the filename of the file to be opened for writing.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">FileNotFoundException</FONT> if the file is not found.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the application doesn't have read access to the file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">close</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FileOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void close() throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method closes the file output stream, releasing any resources
associated with it.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">close</FONT> in class <TT><FONT FACE="Courier">OutputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">finalize</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FileOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">protected void finalize() throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method makes sure the <TT><FONT FACE="Courier">close</FONT></TT>
method is called when the file output stream is cleaned up by
the Java garbage collector.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">finalize</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">getFD</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FileOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final FileDescriptor getFD() throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the file descriptor associated with the
file output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the file descriptor associated with the stream.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">write</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FileOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void write(byte b[]) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes <TT><FONT FACE="Courier">b.length</FONT></TT>
bytes to the file output stream from the byte array <TT><FONT FACE="Courier">b</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array from which the data is written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">write</FONT> in class <TT><FONT FACE="Courier">OutputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">write</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FileOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void write(byte b[], int off,
int len) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes <TT><FONT FACE="Courier">len</FONT></TT> bytes
to the file output stream from the byte array <TT><FONT FACE="Courier">b</FONT></TT>
beginning <TT><FONT FACE="Courier">off</FONT></TT> bytes into
the array.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array from which the data is written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array for the data to be read from.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the number of bytes to write.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">write</FONT> in class <TT><FONT FACE="Courier">OutputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">write</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FileOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void write(int b) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes a byte value to the file output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">write</FONT> in class <TT><FONT FACE="Courier">OutputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="FilterInputStream"><IMG SRC="class.gif"></A></TD><TD WIDTH=499>
<H2><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">FilterInputStream</FONT></TT>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD > <TT><FONT FACE="Courier">InputStream</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>
See also: <TT><FONT FACE="Courier">FilterOutputStream</FONT></TT>.
<P>
The <TT><FONT FACE="Courier">FilterInputStream</FONT></TT> class
defines an input stream filter used to filter data on an underlying
input stream. Most of the methods defined in this class merely
call corresponding methods in the underlying input stream, and
you simply override appropriate methods to supply the <BR>
filtering functionality. <TT><FONT FACE="Courier">FilterInputStream</FONT></TT>
is the basis for all other input stream filter implementations.
Derived filtered input streams can be linked for complex filtering
operations; here is the class definition:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.io.FilterInputStream
extends java.io.InputStream {<BR>
&nbsp;&nbsp;// Member Variables<BR>
&nbsp;&nbsp;protected InputStream in;<BR>
<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;protected FilterInputStream(InputStream in);<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public int available();<BR>
&nbsp;&nbsp;public void close();<BR>
&nbsp;&nbsp;public void mark(int readlimit);<BR>
&nbsp;&nbsp;public boolean markSupported();<BR>
&nbsp;&nbsp;public int read();<BR>
&nbsp;&nbsp;public int read(byte b[]);<BR>
&nbsp;&nbsp;public int read(byte b[], int off, int len);<BR>
&nbsp;&nbsp;public void reset();<BR>
&nbsp;&nbsp;public long skip(long n);<BR>
}</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=583><B>Member Variables</B></TD></TR>
</TABLE></CENTER>
<P>
Following are the member variables defined in <TT><FONT FACE="Courier">FilterInputStream</FONT></TT>:
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">protected InputStream in</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is the underlying input stream being filtered.<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">FilterInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FilterInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">protected FilterInputStream(InputStream
in)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a filtered input stream based on the
specified underlying input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">in</FONT> is the input stream to be filtered.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">available</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FilterInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int available() throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the number of bytes that can be read from
the filtered input stream without blocking.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="parame.gif"></TD><TD >the number of available bytes.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">available</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">close</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FilterInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void close() throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method closes the filtered input stream, releasing any resources
associated with it.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">close</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">mark</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FilterInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void mark(int readlimit)</FONT></TT>
</BLOCKQUOTE>
<P>
This method marks the current read position in the filtered input
stream. The <TT><FONT FACE="Courier">reset</FONT></TT> method
can be used to reset the read position to this mark; subsequent
reads will read data beginning at the mark position. The mark
position is invalidated after <TT><FONT FACE="Courier">readlimit</FONT></TT>
bytes have been read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">readlimit</FONT> is the maximum number of bytes that can be read before the mark position becomes invalid.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">mark</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">markSupported</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FilterInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean markSupported()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the filtered input stream supports
the <TT><FONT FACE="Courier">mark</FONT></TT> and <TT><FONT FACE="Courier">reset</FONT></TT>
<BR>
methods.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">true</FONT> if the <TT><FONT FACE="Courier">mark</FONT></TT> and <TT><FONT FACE="Courier">reset</FONT></TT> methods are supported; <TT><FONT FACE="Courier">false</FONT></TT> otherwise.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">markSupported</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FilterInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int read() throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads a byte value from the filtered input stream,
blocking until the byte is read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >an integer representing the byte value read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">read</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FilterInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int read(byte b[]) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads up to <TT><FONT FACE="Courier">b.length</FONT></TT>
bytes from the filtered input stream into the byte array <TT><FONT FACE="Courier">b</FONT></TT>,
blocking until all bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array into which the data is read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the actual number of bytes read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">read</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FilterInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int read(byte b[], int off, int
len) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method reads up to <TT><FONT FACE="Courier">len</FONT></TT>
bytes from the filtered input stream into the byte array <TT><FONT FACE="Courier">b</FONT></TT>
beginning <TT><FONT FACE="Courier">off</FONT></TT> bytes into
the array, blocking until all bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array into which the data is read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array for the data to be written to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the maximum number of bytes to read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the actual number of bytes read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">read</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">reset</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FilterInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void reset() throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method resets the read position in the input stream to the
current mark position, as set by the <TT><FONT FACE="Courier">mark</FONT></TT>
method.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IOException</FONT> if the stream has not been marked or if the mark is invalid.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">reset</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">skip</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FilterInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public long skip(long n) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method skips <TT><FONT FACE="Courier">n</FONT></TT> bytes
of data in the input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">n</FONT> is the number of bytes to skip.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the actual number of bytes skipped.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">skip</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="FilterOutputStream"><IMG SRC="class.gif"></A></TD><TD WIDTH=499>
<H2><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">FilterOutputStream</FONT></TT>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD > <TT><FONT FACE="Courier">OutputStream</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>
See also: <TT><FONT FACE="Courier">FilterOutputStream</FONT></TT>.
<P>
The <TT><FONT FACE="Courier">FilterOutputStream</FONT></TT> class
defines an output stream filter used to filter data on an underlying
output stream. Most of the methods defined in this class merely
call corresponding methods in the underlying output stream, and
you simply override appropriate methods to supply the filtering
functionality. <TT><FONT FACE="Courier">FilterOutputStream</FONT></TT>
is the basis for all other output stream filter implementations.
Derived filtered output streams can be linked for complex filtering
operations; this is the class definition:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.io.FilterOutputStream
extends java.io.OutputStream {<BR>
&nbsp;&nbsp;// Member Variables<BR>
&nbsp;&nbsp;protected OutputStream out;<BR>
<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public FilterOutputStream(OutputStream&nbsp;&nbsp;out);
<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public void close();<BR>
&nbsp;&nbsp;public void flush();<BR>
&nbsp;&nbsp;public void write(byte b[]);<BR>
&nbsp;&nbsp;public void write(byte b[], int off, int len);<BR>
&nbsp;&nbsp;public void write(int b);<BR>
}</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=589><B>Member Variables</B></TD></TR>
</TABLE></CENTER>
<P>
Following are the member variables defined in <TT><FONT FACE="Courier">FilterOutputStream</FONT></TT>:
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">protected OutputStream out</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is the underlying output stream being filtered.<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">FilterOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FilterOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public FilterOutputStream(OutputStream
out)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a filtered output stream based on the
specified underlying output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">out</FONT> is the output stream to be filtered.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">close</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FilterOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void close() throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method closes the filtered output stream, releasing any resources
associated with it.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">close</FONT> in class <TT><FONT FACE="Courier">OutputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">flush</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FilterOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void flush() throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method flushes the filtered output stream, resulting in any
buffered data being written to the underlying output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">flush</FONT> in class <TT><FONT FACE="Courier">OutputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">write</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FilterOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void write(byte b[]) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes <TT><FONT FACE="Courier">b.length</FONT></TT>
bytes to the filtered output stream from the byte array <TT><FONT FACE="Courier">b</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array from which the data is written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">write</FONT> in class <TT><FONT FACE="Courier">OutputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">write</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FilterOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void write(byte b[], int off,
int len) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method writes <TT><FONT FACE="Courier">len</FONT></TT> bytes
to the filtered output stream from the byte array <TT><FONT FACE="Courier">b</FONT></TT>
beginning <TT><FONT FACE="Courier">off</FONT></TT> bytes into
the array, blocking until all bytes are written.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array from which the data is written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array for the data to be read from.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the number of bytes to write.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">write</FONT> in class <TT><FONT FACE="Courier">OutputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">write</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FilterOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void write(int b) throws IOException</FONT></TT>
<P>
This method writes a byte value to the buffered output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">write</FONT> in class <TT><FONT FACE="Courier">OutputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="InputStream"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">InputStream</FONT></TT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD > <TT><FONT FACE="Courier">Object</FONT></TT></TD>
</TR>
</TABLE></CENTER>
<P>
See also: <TT><FONT FACE="Courier">OutputStream</FONT></TT>.
<P>
The <TT><FONT FACE="Courier">InputStream</FONT></TT> class is
an abstract class representing an input stream of bytes; all input
streams are based on this class. Here is the <TT><FONT FACE="Courier">InputStream</FONT></TT>
definition:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract class java.io.InputStream
extends java.lang.Object {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public InputStream();<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public int available();<BR>
&nbsp;&nbsp;public void close();<BR>
&nbsp;&nbsp;public void mark(int readlimit);<BR>
&nbsp;&nbsp;public boolean markSupported();<BR>
&nbsp;&nbsp;public abstract int read();<BR>
&nbsp;&nbsp;public int read(byte b[]);<BR>
&nbsp;&nbsp;public int read(byte b[], int off, int len);<BR>
&nbsp;&nbsp;public void reset();<BR>
&nbsp;&nbsp;public long skip(long n);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">InputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">InputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public InputStream()</FONT></TT>
<P>
This constructor creates a default input stream.<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">available</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">InputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public int available() throws IOException</FONT></TT>
<P>
This method determines the number of bytes that can be read from
the input stream without blocking. This method should be overridden
in all subclasses because it returns <TT><FONT FACE="Courier">0</FONT></TT>
in <TT><FONT FACE="Courier">InputStream</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the number of available bytes.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">close</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">InputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void close() throws IOException</FONT></TT>
<P>
This method closes the input stream, releasing any resources associated
with it. This method should usually be overridden in subclasses,
since it does nothing in <TT><FONT FACE="Courier">InputStream</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">mark</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">InputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void mark(int readlimit)</FONT></TT>
<P>
This method marks the current read position in the input stream.
The <TT><FONT FACE="Courier">reset</FONT></TT> method can be used
to reset the read 
<P>
position to this mark; subsequent reads will read data beginning
at the mark position. The mark position is invalidated after <TT><FONT FACE="Courier">readlimit</FONT></TT>
bytes have been read. This method should usually be overridden
in subclasses because it does nothing in <TT><FONT FACE="Courier">InputStream</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">readlimit</FONT> is the maximum number of bytes that can be read before the mark position becomes invalid.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">markSupported</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">InputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public boolean markSupported()</FONT></TT>
<P>
This method determines whether the input stream supports the <TT><FONT FACE="Courier">mark</FONT></TT>
and <TT><FONT FACE="Courier">reset</FONT></TT> methods. This method
should usually be overridden in subclasses, since it always returns
<TT><FONT FACE="Courier">false</FONT></TT> in <TT><FONT FACE="Courier">InputStream</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">true</FONT> if the <TT><FONT FACE="Courier">mark</FONT></TT> and <TT><FONT FACE="Courier">reset</FONT></TT> methods are supported; <TT><FONT FACE="Courier">false</FONT></TT> otherwise.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">InputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public abstract int read() throws IOException</FONT></TT>
<P>
This method reads a byte value from the input stream, blocking
until the byte is read. This method must be overridden in all
subclasses because it's defined as abstract in <TT><FONT FACE="Courier">InputStream</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >an integer representing the byte value read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">InputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public int read(byte b[]) throws IOException</FONT></TT>
<P>
This method reads up to <TT><FONT FACE="Courier">b.length</FONT></TT>
bytes from the input stream into the byte array <TT><FONT FACE="Courier">b</FONT></TT>,
blocking until all bytes are read. This method actually calls
the three-parameter version of <TT><FONT FACE="Courier">read</FONT></TT>,
passing <TT><FONT FACE="Courier">b</FONT></TT>, <TT><FONT FACE="Courier">0</FONT></TT>,
and <TT><FONT FACE="Courier">b.length</FONT></TT> as the parameters.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array into which the data is read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the actual number of bytes read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">InputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public int read(byte b[], int off, int
len) throws IOException</FONT></TT>
<P>
This method reads up to <TT><FONT FACE="Courier">len</FONT></TT>
bytes from the input stream into the byte array <TT><FONT FACE="Courier">b</FONT></TT>
beginning <TT><FONT FACE="Courier">off</FONT></TT> bytes into
the array, blocking until all bytes are read. This method actually
reads each byte by calling the <TT><FONT FACE="Courier">read</FONT></TT>
method that takes no parameters. Subclasses should offer a more efficient implementation of this method, one that doesn't rely
on the other <TT><FONT FACE="Courier">read</FONT></TT> method,
if possible.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array into which the data is read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array for the data to be written to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the maximum number of bytes to read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the actual number of bytes read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">reset</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">InputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void reset() throws IOException</FONT></TT>
<P>
This method resets the read position in the input stream to the
current mark position, as set by the <TT><FONT FACE="Courier">mark</FONT></TT>
method. This method should be overridden in subclasses requiring
mark/reset functionality, since it always throws an <TT><FONT FACE="Courier">IOException</FONT></TT>
in <TT><FONT FACE="Courier">InputStream</FONT></TT>; this happens
because input streams don't support, by default, mark/reset functionality.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IOException</FONT> if the stream has not been marked or if the mark is invalid.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">skip</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">InputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public long skip(long n) throws IOException</FONT></TT>
<P>
This method skips <TT><FONT FACE="Courier">n</FONT></TT> bytes
of data in the input stream. This method should usually be overridden
with a more efficient version in subclasses because it reads skipped
data into a temporary byte array in <TT><FONT FACE="Courier">InputStream</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">n</FONT> is the number of bytes to skip.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the actual number of bytes skipped.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD WIDTH=553><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="LineNumberInputStream"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">LineNumberInputStream</FONT></TT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD > <TT><FONT FACE="Courier">FilterInputStream</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>
The <TT><FONT FACE="Courier">LineNumberInputStream</FONT></TT>
class implements an input stream that keeps track of how many
lines have passed through the stream. A line is defined as a sequence
of bytes followed by either a carriage return character (<TT><FONT FACE="Courier">\r</FONT></TT>),
a newline character (<TT><FONT FACE="Courier">\n</FONT></TT>),
or a carriage return character immediately followed by a newline
character. In all three cases, the newline is interpreted as a
single character. Here is the class definition:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.io.LineNumberInputStream
extends java.io.FilterInputStream {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public LineNumberInputStream(InputStream&nbsp;&nbsp;in);
<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public int available();<BR>
&nbsp;&nbsp;public int getLineNumber();<BR>
&nbsp;&nbsp;public void mark(int readlimit);<BR>
&nbsp;&nbsp;public int read();<BR>
&nbsp;&nbsp;public int read(byte b[], int off, int len);<BR>
&nbsp;&nbsp;public void reset();<BR>
&nbsp;&nbsp;public void setLineNumber(int lineNumber);<BR>
&nbsp;&nbsp;public long skip(long n);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">LineNumberInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">LineNumberInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public LineNumberInputStream(InputStream
in)</FONT></TT>
<P>
This constructor creates a line number input stream that counts
lines based on the specified input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">in</FONT> is the input stream to count lines from.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">available</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">LineNumberInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public int available() throws IOException</FONT></TT>
<P>
This method determines the number of bytes that can be read from
the input stream without blocking. Note that this number could
be as small as half that of the underlying stream, since <TT><FONT FACE="Courier">LineNumberInputStream</FONT></TT>
combines carriage return/newline character pairs into a single
newline byte.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the number of available bytes.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">available</FONT> in class <TT><FONT FACE="Courier">FilterInputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">getLineNumber</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">LineNumberInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public int getLineNumber()</FONT></TT>
<P>
This method determines the current line number for the input stream,
which is the count of how many lines the stream has processed.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the current line number.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">mark</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">LineNumberInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void mark(int readlimit)</FONT></TT>
<P>
This method marks the current read position in the input stream.
The <TT><FONT FACE="Courier">reset</FONT></TT> method can be used
to reset the read position to this mark; subsequent reads will
read data beginning at the mark position. The mark position is
invalidated after <TT><FONT FACE="Courier">readlimit</FONT></TT>
bytes have been read. The <TT><FONT FACE="Courier">mark</FONT></TT>
method ensures that the current line number is stored so it isn't
invalidated by a subsequent call to <TT><FONT FACE="Courier">reset</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">readlimit</FONT> is the maximum number of bytes that can be read before the mark position becomes invalid.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">mark</FONT> in class <TT><FONT FACE="Courier">FilterInputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">LineNumberInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public int read() throws IOException</FONT></TT>
<P>
This method reads a byte value from the input stream, blocking
until the byte is read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >an integer representing the byte value read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">read</FONT> in class <TT><FONT FACE="Courier">FilterInputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">LineNumberInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public int read(byte b[], int off, int
len) throws IOException</FONT></TT>
<P>
This method reads up to <TT><FONT FACE="Courier">len</FONT></TT>
bytes from the input stream into the byte array <TT><FONT FACE="Courier">b</FONT></TT>
beginning <TT><FONT FACE="Courier">off</FONT></TT> bytes into
the array, blocking until all bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array into which the data is read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array for the data to be written to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the maximum number of bytes to read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the actual number of bytes read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">read</FONT> in class <TT><FONT FACE="Courier">FilterInputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">reset</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">LineNumberInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void reset() throws IOException</FONT></TT>
<P>
This method resets the read position in the input stream to the
current mark position, as set by the <TT><FONT FACE="Courier">mark</FONT></TT>
method. The current line number is reset to the value it held
when the <TT><FONT FACE="Courier">mark</FONT></TT> method was
called.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">reset</FONT> in class <TT><FONT FACE="Courier">FilterInputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">setLineNumber</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">LineNumberInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void setLineNumber(int lineNumber)</FONT></TT>
<P>
This method sets the current line number to the specified line
number.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">lineNumber</FONT> is the new line number to be set.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">skip</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">LineNumberInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public long skip(long n) throws IOException</FONT></TT>
<P>
This method skips <TT><FONT FACE="Courier">n</FONT></TT> bytes
of data in the input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">n</FONT> is the number of bytes to skip.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the actual number of bytes skipped.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">skip</FONT> in class <TT><FONT FACE="Courier">FilterInputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="OutputStream"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">OutputStream</FONT></TT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
See also: <TT><FONT FACE="Courier">InputStream</FONT></TT>.
<P>
<TT><FONT FACE="Courier">OutputStream</FONT></TT> is an abstract
class representing an output stream of bytes. All output streams
are based on <TT><FONT FACE="Courier">OutputStream</FONT></TT>;
here is its class definition:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract class java.io.OutputStream
extends java.lang.Object {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public OutputStream();<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public void close();<BR>
&nbsp;&nbsp;public void flush();<BR>
&nbsp;&nbsp;public void write(byte b[]);<BR>
&nbsp;&nbsp;public void write(byte b[], int off, int len);<BR>
&nbsp;&nbsp;public abstract void write(int b);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">OutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">OutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public OutputStream()</FONT></TT>
<P>
This constructor creates a default output stream.<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">close</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">OutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void close() throws IOException</FONT></TT>
<P>
This method closes the output stream, releasing any resources
associated with it. This method should usually be overridden in
subclasses, since it does nothing in <TT><FONT FACE="Courier">OutputStream</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">flush</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">OutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void flush() throws IOException</FONT></TT>
<P>
This method flushes the output stream, resulting in any buffered
data being written to the underlying output stream. It should
usually be overridden in subclasses because it does nothing in
<TT><FONT FACE="Courier">OutputStream</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">write</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">OutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void write(byte b[]) throws IOException</FONT></TT>
<P>
This method writes <TT><FONT FACE="Courier">b.length</FONT></TT>
bytes to the output stream from the byte array <TT><FONT FACE="Courier">b</FONT></TT>.
This method actually calls the three-parameter version of <TT><FONT FACE="Courier">write</FONT></TT>,
passing <TT><FONT FACE="Courier">b</FONT></TT>, <TT><FONT FACE="Courier">0</FONT></TT>,
and <TT><FONT FACE="Courier">b.length</FONT></TT> as the parameters.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array from which the data is written.
</TD></TR>
</TABLE></CENTER>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">write</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">OutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void write(byte b[], int off,
int len) throws IOException</FONT></TT>
<P>
This method writes <TT><FONT FACE="Courier">len</FONT></TT> bytes
to the output stream from the byte array <TT><FONT FACE="Courier">b</FONT></TT>
beginning <TT><FONT FACE="Courier">off</FONT></TT> bytes into
the array. It actually writes each byte by calling the <TT><FONT FACE="Courier">write</FONT></TT>
method that takes one parameter. Subclasses should offer a more
efficient way for this method to work that doesn't rely on the
other <TT><FONT FACE="Courier">write</FONT></TT> method, if possible.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array from which the data is written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array for the data to be read from.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the number of bytes to write.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">write</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">OutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public abstract void write(int b) throws
IOException</FONT></TT>
<P>
This method writes a byte value to the output stream. This method
must be overridden in all subclasses because it's defined as abstract
in <TT><FONT FACE="Courier">OutputStream</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="PipedInputStream"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">PipedInputStream</FONT></TT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">InputStream</FONT></TD></TR>
</TABLE></CENTER>
<P>
See also: <TT><FONT FACE="Courier">PipedOutputStream</FONT></TT>.
<P>
This class implements a piped input stream, which acts as the
receiving end of a communications pipe. Piped input streams must
be connected to a piped output stream to receive data. In other
words, a piped output stream must be used to send the data received
by a piped input stream. Here is the definition for the <TT><FONT FACE="Courier">PipedInputStream</FONT></TT>
class:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.io.PipedInputStream
extends java.io.InputStream {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public PipedInputStream();<BR>
&nbsp;&nbsp;public PipedInputStream(PipedOutputStream src);<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public void close();<BR>
&nbsp;&nbsp;public void connect(PipedOutputStream src);<BR>
&nbsp;&nbsp;public int read();<BR>
&nbsp;&nbsp;public int read(byte b[], int off, int len);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">PipedInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PipedInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public PipedInputStream()</FONT></TT>
<P>
This constructor creates a piped input stream that isn't connected
to anything. The stream must be connected to a piped output stream
with the <TT><FONT FACE="Courier">connect</FONT></TT> method before
it can be used.<P><CENTER><TABLE BORDER WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">PipedInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PipedInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public PipedInputStream(PipedOutputStream
src) throws IOException</FONT></TT>
<P>
This constructor creates a piped input stream connected to the
specified piped output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">src</FONT> is the piped output stream to connect to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">close</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PipedInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void close() throws IOException</FONT></TT>
<P>
This method closes the piped input stream, releasing any resources
associated with it.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">close</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">connect</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PipedInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void connect(PipedOutputStream
src) throws IOException</FONT></TT>
<P>
This method connects the input stream to the specified piped output
stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">src</FONT> is the piped output stream to connect to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PipedInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public int read() throws IOException</FONT></TT>
<P>
This method reads a byte value from the piped input stream, blocking
until the byte is read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >an integer representing the byte value read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">read</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PipedInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public int read(byte b[], int off, int
len) throws IOException</FONT></TT>
<P>
This method reads up to <TT><FONT FACE="Courier">len</FONT></TT>
bytes from the piped input stream into the byte array <TT><FONT FACE="Courier">b</FONT></TT>
beginning <TT><FONT FACE="Courier">off</FONT></TT> bytes into
the array, blocking until all bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array into which the data is read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array for the data to be written to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the maximum number of bytes to read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the actual number of bytes read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">read</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="PipedOutputStream"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">PipedOutputStream</FONT></TT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">OutputStream</FONT></TD></TR>
</TABLE></CENTER>
<P>
See also: <TT><FONT FACE="Courier">PipedInputStream</FONT></TT>.
<P>
The <TT><FONT FACE="Courier">PipedOutputStream</FONT></TT> class
implements a piped output stream, which acts as the sending end
of a communications pipe. Piped output streams must be connected
to a piped input stream to send data. In other words, a piped
input stream must be used to receive the data sent by a piped
output stream. This is the definition for the class:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.io.PipedOutputStream
extends java.io.OutputStream {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public PipedOutputStream();<BR>
&nbsp;&nbsp;public PipedOutputStream(PipedInputStream snk);<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public void close();<BR>
&nbsp;&nbsp;public void connect(PipedInputStream snk);<BR>
&nbsp;&nbsp;public void write(byte b[], int off, int len);<BR>
&nbsp;&nbsp;public void write(int b);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">PipedOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PipedOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public PipedOutputStream()</FONT></TT>
<P>
This constructor creates a piped output stream that isn't connected
to anything. The stream must be connected to a piped input stream
with the <TT><FONT FACE="Courier">connect</FONT></TT> method before
it can be used.<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">PipedOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PipedOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public PipedOutputStream(PipedInputStream
snk) throws IOException</FONT></TT>
<P>
This constructor creates a piped output stream connected to the
specified piped input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">snk</FONT> is the piped input stream to connect to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">close</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PipedOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void close() throws IOException</FONT></TT>
<P>
This method closes the piped output stream, releasing any resources
associated with it.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">close</FONT> in class <TT><FONT FACE="Courier">OutputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">connect</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PipedOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void connect(PipedInputStream
snk) throws IOException</FONT></TT>
<P>
This method connects the output stream to the specified piped
input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">snk</FONT> is the piped input stream to connect to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">write</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PipedOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void write(byte b[], int off,
int len) throws IOException</FONT></TT>
<P>
This method writes <TT><FONT FACE="Courier">len</FONT></TT> bytes
to the piped output stream from the byte array <TT><FONT FACE="Courier">b</FONT></TT>
beginning <TT><FONT FACE="Courier">off</FONT></TT> bytes into
the array.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array from which the data is written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array for the data to be read from.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the number of bytes to write.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">write</FONT> in class <TT><FONT FACE="Courier">OutputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">write</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PipedOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void write(int b) throws IOException</FONT></TT>
<P>
This method writes a byte value to the piped output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">write</FONT> in class <TT><FONT FACE="Courier">OutputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="PrintStream"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">PrintStream</FONT></TT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD > <TT><FONT FACE="Courier">FilterOutputStream</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>
This class implements an output stream that has additional methods
for printing basic types of data. You can set up the stream so
that it's flushed every time a newline character (<TT><FONT FACE="Courier">\n</FONT></TT>)
is written. Note that only the lower 8 bits of any 16-bit value
are printed to the stream. Here is the definition for the <TT><FONT FACE="Courier">PrintStream</FONT></TT>
class:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.io.PrintStream extends
java.io.FilterOutputStream {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public PrintStream(OutputStream out);<BR>
&nbsp;&nbsp;public PrintStream(OutputStream out, boolean autoflush);
<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public boolean checkError();<BR>
&nbsp;&nbsp;public void close();<BR>
&nbsp;&nbsp;public void flush();<BR>
&nbsp;&nbsp;public void print(boolean b);<BR>
&nbsp;&nbsp;public void print(char c);<BR>
&nbsp;&nbsp;public void print(char s[]);<BR>
&nbsp;&nbsp;public void print(double d);<BR>
&nbsp;&nbsp;public void print(float f);<BR>
&nbsp;&nbsp;public void print(int i);<BR>
&nbsp;&nbsp;public void print(long l);<BR>
&nbsp;&nbsp;public void print(Object obj);<BR>
&nbsp;&nbsp;public void print(String s);<BR>
&nbsp;&nbsp;public void println();<BR>
&nbsp;&nbsp;public void println(boolean b);<BR>
&nbsp;&nbsp;public void println(char c);<BR>
&nbsp;&nbsp;public void println(char s[]);<BR>
&nbsp;&nbsp;public void println(double d);<BR>
&nbsp;&nbsp;public void println(float f);<BR>
&nbsp;&nbsp;public void println(int i);<BR>
&nbsp;&nbsp;public void println(long l);<BR>
&nbsp;&nbsp;public void println(Object obj);<BR>
&nbsp;&nbsp;public void println(String s);<BR>
&nbsp;&nbsp;public void write(byte b[], int off, int len);<BR>
&nbsp;&nbsp;public void write(int b);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public PrintStream(OutputStream out)</FONT></TT>
<P>
This constructor creates a print stream that writes data to the
specified underlying output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">out</FONT> is the output stream to be written to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public PrintStream(OutputStream out,
boolean autoflush)</FONT></TT>
<P>
This constructor creates a print stream that writes data to the
specified underlying output stream, with an option of flushing
its output each time a newline character (<TT><FONT FACE="Courier">\n</FONT></TT>)
is encountered.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">out</FONT> is the output stream to be written to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">autoflush</FONT> is a Boolean value specifying whether the stream is flushed when a newline character is encountered.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">checkError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public boolean checkError()</FONT></TT>
<P>
This method flushes the underlying output stream and determines
whether an error has occurred on the stream. Note that errors
are cumulative, meaning that once an error is encountered, <TT><FONT FACE="Courier">checkError</FONT></TT>
will continue to return <TT><FONT FACE="Courier">true</FONT></TT>
on all successive calls.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">true</FONT> if the print stream has ever encountered an error on the underlying output stream; <TT><FONT FACE="Courier">false</FONT></TT> otherwise.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">close</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void close()</FONT></TT>
<P>
This method closes the print stream, releasing any resources associated
with the underlying output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">close</FONT> in class <TT><FONT FACE="Courier">FilterOutputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">flush</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void flush()</FONT></TT>
<P>
This method flushes the print stream, resulting in any buffered
data being written to the underlying output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">flush</FONT> in class <TT><FONT FACE="Courier">FilterOutputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">print</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void print(boolean b)</FONT></TT>
<P>
This method prints the string representation of a Boolean value
to the underlying output stream. If the Boolean value is true,
the string <TT><FONT FACE="Courier">&quot;true&quot;</FONT></TT>
is printed; otherwise, the string <TT><FONT FACE="Courier">&quot;false&quot;</FONT></TT>
is printed.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the Boolean value to be printed.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">print</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void print(char c)</FONT></TT>
<P>
This method prints the lower 8 bits of a character value to the
underlying output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">c</FONT> is the character value to be printed.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">print</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void print(char s[])</FONT></TT>
<P>
This method prints the lower 8 bits of each character value in
an array of characters to the underlying output stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the array of characters to be printed.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">print</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void print(double d)</FONT></TT>
<P>
This method prints the string representation of a double value
to the underlying output stream. Note that the string representation
is the same as that returned by the <TT><FONT FACE="Courier">toString</FONT></TT>
method of the <TT><FONT FACE="Courier">Double</FONT></TT> class.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">d</FONT> is the double value to be printed.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">print</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void print(float f)</FONT></TT>
<P>
This method prints the string representation of a float value
to the underlying output stream. Note that the string representation
is the same as that returned by the <TT><FONT FACE="Courier">toString</FONT></TT>
method of the <TT><FONT FACE="Courier">Float</FONT></TT> class.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">f</FONT> is the float value to be printed.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">print</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void print(int i)</FONT></TT>
<P>
This method prints the string representation of an integer value
to the underlying output stream. Note that the string representation
is the same as that returned by the <TT><FONT FACE="Courier">toString</FONT></TT>
method of the <TT><FONT FACE="Courier">Integer</FONT></TT> class.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">i</FONT> is the integer value to be printed.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">print</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void print(long l)</FONT></TT>
<P>
This method prints the string representation of a long value to
the underlying output stream. Note that the string representation
is the same as that returned by the <TT><FONT FACE="Courier">toString</FONT></TT>
method of the <TT><FONT FACE="Courier">Long</FONT></TT> class.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">l</FONT> is the long value to be printed.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">print</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void print(Object obj)</FONT></TT>
<P>
This method prints the string representation of an object to the
underlying output stream. Note that the string representation
is the same as that returned by the <TT><FONT FACE="Courier">toString</FONT></TT>
method of the object.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">obj</FONT> is the object to be printed.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">print</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void print(String s)</FONT></TT>
<P>
This method prints the lower 8 bits of each character in a string
to the underlying output stream. If the string is null, the string
<TT><FONT FACE="Courier">&quot;null&quot;</FONT></TT> is printed.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the string to be printed.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">println</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void println()</FONT></TT>
<P>
This method prints the newline character (<TT><FONT FACE="Courier">\n</FONT></TT>)
to the underlying output stream.<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">println</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void println(boolean b)</FONT></TT>
<P>
This method prints the string representation of a Boolean value
to the underlying output stream, followed by a newline character
(<TT><FONT FACE="Courier">\n</FONT></TT>). If the Boolean value
is <TT><FONT FACE="Courier">true</FONT></TT>, the string <TT><FONT FACE="Courier">&quot;true&quot;</FONT></TT>
is printed; otherwise, the string <TT><FONT FACE="Courier">&quot;false&quot;</FONT></TT>
is printed.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the Boolean value to be printed.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">println</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void println(char c)</FONT></TT>
<P>
This method prints the lower 8 bits of a character value to the
underlying output stream, followed by a newline character.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">c</FONT> is the character value to be printed.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">println</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void println(char s[])</FONT></TT>
<P>
This method prints the lower 8 bits of each character value in
an array of characters to the underlying output stream, followed
by a newline character.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the array of characters to be printed.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">println</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void println(double d)</FONT></TT>
<P>
This method prints the string representation of a double value
to the underlying output stream, followed by a newline character.
Note that the string representation is the same as that returned
by the <TT><FONT FACE="Courier">toString</FONT></TT> method of
the <TT><FONT FACE="Courier">Double</FONT></TT> class.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">d</FONT> is the double value to be printed.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">println</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void println(float f)</FONT></TT>
<P>
This method prints the string representation of a float value
to the underlying output stream, followed by a newline character.
Note that the string representation is the same as that returned
by the <TT><FONT FACE="Courier">toString</FONT></TT> method of
the <TT><FONT FACE="Courier">Float</FONT></TT> class.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">f</FONT> is the float value to be printed.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">println</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void println(int i)</FONT></TT>
<P>
This method prints the string representation of an integer value
to the underlying output stream, followed by a newline character.
Note that the string representation is the same as that returned
by the <TT><FONT FACE="Courier">toString</FONT></TT> method of
the <TT><FONT FACE="Courier">Integer</FONT></TT> class.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">i</FONT> is the integer value to be printed.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">println</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void println(long l)</FONT></TT>
<P>
This method prints the string representation of a long value to
the underlying output stream, followed by a newline character.
Note that the string representation is the same as that returned
by the <TT><FONT FACE="Courier">toString</FONT></TT> method of
the <TT><FONT FACE="Courier">Long</FONT></TT> class.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">l</FONT> is the long value to be printed.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">println</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void println(Object obj)</FONT></TT>
<P>
This method prints the string representation of an object to the
underlying output stream, followed by a newline character. Note
that the string representation is the same as that returned by
the <TT><FONT FACE="Courier">toString</FONT></TT> method of the
object.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">obj</FONT> is the object to be printed.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">println</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void println(String s)</FONT></TT>
<P>
This method prints the lower 8 bits of each character in a string
to the underlying output stream, followed by a newline character.
If the string is null, the string <TT><FONT FACE="Courier">&quot;null&quot;</FONT></TT>
is printed.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the string to be printed.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">write</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void write(byte b[], int off,
int len)</FONT></TT>
<P>
This method writes <TT><FONT FACE="Courier">len</FONT></TT> bytes
to the underlying output stream from the byte array <TT><FONT FACE="Courier">b</FONT></TT>
beginning <TT><FONT FACE="Courier">off</FONT></TT> bytes into
the array.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array from which the data is written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array for the data to be read from.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the number of bytes to write.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">write</FONT> in class <TT><FONT FACE="Courier">FilterOutputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">write</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PrintStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void write(int b)</FONT></TT>
<P>
This method writes a byte value to the underlying output stream.
The <TT><FONT FACE="Courier">write</FONT></TT> method of the underlying
output stream is actually called to write the byte value. Additionally,
if the byte represents the newline character (<TT><FONT FACE="Courier">\n</FONT></TT>),
and autoflush is turned on, the <TT><FONT FACE="Courier">flush</FONT></TT>
method is called.
<P>
If an <TT><FONT FACE="Courier">IOException</FONT></TT> is thrown
while writing the byte, the exception is caught and an internal
error flag is set; this flag can be checked by calling the <TT><FONT FACE="Courier">checkError</FONT></TT>
method. This technique alleviates having to use a <TT><FONT FACE="Courier">try</FONT></TT>-<TT><FONT FACE="Courier">catch</FONT></TT>
clause every time you want to print something.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">write</FONT> in class <TT><FONT FACE="Courier">FilterOutputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="PushbackInputStream"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">PushbackInputStream</FONT></TT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">FilterInputStream</FONT></TD>
</TR>
</TABLE></CENTER>
<P>
The <TT><FONT FACE="Courier">PushbackInputStream</FONT></TT> class
implements a input stream filter that provides a one-byte pushback
buffer. Using the <TT><FONT FACE="Courier">PushbackInputStream</FONT></TT>
class, an application can push the last byte read back into the
stream so it's re-read the next time the <TT><FONT FACE="Courier">read</FONT></TT>
method is called. This function is useful when byte-delimited
data is being read; the delimited bytes can be pushed back into
the stream so the next read operation will read them. Here is
the class definition:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.io.PushbackInputStream
extends java.io.FilterInputStream {<BR>
&nbsp;&nbsp;// Member Variables<BR>
&nbsp;&nbsp;protected int pushBack;<BR>
<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public PushbackInputStream(InputStream in);<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public int available();<BR>
&nbsp;&nbsp;public boolean markSupported();<BR>
&nbsp;&nbsp;public int read();<BR>
&nbsp;&nbsp;public int read(byte bytes[], int off, int len);<BR>
&nbsp;&nbsp;public void unread(int ch);<BR>
}</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=589><B>Member Variables</B></TD></TR>
</TABLE></CENTER>
<P>
<TT><B><FONT FACE="Courier">protected int pushBack</FONT></B></TT>
<P>
This is the pushback buffer containing the character that was
pushed back. A value of <TT><FONT FACE="Courier">-1</FONT></TT>
indicates that the pushback buffer is empty.<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">PushbackInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PushbackInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public PushbackInputStream(InputStream
in)</FONT></TT>
<P>
This constructor creates a pushback input stream using the specified
underlying input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">in</FONT> is the input stream to use the pushback filter on.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">available</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PushbackInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public int available() throws IOException</FONT></TT>
<P>
This method determines the number of bytes that can be read from
the pushback input stream without blocking.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the number of available bytes.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">available</FONT> in class <TT><FONT FACE="Courier">FilterInputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">markSupported</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PushbackInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public boolean markSupported()</FONT></TT>
<P>
This method determines whether the pushback input stream supports
the <TT><FONT FACE="Courier">mark</FONT></TT> and <TT><FONT FACE="Courier">reset</FONT></TT>
methods.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">true</FONT> if the <TT><FONT FACE="Courier">mark</FONT></TT> and <TT><FONT FACE="Courier">reset</FONT></TT> methods are supported; <TT><FONT FACE="Courier">false</FONT></TT> otherwise.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">markSupported</FONT> in class <TT><FONT FACE="Courier">FilterInputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PushbackInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public int read() throws IOException</FONT></TT>
<P>
This method reads a byte value from the pushback input stream,
blocking until the byte is read. The <TT><FONT FACE="Courier">read</FONT></TT>
method actually returns the pushback character, if there is one,
and calls the underlying input stream's <TT><FONT FACE="Courier">read</FONT></TT>
method, if not.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >an integer representing the byte value read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">read</FONT> in class <TT><FONT FACE="Courier">FilterInputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PushbackInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public int read(byte bytes[], int off,
int len) throws IOException</FONT></TT>
<P>
This method reads up to <TT><FONT FACE="Courier">len</FONT></TT>
bytes from the buffered input stream into the byte array <TT><FONT FACE="Courier">bytes</FONT></TT>
beginning <TT><FONT FACE="Courier">off</FONT></TT> bytes into
the array, blocking until all bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">bytes</FONT> is the byte array into which the data is read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array for the data to be written to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the maximum number of bytes to read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the actual number of bytes read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">read</FONT> in class <TT><FONT FACE="Courier">FilterInputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">unread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">PushbackInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void unread(int ch) throws IOException</FONT></TT>
<P>
This method pushes a character back into the stream so that it's
read the next time the <TT><FONT FACE="Courier">read</FONT></TT>
method is called. Note that there can be only one pushback character,
meaning that multiple calls to <TT><FONT FACE="Courier">unread</FONT></TT>
without matching calls to <TT><FONT FACE="Courier">read</FONT></TT>
result in an <TT><FONT FACE="Courier">IOException</FONT></TT>
being thrown.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">ch</FONT> is the character to push back into the stream.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an attempt is made to push back more than one character.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="RandomAccessFile"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">RandomAccessFile</FONT></TT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="implem.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">DataOutput</FONT>, <TT><FONT FACE="Courier">DataInput</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>
The <TT><FONT FACE="Courier">RandomAccessFile</FONT></TT> class
implements a random access file stream, enabling you to both read
from and write to random access files. Here is the class definition:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.io.RandomAccessFile
extends java.lang.Object<BR>
&nbsp;&nbsp;implements java.io.DataOutput java.io.DataInput {
<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public RandomAccessFile(File file, String mode);<BR>
&nbsp;&nbsp;public RandomAccessFile(String name, String mode);
<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public void close();<BR>
&nbsp;&nbsp;public final FileDescriptor getFD();<BR>
&nbsp;&nbsp;public long getFilePointer();<BR>
&nbsp;&nbsp;public long length();<BR>
&nbsp;&nbsp;public int read();<BR>
&nbsp;&nbsp;public int read(byte b[]);<BR>
&nbsp;&nbsp;public int read(byte b[], int off, int len);<BR>
&nbsp;&nbsp;public final boolean readBoolean();<BR>
&nbsp;&nbsp;public final byte readByte();<BR>
&nbsp;&nbsp;public final char readChar();<BR>
&nbsp;&nbsp;public final double readDouble();<BR>
&nbsp;&nbsp;public final float readFloat();<BR>
&nbsp;&nbsp;public final void readFully(byte b[]);<BR>
&nbsp;&nbsp;public final void readFully(byte b[], int off, int
len);<BR>
&nbsp;&nbsp;public final int readInt();<BR>
&nbsp;&nbsp;public final String readLine();<BR>
&nbsp;&nbsp;public final long readLong();<BR>
&nbsp;&nbsp;public final short readShort();<BR>
&nbsp;&nbsp;public final int readUnsignedByte();<BR>
&nbsp;&nbsp;public final int readUnsignedShort();<BR>
&nbsp;&nbsp;public final String readUTF();<BR>
&nbsp;&nbsp;public void seek(long pos);<BR>
&nbsp;&nbsp;public int skipBytes(int n);<BR>
&nbsp;&nbsp;public void write(byte b[]);<BR>
&nbsp;&nbsp;public void write(byte b[], int off, int len);<BR>
&nbsp;&nbsp;public void write(int b);<BR>
&nbsp;&nbsp;public final void writeBoolean(boolean v);<BR>
&nbsp;&nbsp;public final void writeByte(int v);<BR>
&nbsp;&nbsp;public final void writeBytes(String s);<BR>
&nbsp;&nbsp;public final void writeChar(int v);<BR>
&nbsp;&nbsp;public final void writeChars(String s);<BR>
&nbsp;&nbsp;public final void writeDouble(double v);<BR>
&nbsp;&nbsp;public final void writeFloat(float v);<BR>
&nbsp;&nbsp;public final void writeInt(int v);<BR>
&nbsp;&nbsp;public final void writeLong(long v);<BR>
&nbsp;&nbsp;public final void writeShort(int v);<BR>
&nbsp;&nbsp;public final void writeUTF(String str);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public RandomAccessFile(String name,
String mode) throws IOException</FONT></TT>
<P>
This constructor creates a random access file stream based on
the file with the specified filename and access mode. There are
two supported access modes: mode <TT><FONT FACE="Courier">&quot;r&quot;</FONT></TT>
is for read-only files, and mode <TT><FONT FACE="Courier">&quot;rw&quot;</FONT></TT>
is for read/write files.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">name</FONT> is the filename of the file to access.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">mode</FONT> is the access mode.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IllegalArgumentException</FONT> if the access mode is not equal to <TT><FONT FACE="Courier">&quot;r&quot;</FONT></TT> or <TT><FONT FACE="Courier">&quot;rw&quot;</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the access mode is <TT><FONT FACE="Courier">&quot;r&quot;</FONT></TT> and the application doesn't have read access to the file, or if the access mode is <TT><FONT FACE="Courier">&quot;rw&quot;</FONT></TT> and the application doesn't have both read and write access to the file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public RandomAccessFile(File file, String
mode) throws IOException</FONT></TT>
<P>
This constructor creates a random access file stream based on
the specified file and access mode. There are two supported access
modes: mode <TT><FONT FACE="Courier">&quot;r&quot;</FONT></TT>
is for read-only files, and mode <TT><FONT FACE="Courier">&quot;rw&quot;</FONT></TT>
is for read/write files.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">file</FONT> is the file to access.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">mode</FONT> is the access mode.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IllegalArgumentException</FONT> if the access mode is not equal to <TT><FONT FACE="Courier">&quot;r&quot;</FONT></TT> or <TT><FONT FACE="Courier">&quot;rw&quot;</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the access mode is <TT><FONT FACE="Courier">&quot;r&quot;</FONT></TT> and the application doesn't have read access to the file, or if the access mode is <TT><FONT FACE="Courier">&quot;rw&quot;</FONT></TT> and the application doesn't have both read and write access to the file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">close</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void close() throws IOException</FONT></TT>
<P>
This method closes the random access file stream, releasing any
resources associated with it.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">getFD</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final FileDescriptor getFD() throws
IOException</FONT></TT>
<P>
This method determines the file descriptor associated with the
random access file stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the file descriptor associated with the stream.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">getFilePointer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public long getFilePointer() throws IOException</FONT></TT>
<P>
This method determines the current read/write position in bytes
of the random access file stream, which is the offset of the read/write
position from the beginning of the stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the current read/write position of the stream.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">length</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public long length() throws IOException</FONT></TT>
<P>
This method determines the length in bytes of the underlying file.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the length of the underlying file.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public int read() throws IOException</FONT></TT>
<P>
This method reads a byte value from the random access file stream,
blocking until the byte is read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >an integer representing the byte value read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public int read(byte b[]) throws IOException</FONT></TT>
<P>
This method reads up to <TT><FONT FACE="Courier">b.length</FONT></TT>
bytes from the random access file stream into the byte array <TT><FONT FACE="Courier">b</FONT></TT>,
blocking until at least one byte is available.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array into which the data is read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the total number of bytes read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public int read(byte b[], int off, int
len) throws IOException</FONT></TT>
<P>
This method reads up to <TT><FONT FACE="Courier">len</FONT></TT>
bytes from the random access file stream into the byte array <TT><FONT FACE="Courier">b</FONT></TT>
beginning <TT><FONT FACE="Courier">off</FONT></TT> bytes into
the array, blocking until at least one byte is available.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array into which the data is read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array for the data to be written to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the maximum number of bytes to read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the total number of bytes read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">readBoolean</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final boolean readBoolean() throws
IOException</FONT></TT>
<P>
This method reads a Boolean value (byte) from the random access
file stream. A value of <TT><FONT FACE="Courier">0</FONT></TT>
is interpreted as <TT><FONT FACE="Courier">false</FONT></TT>;
all other values are interpreted as <TT><FONT FACE="Courier">true</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the Boolean value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">readByte</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final byte readByte() throws IOException</FONT></TT>
<P>
This method reads a signed byte (8-bit) value from the random
access file stream, blocking until the byte is read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the byte value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">readChar</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final char readChar() throws IOException</FONT></TT>
<P>
This method reads a character (16-bit) value from the random access
file stream, blocking until both bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the character value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">readDouble</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final double readDouble() throws
IOException</FONT></TT>
<P>
This method reads a double (64-bit) value from the random access
file stream, blocking until all eight bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the double value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">readFloat</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final float readFloat() throws
IOException</FONT></TT>
<P>
This method reads a float (32-bit) value from the random access
file stream, blocking until all four bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the float value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">readFully</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final void readFully(byte b[])
throws IOException</FONT></TT>
<P>
This method reads up to <TT><FONT FACE="Courier">b.length</FONT></TT>
bytes from the random access file stream into the byte array <TT><FONT FACE="Courier">b</FONT></TT>,
blocking until all bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array into which the data is read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"> </FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">readFully</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final void readFully(byte b[],
int off, int len) throws IOException</FONT></TT>
<P>
This method reads up to <TT><FONT FACE="Courier">len</FONT></TT>
bytes from the random access file stream into the byte array <TT><FONT FACE="Courier">b</FONT></TT>
beginning <TT><FONT FACE="Courier">off</FONT></TT> bytes into
the array, blocking until all bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array into which the data is read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array for the data to be written to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the maximum number of bytes to read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">readInt</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final int readInt() throws IOException</FONT></TT>
<P>
This method reads an integer (32-bit) value from the random access
file stream, blocking until all four bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the integer value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">readLine</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final String readLine() throws
IOException</FONT></TT>
<P>
This method reads a line of text from the random access file stream,
blocking until either a newline character (<TT><FONT FACE="Courier">\n</FONT></TT>)
or a carriage return character (<TT><FONT FACE="Courier">\r</FONT></TT>)
is read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >a string containing the line of text read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">readLong</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final long readLong() throws IOException</FONT></TT>
<P>
This method reads a long (64-bit) value from the random access
file stream, blocking until all eight bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the long value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">readShort</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final short readShort() throws
IOException</FONT></TT>
<P>
This method reads a short (16-bit) value from the random access
file stream, blocking until both bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the short value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">readUnsignedByte</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final int readUnsignedByte() throws
IOException</FONT></TT>
<P>
This method reads an unsigned byte (8-bit) value from the random
access file stream, blocking until the byte is read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the unsigned byte value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">readUnsignedShort</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final int readUnsignedShort()
throws IOException</FONT></TT>
<P>
This method reads an unsigned short (16-bit) value from the random
access file stream, blocking until both bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the unsigned short value read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the value.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">readUTF</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final String readUTF() throws
IOException</FONT></TT>
<P>
This method reads a string that has been encoded using a modified
UTF-8 format from the random access file stream, blocking until
all bytes are read.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD WIDTH=553>the string read.</TD>
</TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before reading the string.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">UTFDataFormatException</FONT> if the bytes read don't represent a valid UTF-8 encoding of a string.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">seek</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void seek(long pos) throws IOException</FONT></TT>
<P>
This method sets the current stream position to the specified
absolute position; the position is absolute because it's always
determined in relation to the beginning of the stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">pos</FONT> is the absolute position to seek to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">skipBytes</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public int skipBytes(int n) throws IOException</FONT></TT>
<P>
This method skips <TT><FONT FACE="Courier">n</FONT></TT> bytes
of data in the random access file stream, blocking until all bytes
are skipped.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">n</FONT> is the number of bytes to skip.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the actual number of bytes skipped.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">EOFException</FONT> if the end of the stream is reached before skipping the specified number of bytes.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">write</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void write(byte b[]) throws IOException</FONT></TT>
<P>
This method writes <TT><FONT FACE="Courier">b.length</FONT></TT>
bytes to the random access file stream from the byte array <TT><FONT FACE="Courier">b</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array from which the data is written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">write</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void write(byte b[], int off,
int len) throws IOException</FONT></TT>
<P>
This method writes <TT><FONT FACE="Courier">len</FONT></TT> bytes
to the random access file stream from the byte array <TT><FONT FACE="Courier">b</FONT></TT>
beginning <TT><FONT FACE="Courier">off</FONT></TT> bytes into
the array.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array from which the data is written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array for the data to be read from.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the number of bytes to write.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">write</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void write(int b) throws IOException</FONT></TT>
<P>
This method writes a byte value to the random access file stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">writeBoolean</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final void writeBoolean(boolean
v) throws IOException</FONT></TT>
<P>
This method writes a Boolean value to the random access file stream.
The Boolean value <TT><FONT FACE="Courier">true</FONT></TT> is
written as the byte value <TT><FONT FACE="Courier">1</FONT></TT>,
and <TT><FONT FACE="Courier">false</FONT></TT> is written as the
byte value <TT><FONT FACE="Courier">0</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the Boolean value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">writeByte</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final void writeByte(int v) throws
IOException</FONT></TT>
<P>
This method writes a byte (8-bit) value to the random access file
stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the byte value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">writeBytes</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final void writeBytes(String s)
throws IOException</FONT></TT>
<P>
This method writes a string to the random access file stream as
a sequence of bytes.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the string to be written as bytes.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">writeChar</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final void writeChar(int v) throws
IOException</FONT></TT>
<P>
This method writes a character (16-bit) value to the random access
file stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the character value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">writeChars</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final void writeChars(String s)
throws IOException</FONT></TT>
<P>
This method writes a string to the random access file stream as
a sequence of characters.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the string to be written as characters.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">writeDouble</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final void writeDouble(double
v) throws IOException</FONT></TT>
<P>
This method writes a double (64-bit) value to the random access
file stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the double value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">writeFloat</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final void writeFloat(float v)
throws IOException</FONT></TT>
<P>
This method writes a float (32-bit) value to the random access
file stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the float value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">writeInt</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final void writeInt(int v) throws
IOException</FONT></TT>
<P>
This method writes an integer (32-bit) value to the random access
file stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the integer value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">writeLong</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final void writeLong(long v) throws
IOException</FONT></TT>
<P>
This method writes a long (64-bit) value to the random access
file stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the long value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">writeShort</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final void writeShort(int v) throws
IOException</FONT></TT>
<P>
This method writes a short (16-bit) value to the random access
file stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the short value to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">writeUTF</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RandomAccessFile</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public final void writeUTF(String str)
throws IOException</FONT></TT>
<P>
This method encodes a string using a modified UTF-8 format and
writes it to the random access file stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">str</FONT> is the string to be written.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="SequenceInputStream"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">SequenceInputStream</FONT></TT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="extends.gif"></TD><TD > <TT><FONT FACE="Courier">InputStream</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>
The <TT><FONT FACE="Courier">SequenceInputStream</FONT></TT> class
implements an input stream that can combine several input streams
serially so that they function together as a single input stream.
Each input stream forming the sequence is read from in turn; the
sequence input stream handles closing streams as they finish and
switching to the next one. This is the class definition:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.io.SequenceInputStream
extends java.io.InputStream {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public SequenceInputStream(Enumeration e);<BR>
&nbsp;&nbsp;public SequenceInputStream(InputStream s1, InputStream
s2);<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public void close();<BR>
&nbsp;&nbsp;public int read();<BR>
&nbsp;&nbsp;public int read(byte buf[], int pos, int len);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SequenceInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SequenceInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public SequenceInputStream(Enumeration
e)</FONT></TT>
<P>
This constructor creates a sequence input stream containing the
specified enumerated list of input streams.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">e</FONT> is the list of input streams for the sequence.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">SequenceInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SequenceInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public SequenceInputStream(InputStream
s1, InputStream s2)</FONT></TT>
<P>
This constructor creates a sequence input stream containing the
two specified input streams.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s1</FONT> is the first input stream in the sequence.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">s2</FONT> is the second input stream in the sequence.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">close</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SequenceInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void close() throws IOException</FONT></TT>
<P>
This method closes the sequence input stream, releasing any resources
associated with it. Additionally, this <TT><FONT FACE="Courier">close</FONT></TT>
method calls the <TT><FONT FACE="Courier">close</FONT></TT> method
for the substream currently being read from as well as the substreams
that have yet to be read from.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">close</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SequenceInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public int read() throws IOException</FONT></TT>
<P>
This method reads a byte value from the currently active substream
in the sequence input stream, blocking until the byte is read.
If the end of the substream is reached, the <TT><FONT FACE="Courier">close</FONT></TT>
method is called on the substream and <TT><FONT FACE="Courier">read</FONT></TT>
begins reading from the next substream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >an integer representing the byte value read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">read</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="Method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SequenceInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public int read(byte b[], int pos, int
len) throws IOException</FONT></TT>
<P>
This method reads up to <TT><FONT FACE="Courier">len</FONT></TT>
bytes from the currently active substream in the sequence input
stream into the byte array <TT><FONT FACE="Courier">b</FONT></TT>
beginning <TT><FONT FACE="Courier">off</FONT></TT> bytes into
the array, blocking until all bytes are read. If the end of the
substream is reached, the <TT><FONT FACE="Courier">close</FONT></TT>
method is called on the substream and <TT><FONT FACE="Courier">read</FONT></TT>
begins reading from the next substream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array into which the data is read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array for the data to be written to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the maximum number of bytes to read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the actual number of bytes read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">read</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="StreamTokenizer"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">StreamTokenizer</FONT></TT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD > <TT><FONT FACE="Courier">Object</FONT></TT></TD>
</TR>
</TABLE></CENTER>
<P>
The <TT><FONT FACE="Courier">StreamTokenizer</FONT></TT> class
implements a string tokenizer stream, which parses an input stream
into a stream of tokens. The <TT><FONT FACE="Courier">StreamTokenizer</FONT></TT>
class gives you different methods for establishing how the tokens
are parsed. Each character read from the stream is evaluated as
having zero or more of the following attributes: whitespace, alphabetic,
numeric, string quote, or comment. Here is the definition for
the class:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.io.StreamTokenizer
extends java.lang.Object {<BR>
&nbsp;&nbsp;// Member Variables<BR>
&nbsp;&nbsp;public double nval;<BR>
&nbsp;&nbsp;public String sval;<BR>
&nbsp;&nbsp;public int ttype;<BR>
<BR>
&nbsp;&nbsp;// possible values for the ttype member variable<BR>
&nbsp;&nbsp;public final static int TT_EOF;<BR>
&nbsp;&nbsp;public final static int TT_EOL;<BR>
&nbsp;&nbsp;public final static int TT_NUMBER;<BR>
&nbsp;&nbsp;public final static int TT_WORD;<BR>
<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public StreamTokenizer(InputStream I);<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public void commentChar(int ch);<BR>
&nbsp;&nbsp;public void eolIsSignificant(boolean flag);<BR>
&nbsp;&nbsp;public int lineno();<BR>
&nbsp;&nbsp;public void lowerCaseMode(boolean fl);<BR>
&nbsp;&nbsp;public int nextToken();<BR>
&nbsp;&nbsp;public void ordinaryChar(int ch);<BR>
&nbsp;&nbsp;public void ordinaryChars(int low, int hi);<BR>
&nbsp;&nbsp;public void parseNumbers();<BR>
&nbsp;&nbsp;public void pushBack();<BR>
&nbsp;&nbsp;public void quoteChar(int ch);<BR>
&nbsp;&nbsp;public void resetSyntax();<BR>
&nbsp;&nbsp;public void whitespaceChars(int low, int hi);<BR>
&nbsp;&nbsp;public void slashStarComments(boolean flag);<BR>
&nbsp;&nbsp;public String toString();<BR>
&nbsp;&nbsp;public void whitespaceChars(int low, int hi);<BR>
&nbsp;&nbsp;public void wordChars(int low, int hi);<BR>
}</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=589><B>Member Variables</B></TD></TR>
</TABLE></CENTER>
<P>
<TT><B><FONT FACE="Courier">public double nval</FONT></B></TT>
<P>
This member variable holds a numeric token value whenever the
<TT><FONT FACE="Courier">ttype</FONT></TT> member variable is
set to <TT><FONT FACE="Courier">TT_NUMBER</FONT></TT>.
<P>
<TT><B><FONT FACE="Courier">public String sval</FONT></B></TT>
<P>
This member variable holds a string representation of a word token
whenever the <TT><FONT FACE="Courier">ttype</FONT></TT> member
variable is set to <TT><FONT FACE="Courier">TT_WORD</FONT></TT>,
or it holds the body of a quoted string token when <TT><FONT FACE="Courier">ttype</FONT></TT>
is set to a quote character.
<P>
<TT><B><FONT FACE="Courier">public int ttype</FONT></B></TT>
<P>
This is the type of the current token, which can be one of the
following:
<UL>
<LI>an integer representation of a character for single-character
tokens
<LI>the quote character for quoted string tokens
<LI><TT><FONT FACE="Courier">TT_WORD</FONT></TT> for word tokens
<LI><TT><FONT FACE="Courier">TT_NUMERIC</FONT></TT> for numeric
tokens
<LI><TT><FONT FACE="Courier">TT_EOL</FONT></TT> if the end of
a line has been reached on the input stream
<LI><TT><FONT FACE="Courier">TT_EOF</FONT></TT> if the end of
the stream has been reached
</UL>
<P>
<TT><B><FONT FACE="Courier">public final static int TT_EOF</FONT></B></TT>
<P>
This is a constant token type representing the end-of-file token.
<P>
<TT><B><FONT FACE="Courier">public final static int TT_EOL</FONT></B></TT>
<P>
This is a constant token type representing the end-of-line token.
<P>
<TT><B><FONT FACE="Courier">public final static int TT_NUMBER</FONT></B></TT>
<P>
This is a constant token type identifying a numeric token; the
actual numeric value is stored in <TT><FONT FACE="Courier">nval</FONT></TT>.
<P>
<TT><B><FONT FACE="Courier">public final static int TT_WORD</FONT></B></TT>
<P>
This is a constant token type identifying a word token; the actual
word value is stored in <TT><FONT FACE="Courier">sval</FONT></TT>.<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">StreamTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StreamTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public StreamTokenizer(InputStream I)</FONT></TT>
<P>
This constructor creates a string tokenizer stream that parses
the specified input stream. By default, the string tokenizer stream
recognizes numbers, strings quoted with single and double quotes,
all alphabetic characters, and comments preceded by a <TT><FONT FACE="Courier">/</FONT></TT>
character.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">I</FONT> is the input stream to be parsed.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">commentChar</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StreamTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void commentChar(int ch)</FONT></TT>
<P>
This method specifies what character starts single-line comments.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">ch</FONT> is the new single-line comment character.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">eolIsSignificant</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StreamTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void eolIsSignificant(boolean
flag)</FONT></TT>
<P>
This method establishes whether end-of-line characters are recognized
as tokens.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">flag</FONT> is a Boolean value specifying whether end-of-line characters are treated as tokens; a value of <TT><FONT FACE="Courier">true</FONT></TT> means end-of-line characters are treated as tokens, but a value of <TT><FONT FACE="Courier">false</FONT></TT> means they are treated as whitespace.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">lineno</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StreamTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public int lineno()</FONT></TT>
<P>
This method determines the current line number of the string tokenizer
stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the current line number of the stream.
</TD></TR>
</TABLE></CENTER>
<P>
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">lowerCaseMode</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StreamTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void lowerCaseMode(boolean flag)</FONT></TT>
<P>
This method establishes whether word tokens (<TT><FONT FACE="Courier">TT_WORD</FONT></TT>)
are forced to lowercase letters when they are parsed.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">flag</FONT> is a Boolean value specifying whether word tokens are forced to lowercase letters; a value of <TT><FONT FACE="Courier">true</FONT></TT> means they are, but a value of <TT><FONT FACE="Courier">false</FONT></TT> means they are left unmodified.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">nextToken</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StreamTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public int nextToken() throws IOException</FONT></TT>
<P>
This method parses the next token from the underlying input stream.
After the token is parsed, the <TT><FONT FACE="Courier">ttype</FONT></TT>
member variable is set to the type of the token, but the value
of some tokens is contained in either the <TT><FONT FACE="Courier">nval</FONT></TT>
or <TT><FONT FACE="Courier">sval</FONT></TT> member variables,
depending on the token type.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the type of the token.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IOException</FONT> if an I/O error occurs.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ordinaryChar</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StreamTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void ordinaryChar(int ch)</FONT></TT>
<P>
This method establishes that the specified character is handled
as an ordinary character by the tokenizer, meaning that the character
is not interpreted as a comment character, word component, string
delimiter, whitespace, or numeric character. Ordinary characters
are parsed as single-character tokens.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">ch</FONT> is the character to be set as ordinary.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ordinaryChars</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StreamTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void ordinaryChars(int low, int
hi)</FONT></TT>
<P>
This method establishes that the characters in the specified range
are handled as ordinary characters by the tokenizer, meaning that
the characters are not interpreted as comment characters, word
components, string delimiters, whitespace, or numeric characters.
Ordinary characters are parsed as single-character tokens.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">low</FONT> is the low end of the ordinary character range.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">hi</FONT> is the high end of the ordinary character range.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">parseNumbers</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StreamTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void parseNumbers()</FONT></TT>
<P>
This method establishes that numbers should be parsed. When a
number is parsed, the <TT><FONT FACE="Courier">ttype</FONT></TT>
member variable is set to <TT><FONT FACE="Courier">TT_NUMBER</FONT></TT>,
with the corresponding numeric value stored in <TT><FONT FACE="Courier">nval</FONT></TT>.<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">pushBack</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StreamTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void pushBack()</FONT></TT>
<P>
This method pushes the current token back into the string tokenizer
stream, meaning that the next call to <TT><FONT FACE="Courier">nextToken</FONT></TT>
results in this token being handled.<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">quoteChar</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StreamTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void quoteChar(int ch)</FONT></TT>
<P>
This method establishes that matching pairs of the specified character are used to delimit string constants. When a string constant is parsed, the <TT><FONT FACE="Courier">ttype</FONT></TT> member
variable is set to the delimiting character, with the corresponding
string body stored in <TT><FONT FACE="Courier">sval</FONT></TT>.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">ch</FONT> is the new string delimiter character.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">resetSyntax</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StreamTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void resetSyntax()</FONT></TT>
<P>
This method resets the syntax table so that all characters are
considered ordinary. An ordinary character is a character that
isn't interpreted as a comment character, word component, string
delimiter, whitespace, or numeric character. Ordinary characters
are parsed as single-character tokens.
<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">slashSlashComments</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StreamTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void slashSlashComments(boolean
flag)</FONT></TT>
<P>
This method establishes whether C++ style comments (<TT><FONT FACE="Courier">//</FONT></TT>)
are recognized by the parser. A C++ style comment is defined by
two consecutive forward slash characters, which start a comment
that extends to the end of the line.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">flag</FONT> is a Boolean value specifying whether C++ style comments are recognized; a value of <TT><FONT FACE="Courier">true</FONT></TT> means C++ style comments are recognized, but a value of <TT><FONT FACE="Courier">false</FONT></TT> means they aren't treated specially.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">slashStarComments</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StreamTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void slashStarComments(boolean
flag)</FONT></TT>
<P>
This method establishes whether C style comments (<TT><FONT FACE="Courier">/*...*/</FONT></TT>)
are recognized by the parser. A C style comment is defined by
a forward slash character followed by an asterisk to start a comment.
The comment continues until a corresponding asterisk followed
by a forward slash character is reached.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">flag</FONT> is a Boolean value specifying whether C style comments are recognized; a value of <TT><FONT FACE="Courier">true</FONT></TT> means C style comments are recognized, but a value of <TT><FONT FACE="Courier">false</FONT></TT> means they aren't treated specially.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StreamTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public String toString()</FONT></TT>
<P>
This method determines the string representation of the current
token in the string tokenizer stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the string representation of the current token.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">toString</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">whitespaceChars</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StreamTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void whitespaceChars(int low,
int hi)</FONT></TT>
<P>
This method establishes that the characters in the specified range
are handled as whitespace by the tokenizer, meaning that the characters
serve only to separate tokens.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">low</FONT> is the low end of the whitespace character range.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">hi</FONT> is the high end of the whitespace character range.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">wordChars</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StreamTokenizer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void wordChars(int low, int hi)</FONT></TT>
<P>
This method establishes that the characters in the specified range
are handled as words by the tokenizer.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">low</FONT> is the low end of the word character range.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">hi</FONT> is the high end of the word character range.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="StringBufferInputStream"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">StringBufferInputStream</FONT></TT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">InputStream</FONT></TD></TR>
</TABLE></CENTER>
<P>
This class implements an input stream whose data is fed by a string.
Note that only the lower 8 bits of each character in the string
are used by this class. This is the definition for the <TT><FONT FACE="Courier">StringBufferInputStream</FONT></TT>
class:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.io.StringBufferInputStream
extends java.io.InputStream {<BR>
&nbsp;&nbsp;// Member Variables<BR>
&nbsp;&nbsp;protected String buffer;<BR>
&nbsp;&nbsp;protected int count;<BR>
&nbsp;&nbsp;protected int pos;<BR>
<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public StringBufferInputStream(String s);<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public int available();<BR>
&nbsp;&nbsp;public int read();<BR>
&nbsp;&nbsp;public int read(byte b[], int off, int len);<BR>
&nbsp;&nbsp;public void reset();<BR>
&nbsp;&nbsp;public long skip(long n);<BR>
}</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=583><B>Member Variables</B></TD></TR>
</TABLE></CENTER>
<P>
<TT><B><FONT FACE="Courier">protected String buffer</FONT></B></TT>
<P>
This is the string buffer from which the data is read.
<P>
<TT><B><FONT FACE="Courier">protected int count</FONT></B></TT>
<P>
This is the number of characters currently in the buffer.
<P>
<TT><B><FONT FACE="Courier">protected int pos</FONT></B></TT>
<P>
This is the current read position in the buffer.<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">StringBufferInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBufferInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public StringBufferInputStream(String
s)</FONT></TT>
<P>
This constructor creates a string buffer input stream based on
the specified string. Note that the string buffer is not copied
to create the input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the input string buffer.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">available</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBufferInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public int available()</FONT></TT>
<P>
This method determines the number of bytes that can be read from
the string buffer input stream without blocking.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >the number of available bytes.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">available</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBufferInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public int read()</FONT></TT>
<P>
This method reads a byte value from the string buffer input stream,
which is the lower 8 bits of the next character in the underlying
string buffer.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="returns.gif"></TD><TD >an integer representing the byte value read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">read</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">read</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBufferInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public int read(byte b[], int off, int
len)</FONT></TT>
<P>
This method reads up to <TT><FONT FACE="Courier">len</FONT></TT>
bytes from the string buffer input stream into the byte array
<TT><FONT FACE="Courier">b</FONT></TT> beginning <TT><FONT FACE="Courier">off</FONT></TT>
bytes into the array. Note that each byte is actually the lower
8 bits of the corresponding character in the underlying string
buffer.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array into which the data is read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array for the data to be written to.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the maximum number of bytes to read.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the actual number of bytes read, or <TT><FONT FACE="Courier">-1</FONT></TT> if the end of the stream is reached.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">read</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">reset</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBufferInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public void reset()</FONT></TT>
<P>
This method resets the read position to the beginning of the string
buffer input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">reset</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">skip</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBufferInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public long skip(long n)</FONT></TT>
<P>
This method skips <TT><FONT FACE="Courier">n</FONT></TT> bytes
of data in the string buffer input stream.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">n</FONT> is the number of bytes to skip.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<IMG SRC="returns.gif"></TD><TD >the actual number of bytes skipped.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">skip</FONT> in class <TT><FONT FACE="Courier">InputStream</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="EOFException"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">EOFException</FONT></TT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD > <TT><FONT FACE="Courier">IOException</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>
This exception class signals that an end-of-file (EOF) has been
reached unexpectedly during an input operation. This exception
is primarily used by data input streams, which typically expect
a binary file in a specific format, in which case an end-of-file
is an unusual condition. Here is the definition for the <TT><FONT FACE="Courier">EOFException</FONT></TT>
class:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.io.EOFException extends
java.io.IOException {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public EOFException();<BR>
&nbsp;&nbsp;public EOFException(String s);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">EOFException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="Except.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">EOFException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public EOFException()</FONT></TT>
<P>
This constructor creates a default EOF exception with no detail
message.<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">EOFException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="Except.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">EOFException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public EOFException(String s)</FONT></TT>
<P>
This constructor creates an EOF exception with the specified detail
message containing information specific to this particular exception.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="FileNotFoundException"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">FileNotFoundException</FONT></TT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IOException</FONT></TD></TR>
</TABLE></CENTER>
<P>
This exception class signals that a file could not be found; here
is the definition for the <TT><FONT FACE="Courier">FileNotFoundException</FONT></TT>
class:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.io.FileNotFoundException
extends java.io.IOException {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public FileNotFoundException();<BR>
&nbsp;&nbsp;public FileNotFoundException(String s);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">FileNotFoundException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="Except.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FileNotFoundException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public FileNotFoundException()</FONT></TT>
<P>
This constructor creates a default file-not-found exception with
no detail message.<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">FileNotFoundException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="Except.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">FileNotFoundException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public FileNotFoundException(String s)</FONT></TT>
<P>
This constructor creates a file-not-found exception with the specified
detail message containing information specific to this particular
exception.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="IOException"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">IOException</FONT></TT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD > <TT><FONT FACE="Courier">Exception</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>
This exception class signals that some kind of input/output (I/O)
exception has occurred; this is the definition for the <TT><FONT FACE="Courier">IOException</FONT></TT>
class:
<P>
<TT><FONT FACE="Courier">public class java.io.IOException extends
java.lang.Exception {<BR>
  // Constructors<BR>
  public IOException();<BR>
  public IOException(String s);<BR>
}</FONT></TT><P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">IOException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="Except.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IOException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public IOException()</FONT></TT>
<P>
This constructor creates a default I/O exception with no detail
message.<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">IOException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="Except.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IOException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public IOException(String s)</FONT></TT>
<P>
This constructor creates an I/O exception with the specified detail
message containing information specific to this particular exception.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="InterruptedIOException"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">InterruptedIOException</FONT></TT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD > <TT><FONT FACE="Courier">IOException</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>
See also: <TT><FONT FACE="Courier">InputStream</FONT></TT>, <TT><FONT FACE="Courier">OutputStream</FONT></TT>,
<TT><FONT FACE="Courier">Thread</FONT></TT>.
<P>
This exception class signals that an input/output (I/O) operation
has been interrupted; this is the definition for the <TT><FONT FACE="Courier">InterruptedIOException</FONT></TT>
class:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.io.InterruptedIOException
extends java.io.IOException {<BR>
&nbsp;&nbsp;// Member Variables<BR>
&nbsp;&nbsp;public int bytesTransferred;<BR>
<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public InterruptedIOException();<BR>
&nbsp;&nbsp;public InterruptedIOException(String s);<BR>
}</FONT></TT>
</BLOCKQUOTE>

<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=589><B>Member Variables</B></TD></TR>
</TABLE></CENTER>
<P>
<TT><B><FONT FACE="Courier">public int bytesTransferred</FONT></B></TT>
<P>
This is the number of bytes that had been transferred during the
I/O operation before it was interrupted.<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">InterruptedIOException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="Except.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">InterruptedIOException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public InterruptedIOException()</FONT></TT>
<P>
This constructor creates a default interrupted I/O exception with
no detail message.<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">InterruptedIOException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="Except.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">InterruptedIOException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public InterruptedIOException(String
s)</FONT></TT>
<P>
This constructor creates an interrupted I/O exception with the
specified detail message containing information specific to this
particular exception.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="UTFDataFormatException"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">UTFDataFormatException</FONT></TT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="io.gif"></TD></TR>
</TABLE></CENTER>
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>1-4-8</TD><TD > <TT><FONT FACE="Courier">IOException</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>
This exception class signals that a malformed UTF-8 string has
been read in a data input stream. This is the definition for the
<TT><FONT FACE="Courier">UTFDataFormatException</FONT></TT> class:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.io.UTFDataFormatException
extends java.io.IOException {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public UTFDataFormatException();<BR>
&nbsp;&nbsp;public UTFDataFormatException(String s);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">UTFDataFormatException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="Except.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">UTFDataFormatException</FONT></TT></H4>
 
</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public UTFDataFormatException()</FONT></TT>
<P>
This constructor creates a default UTF data format exception with
no detail message.<P><CENTER><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">UTFDataFormatException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="Except.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">UTFDataFormatException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="io.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<TT><FONT FACE="Courier">public UTFDataFormatException(String
s)</FONT></TT>
<P>
This constructor creates a UTF data format exception with the
specified detail message containing information specific to this
particular exception.
<P><CENTER><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



