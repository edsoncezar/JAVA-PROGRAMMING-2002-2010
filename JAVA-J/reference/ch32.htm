<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
<H1><FONT COLOR=#FF0000>Chapter 32</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Package </FONT><TT><FONT SIZE=6 COLOR=#FF0000 FACE="Courier">java.lang</FONT></FONT></TT></H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>

<UL>
<LI><A HREF="#Cloneable" >Cloneable</A>
<LI><A HREF="#Runnable" >Runnable</A>
<LI><A HREF="#Boolean" >Boolean</A>
<LI><A HREF="#Character" >Character</A>
<LI><A HREF="#Class" >Class</A>
<LI><A HREF="#ClassLoader" >ClassLoader</A>
<LI><A HREF="#Compiler" >Compiler</A>
<LI><A HREF="#Double" >Double</A>
<LI><A HREF="#Float" >Float</A>
<LI><A HREF="#Integer" >Integer</A>
<LI><A HREF="#Long" >Long</A>
<LI><A HREF="#Math" >Math</A>
<LI><A HREF="#Number" >Number</A>
<LI><A HREF="#Object" >Object</A>
<LI><A HREF="#Process" >Process</A>
<LI><A HREF="#Runtime" >Runtime</A>
<LI><A HREF="#SecurityManager" >SecurityManager</A>
<LI><A HREF="#String" >String</A>
<LI><A HREF="#StringBuffer" >StringBuffer</A>
<LI><A HREF="#System" >System</A>
<LI><A HREF="#Thread" >Thread</A>
</UL>
<HR>
<P>
The Java language package, also known as <TT><FONT FACE="Courier">java.lang</FONT></TT>,
provides the core classes that make up the Java programming environment.
The language package includes classes representing numbers, strings,
and objects, as well as classes for handling compilation, the
runtime environment, security, and threaded programming. The <TT><FONT FACE="Courier">java.lang</FONT></TT>
package is imported automatically into every Java program. Table
32.1 shows the contents of the <TT><FONT FACE="Courier">java.lang</FONT></TT>
package, and Figure 32.1 presents the hierarchy graphically.
<P>
<A HREF="f32-1.gif" ><B>Figure 32.1:</B> <I>Contents of package</I> java.lang.</A>
<BR>
<P>
<CENTER><B>Table 32.1. Contents of the </B><TT><B><FONT FACE="Courier">java.lang</FONT></B></TT><B>
package.</B></CENTER><P>
<CENTER>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=13%><I>Class Index</I></TD><TD WIDTH=159><I>Exception Index</I>
</TD><TD WIDTH=159><I>Error Index</I></TD><TD WIDTH=12%><I>Interface Index</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=13%><TT>Boolean</TT>
</TD><TD WIDTH=159><TT>ArithmeticException</TT>
</TD><TD WIDTH=159><TT>AbstractMethodError</TT>
</TD><TD WIDTH=12%><TT>Cloneable</TT></TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=13%><TT>Character</TT>
</TD><TD WIDTH=159><TT>ArrayIndexOutOfBoundsException</TT>
</TD><TD WIDTH=159><TT>ClassCircularityError</TT>
</TD><TD WIDTH=12%><TT>Runnable</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=13%><TT>Class</TT></TD>
<TD WIDTH=159><TT>ArrayStoreException</TT>
</TD><TD WIDTH=159><TT>ClassFormatError</TT>
</TD><TD WIDTH=12%><TT>&nbsp;</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=13%><TT>ClassLoader</TT>
</TD><TD WIDTH=159><TT>ClassCastException</TT>
</TD><TD WIDTH=159><TT>Error</TT></TD><TD WIDTH=12%><TT>&nbsp;</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=13%><TT>Compiler</TT>
</TD><TD WIDTH=159><TT>ClassNotFoundException</TT>
</TD><TD WIDTH=159><TT>IllegalAccessError</TT>
</TD><TD WIDTH=12%><TT>&nbsp;</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=13%><TT>Double</TT>
</TD><TD WIDTH=159><TT>CloneNotSupportedException</TT>
</TD><TD WIDTH=159><TT>IncompatibleClassChangeError</TT>
</TD><TD WIDTH=12%><TT>&nbsp;</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=13%><TT>Float</TT></TD>
<TD WIDTH=159><TT>Exception</TT></TD><TD WIDTH=159><TT>InstantiationError</TT>
</TD><TD WIDTH=12%><TT>&nbsp;</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=13%><TT>Integer</TT>
</TD><TD WIDTH=159><TT>IllegalAccessException</TT>
</TD><TD WIDTH=159><TT>InternalError</TT></TD>
<TD WIDTH=12%><TT>&nbsp;</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=13%><TT>Long</TT></TD>
<TD WIDTH=159><TT>IllegalArgumentException</TT>
</TD><TD WIDTH=159><TT>LinkageError</TT></TD>
<TD WIDTH=12%><TT>&nbsp;</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=13%><TT>Math</TT></TD>
<TD WIDTH=159><TT>IllegalMonitorStateException</TT>
</TD><TD WIDTH=159><TT>NoClassDefFoundError</TT>
</TD><TD WIDTH=12%><TT>&nbsp;</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=13%><TT>Number</TT>
</TD><TD WIDTH=159><TT>IllegalThreadStateException</TT>
</TD><TD WIDTH=159><TT>NoSuchFieldError</TT>
</TD><TD WIDTH=12%><TT>&nbsp;</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=13%><TT>Object</TT>
</TD><TD WIDTH=159><TT>IndexOutOfBoundsException</TT>
</TD><TD WIDTH=159><TT>NoSuchMethodError</TT>
</TD><TD WIDTH=12%><TT>&nbsp;</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=13%><TT>Process</TT>
</TD><TD WIDTH=159><TT>InstantiationException</TT>
</TD><TD WIDTH=159><TT>OutOfMemoryError</TT>
</TD><TD WIDTH=12%><TT>&nbsp;</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=13%><TT>Runtime</TT>
</TD><TD WIDTH=159><TT>InterruptedException</TT>
</TD><TD WIDTH=159><TT>StackOverflowError</TT>
</TD><TD WIDTH=12%><TT>&nbsp;</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=13%><TT>SecurityManager</TT>
</TD><TD WIDTH=159><TT>NegativeArraySizeException</TT>
</TD><TD WIDTH=159><TT>ThreadDeath</TT></TD>
<TD WIDTH=12%><TT>&nbsp;</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=13%><TT>String</TT>
</TD><TD WIDTH=159><TT>NoSuchMethodException</TT>
</TD><TD WIDTH=159><TT>UnknownError</TT></TD>
<TD WIDTH=12%><TT>&nbsp;</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=13%><TT>StringBuffer</TT>
</TD><TD WIDTH=159><TT>NullPointerException</TT>
</TD><TD WIDTH=159><TT>UnsatisfiedLinkError</TT>
</TD><TD WIDTH=12%><TT>&nbsp;</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=13%><TT>System</TT>
</TD><TD WIDTH=159><TT>NumberFormatException</TT>
</TD><TD WIDTH=159><TT>VerifyError</TT></TD>
<TD WIDTH=12%><TT>&nbsp;</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=13%><TT>Thread</TT>
</TD><TD WIDTH=159><TT>RuntimeException</TT>
</TD><TD WIDTH=159><TT>VirtualMachineError</TT>
</TD><TD WIDTH=12%><TT>&nbsp;</TT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=13%><TT>ThreadGroup</TT>
</TD><TD WIDTH=159><TT>SecurityException</TT>
</TD><TD WIDTH=159><TT>&nbsp;</TT></TD><TD WIDTH=12%><TT>&nbsp;</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=13%><TT>Throwable</TT>
</TD><TD WIDTH=159><TT>StringIndexOutOfBoundsException</TT>
</TD><TD WIDTH=159><TT>&nbsp;</TT>
</TD><TD WIDTH=12%><TT>&nbsp;</TT>
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="inter.gif"></TD><TD WIDTH=499><H2><A NAME="Cloneable"><FONT SIZE=5 COLOR=#FF0000>Cloneable</FONT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This interface indicates that an object can be cloned using the
<TT><FONT FACE="Courier">clone</FONT></TT> method defined in <TT><FONT FACE="Courier">Object</FONT></TT>.
The <TT><FONT FACE="Courier">clone</FONT></TT> method clones an
object by copying each of its member variables. At tempts to clone
an object that doesn't implement the <TT><FONT FACE="Courier">Cloneable</FONT></TT>
interface results in a <TT><FONT FACE="Courier">CloneNotSupportedException</FONT></TT>
being thrown. The definition for the <TT><FONT FACE="Courier">Cloneable</FONT></TT>
interface follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public interface java.lang.Cloneable
{<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="inter.gif"></TD><TD WIDTH=499><H2><A NAME="Runnable"><FONT SIZE=5 COLOR=#FF0000>Runnable</FONT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
See also: <TT><FONT FACE="Courier">Thread</FONT></TT>
<P>
This interface provides a means for an object to be executed within
a thread without having to be derived from the <TT><FONT FACE="Courier">Thread</FONT></TT>
class. Classes implementing the <TT><FONT FACE="Courier">Runnable</FONT></TT>
interface supply a <TT><FONT FACE="Courier">run</FONT></TT> method
that defines the threaded execution for the class. The definition
for the <TT><FONT FACE="Courier">Runnable</FONT></TT> interface
follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public interface java.lang.Runnable {
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public abstract void run();<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">run</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Runnable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract void run()</FONT></TT>
</BLOCKQUOTE>
<P>
This method is executed when a thread associated with an object
implementing the <TT><FONT FACE="Courier">Runnable</FONT></TT>
interface is started. All of the threaded execution for the object
takes place in the <TT><FONT FACE="Courier">run</FONT></TT> method,
which means that you should place all threaded code in this method.<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499>
<H2><A NAME="Boolean"><FONT SIZE=5 COLOR=#FF0000>Boolean</FONT></A></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This class implements an object type wrapper for Boolean values.
Object type wrappers are useful because many Java classes operate
on objects rather than primitive data types. In addition, the
<TT><FONT FACE="Courier">Boolean</FONT></TT> class provides support
constants and methods for working with Boolean values. The definition
for the <TT><FONT FACE="Courier">Boolean</FONT></TT> class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final class java.lang.Boolean
extends java.lang.Object {<BR>
&nbsp;&nbsp;// Member Constants<BR>
&nbsp;&nbsp;public final static Boolean FALSE;<BR>
&nbsp;&nbsp;public final static Boolean TRUE;<BR>
<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public Boolean(boolean value);<BR>
&nbsp;&nbsp;public Boolean(String s);<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public boolean booleanValue();<BR>
&nbsp;&nbsp;public boolean equals(Object obj);<BR>
&nbsp;&nbsp;public static boolean getBoolean(String name);<BR>
&nbsp;&nbsp;public int hashCode();<BR>
&nbsp;&nbsp;public String toString();<BR>
<B>&nbsp;&nbsp;public static Boolean valueOf(String s);<BR>
}</B></FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=583><H4>Member Constants</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static Boolean FALSE</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is a constant <TT><FONT FACE="Courier">Boolean</FONT></TT>
object representing the primitive Boolean value <TT><FONT FACE="Courier">FALSE</FONT></TT>.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static Boolean TRUE</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is a constant <TT><FONT FACE="Courier">Boolean</FONT></TT>
object representing the primitive Boolean value <TT><FONT FACE="Courier">TRUE</FONT></TT>.<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Boolean</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Boolean</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Boolean(boolean value)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a Boolean wrapper object representing
the specified primitive Boolean value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">value</FONT> is the Boolean value to be wrapped.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Boolean</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Boolean</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Boolean(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a Boolean wrapper object representing
the specified string. If the string is set to <TT><FONT FACE="Courier">&quot;true&quot;</FONT></TT>,
the wrapper represents the primitive Boolean value <TT><FONT FACE="Courier">TRUE</FONT></TT>;
otherwise, the wrapper represents <TT><FONT FACE="Courier">FALSE</FONT></TT>.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the string representation of a Boolean value to be wrapped.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">booleanValue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Boolean</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean booleanValue()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the primitive Boolean value represented
by this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The Boolean value represented.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">equals</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Boolean</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean equals(Object obj)</FONT></TT>
</BLOCKQUOTE>
<P>
This method compares the Boolean value of the specified object
to the Boolean value of this object. The <TT><FONT FACE="Courier">equals</FONT></TT>
method only returns <TT><FONT FACE="Courier">TRUE</FONT></TT>
if the specified object is a <TT><FONT FACE="Courier">Boolean</FONT></TT>
object representing the same primitive Boolean value as this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>

<TD ><FONT FACE="Courier">obj</FONT> is the object to compare.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the specified object is a <TT><FONT FACE="Courier">Boolean</FONT></TT> object representing the same primitive Boolean value as this object; <TT><FONT FACE="Courier">FALSE</FONT></TT> otherwise.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">equals</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">getBoolean</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Boolean</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static boolean getBoolean(String
name)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the Boolean value of the system property
with the specified name.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Name</FONT> is the system property name for which to check the Boolean value.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The Boolean value of the specified system property.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">HashCode</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Boolean</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int hashCode()</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates a hash code for this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A hash code for this object.</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">HashCode</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Boolean</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String toString()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a string representation of the primitive
Boolean value for this object. If the Boolean value is <TT><FONT FACE="Courier">TRUE</FONT></TT>,
the string <TT><FONT FACE="Courier">&quot;true&quot;</FONT></TT>
is returned; otherwise, the string <TT><FONT FACE="Courier">&quot;false&quot;</FONT></TT>
is returned.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A string representing the Boolean value of this object.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">toString</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">valueOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Boolean</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static Boolean valueOf(String
s)</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a new Boolean wrapper object based on the
Boolean value represented by the specified string. If the string
is set to <TT><FONT FACE="Courier">&quot;true&quot;</FONT></TT>,
the wrapper represents the primitive Boolean value <TT><FONT FACE="Courier">TRUE</FONT></TT>;
otherwise, the wrapper represents <TT><FONT FACE="Courier">FALSE</FONT></TT>.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the string representation of a Boolean value to be wrapped.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A Boolean wrapper object representing the specified string.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="Character"><FONT SIZE=5 COLOR=#FF0000>Character</FONT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This class implements an object type wrapper for character values.
Object type wrappers are useful because many Java classes operate
on objects rather than primitive data types. In addition, the
<TT><FONT FACE="Courier">Character</FONT></TT> class provides
support constants and methods for working with character values.
The definition for the <TT><FONT FACE="Courier">Character</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final class java.lang.Character
extends java.lang.Object {<BR>
&nbsp;&nbsp;// Member Constants<BR>
&nbsp;&nbsp;public final static int MAX_RADIX;<BR>
&nbsp;&nbsp;public final static char MAX_VALUE;<BR>
&nbsp;&nbsp;public final static int MIN_RADIX;<BR>
&nbsp;&nbsp;public final static char MIN_VALUE;<BR>
<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public Character(char value);<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public char charValue();<BR>
&nbsp;&nbsp;public static int digit(char ch, int radix);<BR>
&nbsp;&nbsp;public boolean equals(Object obj);<BR>
&nbsp;&nbsp;public static char forDigit(int digit, int radix);
<BR>
&nbsp;&nbsp;public int hashCode();<BR>
&nbsp;&nbsp;public static boolean isDefined(char ch);<BR>
&nbsp;&nbsp;public static boolean isDigit(char ch);<BR>
&nbsp;&nbsp;public static boolean isJavaLetter(char ch);<BR>
&nbsp;&nbsp;public static boolean isJavaLetterOrDigit(char ch);
<BR>
&nbsp;&nbsp;public static boolean isLetter(char ch);<BR>
&nbsp;&nbsp;public static boolean isLetterOrDigit(char ch);<BR>
&nbsp;&nbsp;public static boolean isLowerCase(char ch);<BR>
&nbsp;&nbsp;public static boolean isSpace(char ch);<BR>
&nbsp;&nbsp;public static boolean isTitleCase(char ch);<BR>
&nbsp;&nbsp;public static boolean isUpperCase(char ch);<BR>
&nbsp;&nbsp;public static char toLowerCase(char ch);<BR>
&nbsp;&nbsp;public String toString();<BR>
&nbsp;&nbsp;public static char toTitleCase(char ch);<BR>
&nbsp;&nbsp;public static char toUpperCase(char ch);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=589><H4>Member Constants</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static int MAX_RADIX</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is a constant representing the maximum radix value allowed
for conversion between numbers and strings. This constant is set
to <TT><FONT FACE="Courier">36</FONT></TT>.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static int MAX_VALUE</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is a constant representing the largest character value supported.
This constant is set to <TT><FONT FACE="Courier">\uffff</FONT></TT>.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static int MIN_RADIX</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is a constant representing the minimum radix value allowed
for conversion between numbers and strings. This constant is set
to <TT><FONT FACE="Courier">2</FONT></TT>.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static int MIN_VALUE</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is a constant representing the smallest character value supported.
This constant is set to <TT><FONT FACE="Courier">\u0000</FONT></TT>.<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Character</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Character</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Character(char value)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a character wrapper object representing
the specified primitive character value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">value</FONT> is the character value to be wrapped.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">charValue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Character</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public char charValue()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the primitive character value represented
by this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The character value represented.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">digit</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Character</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static int digit(char ch, int
radix)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the numeric value of the specified character
digit using the specified radix.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">ch</FONT> is the character to be converted to a number.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">radix</FONT> is the radix to use in the conversion.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The numeric value of the specified character digit using the specified radix, or <TT><FONT FACE="Courier">-1</FONT></TT> if the character isn't a valid numeric digit.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">equals</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Character</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean equals(Object obj)</FONT></TT>
</BLOCKQUOTE>
<P>
This method compares the character value of the specified object
to the character value of this object. The <TT><FONT FACE="Courier">equals</FONT></TT>
method only returns <TT><FONT FACE="Courier">TRUE</FONT></TT>
if the specified object is a <TT><FONT FACE="Courier">Character</FONT></TT>
object representing the same primitive character value as this
object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">obj</FONT> is the object to compare.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the specified object is a <TT><FONT FACE="Courier">Character</FONT></TT> object representing the same primitive character value as this object; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">equals</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">forDigit</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Character</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static char forDigit(int digit,
int radix)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the character value of the specified numeric
digit using the specified radix.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">digit</FONT> is the numeric digit to be converted to a character.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">radix</FONT> is the radix to use in the conversion.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The character value of the specified numeric digit using the specified radix, or <TT><FONT FACE="Courier">0</FONT></TT> if the number isn't a valid character.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">hashCode</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Character</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int hashCode()</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates a hash code for this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A hash code for this object.</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">hashCode</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">isDefined</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Character</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static boolean isDefined(char
ch)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the specified character has a defined
Unicode meaning. A character is defined if it has an entry in
the Unicode attribute table.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">ch</FONT> is the character to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the character has a defined Unicode meaning; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">isDigit</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Character</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static boolean isDigit(char ch)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the specified character is a numeric
digit. A character is a numeric digit if its Unicode name contains
the word <TT><FONT FACE="Courier">DIGIT</FONT></TT>.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">ch</FONT> is the character to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the character is a numeric digit; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">isJavaLetter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Character</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static boolean isJavaLetter(char
ch)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the specified character is permissible
as the leading character in a Java identifier. A character is
considered a Java letter if it is a letter, the ASCII dollar sign
character (<TT><FONT FACE="Courier">$</FONT></TT>), or the underscore
character (<TT><FONT FACE="Courier">_</FONT></TT>).
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">ch</FONT> is the character to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the character is a Java letter; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">isJavaLetterOrDigit</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Character</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static boolean isJavaLetterOrDigit(char
ch)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the specified character is permissible
as a nonleading character in a Java identifier. A character is
considered a Java letter or digit if it is a letter, a digit,
the ASCII dollar sign character (<TT><FONT FACE="Courier">$</FONT></TT>),
or the underscore character (<TT><FONT FACE="Courier">_</FONT></TT>).
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">ch</FONT> is the character to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the character is a Java letter or digit; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">isLetter</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Character</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static boolean isLetter(char ch)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the specified character is a letter.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">ch</FONT> is the character to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the character is a letter; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">isLetterOrDigit</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Character</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static boolean isLetterOrDigit(char
ch)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the specified character is a letter
or digit.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">ch</FONT> is the character to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the character is a letter or digit; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">isLowerCase</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Character</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static boolean isLowerCase(char
ch)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the specified character is a lowercase
character.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">ch</FONT> is the character to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the character is a lowercase character; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">isSpace</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Character</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static boolean isSpace(char ch)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the specified character is a whitespace
character.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">ch</FONT> is the character to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the character is a whitespace character; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">isTitleCase</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Character</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static boolean isTitleCase(char
ch)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the specified character is a titlecase
character. Titlecase characters are those for which the printed
representations look like pairs of Latin letters.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">ch</FONT> is the character to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the character is a titlecase character; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">isUpperCase</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Character</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static boolean isUpperCase(char
ch)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the specified character is an uppercase
character.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">ch</FONT> is the character to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the character is an uppercase character; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toLowerCase</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Character</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static char toLowerCase(char ch)</FONT></TT>
</BLOCKQUOTE>
<P>
This method converts the specified character to a lowercase character
if the character isn't already lowercase and a lowercase equivalent
exists.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">ch</FONT> is the character to be converted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The lowercase equivalent of the specified character, if one exists; otherwise, returns the original character.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Character</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String toString()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a string representation of the primitive
character value for this object; the resulting string is one character
in length.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A string representing the character value of this object.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">toString</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toTitleCase</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Character</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static char toTitleCase(char ch)</FONT></TT>
</BLOCKQUOTE>
<P>
This method converts the specified character to a titlecase character
if the character isn't already a titlecase character and a titlecase
equivalent exists. Titlecase characters are characters for which
the printed representations look like pairs of Latin letters.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">ch</FONT> is the character to be converted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The titlecase equivalent of the specified character, if one exists; otherwise, returns the original character.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toUpperCase</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Character</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static char toUpperCase(char ch)</FONT></TT>
</BLOCKQUOTE>
<P>
This method converts the specified character to an uppercase character
if the character isn't already uppercase and an uppercase equivalent
exists.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">ch</FONT> is the character to be converted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The uppercase equivalent of the specified character, if one exists; otherwise, returns the original character.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="Class"><FONT SIZE=5 COLOR=#FF0000>Class</FONT></A></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This class implements a runtime descriptor for classes and interfaces
in a running Java program. Instances of <TT><FONT FACE="Courier">Class</FONT></TT>
are constructed automatically by the Java virtual machine when
classes are loaded, which explains why there are no public constructors
for the class. The definition for the <TT><FONT FACE="Courier">Class</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final class java.lang.Class extends
java.lang.Object {<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public static Class forName(String className);<BR>
&nbsp;&nbsp;public ClassLoader getClassLoader();<BR>
&nbsp;&nbsp;public Class[] getInterfaces();<BR>
&nbsp;&nbsp;public String getName();<BR>
&nbsp;&nbsp;public Class getSuperclass();<BR>
&nbsp;&nbsp;public boolean isInterface();<BR>
&nbsp;&nbsp;public Object newInstance();<BR>
&nbsp;&nbsp;public String toString();<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">forName</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Class</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static Class forName(String className)
throws ClassNotFoundException</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the runtime class descriptor for the class
with the specified name.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">className</FONT> is the fully qualified name of the desired class.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The runtime class descriptor for the class with the specified name.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">ClassNotFoundException</FONT> if the class could not be found.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">getClassLoader</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Class</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public ClassLoader getClassLoader()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the class loader for this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The class loader for this object, or <TT><FONT FACE="Courier">NULL</FONT></TT> if the class wasn't created by a class loader.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">getInterfaces</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Class</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Class[] getInterfaces()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the interfaces implemented by the class
or interface represented by this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >An array of interfaces implemented by the class or interface represented by this object, or an array of length 0 if no interfaces are implemented.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">getName</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Class</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String getName()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the fully qualified name of the class or
interface represented by this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The fully qualified name of the class or interface represented by this object.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">getSuperclass</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Class</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Class getSuperclass()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the superclass of the class represented
by this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The superclass of the class represented by this object, or <TT><FONT FACE="Courier">NULL</FONT></TT> if this object represents the <TT><FONT FACE="Courier">Object</FONT></TT> class.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">isInterface</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Class</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean isInterface()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the class represented by this object
is actually an interface.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">TRUE</FONT> if the class is an interface; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">newInstance</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Class</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Object newInstance() throws InstantiationException,
</FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">IllegalAccessException</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a new default instance of the class represented
by this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A new default instance of the class represented by this object.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">InstantiationException</FONT> if you try to instantiate an abstract class or an interface, or if the instantiation fails for some other reason.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IllegalAccessException</FONT> if the class is not accessible.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Class</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String toString()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the name of the class or interface represented
by this object, with the string <TT><FONT FACE="Courier">&quot;class&quot;</FONT></TT>
or the string <TT><FONT FACE="Courier">&quot;interface&quot;</FONT></TT>
prepended appropriately.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The name of the class or interface represented by this object, with a descriptive string prepended indicating whether the object represents a class or interface.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">toString</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="ClassLoader"><FONT SIZE=5 COLOR=#FF0000>ClassLoader</FONT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This class is an abstract class that defines a mechanism for dynamically
loading classes into the Java runtime system. By default, the
runtime system loads classes from files in the directory defined
in the <TT><FONT FACE="Courier">CLASSPATH</FONT></TT> environment
variable. This is a platform-dependent process and doesn't involve
<TT><FONT FACE="Courier">ClassLoader</FONT></TT> objects. The
<TT><FONT FACE="Courier">ClassLoader</FONT></TT> class comes into
play when you want to define other techniques of loading classes,
such as across a network connection. The definition for the <TT><FONT FACE="Courier">ClassLoader</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract class java.lang.ClassLoader
extends java.lang.Object {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;protected ClassLoader();<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;protected final Class defineClass(byte data[], int
off, int len);<BR>
&nbsp;&nbsp;protected final Class findSystemClass(String name);
<BR>
&nbsp;&nbsp;protected abstract Class loadClass(String name, boolean
resolve);<BR>
&nbsp;&nbsp;protected final void resolveClass(Class c);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ClassLoader</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ClassLoader</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">protected ClassLoader()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default class loader. If a security
manager is present, it is checked to see whether the current thread
has permission to create the class loader. If not, a <TT><FONT FACE="Courier">SecurityException</FONT></TT>
is thrown.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread doesn't have permission to create the class loader.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">defineClass</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ClassLoader</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">protected final Class defineClass(byte
b[], int off, int len)</FONT></TT>
</BLOCKQUOTE>
<P>
This method converts an array of bytes into an instance of class
<TT><FONT FACE="Courier">Class</FONT></TT> by reading <TT><FONT FACE="Courier">len</FONT></TT>
bytes from the array <TT><FONT FACE="Courier">b</FONT></TT> beginning
<TT><FONT FACE="Courier">off</FONT></TT> bytes into the array.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the byte array containing the class data.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array for the data.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the length in bytes of the class data.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A <TT><FONT FACE="Courier">Class</FONT></TT> object created from the class data.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">ClassFormatError</FONT> if the class data does not define a valid class.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">findSystemClass</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ClassLoader</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">protected final Class findSystemClass(String
name) throws ClassNotFoundException</FONT></TT>
</BLOCKQUOTE>
<P>
This method finds the system class with the specified name, loading
it if necessary. A system class is a class loaded from the local
file system with no class loader in a platform-specific manner.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">name</FONT> is the name of the system class to find.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A <TT><FONT FACE="Courier">Class</FONT></TT> object representing the system class.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">ClassNotFoundException</FONT> if the class is not found.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NoClassDefFoundError</FONT> if a definition for the class is not found.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">loadClass</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ClassLoader</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">protected abstract Class loadClass(String
name, boolean resolve) throws </FONT></TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT><FONT FACE="Courier">ClassNotFoundException</FONT></TT>
</BLOCKQUOTE>
<P>
This method loads the class with the specified name, resolving
it if the <TT><FONT FACE="Courier">resolve</FONT></TT> parameter
is set to <TT><FONT FACE="Courier">TRUE</FONT></TT>. This method
must be implemented in all derived class loaders, because it is
defined as abstract.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">name</FONT> is the name of the desired class.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">resolve</FONT> is a Boolean value specifying whether the class is to be resolved. A value of <TT><FONT FACE="Courier">TRUE</FONT></TT> means the class is resolved, whereas a value of <TT><FONT FACE="Courier">FALSE</FONT></TT> means that the class isn't resolved.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The loaded <TT><FONT FACE="Courier">Class</FONT></TT> object, or <TT><FONT FACE="Courier">NULL</FONT></TT> if the class isn't found.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">ClassNotFoundException</FONT> if the class is not found.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">resolveClass</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ClassLoader</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">protected final void resolveClass(Class
c)</FONT></TT>
</BLOCKQUOTE>
<P>
This method resolves the specified class so that instances of
it can be created or so that its methods can be called.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">c</FONT> is the class to be resolved.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="Compiler"><FONT SIZE=5 COLOR=#FF0000>Compiler</FONT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This class provides the framework for native Java code compilers
and related services. The Java runtime system looks for a native
code compiler on startup, in which case the compiler is called
to compile Java bytecode classes into native code. The default
implementation for the <TT><FONT FACE="Courier">Compiler</FONT></TT>
class does nothing. The definition for the <TT><FONT FACE="Courier">Compiler</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final class java.lang.Compiler
extends java.lang.Object {<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public static Object command(Object any);<BR>
&nbsp;&nbsp;public static boolean compileClass(Class clazz);<BR>
&nbsp;&nbsp;public static boolean compileClasses(String string);
<BR>
&nbsp;&nbsp;public static void disable();<BR>
&nbsp;&nbsp;public static void enable();<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">command</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Compiler</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static Object command(Object any)</FONT></TT>
</BLOCKQUOTE>
<P>
This method performs some compiler-specific operation based on
the type of specified object and its related state.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">any</FONT> is the object on which to perform an operation.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A compiler-specific value, or <TT><FONT FACE="Courier">NULL</FONT></TT> if no compiler is available.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">compileClass</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Compiler</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static boolean compileClass(Class
clazz)</FONT></TT>
</BLOCKQUOTE>
<P>
This method compiles the specified class.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">clazz</FONT> is the class to compile.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the compilation was successful; <TT><FONT FACE="Courier">FALSE</FONT></TT> if the compilation failed or if no compiler is available.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">compileClasses</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Compiler</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static boolean compileClasses(String
string)</FONT></TT>
</BLOCKQUOTE>
<P>
This method compiles all classes for which the names match the
specified string name.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">string</FONT> is a string containing the name of the classes to compile.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the compilation was successful; <TT><FONT FACE="Courier">FALSE</FONT></TT> if the compilation failed or if no compiler is available.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Disable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Compiler</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static void disable()</FONT></TT>
</BLOCKQUOTE>
<P>
This method disables the compiler.<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Enable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Compiler</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static void enable()</FONT></TT>
</BLOCKQUOTE>
<P>
This method enables the compiler.<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499>
<H2><A NAME="Double"><FONT SIZE=5 COLOR=#FF0000>Double</FONT></A></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Number</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This class implements an object type wrapper for double values.
Object type wrappers are useful because many Java classes operate
on objects rather than primitive data types. In addition, the
<TT><FONT FACE="Courier">Double</FONT></TT> class provides support
constants and methods for working with double values. The definition
for the <TT><FONT FACE="Courier">Double</FONT></TT> class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final class java.lang.Double extends
java.lang.Number {<BR>
&nbsp;&nbsp;// Member Constants<BR>
&nbsp;&nbsp;public final static double MAX_VALUE;<BR>
&nbsp;&nbsp;public final static double MIN_VALUE;<BR>
&nbsp;&nbsp;public final static double NaN;<BR>
&nbsp;&nbsp;public final static double NEGATIVE_INFINITY;<BR>
&nbsp;&nbsp;public final static double POSITIVE_INFINITY;<BR>
<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public Double(double value);<BR>
&nbsp;&nbsp;public Double(String s);<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public static long doubleToLongBits(double value);
<BR>
&nbsp;&nbsp;public double doubleValue();<BR>
&nbsp;&nbsp;public boolean equals(Object obj);<BR>
&nbsp;&nbsp;public float floatValue();<BR>
&nbsp;&nbsp;public int hashCode();<BR>
&nbsp;&nbsp;public int intValue();<BR>
&nbsp;&nbsp;public boolean isInfinite();<BR>
&nbsp;&nbsp;public static boolean isInfinite(double v);<BR>
&nbsp;&nbsp;public boolean isNaN();<BR>
&nbsp;&nbsp;public static boolean isNaN(double v);<BR>
&nbsp;&nbsp;public static double longBitsToDouble(long bits);
<BR>
&nbsp;&nbsp;public long longValue();<BR>
&nbsp;&nbsp;public String toString();<BR>
&nbsp;&nbsp;public static String toString(double d);<BR>
&nbsp;&nbsp;public static Double valueOf(String s);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=589><H4>Member Constants</H4>
</TD></TR>
</TABLE></CENTER>
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static double MAX_VALUE</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is a constant representing the maximum value allowed for
a double. This constant is set to <TT><FONT FACE="Courier">1.79769313486231570e+308d</FONT></TT>.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static double MIN_VALUE</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is a constant representing the minimum value allowed for
a double. This constant is set to <TT><FONT FACE="Courier">4.94065645841246544e-324d</FONT></TT>.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static double NaN</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is a constant representing the not-a-number value for double
types, which is not equal to anything, including itself.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static double NEGATIVE_INFINITY</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is a constant representing negative infinity for double types.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static double POSITIVE_INFINITY</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is a constant representing positive infinity for double types.<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Double</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Double</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Double(double value)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a double wrapper object representing
the specified primitive double value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">value</FONT> is the double value to be wrapped.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Double</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Double</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Double(String s) throws NumberFormatException</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a double wrapper object representing
the specified string. The string is converted to a double using
a similar technique as the <TT><FONT FACE="Courier">valueOf</FONT></TT>
method.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the string representation of a double value to be wrapped.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NumberFormatException</FONT> if the string does not contain a parsable double.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">DoubleToLongBits</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Double</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static long doubleToLongBits(double
value)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the IEEE 754 floating-point double precision
representation of the specified double value. The IEEE 754 floating-point
double precision format specifies the following bit layout:
<UL>
<LI>Bit 63 represents the sign of the number.
<LI>Bits 62-52 represent the exponent of the number.
<LI>Bits 51-0 represent the mantissa of the number.
</UL>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">value</FONT> is the double value to convert to the IEEE 754 format.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The IEEE 754 floating-point representation of the specified double value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">doubleValue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Double</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public double doubleValue()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the primitive double value represented
by this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The double value represented.</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">doubleValue</FONT> in class <TT><FONT FACE="Courier">Number</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">equals</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Double</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean equals(Object obj)</FONT></TT>
</BLOCKQUOTE>
<P>
This method compares the double value of the specified object
to the double value of this object. The <TT><FONT FACE="Courier">equals</FONT></TT>
method returns <TT><FONT FACE="Courier">TRUE</FONT></TT> only
if the specified object is a <TT><FONT FACE="Courier">Double</FONT></TT>
object representing the same primitive double value as this object.
Note that in order to be useful in hash tables, this method considers
two <TT><FONT FACE="Courier">NaN</FONT></TT> double values to
be equal, even though <TT><FONT FACE="Courier">NaN</FONT></TT>
technically is not equal to itself.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">obj</FONT> is the object to compare.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the specified object is a <TT><FONT FACE="Courier">Double</FONT></TT> object representing the same primitive double value as this object; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">equals</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">floatValue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Double</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public float floatValue()</FONT></TT>
</BLOCKQUOTE>
<P>
This method converts the primitive double value represented by
this object to a float.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A float conversion of the double value represented.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">floatValue</FONT> in class <TT><FONT FACE="Courier">Number</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">hashCode</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Double</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int hashCode()</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates a hash code for this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A hash code for this object.</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">hashCode</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">intValue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Double</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int intValue()</FONT></TT>
</BLOCKQUOTE>
<P>
This method converts the primitive double value represented by
this object to an integer.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >An integer conversion of the double value represented.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">intValue</FONT> in class <TT><FONT FACE="Courier">Number</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">isInfinite</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Double</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean isInfinite()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the primitive double value represented
by this object is positive or negative infinity.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">TRUE</FONT> if the double value is positive or negative infinity; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">isInfinite</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Double</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static boolean isInfinite(double
v)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the specified double value is positive
or negative infinity.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the double value to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the double value is positive or negative infinity; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">isNaN</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Double</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean isNaN()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the primitive double value represented
by this object is not a number (<TT><FONT FACE="Courier">NaN</FONT></TT>).
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">TRUE</FONT> if the double value is not a number; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">isNaN</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Double</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static boolean isNaN(double v)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the specified double value is not
a number (<TT><FONT FACE="Courier">NaN</FONT></TT>).
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the double value to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the double value is not a number; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">LongBitsToDouble</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Double</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static double longBitsToDouble(long
bits)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the double representation of the specified
IEEE 754 floating-point double precision value. The IEEE 754 floating-point
double precision format specifies the following bit layout:
<UL>
<LI>Bit 63 represents the sign of the number.
<LI>Bits 62-52 represent the exponent of the number.
<LI>Bits 51-0 represent the mantissa of the number.
</UL>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">bits</FONT> is the IEEE 754 floating-point value to convert to a double.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The double representation of the specified IEEE 754 floating-point value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">longValue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Double</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public long longValue()</FONT></TT>
</BLOCKQUOTE>
<P>
This method converts the primitive double value represented by
this object to a long.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A long conversion of the double value represented.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">longValue</FONT> in class <TT><FONT FACE="Courier">Number</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Double</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String toString()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a string representation of the primitive
double value for this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A string representing the double value of this object.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">toString</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Double</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static String toString(double
d)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a string representation of the specified
double value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">d</FONT> is the double value to be converted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A string representing the specified double value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">valueOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Double</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static Double valueOf(String s)
throws NumberFormatException</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a new double wrapper object based on the double
value represented by the specified string.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the string representation of a double value to be wrapped.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A double wrapper object representing the specified string.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NumberFormatException</FONT> if the string does not contain a parsable double.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="Float"><FONT SIZE=5 COLOR=#FF0000>Float</FONT></A></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Number</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This class implements an object type wrapper for float values.
Object type wrappers are useful because many Java classes operate
on objects rather than primitive data types. In addition, the
<TT><FONT FACE="Courier">Float</FONT></TT> class provides support
constants and methods for working with float values. The definition
for the <TT><FONT FACE="Courier">Float</FONT></TT> class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final class java.lang.Float extends
java.lang.Number {<BR>
&nbsp;&nbsp;// Member Constants<BR>
&nbsp;&nbsp;public final static float MAX_VALUE;<BR>
&nbsp;&nbsp;public final static float MIN_VALUE;<BR>
&nbsp;&nbsp;public final static float NaN;<BR>
&nbsp;&nbsp;public final static float NEGATIVE_INFINITY;<BR>
&nbsp;&nbsp;public final static float POSITIVE_INFINITY;<BR>
<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public Float(double value);<BR>
&nbsp;&nbsp;public Float(float value);<BR>
&nbsp;&nbsp;public Float(String s);<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public double doubleValue();<BR>
&nbsp;&nbsp;public boolean equals(Object obj);<BR>
&nbsp;&nbsp;public static int floatToIntBits(float value);<BR>
&nbsp;&nbsp;public float floatValue();<BR>
&nbsp;&nbsp;public int hashCode();<BR>
&nbsp;&nbsp;public static float intBitsToFloat(int bits);<BR>
&nbsp;&nbsp;public int intValue();<BR>
&nbsp;&nbsp;public boolean isInfinite();<BR>
&nbsp;&nbsp;public static boolean isInfinite(float v);<BR>
&nbsp;&nbsp;public boolean isNaN();<BR>
&nbsp;&nbsp;public static boolean isNaN(float v);<BR>
&nbsp;&nbsp;public long longValue();<BR>
&nbsp;&nbsp;public String toString();<BR>
&nbsp;&nbsp;public static String toString(float f);<BR>
&nbsp;&nbsp;public static Float valueOf(String s);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=589><H4>Member Constants</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static float MAX_VALUE</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is a constant representing the maximum value allowed for
a float. This constant is set to <TT><FONT FACE="Courier">3.40282346638528860e+38</FONT></TT>.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static float MIN_VALUE</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is a constant representing the minimum value allowed for
a float. This constant is set to <TT><FONT FACE="Courier">1.40129846432481707e-45</FONT></TT>.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static float NaN</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is a constant representing the not-a-number value for float
types, which is not equal to anything, including itself.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static float NEGATIVE_INFINITY</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is a constant representing negative infinity for float types.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static float POSITIVE_INFINITY</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is a constant representing positive infinity for float types.<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Float</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Float</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Float(double value)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a float wrapper object representing the
specified primitive double value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">value</FONT> is the double value to be wrapped.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Float</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Float</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Float(float value)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a float wrapper object representing the
specified primitive float value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">value</FONT> is the float value to be wrapped.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Float</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Float</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Float(String s) throws NumberFormatException</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a float wrapper object representing the
specified string. The string is converted to a float using a technique
similar to the <TT><FONT FACE="Courier">valueOf</FONT></TT> method.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the string representation of a float value to be wrapped.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NumberFormatException</FONT> if the string does not contain a parsable float.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">doubleValue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Float</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public double doubleValue()</FONT></TT>
</BLOCKQUOTE>
<P>
This method converts the primitive float value represented by
this object to a double.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A double conversion of the float value represented.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">doubleValue</FONT> in class <TT><FONT FACE="Courier">Number</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">equals</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Float</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean equals(Object obj)</FONT></TT>
</BLOCKQUOTE>
<P>
This method compares the float value of the specified object to
the float value of this object. The <TT><FONT FACE="Courier">equals</FONT></TT>
method returns <TT><FONT FACE="Courier">TRUE</FONT></TT> only
if the specified object is a <TT><FONT FACE="Courier">Float</FONT></TT>
object representing the same primitive float value as this object.
Note that in order to be useful in hash tables, this method considers
two <TT><FONT FACE="Courier">NaN</FONT></TT> float values to be
equal, even though <TT><FONT FACE="Courier">NaN</FONT></TT> technically
is not equal to itself.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">obj</FONT> is the object to compare.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the specified object is a <TT><FONT FACE="Courier">Float</FONT></TT> object representing the same primitive float value as this object; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">equals</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">FloatToIntBits</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Float</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static int floatToIntBits(float
value)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the IEEE 754 floating-point single precision
representation of the specified float value. The IEEE 754 floating-point
single precision format specifies the following bit layout:
<UL>
<LI>Bit 31 represents the sign of the number.
<LI>Bits 30-23 represent the exponent of the number.
<LI>Bits 22-0 represent the mantissa of the number.
</UL>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">value</FONT> is the float value to convert to the IEEE 754 format.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The IEEE 754 floating-point representation of the specified float value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">floatValue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Float</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public float floatValue()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the primitive float value represented by
this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The float value represented.</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">floatValue</FONT> in class <TT><FONT FACE="Courier">Number</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">hashCode</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Float</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int hashCode()</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates a hash code for this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A hash code for this object.</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">hashCode</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">IntBitsToFloat</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Float</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static float intBitsToFloat(int
bits)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the float representation of the specified
IEEE 754 floating-point single precision value. The IEEE 754 floating-point
single precision format specifies the following bit layout:
<UL>
<LI>Bit 31 represents the sign of the number.
<LI>Bits 30-23 represent the exponent of the number.
<LI>Bits 22-0 represent the mantissa of the number.
</UL>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">bits</FONT> is the IEEE 754 floating-point value to convert to a float.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The float representation of the specified IEEE 754 floating-point value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">intValue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Float</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int intValue()</FONT></TT>
</BLOCKQUOTE>
<P>
This method converts the primitive float value represented by
this object to an integer.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >An integer conversion of the float value represented.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">intValue</FONT> in class <TT><FONT FACE="Courier">Number</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">isInfinite</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Float</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean isInfinite()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the primitive float value represented
by this object is positive or negative infinity.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">TRUE</FONT> if the float value is positive or negative infinity; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">isInfinite</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Float</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static boolean isInfinite(float
v)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the specified float value is positive
or negative infinity.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the float value to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the float value is positive or negative infinity; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">isNaN</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Float</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean isNaN()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the primitive float value represented
by this object is not a number (<TT><FONT FACE="Courier">NaN</FONT></TT>).
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">TRUE</FONT> if the float value is not a number; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">isNaN</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Float</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static boolean isNaN(float v)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether the specified float value is not
a number (<TT><FONT FACE="Courier">NaN</FONT></TT>).
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">v</FONT> is the float value to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the float value is not a number; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">longValue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Float</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public long longValue()</FONT></TT>
</BLOCKQUOTE>
<P>
This method converts the primitive float value represented by
this object to a long.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD >A long conversion of the float value represented.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">longValue</FONT> in class <TT><FONT FACE="Courier">Number</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Float</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String toString()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a string representation of the primitive
float value for this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A string representing the float value of this object.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">toString</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Float</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static String toString(float f)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a string representation of the specified
float value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">f</FONT> is the float value to be converted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A string representing the specified float value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">valueOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Float</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static Float valueOf(String s)
throws NumberFormatException</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a new float wrapper object based on the float
value represented by the specified string.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the string representation of a float value to be wrapped.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A float wrapper object representing the specified string.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NumberFormatException</FONT> if the string does not contain a parsable float.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="Integer"><FONT SIZE=5 COLOR=#FF0000>Integer</FONT></A></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Number</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This class implements an object type wrapper for integer values.
Object type wrappers are useful because many Java classes operate
on objects rather than primitive data types. In addition, the
<TT><FONT FACE="Courier">Integer</FONT></TT> class provides support
constants and methods for working with integer values. The definition
for the <TT><FONT FACE="Courier">Integer</FONT></TT> class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final class java.lang.Integer
extends java.lang.Number {<BR>
&nbsp;&nbsp;// Member Constants<BR>
&nbsp;&nbsp;public final static int MAX_VALUE;<BR>
&nbsp;&nbsp;public final static int MIN_VALUE;<BR>
<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public Integer(int value);<BR>
&nbsp;&nbsp;public Integer(String s);<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public double doubleValue();<BR>
&nbsp;&nbsp;public boolean equals(Object obj);<BR>
&nbsp;&nbsp;public float floatValue();<BR>
&nbsp;&nbsp;public static Integer getInteger(String nm);<BR>
&nbsp;&nbsp;public static Integer getInteger(String nm, int val);
<BR>
&nbsp;&nbsp;public static Integer getInteger(String nm, Integer
val);<BR>
&nbsp;&nbsp;public int hashCode();<BR>
&nbsp;&nbsp;public int intValue();<BR>
&nbsp;&nbsp;public long longValue();<BR>
&nbsp;&nbsp;public static int parseInt(String s);<BR>
&nbsp;&nbsp;public static int parseInt(String s, int radix);<BR>
&nbsp;&nbsp;public static String toBinaryString(int i);<BR>
&nbsp;&nbsp;public static String toHexString(int i);<BR>
&nbsp;&nbsp;public static String toOctalString(int i);<BR>
&nbsp;&nbsp;public String toString();<BR>
&nbsp;&nbsp;public static String toString(int i);<BR>
&nbsp;&nbsp;public static String&nbsp;&nbsp;toString(int i, int
radix);<BR>
&nbsp;&nbsp;public static Integer valueOf(String s);<BR>
&nbsp;&nbsp;public static Integer valueOf(String s, int radix);
<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=589><H4>Member Constants</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static int MAX_VALUE</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is a constant representing the maximum value allowed for
an integer. This constant is set to <TT><FONT FACE="Courier">0x7fffffff</FONT></TT>.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static int MIN_VALUE</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is a constant representing the minimum value allowed for
an integer. This constant is set to <TT><FONT FACE="Courier">0x80000000</FONT></TT>.<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Integer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Integer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Integer(int value)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates an integer wrapper object representing
the specified primitive integer value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">value</FONT> is the integer value to be wrapped.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Integer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Integer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Integer(String s) throws NumberFormatException</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates an integer wrapper object representing
the specified string. The string is converted to an integer using
a technique similar to the <TT><FONT FACE="Courier">valueOf</FONT></TT>
method.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the string representation of an integer value to be wrapped.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NumberFormatException</FONT> if the string does not contain a parsable integer.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">doubleValue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Integer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public double doubleValue()</FONT></TT>
</BLOCKQUOTE>
<P>
This method converts the primitive integer value represented by
this object to a double.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A double conversion of the integer value represented.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">doubleValue</FONT> in class <TT><FONT FACE="Courier">Number</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">equals</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Integer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean equals(Object obj)</FONT></TT>
</BLOCKQUOTE>
<P>
This method compares the integer value of the specified object
to the integer value of this object. The <TT><FONT FACE="Courier">equals</FONT></TT>
method returns <TT><FONT FACE="Courier">TRUE</FONT></TT> only
if the specified object is an integer object representing the
same primitive integer value as this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">obj</FONT> is the object to compare.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the specified object is an integer object representing the same primitive integer value as this object; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">equals</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">floatValue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Integer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public float floatValue()</FONT></TT>
</BLOCKQUOTE>
<P>
This method converts the primitive integer value represented by
this object to a float.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A float conversion of the integer value represented.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">floatValue</FONT> in class <TT><FONT FACE="Courier">Number</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">getInteger</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Integer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static Integer getInteger(String
nm)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines an integer object representing the value
of the system property with the specified name. If the system
property doesn't exist, <TT><FONT FACE="Courier">NULL</FONT></TT>
is returned.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">nm</FONT> is the system property name for which to check the integer value.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >An integer object representing the value of the specified system property, or <TT><FONT FACE="Courier">NULL</FONT></TT> if the property doesn't exist.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">getInteger</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Integer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static Integer getInteger(String
nm, int val)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines an integer object representing the value
of the system property with the specified name. If the system
property doesn't exist, an integer object representing the specified
default property value is returned.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">nm</FONT> is the system property name for which to check the integer value.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">val</FONT> is the default integer property value.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >An integer object representing the value of the specified system property, or an integer object representing <TT><FONT FACE="Courier">val</FONT></TT> if the property doesn't exist.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">getInteger</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Integer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static Integer getInteger(String
nm, Integer val)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines an integer object representing the value
of the system property with the specified name. In addition, this
version of <TT><FONT FACE="Courier">getInteger</FONT></TT> includes
support for reading hexadecimal and octal property values. If
the system property doesn't exist, the specified default property
value is returned.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">nm</FONT> is the system property name for which to check the integer value.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">val</FONT> is the default integer property value object.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >An integer object representing the value of the specified system property, or <TT><FONT FACE="Courier">val</FONT></TT> if the property doesn't exist.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">hashCode</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Integer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int hashCode()</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates a hash code for this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A hash code for this object.</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">hashCode</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">intValue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Integer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int intValue()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the primitive integer value represented
by this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The integer value represented.</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">intValue</FONT> in class <TT><FONT FACE="Courier">Number</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">longValue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Integer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public long longValue()</FONT></TT>
</BLOCKQUOTE>
<P>
This method converts the primitive integer value represented by
this object to a long.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A long conversion of the integer value represented.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">longValue</FONT> in class <TT><FONT FACE="Courier">Number</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">parseInt</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Integer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static int parseInt(String s)
throws NumberFormatException</FONT></TT>
</BLOCKQUOTE>
<P>
This method parses a signed decimal integer value from the specified
string. Note that all the characters in the string must be decimal
digits, with the exception that the first character can be a minus
character (-) to denote a negative number.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the string representation of an integer value.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The integer value represented by the specified string.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NumberFormatException</FONT> if the string does not contain a parsable integer.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">parseInt</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Integer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static int parseInt(String s,
int radix) throws NumberFormatException</FONT></TT>
</BLOCKQUOTE>
<P>
This method parses a signed integer value in the specified radix
from the specified string. Note that all the characters in the
string must be digits in the specified radix, with the exception
that the first character can be a minus character (-) to denote
a negative number.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the string representation of an integer value.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">radix</FONT> is the radix to use for the integer.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The integer value represented by the specified string.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NumberFormatException</FONT> if the string does not contain a parsable integer.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toBinaryString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Integer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static String toBinaryString(int
i)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a string representation of the specified
unsigned base 2 integer value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">i</FONT> is the unsigned base 2 integer value to be converted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A string representing the specified unsigned base 2 integer value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toHexString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Integer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static String toHexString(int
i)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a string representation of the specified
unsigned base 16 integer value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">i</FONT> is the unsigned base 16 integer value to be converted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A string representing the specified unsigned base 16 integer value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toOctalString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Integer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static String toOctalString(int
i)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a string representation of the specified
unsigned base 8 integer value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">i</FONT> is the unsigned base 8 integer value to be converted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A string representing the specified unsigned base 8 integer value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Integer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String toString()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a string representation of the primitive
decimal integer value for this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD >A string representing the decimal integer value of this object.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">toString</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Integer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static String toString(int i)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a string representation of the specified
decimal integer value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">i</FONT> is the decimal integer value to be converted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A string representing the specified decimal integer value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Integer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static String toString(int i,
int radix)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a string representation of the specified
integer value in the specified radix.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">i</FONT> is the integer value to be converted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">radix</FONT> is the radix to use for the conversion.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A string representing the specified integer value in the specified radix.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">valueOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Integer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static Integer valueOf(String
s) throws NumberFormatException</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a new integer wrapper object based on the
decimal integer value represented by the specified string.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the string representation of a decimal integer value to be wrapped.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >An integer wrapper object representing the specified string.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NumberFormatException</FONT> if the string does not contain a parsable integer.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">valueOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Integer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static Integer valueOf(String
s, int radix) throws NumberFormatException</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a new integer wrapper object based on the
integer value in the specified radix represented by the specified
string.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the string representation of an integer value to be wrapped.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">radix</FONT> is the radix to use for the integer.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >An integer wrapper object in the specified radix representing the specified string.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NumberFormatException</FONT> if the string does not contain a parsable integer.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="Long"><FONT SIZE=5 COLOR=#FF0000>Long</FONT></A></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Number</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This class implements an object type wrapper for long values.
Object type wrappers are useful because many Java classes operate
on objects rather than primitive data types. In addition, the
<TT><FONT FACE="Courier">Long</FONT></TT> class provides support
constants and methods for working with long values. The definition
for the <TT><FONT FACE="Courier">Long</FONT></TT> class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final class java.lang.Long extends
java.lang.Number {<BR>
&nbsp;&nbsp;// Member Constants<BR>
&nbsp;&nbsp;public final static long MAX_VALUE;<BR>
&nbsp;&nbsp;public final static long MIN_VALUE;<BR>
<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public Long(long value);<BR>
&nbsp;&nbsp;public Long(String s);<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public double doubleValue();<BR>
&nbsp;&nbsp;public boolean equals(Object obj);<BR>
&nbsp;&nbsp;public float floatValue();<BR>
&nbsp;&nbsp;public static Long getLong(String nm);<BR>
&nbsp;&nbsp;public static Long getLong(String nm, long val);<BR>
&nbsp;&nbsp;public static Long getLong(String nm, Long val);<BR>
&nbsp;&nbsp;public int hashCode();<BR>
&nbsp;&nbsp;public int intValue();<BR>
&nbsp;&nbsp;public long longValue();<BR>
&nbsp;&nbsp;public static long parseLong(String s);<BR>
&nbsp;&nbsp;public static long parseLong(String s, int radix);
<BR>
&nbsp;&nbsp;public static String toBinaryString(long i);<BR>
&nbsp;&nbsp;public static String toHexString(long i);<BR>
&nbsp;&nbsp;public static String toOctalString(long i);<BR>
&nbsp;&nbsp;public String toString();<BR>
&nbsp;&nbsp;public static String toString(long i);<BR>
&nbsp;&nbsp;public static String toString(long i, int radix);
<BR>
&nbsp;&nbsp;public static Long valueOf(String s);<BR>
&nbsp;&nbsp;public static Long valueOf(String s, int radix);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=590><H4>Member Constants</H4>
</TD></TR>
</TABLE></CENTER>
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static int MAX_VALUE</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is a constant representing the maximum value allowed for
a long. This constant is set to <TT><FONT FACE="Courier">0x7fffffffffffffff</FONT></TT>.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static int MIN_VALUE</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is a constant representing the minimum value allowed for
a long. This constant is set to <TT><FONT FACE="Courier">0x8000000000000000</FONT></TT>.<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Long</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Long</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Long(long value)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a long wrapper object representing the
specified primitive long value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">value</FONT> is the long value to be wrapped.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="const.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Long</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Long</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Long(String s) throws NumberFormatException</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a long wrapper object representing the
specified string. The string is converted to a long using a technique
similar to the <TT><FONT FACE="Courier">valueOf</FONT></TT> method.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the string representation of a long value to be wrapped.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NumberFormatException</FONT> if the string does not contain a parsable long.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">doubleValue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Long</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public double doubleValue()</FONT></TT>
</BLOCKQUOTE>
<P>
This method converts the primitive long value represented by this
object to a double.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A double conversion of the long value represented.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">doubleValue</FONT> in class <TT><FONT FACE="Courier">Number</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">equals</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Long</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean equals(Object obj)</FONT></TT>
</BLOCKQUOTE>
<P>
This method compares the long value of the specified object to
the long value of this object. The <TT><FONT FACE="Courier">equals</FONT></TT>
method returns <TT><FONT FACE="Courier">TRUE</FONT></TT> only
if the specified object is a long object representing the same
primitive long value as this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">obj</FONT> is the object to compare.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the specified object is a <TT><FONT FACE="Courier">Long</FONT></TT> object representing the same primitive long value as this object; otherwise, <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">equals</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">floatValue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Long</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public float floatValue()</FONT></TT>
</BLOCKQUOTE>
<P>
This method converts the primitive long value represented by this
object to a float.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A float conversion of the long value represented.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">floatValue</FONT> in class <TT><FONT FACE="Courier">Number</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">getLong</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Long</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static Long getLong(String nm)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a long object representing the value of
the system property with the specified name. If the system property
doesn't exist, <TT><FONT FACE="Courier">NULL</FONT></TT> is returned.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">nm</FONT> is the system property name for which to check the long value.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A long object representing the value of the specified system property, or <TT><FONT FACE="Courier">NULL</FONT></TT> if the property doesn't exist.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">getLong</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Long</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static Long getLong(String nm,
long val)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a long object representing the value of
the system property with the specified name. If the system property
doesn't exist, a long object representing the specified default
property value is returned.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">nm</FONT> is the system property name for which to check the long value.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">val</FONT> is the default long property value.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A long object representing the value of the specified system property, or a long object representing <TT><FONT FACE="Courier">val</FONT></TT> if the property doesn't exist.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">getLong</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Long</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static Long getLong(String nm,
Long val)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a long object representing the value of
the system property with the specified name. In addition, this
version of <TT><FONT FACE="Courier">getLong</FONT></TT> includes
support for reading hexadecimal and octal property values. If
the system property doesn't exist, the specified default property
value is returned.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">nm</FONT> is the system property name for which to check the long value.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">val</FONT> is the default long property value object.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A long object representing the value of the specified system property, or <TT><FONT FACE="Courier">val</FONT></TT> if the property doesn't exist.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">hashCode</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Long</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int hashCode()</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates a hash code for this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A hash code for this object.</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">hashCode</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">intValue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Long</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int intValue()</FONT></TT>
</BLOCKQUOTE>
<P>
This method converts the primitive long value represented by this
object to an integer.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >An integer conversion of the long value represented.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">intValue</FONT> in class <TT><FONT FACE="Courier">Number</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">longValue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Long</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public long longValue()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the primitive long value represented by
this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The long value represented.</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">longValue</FONT> in class <TT><FONT FACE="Courier">Number</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">parseLong</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Long</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static long parseLong(String s)
throws NumberFormatException</FONT></TT>
</BLOCKQUOTE>
<P>
This method parses a signed decimal long value from the specified
string. Note that all the characters in the string must be decimal
digits, with the exception that the first character can be a minus
character (-) to denote a negative number.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the string representation of a long value.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The long value represented by the specified string.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NumberFormatException</FONT> if the string does not contain a parsable long.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">parseLong</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Long</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static long parseLong(String s,
int radix) throws NumberFormatException</FONT></TT>
</BLOCKQUOTE>
<P>
This method parses a signed long value in the specified radix
from the specified string. Note that all the characters in the
string must be digits in the specified radix, with the exception
that the first character can be a minus character (-) to denote
a negative number.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the string representation of a long value.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">radix</FONT> is the radix to use for the long.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The long value represented by the specified string.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NumberFormatException</FONT> if the string does not contain a parsable long.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toBinaryString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Long</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static String toBinaryString(long
l)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a string representation of the specified
unsigned base 2 long value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">l</FONT> is the unsigned base 2 long value to be converted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A string representing the specified unsigned base 2 long value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toHexString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Long</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static String toHexString(long
l)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a string representation of the specified
unsigned base 16 long value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">l</FONT> is the unsigned base 16 long value to be converted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A string representing the specified unsigned base 16 long value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toOctalString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Long</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static String toOctalString(long
l)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a string representation of the specified
unsigned base 8 long value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">l</FONT> is the unsigned base 8 long value to be converted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A string representing the specified unsigned base 8 long value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Long</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String toString()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a string representation of the primitive
decimal long value for this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A string representing the decimal long value of this object.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">toString</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Long</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static String toString(long l)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a string representation of the specified
decimal long value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">l</FONT> is the decimal long value to be converted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A string representing the specified decimal long value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">toString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Long</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static String toString(long l,
int radix)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a string representation of the specified
long value in the specified radix.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">i</FONT> is the long value to be converted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">radix</FONT> is the radix to use for the conversion.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A string representing the specified long value in the specified radix.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">valueOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Long</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static Long valueOf(String s)
throws NumberFormatException</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a new long wrapper object based on the decimal
long value represented by the specified string.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the string representation of a decimal long value to be wrapped.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A long wrapper object representing the specified string.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NumberFormatException</FONT> if the string does not contain a parsable long.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">valueOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Long</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static Long valueOf(String s,
int radix) throws NumberFormatException</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a new long wrapper object based on the long
value in the specified radix represented by the specified string.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the string representation of a long value to be wrapped.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">radix</FONT> is the radix to use for the long.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A long wrapper object in the specified radix representing the specified string.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NumberFormatException</FONT> if the string does not contain a parsable long.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="Math"><FONT SIZE=5 COLOR=#FF0000>Math</FONT></A></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This class implements a library of common math functions, including
methods for performing basic numerical operations such as elementary
exponential, logarithm, square root, and trigonometric functions.
The definition for the <TT><FONT FACE="Courier">Math</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final class java.lang.Math extends
java.lang.Object {<BR>
&nbsp;&nbsp;// Member Constants<BR>
&nbsp;&nbsp;public final static double E;<BR>
&nbsp;&nbsp;public final static double PI;<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public static double abs(double a);<BR>
&nbsp;&nbsp;public static float abs(float a);<BR>
&nbsp;&nbsp;public static int abs(int a);<BR>
&nbsp;&nbsp;public static long abs(long a);<BR>
&nbsp;&nbsp;public static double acos(double a);<BR>
&nbsp;&nbsp;public static double asin(double a);<BR>
&nbsp;&nbsp;public static double atan(double a);<BR>
&nbsp;&nbsp;public static double atan2(double a, double b);<BR>
&nbsp;&nbsp;public static double ceil(double a);<BR>
&nbsp;&nbsp;public static double cos(double a);<BR>
&nbsp;&nbsp;public static double exp(double a);<BR>
&nbsp;&nbsp;public static double floor(double a);<BR>
&nbsp;&nbsp;public static double IEEEremainder(double f1, double
f2);<BR>
&nbsp;&nbsp;public static double log(double a);<BR>
&nbsp;&nbsp;public static double max(double a, double b);<BR>
&nbsp;&nbsp;public static float max(float a, float b);<BR>
&nbsp;&nbsp;public static int max(int a, int b);<BR>
&nbsp;&nbsp;public static long max(long a, long b);<BR>
&nbsp;&nbsp;public static double min(double a, double b);<BR>
&nbsp;&nbsp;public static float min(float a, float b);<BR>
&nbsp;&nbsp;public static int min(int a, int b);<BR>
&nbsp;&nbsp;public static long min(long a, long b);<BR>
&nbsp;&nbsp;public static double pow(double a, double b);<BR>
&nbsp;&nbsp;public static double random();<BR>
&nbsp;&nbsp;public static double rint(double a);<BR>
&nbsp;&nbsp;public static long round(double a);<BR>
&nbsp;&nbsp;public static int round(float a);<BR>
&nbsp;&nbsp;public static double sin(double a);<BR>
&nbsp;&nbsp;public static double sqrt(double a);<BR>
&nbsp;&nbsp;public static double tan(double a);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=583><H4>Member Constants</H4>
</TD></TR>
</TABLE></CENTER>
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static double E</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is a constant representing the double value of E, which is
the base of the natural logarithms. This constant is set to <TT><FONT FACE="Courier">2.7182818284590452354</FONT></TT>.
<BLOCKQUOTE>
<TT><B><FONT FACE="Courier">public final static double PI</FONT></B></TT>
</BLOCKQUOTE>
<P>
This is a constant representing the double value of PI, which
is the ratio of the circumference of a circle to its diameter.
This constant is set to <TT><FONT FACE="Courier">3.14159265358979323846</FONT></TT>.<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">abs</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static double abs(double a)</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates the absolute value of the specified double
value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the double value for which to calculate the absolute value.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The absolute value of the double value.</TD>
</TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">abs</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static float abs(float a)</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates the absolute value of the specified float
value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the float value for which to calculate the absolute value.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The absolute value of the float value.</TD>
</TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">abs</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static int abs(int a)</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates the absolute value of the specified integer
value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the integer value for which to calculate the absolute value.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The absolute value of the integer value.</TD>
</TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">abs</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static long abs(long a)</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates the absolute value of the specified long
value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the long value for which to calculate the absolute value.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The absolute value of the long value.</TD>
</TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">acos</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static double acos(double a)</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates the arccosine of the specified double value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the double value for which to calculate the arccosine.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The arccosine of the double value.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">asin</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static double asin(double a)</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates the arcsine of the specified double value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the double value for which to calculate the arcsine.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The arcsine of the double value.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">atan</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static double atan(double a)</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates the arctangent of the specified double
value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the double value for which to calculate the arctangent.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The arctangent of the double value.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">atan2</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static double atan2(double a,
double b)</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates the theta component of the polar coordinate
(r, theta) corresponding to the rectangular coordinate (x, y)
specified by the double values.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the x component value of the rectangular coordinate.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">b</FONT> is the y component value of the rectangular coordinate.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The theta component of the polar coordinate corresponding to the rectangular coordinate specified by the double values.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">ceil</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static double ceil(double a)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the smallest double whole number that is
greater than or equal to the specified double value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the double value for which to calculate the ceiling.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The smallest double whole number that is greater than or equal to the specified double value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Cos</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static double cos(double a)</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates the cosine of the specified double value,
which is specified in radians.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the double value for which to calculate the cosine, in radians.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The cosine of the double value.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><TT><FONT FACE="Courier"><IMG SRC="method.gif"></FONT></TT></H4>

</TD><TD ><H4><TT><FONT FACE="Courier">Exp</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static double exp(double a)</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates the exponential value of the specified
double value, which is E raised to the power of <TT><FONT FACE="Courier">a</FONT></TT>.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the double value for which to calculate the exponential value.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The exponential value of the specified double value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">floor</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static double floor(double a)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the largest double whole number that is
less than or equal to the specified double value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the double value for which to calculate the floor.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The largest double whole number that is less than or equal to the specified double value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">IEEEremainder</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static double IEEEremainder(double
f1, double f2)</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates the remainder of <TT><FONT FACE="Courier">f1</FONT></TT>
divided by <TT><FONT FACE="Courier">f2</FONT></TT>, as defined
by the IEEE 754 standard.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">f1</FONT> is the dividend for the division operation.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">f2</FONT> is the divisor for the division operation.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The remainder of <TT><FONT FACE="Courier">f1</FONT></TT> divided by <TT><FONT FACE="Courier">f2</FONT></TT>, as defined by the IEEE 754 standard.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">log</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static double log(double a) throws
ArithmeticException</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates the natural logarithm (base E) of the specified
double value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the double value, which is greater than 0.0, for which to calculate the natural logarithm.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The natural logarithm of the specified double value.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">ArithmeticException</FONT> if the specified double value is less than 0.0.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">max</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static double max(double a, double
b)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the larger of the two specified double
values.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the first double value to be compared.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">b</FONT> is the second double value to be compared.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The larger of the two specified double values.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">max</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static float max(float a, float
b)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the larger of the two specified float values.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the first float value to be compared.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">b</FONT> is the second float value to be compared.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The larger of the two specified float values.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">max</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static int max(int a, int b)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the larger of the two specified integer
values.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the first integer value to be compared.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">b</FONT> is the second integer value to be compared.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The larger of the two specified integer values.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">max</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static long max(long a, long b)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the larger of the two specified long values.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the first long value to be compared.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">b</FONT> is the second long value to be compared.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The larger of the two specified long values.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">min</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static double min(double a, double
b)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the smaller of the two specified double
values.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the first double value to be compared.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">b</FONT> is the second double value to be compared.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The smaller of the two specified double values.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">min</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static float min(float a, float
b)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the smaller of the two specified float
values.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the first float value to be compared.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">b</FONT> is the second float value to be compared.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The smaller of the two specified float values.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">min</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static int min(int a, int b)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the smaller of the two specified integer
values.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the first integer value to be compared.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">b</FONT> is the second integer value to be compared.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The smaller of the two specified integer values.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">min</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static long min(long a, long b)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the smaller of the two specified long values.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the first long value to be compared.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">b</FONT> is the second long value to be compared.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The smaller of the two specified long values.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">pow</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static double pow(double a, double
b) throws ArithmeticException</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates the double value <TT><FONT FACE="Courier">a</FONT></TT>
raised to the power of <TT><FONT FACE="Courier">b</FONT></TT>.
Note that if <TT><FONT FACE="Courier">a</FONT></TT> equals 0.0,
<TT><FONT FACE="Courier">b</FONT></TT> must be greater than 0.0;
otherwise, an <TT><FONT FACE="Courier">ArithmeticException</FONT></TT>
is thrown. Also, if <TT><FONT FACE="Courier">a</FONT></TT> is
less than or equal to 0.0 and <TT><FONT FACE="Courier">b</FONT></TT>
is not a whole number, an <TT><FONT FACE="Courier">ArithmeticException</FONT></TT>
is thrown.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is a double value to be raised to a power specified by <TT><FONT FACE="Courier">b</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">b</FONT> is the power by which to raise <TT><FONT FACE="Courier">a</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The double value <TT><FONT FACE="Courier">a</FONT></TT> raised to the power of <TT><FONT FACE="Courier">b</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">ArithmeticException</FONT> if <TT><FONT FACE="Courier">a</FONT></TT> equals 0.0 and <TT><FONT FACE="Courier">b</FONT></TT> is less than or equal to 0.0, or if <TT><FONT FACE="Courier">a is less than or equal to 0.0 and b is not a whole number.</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">random</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static double random()</FONT></TT>
</BLOCKQUOTE>
<P>
This method generates a pseudo-random double between 0.0 and 1.0.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A pseudo-random double between 0.0 and 1.0.</TD>
</TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">rint</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static double rint(double a)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the closest whole number to the specified
double value. If the double value is equally spaced between two
whole numbers, <TT><FONT FACE="Courier">rint</FONT></TT> returns
the even number.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the double value used to determine the closest whole number.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The closest whole number to the specified double value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">round</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static long round(double a)</FONT></TT>
</BLOCKQUOTE>
<P>
This method rounds off the specified double value by determining
the closest long value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the double value to round off.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The closest long value to the specified double value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">round</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static int round(float a)</FONT></TT>
</BLOCKQUOTE>
<P>
This method rounds off the specified float value by determining
the closest integer value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the float value to round off.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The closest integer value to the specified float value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">sin</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static double sin(double a)</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates the sine of the specified double value,
which is specified in radians.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the double value of which to calculate the sine, in radians.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The sine of the double value.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">sqrt</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static double sqrt(double a) throws
ArithmeticException</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates the square root of the specified double
value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the double value, which is greater than 0.0, for which to calculate the square root.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The square root of the double value.</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">ArithmeticException</FONT> if the specified double value is less than 0.0.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">tan</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Math</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static double tan(double a)</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates the tangent of the specified double value,
which is specified in radians.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">a</FONT> is the double value of which to calculate the tangent, in radians.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD >The tangent of the double value.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="Number"><FONT SIZE=5 COLOR=#FF0000>Number</FONT></A></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
See also: <TT><FONT FACE="Courier">Double</FONT></TT>, <TT><FONT FACE="Courier">Float</FONT></TT>,
<TT><FONT FACE="Courier">Integer</FONT></TT>, <TT><FONT FACE="Courier">Long</FONT></TT>
<P>
This class is an abstract class that provides the basic functionality
required of a numeric object. All specific numeric objects are
derived from <TT><FONT FACE="Courier">Number</FONT></TT>. The
definition for the <TT><FONT FACE="Courier">Number</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract class java.lang.Number
extends java.lang.Object {<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public abstract double doubleValue();<BR>
&nbsp;&nbsp;public abstract float floatValue();<BR>
&nbsp;&nbsp;public abstract int intValue();<BR>
&nbsp;&nbsp;public abstract long longValue();<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">doubleValue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Number</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract double doubleValue()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the primitive double value represented
by this object. Note that this may involve rounding if the number
is not already a double.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The double value represented.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">floatValue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Number</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract float floatValue()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the primitive float value represented by
this object. Note that this may involve rounding if the number
is not already a float.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The float value represented.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">intValue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Number</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract int intValue()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the primitive integer value represented
by this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The integer value represented.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">longValue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Number</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract long longValue()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the primitive long value represented by
this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The long value represented.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="Object"><FONT SIZE=5 COLOR=#FF0000>Object</FONT></A></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>
<P>
This class is the root of the Java class hierarchy, providing
the core functionality required of all objects. All classes have
<TT><FONT FACE="Courier">Object</FONT></TT> as a superclass, and
all classes implement the methods defined in <TT><FONT FACE="Courier">Object</FONT></TT>.
The definition for the <TT><FONT FACE="Courier">Object</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.Object {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public Object();<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;protected Object clone();<BR>
&nbsp;&nbsp;public boolean equals(Object obj);<BR>
&nbsp;&nbsp;protected void finalize();<BR>
&nbsp;&nbsp;public final Class getClass();<BR>
&nbsp;&nbsp;public int hashCode();<BR>
&nbsp;&nbsp;public final void notify();<BR>
&nbsp;&nbsp;public final void notifyAll();<BR>
&nbsp;&nbsp;public String toString();<BR>
&nbsp;&nbsp;public final void wait();<BR>
&nbsp;&nbsp;public final void wait(long timeout);<BR>
&nbsp;&nbsp;public final void wait(long timeout, int nanos);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">Object</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Object</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Object()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default object.<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">clone</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Object</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">protected Object clone() throws CloneNotSupportedException</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a clone of this object by creating a new instance
of the class and copying each of the member variables of this
object to the new object. To be cloneable, derived classes must
implement the <TT><FONT FACE="Courier">Cloneable</FONT></TT> interface.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A clone of this object.</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">OutOfMemoryError</FONT> if there is not enough memory.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">CloneNotSupportedException</FONT> if the object doesn't support the <TT><FONT FACE="Courier">Cloneable</FONT></TT> interface or if it explicitly doesn't want to be cloned.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">equals</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Object</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean equals(Object obj)</FONT></TT>
</BLOCKQUOTE>
<P>
This method compares this object with the specified object for
equality. The <TT><FONT FACE="Courier">equals</FONT></TT> method
is used by the <TT><FONT FACE="Courier">Hashtable</FONT></TT>
class to compare objects stored in the hash table.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">obj</FONT> is the object to compare.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if this object is equivalent to the specified object; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">finalize</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Object</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">protected void finalize() throws Throwable</FONT></TT>
</BLOCKQUOTE>
<P>
This method is called by the Java garbage collector when an object
is being destroyed. The default behavior of <TT><FONT FACE="Courier">finalize</FONT></TT>
is to do nothing. Derived classes can override <TT><FONT FACE="Courier">finalize</FONT></TT>
to include cleanup code that is to be executed when the object
is destroyed. Note that any exception thrown by the <TT><FONT FACE="Courier">finalize</FONT></TT>
method causes the finalization to halt.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">getClass</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Object</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final Class getClass()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the runtime class descriptor for this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The runtime class descriptor for this object.</TD>
</TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">hashCode</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Object</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int hashCode()</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates a hash code for this object, which is a
unique integer identifying the object. Hash codes are used by
the <TT><FONT FACE="Courier">Hashtable</FONT></TT> class.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A hash code for this object.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">notify</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Object</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void notify()</FONT></TT>
</BLOCKQUOTE>
<P>
This method wakes up a single thread that is waiting on this object's
monitor. A thread is set to wait on an object's monitor when the
<TT><FONT FACE="Courier">wait</FONT></TT> method is called. The
<TT><FONT FACE="Courier">notify</FONT></TT> method should be called
only by a thread that is the owner of this object's monitor. Note
that the <TT><FONT FACE="Courier">notify</FONT></TT> method can
be called only from within a synchronized method.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IllegalMonitorStateException</FONT> if the current thread is not the owner of this object's monitor.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">notifyAll</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Object</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void notifyAll()</FONT></TT>
</BLOCKQUOTE>
<P>
This method wakes up all threads that are waiting on this object's
monitor. A thread is set to wait on an object's monitor when the
<TT><FONT FACE="Courier">wait</FONT></TT> method is called. The
<TT><FONT FACE="Courier">notifyAll</FONT></TT> method should be
called only by a thread that is the owner of this object's monitor.
Note that the <TT><FONT FACE="Courier">notifyAll</FONT></TT> method
can be called only from within a synchronized method.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IllegalMonitorStateException</FONT> if the current thread is not the owner of this object's monitor.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">toString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Object</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String toString()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a string representation of this object.
It is recommended that all derived classes override <TT><FONT FACE="Courier">toString</FONT></TT>.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A string representing this object.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">wait</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Object</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void wait() throws InterruptedException</FONT></TT>
</BLOCKQUOTE>
<P>
This method causes the current thread to wait forever until it
is notified via a call to the <TT><FONT FACE="Courier">notify</FONT></TT>
or <TT><FONT FACE="Courier">notifyAll</FONT></TT> method. The
<TT><FONT FACE="Courier">wait</FONT></TT> method should be called
only by a thread that is the owner of this object's monitor. Note
that the <TT><FONT FACE="Courier">wait</FONT></TT> method can
be called only from within a synchronized method.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IllegalMonitorStateException</FONT> if the current thread is not the owner of this object's monitor.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">InterruptedException</FONT> if another thread has interrupted this thread.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">wait</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Object</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void wait(long timeout)
throws InterruptedException</FONT></TT>
</BLOCKQUOTE>
<P>
This method causes the current thread to wait until it is notified
via a call to the <TT><FONT FACE="Courier">notify</FONT></TT>
or <TT><FONT FACE="Courier">notifyAll</FONT></TT> method, or until
the specified timeout period has elapsed. The <TT><FONT FACE="Courier">wait</FONT></TT>
method should be called only by a thread that is the owner of
this object's monitor. Note that the <TT><FONT FACE="Courier">wait</FONT></TT>
method can be called only from within a synchronized method.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">timeout</FONT> is the maximum timeout period to wait, in milliseconds.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IllegalMonitorStateException</FONT> if the current thread is not the owner of this object's monitor.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">InterruptedException</FONT> if another thread has interrupted this thread.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">wait</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Object</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void wait(long timeout,
int nanos) throws InterruptedException</FONT></TT>
</BLOCKQUOTE>
<P>
This method causes the current thread to wait until it is notified
via a call to the <TT><FONT FACE="Courier">notify</FONT></TT>
or <TT><FONT FACE="Courier">notifyAll</FONT></TT> method, or until
the specified timeout period has elapsed. The timeout period,
in this case, is the addition of the <TT><FONT FACE="Courier">timeout</FONT></TT>
and <TT><FONT FACE="Courier">nanos</FONT></TT> parameters, which
provide finer control over the timeout period. The <TT><FONT FACE="Courier">wait</FONT></TT>
method should be called only by a thread that is the owner of
this object's monitor. Note that the <TT><FONT FACE="Courier">wait</FONT></TT>
method can be called only from within a synchronized method.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">timeout</FONT> is the maximum timeout period to wait, in milliseconds.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">nanos</FONT> is the additional time for the timeout period, in nanoseconds.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IllegalMonitorStateException</FONT> if the current thread is not the owner of this object's monitor.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">InterruptedException</FONT> if another thread has interrupted this thread.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="Process"><FONT SIZE=5 COLOR=#FF0000>Process</FONT></A></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
See also: <TT><FONT FACE="Courier">Runtime</FONT></TT>
<P>
This class is an abstract class that provides the basic functionality
required of a system process. Derived <TT><FONT FACE="Courier">Process</FONT></TT>
objects (subprocesses) are returned from the <TT><FONT FACE="Courier">exec</FONT></TT>
methods defined in the <TT><FONT FACE="Courier">Runtime</FONT></TT>
class. The definition for the <TT><FONT FACE="Courier">Process</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract class java.lang.Process
extends java.lang.Object {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public Process();<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public abstract void destroy();<BR>
&nbsp;&nbsp;public abstract int exitValue();<BR>
&nbsp;&nbsp;public abstract InputStream getErrorStream();<BR>
&nbsp;&nbsp;public abstract InputStream getInputStream();<BR>
&nbsp;&nbsp;public abstract OutputStream getOutputStream();<BR>
&nbsp;&nbsp;public abstract int waitFor();<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">Process</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Process</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Process()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default process.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">destroy</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Process</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract void destroy()</FONT></TT>
</BLOCKQUOTE>
<P>
This method kills the subprocess.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">exitValue</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Process</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract int exitValue()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the exit value of the subprocess.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The integer exit value for the subprocess.</TD>
</TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IllegalThreadStateException</FONT> if the subprocess has not yet terminated.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">getErrorStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Process</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract InputStream getErrorStream()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the error stream associated with the subprocess.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The error stream associated with the subprocess.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">getInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Process</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract InputStream getInputStream()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the input stream associated with the subprocess.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD >The input stream associated with the subprocess.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">getOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Process</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract OutputStream getOutputStream()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the output stream associated with the subprocess.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The output stream associated with the subprocess.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">waitFor</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Process</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract int waitFor() throws
InterruptedException</FONT></TT>
</BLOCKQUOTE>
<P>
This method waits for the subprocess to finish executing. When
the subprocess finishes executing, the integer exit value is returned.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The integer exit value for the subprocess.</TD>
</TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">InterruptedException</FONT> if another thread has interrupted this thread.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="Runtime"><FONT SIZE=5 COLOR=#FF0000>Runtime</FONT></A></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
See also: System, Process
<P>
This class provides a mechanism for interacting with the Java
runtime environment. Each running Java application has access
to a single instance of the Runtime class, which it can use to
query and modify the runtime environment. Note that Runtime objects
cannot be created directly by a Java program. The definition for
the Runtime class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.Runtime extends
java.lang.Object {<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public Process exec(String command);<BR>
&nbsp;&nbsp;public Process exec(String command, String envp[]);
<BR>
&nbsp;&nbsp;public Process exec(String cmdarray[]);<BR>
&nbsp;&nbsp;public Process exec(String cmdarray[], String envp[]);
<BR>
&nbsp;&nbsp;public void exit(int status);<BR>
&nbsp;&nbsp;public long freeMemory();<BR>
&nbsp;&nbsp;public void gc();<BR>
&nbsp;&nbsp;public InputStream getLocalizedInputStream(InputStream
in);<BR>
&nbsp;&nbsp;public OutputStream getLocalizedOutputStream(OutputStream
out);<BR>
&nbsp;&nbsp;public static Runtime getRuntime();<BR>
&nbsp;&nbsp;public void load(String filename);<BR>
&nbsp;&nbsp;public void loadLibrary(String libname);<BR>
&nbsp;&nbsp;public void runFinalization();<BR>
&nbsp;&nbsp;public long totalMemory();<BR>
&nbsp;&nbsp;public void traceInstructions(boolean on);<BR>
&nbsp;&nbsp;public void traceMethodCalls(boolean on);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">exec</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Runtime</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Process exec(String command) throws
IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method executes the system command represented by the specified
string in a separate subprocess.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">command</FONT> is a string representing the system command to execute.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The subprocess that is executing the system command.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread cannot create the subprocess.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">exec</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Runtime</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Process exec(String command, String
envp[]) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method executes the system command represented by the specified
string in a separate subprocess with the specified environment.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">command</FONT> is a string representing the system command to execute.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">envp</FONT> is an array of strings representing the environment.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The subprocess that is executing the system command.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread cannot create the subprocess.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">exec</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Runtime</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Process exec(String cmdarray[])
throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method executes the system command with arguments represented
by the specified string array in a separate subprocess.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">cmdarray</FONT> is an array of strings representing the system command to execute along with its arguments.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The subprocess that is executing the system command.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread cannot create the subprocess.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">exec</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Runtime</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Process exec(String cmdarray[],
String envp[]) throws IOException</FONT></TT>
</BLOCKQUOTE>
<P>
This method executes the system command with arguments represented
by the specified string array in a separate subprocess with the
specified environment.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">cmdarray</FONT> is an array of strings representing the system command to execute along with its arguments.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">envp</FONT> is an array of strings representing the environment.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The subprocess that is executing the system command.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread cannot create the subprocess.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">exit</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Runtime</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void exit(int status)</FONT></TT>
</BLOCKQUOTE>
<P>
This method exits the Java runtime system (virtual machine) with
the specified integer exit status. Note that because <TT><FONT FACE="Courier">exit</FONT></TT>
kills the runtime system, it never returns.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">status</FONT> is the integer exit status; this should be set to nonzero if this is an abnormal exit.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread cannot exit with the specified exit status.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">freeMemory</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Runtime</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public long freeMemory()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the approximate amount of free memory available
in the runtime system, in bytes. Note that calling the <TT><FONT FACE="Courier">gc</FONT></TT>
method may free up more memory.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >Approximate amount of free memory available, in bytes.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">gc</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Runtime</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void gc()</FONT></TT>
</BLOCKQUOTE>
<P>
This method invokes the Java garbage collector to clean up any
objects that no longer are needed, usually resulting in more free
memory.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">getLocalizedInputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Runtime</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public InputStream getLocalizedInputStream(InputStream
in)</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a localized input stream based on the specified
input stream. A localized input stream is a stream in which the
local characters are mapped to Unicode characters as they are
read.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">in</FONT> is the input stream to localize.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A localized input stream based on the specified input stream.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">getLocalizedOutputStream</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Runtime</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public OutputStream getLocalizedOutputStream(OutputStream
out)</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a localized output stream based on the specified
output stream. A localized output stream is a stream in which
Unicode characters are mapped to local characters as they are
written.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">out</FONT> is the output stream to localize.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A localized output stream based on the specified output stream.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">getRuntime</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Runtime</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static Runtime getRuntime()</FONT></TT>
</BLOCKQUOTE>
<P>
This method gets the runtime environment object associated with
the current Java program.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The runtime environment object associated with the current Java program.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">load</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Runtime</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void load(String pathname)</FONT></TT>
</BLOCKQUOTE>
<P>
This method loads the dynamic library with the specified complete
path name.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">pathname</FONT> is the path name of the library to load.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">UnsatisfiedLinkError</FONT> if the library doesn't exist.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread can't load the library.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">loadLibrary</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Runtime</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void loadLibrary(String libname)</FONT></TT>
</BLOCKQUOTE>
<P>
This method loads the dynamic library with the specified library
name. Note that the mapping from library name to a specific filename
is performed in a platform-specific manner.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">libname</FONT> is the name of the library to load.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">UnsatisfiedLinkError</FONT> if the library doesn't exist.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread can't load the library.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">runFinalization</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Runtime</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void runFinalization()</FONT></TT>
</BLOCKQUOTE>
<P>
This method explicitly causes the <TT><FONT FACE="Courier">finalize</FONT></TT>
methods of any discarded objects to be called. Typically, the
<TT><FONT FACE="Courier">finalize</FONT></TT> methods of discarded
objects are automatically called asynchronously when the garbage
collector cleans up the objects. You can use <TT><FONT FACE="Courier">runFinalization</FONT></TT>
to have the <TT><FONT FACE="Courier">finalize</FONT></TT> methods
called synchronously.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">totalMemory</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Runtime</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public long totalMemory()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the total amount of memory in the runtime
system, in bytes.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The total amount of memory, in bytes.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">traceInstructions</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Runtime</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void traceInstructions(boolean
on)</FONT></TT>
</BLOCKQUOTE>
<P>
This method is used to determine whether the Java virtual machine
prints out a detailed trace of each instruction executed.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">on</FONT> is a Boolean value specifying whether the Java virtual machine prints a detailed trace of each instruction executed. A value of <TT><FONT FACE="Courier">TRUE</FONT></TT> means that the instruction trace is printed, whereas a value of <TT><FONT FACE="Courier">FALSE</FONT></TT> means that the instruction trace isn't printed.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">traceMethodCalls</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Runtime</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void traceMethodCalls(boolean
on)</FONT></TT>
</BLOCKQUOTE>
<P>
This method is used to determine whether the Java virtual machine
prints a detailed trace of each method that is called.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">on</FONT> is a Boolean value specifying whether the Java virtual machine prints a detailed trace of each method that is called. A value of <TT><FONT FACE="Courier">TRUE</FONT></TT> means that the method call trace is printed, whereas a value of <TT><FONT FACE="Courier">FALSE</FONT></TT> means that the method call trace isn't printed.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><A NAME="SecurityManager"><FONT SIZE=5 COLOR=#FF0000>SecurityManager</FONT></A>
</H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This class is an abstract class that defines a security policy
that can be used by Java programs to check for potentially unsafe
operations. The definition for the <TT><FONT FACE="Courier">SecurityManager</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public abstract class java.lang.SecurityManager
extends java.lang.Object {<BR>
&nbsp;&nbsp;// Member Variables<BR>
&nbsp;&nbsp;protected boolean inCheck;<BR>
<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;protected SecurityManager();<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public void&nbsp;&nbsp;checkAccept(String host, int
port);<BR>
&nbsp;&nbsp;public void checkAccess(Thread g);<BR>
&nbsp;&nbsp;public void checkAccess(ThreadGroup g);<BR>
&nbsp;&nbsp;public void checkConnect(String host, int port);<BR>
&nbsp;&nbsp;public void checkConnect(String host, int port, Object
context);<BR>
&nbsp;&nbsp;public void checkCreateClassLoader();<BR>
&nbsp;&nbsp;public void checkDelete(String file);<BR>
&nbsp;&nbsp;public void checkExec(String cmd);<BR>
&nbsp;&nbsp;public void checkExit(int status);<BR>
&nbsp;&nbsp;public void checkLink(String lib);<BR>
&nbsp;&nbsp;public void checkListen(int port);<BR>
&nbsp;&nbsp;public void checkPackageAccess(String pkg);<BR>
&nbsp;&nbsp;public void checkPackageDefinition(String pkg);<BR>
&nbsp;&nbsp;public void checkPropertiesAccess();<BR>
&nbsp;&nbsp;public void checkPropertyAccess(String key);<BR>
&nbsp;&nbsp;public void checkRead(FileDescriptor fd);<BR>
&nbsp;&nbsp;public void checkRead(String file);<BR>
&nbsp;&nbsp;public void checkRead(String file, Object context);
<BR>
&nbsp;&nbsp;public void checkSetFactory();<BR>
&nbsp;&nbsp;public boolean checkTopLevelWindow(Object window);
<BR>
&nbsp;&nbsp;public void checkWrite(FileDescriptor fd);<BR>
&nbsp;&nbsp;public void checkWrite(String file);<BR>
&nbsp;&nbsp;protected int classDepth(String name);<BR>
&nbsp;&nbsp;protected int classLoaderDepth();<BR>
&nbsp;&nbsp;protected ClassLoader currentClassLoader();<BR>
&nbsp;&nbsp;protected Class[] getClassContext();<BR>
&nbsp;&nbsp;public boolean getInCheck();<BR>
&nbsp;&nbsp;public Object getSecurityContext();<BR>
&nbsp;&nbsp;protected boolean inClass(String name);<BR>
&nbsp;&nbsp;protected boolean inClassLoader();<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=595><H4>Member Variables</H4>
</TD></TR>
</TABLE></CENTER>
<H5></H5>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">protected boolean inCheck</FONT></TT>
</BLOCKQUOTE>
<P>
This member variable specifies whether a security check is in
progress. A value of <TT><FONT FACE="Courier">TRUE</FONT></TT>
indicates that a security check is in progress, whereas a value
of <TT><FONT FACE="Courier">FALSE</FONT></TT> means that no check
is taking place.<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">protected SecurityManager()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default security manager. Note that
only one security manager is allowed for each Java program.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">SecurityException</FONT> if the security manager cannot be created.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">checkAccept</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void checkAccept(String host,
int port)</FONT></TT>
</BLOCKQUOTE>
<P>
This method checks to see whether the calling thread is allowed
to establish a socket connection to the specified port on the
specified host.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">host</FONT> is the host name to which the socket will be connected.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">port</FONT> is the number of the port to which the socket will be connected.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the calling thread doesn't have permission to establish the socket connection.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">checkAccess</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void checkAccess(Thread g)</FONT></TT>
</BLOCKQUOTE>
<P>
This method checks to see whether the calling thread is allowed
access to the specified thread.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">g</FONT> is the thread to check for access.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the calling thread doesn't have access to the specified thread.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">checkAccess</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void checkAccess(ThreadGroup g)</FONT></TT>
</BLOCKQUOTE>
<P>
This method checks to see whether the calling thread is allowed
access to the specified thread group.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">g</FONT> is the thread group to check for access.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the calling thread doesn't have access to the specified thread group.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">checkConnect</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void checkConnect(String host,
int port)</FONT></TT>
</BLOCKQUOTE>
<P>
This method checks to see whether the calling thread has established
a socket connection to the specified port on the specified host.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">host</FONT> is the host name for which to check the connection.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">sort</FONT> is the number of the port for which to check the connection.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the calling thread doesn't have permission to establish the socket connection.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">checkConnect</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void checkConnect(String host,
int port, Object context)</FONT></TT>
</BLOCKQUOTE>
<P>
This method checks to see whether the specified security context
has established a socket connection to the specified port on the
specified host.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">host</FONT> is the host name for which to check the connection.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">port</FONT> is the number of the port for which to check the connection.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">context</FONT> is the security context for the check.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the specified security context doesn't have permission to establish the socket connection.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">checkCreateClassLoader</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void checkCreateClassLoader()</FONT></TT>
</BLOCKQUOTE>
<P>
This method checks to see whether the calling thread is allowed
access to create a new class loader.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">SecurityException</FONT> if the calling thread doesn't have permission to create a new class loader.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">checkDelete</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void checkDelete(String file)</FONT></TT>
</BLOCKQUOTE>
<P>
This method checks to see whether the calling thread is allowed
access to delete the file with the specified platform-specific
filename.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">file</FONT> is the platform-specific filename for the file to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the calling thread doesn't have permission to delete the file.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">checkExec</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void checkExec(String cmd)</FONT></TT>
</BLOCKQUOTE>
<P>
This method checks to see whether the calling thread is allowed
access to create a subprocess to execute the specified system
command.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">cmd</FONT> is a string representing the system command to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the calling thread doesn't have permission to create a subprocess to execute the system command.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">checkExit</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void checkExit(int status)</FONT></TT>
</BLOCKQUOTE>
<P>
This method checks to see whether the calling thread is allowed
access to exit the Java runtime system with the specified exit
status.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">status</FONT> is the integer exit status to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the calling thread doesn't have permission to exit with the specified exit status.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">checkLink</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void checkLink(String lib)</FONT></TT>
</BLOCKQUOTE>
<P>
This method checks to see whether the calling thread is allowed
access to dynamically link the library with the specified name.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">lib</FONT> is the name of the library to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the calling thread doesn't have permission to dynamically link the library.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">checkListen</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void checkListen(int port)</FONT></TT>
</BLOCKQUOTE>
<P>
This method checks to see whether the calling thread is allowed
to wait for a connection request on the specified port.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="parame.gif"></TD><TD><TT><FONT FACE="Courier">port</FONT></TT> is the number of the port for which to check the connection.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><IMG SRC="throws.gif"></TD><TD><TT><FONT FACE="Courier">SecurityException</FONT></TT> if the calling thread doesn't have permission to wait for a connection request on the specified port.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">checkPackageAccess</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void checkPackageAccess(String
pkg)</FONT></TT>
</BLOCKQUOTE>
<P>
This method checks to see whether the calling thread is allowed
access to the package with the specified name.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">pkg</FONT> is the name of the package to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the calling thread doesn't have permission to access the package.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">checkPackageDefinition</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void checkPackageDefinition(String
pkg)</FONT></TT>
</BLOCKQUOTE>
<P>
This method checks to see whether the calling thread is allowed
to define classes in the package with the specified name.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">pkg</FONT> is the name of the package to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the calling thread doesn't have permission to define classes in the package.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">checkPropertiesAccess</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void checkPropertiesAccess()</FONT></TT>
</BLOCKQUOTE>
<P>
This method checks to see whether the calling thread is allowed
access to the system properties.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">SecurityException</FONT> if the calling thread doesn't have permission to access the system properties.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">checkPropertyAccess</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void checkPropertyAccess(String
key)</FONT></TT>
</BLOCKQUOTE>
<P>
This method checks to see whether the calling thread is allowed
access to the system property with the specified key name.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">key</FONT> is the key name for the system property to check.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the calling thread doesn't have permission to access the system property with the specified key name.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">checkRead</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void checkRead(FileDescriptor
fd)</FONT></TT>
</BLOCKQUOTE>
<P>
This method checks to see whether the calling thread is allowed
access to read from the file with the specified file descriptor.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">fd</FONT> is the file descriptor for the file to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the calling thread doesn't have permission to read from the file.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">checkRead</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void checkRead(String file)</FONT></TT>
</BLOCKQUOTE>
<P>
This method checks to see whether the calling thread is allowed
access to read from the file with the specified platform-specific
filename.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">file</FONT> is the platform-specific filename for the file to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the calling thread doesn't have permission to read from the file.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">checkRead</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void checkRead(String file, Object
context)</FONT></TT>
</BLOCKQUOTE>
<P>
This method checks to see whether the specified security context
is allowed access to read from the file with the specified platform-specific
filename.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">file</FONT> is the platform-specific filename for the file to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">context</FONT> is the security context for the check.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the specified security context doesn't have permission to read from the file.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">checkSetFactory</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void checkSetFactory()</FONT></TT>
</BLOCKQUOTE>
<P>
This method checks to see whether the calling thread is allowed
access to set the socket or stream handler factory used by the
<TT><FONT FACE="Courier">URL</FONT></TT> class.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">SecurityException</FONT> if the calling thread doesn't have permission to set the socket or stream handler factory.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">checkTopLevelWindow</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean checkTopLevelWindow(Object
window)</FONT></TT>
</BLOCKQUOTE>
<P>
This method checks to see whether the calling thread is trusted
to show the specified top-level window. Note that even if the
calling thread isn't trusted to show the window, the window still
can be shown with some sort of visual warning.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">window</FONT> is the top-level window to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the calling thread is trusted to show the top-level window; otherwise, returns FALSE.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">checkWrite</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void checkWrite(FileDescriptor
fd)</FONT></TT>
</BLOCKQUOTE>
<P>
This method checks to see whether the calling thread is allowed
access to write to the file with the specified file descriptor.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">fd</FONT> is the file descriptor for the file to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the calling thread doesn't have permission to write to the file.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">checkWrite</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void checkWrite(String file)</FONT></TT>
</BLOCKQUOTE>
<P>
This method checks to see whether the calling thread is allowed
access to write to the file with the specified platform-specific
filename.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">file</FONT> is the platform-specific filename for the file to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the calling thread doesn't have permission to write to the file.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">classDepth</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">protected int classDepth(String name)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the stack depth of the class with the specified
name.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">name</FONT> is the fully qualified name of the class for which to determine the stack depth.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The stack depth of the class, or <TT><FONT FACE="Courier">-1</FONT></TT> if the class can't be found in any stack frame.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">classLoaderDepth</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">protected int classLoaderDepth()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the stack depth of the most recently executing
method of a class defined using a class loader.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The stack depth of the most recently executing method of a class defined using a class loader, or <TT><FONT FACE="Courier">-1</FONT></TT> if no method is executing within a class defined by a class loader.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">currentClassLoader</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">protected ClassLoader currentClassLoader()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the current class loader on the stack.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The current class loader on the stack, or <TT><FONT FACE="Courier">NULL</FONT></TT> if no class loader exists on the stack.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">getClassContext</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">protected Class[] getClassContext()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the current execution stack, which is an
array of classes corresponding to each method call on the stack.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >An array of classes corresponding to each method call on the stack.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">getInCheck</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean getInCheck()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether there is a security check in progress.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">TRUE</FONT> if a security check is in progress; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">getSecurityContext</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Object getSecurityContext()</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a platform-specific security context based
on the current runtime environment.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A platform-specific security context based on the current runtime environment.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">inClass</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">protected boolean inClass(String name)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether a method in the class with the
specified name is on the execution stack.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">name</FONT> is the name of the class to check.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if a method in the class is on the execution stack; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">inClassLoader</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">protected boolean inClassLoader()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether a method in a class defined using
a class loader is on the execution stack.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">TRUE</FONT> if a method in a class defined using a class loader is on the execution stack; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="String"><IMG SRC="class.gif"></A></TD><TD WIDTH=499>
<H2><FONT SIZE=5 COLOR=#FF0000>String</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
See also: <TT><FONT FACE="Courier">StringBuffer</FONT></TT>
<P>
This class implements a constant string of characters. The <TT><FONT FACE="Courier">String</FONT></TT>
class provides a wide range of support for working with strings
of characters. Note that literal string constants are converted
automatically to <TT><FONT FACE="Courier">String</FONT></TT> objects
by the Java compiler. The definition for the <TT><FONT FACE="Courier">String</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final class java.lang.String extends
java.lang.Object {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public String();<BR>
&nbsp;&nbsp;public String(byte ascii[], int hibyte);<BR>
&nbsp;&nbsp;public String(byte ascii[], int hibyte, int off, int
count);<BR>
&nbsp;&nbsp;public String(char value[]);<BR>
&nbsp;&nbsp;public String(char value[], int off, int count);<BR>
&nbsp;&nbsp;public String(String value);<BR>
&nbsp;&nbsp;public String(StringBuffer buffer);<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public char charAt(int index);<BR>
&nbsp;&nbsp;public int compareTo(String anotherString);<BR>
&nbsp;&nbsp;public String concat(String str);<BR>
&nbsp;&nbsp;public static String copyValueOf(char data[]);<BR>
&nbsp;&nbsp;public static String copyValueOf(char data[], int
off, int count);<BR>
&nbsp;&nbsp;public boolean endsWith(String suffix);<BR>
&nbsp;&nbsp;public boolean equals(Object anObject);<BR>
&nbsp;&nbsp;public boolean equalsIgnoreCase(String anotherString);
<BR>
&nbsp;&nbsp;public void getBytes(int srcBegin, int srcEnd, byte
dst[], int dstBegin);<BR>
&nbsp;&nbsp;public void getChars(int srcBegin, int srcEnd, char
dst[], int dstBegin);<BR>
&nbsp;&nbsp;public int hashCode();<BR>
&nbsp;&nbsp;public int indexOf(int ch);<BR>
&nbsp;&nbsp;public int indexOf(int ch, int fromIndex);<BR>
&nbsp;&nbsp;public int indexOf(String str);<BR>
&nbsp;&nbsp;public int indexOf(String str, int fromIndex);<BR>
&nbsp;&nbsp;public String intern();<BR>
&nbsp;&nbsp;public int lastIndexOf(int ch);<BR>
&nbsp;&nbsp;public int lastIndexOf(int ch, int fromIndex);<BR>
&nbsp;&nbsp;public int lastIndexOf(String str);<BR>
&nbsp;&nbsp;public int lastIndexOf(String str, int fromIndex);
<BR>
&nbsp;&nbsp;public int length();<BR>
&nbsp;&nbsp;public boolean regionMatches(boolean ignoreCase, int
toffset, String other,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int ooffset, int len);<BR>
&nbsp;&nbsp;public boolean regionMatches(int toffset, String other,
int ooffset,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int len);<BR>
&nbsp;&nbsp;public String replace(char oldChar, char newChar);
<BR>
&nbsp;&nbsp;public boolean startsWith(String prefix);<BR>
&nbsp;&nbsp;public boolean startsWith(String prefix, int toffset);
<BR>
&nbsp;&nbsp;public String substring(int beginIndex);<BR>
&nbsp;&nbsp;public String substring(int beginIndex, int endIndex);
<BR>
&nbsp;&nbsp;public char[] toCharArray();<BR>
&nbsp;&nbsp;public String toLowerCase();<BR>
&nbsp;&nbsp;public String toString();<BR>
&nbsp;&nbsp;public String toUpperCase();<BR>
&nbsp;&nbsp;public String trim();<BR>
&nbsp;&nbsp;public static String valueOf(boolean b);<BR>
&nbsp;&nbsp;public static String valueOf(char c);<BR>
&nbsp;&nbsp;public static String valueOf(char data[]);<BR>
&nbsp;&nbsp;public static String valueOf(char data[], int off,
int count);<BR>
&nbsp;&nbsp;public static String valueOf(double d);<BR>
&nbsp;&nbsp;public static String valueOf(float f);<BR>
&nbsp;&nbsp;public static String valueOf(int i);<BR>
&nbsp;&nbsp;public static String valueOf(long l);<BR>
&nbsp;&nbsp;public static String valueOf(Object obj);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default string containing no characters.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String(byte ascii[], int hibyte)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a string from the specified array of
bytes, with the top 8 bits of each string character set to <TT><FONT FACE="Courier">hibyte</FONT></TT>.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">ascii</FONT> is the byte array that is to be converted to string characters.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">hibyte</FONT> is the high byte value for each character.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String(byte ascii[], int hibyte,
int off, int count)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a string of length <TT><FONT FACE="Courier">count</FONT></TT>
from the specified array of bytes beginning <TT><FONT FACE="Courier">off</FONT></TT>
bytes into the array, with the top 8 bits of each string character
set to <TT><FONT FACE="Courier">hibyte</FONT></TT>.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">ascii</FONT> is the byte array that is to be converted to string characters.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">hibyte</FONT> is the high byte value for each character.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array of bytes.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">count</FONT> is the number of bytes from the array to convert.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT> if the offset or count for the byte array is invalid.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String(char value[])</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a string from the specified array of
characters.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">value</FONT> is the character array used to initialize the string.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String(char value[], int off,
int count)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a string of length <TT><FONT FACE="Courier">count</FONT></TT>
from the specified array of characters beginning <TT><FONT FACE="Courier">off</FONT></TT>
bytes into the array.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">value</FONT> is the character array used to initialize the string.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array of characters.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">count</FONT> is the number of characters from the array to use in initializing the string.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT> if the offset or count for the character array is invalid.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String(String value)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a new string that is a copy of the specified
string.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">value</FONT> is the string by which to initialize this string.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String(StringBuffer buffer)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a new string that is a copy of the contents
of the specified string buffer.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">buffer</FONT> is the string buffer used to initialize this string.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">charAt</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public char charAt(int index)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the character at the specified index. Note
that string indexes are zero-based, meaning that the first character
is located at index 0.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">index</FONT> is the index of the desired character.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The character at the specified index.</TD>
</TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT> if the index is out of range.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">compareTo</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int compareTo(String anotherString)</FONT></TT>
</BLOCKQUOTE>
<P>
This method compares this string with the specified string lexicographically.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">anotherString</FONT> is the string to which the comparison is made.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">0</FONT> if this string is equal to the specified string, a value less than 0 if this string is lexicographically less than the specified string, or a value greater than 0 if this string is lexicographically greater than the specified string.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">concat</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String concat(String str)</FONT></TT>
</BLOCKQUOTE>
<P>
This method concatenates the specified string onto the end of
this string.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">str</FONT> is the string to concatenate.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >This string, with the specified string concatenated onto the end.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">copyValueOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static String copyValueOf(char
data[])</FONT></TT>
</BLOCKQUOTE>
<P>
This method converts a character array to an equivalent string
by creating a new string and copying the characters into it.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">data</FONT> is the character array to convert to a string.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A string representation of the specified character array.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">copyValueOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static String copyValueOf(char
data[], int off, int count)</FONT></TT>
</BLOCKQUOTE>
<P>
This method converts a character array to an equivalent string
by creating a new string and copying <TT><FONT FACE="Courier">count</FONT></TT>
characters into it beginning at <TT><FONT FACE="Courier">off</FONT></TT>.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">data</FONT> is the character array to convert to a string.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the character array.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">count</FONT> is the number of characters from the array to use in initializing the string.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A string representation of the specified character array beginning at <TT><FONT FACE="Courier">off</FONT></TT> and of length <TT><FONT FACE="Courier">count</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">endsWith</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean endsWith(String suffix)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether this string ends with the specified
suffix.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">suffix</FONT> is the suffix to check.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if this string ends with the specified suffix; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">equals</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean equals(Object anObject)</FONT></TT>
</BLOCKQUOTE>
<P>
This method compares the specified object to this string. The
<TT><FONT FACE="Courier">equals</FONT></TT> method returns <TT><FONT FACE="Courier">TRUE</FONT></TT>
only if the specified object is a <TT><FONT FACE="Courier">String</FONT></TT>
object of the same length and contains the same characters as
this string.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">anObject</FONT> is the object to compare.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the specified object is a <TT><FONT FACE="Courier">String</FONT></TT> object of the same length and contains the same characters as this string; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">equals</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">equalsIgnoreCase</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean equalsIgnoreCase(String
anotherString)</FONT></TT>
</BLOCKQUOTE>
<P>
This method compares the specified string to this string, ignoring
case.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">anotherString</FONT> is the string to compare.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the specified string is of the same length and contains the same characters as this string, ignoring case; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">getBytes</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void getBytes(int srcBegin, int
srcEnd, byte dst[], int dstBegin)</FONT></TT>
</BLOCKQUOTE>
<P>
This method copies the lower 8 bits of each character in this
string, beginning at <TT><FONT FACE="Courier">srcBegin</FONT></TT>
and ending at <TT><FONT FACE="Courier">srcEnd</FONT></TT>, into
the byte array <TT><FONT FACE="Courier">dst</FONT></TT> beginning
at <TT><FONT FACE="Courier">dstBegin</FONT></TT>.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">srcBegin</FONT> is the index of the first character in the string to copy.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">srcEnd</FONT> is the index of the last character in the string to copy.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">dst</FONT> is the destination byte array.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">dstBegin</FONT> is the starting offset into the byte array.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">getChars</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void getChars(int srcBegin, int
srcEnd, char dst[], int dstBegin)</FONT></TT>
</BLOCKQUOTE>
<P>
This method copies each character in this string, beginning at
<TT><FONT FACE="Courier">srcBegin</FONT></TT> and ending at <TT><FONT FACE="Courier">srcEnd</FONT></TT>,
into the character array <TT><FONT FACE="Courier">dst</FONT></TT>
beginning at <TT><FONT FACE="Courier">dstBegin</FONT></TT>.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">srcBegin</FONT> is the index of the first character in the string to copy.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">srcEnd</FONT> is the index of the last character in the string to copy.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">dst</FONT> is the destination character array.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">dstBegin</FONT> is the starting offset into the character array.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT> if there is an invalid index in the buffer.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">hashCode</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int hashCode()</FONT></TT>
</BLOCKQUOTE>
<P>
This method calculates a hash code for this object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A hash code for this object.</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">hashCode</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">indexOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int indexOf(int ch)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the index of the first occurrence of the
specified character in this string.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">ch</FONT> is the character for which to search.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The index of the first occurrence of the specified character, or <TT><FONT FACE="Courier">-1</FONT></TT> if the character doesn't occur.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">indexOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int indexOf(int ch, int fromIndex)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the index of the first occurrence of the
specified character in this string, beginning at <TT><FONT FACE="Courier">fromIndex</FONT></TT>.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">ch</FONT> is the character for which to search.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">fromIndex</FONT> is the index from which to start the search.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The index of the first occurrence of the specified character beginning at <TT><FONT FACE="Courier">fromIndex</FONT></TT>, or if the character doesn't occur.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">indexOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int indexOf(String str)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the index of the first occurrence of the
specified substring in this string.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">str</FONT> is the substring for which to search.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The index of the first occurrence of the specified substring, or <TT><FONT FACE="Courier">-1</FONT></TT> if the substring doesn't occur.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">indexOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int indexOf(String str, int fromIndex)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the index of the first occurrence of the
specified substring in this string, beginning at <TT><FONT FACE="Courier">fromIndex</FONT></TT>.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">str</FONT> is the substring for which to search.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">fromIndex</FONT> is the index from which to start the search.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The index of the first occurrence of the specified substring beginning at <TT><FONT FACE="Courier">fromIndex</FONT></TT>, or if the substring doesn't occur.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">intern</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String intern()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a string that is equal to this string but
is guaranteed to be from a pool of unique strings.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A string that is equal to this string but is guaranteed to be from a pool of unique strings.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">lastIndexOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int lastIndexOf(int ch)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the index of the last occurrence of the
specified character in this string.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">ch</FONT> is the character for which to search.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The index of the last occurrence of the specified character, or <TT><FONT FACE="Courier">-1</FONT></TT> if the character doesn't occur.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">lastIndexOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int lastIndexOf(int ch, int fromIndex)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the index of the last occurrence of the
specified character in this string, beginning at <TT><FONT FACE="Courier">fromIndex</FONT></TT>.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">ch</FONT> is the character for which to search.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">fromIndex</FONT> is the index from which to start the search.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The index of the last occurrence of the specified character beginning at <TT><FONT FACE="Courier">fromIndex</FONT></TT>, or <TT><FONT FACE="Courier">-1</FONT></TT> if the character doesn't occur.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">lastIndexOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int lastIndexOf(String str)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the index of the last occurrence of the
specified substring in this string.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">str</FONT> is the substring for which to search.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The index of the last occurrence of the specified substring, or <TT><FONT FACE="Courier">-1</FONT></TT> if the substring doesn't occur.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">lastIndexOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int lastIndexOf(String str, int
fromIndex)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the index of the last occurrence of the
specified substring in this string, beginning at <TT><FONT FACE="Courier">fromIndex</FONT></TT>.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">str</FONT> is the substring for which to search.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">fromIndex</FONT> is the index from which to start the search.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The index of the last occurrence of the specified substring beginning at <TT><FONT FACE="Courier">fromIndex</FONT></TT>, or <TT><FONT FACE="Courier">-1</FONT></TT> if the substring doesn't occur.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">length</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int length()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the length of this string, which is the
number of Unicode characters in the string.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The length of this string.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">regionMatches</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean regionMatches(boolean
ignoreCase, int toffset, String other, int &Acirc;ooffset, int
len)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether a substring of this string matches
a substring of the specified string, with an option for ignoring
case.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">ignoreCase</FONT> is a Boolean value specifying whether case is ignored; a value of <TT><FONT FACE="Courier">TRUE</FONT></TT> means that case is ignored, whereas a value of <TT><FONT FACE="Courier">FALSE</FONT></TT> means that case isn't ignored.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">toffset</FONT> is the index from which to start the substring for this string.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">other</FONT> is the other string to compare.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">ooffset</FONT> is the index from which to start the substring for the string to compare.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the number of characters to compare.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the substring of this string matches the substring of the specified string; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">regionMatches</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean regionMatches(int toffset,
String other, int ooffset, int len)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether a substring of this string matches
a substring of the specified string.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">toffset</FONT> is the index from which to start the substring for this string.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">other</FONT> is the other string to compare.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">ooffset</FONT> is the index from which to start the substring for the string to compare.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the number of characters to compare.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if the substring of this string matches the substring of the specified string; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">replace</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String replace(char oldChar, char
newChar)</FONT></TT>
</BLOCKQUOTE>
<P>
This method replaces all occurrences of <TT><FONT FACE="Courier">oldChar</FONT></TT>
in this string with <TT><FONT FACE="Courier">newChar</FONT></TT>.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">oldChar</FONT> is the old character to replace.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">newChar</FONT> is the new character to take its place.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >This string, with all occurrences of <TT><FONT FACE="Courier">oldChar</FONT></TT> replaced with <TT><FONT FACE="Courier">newChar</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">startsWith</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean startsWith(String prefix)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether this string starts with the specified
prefix.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">prefix</FONT> is the prefix to check.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if this string starts with the specified prefix; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">startsWith</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean startsWith(String prefix,
int toffset)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether this string starts with the specified
prefix, beginning at <TT><FONT FACE="Courier">toffset</FONT></TT>.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">prefix</FONT> is the prefix to check.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">toffset</FONT> is the index from which to start the search.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if this string starts with the specified prefix beginning at <TT><FONT FACE="Courier">toffset</FONT></TT>; otherwise,  returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">substring</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String substring(int beginIndex)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the substring of this string, beginning
at <TT><FONT FACE="Courier">beginIndex</FONT></TT>.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">beginIndex</FONT> is the beginning index of the substring, inclusive.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The substring of this string, beginning at <TT><FONT FACE="Courier">beginIndex</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT> if <TT><FONT FACE="Courier">beginIndex</FONT></TT> is out of range.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">substring</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String substring(int beginIndex,
int endIndex)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the substring of this string, beginning
at <TT><FONT FACE="Courier">beginIndex</FONT></TT> and ending
at <TT><FONT FACE="Courier">endIndex</FONT></TT>.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">beginIndex</FONT> is the beginning index of the substring, inclusive.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">endIndex</FONT> is the end index of the substring, exclusive.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The substring of this string, beginning at <TT><FONT FACE="Courier">beginIndex</FONT></TT> and ending at <TT><FONT FACE="Courier">endIndex</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT> if <TT><FONT FACE="Courier">beginIndex</FONT></TT> or <TT><FONT FACE="Courier">endIndex</FONT></TT> is out of range.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">toCharArray</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public char[] toCharArray()</FONT></TT>
</BLOCKQUOTE>
<P>
This method converts this string to a character array by creating
a new array and copying each character of the string to it.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A character array representing this string.</TD>
</TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">toLowerCase</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String toLowerCase()</FONT></TT>
</BLOCKQUOTE>
<P>
This method converts all the characters in this string to lowercase.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >This string, with all the characters converted to lowercase.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">toString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String toString()</FONT></TT>
</BLOCKQUOTE>
<P>
This method returns this string.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >This string itself.</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">toString</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">toUpperCase</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String toUpperCase()</FONT></TT>
</BLOCKQUOTE>
<P>
This method converts all the characters in this string to uppercase.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >This string, with all the characters converted to uppercase.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">trim</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String trim()</FONT></TT>
</BLOCKQUOTE>
<P>
This method trims leading and trailing whitespace from this string.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >This string, with leading and trailing whitespace removed.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">valueOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static String valueOf(boolean
b)</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a string representation of the specified Boolean
value. If the Boolean value is <TT><FONT FACE="Courier">TRUE</FONT></TT>,
the string <TT><FONT FACE="Courier">&quot;true&quot;</FONT></TT>
is returned; otherwise, the string <TT><FONT FACE="Courier">&quot;false&quot;</FONT></TT>
is returned.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the Boolean value from which to get the string representation.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A string representation of the specified Boolean value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">valueOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static String valueOf(char c)</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a string representation of the specified character
value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">c</FONT> is the character value from which to get the string representation.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A string representation of the specified character value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">valueOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static String valueOf(char data[])</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a string representation of the specified character
array.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">data</FONT> is the character array from which to get the string representation.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A string representation of the specified character array.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">valueOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static String valueOf(char data[],
int off, int count)</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a string representation of length <TT><FONT FACE="Courier">count</FONT></TT>
from the specified array of characters, beginning <TT><FONT FACE="Courier">off</FONT></TT>
bytes into the array.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">data</FONT> is the character array from which to get the string representation.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the array of characters.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">count</FONT> is the number of characters from the array to use in initializing the string.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A string representation of the specified character array.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">valueOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static String valueOf(double d)</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a string representation of the specified double
value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">d</FONT> is the double value from which to get the string representation.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A string representation of the specified double value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">valueOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static String valueOf(float f)</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a string representation of the specified float
value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">f</FONT> is the float value from which to get the string representation.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A string representation of the specified float value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">valueOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static String valueOf(int i)</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a string representation of the specified integer
value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">i</FONT> is the integer value from which to get the string representation.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A string representation of the specified integer value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">valueOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static String valueOf(long l)</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a string representation of the specified long
value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">l</FONT> is the long value from which to get the string representation.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A string representation of the specified long value.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">valueOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">String</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static String valueOf(Object obj)</FONT></TT>
</BLOCKQUOTE>
<P>
This method creates a string representation of the specified object.
Note that the string representation is the same as that returned
by the <TT><FONT FACE="Courier">toString</FONT></TT> method of
the object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">obj</FONT> is the object from which to get the string representation.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >A string representation of the specified object value, or the string <TT><FONT FACE="Courier">&quot;null&quot;</FONT></TT> if the object is null.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="StringBuffer"><IMG SRC="class.gif"></A></TD><TD WIDTH=499>
<H2><FONT SIZE=5 COLOR=#FF0000>StringBuffer</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
See also: <TT><FONT FACE="Courier">String</FONT></TT>
<P>
This class implements a variable string of characters. The <TT><FONT FACE="Courier">StringBuffer</FONT></TT>
class provides a wide range of append and insert methods, along
with some other support methods for getting information about
the string buffer. Note that the <TT><FONT FACE="Courier">StringBuffer</FONT></TT>
class is synchronized appropriately so that it can be used by
multiple threads. The definition for the <TT><FONT FACE="Courier">StringBuffer</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.StringBuffer extends
java.lang.Object {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public StringBuffer();<BR>
&nbsp;&nbsp;public StringBuffer(int length);<BR>
&nbsp;&nbsp;public StringBuffer(String str);<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public StringBuffer append(boolean b);<BR>
&nbsp;&nbsp;public StringBuffer append(char c);<BR>
&nbsp;&nbsp;public StringBuffer append(char str[]);<BR>
&nbsp;&nbsp;public StringBuffer append(char str[], int off, int
len);<BR>
&nbsp;&nbsp;public StringBuffer append(double d);<BR>
&nbsp;&nbsp;public StringBuffer append(float f);<BR>
&nbsp;&nbsp;public StringBuffer append(int i);<BR>
&nbsp;&nbsp;public StringBuffer append(long l);<BR>
&nbsp;&nbsp;public StringBuffer append(Object obj);<BR>
&nbsp;&nbsp;public StringBuffer append(String str);<BR>
&nbsp;&nbsp;public int capacity();<BR>
&nbsp;&nbsp;public char charAt(int index);<BR>
&nbsp;&nbsp;public void ensureCapacity(int minimumCapacity);<BR>
&nbsp;&nbsp;public void getChars(int srcBegin, int srcEnd, char
dst[], int dstBegin);<BR>
&nbsp;&nbsp;public StringBuffer insert(int off, boolean b);<BR>
&nbsp;&nbsp;public StringBuffer insert(int off, char c);<BR>
&nbsp;&nbsp;public StringBuffer insert(int off, char str[]);<BR>
&nbsp;&nbsp;public StringBuffer insert(int off, double d);<BR>
&nbsp;&nbsp;public StringBuffer insert(int off, float f);<BR>
&nbsp;&nbsp;public StringBuffer insert(int off, int i);<BR>
&nbsp;&nbsp;public StringBuffer insert(int off, long l);<BR>
&nbsp;&nbsp;public StringBuffer insert(int off, Object obj);<BR>
&nbsp;&nbsp;public StringBuffer insert(int off, String str);<BR>
&nbsp;&nbsp;public int length();<BR>
&nbsp;&nbsp;public StringBuffer reverse();<BR>
&nbsp;&nbsp;public void setCharAt(int index, char ch);<BR>
&nbsp;&nbsp;public void setLength(int newLength);<BR>
&nbsp;&nbsp;public String toString();<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringBuffer()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default string buffer with no characters.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringBuffer(int length)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a string buffer with the specified length.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">length</FONT> is the initial length of the string buffer.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringBuffer(String str)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a string buffer with the specified initial
string value.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">str</FONT> is the initial string value of the string buffer.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">append</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringBuffer append(boolean b)</FONT></TT>
</BLOCKQUOTE>
<P>
This method appends the string representation of the specified
Boolean value to the end of this string buffer.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">b</FONT> is the Boolean value to be appended.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >This string buffer, with the Boolean appended.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">append</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringBuffer append(char c)</FONT></TT>
</BLOCKQUOTE>
<P>
This method appends the string representation of the specified
character value to the end of this string buffer.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">c</FONT> is the character value to be appended.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >This string buffer, with the character appended.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">append</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringBuffer append(char str[])</FONT></TT>
</BLOCKQUOTE>
<P>
This method appends the string representation of the specified
character array to the end of this string buffer.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">str</FONT> is the character array to be appended.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >This string buffer, with the character array appended.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">append</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringBuffer append(char str[],
int off, int len)</FONT></TT>
</BLOCKQUOTE>
<P>
This method appends the string representation of the specified
character subarray to the end of this string buffer.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">str</FONT> is the character array to be appended.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">off</FONT> is the starting offset into the character array to append.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">len</FONT> is the number of characters to append.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >This string buffer, with the character subarray appended.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">append</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringBuffer append(double d)</FONT></TT>
</BLOCKQUOTE>
<P>
This method appends the string representation of the specified
double value to the end of this string buffer.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">d</FONT> is the double value to be appended.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >This string buffer, with the double appended.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">append</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringBuffer append(float f)</FONT></TT>
</BLOCKQUOTE>
<P>
This method appends the string representation of the specified
float value to the end of this string buffer.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">f</FONT> is the float value to be appended.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >This string buffer, with the float appended.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">append</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringBuffer append(int i)</FONT></TT>
</BLOCKQUOTE>
<P>
This method appends the string representation of the specified
integer value to the end of this string buffer.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">i</FONT> is the integer value to be appended.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >This string buffer, with the integer appended.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">append</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringBuffer append(long l)</FONT></TT>
</BLOCKQUOTE>
<P>
This method appends the string representation of the specified
long value to the end of this string buffer.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">l</FONT> is the long value to be appended.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >This string buffer, with the long appended.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">append</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringBuffer append(Object obj)</FONT></TT>
</BLOCKQUOTE>
<P>
This method appends the string representation of the specified
object to the end of this string buffer. Note that the string
representation is the same as that returned by the <TT><FONT FACE="Courier">toString</FONT></TT>
method of the object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">obj</FONT> is the object to be appended.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >This string buffer, with the object appended.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">append</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringBuffer append(String str)</FONT></TT>
</BLOCKQUOTE>
<P>
This method appends the specified string to the end of this string
buffer.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">str</FONT> is the string to be appended.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >This string buffer, with the string appended.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">capacity</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int capacity()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the capacity of this string buffer, which
is the amount of character storage currently allocated in the
string buffer.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The capacity of this string buffer.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">charAt</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public char charAt(int index)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the character at the specified index. Note
that string buffer indexes are zero-based, meaning that the first
character is located at index 0.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">index</FONT> is the index of the desired character.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The character at the specified index.</TD>
</TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT> if the index is out of range.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">ensureCapacity</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<H4></H4>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void ensureCapacity(int minimumCapacity)</FONT></TT>
</BLOCKQUOTE>
<P>
This method ensures that the capacity of this string buffer is
at least equal to the specified minimum.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">minimumCapacity</FONT> is the minimum desired capacity.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">getChars</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void getChars(int srcBegin, int
srcEnd, char dst[], int dstBegin)</FONT></TT>
</BLOCKQUOTE>
<P>
This method copies each character in this string buffer, beginning
at <TT><FONT FACE="Courier">srcBegin</FONT></TT> and ending at
<TT><FONT FACE="Courier">srcEnd</FONT></TT>, into the character
array <TT><FONT FACE="Courier">dst</FONT></TT> beginning at <TT><FONT FACE="Courier">dstBegin</FONT></TT>.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">srcBegin</FONT> is the index of the first character in the string buffer to copy.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">srcEnd</FONT> is the index of the last character in the string buffer to copy.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">dst</FONT> is the destination character array.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">dstBegin</FONT> is the starting offset into the character array.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT> if there is an invalid index in the buffer.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">insert</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringBuffer insert(int off, boolean
b)</FONT></TT>
</BLOCKQUOTE>
<P>
This method inserts the string representation of the specified
Boolean value at the specified offset of this string buffer.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">off</FONT> is the offset at which to insert the Boolean.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">b</FONT> is the Boolean value to be inserted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >This string buffer, with the Boolean inserted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT> if the offset is invalid.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">insert</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringBuffer insert(int off, char
c)</FONT></TT>
</BLOCKQUOTE>
<P>
This method inserts the string representation of the specified
character value at the specified offset of this string buffer.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">off</FONT> is the offset at which to insert the character.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">c</FONT> is the character value to be inserted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >This string buffer, with the character inserted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT> if the offset is invalid.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">insert</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringBuffer insert(int off, char
str[])</FONT></TT>
</BLOCKQUOTE>
<P>
This method inserts the string representation of the specified
character array at the specified offset of this string buffer.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">off</FONT> is the offset at which to insert the character array.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">str</FONT> is the character array to be inserted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >This string buffer, with the character array inserted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT> if the offset is invalid.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">insert</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringBuffer insert(int off, double
d)</FONT></TT>
</BLOCKQUOTE>
<P>
This method inserts the string representation of the specified
double value at the specified offset of this string buffer.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">off</FONT> is the offset at which to insert the double.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">d</FONT> is the double value to be inserted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >This string buffer, with the double inserted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT> if the offset is invalid.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">insert</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringBuffer insert(int off, float
f)</FONT></TT>
</BLOCKQUOTE>
<P>
This method inserts the string representation of the specified
float value at the specified offset of this string buffer.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">off</FONT> is the offset at which to insert the float.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">f</FONT> is the float value to be inserted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >This string buffer, with the float inserted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT> if the offset is invalid.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">insert</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringBuffer insert(int off, int
i)</FONT></TT>
</BLOCKQUOTE>
<P>
This method inserts the string representation of the specified
integer value at the specified offset of this string buffer.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">off</FONT> is the offset at which to insert the integer.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">i</FONT> is the integer value to be inserted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >This string buffer, with the integer inserted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT> if the offset is invalid.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">insert</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringBuffer insert(int off, long
l)</FONT></TT>
</BLOCKQUOTE>
<P>
This method inserts the string representation of the specified
long value at the specified offset of this string buffer.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">off</FONT> is the offset at which to insert the long.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">l</FONT> is the long value to be inserted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >This string buffer, with the long inserted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT> if the offset is invalid.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">insert</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringBuffer insert(int off, Object
obj)</FONT></TT>
</BLOCKQUOTE>
<P>
This method inserts the string representation of the specified
object at the specified offset of this string buffer. Note that
the string representation is the same as that returned by the
<TT><FONT FACE="Courier">toString</FONT></TT> method of the object.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">off</FONT> is the offset at which to insert the object.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">obj</FONT> is the object to be inserted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >This string buffer, with the object inserted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT> if the offset is invalid.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">insert</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringBuffer insert(int off, String
str)</FONT></TT>
</BLOCKQUOTE>
<P>
This method inserts the specified string at the specified offset
of this string buffer.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">off</FONT> is the offset at which to insert the string.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">str</FONT> is the string to be inserted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >This string buffer, with the string inserted.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT> if the offset is invalid.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">length</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int length()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the length of this string buffer, which
is the actual number of characters stored in the buffer.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The length of this string buffer.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%></TD><TD ><H4><TT><FONT FACE="Courier">reverse</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringBuffer reverse()</FONT></TT>
</BLOCKQUOTE>
<P>
This method reverses the character sequence in this string buffer.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >This string buffer, with the characters reversed.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">setCharAt</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setCharAt(int index, char
ch)</FONT></TT>
</BLOCKQUOTE>
<P>
This method changes the character at the specified index in this
string to the specified <BR>
character.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">index</FONT> is the index of the character to change.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">ch</FONT> is the new character.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT> if the index is invalid.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">setLength</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void setLength(int newLength)</FONT></TT>
</BLOCKQUOTE>
<P>
This method explicitly sets the length of this string buffer.
If the length is reduced, characters are lost; if the length is
increased, new characters are set to 0 (<TT><FONT FACE="Courier">NULL</FONT></TT>).
The new length must be greater than or equal to 0.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">newLength</FONT> is the new length of the string buffer.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT> if the length is invalid.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">toString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringBuffer</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String toString()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a constant string representation of this
string buffer.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD >The constant string representation of this string buffer.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">toString</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="System"><IMG SRC="class.gif"></A></TD><TD WIDTH=499>
<H2><FONT SIZE=5 COLOR=#FF0000>System</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This class provides a platform-independent means of interacting
with the Java runtime system. The <TT><FONT FACE="Courier">System</FONT></TT>
class provides support for standard input, standard output, and
standard error streams, along with providing access to system
properties, among other things. Note that the <TT><FONT FACE="Courier">System</FONT></TT>
class cannot be instantiated or subclassed because all its methods
and variables are static. The definition for the <TT><FONT FACE="Courier">System</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final class java.lang.System extends
java.lang.Object {<BR>
&nbsp;&nbsp;// Member Variables<BR>
&nbsp;&nbsp;public static PrintStream err;<BR>
&nbsp;&nbsp;public static InputStream in;<BR>
&nbsp;&nbsp;public static PrintStream out;<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public static void arraycopy(Object src, int src_position,
Object dst,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int dst_position, int length);<BR>
&nbsp;&nbsp;public static long currentTimeMillis();<BR>
&nbsp;&nbsp;public static void exit(int status);<BR>
&nbsp;&nbsp;public static void gc();<BR>
&nbsp;&nbsp;public static Properties getProperties();<BR>
&nbsp;&nbsp;public static String getProperty(String key);<BR>
&nbsp;&nbsp;public static String getProperty(String key, String
def);<BR>
&nbsp;&nbsp;public static SecurityManager getSecurityManager();
<BR>
&nbsp;&nbsp;public static void load(String pathname);<BR>
&nbsp;&nbsp;public static void loadLibrary(String libname);<BR>
&nbsp;&nbsp;public static void runFinalization();<BR>
&nbsp;&nbsp;public static void setProperties(Properties props);
<BR>
&nbsp;&nbsp;public static void setSecurityManager(SecurityManager
s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=595><H4>Member Variables</H4>
</TD></TR>
</TABLE></CENTER>
<H5></H5>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static PrintStream err</FONT></TT>
</BLOCKQUOTE>
<P>
This is the standard error stream, which is used for printing
error information. Typically, this stream corresponds to display
output, because it is important that the user see the error information.
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static InputStream in</FONT></TT>
</BLOCKQUOTE>
<P>
This is the standard input stream, which is used for reading character
data. Typically, this stream corresponds to keyboard input or
another input source specified by the host environment or user.
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static PrintStream out</FONT></TT>
</BLOCKQUOTE>
<P>
This is the standard output stream, which is used for printing
character data. Typically, this stream corresponds to display
output or another output destination specified by the host environment
or user.<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">arraycopy</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">System</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static void arraycopy(Object src,
int src_position, Object dst, int &Acirc;dst_position, int length)</FONT></TT>
</BLOCKQUOTE>
<P>
This method copies <TT><FONT FACE="Courier">len</FONT></TT> array
elements from the <TT><FONT FACE="Courier">src</FONT></TT> array,
beginning at <TT><FONT FACE="Courier">src_position</FONT></TT>,
to the <TT><FONT FACE="Courier">dst</FONT></TT> array, beginning
at <TT><FONT FACE="Courier">dst_position</FONT></TT>. Both <TT><FONT FACE="Courier">src</FONT></TT>
and <TT><FONT FACE="Courier">dst</FONT></TT> must be array objects.
Note that <TT><FONT FACE="Courier">arraycopy</FONT></TT> does
not allocate memory for the destination array; the memory already
must be allocated.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">src</FONT> is the source array from which to copy data.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">src_position</FONT> is the start position in the source array.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">dst</FONT> is the destination array to which data is copied.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">dst_position</FONT> is the start position in the destination array.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">length</FONT> is the number of array elements to be copied.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">ArrayIndexOutOfBoundsException</FONT> if the copy would cause data to be accessed outside of array bounds.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">ArrayStoreException</FONT> if an element in the source array could not be stored in the destination array due to a type mismatch.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">currentTimeMillis</FONT></TT></H4>

</TD><TD WIDTH=8%></TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">System</FONT></TT></H4>

</TD><TD WIDTH=8%></TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static long currentTimeMillis()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the current UTC time relative to midnight,
January 1, 1970 UTC, in milliseconds.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The current UTC time relative to midnight, January 1, 1970 UTC, in milliseconds.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">exit</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">System</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static void exit(int status)</FONT></TT>
</BLOCKQUOTE>
<P>
This method exits the Java runtime system (virtual machine) with
the specified integer exit status. Note that because <TT><FONT FACE="Courier">exit</FONT></TT>
kills the runtime system, it never returns. This method simply
calls the <TT><FONT FACE="Courier">exit</FONT></TT> method in
the <TT><FONT FACE="Courier">Runtime</FONT></TT> class.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">status</FONT> is the integer exit status; this should be set to nonzero if this is an abnormal exit.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread cannot exit with the specified exit status.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">gc</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">System</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static void gc()</FONT></TT>
</BLOCKQUOTE>
<P>
This method invokes the Java garbage collector to clean up any
objects that no longer are needed, usually resulting in more free
memory. This method simply calls the <TT><FONT FACE="Courier">gc</FONT></TT>
method in the <TT><FONT FACE="Courier">Runtime</FONT></TT> class.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">getProperties</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">System</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static Properties getProperties()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the current system properties. Table 32.2
lists all the system properties guaranteed to be supported.
<P>
<CENTER><B>Table 32.2. Supported </B><TT><B><FONT FACE="Courier">getProperties</FONT></B></TT><B>
system properties.</B></CENTER>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=202>Property</TD><TD WIDTH=271>Description</TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=202><TT><FONT FACE="Courier">java.version</FONT></TT>
</TD><TD WIDTH=271>Java version number</TD></TR>
<TR VALIGN=TOP><TD WIDTH=202><TT><FONT FACE="Courier">java.vendor</FONT></TT>
</TD><TD WIDTH=271>Java vendor-specific string</TD></TR>
<TR VALIGN=TOP><TD WIDTH=202><TT><FONT FACE="Courier">java.vendor.url</FONT></TT>
</TD><TD WIDTH=271>Java vendor URL</TD></TR>
<TR VALIGN=TOP><TD WIDTH=202><TT><FONT FACE="Courier">java.home</FONT></TT>
</TD><TD WIDTH=271>Java installation directory</TD></TR>
<TR VALIGN=TOP><TD WIDTH=202><TT><FONT FACE="Courier">java.class.version</FONT></TT>
</TD><TD WIDTH=271>Java class format version number</TD></TR>
<TR VALIGN=TOP><TD WIDTH=202><TT><FONT FACE="Courier">java.class.path</FONT></TT>
</TD><TD WIDTH=271>Java <TT><FONT FACE="Courier">CLASSPATH</FONT></TT> environment variable
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=202><TT><FONT FACE="Courier">os.name</FONT></TT>
</TD><TD WIDTH=271>Operating system name</TD></TR>
<TR VALIGN=TOP><TD WIDTH=202><TT><FONT FACE="Courier">os.arch</FONT></TT>
</TD><TD WIDTH=271>Operating system architecture</TD></TR>
<TR VALIGN=TOP><TD WIDTH=202><TT><FONT FACE="Courier">os.version</FONT></TT>
</TD><TD WIDTH=271>Operating system version</TD></TR>
<TR VALIGN=TOP><TD WIDTH=202><TT><FONT FACE="Courier">file.separator</FONT></TT>
</TD><TD WIDTH=271>File separator</TD></TR>
<TR VALIGN=TOP><TD WIDTH=202><TT><FONT FACE="Courier">path.separator</FONT></TT>
</TD><TD WIDTH=271>Path separator</TD></TR>
<TR VALIGN=TOP><TD WIDTH=202><TT><FONT FACE="Courier">line.separator</FONT></TT>
</TD><TD WIDTH=271>Line separator</TD></TR>
<TR VALIGN=TOP><TD WIDTH=202><TT><FONT FACE="Courier">user.name</FONT></TT>
</TD><TD WIDTH=271>User's account name</TD></TR>
<TR VALIGN=TOP><TD WIDTH=202><TT><FONT FACE="Courier">user.home</FONT></TT>
</TD><TD WIDTH=271>User's home directory</TD></TR>
<TR VALIGN=TOP><TD WIDTH=202><TT><FONT FACE="Courier">user.dir</FONT></TT>
</TD><TD WIDTH=271>User's current working directory</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The current system properties.</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread cannot access the system properties.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">getProperty</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">System</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static String getProperty(String
key)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the system property with the specified
key name.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">key</FONT> is the key name of the system property.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The system property with the specified key name.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread cannot access the system property.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">getProperty</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">System</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static String getProperty(String
key, String def)</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the system property with the specified
key name; it returns the specified default property value if the
key isn't found.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">key</FONT> is the key name of the system property.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">def</FONT> is the default property value to use if the key isn't found.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The system property with the specified key name, or the specified default property value if the key isn't found.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread cannot access the system property.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">getSecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">System</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static SecurityManager getSecurityManager()</FONT></TT>
</BLOCKQUOTE>
<P>
This method gets the security manager for the Java program, or
<TT><FONT FACE="Courier">NULL</FONT></TT> if none exists.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The security manager for the Java program, or <TT><FONT FACE="Courier">NULL</FONT></TT> if none exists.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">load</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">System</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static void load(String pathname)</FONT></TT>
</BLOCKQUOTE>
<P>
This method loads the dynamic library with the specified complete
path name. This method simply calls the <TT><FONT FACE="Courier">load</FONT></TT>
method in the <TT><FONT FACE="Courier">Runtime</FONT></TT> class.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">pathname</FONT> is the path name of the library to load.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">UnsatisfiedLinkError</FONT> if the library doesn't exist.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread can't load the library.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">loadLibrary</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">System</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static void loadLibrary(String
libname)</FONT></TT>
</BLOCKQUOTE>
<P>
This method loads the dynamic library with the specified library
name. Note that the mapping from library name to a specific filename
is performed in a platform-specific manner. This method simply
calls the <TT><FONT FACE="Courier">loadLibrary</FONT></TT> method
in the <TT><FONT FACE="Courier">Runtime</FONT></TT> class.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">libname</FONT> is the name of the library to load.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">UnsatisfiedLinkError</FONT> if the library doesn't exist.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread can't load the library.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">runFinalization</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">System</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static void runFinalization()</FONT></TT>
</BLOCKQUOTE>
<P>
This method explicitly causes the <TT><FONT FACE="Courier">finalize</FONT></TT>
methods of any discarded objects to be called. Typically, the
<TT><FONT FACE="Courier">finalize</FONT></TT> methods of discarded
objects are automatically called asynchronously when the garbage
collector cleans up the objects. You can use <TT><FONT FACE="Courier">runFinalization</FONT></TT>
to have the <TT><FONT FACE="Courier">finalize</FONT></TT> methods
called synchronously. This method simply calls the <TT><FONT FACE="Courier">runFinalization</FONT></TT>
method in the <TT><FONT FACE="Courier">Runtime</FONT></TT> class.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">setProperties</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">System</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static void setProperties(Properties
props)</FONT></TT>
</BLOCKQUOTE>
<P>
This method sets the system properties to the specified properties.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">props</FONT> specifies the new properties to be set.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">setSecurityManager</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">System</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static void setSecurityManager(SecurityManager
s)</FONT></TT>
</BLOCKQUOTE>
<P>
This method sets the security manager to the specified security
manager. Note that the security manager can be set only once for
a Java program.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the new security manager to be set.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the security manager already has been set.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><A NAME="Thread"><IMG SRC="class.gif"></A></TD><TD WIDTH=499>
<H2><FONT SIZE=5 COLOR=#FF0000>Thread</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="implem.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">Runnable</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
See also: <TT><FONT FACE="Courier">ThreadGroup</FONT></TT>
<P>
This class provides the overhead necessary to manage a single
thread of execution within a process. The <TT><FONT FACE="Courier">Thread</FONT></TT>
class is the basis for multithreaded programming in Java. The
definition for the <TT><FONT FACE="Courier">Thread</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.Thread extends
java.lang.Object<BR>
&nbsp;&nbsp;implements java.lang.Runnable {<BR>
&nbsp;&nbsp;// Member Constants<BR>
&nbsp;&nbsp;public final static int MAX_PRIORITY;<BR>
&nbsp;&nbsp;public final static int MIN_PRIORITY;<BR>
&nbsp;&nbsp;public final static int NORM_PRIORITY;<BR>
<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public Thread();<BR>
&nbsp;&nbsp;public Thread(Runnable target);<BR>
&nbsp;&nbsp;public Thread(Runnable target, String name);<BR>
&nbsp;&nbsp;public Thread(String name);<BR>
&nbsp;&nbsp;public Thread(ThreadGroup group, Runnable target);
<BR>
&nbsp;&nbsp;public Thread(ThreadGroup group, Runnable target,
String name);<BR>
&nbsp;&nbsp;public Thread(ThreadGroup group, String name);<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public static int activeCount();<BR>
&nbsp;&nbsp;public void checkAccess();<BR>
&nbsp;&nbsp;public int countStackFrames();<BR>
&nbsp;&nbsp;public static Thread currentThread();<BR>
&nbsp;&nbsp;public void destroy();<BR>
&nbsp;&nbsp;public static void dumpStack();<BR>
&nbsp;&nbsp;public static int enumerate(Thread list[]);<BR>
&nbsp;&nbsp;public final String getName();<BR>
&nbsp;&nbsp;public final int getPriority();<BR>
&nbsp;&nbsp;public final ThreadGroup getThreadGroup();<BR>
&nbsp;&nbsp;public void interrupt();<BR>
&nbsp;&nbsp;public static boolean interrupted();<BR>
&nbsp;&nbsp;public final boolean isAlive();<BR>
&nbsp;&nbsp;public final boolean isDaemon();<BR>
&nbsp;&nbsp;public boolean isInterrupted();<BR>
&nbsp;&nbsp;public final void join();<BR>
&nbsp;&nbsp;public final void&nbsp;&nbsp;join(long timeout);<BR>
&nbsp;&nbsp;public final void join(long timeout, int nanos);<BR>
&nbsp;&nbsp;public final void resume();<BR>
&nbsp;&nbsp;public void run();<BR>
&nbsp;&nbsp;public final void setDaemon(boolean daemon);<BR>
&nbsp;&nbsp;public final void setName(String name);<BR>
&nbsp;&nbsp;public final void setPriority(int newPriority);<BR>
&nbsp;&nbsp;public static void sleep(long millis);<BR>
&nbsp;&nbsp;public static void sleep(long millis, int nanos);
<BR>
&nbsp;&nbsp;public void start();<BR>
&nbsp;&nbsp;public final void stop();<BR>
&nbsp;&nbsp;public final void&nbsp;&nbsp;stop(Throwable obj);
<BR>
&nbsp;&nbsp;public final void suspend();<BR>
&nbsp;&nbsp;public String toString();<BR>
&nbsp;&nbsp;public static void yield();<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=595><H4>Member Constants</H4>
</TD></TR>
</TABLE></CENTER>
<H5></H5>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final static int MAX_PRIORITY</FONT></TT>
</BLOCKQUOTE>
<P>
This is a constant representing the maximum priority a thread
can have, which is set to <TT><FONT FACE="Courier">10</FONT></TT>.
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final static int MIN_PRIORITY</FONT></TT>
</BLOCKQUOTE>
<P>
This is a constant representing the minimum priority a thread
can have, which is set to <TT><FONT FACE="Courier">1</FONT></TT>.
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final static int NORM_PRIORITY</FONT></TT>
</BLOCKQUOTE>
<P>
This is a constant representing the normal (default) priority
for a thread, which is set to <TT><FONT FACE="Courier">5</FONT></TT>.<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Thread()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default thread. Note that threads created
with this constructor must have overridden their <TT><FONT FACE="Courier">run</FONT></TT>
method to actually do anything.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Thread(Runnable target)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a thread that uses the <TT><FONT FACE="Courier">run</FONT></TT>
method of the specified runnable.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">target</FONT> is the object with the <TT><FONT FACE="Courier">run</FONT></TT> method used by the thread.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Thread(ThreadGroup group, Runnable
target)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a thread belonging to the specified thread
group that uses the <TT><FONT FACE="Courier">run</FONT></TT> method
of the specified runnable.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">group</FONT> is the thread group of which the thread is to be a member.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%></TD><TD ><TT><FONT FACE="Courier">target</FONT></TT> is the object with the <TT><FONT FACE="Courier">run</FONT></TT> method used by the thread.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Thread(String name)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a thread with the specified name.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">name</FONT> is the name of the new thread.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Thread(ThreadGroup group, String
name)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a thread belonging to the specified thread
group with the specified name.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">group</FONT> is the thread group of which the thread is to be a member.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">name</FONT> is the name of the new thread.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Thread(Runnable target, String
name)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a thread with the specified name that
uses the <TT><FONT FACE="Courier">run</FONT></TT> method of the
specified runnable.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">target</FONT> is the object with the <TT><FONT FACE="Courier">run</FONT></TT> method used by the thread.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">name</FONT> is the name of the new thread.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Thread(ThreadGroup group, Runnable
target, String name)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a thread belonging to the specified thread
group with the specified name that uses the <TT><FONT FACE="Courier">run</FONT></TT>
method of the specified runnable.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">group</FONT> is the thread group of which the thread is to be a member.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">target</FONT> is the object with the <TT><FONT FACE="Courier">run</FONT></TT> method used by the thread.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">name</FONT> is the name of the new thread.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">activeCount</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static int activeCount()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the number of active threads in this thread's
thread group.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The number of active threads in this thread's thread group.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">checkAccess</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void checkAccess()</FONT></TT>
</BLOCKQUOTE>
<P>
This method checks to see whether the currently running thread
is allowed access to this thread.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">SecurityException</FONT> if the calling thread doesn't have access to this thread.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">countStackFrames</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int countStackFrames()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the number of stack frames in this thread.
Note that the thread must be suspended in order to use this method.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The number of stack frames in this thread.</TD>
</TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IllegalThreadStateException</FONT> if the thread is not suspended.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">currentThread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static Thread currentThread()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the currently running thread.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The currently running thread.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">destroy</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void destroy()</FONT></TT>
</BLOCKQUOTE>
<P>
This method destroys this thread without performing any cleanup,
meaning that any monitors locked by the thread remain locked.
Note that this method should be used only as a last resort for
destroying a thread.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">dumpStack</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static void dumpStack()</FONT></TT>
</BLOCKQUOTE>
<P>
This method prints a stack trace for this thread. Note that this
method is useful only for debugging.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">enumerate</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static int enumerate(Thread list[])</FONT></TT>
</BLOCKQUOTE>
<P>
This method fills the specified array with references to every
active thread in this thread's thread group.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">list</FONT> is an array to hold the enumerated threads.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The number of threads added to the array.</TD>
</TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">getName</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final String getName()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the name of this thread.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The name of this thread.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">getPriority</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final int getPriority()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the priority of this thread.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The priority of this thread.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">getThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final ThreadGroup getThreadGroup()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the thread group for this thread.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The thread group for this thread.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">interrupt</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void interrupt()</FONT></TT>
</BLOCKQUOTE>
<P>
This method interrupts this thread.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">interrupted</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static boolean interrupted()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether this thread has been interrupted.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">TRUE</FONT> if the thread has been interrupted; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">isAlive</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final boolean isAlive()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether this thread is active. An active
thread is a thread that has been started and has not yet stopped.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">TRUE</FONT> if the thread is alive; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">isDaemon</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final boolean isDaemon()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether this thread is a daemon thread.
A daemon thread is a background thread that is owned by the runtime
system rather than a specific process.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">TRUE</FONT> if the thread is a daemon thread; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">isInterrupted</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public boolean isInterrupted()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether this thread has been interrupted.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">TRUE</FONT> if the thread has been interrupted; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">join</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void join() throws InterruptedException</FONT></TT>
</BLOCKQUOTE>
<P>
This method causes the current thread to wait indefinitely until
it dies.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">InterruptedException</FONT> if another thread has interrupted this thread.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">join</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void join(long timeout)
throws InterruptedException</FONT></TT>
</BLOCKQUOTE>
<P>
This method causes the current thread to wait until it dies, or
until the specified timeout period has elapsed.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">timeout</FONT> is the maximum timeout period to wait, in milliseconds.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">InterruptedException</FONT> if another thread has interrupted this thread.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">join</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void join(long timeout,
int nanos) throws InterruptedException</FONT></TT>
</BLOCKQUOTE>
<P>
This method causes the current thread to wait until it dies, or
until the specified timeout period has elapsed. The timeout period,
in this case, is the addition of the <TT><FONT FACE="Courier">timeout</FONT></TT>
and <TT><FONT FACE="Courier">nanos</FONT></TT> parameters, which
provide finer control over the timeout period.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">timeout</FONT> is the maximum timeout period to wait, in milliseconds.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">nanos</FONT> is the additional time for the timeout period, in nanoseconds.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">InterruptedException</FONT> if another thread has interrupted this thread.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">resume</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void resume()</FONT></TT>
</BLOCKQUOTE>
<P>
This method resumes this thread's execution if it has been suspended.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread doesn't have access to this thread.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">run</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void run()</FONT></TT>
</BLOCKQUOTE>
<P>
This method is the body of the thread, which performs the actual
work of the thread. The <TT><FONT FACE="Courier">run</FONT></TT>
method is called when the thread is started. The <TT><FONT FACE="Courier">run</FONT></TT>
method is overridden in a derived <TT><FONT FACE="Courier">Thread</FONT></TT>
class or implemented in a class implementing the <TT><FONT FACE="Courier">Runnable</FONT></TT>
interface.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">setDaemon</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void setDaemon(boolean daemon)</FONT></TT>
</BLOCKQUOTE>
<P>
This method sets this thread as a daemon thread or a user thread
based on the specified Boolean value. Note that the thread must
be inactive in order to use this method.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">daemon</FONT> is a Boolean value that determines whether the thread is a daemon thread.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IllegalThreadStateException</FONT> if the thread is active.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">setName</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void setName(String name)</FONT></TT>
</BLOCKQUOTE>
<P>
This method sets the name of this thread.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">name</FONT> is the new name of the thread.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread doesn't have access to this thread.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">setPriority</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void setPriority(int newPriority)</FONT></TT>
</BLOCKQUOTE>
<P>
This method sets the priority of this thread.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">newPriority</FONT> is the new priority of the thread.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">IllegalArgumentException</FONT> if the priority is not within the range <TT><FONT FACE="Courier">MIN_PRIORITY</FONT></TT> to <TT><FONT FACE="Courier">MAX_PRIORITY</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread doesn't have access to this thread.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">sleep</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static void sleep(long millis)
throws InterruptedException</FONT></TT>
</BLOCKQUOTE>
<P>
This method causes the current thread to sleep for the specified
length of time, in milliseconds.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">millis</FONT> is the length of time to sleep, in milliseconds.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">InterruptedException</FONT> if another thread has interrupted this thread.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">sleep</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static void sleep(long millis,
int nanos) throws InterruptedException</FONT></TT>
</BLOCKQUOTE>
<P>
This method causes the current thread to sleep for the specified
length of time. The length of time, in this case, is the addition
of the <TT><FONT FACE="Courier">millis</FONT></TT> and <TT><FONT FACE="Courier">nanos</FONT></TT>
parameters, which provide finer control over the sleep time.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">millis</FONT> is the length of time to sleep, in milliseconds.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">nanos</FONT> is the additional time for the sleep time, in nanoseconds.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">InterruptedException</FONT> if another thread has interrupted this thread.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">start</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void start()</FONT></TT>
</BLOCKQUOTE>
<P>
This method starts this thread, causing the <TT><FONT FACE="Courier">run</FONT></TT>
method to be executed.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IllegalThreadStateException</FONT> if the thread already was running.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">stop</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void stop()</FONT></TT>
</BLOCKQUOTE>
<P>
This method abnormally stops this thread, causing it to throw
a <TT><FONT FACE="Courier">ThreadDeath</FONT></TT> object. You
can catch the <TT><FONT FACE="Courier">ThreadDeath</FONT></TT>
object to perform cleanup, but there is rarely a need to do so.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread doesn't have access to this thread.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">stop</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final synchronized void stop(Throwable
obj)</FONT></TT>
</BLOCKQUOTE>
<P>
This method abnormally stops this thread, causing it to throw
the specified object. Note that this version of <TT><FONT FACE="Courier">stop</FONT></TT>
should be used only in very rare situations.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">obj</FONT> is the object to be thrown.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread doesn't have access to this thread.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">suspend</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void suspend()</FONT></TT>
</BLOCKQUOTE>
<P>
This method suspends the execution of this thread.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread doesn't have access to this thread.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">toString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String toString()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a string representation of this thread,
which includes the thread's name, priority, and thread group.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A string representation of this thread.</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">toString</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">yield</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Thread</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public static void yield()</FONT></TT>
</BLOCKQUOTE>
<P>
This method causes the currently executing thread to yield so
that other threads can execute.<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499>
<H2><FONT SIZE=5 COLOR=#FF0000>ThreadGroup</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
See also: <TT><FONT FACE="Courier">Thread</FONT></TT>
<P>
This class implements a thread group, which is a set of threads
that can be manipulated as one. Thread groups also can contain
other thread groups, resulting in a thread hierarchy. The definition
for the <TT><FONT FACE="Courier">ThreadGroup</FONT></TT> class
follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.ThreadGroup extends
java.lang.Object {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public ThreadGroup(String name);<BR>
&nbsp;&nbsp;public ThreadGroup(ThreadGroup parent, String name);
<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public int activeCount();<BR>
&nbsp;&nbsp;public int activeGroupCount();<BR>
&nbsp;&nbsp;public final void checkAccess();<BR>
&nbsp;&nbsp;public final void destroy();<BR>
&nbsp;&nbsp;public int enumerate(Thread list[]);<BR>
&nbsp;&nbsp;public int enumerate(Thread list[], boolean recurse);
<BR>
&nbsp;&nbsp;public int enumerate(ThreadGroup list[]);<BR>
&nbsp;&nbsp;public int enumerate(ThreadGroup list[], boolean recurse);
<BR>
&nbsp;&nbsp;public final int getMaxPriority();<BR>
&nbsp;&nbsp;public final String getName();<BR>
&nbsp;&nbsp;public final ThreadGroup getParent();<BR>
&nbsp;&nbsp;public final boolean isDaemon();<BR>
&nbsp;&nbsp;public void list();<BR>
&nbsp;&nbsp;public final boolean parentOf(ThreadGroup g);<BR>
&nbsp;&nbsp;public final void resume();<BR>
&nbsp;&nbsp;public final void setDaemon(boolean daemon);<BR>
&nbsp;&nbsp;public final void&nbsp;&nbsp;setMaxPriority(int pri);
<BR>
&nbsp;&nbsp;public final synchronized void stop();<BR>
&nbsp;&nbsp;public final synchronized void suspend();<BR>
&nbsp;&nbsp;public String toString();<BR>
&nbsp;&nbsp;public void uncaughtException(Thread t, Throwable
e);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">ThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public ThreadGroup(String name)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a thread group with the specified name.
The newly created thread group belongs to the thread group of
the current thread.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">name</FONT> is the name of the new thread group.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">ThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public ThreadGroup(ThreadGroup parent,
String name)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a thread group with the specified name
that belongs to the specified parent thread group.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">parent</FONT> is the parent thread group.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">name</FONT> is the name of the new thread group.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">NullPointerException</FONT> if the specified thread group is <TT><FONT FACE="Courier">NULL</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread cannot create a thread in the specified thread group.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">activeCount</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int activeCount()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the number of active threads in this thread
group or in any other thread group that has this thread group
as an ancestor.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The number of active threads in this thread group or in any other thread group that has this thread group as an ancestor.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">activeGroupCount</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int activeGroupCount()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the number of active thread groups that
have this thread group as an ancestor.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The number of active thread groups that have this thread group as an ancestor.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">checkAccess</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void checkAccess()</FONT></TT>
</BLOCKQUOTE>
<P>
This method checks to see whether the currently running thread
is allowed access to this thread group.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">SecurityException</FONT> if the calling thread doesn't have access to this thread group.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">destroy</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void destroy()</FONT></TT>
</BLOCKQUOTE>
<P>
This method destroys this thread group and all its subgroups.
Note that the thread group must be empty, meaning that all threads
that belonged to the group have since stopped.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IllegalThreadStateException</FONT> if the thread group is not empty or if it already was destroyed.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the calling thread doesn't have access to this thread group.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">enumerate</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int enumerate(Thread list[])</FONT></TT>
</BLOCKQUOTE>
<P>
This method fills the specified array with references to every
active thread in this thread group.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">list</FONT> is an array to hold the enumerated threads.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The number of threads added to the array.</TD>
</TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">enumerate</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int enumerate(Thread list[], boolean
recurse)</FONT></TT>
</BLOCKQUOTE>
<P>
This method fills the specified array with references to every
active thread in this thread group. If the <TT><FONT FACE="Courier">recurse</FONT></TT>
parameter is set to <TT><FONT FACE="Courier">TRUE</FONT></TT>,
all the active threads belonging to subgroups of this thread also
are added to the array.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">list</FONT> is an array to hold the enumerated threads.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">recurse</FONT> is a Boolean value specifying whether to recursively enumerate active threads in subgroups.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The number of threads added to the array.</TD>
</TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">enumerate</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int enumerate(ThreadGroup list[])</FONT></TT>
</BLOCKQUOTE>
<P>
This method fills the specified array with references to every
active subgroup in this thread group.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">list</FONT> is an array to hold the enumerated thread groups.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The number of thread groups added to the array.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">enumerate</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public int enumerate(ThreadGroup list[],
boolean recurse)</FONT></TT>
</BLOCKQUOTE>
<P>
This method fills the specified array with references to every
active subgroup in this thread group. If the <TT><FONT FACE="Courier">recurse</FONT></TT>
parameter is set to <TT><FONT FACE="Courier">TRUE</FONT></TT>,
all the active thread groups belonging to subgroups of this thread
also are added to the array.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">list</FONT> is an array to hold the enumerated thread groups.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">recurse</FONT> is a Boolean value specifying whether to recursively enumerate active thread groups in subgroups.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD >The number of thread groups added to the array.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">getMaxPriority</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final int getMaxPriority()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the maximum priority of this thread group.
Note that threads in this thread group cannot have a higher priority
than the maximum priority.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The maximum priority of this thread group.</TD>
</TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">getName</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final String getName()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the name of this thread group.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The name of this thread group.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">getParent</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final ThreadGroup getParent()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the parent of this thread group.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The parent of this thread group.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">isDaemon</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final boolean isDaemon()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines whether this thread group is a daemon thread
group. A daemon thread group is destroyed automatically when all
its threads finish executing.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">TRUE</FONT> if the thread group is a daemon thread group; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">list</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void list()</FONT></TT>
</BLOCKQUOTE>
<P>
This method prints information about this thread group to standard
output, including the active threads in the group. Note that this
method is useful only for debugging.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">parentOf</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final boolean parentOf(ThreadGroup
g)</FONT></TT>
</BLOCKQUOTE>
<P>
This method checks to see whether this thread group is a parent
or ancestor of the specified thread group.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">g</FONT> is the thread group to be checked.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">TRUE</FONT> if this thread group is the parent or ancestor of the specified thread group; otherwise, returns <TT><FONT FACE="Courier">FALSE</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">resume</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void resume()</FONT></TT>
</BLOCKQUOTE>
<P>
This method resumes execution of all the threads in this thread
group that have been suspended.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread doesn't have access to this thread group or any of its threads.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">setDaemon</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void setDaemon(boolean daemon)</FONT></TT>
</BLOCKQUOTE>
<P>
This method sets this thread group as a daemon thread group or
a user thread group based on the specified Boolean value. A daemon
thread group is destroyed automatically when all its threads finish
executing.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">daemon</FONT> is a Boolean value that determines whether the thread group is a daemon thread group.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread doesn't have access to this thread group.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">setMaxPriority</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final void setMaxPriority(int
pri)</FONT></TT>
</BLOCKQUOTE>
<P>
This method sets the maximum priority of this thread group.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">pri</FONT> is the new maximum priority of the thread group.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread doesn't have access to this thread group.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">stop</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final synchronized void stop()</FONT></TT>
</BLOCKQUOTE>
<P>
This method stops all the threads in this thread group and in
all its subgroups.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread doesn't have access to this thread group, any of its threads, or threads in subgroups.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">suspend</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public final synchronized void suspend()</FONT></TT>
</BLOCKQUOTE>
<P>
This method suspends all the threads in this thread group and
in all its subgroups.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="throws.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">SecurityException</FONT> if the current thread doesn't have access to this thread group, any of its threads, or threads in subgroups.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">toString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String toString()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a string representation of this thread
group.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A string representation of this thread group.</TD>
</TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">toString</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">uncaughtException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ThreadGroup</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif">-</H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void uncaughtException(Thread
t, Throwable e)</FONT></TT>
</BLOCKQUOTE>
<P>
This method is called when a thread in this thread group exits
because of an uncaught exception. You can override this method
to provide specific handling of uncaught exceptions.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">t</FONT> is the thread that is exiting.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">e</FONT> is the uncaught exception.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="class.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>Throwable</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Object</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This class provides the core functionality for signaling when
exceptional conditions occur. All errors and exceptions in the
Java system are derived from <TT><FONT FACE="Courier">Throwable</FONT></TT>.
The <TT><FONT FACE="Courier">Throwable</FONT></TT> class contains
a snapshot of the execution stack for helping to track down why
exceptional conditions occur. The definition for the <TT><FONT FACE="Courier">Throwable</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.Throwable extends
java.lang.Object {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public Throwable();<BR>
&nbsp;&nbsp;public Throwable(String message);<BR>
<BR>
&nbsp;&nbsp;// Methods<BR>
&nbsp;&nbsp;public Throwable fillInStackTrace();<BR>
&nbsp;&nbsp;public String getMessage();<BR>
&nbsp;&nbsp;public void printStackTrace();<BR>
&nbsp;&nbsp;public void printStackTrace(PrintStream s);<BR>
&nbsp;&nbsp;public String toString();<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">Throwable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Throwable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Throwable()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default throwable with no detail message;
the stack trace is filled in automatically.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">Throwable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Throwable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Throwable(String message)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a throwable with the specified detail
message; the stack trace is filled in automatically.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">message</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">fillInStackTrace</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Throwable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Throwable fillInStackTrace()</FONT></TT>
</BLOCKQUOTE>
<P>
This method fills in the execution stack trace. Note that this
method is useful only when rethrowing this throwable.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >This throwable.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">getMessage</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Throwable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String getMessage()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines the detail message of this throwable.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >The detail message of this throwable.</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">printStackTrace</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Throwable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void printStackTrace()</FONT></TT>
</BLOCKQUOTE>
<P>
This method prints this throwable and its stack trace to the standard
error stream.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">printStackTrace</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Throwable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public void printStackTrace(PrintStream
s)</FONT></TT>
</BLOCKQUOTE>
<P>
This method prints this throwable and its stack trace to the specified
print stream.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the print stream to which the stack will be printed.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="method.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">toString</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Throwable</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public String toString()</FONT></TT>
</BLOCKQUOTE>
<P>
This method determines a string representation of this throwable.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="returns.gif"></FONT></TT></TD>
<TD >A string representation of this throwable.</TD>
</TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><P>
<TT><FONT FACE="Courier"><IMG SRC="overr.gif"></FONT></TT>
</TD><TD ><FONT FACE="Courier">toString</FONT> in class <TT><FONT FACE="Courier">Object</FONT></TT>.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="Except.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>ArithmeticException</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">RuntimeException</FONT></TD>
</TR>
</TABLE></CENTER>
<P>
<P>
This exception class signals that an exceptional arithmetic condition
has occurred, such as a division by zero. The definition for the
<TT><FONT FACE="Courier">ArithmeticException</FONT></TT> class
follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.ArithmeticException
<BR>
&nbsp;&nbsp;extends java.lang.RuntimeException {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public ArithmeticException();<BR>
&nbsp;&nbsp;public ArithmeticException(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">ArithmeticException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ArithmeticException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public ArithmeticException()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default arithmetic exception with no
detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">ArithmeticException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ArithmeticException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public ArithmeticException(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates an arithmetic exception with the specified
detail message, which contains information specific to this particular
exception.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="Except.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>ArrayIndexOutOfBoundsException</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IndexOutOfBoundsException</FONT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
This exception class signals that an invalid array index has been
used. The definition for the <TT><FONT FACE="Courier">ArrayIndexOutOfBoundsException</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.ArrayIndexOutOfBoundsException
<BR>
&nbsp;&nbsp;extends java.lang.IndexOutOfBoundsException {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public ArrayIndexOutOfBoundsException();<BR>
&nbsp;&nbsp;public ArrayIndexOutOfBoundsException(int index);
<BR>
&nbsp;&nbsp;public ArrayIndexOutOfBoundsException(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">ArrayIndexOutOfBoundsException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ArrayIndexOutOfBoundsException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public ArrayIndexOutOfBoundsException()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default array-index-out-of-bounds exception
with no detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<P>
<B><IMG SRC="const.gif"></B></TD><TD ><TT><B><FONT FACE="Courier">ArrayIndexOutOfBoundsException</FONT></B></TT>
</TD><TD WIDTH=8%><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></TD>
<TD WIDTH=20%><TT><B><FONT FACE="Courier">ArrayIndexOutOfBoundsException</FONT></B></TT>
</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public ArrayIndexOutOfBoundsException(int
index)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates an array-index-out-of-bounds exception
with the specified invalid index.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">index</FONT> is the invalid index that caused the error.
</TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">ArrayIndexOutOfBoundsException</FONT></TT></H4>

</TD><TD WIDTH=8%><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></TD>
<TD WIDTH=20%><TT><B><FONT FACE="Courier">ArrayIndexOutOfBoundsException</FONT></B></TT>
</TD><TD WIDTH=8%><B><IMG SRC="lang.gif"></B></TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public ArrayIndexOutOfBoundsException(String
s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates an array-index-out-of-bounds exception
with the specified detail message, which contains information
specific to this particular exception.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%>1-2-4</TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>ArrayStoreException</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">RuntimeException</FONT></TD>
</TR>
</TABLE></CENTER>
<P>
<P>
This exception class signals that an attempt has been made to
store the wrong type of object in an array of objects. The definition
for the <TT><FONT FACE="Courier">ArrayStoreException</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.ArrayStoreException
<BR>
&nbsp;&nbsp;extends java.lang.RuntimeException {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public ArrayStoreException();<BR>
&nbsp;&nbsp;public ArrayStoreException(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">ArrayStoreException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ArrayStoreException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public ArrayStoreException()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default array-store exception with
no detail message.<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">ArrayStoreException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif">-</H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ArrayStoreException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public ArrayStoreException(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates an array-store exception with the specified
detail message, which contains information specific to this particular
exception.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="Except.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>ClassCastException</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">RuntimeException</FONT></TD>
</TR>
</TABLE></CENTER>
<P>
<P>
This exception class signals that an invalid cast has occurred.
The definition for the <TT><FONT FACE="Courier">ClassCastException</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.ClassCastException
<BR>
&nbsp;&nbsp;extends java.lang.RuntimeException {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public ClassCastException();<BR>
&nbsp;&nbsp;public ClassCastException(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">ClassCastException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ClassCastException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public ClassCastException()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default class-cast exception with no
detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">ClassCastException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ClassCastException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public ClassCastException(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a class-cast exception with the specified
detail message, which contains information specific to this particular
exception.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="Except.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>ClassNotFoundException</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Exception</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This exception class signals that a class could not be found.
The definition for the <TT><FONT FACE="Courier">ClassNotFoundException</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.ClassNotFoundException
extends java.lang.Exception {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public ClassNotFoundException();<BR>
&nbsp;&nbsp;public ClassNotFoundException(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">ClassNotFoundException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ClassNotFoundException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public ClassNotFoundException()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default class-not-found exception with
no detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">ClassNotFoundException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ClassNotFoundException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public ClassNotFoundException(String
s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a class-not-found exception with the
specified detail message, which contains information specific
to this particular exception.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="Except.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>CloneNotSupportedException</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Exception</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This exception class signals that an attempt has been made to
clone an object that doesn't support the <TT><FONT FACE="Courier">Cloneable</FONT></TT>
interface. The definition for the <TT><FONT FACE="Courier">CloneNotSupportedException</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.CloneNotSupportedException
<BR>
&nbsp;&nbsp;extends java.lang.Exception {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public CloneNotSupportedException();<BR>
&nbsp;&nbsp;public CloneNotSupportedException(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">CloneNotSupportedException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">CloneNotSupportedException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public CloneNotSupportedException()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default clone-not-supported exception
with no detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">CloneNotSupportedException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">CloneNotSupportedException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public CloneNotSupportedException(String
s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a clone-not-supported exception with
the specified detail message, which contains information specific
to this particular exception.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="Except.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>Exception</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Throwable</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This throwable class indicates exceptional conditions that a Java
program might want to know about. The definition for the <TT><FONT FACE="Courier">Exception</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.Exception extends
java.lang.Throwable {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public Exception();<BR>
&nbsp;&nbsp;public Exception(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">Exception</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Exception</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Exception()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default exception with no detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">Exception</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Exception</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Exception(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates an exception with the specified detail
message, which contains information specific to the exception.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="Except.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>IllegalAccessException</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Exception</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This exception class signals that the current thread doesn't have
access to a class. The definition for the <TT><FONT FACE="Courier">IllegalAccessException</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.IllegalAccessException
extends java.lang.Exception {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public IllegalAccessException();<BR>
&nbsp;&nbsp;public IllegalAccessException(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">IllegalAccessException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IllegalAccessException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public IllegalAccessException()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default illegal-access exception with
no detail message.<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">IllegalAccessException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IllegalAccessException</FONT></TT></H4>

</TD><TD WIDTH=104><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<H4></H4>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public IllegalAccessException(String
s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates an illegal-access exception with the
specified detail message, which contains information specific
to this particular exception.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="Except.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>IllegalArgumentException</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">RuntimeException</FONT></TD>
</TR>
</TABLE></CENTER>
<P>
<P>
This exception class signals that a method has been passed an
illegal argument. The definition for the <TT><FONT FACE="Courier">IllegalArgumentException</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.IllegalArgumentException
<BR>
&nbsp;&nbsp;extends java.lang.RuntimeException {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public IllegalArgumentException();<BR>
&nbsp;&nbsp;public IllegalArgumentException(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">IllegalArgumentException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IllegalArgumentException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public IllegalArgumentException()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default illegal-argument exception
with no detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">IllegalArgumentException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IllegalArgumentException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public IllegalArgumentException(String
s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates an illegal-argument exception with the
specified detail message, which contains information specific
to this particular exception.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="Except.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>IllegalMonitorStateException</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">RuntimeException</FONT></TD>
</TR>
</TABLE></CENTER>
<P>
<P>
This exception class signals that a thread has attempted to access
an object's monitor without owning the monitor. The definition
for the <TT><FONT FACE="Courier">IllegalMonitorStateException</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.IllegalMonitorStateException
<BR>
&nbsp;&nbsp;extends java.lang.RuntimeException {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public IllegalMonitorStateException();<BR>
&nbsp;&nbsp;public IllegalMonitorStateException(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">IllegalMonitorStateException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IllegalMonitorStateException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public IllegalMonitorStateException()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default illegal-monitor-state exception
with no detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">IllegalMonitorStateException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IllegalMonitorStateException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public IllegalMonitorStateException(String
s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates an illegal-monitor-state exception with
the specified detail message, which contains information specific
to this particular exception.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="Except.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>IllegalThreadStateException</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IllegalArgumentException</FONT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
This exception class signals that a thread is not in the proper
state for the requested operation. The definition for the <TT><FONT FACE="Courier">IllegalThreadStateException</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.IllegalThreadStateException
<BR>
&nbsp;&nbsp;extends java.lang.IllegalArgumentException {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public IllegalThreadStateException();<BR>
&nbsp;&nbsp;public IllegalThreadStateException(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">IllegalThreadStateException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IllegalThreadStateException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public IllegalThreadStateException()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default illegal-thread-state exception
with no detail message.<P>
<TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">IllegalThreadStateException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IllegalThreadStateException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public IllegalThreadStateException(String
s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates an illegal-thread-state exception with
the specified detail message, which contains information specific
to this particular exception.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="Except.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>IndexOutOfBoundsException</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">RuntimeException</FONT></TD>
</TR>
</TABLE></CENTER>
<P>
<P>
This exception class signals that an index of some sort is out
of bounds. The definition for the <TT><FONT FACE="Courier">IndexOutOfBoundsException</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.IndexOutOfBoundsException
<BR>
&nbsp;&nbsp;extends java.lang.RuntimeException {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public IndexOutOfBoundsException();<BR>
&nbsp;&nbsp;public IndexOutOfBoundsException(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">IndexOutOfBoundsException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IndexOutOfBoundsException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public IndexOutOfBoundsException()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default index-out-of-bounds exception
with no detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">IndexOutOfBoundsException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IndexOutOfBoundsException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public IndexOutOfBoundsException(String
s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates an index-out-of-bounds exception with
the specified detail message, which contains information specific
to this particular exception.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="Except.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>InstantiationException</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Exception</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This exception class signals that an attempt has been made to
instantiate an abstract class or an interface. The definition
for the <TT><FONT FACE="Courier">InstantiationException</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.InstantiationException
extends java.lang.Exception {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public InstantiationException();<BR>
&nbsp;&nbsp;public InstantiationException(String s);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">InstantiationException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">InstantiationException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public InstantiationException()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default instantiation exception with
no detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">InstantiationException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">InstantiationException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public InstantiationException(String
s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates an instantiation exception with the specified
detail message, which contains information specific to this particular
exception.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="Except.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>InterruptedException</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Exception</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This exception class signals that a thread has been interrupted
that already is waiting or sleeping. The definition for the <TT><FONT FACE="Courier">InterruptedException</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.InterruptedException
extends java.lang.Exception {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public InterruptedException();<BR>
&nbsp;&nbsp;public InterruptedException(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">InterruptedException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">InterruptedException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public InterruptedException()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default interrupted exception with
no detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">InterruptedException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">InterruptedException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public InterruptedException(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates an interrupted exception with the specified
detail message, which contains information specific to this particular
exception.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="Except.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>NegativeArraySizeException</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">RuntimeException</FONT></TD>
</TR>
</TABLE></CENTER>
<P>
<P>
This exception class signals that an attempt has been made to
create an array with a negative size. The definition for the <TT><FONT FACE="Courier">NegativeArraySizeException</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.NegativeArraySizeException
<BR>
&nbsp;&nbsp;extends java.lang.RuntimeException {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public NegativeArraySizeException();<BR>
&nbsp;&nbsp;public NegativeArraySizeException(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">NegativeArraySizeException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">NegativeArraySizeException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public NegativeArraySizeException()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default negative-array-size exception
with no detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">NegativeArraySizeException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">NegativeArraySizeException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public NegativeArraySizeException(String
s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a negative-array-size exception with
the specified detail message, which contains information specific
to this particular exception.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="Except.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>NullPointerException</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">RuntimeException</FONT></TD>
</TR>
</TABLE></CENTER>
<P>
<P>
This exception class signals an attempt to access a null pointer
as an object. The definition for the <TT><FONT FACE="Courier">NullPointerException</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.NullPointerException
extends java.lang.RuntimeException {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public NullPointerException();<BR>
&nbsp;&nbsp;public NullPointerException(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">NullPointerException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">NullPointerException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public NullPointerException()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default null-pointer exception with
no detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">NullPointerException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">NullPointerException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public NullPointerException(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a null-pointer exception with the specified
detail message, which contains information specific to this particular
exception.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="Except.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>NumberFormatException</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IllegalArgumentException</FONT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
This exception class signals an attempt to convert a string to
an invalid number format. The definition for the <TT><FONT FACE="Courier">NumberFormatException</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.NumberFormatException
extends <BR>
&nbsp;&nbsp;java.lang.IllegalArgumentException {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public NumberFormatException();<BR>
&nbsp;&nbsp;public NumberFormatException(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">NumberFormatException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">NumberFormatException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public NumberFormatException()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default number-format exception with
no detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">NumberFormatException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">NumberFormatException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public NumberFormatException(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a number-format exception with the specified
detail message, which contains information specific to this particular
exception.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="Except.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>RuntimeException</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Exception</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This exception class signals an exceptional condition that can
reasonably occur in the Java runtime system. The definition for
the <TT><FONT FACE="Courier">RuntimeException</FONT></TT> class
follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.RuntimeException
extends java.lang.Exception {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public RuntimeException();<BR>
&nbsp;&nbsp;public RuntimeException(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">RuntimeException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RuntimeException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public RuntimeException()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default runtime exception with no detail
message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">RuntimeException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">RuntimeException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public RuntimeException(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a runtime exception with the specified
detail message, which contains information specific to this particular
exception.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="Except.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>SecurityException</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">RuntimeException</FONT></TD>
</TR>
</TABLE></CENTER>
<P>
<P>
This exception class signals that a security violation has occurred.
The definition for the <TT><FONT FACE="Courier">SecurityException</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.SecurityException
<BR>
&nbsp;&nbsp;extends java.lang.RuntimeException {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public SecurityException();<BR>
&nbsp;&nbsp;public SecurityException(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">SecurityException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public SecurityException()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default security exception with no
detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">SecurityException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">SecurityException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public SecurityException(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a security exception with the specified
detail message, which contains information specific to this particular
exception.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="Except.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>StringIndexOutOfBoundsException</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IndexOutOfBoundsException</FONT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
This exception class signals that an invalid string index has
been used. The definition for the <TT><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.StringIndexOutOfBoundsException
<BR>
&nbsp;&nbsp;extends java.lang.IndexOutOfBoundsException {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public StringIndexOutOfBoundsException();<BR>
&nbsp;&nbsp;public StringIndexOutOfBoundsException(int index);
<BR>
&nbsp;&nbsp;public StringIndexOutOfBoundsException(String s);
<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringIndexOutOfBoundsException()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default string-index-out-of-bounds
exception with no detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringIndexOutOfBoundsException(int
index)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a string-index-out-of-bounds exception
with the specified invalid index.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">index</FONT> is the invalid index that caused the error.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StringIndexOutOfBoundsException</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StringIndexOutOfBoundsException(String
s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a string-index-out-of-bounds exception
with the specified detail message, which contains information
specific to this particular exception.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="error.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>AbstractMethodError</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IncompatibleClassChangeError</FONT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
This error class signals an attempt to call an abstract method.
The definition for the <TT><FONT FACE="Courier">AbstractMethodError</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.AbstractMethodError
<BR>
&nbsp;&nbsp;extends java.lang.IncompatibleClassChangeError {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public AbstractMethodError();<BR>
&nbsp;&nbsp;public AbstractMethodError(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">AbstractMethodError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">AbstractMethodError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public AbstractMethodError()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default abstract-method error with
no detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">AbstractMethodError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">AbstractMethodError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public AbstractMethodError(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates an abstract-method error with the specified
detail message, which contains information specific to this particular
error.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="error.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>ClassFormatError</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">LinkageError</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This error class signals an attempt to read a file in an invalid
format. The definition for the <TT><FONT FACE="Courier">ClassFormatError</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.ClassFormatError
extends java.lang.LinkageError {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public ClassFormatError();<BR>
&nbsp;&nbsp;public ClassFormatError(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">ClassFormatError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ClassFormatError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public ClassFormatError()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default class-format error with no
detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">ClassFormatError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ClassFormatError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public ClassFormatError(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a class-format error with the specified
detail message, which contains information specific to this particular
error.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="error.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>Error</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Throwable</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This throwable class indicates a serious problem beyond the scope
of what a Java program can fix. The definition for the <TT><FONT FACE="Courier">Error</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.Error extends
java.lang.Throwable {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public Error();<BR>
&nbsp;&nbsp;public Error(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">Error</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Error</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Error()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default error with no detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">Error</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">Error</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<H4></H4>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public Error(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates an error with the specified detail message,
which contains information specific to this particular error.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="error.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>IllegalAccessError</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IncompatibleClassChangeError</FONT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
This error class signals an attempt to access a member variable
or call a method without proper access. The definition for the
<TT><FONT FACE="Courier">IllegalAccessError</FONT></TT> class
follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.IllegalAccessError
<BR>
&nbsp;&nbsp;extends java.lang.IncompatibleClassChangeError {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public IllegalAccessError();<BR>
&nbsp;&nbsp;public IllegalAccessError(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">IllegalAccessError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IllegalAccessError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public IllegalAccessError()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default illegal-access error with no
detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">IllegalAccessError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IllegalAccessError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public IllegalAccessError(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates an illegal-access error with the specified
detail message, which contains information specific to this particular
error.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="error.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>IncompatibleClassChangeError</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">LinkageError</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This error class signals that an incompatible change has been
made to some class definition. The definition for the <TT><FONT FACE="Courier">IncompatibleClassChangeError</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.IncompatibleClassChangeError
<BR>
&nbsp;&nbsp;extends java.lang.LinkageError {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public IncompatibleClassChangeError();<BR>
&nbsp;&nbsp;public IncompatibleClassChangeError(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">IncompatibleClassChangeError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IncompatibleClassChangeError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public IncompatibleClassChangeError()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default incompatible-class-change error
with no detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">IncompatibleClassChangeError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="class.gif"></H4>
</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">IncompatibleClassChangeError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public IncompatibleClassChangeError(String
s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates an incompatible-class-change error with
the specified detail message, which contains information specific
to this particular error.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="error.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>InstantiationError</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IncompatibleClassChangeError</FONT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
This error class signals an attempt to instantiate an abstract
class or an interface. The definition for the <TT><FONT FACE="Courier">InstantiationError</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.InstantiationError
<BR>
&nbsp;&nbsp;extends java.lang.IncompatibleClassChangeError {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public InstantiationError();<BR>
&nbsp;&nbsp;public InstantiationError(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">InstantiationError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">InstantiationError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public InstantiationError()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default instantiation error with no
detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">InstantiationError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">InstantiationError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public InstantiationError(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates an instantiation error with the specified
detail message, which contains information specific to this particular
error.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="error.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>InternalError</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">VirtualMachineError</FONT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
This error class signals that some unexpected internal error has
occurred. The definition for the <TT><FONT FACE="Courier">InternalError</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.InternalError
<BR>
&nbsp;&nbsp;extends java.lang.VirtualMachineError {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public InternalError();<BR>
&nbsp;&nbsp;public InternalError(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">InternalError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">InternalError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public InternalError()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default internal error with no detail
message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">InternalError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">InternalError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public InternalError(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates an internal error with the specified
detail message, which contains information specific to this particular
error.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="error.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>LinkageError</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Error</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This error class signals that a class has some dependency on another
class, but that the latter class has incompatibly changed after
the compilation of the former class. The definition for the <TT><FONT FACE="Courier">LinkageError</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.LinkageError extends
java.lang.Error {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public LinkageError();<BR>
&nbsp;&nbsp;public LinkageError(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">LinkageError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">LinkageError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public LinkageError()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default linkage error with no detail
message.<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">LinkageError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">LinkageError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public LinkageError(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a linkage error with the specified detail
message, which contains information specific to this particular
error.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="error.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>NoClassDefFoundError</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">LinkageError</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This error class signals that a class definition could not be
found. The definition for the <TT><FONT FACE="Courier">NoClassDefFoundError</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.NoClassDefFoundError
<BR>
&nbsp;&nbsp;extends java.lang.LinkageError {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public NoClassDefFoundError();<BR>
&nbsp;&nbsp;public NoClassDefFoundError(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">NoClassDefFoundError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">NoClassDefFoundError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public NoClassDefFoundError()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default no-class-definition-found error
with no detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">NoClassDefFoundError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">NoClassDefFoundError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public NoClassDefFoundError(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a no-class-definition-found error with
the specified detail message, which contains information specific
to this particular error.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="error.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>NoSuchFieldError</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IncompatibleClassChangeError</FONT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
This error class signals an attempt to access a member variable
that doesn't exist. The definition for the <TT><FONT FACE="Courier">NoSuchFieldError</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.NoSuchFieldError
<BR>
&nbsp;&nbsp;extends java.lang.IncompatibleClassChangeError {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public NoSuchFieldError();<BR>
&nbsp;&nbsp;public NoSuchFieldError(String s);<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">NoSuchFieldError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">NoSuchFieldError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public NoSuchFieldError()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default no-such-field error with no
detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">NoSuchFieldError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">NoSuchFieldError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public NoSuchFieldError(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a no-such-field error with the specified
detail message, which contains information specific to this particular
error.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="error.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>NoSuchMethodError</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">IncompatibleClassChangeError</FONT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
This error class signals an attempt to call a method that doesn't
exist. The definition for the <TT><FONT FACE="Courier">NoSuchMethodError</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.NoSuchMethodError
<BR>
&nbsp;&nbsp;extends java.lang.IncompatibleClassChangeError {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public NoSuchMethodError();<BR>
&nbsp;&nbsp;public NoSuchMethodError(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">NoSuchMethodError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">NoSuchMethodError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public NoSuchMethodError()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default no-such-method error with no
detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">NoSuchMethodError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">NoSuchMethodError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public NoSuchMethodError(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a no-such-method error with the specified
detail message, which contains information specific to this particular
error.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="error.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>OutOfMemoryError</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">VirtualMachineError</FONT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
This error class signals that the Java runtime system is out of
memory. The definition for the <TT><FONT FACE="Courier">OutOfMemoryError</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.OutOfMemoryError
<BR>
&nbsp;&nbsp;extends java.lang.VirtualMachineError {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public OutOfMemoryError();<BR>
&nbsp;&nbsp;public OutOfMemoryError(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">OutOfMemoryError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">OutOfMemoryError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public OutOfMemoryError()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default out-of-memory error with no
detail message.
<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">OutOfMemoryError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">OutOfMemoryError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public OutOfMemoryError(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates an out-of-memory error with the specified
detail message, which contains information specific to this particular
error.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="error.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>StackOverflowError</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">VirtualMachineError</FONT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
This error class signals that a stack overflow has occurred. The
definition for the <TT><FONT FACE="Courier">StackOverflowError</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.StackOverflowError
<BR>
&nbsp;&nbsp;extends java.lang.VirtualMachineError {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public StackOverflowError();<BR>
&nbsp;&nbsp;public StackOverflowError(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">StackOverflowError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StackOverflowError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StackOverflowError()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default stack-overflow error with no
detail message.<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">StackOverflowError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">StackOverflowError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public StackOverflowError(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a stack-overflow error with the specified
detail message, which contains information specific to this particular
error.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="error.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>ThreadDeath</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Error</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This error class signals that a thread is being stopped abnormally
via the <TT><FONT FACE="Courier">stop</FONT></TT> method. The
definition for the <TT><FONT FACE="Courier">ThreadDeath</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.ThreadDeath extends
java.lang.Error {<BR>
&nbsp;&nbsp;public ThreadDeath();<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">ThreadDeath</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">ThreadDeath</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public ThreadDeath()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default thread death object.<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="error.gif"></TD><TD WIDTH=499>
<H2><FONT SIZE=5 COLOR=#FF0000>UnknownError</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">VirtualMachineError</FONT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
This error class signals that an unknown but serious error has
occurred. The definition for the <TT><FONT FACE="Courier">UnknownError</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.UnknownError extends
java.lang.VirtualMachineError {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public UnknownError();<BR>
&nbsp;&nbsp;public UnknownError(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">UnknownError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">UnknownError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public UnknownError()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default unknown error with no detail
message.<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">UnknownError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">UnknownError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public UnknownError(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates an unknown error with the specified detail
message, which contains information specific to this particular
error.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="error.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>UnsatisfiedLinkError</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">LinkageError</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This error class signals that a native implementation of a method
declared native cannot be found. The definition for the <TT><FONT FACE="Courier">UnsatisfiedLinkError</FONT></TT>
class follows:
<PRE>
public class java.lang.UnsatisfiedLinkError extends java.lang.LinkageError {
&nbsp;&nbsp;// Constructors
&nbsp;&nbsp;public UnsatisfiedLinkError();
&nbsp;&nbsp;public UnsatisfiedLinkError(String s);
}<BR>
</PRE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">UnsatisfiedLinkError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">UnsatisfiedLinkError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public UnsatisfiedLinkError()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default unsatisfied-link error with
no detail message.<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">UnsatisfiedLinkError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">UnsatisfiedLinkError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public UnsatisfiedLinkError(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates an unsatisfied-link error with the specified
detail message, which contains information specific to this particular
error.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="error.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>VerifyError</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">LinkageError</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This error class signals that a class has failed the runtime verification
test. The definition for the <TT><FONT FACE="Courier">VerifyError</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.VerifyError extends
java.lang.LinkageError {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public VerifyError();<BR>
&nbsp;&nbsp;public VerifyError(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">VerifyError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">VerifyError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public VerifyError()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default verify error with no detail
message.<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">VerifyError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">VerifyError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public VerifyError(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a verify error with the specified detail
message, which contains information specific to this particular
error.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=8%><IMG SRC="error.gif"></TD><TD WIDTH=499><H2><FONT SIZE=5 COLOR=#FF0000>VirtualMachineError</FONT></H2>

</TD><TD WIDTH=8%><IMG SRC="lang.gif"></TD></TR>
</TABLE></CENTER>
<P>

<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="extends.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">Error</FONT></TD></TR>
</TABLE></CENTER>
<P>
<P>
This error class signals that the Java virtual machine is broken
or has run out of resources necessary for it to continue operating.
The definition for the <TT><FONT FACE="Courier">VirtualMachineError</FONT></TT>
class follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class java.lang.VirtualMachineError
extends java.lang.Error {<BR>
&nbsp;&nbsp;// Constructors<BR>
&nbsp;&nbsp;public VirtualMachineError();<BR>
&nbsp;&nbsp;public VirtualMachineError(String s);<BR>
}<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">VirtualMachineError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">VirtualMachineError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public VirtualMachineError()</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a default virtual-machine error with
no detail message.<P><TABLE BORDER=1 WIDTH=100%>
<TR VALIGN=TOP><TD COLSPAN=2 WIDTH=4%>
<H4><IMG SRC="const.gif"></H4>
</TD><TD ><H4><TT><FONT FACE="Courier">VirtualMachineError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><TT><FONT FACE="Courier"><IMG SRC="class.gif"></FONT></TT></H4>

</TD><TD WIDTH=20%><H4><TT><FONT FACE="Courier">VirtualMachineError</FONT></TT></H4>

</TD><TD WIDTH=8%><H4><IMG SRC="lang.gif"></H4>
</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public VirtualMachineError(String s)</FONT></TT>
</BLOCKQUOTE>
<P>
This constructor creates a virtual-machine error with the specified
detail message, which contains information specific to this particular
error.
<P><TABLE WIDTH=100%>
<TR VALIGN=TOP><TD WIDTH=4%><TT><FONT FACE="Courier"><IMG SRC="parame.gif"></FONT></TT></TD>
<TD ><FONT FACE="Courier">s</FONT> is the detail message.
</TD></TR>
</TABLE></CENTER>
<P>
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



