<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
<H1><FONT COLOR=#FF0000>Chapter 16</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Using JavaDoc to Document Your
Program</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>

<UL>
<LI><A HREF="#Overview" >Overview</A>
<LI><A HREF="#RunningJavaDoc" >Running JavaDoc</A>
<LI><A HREF="#AddingJavaDocComments" >Adding JavaDoc Comments</A>
<UL>
<LI><A HREF="#DocumentingClasses" >Documenting Classes</A>
<LI><A HREF="#DocumentingMethods" >Documenting Methods</A>
</UL>
<LI><A HREF="#EnhancingYourDocumentationwithHTML" >Enhancing Your Documentation with HTML</A>
<LI><A HREF="#AnExample" >An Example</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
One of the problems that has faced maintenance programmers through
the years has been the horrible documentation left behind by the
original programmers. Usually the original programmers included
comments in the source code but probably didn't comment as thoroughly
as they should have. Then an ambitious project manager recognized
the inadequacy of the inline comments and forced the programmers
to write a lengthy document about the software. This document
was handed over to the maintenance programmers who used it to
continue supporting and enhancing the software. Of course, even
if the maintenance programmers kept the inline comments current,
the other documentation fell out of date because it was just too
hard to maintain. And, besides, the maintenance programmers ask,
&quot;Why should we keep the document up-to-date if we're also
documenting the code?&quot;
<P>
This is, of course, a very good question and one the Java developers
must have asked themselves. Imagine yourself on the Java team.
You've been working long hours writing the hundreds of classes
that comprise Java and then you wake up one morning, hands still
trembling from the previous night's caffeine excesses, and realize,
&quot;Darn! Now we've got to document all that code.&quot; The
solution the Java developers came up with actually made it possible
for them not to write a separate document describing each class,
interface, and method. Instead, they wrote a program that would
extract specially formatted source code comments and create class
documentation from the embedded comments. The tool they developed
to do this is called JavaDoc and is included in the Java Developer's
Kit.
<H2><A NAME="Overview"><FONT SIZE=5 COLOR=#FF0000>Overview</FONT></A>
</H2>
<P>
JavaDoc reads a <TT><FONT FACE="Courier">.java</FONT></TT> file
and creates a set of HTML files that can be read by a Web browser.
As an example, consider the documentation for the <TT><FONT FACE="Courier">Employee</FONT></TT>
class that is shown in Figure 16.1. At the top of the documentation
shown in this figure is an inheritance tree showing that <TT><FONT FACE="Courier">Employee</FONT></TT>
is a subclass of <TT><FONT FACE="Courier">Person</FONT></TT>,
which is a subclass of <TT><FONT FACE="Courier">java.lang.Object</FONT></TT>.
<P>
<A HREF="f16-1.gif" ><B>Figure 16.1 : </B><I>A sample documentation page generated by JavaDoc.</I></A>
<P>
In addition to the class's inheritance tree, Figure 16.1 shows
that an overall class description can be provided as well as a
constructor index. Figure 16.1 shows only one screen of the documentation
that will be created for the <TT><FONT FACE="Courier">Employee</FONT></TT>
class in this chapter. There are many more areas and types of
documentation that can be generated and are described in this
chapter.
<H3><A NAME="RunningJavaDoc">Running JavaDoc</A></H3>
<P>
JavaDoc is a command-line program that is supplied with the Java
Developer's Kit. It can be invoked in the following manner:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">javadoc [options] <I>PackageName</I>
| <I>FileName</I>.java</FONT></TT>
</BLOCKQUOTE>
<P>
For example, to use JavaDoc to create documentation on a class
named <TT><FONT FACE="Courier">Employee</FONT></TT>, you would
do the following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">javadoc employee.java<BR>
</FONT></TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
When specifying a filename, be sure to include the <TT><FONT FACE="Courier">.java</FONT></TT> extension. If you forget to do so, JavaDoc will still produce HTML files as output. However, they will be essentially blank and not based on your <TT><I><FONT FACE="Courier">filename</FONT></I><FONT FACE="Courier">.java</FONT></TT>.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H4>Command-Line Arguments and Environment Variables</H4>
<P>
The <TT><FONT FACE="Courier">[options]</FONT></TT> parameter shown
as part of the JavaDoc command line can be included if desired.
It can be used to specify which directories should be searched
for input files, the directory in which to put the generated HTML
files, and whether JavaDoc should run in a special verbose mode.
These are summarized in Table 16.1.<BR>
<P>
<CENTER><B>Table 16.1. The JavaDoc command-line options.</B></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=161><I>Option</I></TD><TD WIDTH=430><I>Description</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=161><TT><FONT FACE="Courier">-classpath</FONT></TT> <TT><FONT FACE="Courier">path</FONT></TT>
</TD><TD WIDTH=430>Specifies the path to be searched for files ending with the <TT><FONT FACE="Courier">.java</FONT></TT> extension. If specified, it overrides the <TT><FONT FACE="Courier">CLASSPATH</FONT></TT> environment variable.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=161><TT><FONT FACE="Courier">-d</FONT></TT> <TT><FONT FACE="Courier">directory</FONT></TT>
</TD><TD WIDTH=430>Specifies the target directory for writing HTML files.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=161><TT><FONT FACE="Courier">-verbose</FONT></TT>
</TD><TD WIDTH=430>Instructs JavaDoc to run in a special mode that displays additional information as the files are parsed. This option is most useful if you have a class for which the documentation appears incorrect.
</TD></TR>
</TABLE></CENTER>
<P>
<P>
The only environment variable used by JavaDoc is <TT><FONT FACE="Courier">CLASSPATH</FONT></TT>.
This variable, if set in your environment, informs JavaDoc of
the directories in which it should search for <TT><FONT FACE="Courier">.java</FONT></TT>
files. For example, to search the current directory, <TT><FONT FACE="Courier">C:\CAFE\JAVA\SOURCE</FONT></TT>,
and <TT><FONT FACE="Courier">C:\MYJAVA\SOURCE</FONT></TT>, you
would set <TT><FONT FACE="Courier">CLASSPATH</FONT></TT> to the
following:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">.;C:\cafe\java\source;C:\myjava\source</FONT></TT>
</BLOCKQUOTE>
<H2><A NAME="AddingJavaDocComments"><FONT SIZE=5 COLOR=#FF0000>Adding
JavaDoc Comments</FONT></A></H2>
<P>
Unfortunately, JavaDoc is only as smart as the information you
give it. It gets its information by parsing source code files
and looking for comments enclosed within the <TT><FONT FACE="Courier">/**</FONT></TT>
and <TT><FONT FACE="Courier">*/</FONT></TT> delimiters. JavaDoc
comments are placed immediately above the class or member that
they are meant to describe. For example, consider the following
class definition and associated comment:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/** This is a comment that describes
MyClass in general. */<BR>
public class MyClass {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/** The DoSomething method is used to
do something. */<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public int DoSomething() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// method source
goes here<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// remaining class source code<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
In this example, a JavaDoc comment has been placed above the class
and above the <TT><FONT FACE="Courier">DoSomething</FONT></TT>
member method.
<H3><A NAME="DocumentingClasses">Documenting Classes</A></H3>
<P>
When documenting a class (in the comment immediately preceding
the class definition), you can add class documentation tags to
enhance the usability of the documentation. Class documentation
tags each begin with an <TT><FONT FACE="Courier">@</FONT></TT>
symbol to distinguish them. The following class documentation
tags are available:
<P>
<TT><FONT FACE="Courier">@author <I>author-name<BR>
</I>@see <I>classname<BR>
</I>@see <I>fully-qualified-classname<BR>
</I>@see <I>fully-qualified-classname#method-name<BR>
</I>@version <I>version-text</I></FONT></TT>
<P>
As an example of how these tags work, consider the following definitions
of an <TT><FONT FACE="Courier">Employee</FONT></TT> class and
a <TT><FONT FACE="Courier">Contractor</FONT></TT> class:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;&nbsp;* The Employee class is used to represent employees
<BR>
&nbsp;&nbsp;* of our company. It augments the Person class with
<BR>
&nbsp;&nbsp;* information about an employee's salary and job<BR>
&nbsp;&nbsp;* title.<BR>
&nbsp;&nbsp;* @author Mike Cohn<BR>
&nbsp;&nbsp;* @version 1.0.0<BR>
&nbsp;&nbsp;* @see Contractor<BR>
*/<BR>
public class Employee extends Person {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// class body<BR>
}<BR>
<BR>
/**<BR>
&nbsp;&nbsp;* The Contractor class is used to represent<BR>
&nbsp;&nbsp;* contract employees. Contract employees are<BR>
&nbsp;&nbsp;* paid by the hour.<BR>
&nbsp;&nbsp;* @author Mike Cohn<BR>
&nbsp;&nbsp;* @version 1.0.0<BR>
&nbsp;&nbsp;*/<BR>
class Contractor extends Employee {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// class body<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The comment preceding the <TT><FONT FACE="Courier">Employee</FONT></TT>
class describes the class and then shows the use of three of the
class documentation tags. The author and version do not get included
in the generated documentation but are useful to include. The
<TT><FONT FACE="Courier">@see Contractor</FONT></TT> line in the
<TT><FONT FACE="Courier">Employee</FONT></TT> comment will inform
readers that they may want to see a related class. Because the
<TT><FONT FACE="Courier">@see</FONT></TT> tag is used, JavaDoc
will generate a link to the <TT><FONT FACE="Courier">Contractor</FONT></TT>
class documentation. This can be seen in Figure 16.2.
<P>
<A HREF="f16-2.gif" ><B>Figure 16.2 : </B><I>Class documentation for </I>Employee.</A>
<P>
As you can see in Figure 16.2, a link is provided for all superclasses
of <TT><FONT FACE="Courier">Employee</FONT></TT> (<TT><FONT FACE="Courier">java.lang.Object</FONT></TT>
and <TT><FONT FACE="Courier">Person</FONT></TT>) and the <TT><FONT FACE="Courier">@see</FONT></TT>
tag has created a link to <TT><FONT FACE="Courier">Contractor</FONT></TT>
in a See Also section. Following this link will jump directly
to the <TT><FONT FACE="Courier">Contractor</FONT></TT> documentation,
as shown in Figure 16.3. The <TT><FONT FACE="Courier">Contractor</FONT></TT>
documentation does not need a <TT><FONT FACE="Courier">@see</FONT></TT>
tag back to <TT><FONT FACE="Courier">Employee</FONT></TT> because
<TT><FONT FACE="Courier">Employee</FONT></TT> is a superclass
of <TT><FONT FACE="Courier">Contractor</FONT></TT> and already
appears as a link in the inheritance hierarchy.
<P>
<A HREF="f16-3.gif" ><B>Figure 16.3 : </B><I>Class documentation for </I>Contractor.</A>
<P>
The link from <TT><FONT FACE="Courier">Employee</FONT></TT> to
<TT><FONT FACE="Courier">Contractor</FONT></TT> positions your
Web browser at the top of the documentation for the <TT><FONT FACE="Courier">Contractor</FONT></TT>
class. Sometimes you would prefer to have a link jump to a specific
place within the target class. You can link directly to a method
by specifying the name of the method after the target class. For
example, the following tag would jump directly to the <TT><FONT FACE="Courier">GetHourlyRate</FONT></TT>
method in the <TT><FONT FACE="Courier">Contractor</FONT></TT>
class:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">@see Contractor#GetHourlyRate</FONT></TT>
</BLOCKQUOTE>
<H3><A NAME="DocumentingMethods">Documenting Methods</A></H3>
<P>
Like its class documentation tags, JavaDoc also supports method
documentation tags. Method documentation tags are optional and
can be placed in a JavaDoc comment directly above a method. Like
class documentation tags, method tags begin with the <TT><FONT FACE="Courier">@</FONT></TT>
symbol. The following method documentation tags are available:
<P>
<TT><FONT FACE="Courier">@param <I>parameter-name description
<BR>
</I>@return <I>description<BR>
</I>@exception <I>fully-qualified-class-name description</I></FONT></TT>
<P>
To see how these tags can be used, consider the following definition
of the <TT><FONT FACE="Courier">Contractor</FONT></TT> class:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">class Contractor extends Employee {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Contractor(float sal, String fName,
String lName) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(sal, fName,
lName);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private float hourlyRate;<BR>
&nbsp;&nbsp;/**<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* This method can be used to retrieve
the hourly rate<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* paid to the contractor.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* @return The contractor's hourly rate,
excluding<BR>
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exceptional
circumstances such as holidays<BR>
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and
overtime.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public float GetHourlyRate() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return hourlyRate;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;/**<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* This method calculates how much is due
to<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* a contractor based on how much he's
worked<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* and his hourly rate.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* @param hours The number of hours worked
by the<BR>
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contractor
during this pay period.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* @return The amount of money due the
contractor.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public float CalculatePayCheck(int hours)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return hours *
hourlyRate;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">Contractor</FONT></TT> class includes
two non-constructor methods-<TT><FONT FACE="Courier">GetHourlyRate</FONT></TT>
and <TT><FONT FACE="Courier">CalculatePayCheck</FONT></TT>. Each
of these uses the <TT><FONT FACE="Courier">@return</FONT></TT>
tag to describe its return value. Additionally, <TT><FONT FACE="Courier">GetHourlyRate</FONT></TT>
uses <TT><FONT FACE="Courier">@param</FONT></TT> to describe its
input parameters. The results of this documentation can be seen
in Figure 16.4.
<P>
<A HREF="f16-4.gif" ><B>Figure 16.4 : </B>Using @param and @return to<I> document </I>Contractor.</A>
<P>
As you can see from Figure 16.4, the <TT><FONT FACE="Courier">@return</FONT></TT>
and <TT><FONT FACE="Courier">@param</FONT></TT> tags nicely format
the descriptions entered in the JavaDoc comments. If a method
receives more than one parameter, the <TT><FONT FACE="Courier">@param</FONT></TT>
tag can be repeated as often as necessary. Although the <TT><FONT FACE="Courier">@exception</FONT></TT>
tag is not shown in this example, it behaves identically to <TT><FONT FACE="Courier">@return</FONT></TT>
and <TT><FONT FACE="Courier">@param</FONT></TT>.
<H2><A NAME="EnhancingYourDocumentationwithHTML"><FONT SIZE=5 COLOR=#FF0000>Enhancing
Your Documentation with HTML</FONT></A></H2>
<P>
By using the class and method documentation tags that you can
embed within JavaDoc comments, you can take huge strides toward
improving the way you document your code. However, because JavaDoc
produces HTML (HyperText Markup Language) files, you can go much
further. By embedding HTML  commands within your JavaDoc comments,
you have almost infinite control over how your documentation will
appear when viewed in a browser.
<P>
By using HTML tags, you can enhance your documentation by drawing
attention to bold or italicized text, including numbered and bulleted
lists, images, preformatted text, or even links to other documentation
files or Web-based resources.
<P>
Table 16.2 shows the HTML tags that you probably find most useful
in documenting your Java code. Additionally, you also may want
to refer to <A HREF="ch12.htm" >Chapter 12</A>, &quot;HTML for
Java  Programmers.&quot;<BR>
<P>
<CENTER><B>Table 16.2. Useful HTML tags for documenting Java code.</B></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=272><I>Tag</I></TD><TD WIDTH=318><I>Purpose</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=272><TT><FONT FACE="Courier">&lt;A&gt;&#133;&lt;/A&gt;</FONT></TT>
</TD><TD WIDTH=318>Indicates a link anchor.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=272><TT><FONT FACE="Courier">&lt;B&gt;&#133;&lt;/B&gt;</FONT></TT>
</TD><TD WIDTH=318>Formats marked text with bold font.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=272><TT><FONT FACE="Courier">&lt;BLOCKQUOTE&gt;&#133;&lt;/BLOCKQUOTE&gt;</FONT></TT>
</TD><TD WIDTH=318>Formats marked text as a lengthy quotation.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=272><TT><FONT FACE="Courier">&lt;CITE&gt;&#133;&lt;/CITE&gt;</FONT></TT>
</TD><TD WIDTH=318>Formats marked text as a citation.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=272><TT><FONT FACE="Courier">&lt;CODE&gt;&#133;&lt;/CODE&gt;</FONT></TT>
</TD><TD WIDTH=318>Formats marked text as source code.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=272><TT><FONT FACE="Courier">&lt;EM&gt;&#133;&lt;/EM&gt;</FONT></TT>
</TD><TD WIDTH=318>Adds emphasis to marked text.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=272><TT><FONT FACE="Courier">&lt;I&gt;&#133;&lt;/I&gt;</FONT></TT>
</TD><TD WIDTH=318>Formats marked text in italics.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=272>&lt;<TT><FONT FACE="Courier">IMG</FONT></TT>&gt;
</TD><TD WIDTH=318>Inserts a named image file.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=272><TT><FONT FACE="Courier">&lt;LI&gt;</FONT></TT>
</TD><TD WIDTH=318>Indicates a list item with an ordered or unordered list.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=272><TT><FONT FACE="Courier">&lt;OL&gt;&#133;&lt;/OL&gt;</FONT></TT>
</TD><TD WIDTH=318>Indicates an ordered (numbered) list.</TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=272><TT><FONT FACE="Courier">&lt;P&gt;</FONT></TT>
</TD><TD WIDTH=318>Indicates the end of a paragraph.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=272><TT><FONT FACE="Courier">&lt;PRE&gt;&#133;&lt;/PRE&gt;</FONT></TT>
</TD><TD WIDTH=318>Indicates preformatted text. Spacing and layout is preserved by using a monospaced font.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=272><TT><FONT FACE="Courier">&lt;STRONG&gt;&#133;&lt;/STRONG&gt;</FONT></TT>
</TD><TD WIDTH=318>Adds maximum-strength emphasis to marked text.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=272><TT><FONT FACE="Courier">&lt;TT&gt;&#133;&lt;/TT&gt;</FONT></TT>
</TD><TD WIDTH=318>Formats marked text in a typewriter font.</TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=272><TT><FONT FACE="Courier">&lt;UL&gt;&#133;&lt;/UL&gt;</FONT></TT>
</TD><TD WIDTH=318>Indicates an unordered (bulleted) list.</TD>
</TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=574><B>Caution</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=574>
<BLOCKQUOTE>
Because JavaDoc makes its own assumptions about how it will format text, you cannot use HTML tags like <TT><FONT FACE="Courier">&lt;H1&gt;</FONT></TT> that are used to define headings.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<H2><A NAME="AnExample"><FONT SIZE=5 COLOR=#FF0000>An Example</FONT></A>
</H2>
<P>
This section demonstrates the use of JavaDoc, including class
documentation tags, method documentation tags, and embedded HTML
tags. Assume you have the following class definition that you
need to document:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">public class Employee extends Person
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private float salary;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private String job;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Employee(float sal, String fName,
String lName) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(fName, lName);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;salary = sal;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void AssignJob(String newJob) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;job = newJob;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String GetJobTitle() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return job;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static int GetMaxWorkingAge() {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 64;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;private float GetMaxSalary() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 200000f;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean ChangeSalary(float newSalary)
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (newSalary
&lt; salary)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (newSalary
&gt; GetMaxSalary())<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;salary = newSalary;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
First, you need to document the class itself. You do this with
the following comment:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;&nbsp;* The &lt;tt&gt;Employee&lt;/tt&gt; class is used
to represent<BR>
&nbsp;&nbsp;* employees of our company. It augments the &lt;tt&gt;Person&lt;/tt&gt;
<BR>
&nbsp;&nbsp;* class with information about an employee's salary
and<BR>
&nbsp;&nbsp;* job title.&lt;p&gt;<BR>
&nbsp;&nbsp;* This class was written by:<BR>
&nbsp;&nbsp;* &lt;blockquote&gt;<BR>
&nbsp;&nbsp;* &lt;img src=logo.gif width=300 height=100&gt;<BR>
&nbsp;&nbsp;* &lt;/blockquote&gt;<BR>
&nbsp;&nbsp;* @author Mike Cohn<BR>
&nbsp;&nbsp;* @version 1.0.0<BR>
&nbsp;&nbsp;* @see Contractor<BR>
*/<BR>
public class Employee extends Person {</FONT></TT>
</BLOCKQUOTE>
<P>
This will create the documentation screen shown in Figure 16.5.
You can see that the <TT><FONT FACE="Courier">&lt;tt&gt;&#133;&lt;/tt&gt;</FONT></TT>
tags were used to set the names of other classes in a distinctive
typewriter-style font. The <TT><FONT FACE="Courier">&lt;p&gt;</FONT></TT>
tag is used to indicate the end of a paragraph. If this tag had
not been used, the text on the following line would have merged
with the text prior to the tag. The <TT><FONT FACE="Courier">&lt;blockquote&gt;</FONT></TT>
and <TT><FONT FACE="Courier">&lt;img&gt;</FONT></TT> tags were
used to include a graphics image indicating the author of the
class.
<P>
<A HREF="f16-5.gif" ><B>Figure 16.5 :</B> <I>Class documentation for Employee, including embedded graphic.</I></A>
<P>
Next, you need to document the constructor. This is done with
the following comment, which will produce the documentation shown
in Figure 16.6:
<P>
<A HREF="f16-6.gif" ><B>Figure 16.6 : </B><I>Documentation for the </I>Employee<I> constructor.</I></A>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/** This constructor is used to create
a new employee and<BR>
&nbsp;&nbsp;* assign him an initial salary. &lt;EM&gt;It does
not verify that<BR>
&nbsp;&nbsp;* salary is less than the company's maximum salary.&lt;/EM&gt;
<BR>
&nbsp;&nbsp;* You could use this method as follows:<BR>
&nbsp;&nbsp;* &lt;CODE&gt;&lt;PRE&gt;<BR>
&nbsp;&nbsp;* Employee Emp = new Employee(35000f,&quot;Mike&quot;,&quot;Cohn&quot;);
<BR>
&nbsp;&nbsp;* &lt;/PRE&gt;&lt;/CODE&gt;<BR>
&nbsp;&nbsp;* @param sal The starting salary of the new employee.
<BR>
&nbsp;&nbsp;* @param fName The employee's first name.<BR>
&nbsp;&nbsp;* @param lName The employee's last name.<BR>
&nbsp;&nbsp;*/<BR>
public Employee(float sal, String fName, String lName) {</FONT></TT>
</BLOCKQUOTE>
<P>
In this case the <TT><FONT FACE="Courier">&lt;CODE&gt;&#133;&lt;/CODE&gt;</FONT></TT>
and <TT><FONT FACE="Courier">&lt;PRE&gt;&#133;&lt;/PRE&gt;</FONT></TT>
tags were used to indicate a preformatted block of source code.
Also, the <TT><FONT FACE="Courier">&lt;EM&gt;&#133;&lt;/EM&gt;</FONT></TT>
tags were used to apply emphasis to the statement that the employee's
salary must be less than a company maximum. Finally, because this
constructor is passed three parameters, each parameter is documented
with the <TT><FONT FACE="Courier">@param</FONT></TT> method tag.
<P>
In addition to the full documentation shown in Figure 16.6, JavaDoc
creates a list of constructors for the class. This appears as
a separate section in the HTML document, as shown in Figure 16.7.
<P>
<A HREF="f16-7.gif" ><B>Figure 16.7 : </B><I>The constructor index for the </I>Employee <I>class.</I></A>
<P>
The <TT><FONT FACE="Courier">AssignJob</FONT></TT> method is documented
by adding the following comment:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;&nbsp;* This method assigns the employee to the<BR>
&nbsp;&nbsp;* specified job. This method does not verify the<BR>
&nbsp;&nbsp;* &lt;i&gt;job title&lt;/i&gt; against the list of
&lt;i&gt;approved<BR>
&nbsp;&nbsp;* job titles&lt;/i&gt; created by &lt;b&gt;Human Resources&lt;/b&gt;.
<BR>
&nbsp;&nbsp;* Likely job titles you may want to pass include:
<BR>
&nbsp;&nbsp;* &lt;ul&gt;<BR>
&nbsp;&nbsp;* &lt;li&gt;Programmer<BR>
&nbsp;&nbsp;* &lt;li&gt;Analyst<BR>
&nbsp;&nbsp;* &lt;li&gt;QA<BR>
&nbsp;&nbsp;* &lt;li&gt;Tech Writer<BR>
&nbsp;&nbsp;* &lt;li&gt;Project Manager<BR>
&nbsp;&nbsp;* &lt;li&gt;Database Administrator<BR>
&nbsp;&nbsp;* &lt;li&gt;Database Engineer<BR>
&nbsp;&nbsp;* &lt;/ul&gt;<BR>
&nbsp;&nbsp;* Reminder: All positions must be approved by the
<BR>
&nbsp;&nbsp;* &lt;b&gt;Manager of Human Resources&lt;/b&gt; according
to<BR>
&nbsp;&nbsp;* the company's &lt;CITE&gt;Employee Hiring Guidelines.
<BR>
&nbsp;&nbsp;* &lt;/CITE&gt;<BR>
&nbsp;&nbsp;* @param newJob This is the new job title.<BR>
&nbsp;&nbsp;* @see #GetJobTitle<BR>
&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;public void AssignJob(String newJob) {</FONT></TT>
</BLOCKQUOTE>
<P>
The result of this documentation can be seen in Figure 16.8. This
example demonstrates the use of <TT><FONT FACE="Courier">&lt;B&gt;&#133;&lt;/B&gt;</FONT></TT>
and <TT><FONT FACE="Courier">&lt;I&gt;&#133;&lt;/I&gt;</FONT></TT>
to bold and italicize text. Additionally, the use of an unordered
(bulleted) list is demonstrated. The <TT><FONT FACE="Courier">&lt;UL&gt;&#133;&lt;/UL&gt;</FONT></TT>
tags indicate the start and end of the list and the <TT><FONT FACE="Courier">&lt;LI&gt;</FONT></TT>
tags indicate each of the list items. This example also demonstrates
the use of <TT><FONT FACE="Courier">&lt;CITE&gt;&#133;&lt;/CITE&gt;</FONT></TT>
to indicate a citation. Finally, the <TT><FONT FACE="Courier">@see</FONT></TT>
method tag is used. In this example, no class name appears to
the left of the #. This will create a link to a method within
the current class.
<P>
<A HREF="f16-8.gif" ><B>Figure 16.8 : </B><I>Documentation for the </I>AssignJob<I>.method.</I></A>
<P>
Just as JavaDoc created a constructor index that listed each of
a class's constructors, it also creates a method index that will
list each of a class's non-private methods. The method index for
<TT><FONT FACE="Courier">Employee</FONT></TT> is shown in Figure
16.9.
<P>
<A HREF="f16-9.gif" ><B>Figure 16.9 : </B><I>The method index for the </I>Employee.<I>class</I></A>
<P>
Next, the following comment is written for <TT><FONT FACE="Courier">GetJobTitle</FONT></TT>
to produce the documentation shown in Figure 16.10:
<P>
<A HREF="f16-10.gif" ><B>Figure 16.10 : </B><I>Documentation for the </I>GetJobTitle<I> method.</I></A>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;&nbsp;* This function returns the job title of the employee.
<BR>
&nbsp;&nbsp;* @return A string representing the job title (for
<BR>
&nbsp;&nbsp;* example, &quot;programmer&quot;).<BR>
&nbsp;&nbsp;* @see #AssignJob<BR>
&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;public String GetJobTitle() {</FONT></TT>
</BLOCKQUOTE>
<P>
The method <TT><FONT FACE="Courier">GetMaxWorkingAge</FONT></TT>
is defined as static, meaning that it is associated with the class
itself, rather than with instances of the class. However, because
it is a public method, it can be documented as shown in the following
comment:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;&nbsp;* This method returns the highest age at which<BR>
&nbsp;&nbsp;* an employee can remain at work. &lt;STRONG&gt;<BR>
&nbsp;&nbsp;* After this age, an employee must retire and<BR>
&nbsp;&nbsp;* move to Florida.&lt;/STRONG&gt;<BR>
&nbsp;&nbsp;* @return The last allowable working year before<BR>
&nbsp;&nbsp;* mandatory retirement.<BR>
&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;public static int GetMaxWorkingAge() {</FONT></TT>
</BLOCKQUOTE>
<P>
As you can see in Figure 16.11, the use of the <TT><FONT FACE="Courier">&lt;STRONG&gt;&#133;&lt;/STRONG&gt;</FONT></TT>
tag places heavy emphasis on the need for retirees to move to
Florida.
<P>
<A HREF="f16-11.gif" ><B>Figure 16.11 : </B><I>Documentation for the </I>GetMaxWorkingAge<I> method.</I></A>
<P>
Next, the method <TT><FONT FACE="Courier">GetMaxSalary</FONT></TT>
is documented, as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;&nbsp;* This comment will not show up in JavaDoc because
<BR>
&nbsp;&nbsp;* it is private.<BR>
&nbsp;&nbsp;*/<BR>
private float GetMaxSalary() {</FONT></TT>
</BLOCKQUOTE>
<P>
However, <TT><FONT FACE="Courier">GetMaxSalary</FONT></TT> is
declared as <TT><FONT FACE="Courier">private</FONT></TT>, so it
will not be documented by JavaDoc. Because private functions are
not usable outside the class in which they are declared, there
is no need to document them for use by others in the same way
that exists for externally visible methods.
<P>
At this point, the only method left to document is <TT><FONT FACE="Courier">ChangeSalary</FONT></TT>,
which is documented as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">/**<BR>
&nbsp;&nbsp;* This function changes the employee's salary.<BR>
&nbsp;&nbsp;* A salary change can occur only after the two following
<BR>
&nbsp;&nbsp;* tests have been applied:<BR>
&nbsp;&nbsp;* &lt;ol&gt;<BR>
&nbsp;&nbsp;* &lt;li&gt;The new salary is higher than the current
salary.<BR>
&nbsp;&nbsp;* &lt;li&gt;The new salary is less than the maximum
salary.<BR>
&nbsp;&nbsp;* &lt;/ol&gt;<BR>
&nbsp;&nbsp;* @return &lt;B&gt;true&lt;/B&gt; if the salary change
is approved,<BR>
&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;B&gt;false&lt;/B&gt;
otherwise.<BR>
&nbsp;&nbsp;* @param newSalary The proposed new salary.<BR>
&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;public boolean ChangeSalary(float newSalary) {</FONT></TT>
</BLOCKQUOTE>
<P>
The documentation for <TT><FONT FACE="Courier">ChangeSalary</FONT></TT>
will appear as shown in Figure 16.12. This example demonstrates
the use of <TT><FONT FACE="Courier">&lt;OL&gt;&#133;&lt;/OL&gt;</FONT></TT>
and <TT><FONT FACE="Courier">&lt;LI&gt;</FONT></TT> to introduce
an ordered list and its items. Ordered lists are like unordered
lists except that instead of bullets, they have numbers to the
left of each item. Additionally, this example shows that some
HTML tags can be embedded with class or method documentation tags.
In this case, <TT><FONT FACE="Courier">&lt;B&gt;&#133;&lt;/B&gt;</FONT></TT>
is embedded within the <TT><FONT FACE="Courier">@return</FONT></TT>
tag.
<P>
<A HREF="f16-12.gif" ><B>Figure 16.12 : </B><I>Documentation for the </I>ChangeSalary<I> method.</I></A>
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
In this chapter, you learned how JavaDoc can simplify the job
of documenting your classes. You saw how class documentation tags
can be used to link classes by providing jumps between related
classes. You also learned how to use method documentation tags
to document the parameters, return values, and exceptions of each
method. Even with this much power and flexibility, it only scratched
the surface of what can be done. By embedding HTML commands directly
into your comments, you learned how to enhance your documentation
by using formatted text, numbered and bulleted lists, and embedded
images. Finally, you saw an extensive example that put all of
these pieces together to document a single class.
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



