<HTML>
<HEAD>
<TITLE>developer.com - Reference</TITLE>

<META NAME="Author" CONTENT="developer.com">
<META NAME="Keywords" CONTENT="javascript, ActiveX, VRML, Push, channel,
push channel, applet, directory, news, community, developer, internet,
intranet, java, java applet, J++, javabeans, java products, tools, java
tools, JDK, java development kit, java development environment, JIT,
JavaPlan, enterprise tools, JVM, Java Virtual Machine, Java resources, API,
browser, java documentation, CDF, Common Desktop Format, RDF, Resource
Description Framework, Netcaster, Netcast, Castanet, meta-language, metadata,
solaris, Solaris, SUN, CGI, Perl, Oracle, database, network, Netscape API,
Apache, apache, SSL, mSQL, Netscape, Fasttrack, FastTrack,
industry standard, ActiveX bridge, web, internet, site, site
design, microsoft, active server pages, asp, iis, nt, win95, 95, html, cgi,
frontpage, business, corporate, vbscript, javascript, activex, isapi,
database, access, sql, server, www, 3.0, 3.01, 3.02, 3.03, 3.04, 4.0,
4.0b2, 4.01, 4.03, 4.04, connection, online, commerce, publisher,
publishing, publish, webmaster, dynamic html, dhtml, windows 98, netscape,
netscape software, shareware, magazines, jobs, japan, free, freeware, free
stuff">
<META NAME="description" CONTENT="Developer.com is the leading online
service for developers. It includes Gamelan, the official 
directory for Java, as well
as news, information, tutorials, and directories for other Internet technologies
including ActiveX, JavaScript, perl, VRML, Java Beans, push technologies, and
other Internet and intranet technologies. Developer.com is also the home of
Developer Direct, the Professional Developer's Store, where developers can
purchase and download thousands of Web, authoring and other development
products at some of today's lowest prices.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">

</HEAD>
<BODY BACKGROUND="/images/curve_r-wide.gif" BGCOLOR="#FFFFFF" TEXT="#000000" 
LINK="#DD0000" VLINK="#999999" ALINK="#FF0000">

<TABLE>
<TR><TD VALIGN=TOP WIDTH=120>
<A HREF="/" >
<IMG SRC="/images/masthead_r.gif" WIDTH="100" HEIGHT="78" BORDER="0"
ALT="Developer.com Logo"></a>
</TD><TD>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCBAN.REF/DT=null">
<img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCBAN.REF/DT=null" HEIGHT="60" WIDTH="468" ALT="Click here to support our advertisers"><BR><CENTER>Click here to support our advertisers</CENTER></a>
</TD></TR>
</TABLE>
<!--outer table--><TABLE>
<!--outer table--><TR>
<!--outer table--><TD VALIGN="TOP">

<!--navbar info -->

<table><tr><td>

<A HREF="http://www.developerdirect.com/" >
<IMG SRC="/images/button_s.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>SHOPPING</b></font></a>

</td></tr><tr><td>

<A HREF="/community/jobs/c_jobs.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>JOB BANK</B></font></a>

</td></tr><tr><td>

<A HREF="http://www.classifieds2000.com/cgi-cls/display.exe?Developer+computer+searchcomputercategories">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>CLASSIFIEDS</B></font></a>

</td></tr><tr><td>

<A HREF="/directories/directories.html">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>DIRECTORIES</B></font></a>

</td></tr><tr><td>

<A HREF="/reference/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>REFERENCE</B></font></a>

<br>

<a href="/reference/r_library.html">
<FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">
Online Library</a></font>

</td></tr><tr><td>

<A HREF="/classroom/">
<IMG SRC="/images/button_r.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>LEARNING CENTER</B></font></a>

</td></tr><tr><td>

<A HREF="/journal/">
<IMG SRC="/images/button_n.gif" width="15" height="11" BORDER="0"><B><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000">JOURNAL</font></B></a>

</td></tr><tr><td>

<A HREF="/news/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>NEWS CENTRAL</b></font></a>

</td></tr><tr><td>

<A HREF="/downloads/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>DOWNLOADS</b></font></a>

</td></tr><tr><td>

<A HREF="/community/" >
<IMG SRC="/images/button_c.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><B>COMMUNITY</B></font></a>

</td></tr><tr><td>

<A HREF="/calendar/">
<IMG SRC="/images/button_d.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>CALENDAR</b></font></a>

</td></tr><tr><td>

<A HREF="/about/">
<IMG SRC="/images/button_a.gif" width="15" height="11" BORDER="0"><FONT FACE="Arial, Helvetica" SIZE="-1" color="#000000"><b>ABOUT US</b></a></font>

</td></tr></table>
<table>
<tr>
<td>
<form action="/subscribe/list.cgi" method=post >
<img src="/images/rule.gif" width="100" height="2"><br>
<B><FONT FACE="Arial, Helvetica" SIZE="-1">Journal:</b></font><br>
<input name='email' value='your e-mail' size="11">
<input type='hidden'  name='state' value='Subscribe'>
</td>
</tr>
<tr>
<td>
<input type='submit' value='Subscribe'>
<br>
<font size="-1">Get the weekly email highlights from the most popular journal for developers!
<br>
<a href="http://www.developer.com/subscribe.html">Current issue</a>
<img src="/images/rule.gif" width="100" height="2">
<input type='hidden' name='name' value='New Subscriber'>
</FORM>
</td>
</tr>
</table>
<!--/navbar-->
<font size="-1">
<A HREF="http://www.developer.com">developer.com</a><BR>
<A HREF="http://www.developerdirect.com">developerdirect.com</a><BR>
<A HREF="http://www.htmlgoodies.com">htmlgoodies.com</a><BR>
<A HREF="http://www.javagoodies.com">javagoodies.com</a><br>
<A HREF="http://www.jars.com">jars.com</a><BR>
<a href="http://www.intranetjournal.com">intranetjournal.com</a><br>
<a href="http://www.javascripts.com">javascripts.com</a><br>
</font>
<!--outer table--></TD>

<!--outer table--><TD VALIGN="TOP">
<BLOCKQUOTE>
<P>

<img src="/images/header_r.gif" width="440" height="50">
<P>
<MAP NAME ="header_r2.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/author.html"
      COORDS ="361,0,440,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/basic.html"
      COORDS ="254,0,360,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/help.html"
      COORDS ="183,0,251,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/cool.html"
      COORDS ="100,0,181,29">
<AREA SHAPE ="RECT"
      HREF ="/reference/mybook.html"
      COORDS ="0,0,100,29">
</MAP>

<MAP NAME ="header_r1.gif.map">

<AREA SHAPE ="RECT"
      HREF ="/reference/personalize.html"
      COORDS ="339,0,439,29">
</MAP>

<p>


<font face="Arial,Helvetica" size="-1" color="#006666"><A HREF="/reference/r_library.html"><B>All Categories</A> :</B>
<b><A HREF="/reference/r_java.html">Java</A></b></font><p>

   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
<H1><FONT COLOR=#FF0000>Chapter 6</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Building a Catalog Applet</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>



<UL>
<LI><A HREF="#BasicsoftheAppletClass" >Basics of the Applet Class</A>
<LI><A HREF="#AppletsandHTML" >Applets and HTML</A>
<LI><A HREF="#AppletsandImages" >Applets and Images</A>
<LI><A HREF="#AppletsandAudio" >Applets and Audio</A>
<LI><A HREF="#UndertheAppletHood" >Under the Applet Hood</A>
<LI><A HREF="#CreatingandReadingaURL" >Creating and Reading a URL</A>
<LI><A HREF="#ChapterProject" >Chapter Project</A>
<UL>
<LI><A HREF="#ClassOrganization" >Class Organization</A>
<LI><A HREF="#CatalogHTML" >Catalog HTML</A>
<LI><A HREF="#TheCatalogClass" >The Catalog Class</A>
<LI><A HREF="#TheCatalogButtonClass" >The CatalogButton Class</A>
<LI><A HREF="#TheSelectionCanvasClass" >The SelectionCanvas Class</A>
<LI><A HREF="#TheMediaLoaderClass" >The MediaLoader Class</A>
<LI><A HREF="#TheMediaLoaderExceptionClass" >The MediaLoaderException Class</A>
</UL>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
In this part of the book, a basic framework will be developed
for creating catalog applications with general kiosk-like features.
The application is described as &quot;kiosk-like&quot; because
it emphasizes the use of images (rather than buttons and menus)
to guide you through the various pages of the catalog. Consequently,
the catalog will make heavy use of images, a primary subject of
this part of the book.
<P>
Since images put a heavy load on the network, smarter methods
are needed for loading them from the server to the client. <A HREF="ch7.htm" >Chapter 7</A>,
&quot;Java and Images,&quot; introduces one of Java's most important
features, multithreading, to illustrate some techniques for loading
images before they are needed, thus making your application faster.
The general overview of multithreading will form the foundations
of thread programming, which will be used frequently in the rest
of the book.
<P>
The kiosk will also make use of many of the features native to
Java's applet classes. These classes make it easy to bring audio
and images into your applet. They also give you a way to access
features of the native browser, such as its status bar. One of
the applet classes also provides a gateway for creating links
to other HTML pages. The discussion of how this works will lead
to the illustration of yet another component of Java, the URL
classes. There will be an overview of how to open a stream to
other URL objects, such as an image or text file residing on the
server, and how to bring them into your client applet.
<H2><A NAME="BasicsoftheAppletClass"><FONT SIZE=5 COLOR=#FF0000>Basics
of the Applet Class</FONT></A></H2>
<P>
This chapter's tutorial focuses on a variety of ways that the
Applet class can be used to enhance the way your applet works.
Recall that the Applet class provides the foundation for creating
applets-Java applications that run in a browser environment. Besides
launching your applet, the Applet class provides many useful services.
It can be used to load image and audio files, work with URLs,
and access the native browser environment. Since the Applet class
is also a component of the AWT package (as was discussed in Part
II, &quot;Developing a Spreadsheet Applet with the AWT Package&quot;),
Applet objects provide many of the visual features that are part
of the standard AWT repertoire, especially using the Graphics
class for painting text, shapes, and images. Since The Applet
class is a subclass of the AWT Component class, it can handle
events such as mouse events and keystrokes.
<P>
Four often misunderstood Applet methods are overridden to manage
the life cycle of an applet. None of these methods are required
to be overridden, although their use will generally give you a
more stable applet. These are the four methods:
<UL>
<LI><TT><B>init()</FONT></B></TT> This is
used to initialize an applet whenever it is loaded. You typically
override this method to set up resources that will be used throughout
an applet, such as fonts, or to initialize variables. This method
is called once and only once during the lifetime of your applet.
However, if the applet is reloaded for some reason or another,
the <TT>init()</TT> method will be
called again. Some Java literature may lead you to believe that
you have to <I>always</I> override this method. This is not true!
You need to override <TT>init()</TT>
only when your applet's circumstances dictate that you should.
 A good example of this is initializing resources, such as AWT
components.
<LI><TT><B>start()</FONT></B></TT> This is
called whenever the HTML document on which an applet resides becomes
the current page of a browser. When an applet is first run, the
<TT>start()</TT> method is called
after <TT>init()</TT>. Unlike the
latter, however, <TT>start()</TT>
will be called whenever the user visits the applet's page. Two
very important types of activities should be located in the <TT>start()</TT>
method. The <TT>show()</TT> method
of instances of the Frame class are best called in the <TT>start()</TT>
method. Since Frames occur outside the confines of an applet page,
they will stay onscreen even after you have left the page. Consequently,
they should be shown when you enter the page and hidden when you
leave (see the <TT>stop()</TT> description
method that follows). There will be an example in the upcoming
listings. The <TT>start()</TT> method
is also a good place to begin threads since their existence is
also not confined to the page where they began.
<LI><TT><B>stop()</FONT></B></TT> This method
is called whenever the user leaves a page-it is the converse of
the <TT>start()</TT> method. Therefore,
it's a good place to hide frames and terminate threads.
<LI><TT><B>destroy()</FONT></B></TT><B> </B>The
<TT>destroy()</TT> method is called
whenever the applet is being shut down. Typically, this will occur
when the browser is being closed, although there could be other
circumstances that could lead to <TT>destroy()</TT>
being invoked. This method is a good place to do some cleanup.
However, since it's unpredictable when <TT>destroy()</TT>
will be called, it should be used with some discretion.
</UL>
<P>
The example that follows shows how these four methods work with
the Frame class, providing an interesting insight into their behavior.
Listing 6.1 shows code used to create a simple frame from an applet.
The <TT>init()</TT> and <TT>destroy()</TT>
methods print out their invocations to standard output so their
behavior can be tracked.
<HR>
<BLOCKQUOTE>
<B>Listing 6.1. An applet that creates Frames at initialization.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>import java.awt.*;<BR>
import java.lang.*;<BR>
import java.applet.Applet;<BR>
<BR>
// This applet illustrates how Frames work <BR>
// with basic Applet methods<BR>
public class AppletBasics extends Applet&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;Frame f;<BR>
&nbsp;&nbsp;&nbsp;// Called once and only once upon<BR>
&nbsp;&nbsp;&nbsp;// applet initialization<BR>
&nbsp;&nbsp;&nbsp;public void init() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;In
Applet init. Create frame!&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Create a frame and make
it visible...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f = new Frame(&quot;Applet
Basics test!&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.resize(300,200);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.show();<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Applet destroyed.&nbsp;&nbsp;Browser probably
shutting down...<BR>
&nbsp;&nbsp;&nbsp;public void destroy() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// Destroy the frame<BR>
&nbsp;&nbsp;&nbsp;&nbsp;f.dispose();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;In applet destroy!&quot;);
<BR>
&nbsp;&nbsp;&nbsp;}<BR>
</TT>}
</BLOCKQUOTE>
<HR>
<P>
Frame's behavior is curious. If you leave the page where the Frame
was created, the Frame will still be active and visible. This
may or may not be the behavior you want. Furthermore, if you remove
the <TT>dispose()</TT> method from
the destroy call, you can get some downright undesirable behavior.
In some browsers, you could create multiple instances of the frame
by reopening its location reference. In Figure 6.1, three instances
of the frame were created by going to its location several times.
<P>
<A HREF="f6-1.gif" ><B>Figure 6.1 : </B><I>Creating multiple frames by reloading its location </I></A>
<P>
Listing 6.2 gives the applet its desirable behavior of hiding
the frame every time you leave the page and redisplaying it when
you come back. It simply calls the <TT>show()</TT>
method of the Frame class in an overridden Applet <TT>start()</TT>
method and hides the Frame in an overridden <TT>stop()</TT>
method.
<HR>
<BLOCKQUOTE>
<B>Listing 6.2. An applet that displays the frame only when you
are on the applet's page.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>import java.awt.*;<BR>
import java.lang.*;<BR>
import java.applet.Applet;<BR>
<BR>
// This applet illustrates how Frames work <BR>
// with basic Applet methods<BR>
public class AppletBasics extends Applet&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;Frame f;<BR>
&nbsp;&nbsp;&nbsp;// Called once and only once upon<BR>
&nbsp;&nbsp;&nbsp;// applet initialization<BR>
&nbsp;&nbsp;&nbsp;public void init() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;In
Applet init. Create frame!&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Create a frame and make
it visible...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f = new Frame(&quot;Applet
Basics test!&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.resize(300,200);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Move the show to the start method so the
Frame<BR>
&nbsp;&nbsp;&nbsp;// disappears when you leave the page...<BR>
&nbsp;&nbsp;&nbsp;public void start() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;In
applet start!&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.show();<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Hide the frame when you leave the page...
<BR>
&nbsp;&nbsp;&nbsp;public void stop() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;In
applet stop!&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.hide();<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Applet destroyed.&nbsp;&nbsp;Browser probably
shutting down...<BR>
&nbsp;&nbsp;&nbsp;public void destroy() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.dispose();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;In
applet destroy!&quot;);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<P>
It is worth spending a few minutes playing around with this applet
to get a full understanding of how these methods work. Try discarding
or moving the code to see what will happen.
<H2><A NAME="AppletsandHTML"><FONT SIZE=5 COLOR=#FF0000>Applets
and HTML</FONT></A></H2>
<P>
A special HTML tag is used for including applets within a Web
page. The &lt;APPLET&gt; tag is used to indicate that an applet
is to be run at the current location in the HTML. The typical
syntax for the tag would be like the following:
<BLOCKQUOTE>
<TT>&lt;APPLET CODE=&quot;AppletTags&quot;
WIDTH=200 HEIGHT=60&gt;<BR>
&lt;/APPLET&gt;</TT>
</BLOCKQUOTE>
<P>
The &lt;APPLET&gt; tag has required attributes, as this example
shows. The CODE attribute states the name of the class file that
runs the applet. The &quot;AppletTags&quot; class of this example
will be a subclass of Applet. Java will look in the path specified
in the <TT>CLASSPATH</TT> variable
to find the class. The <TT>WIDTH</TT>
and <TT>HEIGHT</TT> parameters describe
the bounding region of the applet. These are also required and
need to be set to the proper values if the applet is to look the
way you want. Instances of the Window class, like frames, can
appear outside this region. The &lt;/APPLET&gt; tag is used to
indicate the end of the HTML applet block.
<P>
An interesting characteristic of this &lt;APPLET&gt; tag pair
is that any non-tagged text appearing within this block will appear
in a browser that supports Java, but will not for non-Java-capable
browsers. This feature can be used to indicate that a page is
missing some functionality because the browser does not support
Java. For example, the modifications of the previous lines
<BLOCKQUOTE>
<TT>&lt;APPLET CODE=&quot;AppletTags&quot;
WIDTH=200 HEIGHT=60&gt;<BR>
You need to get a Java capable browser!<BR>
&lt;/APPLET&gt;</TT>
</BLOCKQUOTE>
<P>
will show the appropriate message for a browser that does not
support Java.
<P>
The &lt;APPLET&gt; tag supports a couple of other optional attributes.
The ALIGN attribute is used to control the alignment of the applet
on the page. This attribute has about half a dozen possible values,
including <TT>LEFT</TT>, <TT>RIGHT</TT>,
<TT>TOP</TT>, <TT>MIDDLE</TT>,
and so forth. The ALIGN attribute can be used to wrap text around
an applet. The accompanying CD-ROM has a variation of the following
example that uses the ALIGN attribute to right-align the text.
(The file, which is in the <A HREF="ch6.htm" >Chapter 6</A> directory,
is launched by <TT>appletrighttags.html</TT>.)
The HSPACE and VSPACE attributes use the pixel values to control
spacing between the applet and the text around it.
<P>
The CODEBASE attribute can be used to complement the CODE attribute.
It specifies an alternative path where the class specified by
CODE can be found.
<P>
Programmers will find the &lt;PARAM&gt; tag to be of the most
interest. It is a separate tag from &lt;APPLET&gt;, although it
appears within its block. The &lt;PARAM&gt; tag consists of NAME-VALUE
attribute pairs that describe the name of a parameter variable
and its corresponding value. It can appear multiple times with
the &lt;APPLET&gt; block. This is illustrated with an example.
<P>
Figure 6.2 shows a page displaying a couple of strings of text.
The first line is produced by the normal HTML text mechanism,
but the second line is written out by an applet. Within the &lt;APPLET&gt;
and &lt;/APPLET&gt; tag pair are two parameters. The first one,
with the NAME of &quot;text,&quot; is used by the applet to display
the second line of text, which is specified by the VALUE attribute.
The second parameter, called &quot;unused,&quot; is ignored but
shows how multiple parameters can be included in the &lt;APPLET&gt;
block.
<P>
<A HREF="f6-2.gif" ><B>Figure 6.2 : </B><I>An applet that uses the PARAMETER attribute to specify display text </I></A>
<HR>
<BLOCKQUOTE>
<B>Listing 6.3. An HTML listing of Figure 6.2 illustrating the
use of &lt;APPLET&gt; and &lt;PARAMETER&gt; tags.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>&lt;TITLE&gt;Applet Tags First Test&lt;/TITLE&gt;
<BR>
&lt;HR&gt;<BR>
&lt;P&gt; This is HTML text.<BR>
&lt;P&gt;<BR>
&lt;P&gt;<BR>
&lt;APPLET CODE=&quot;AppletTags&quot; WIDTH=200 HEIGHT=60&gt;
<BR>
&lt;PARAM NAME=text VALUE=&quot;This is the AppletTags applet&quot;&gt;
<BR>
&lt;PARAM NAME=unused VALUE=&quot;This doesn't matter&quot;&gt;
<BR>
You need to get a Java capable browser!<BR>
&lt;/APPLET&gt;<BR>
&lt;P&gt;<BR>
&lt;HR&gt;</TT>
</BLOCKQUOTE>
<HR>
<P>
The Applet class uses the &lt;PARAMETER&gt; tags through the <TT>getParameter()</TT>
method. This method takes a String indicating the NAME attribute
and returns a String specifying the VALUE attribute. It will return
null if the NAME attribute is not found. Listing 6.4 shows the
code that uses the <TT>getParameter()</TT>
method to display the second line of text in Figure 6.2.
<HR>
<BLOCKQUOTE>
<B>Listing 6.4. Applet code of Figure 6.2 illustrating the use
of parameters.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>import java.awt.*;<BR>
import java.lang.*;<BR>
import java.applet.Applet;<BR>
<BR>
// This applet takes an applet parameter<BR>
// and displays it...<BR>
public class AppletTags extends Applet&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;String text;<BR>
&nbsp;&nbsp;&nbsp;public void init() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Get the text to be displayed
from<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// the applet tag parameters...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((text = getParameter(&quot;text&quot;))
== null)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text
= &quot;Parameter not found!&quot;;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Display the parameter text...<BR>
&nbsp;&nbsp;&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(text,10,10);
<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<P>
The project at the end of this chapter makes extensive use of
parameters and gives you a more involved illustration of how parameters
can be constructed in the HTML and read in by the applet.
<H2><A NAME="AppletsandImages"><FONT SIZE=5 COLOR=#FF0000>Applets
and Images</FONT></A></H2>
<P>
The Applet class provides some basic methods for loading an image
into memory. Both of these methods return an instance of an implementation
of the Image class. The Image class is an abstract class providing
methods that define the kind of behaviors an image should have.
The underlying implementation of images in the JDK is somewhat
complex. However, it isn't necessary to understand how this works
to display images. Consequently, the internals of the Image and
related classes will be postponed to later chapters. In this chapter,
the focus will be on the basic mechanics of loading an image and
displaying it.
<P>
The two forms of the <TT>getImage()</TT>
method of the Applet class give you a simple way to load an image.
Both these methods require an instance of a URL object. Although
the specifics of the URL class will be discussed in more detail
shortly, it's enough to say here that the URL class is used to
encapsulate a URL. Typically, the URL object used in the <TT>getImage()</TT>
method will be, in part, generated by one of two Applet class
methods:<BR>

<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=185><TT><B>getCodeBase()</FONT></B></TT>
</TD><TD WIDTH=406>Returns the URL of this Applet class (the one used to start the applet). This could be the value specified in the &lt;APPLET&gt; tag CODEBASE attribute or the directory of the HTML file in which this applet is embedded.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=185><TT><B>GetDocumentBase()</FONT></B></TT>
</TD><TD WIDTH=406>Returns the URL of the HTML containing this applet.
</TD></TR>
</TABLE></CENTER>
<P>
<P>
Perhaps the <TT>getImage()</TT> method
you will find the most useful is the one that takes two arguments:
a base URL and a String representing the path or filename in relation
to the base. In the example that follows, the image is loaded
from a subdirectory off where the applet HTML is located:
<BLOCKQUOTE>
<TT>Image img = getImage(getDocumentBase(),&quot;images/mail.gif&quot;);</TT>
</BLOCKQUOTE>
<P>
The other <TT>getImage()</TT> method
takes a URL object as its only parameter. This will have the full
path and filename of the image. The multiple constructors of URL
objects will be discussed shortly, but the construction of a URL
object with a String is illustrated as follows:
<BLOCKQUOTE>
<TT>Image img = getImage(new URL(&quot;http://AFakeServer.com/images/mail.gif&quot;));</TT>
</BLOCKQUOTE>
<P>
Once you get the image, it is ready to be drawn. When the <TT>paint()</TT>
method is invoked, an image is drawn by calling the <TT>drawImage()</TT>
method of the Graphics object:
<BLOCKQUOTE>
<TT>g.drawImage(img,10,10,this);</TT>
</BLOCKQUOTE>
<P>
This code draws the Image created in the previous example at an
x, y coordinate. The last <BR>
parameter refers to an implementation of the ImageObserver interface.
This class is used for tracking the progress of an image as it
is loaded and decoded. This makes it possible to show partial
images as the full image is being constructed. The ImageObserver
interface will be discussed in more detail later, along with its
related classes and methods. For now, it's enough to say that
the AWT Component class provides the basic methods necessary for
managing this image display behavior. The &quot;this&quot; of
the above <TT>drawImage()</TT> sample
code refers to the component displaying the object.
<P>
Listing 6.5 and Figure 6.3 illustrate an applet that loads an
image and displays it at different scales each time the applet
receives a mouse click. The image is loaded in the applet <TT>init()</TT>
method by using <TT>getImage()</TT>.
The first time the image appears, it is at its normal size using
the version of <TT>drawImage()</TT>
previously discussed. When you click the mouse, it changes the
image's scale and forces the applet to be redrawn. If the image
is not at its normal scale, then it's displayed at its modified
size with the following code:
<P>
<A HREF="f6-3.gif" ><B>Figure 6.3 : </B><I>Drawing a scaled Applet image </I></A>
<BLOCKQUOTE>
<TT>int width = img.getWidth(this);<BR>
int height = img.getHeight(this);<BR>
g.drawImage(img,10,10,scale * width,scale * height,this);</TT>
</BLOCKQUOTE>
<P>
The first two statements use methods of the Image class to get
the width and height of the image. A different version of the
<TT>drawImage()</TT> method is used
to draw the image scaled to fit inside a bounding box specified
by a width and height. The image is automatically scaled to fit
tightly inside the box. In the case of this example, the width
and height are multiplied by values of <TT>2</TT>,
<TT>3</TT>, and <TT>4</TT>.
<HR>
<BLOCKQUOTE>
<B>Listing 6.5. Code for drawing scaled images.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>import java.awt.*;<BR>
import java.lang.*;<BR>
import java.applet.Applet;<BR>
<BR>
public class TestImage extends Applet {<BR>
&nbsp;&nbsp;&nbsp;// Load the image off the document base...<BR>
&nbsp;&nbsp;&nbsp;Image img;<BR>
&nbsp;&nbsp;&nbsp;int scale = 1;<BR>
&nbsp;&nbsp;&nbsp;public final int MAX_SCALE = 4;<BR>
&nbsp;&nbsp;&nbsp;public void init() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;img = getImage(getDocumentBase(),&quot;images/mail.gif&quot;);
<BR>
// Set toggle state...<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Paint the image at its normal size or at
twice<BR>
&nbsp;&nbsp;&nbsp;// its normal size...<BR>
&nbsp;&nbsp;&nbsp;public void paint(Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Show at normal scale<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (scale == 1) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawImage(img,10,10,this);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Or make bigger...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int width
= img.getWidth(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int height
= img.getHeight(this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawImage(img,10,10,scale
* width,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scale
* height,this);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Mouse clicks change the scale of the image
<BR>
&nbsp;&nbsp;&nbsp;public boolean mouseDown(Event ev, int x, int
y) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++scale;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If the max size of the
image is reached, then<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// go back to normal size...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (scale &gt; MAX_SCALE)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scale
= 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Force a repaint of the
image...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
&nbsp;};<BR>
}<BR>
</TT>
</BLOCKQUOTE>
<HR>
<P>
An interesting thing to note is that the Toolkit class provides
its own versions of <TT>getImage()</TT>.
One takes a single URL parameter as in the Applet single parameter
<TT>getImage()</TT> method; this Toolkit
method is used in this chapter's project. The other version of
<TT>getImage()</TT> takes a single
String parameter that describes the file containing the image.
<H2><A NAME="AppletsandAudio"><FONT SIZE=5 COLOR=#FF0000>Applets
and Audio</FONT></A></H2>
<P>
The Applet class has two simple methods for loading and playing
an audio clip. These <TT>play()</TT>
methods have two variations, as the <TT>getImage()</TT>
method does: One takes a fully constructed URL of the desired
audio clip; the other method takes a base URL, plus a String specifying
additional directory and filename information. For example, the
following code could be called to play a sound located off the
HTML directory:
<BLOCKQUOTE>
<TT>play(getDocumentBase(),&quot;audio/song.au&quot;);</TT>
</BLOCKQUOTE>
<P>
The only audio format currently supported by Java is the AU format,
but this limitation will probably be relaxed in the near future.
<P>
Another way to play a sound is to create an AudioClip object.
AudioClip is an interface implemented by the native environment
Java is running on. Just like <TT>play()</TT>
and <TT>getImage()</TT>, the Applet
class offers two ways to get a reference to an AudioClip. The
Applet class <TT>getAudioClip()</TT>
method with a single URL parameter is one way of getting a reference
to an AudioClip object:
<BLOCKQUOTE>
<TT>import java.applet.AudioClip;<BR>
// &#133;<BR>
AudioClip sound = getAudioClip(new URL(&quot;http://AFakeServer.com/audio/song.au&quot;));</TT>
</BLOCKQUOTE>
<P>
Note that the AudioClip interface is actually located in the Applet
package. You can also refer to an AudioClip by giving a URL and
a String representing additional directory and filename information.
<P>
Once you have an AudioClip, it can be played with the <TT>play()</TT>
method. This method takes no parameters and plays the clip only
once. The <TT>loop()</TT> method plays
the sound repeatedly:
<BLOCKQUOTE>
<TT>sound.loop();</TT>
</BLOCKQUOTE>
<P>
The <TT>stop()</TT> method is used
to terminate the playing of the audio clip:
<BLOCKQUOTE>
<TT>sound.stop();</TT>
</BLOCKQUOTE>
<P>
It is important to remember to stop an audio clip when you leave
the page that started the clip. The <TT>stop()</TT>
method of the applet should, therefore, call the AudioClip <TT>stop()</TT>
when appropriate.
<H2><A NAME="UndertheAppletHood"><FONT SIZE=5 COLOR=#FF0000>Under
the Applet Hood</FONT></A></H2>
<P>
It is worth spending a few moments to look at the underpinnings
of the Applet class. Closely related to the Applet class is the
AppletContext interface, which represents the underlying applet
environment. This will typically be a browser, such as Netscape
Navigator or HotJava. Therefore, the AppletContext provides a
link to the resources of the browser. The Applet method <TT>getAppletContext()</TT>
is used to return a reference to this underlying context.
<P>
Once you get access to the AppletContext object, it's possible
to do all kinds of interesting things. One of the simplest and
most useful things to do is to display a message on the browser's
status bar:
<BLOCKQUOTE>
<TT>getAppletContext().showStatus(&quot;This
is a message&quot;);</TT>
</BLOCKQUOTE>
<P>
The various projects throughout this book use this technique to
display problems to the user. An interesting thing to do is to
use this to show the results of an exception:
<BLOCKQUOTE>
<TT>try {<BR>
&nbsp;// &#133; do something<BR>
}<BR>
// If exception, then show detail message to status bar&#133;
<BR>
catch (Exception e) {<BR>
&nbsp;&nbsp;&nbsp;getAppletContext().showStatus(e.getMessage());
<BR>
}</TT>
</BLOCKQUOTE>
<P>
Since <TT>getAppletContext()</TT>
is a method of the Applet context, this code needs to be called
from within an Applet subclass. However, now that this has been
explained, it needs to be pointed out that the Applet class has
its own <TT>showStatus()</TT> method
with the same function. Therefore, the first code fragment could
just as easily have been the following:
<BLOCKQUOTE>
<TT>showStatus(&quot;This is a message&quot;);</TT>
</BLOCKQUOTE>
<P>
Actually, this code does little more than call the underlying
AppletContext <TT>showStatus()</TT>
method.
<P>
Another important thing that the AppletContext can do is return
references of Applets running on the current HTML page. The <TT>getApplet()</TT>
method takes a String name of an Applet and returns a reference
to it. The <TT>getApplet()</TT> method
enumerates the applets on the current page. Both of these are
useful for inter-applet communication.
<P>
The AppletContext also ties in to one of the basic functions of
a browser-dynamically linking to another HTML page. This can be
done in one simple method call! The basic form of <TT>showDocument()</TT>
takes a URL and makes it the current HTML of the browser. This
implies that the <TT>stop()</TT> method
of the current applet will be called, because its container page
will no longer be current. This chapter's project will use <TT>showDocument()</TT>
to link from one page to another. Here is a code fragment from
the project:
<BLOCKQUOTE>
<TT>try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URL
u = new URL(URLBase,link);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Show
new doc: &quot; + u);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a.getAppletContext().showDocument(u);
<BR>
}<BR>
catch (MalformedURLException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a.showStatus(&quot;Malformed
URL: &quot; + link);<BR>
}<BR>
catch (Exception e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a.showStatus(&quot;Unable
to go to link: &quot; + e);<BR>
}</TT>
</BLOCKQUOTE>
<P>
It creates a URL of the new page to be loaded and calls <TT>showDocument()</TT>
to go to it. Note how the browser status bar is used to display
any errors.
<P>
An alternative form of <TT>showDocument()</TT>
takes a second String parameter that specifies the target frame
or window to place the loaded page. This is useful for browsers
that support framed pages. Note, however, that this method (like
the other AppletContext methods) might not do anything if the
native browser does not support the action.
<P>
Finally, a word should be said about the AppletStub interface.
This interface is used to create a program to view applets. Consequently,
any browser that supports Java will need to use the AppletStub
interface to make the Applet class functional.
<H2><A NAME="CreatingandReadingaURL"><FONT SIZE=5 COLOR=#FF0000>Creating
and Reading a URL</FONT></A></H2>
<P>
Since the Uniform Resource Locator, or URL, is at the heart of
the World Wide Web, it is only appropriate that an Internet language
like Java has a URL class. Several examples of how to create and
use a URL object have already been presented in this chapter.
There are four different constructors of URL objects. Two of them
should already be familiar. The simplest constructor takes a string
and converts it to a URL:
<BLOCKQUOTE>
<TT>URL u = new URL(&quot;http://AFakeServer.com/&quot;);</TT>
</BLOCKQUOTE>
<P>
Another method should also be familiar. It takes a URL and a String
representing a relative path and creates a new URL from it.
<BLOCKQUOTE>
<TT>URL urlNew = new URL(u,&quot;audio/sound.au&quot;);</TT>
</BLOCKQUOTE>
<P>
Recall that a URL typically consists of a protocol, the name of
the host computer, and a path to the location of the resource.
A third URL constructor takes these as protocol, host, and file
Strings, respectively, and returns a URL. The final constructor
adds a String specifying the port as an additional parameter.
However, protocols generally have a fixed port number (HTTP is
80), so this information is usually not needed.
<P>
A couple of methods can be used for deconstructing a URL. The
following code prints the protocol, host, port, file, and finally
the URL itself of the HTML of the applet:
<BLOCKQUOTE>
<TT>System.out.println(&quot;Protocol: &quot;
+ getDocumentBase().getProtocol());<BR>
System.out.println(&quot;Host: &quot; + getDocumentBase().getHost());
<BR>
System.out.println(&quot;Port: &quot; + getDocumentBase().getPort());
<BR>
System.out.println(&quot;File: &quot; + getDocumentBase().getFile());
<BR>
System.out.println(&quot;URL: &quot; + getDocumentBase());</TT>
</BLOCKQUOTE>
<P>
Once constructed, the URL can be used to open up a network connection
to the URL. This is done through the <TT>openStream()</TT>
method, which returns an instance of InputStream. You saw how
InputStream classes worked in <A HREF="ch4.htm" >Chapter 4</A>,
&quot;Enhancing the Spreadsheet Applet.&quot; The FilterInputStream
subclasses can be constructed from this to create high-level interfaces
to the streams. The DataInputStream class can be used to read
in streams according to a specified data type, such as Strings.
Listing 6.6 shows how to combine the URL and stream classes for
a quick and easy printout of the contents of the HTML containing
an applet.
<HR>
<BLOCKQUOTE>
<B>Listing 6.6. Printing the contents of the applet's HTML.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>void printSelf() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// Open up a stream to the document URL
and<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// print its contents...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataInputStream
dis = new DataInputStream(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new
BufferedInputStream(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getDocumentBase().openStream()
) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String s;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while ( (s = dis.readLine())
!= null)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(s);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;EOF&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;catch (IOException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;URL
read error&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<HR>
<P>
The key to this is the first line in the <TT>try</TT>
clause. The URL of the base document is taken from <TT>getDocumentBase()</TT>;
its <TT>OpenStream()</TT> method is
then applied. Once the stream is open, an instance of the easy-to-use
DataInputStream class is created. Each line of the HTML is then
fetched by the <TT>readLine()</TT>
method of DataInputStream and sent to standard output.
<H2><A NAME="ChapterProject"><FONT SIZE=5 COLOR=#FF0000>Chapter
Project</FONT></A></H2>
<P>
This chapter's project begins the development of a kiosk-style
online catalog. It has a couple of interesting characteristics.
First of all, it uses HTML applet parameters to describe how each
applet is constructed and operates. Each page in the catalog has
images describing the current choices. Figure 6.4 shows the main
menu of the catalog. The images are loaded and displayed by the
applet, not the HTML. When a choice is made, the applet jumps
to the next HTML and reloads the applet with the new parameters.
<P>
<A HREF="f6-4.gif" ><B>Figure 6.4 : </B><I>Main menu of the online catalog </I></A>
<P>
Since the applet makes extensive use of images, it poses certain
problems. Images use much network bandwidth and so need to be
used efficiently. The project works around this problem by creating
a MediaLoader class that acts as a cache for images. In the next
chapter, this class is improved by acting as a pre-loader of images
before the next applet is retrieved.
<P>
Another notable feature of the project is its configurability.
The same applet runs on every page of the catalog; its features
are determined by &lt;APPLET&gt; tag parameters in the current
HTML. Furthermore, it uses a URL stream to load in additional
data to be displayed on the button. This data comes from a local
text file, which can be edited outside the actual applet code.
<H3><A NAME="ClassOrganization">Class Organization</A></H3>
<P>
Table 6.1 lists the classes used in this chapter's version of
the catalog applet.<BR>
<P>
<CENTER><B>Table 6.1. Catalog project classes.</B></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=154><I>Class</I></TD><TD WIDTH=436><I>Description</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=154>CacheEntry</TD><TD WIDTH=436>Represents a single entry in the image cache maintained by the MediaLoader class.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=154>Catalog</TD><TD WIDTH=436>The Applet class that takes HTML parameters and constructs the components that represent the current choices.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=154>CatalogButton</TD><TD WIDTH=436>A image-based button that shows text representing a choice and links to another Catalog applet when selected.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=154>MediaLoader</TD><TD WIDTH=436>A class that actually loads the images and uses static methods to employ a cache that exists across Catalog applet invocations.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=154>MediaLoaderException</TD><TD WIDTH=436>An exception thrown by the MediaLoader when there is a problem.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=154>SelectionCanvas</TD><TD WIDTH=436>Displays a large image representing a possible choice of the user. Appears to the right of its companion CatalogButton.
</TD></TR>
</TABLE></CENTER>
<H3><A NAME="CatalogHTML">Catalog HTML</A></H3>
<P>
Listing 6.7 shows the HTML of the catalog page displayed in Figure
6.4. As the listing shows, the HTML does not actually display
anything. The &lt;PARAM&gt; tag fields actually tell the applet
what to display. These are passed to the Catalog applet run for
each page of the applet. It reads in the parameters to determine
what images to display. There are three rows of display for each
Catalog applet. On each row there is a field (also known as a
CatalogButton, after its class) that appears on the left-hand
side; it is effectively a button that appears as an image. The
field is complemented by a larger image that appears on its right
(called a SelectionCanvas, after its class).
<P>
The three &lt;PARAM&gt; tags&yacute; whose NAME attribute begins
with the &quot;field&quot; prefix specify the left-hand image
buttons. The corresponding VALUE attribute has four subfields
used to create the CatalogButton. The first subfield is the name
appearing on the button. The second is the image to be displayed
in the button's area. The third subfield is a style, which represents
the size of the button. Although the MEDIUM style is the only
one used in the sample applets, its existence gives you a way
of customizing the applet. The last subfield specifies the URL
that the applet goes to when you click the image button.
<P>
The three &lt;PARAM&gt; tags whose NAME attribute begins with
the &quot;image&quot; prefix specify the SelectionCanvas objects
that appear to the right of the fields. The VALUE attribute specifies
the image to be displayed in the canvas area.
<P>
The &lt;PARAM&gt; tag with the NAME attribute of &quot;data&quot;
specifies a URL containing text data that can be used to complement
the display of the CatalogButton objects. This data would be such
things as &quot;On Sale&quot; that would appear underneath the
larger font name of the button.
<HR>
<BLOCKQUOTE>
<B>Listing 6.7. The HTML of the main catalog page (index.html).
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>&lt;title&gt;Catalog Applet&lt;/title&gt;
<BR>
&lt;hr&gt;<BR>
&lt;applet code=&quot;Catalog&quot; width=400 height=300&gt;<BR>
&lt;param name=field1 value=&quot;Computers,catalog/field1.gif,MEDIUM,computer/main.html&quot;&gt;
<BR>
&lt;param name=image1 value=&quot;catalog/selection1.gif&quot;&gt;
<BR>
&lt;param name=field2 value=&quot;Software,catalog/field1.gif,MEDIUM,software/main.html&quot;&gt;
<BR>
&lt;param name=image2 value=&quot;catalog/selection1.gif&quot;&gt;
<BR>
&lt;param name=field3 value=&quot;Accessories,catalog/field1.gif,MEDIUM,accessory/</TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT>main.html&quot;&gt;
<BR>
&lt;param name=image3 value=&quot;catalog/selection1.gif&quot;&gt;
<BR>
&lt;param name=data value=&quot;catalog/data.txt&quot;&gt;<BR>
&lt;/applet&gt;<BR>
&lt;hr&gt;</TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="TheCatalogClass">The Catalog Class</A></H3>
<P>
Listing 6.7 gives the full listing of the Catalog class. This
subclass of Applet represents the applet loaded for every page
in the catalog project. The initialization of the applet has three
steps. Its main job is to create the CatalogButton and SelectionCanvas
objects by parsing out the parameters specified in the current
HTML. However, it also traps for a mouse click on one of the CanvasButton
objects in <TT>handleEvent()</TT>.
When this occurs, it calls the CanvasButton <TT>select()</TT>
method, which may result in the browser loading in a new URL representing
a new page in the catalog.
<P>
After the Catalog applet initializes the fonts, it gets the applet
parameter in the HTML that corresponds to the &quot;data&quot;
NAME attribute. It does this through the <TT>getParameter()</TT>
method, which will return either a String representation of the
corresponding VALUE attribute, or a null value if the name cannot
be found. The <TT>getParameter()</TT>
method is used to get all the CatalogButton and SelectionCanvas
parameters that follow.
<P>
After the &quot;data&quot; value is retrieved, it is used to derive
a URL that contains the additional text data. This is performed
in the applet's <TT>loadURLData()</TT>
method. It creates a URL object by taking the path to the text
data in relation to the base document of the current HTML:
<BLOCKQUOTE>
<TT>u = new URL(getDocumentBase(),dataPath);</TT>></TT>
</BLOCKQUOTE>
<P>
It uses this URL object to open up an input stream to the text
file, then reads the data in by Strings delimited by newlines.
This process is similar to the example discussed in the &quot;Creating
and Reading a URL&quot; section above.
<P>
The last step in the applet's initialization is to create the
three rows of CatalogButton and SelectionCanvas couplets. It uses
the <TT>getParameter()</TT> method
to get the information needed to create the canvas components.
In the <TT>createCatalogButton()</TT>
method, the parameter values are parsed with an instance of the
StringTokenizer class. Given a set of delimiters (like commas),
this class simply walks through and produces String tokens that
appear between the delimiters.
<P>
The other thing that the Catalog class does is handle the painting
of the applet. This is simple because it walks through the three
rows and displays the components based on the size of their images.
<HR>
<BLOCKQUOTE>
<B>Listing 6.7. The Catalog class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>import java.awt.*;<BR>
import java.lang.*;<BR>
import java.util.StringTokenizer;<BR>
import java.applet.*;<BR>
import java.net.URL;<BR>
import java.io.DataInputStream;<BR>
import java.io.BufferedInputStream;<BR>
import java.io.IOException;<BR>
import java.net.MalformedURLException;<BR>
<BR>
// This is the main class that loads the parameters<BR>
// for the current applet and sets up the images<BR>
// fields.<BR>
public class Catalog extends Applet {<BR>
&nbsp;&nbsp;&nbsp;CatalogButton button[] = new CatalogButton[3];
<BR>
&nbsp;&nbsp;&nbsp;SelectionCanvas drawing[] = new SelectionCanvas[3];
<BR>
&nbsp;&nbsp;&nbsp;// Three styles<BR>
&nbsp;&nbsp;&nbsp;private static final int SMALL_STYLE = 0;<BR>
&nbsp;&nbsp;&nbsp;private static final int MEDIUM_STYLE = 1;<BR>
&nbsp;&nbsp;&nbsp;private static final int LARGE_STYLE = 2;<BR>
&nbsp;&nbsp;&nbsp;private static final int DEFAULT_STYLE = MEDIUM_STYLE;
<BR>
&nbsp;&nbsp;&nbsp;Font styleFont[] = new Font[3];<BR>
&nbsp;&nbsp;&nbsp;Font dataFont;<BR>
&nbsp;&nbsp;&nbsp;String data[] = new String[3];<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Initialize the graphic display...<BR>
&nbsp;&nbsp;&nbsp;public void init() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// First create fonts...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;styleFont[0] = new Font(&quot;Helvetica&quot;,Font.PLAIN,16);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;styleFont[1] = new Font(&quot;Helvetica&quot;,Font.BOLD,18);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;styleFont[2] = new Font(&quot;Helvetica&quot;,Font.BOLD,24);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataFont = new Font(&quot;TimesRoman&quot;,Font.ITALIC,14);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Get the additional data
from URL...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loadURLData();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Add the components...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addComponents();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;show();<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Add the components to the display...<BR>
&nbsp;&nbsp;&nbsp;void addComponents() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Create Font for buttons
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String fieldParam;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String selectParam;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Add first row of field
and display image...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (((fieldParam = getParameter(&quot;field1&quot;))
!= null) &amp;&amp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((selectParam
= getParameter(&quot;image1&quot;)) != null) ) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; button[0] = createCatalogButton(fieldParam,data[0]);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; drawing[0] = new SelectionCanvas(this,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectParam,getDocumentBase());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; button[0].resize(150,100);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; drawing[0].resize(250,100);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} // end if<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getAppletContext().showStatus(&quot;Invalid
parameter&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; button[0] = null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Add second row of field
and display image...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (((fieldParam = getParameter(&quot;field2&quot;))
!= null) &amp;&amp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((selectParam
= getParameter(&quot;image2&quot;)) != null) ) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; button[1] = createCatalogButton(fieldParam,data[1]);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; drawing[1] = new SelectionCanvas(this,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectParam,getDocumentBase());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; drawing[1].resize(250,100);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; button[1].resize(150,100);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} // end if<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getAppletContext().showStatus(&quot;Invalid
parameter&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; button[1] = null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Add third row of field
and display image...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (((fieldParam = getParameter(&quot;field3&quot;))
!= null) &amp;&amp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((selectParam
= getParameter(&quot;image3&quot;)) != null) ) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; button[2] = createCatalogButton(fieldParam,data[2]);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; drawing[2] = new SelectionCanvas(this,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectParam,getDocumentBase());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; button[2].resize(150,100);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; drawing[2].resize(250,100);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} // end if<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getAppletContext().showStatus(&quot;Invalid
parameter&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; button[2] = null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Load additional data from URL...<BR>
&nbsp;&nbsp;&nbsp;void loadURLData() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// Get path to data from parameter...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String dataPath = getParameter(&quot;data&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if (dataPath == null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;No
data variable found&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;} // end if<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// Create URL for data...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;URL u;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u = new URL(getDocumentBase(),dataPath);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;catch (MalformedURLException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Bad
Data URL&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// Now load the data by opening up a stream
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;// to the URL...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp; DataInputStream dis = new DataInputStream(
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new BufferedInputStream(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u.openStream()
) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp; // Read only the first three lines...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp; int i;<BR>
&nbsp;&nbsp;&nbsp;&nbsp; for (i = 0; i &lt; 3; ++i) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data[i]
= dis.readLine();<BR>
&nbsp;&nbsp;&nbsp;&nbsp; } // end for<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;catch (IOException e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;URL
read error&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Update message sent when repainting is needed...
<BR>
&nbsp;&nbsp;&nbsp;// Prevent paint from getting cleared out...
<BR>
&nbsp;&nbsp;&nbsp;public void update(Graphics g) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;paint(g);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Repaint all the canvas components...<BR>
&nbsp;&nbsp;&nbsp;public synchronized void paint(Graphics g) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp; int i,x,y;<BR>
&nbsp;&nbsp;&nbsp;&nbsp; Dimension dm;<BR>
&nbsp;&nbsp;&nbsp;&nbsp; int defHeight = 150;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp; // Go through the buttons...<BR>
&nbsp;&nbsp;&nbsp;&nbsp; for (x = y = i = 0; i &lt; 3; ++i) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (button[i] != null) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button[i].paint(g,x,y);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dm = button[i].size();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x += dm.width;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawing[i].paint(g,x,y);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x = 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y += dm.height;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y += defHeight;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp; } // end for<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
 public boolean mouseDown(Event ev, int x, int y) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// See if you clicked on any
of the buttons...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i = 0; i &lt; 3;
++i) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((button[i]
!= null) &amp;&amp; (button[i].inside(x,y)) ) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Hit
Button &quot; + i);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Link to the button's selected field...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button[i].select();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;//
end if<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<BR>
 };<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Parse a parameter and create catalog field...
<BR>
&nbsp;&nbsp;&nbsp;CatalogButton createCatalogButton(String param,String
data) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp; // Set up defaults...<BR>
&nbsp;&nbsp;&nbsp;&nbsp; String fieldName = &quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp; String imageName = &quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp; String style = &quot;MEDIUM&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp; String link = getDocumentBase().toString();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp; // Parse out the string...<BR>
&nbsp;&nbsp;&nbsp;&nbsp; StringTokenizer s = new StringTokenizer(param,&quot;,&quot;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp; if (s.hasMoreTokens()) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fieldName = s.nextToken();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (s.hasMoreTokens()) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; imageName = s.nextToken();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (s.hasMoreTokens()) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;style =
s.nextToken();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (s.hasMoreTokens())
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link
= s.nextToken();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } // end style if<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} // end image if<BR>
&nbsp;&nbsp;&nbsp;&nbsp; } // end field if<BR>
&nbsp;&nbsp;&nbsp;&nbsp; // Figure out the style. Convert it all
to uppercase...<BR>
&nbsp;&nbsp;&nbsp;&nbsp; style = style.toUpperCase();<BR>
&nbsp;&nbsp;&nbsp;&nbsp; int styleType;<BR>
&nbsp;&nbsp;&nbsp;&nbsp; if (style.equals(&quot;MEDIUM&quot;))
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;styleType
= MEDIUM_STYLE;<BR>
&nbsp;&nbsp;&nbsp;&nbsp; else if (style.equals(&quot;SMALL&quot;))
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;styleType
= SMALL_STYLE;<BR>
&nbsp;&nbsp;&nbsp;&nbsp; else if (style.equals(&quot;LARGE&quot;))
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;styleType
= LARGE_STYLE;<BR>
&nbsp;&nbsp;&nbsp;&nbsp; else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;styleType
= DEFAULT_STYLE;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp; // Create button according to these parameters...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp; return new CatalogButton(this,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imageName,fieldName,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;styleFont[styleType],getDocumentBase(),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link,data,dataFont);
<BR>
&nbsp;&nbsp;&nbsp;}<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="TheCatalogButtonClass">The CatalogButton Class</A>
</H3>
<P>
The CatalogButton class is used to represent the choices you can
make for each applet screen. It appears on the left-hand side
of the applet and goes to another URL when the button is selected.
This URL will represent another page in the catalog.
<P>
The CatalogButton constructor takes as input the main and sub
text fields, the corresponding fonts, the background image, and
a URL and relative path used to construct the URL the button will
link to. One of the key things about the class is that its Image
object is loaded through the MediaLoader class (described shortly)
and not through the applet's <TT>getImage()</TT>
method. This approach takes advantage of the caching techniques
that will be developed in the MediaLoader throughout this chapter.
<P>
The <TT>paint()</TT> method is invoked
by the Catalog class and passed the x-y coordinate where the image
should be painted on the applet. It draws the image by using the
<TT>drawImage()</TT> method. It then
draws a title field in the center of the button. The FontMetrics
are used to center the text. Finally, if an additional data field
exists, it is drawn underneath the title in a smaller font.
<P>
If the button is selected, the CatalogButton object changes its
text to white by setting an internal state variable and forcing
a repaint. It then creates a URL object out of the base URL and
its relative path. This URL represents the new catalog page in
which to link. If the URL is successfully created, it links to
the new page with the <TT>showDocument()</TT>
method. If there is an error, then a message is displayed on the
browser's status bar.
<HR>
<BLOCKQUOTE>
<B>Listing 6.8. The CatalogButton class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>import java.awt.*;<BR>
import java.lang.*;<BR>
import java.net.*;<BR>
import java.applet.*;<BR>
<BR>
// This class represents a button on the current page.<BR>
// It represents the lefthand element of a kiosk selection<BR>
// that has a background<BR>
// image and text describing what the button represents.<BR>
// The field has a link to the Web page it should go to<BR>
// if it is selected...<BR>
// Parent of button is responsible for sizing and setting<BR>
// correct position...<BR>
public class CatalogButton extends Canvas {<BR>
&nbsp;&nbsp;&nbsp;String text; // What to display on left side...
<BR>
&nbsp;&nbsp;&nbsp;String data; // Additional data<BR>
&nbsp;&nbsp;&nbsp;URL URLBase; // The base URL to link from...
<BR>
&nbsp;&nbsp;&nbsp;String link; // Where to link to relative to
base...<BR>
&nbsp;&nbsp;&nbsp;Image img; // Background image...<BR>
&nbsp;&nbsp;&nbsp;Font f; // Font to paint with...<BR>
&nbsp;&nbsp;&nbsp;Font dataFont;&nbsp;&nbsp;// Font to paint data
with...<BR>
&nbsp;&nbsp;&nbsp;Applet a; // Use its ImageObserver...<BR>
&nbsp;&nbsp;&nbsp;int lastX,lastY;&nbsp;&nbsp;// Store last coordinates....
<BR>
&nbsp;&nbsp;&nbsp;// Store states of button<BR>
&nbsp;&nbsp;&nbsp;private static final int NORMAL_STATE = 0;<BR>
&nbsp;&nbsp;&nbsp;private static final int SELECTED_STATE = 1;
<BR>
&nbsp;&nbsp;&nbsp;int state;&nbsp;&nbsp;// From above states...
<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Create the catalog button...<BR>
&nbsp;&nbsp;&nbsp;public CatalogButton(Applet aIn,<BR>
&nbsp;&nbsp;&nbsp;&nbsp; String backgroundImage,&nbsp;&nbsp;String
textIn, Font fIn,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URL URLBaseIn, String linkIn,
String dataIn,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Font dataFontIn) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Store
parameters...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a = aIn;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = textIn;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f = fIn;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URLBase
= URLBaseIn;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link = linkIn;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastX =
lastY = -1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state =
NORMAL_STATE;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data = dataIn;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataFont
= dataFontIn;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Now start
loading the background image<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// through
the Media Loader...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;img
= MediaLoader.getMediaLoader().loadImage(URLBase,backgroundImage);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (MediaLoaderException
e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;img
= null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a.showStatus(e.getMessage());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Paint the image...<BR>
&nbsp;&nbsp;&nbsp;public synchronized void paint(Graphics g,int
x,int y) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Kick out if internal image
is bad...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (img == null)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Resize the image, if necessary...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dimension dm = size();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawImage(img,x,y,dm.width,dm.height,a);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Center font in image...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int textX,textY;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setFont(f);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FontMetrics fm = g.getFontMetrics();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (state == NORMAL_STATE)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(Color.black);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setColor(Color.white);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textX = x + ((dm.width - fm.stringWidth(text))/2);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textY = y + ((dm.height -
fm.getHeight())/2);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawString(text,textX,textY);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Show additional data...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.setFont(dataFont);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fm = g.getFontMetrics();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (data != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; textX = x + ((dm.width -
fm.stringWidth(data))/2);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; textY += (2 * fm.getHeight());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(data,textX,textY);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} // end if<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Store the coordinates...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastX = x;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastY = y;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;// See whether coordinates are inside this button...
<BR>
&nbsp;&nbsp;&nbsp;public synchronized boolean inside(int x,int
y) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Kick out if not ready yet...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((lastX &lt; 0) || (lastY
&lt; 0))<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Make clipping rectangles
for comparions...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dimension dm = size();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rectangle thisRect,inRect;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;thisRect = new Rectangle(lastX,lastY,dm.width,dm.height);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inRect = new Rectangle(x,y,0,0);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// See rectangles overlap...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (thisRect.intersects(inRect))
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Button was selected...<BR>
&nbsp;&nbsp;&nbsp;public synchronized void select() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state = SELECTED_STATE;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Force repaint to show selected
state...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dimension dm = size();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a.repaint(lastX,lastY,dm.width,dm.height);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Go to the next URL if there
is a link...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((link != null) &amp;&amp;
(link.length() &gt; 0)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URL
u = new URL(URLBase,link);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Show
new doc: &quot; + u);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a.getAppletContext().showDocument(u);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (MalformedURLException
e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a.showStatus(&quot;Malformed
URL: &quot; + link);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (Exception
e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a.showStatus(&quot;Unable
to go to link: &quot; + e);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} // end if<BR>
&nbsp;&nbsp;&nbsp;}<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="TheSelectionCanvasClass">The SelectionCanvas Class</A>
</H3>
<P>
This class, shown in Listing 6.9, is really a simplified version
of the CatalogButton. Like CatalogButton, it loads an Image from
the MediaLoader. It paints the image at the specified applet parameters
with the <TT>drawImage()</TT> method
of the Graphics class.
<HR>
<BLOCKQUOTE>
<B>Listing 6.9. The SelectionCanvas class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>import java.lang.*;<BR>
import java.awt.*;<BR>
import java.net.URL;<BR>
import java.applet.*;<BR>
<BR>
// Shows visual cue as to what an item is...<BR>
public class SelectionCanvas extends Canvas {<BR>
&nbsp;&nbsp;&nbsp;URL URLBase; // The base URL to link from...
<BR>
&nbsp;&nbsp;&nbsp;Image img; // Display image...<BR>
&nbsp;&nbsp;&nbsp;Applet a; // Use its ImageObserver...<BR>
&nbsp;&nbsp;&nbsp;// Create the canvas display...<BR>
&nbsp;&nbsp;&nbsp;public SelectionCanvas(Applet aIn,<BR>
&nbsp;&nbsp;&nbsp;&nbsp; String displayImage,URL URLBaseIn) {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Store
parameters...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a = aIn;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URLBase
= URLBaseIn;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Now start
loading the background image<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// through
the Media Loader...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;img
= MediaLoader.getMediaLoader().loadImage(URLBase,displayImage);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (MediaLoaderException
e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;img
= null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a.getAppletContext().showStatus(e.getMessage());
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Paint the image...<BR>
&nbsp;&nbsp;&nbsp;public synchronized void paint(Graphics g,int
x,int y) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Kick out if internal image
is bad...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (img == null)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Resize the image if necessary...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dimension dm = size();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.drawImage(img,x,y,a); //
dm.width,dm.height,a);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="TheMediaLoaderClass">The MediaLoader Class</A></H3>
<P>
Listing 6.10 shows some of the code for the MediaLoader class.
This class will be a focal point for developing the catalog project
throughout this part of the book. Eventually, the MediaLoader
class will pre-load images of possible catalog pages that may
be viewed. It will be developed in the next chapter as a background
thread, but in this chapter, it will be part of a single-task
applet.
<P>
The MediaLoader also has an internal cache that keeps track of
images that have been loaded; its major feature is that it needs
to persist across applet invocations. So if you are on one page
of the catalog, go to a Yahoo page, and then go to another catalog
page, the MediaLoader cache should still persist and return any
pre-loaded images that might be found.
<P>
To allow the MediaLoader to have a persistent cache, you need
to prevent the MediaLoader from being instantiated by another
object. Therefore, it has a private constructor. Its variables
are static, so they exist for the class and not for a specific
instantiation. The cache, a Hashtable object, is created once
and only once for the MediaLoader. Therefore, the cache can persist
whether a catalog page is present or not. The MediaLoader and
the cache will exist until they are destroyed-probably by the
browser being shut down.
<P>
The only public method of the MediaLoader is <TT>loadImage()</TT>.
Like <TT>getImage()</TT>, it takes
a URL and a relative path as its parameter. Eventually, the method
calls <TT>getImage()</TT>-although
it uses the Toolkit version of the method, as opposed to the applet
version. It is structured to do this because the MediaLoader should
not be tied to a specific applet; the Toolkit class, which also
persists outside a specific applet, is, therefore, a good match.
After creating the URL, the loader checks to see whether the Image
object is in its cache. The cache is a Hashtable that takes URL
objects as its key and a CacheEntry object as its data. The CacheEntry
object is an instantiation of a simple accessor class that does
nothing more than contain an Image and an age variable (the function
of which will be discussed briefly). If the URL is found in the
cache, the corresponding Image is returned. If it is not found,
then the Toolkit's <TT>getImage()</TT>
method is called. The returned image is then placed in the cache.
<P>
As shown in Listing 6.10, the age field is used for the MediaLoader's
internal &quot;garbage collector.&quot; A static integer counter
called currentAge increases every time the <TT>loadImage()</TT>
method is invoked. The cache entry of the Image returned is then
set to an age that matches the currentAge. This way, it's possible
to tell when an Image has not been used for a while. Occasionally,
the <TT>loadImage()</TT> method will
invoke a method called <TT>sweeper()</TT>.
The role of this method is to remove any cache entries that have
not been used for a while. It does this by enumerating the CacheEntry
objects in the cache, sorting them by age, and removing any objects
older than a certain limit. This limit is set to the size of the
cache; the goal is to keep the number of entries in the cache
to a number near its original size.
<P>
In the next chapter, the <TT>sweeper()</TT>
method will be replaced by a background thread that runs independently
of the MediaLoader.
<HR>
<BLOCKQUOTE>
<B>Listing 6.10. The MediaLoader class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>// This class loads image media through
URL commands and<BR>
// keeps a local cache of images. Each image has an<BR>
// address used for aging. When the image is too<BR>
// old, then it is removed from that cache.<BR>
public class MediaLoader {<BR>
&nbsp;&nbsp;&nbsp;// The loader is static and so can be created
only once<BR>
&nbsp;&nbsp;&nbsp;private static MediaLoader loader = new MediaLoader();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Cache size is used for tracking age of URL
<BR>
&nbsp;&nbsp;&nbsp;static int cacheSize = 40;<BR>
&nbsp;&nbsp;&nbsp;static int currentAge = 0;<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Cache is hashtable...<BR>
&nbsp;&nbsp;&nbsp;static Hashtable cache = new Hashtable(cacheSize);;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Private internal constructor: Create the
cache...<BR>
&nbsp;&nbsp;&nbsp;private MediaLoader() {<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Return reference to this MediaLoader object
<BR>
&nbsp;&nbsp;&nbsp;public static synchronized MediaLoader getMediaLoader()
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return loader;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Load an image through a URL<BR>
&nbsp;&nbsp;&nbsp;// Check to see whether it is in the cache<BR>
&nbsp;&nbsp;&nbsp;// If it isn't, then load it in, store in cache,
<BR>
&nbsp;&nbsp;&nbsp;// and return it<BR>
&nbsp;&nbsp;&nbsp;public synchronized Image loadImage(URL base,String
name) throws </TT><FONT FACE="ZapfDingbats">&Acirc;</FONT><TT>MediaLoaderException
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Create a URL for the image...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URL u;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; u
= new URL(base,name);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (MalformedURLException
e) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw
new MediaLoaderException(&quot;Malformed URL&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// See whether it is in the
cache...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++currentAge;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CacheEntry ce = (CacheEntry)
cache.get(u);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If it's in the cache, update
the age and<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// return image...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ce != null) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ce.setAge(currentAge);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;MediaLoader:
Cache hit URL &quot; + u);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ce.getImage();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// See whether you need to
run the sweeper...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Just run it every 20 fetches...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((currentAge%20) == 0)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sweeper();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Otherwise, get the Image...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;MediaLoader:
Loading URL &quot; + u);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Image img = Toolkit.getDefaultToolkit().getImage(u);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Put in cache...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cache.put(u,new CacheEntry(img,currentAge));
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return img;<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;// Removes any item from cache that has an<BR>
&nbsp;&nbsp;&nbsp;// age that is too old...<BR>
&nbsp;&nbsp;&nbsp;private synchronized void sweeper() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Do nothing if cache is
too small...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (cache.size() &lt; cacheSize)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CacheEntry ce;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Array for placing hashtable
elements...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int ages[] = new int[cache.size()];
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// First step is to go through
and get all the ages...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enumeration em = cache.elements();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i = 0; em.hasMoreElements();
++i) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ce = (CacheEntry)em.nextElement();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ages[i]
= ce.getAge();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Next step is to get minimum
age...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// This is ugly since you
have to perform<BR>
// a sort...<BR>
sort(ages);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Now get nTh element<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int minAge = ages[cacheSize
- 1];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Do nothing if you have
nothing that's old...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (minAge &gt; (currentAge
- cacheSize)) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Nothing
is old enough. No cleaning necessary...&quot;);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Run
Sweeper. Min Age = &quot; + minAge);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Final step is to walk through
and remove<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// old elements...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;em = cache.keys();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URL u;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (em.hasMoreElements())
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u = (URL)em.nextElement();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Get cache
entry...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ce = (CacheEntry)cache.get(u);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// See whether
it's too old...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ce.getAge()
&lt; minAge) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Remove
cache element: &quot; + u);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cache.remove(u);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;// The identifying String of the loader<BR>
&nbsp;&nbsp;&nbsp;public String toString() {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (&quot;MediaLoader
ID: &quot; + hashCode());<BR>
&nbsp;&nbsp;&nbsp;}<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="TheMediaLoaderExceptionClass">The MediaLoaderException
Class</A></H3>
<P>
Listing 6.11 shows the MediaLoaderException class. An instance
of this class is thrown whenever there's a problem with the MediaLoader.
The Exception will usually have a custom detailed message attached
to it. Note that it is a subclass of the AWTException class, which
is a hierarchy of Exceptions related to the AWT package.
<HR>
<BLOCKQUOTE>
<B>Listing 6.11. The MediaLoaderException class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>import java.awt.AWTException;<BR>
<BR>
// Create object for throwing MediaLoaderExceptions...<BR>
public class MediaLoaderException extends AWTException {<BR>
&nbsp;&nbsp;&nbsp;public MediaLoaderException(String msg) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(msg);<BR>
&nbsp;&nbsp;&nbsp;}<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
In this chapter, you see the first steps for developing a catalog-style
application. Its most interesting feature is a cache that uses
static methods to persist across browser pages. This MediaLoader
cache is expanded on in the next chapter to pre-load images from
the next pages of the catalog. This added function is done in
the context of introducing you to the world of multithreading.
Not only will the loader run as a thread, but so will the &quot;sweeper&quot;
that removes old images from the cache.
<P>
<HR WIDTH="100%"></P>

</P></CENTER>

<P>
<HR WIDTH="100%"></P>

<!-- reference library footer #1-->
</CENTER>
<IMG SRC="/images/rule.gif" WIDTH="460" HEIGHT="5" VSPACE="5"
ALT="Ruler image"><br>

<FONT SIZE="-1">

Contact <a href="mailto:reference@developer.com">
reference@developer.com</a> with questions or comments.<br>


<a href="/legal/">
Copyright 1998</a> 
<a href="http://www.earthweb.com" target="_top">
EarthWeb Inc.</a>,  All rights reserved.<BR>
PLEASE READ THE <a href="/reference/usage.html">ACCEPTABLE USAGE STATEMENT</a>.
<BR>
Copyright 1998 Macmillan Computer Publishing. All rights reserved.
</FONT>
</BLOCKQUOTE>


<!--outer table--><TD VALIGN="TOP">

<!--right side ads -->
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD1.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD1.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>
<a target="resource window" href="http://adserver.developer.com/cgi-bin/accipiter/adclick.exe/AREA=DCAD2.REF" alt="Click here for more info"><img src="http://adserver.developer.com/cgi-bin/accipiter/adserver.exe/AREA=DCAD2.REF" alt="Click here for more info" height="88" width="88" border="0"></a>
<P>



</td>
</tr>
</table>
</BODY>
</HTML>



