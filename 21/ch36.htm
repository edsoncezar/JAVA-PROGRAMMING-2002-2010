<HTML>
<HEAD>

<META>
<TITLE>appendix H -- java.awt.peer Package Reference</TITLE>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT SIZE=6 COLOR=#FF0000>appendix&nbsp;H</FONT></H1>
<H1><FONT COLOR=#FF0000><TT>java.awt.peer</TT></FONT><FONT SIZE=6 COLOR=#FF0000>
Package Reference</FONT></H1>
<HR>
<P>
<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>
<UL>
<LI><A HREF="#TTFONTSIZEFACECourierButtonPeerFONTTT">
<TT>ButtonPeer</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierCanvasPeerFONTTT">
<TT>CanvasPeer</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierCheckboxMenuItemPeerFONTTT">
<TT>CheckboxMenuItemPeer</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierCheckboxPeerFONTTT">
<TT>CheckboxPeer</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierChoicePeerFONTTT">
<TT>ChoicePeer</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierComponentPeerFONTTT">
<TT>ComponentPeer</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierContainerPeerFONTTT">
<TT>ContainerPeer</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierDialogPeerFONTTT">
<TT>DialogPeer</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierFileDialogPeerFONTTT">
<TT>FileDialogPeer</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierFramePeerFONTTT">
<TT>FramePeer</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierLabelPeerFONTTT">
<TT>LabelPeer</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierListPeerFONTTT">
<TT>ListPeer</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourieraddItemFONTTT">
<TT>addItem</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierMenuBarPeerFONTTT">
<TT>MenuBarPeer</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierMenuComponentPeerFONTTT">
<TT>MenuComponentPeer</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierMenuItemPeerFONTTT">
<TT>MenuItemPeer</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierMenuPeerFONTTT">
<TT>MenuPeer</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierPanelPeerFONTTT">
<TT>PanelPeer</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierScrollbarPeerFONTTT">
<TT>ScrollbarPeer</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierTextAreaPeerFONTTT">
<TT>TextAreaPeer</TT></A>
<LI><A HREF="#TTFONTSIZEFACECourierTextComponentPeerFONTTT">
<TT>TextComponentPeer</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierTextFieldPeerFONTTT">
<TT>TextFieldPeer</TT>
</A>
<LI><A HREF="#TTFONTSIZEFACECourierWindowPeerFONTTT">
<TT>WindowPeer</TT></A>
</UL>

<HR>
<P>
The <TT>java.awt.peer</TT> package
is interesting because it contains no classes. Every object defined
within the <TT>java.awt.peer</TT>
package is an interface. By examining the contents of the classes
in the <TT>java.awt</TT> package,
you will find that all the GUI components in that package implement
the interfaces found in the <TT>java.awt.peer</TT>
package. Nearly all the methods defined in the <TT>java.awt.peer</TT>
interfaces are <I>friendly</I> methods, meaning that they can
only be accessed from within <TT>java.awt</TT>
package classes.
<H2><A NAME="TTFONTSIZEFACECourierButtonPeerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>ButtonPeer</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>ComponentPeer</TT>
<BR>
The <TT>ButtonPeer</TT> interface
extends interface <TT>java.awt.peer.ComponentPeer</TT>.
The <TT>ButtonPeer</TT> interface
provides the basic structure required for button component functionality.
</BLOCKQUOTE>
<H4><TT>setLabel</TT></H4>
<BLOCKQUOTE>
<TT>void setLabel(String label)<BR>
</TT>The <TT>setLabel method</TT>
should set the displayed label for the button using the specified
label string.<BR>
<I><B>Parameters: </B></I><TT>label</TT>-a
string that will be displayed as the button's label.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierCanvasPeerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>CanvasPeer</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>ComponentPeer</TT>
<BR>
The <TT>CanvasPeer</TT> interface
extends interface <TT>java.awt.peer.ComponentPeer</TT>.
The <TT>CanvasPeer</TT> interface
provides the basic structure required for canvas component functionality.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierCheckboxMenuItemPeerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>CheckboxMenuItemPeer</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>MenuItemPeer</TT>
<BR>
The <TT>CheckboxMenuItemPeer</TT>
interface extends interface <TT>java.awt.peer.MenuItemPeer</TT>.
The <TT>CheckboxMenuItemPeer</TT>
interface provides the basic structure required for check box
menu item component functionality.
</BLOCKQUOTE>
<H4><TT>setState</TT></H4>
<BLOCKQUOTE>
<TT>void setState(boolean t)<BR>
</TT>The <TT>setState method</TT>
sets the checked state of a check box menu item.<BR>
<I><B>Parameters: </B></I><TT>t</TT>-a
boolean value that will be <TT>true</TT>
if the check box is to be checked, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierCheckboxPeerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>CheckboxPeer</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>ComponentPeer</TT>
<BR>
The <TT>CheckboxPeer</TT> interface
extends interface <TT>java.awt.peer.ComponentPeer</TT>.
The <TT>CheckboxPeer</TT> interface
provides the basic structure required for check box component
functionality.
</BLOCKQUOTE>
<H4><TT>setState</TT></H4>
<BLOCKQUOTE>
<TT>void setState(boolean state)<BR>
</TT>The <TT>setState method</TT>
sets the checked state of a check box.<BR>
<I><B>Parameters: </B></I><TT>t</TT>-a
boolean value that will be <TT>true</TT>
if the check box is to be checked, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>setCheckboxGroup</TT></H4>
<BLOCKQUOTE>
<TT>void setCheckboxGroup(CheckboxGroup g)
<BR>
</TT>The <TT>setCheckboxGroup method</TT>
should set which check box group the check box belongs to, using
the specified check box group.<BR>
<I><B>Parameters: </B></I><TT>g</TT>-a
<TT>CheckboxGroup</TT> object that
this check box will be a member of.
</BLOCKQUOTE>
<H4><TT>setLabel</TT></H4>
<BLOCKQUOTE>
<TT>void setLabel(String label)<BR>
</TT>The <TT>setLabel method</TT>
should set the displayed label for the check box using the specified
label string.<BR>
<I><B>Parameters: </B></I><TT>label</TT>-a
<TT>String</TT> that will be displayed
as the check box's label.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierChoicePeerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>ChoicePeer</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>ComponentPeer</TT>
<BR>
The <TT>ChoicePeer</TT> interface
extends interface <TT>java.awt.peer.ComponentPeer</TT>.
The <TT>ChoicePeer</TT> interface
provides the basic structure required for <TT>Choice</TT>
component functionality.
</BLOCKQUOTE>
<H4><TT>addItem</TT></H4>
<BLOCKQUOTE>
<TT>void addItem(String item, int index)
<BR>
</TT>The <TT>addItem method</TT>
adds the specified item to the choice list at the specified list
index.<BR>
<I><B>Parameters: </B></I><TT>item</TT>-a
string value representing the item to be added to the choice list.
<BR>
<I><B>Parameters: </B></I><TT>index</TT>-the
integer index into the choice list where the item parameter is
to be added.
</BLOCKQUOTE>
<H4><TT>select</TT></H4>
<BLOCKQUOTE>
<TT>void select(int index)<BR>
</TT>The <TT>select method</TT>
selects the choice list item at the specified index.<BR>
<I><B>Parameters: </B></I><TT>index</TT>-the
index into the choice list to be selected.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierComponentPeerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>ComponentPeer</TT>
</FONT></A></H2>
<P>
The <TT>ComponentPeer</TT> interface
extends class <TT>java.lang.Object</TT>.
The <TT>ComponentPeer</TT> interface
provides the basic structure required for component functionality.
<H4><TT>show</TT></H4>
<BLOCKQUOTE>
<TT>void show()<BR>
</TT>The <TT>show method</TT>
should be implemented to make the <TT>Component</TT>
object visible.
</BLOCKQUOTE>
<H4><TT>hide</TT></H4>
<BLOCKQUOTE>
<TT>void hide()<BR>
</TT>The <TT>hide method</TT>
should hide the component so that is not visible.
</BLOCKQUOTE>
<H4><TT>enable</TT></H4>
<BLOCKQUOTE>
<TT>void enable()<BR>
</TT>The <TT>enable method</TT>
should enable the component so that it can be selected by the
user.
</BLOCKQUOTE>
<H4><TT>disable</TT></H4>
<BLOCKQUOTE>
<TT>void disable()<BR>
</TT>The <TT>disable method</TT>
should disable the component (gray it out, and so on) so that
it cannot be selected by the user.
</BLOCKQUOTE>
<H4><TT>paint</TT></H4>
<BLOCKQUOTE>
<TT>void paint(Graphics g)<BR>
</TT>The <TT>paint method</TT>
should display the component using the specified <TT>Graphics</TT>
context.<BR>
<I><B>Parameters: </B></I><TT>g</TT>-a
<TT>Graphics</TT> object used for
drawing purposes.
</BLOCKQUOTE>
<H4><TT>repaint</TT></H4>
<BLOCKQUOTE>
<TT>void repaint(long tm, int x, int y, int
width, int height)<BR>
</TT>The <TT>repaint method</TT>
repaints a part of the component at some specified time in the
Qfuture.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>tm</TT>-maximum time in milliseconds
before the update.<BR>
<TT>x</TT>-the x coordinate of the
component's bounding rectangle to repaint.<BR>
<TT>y</TT>-the y coordinate of the
component's bounding rectangle to repaint.<BR>
<TT>width</TT>-the width of the component's
bounding rectangle to repaint.<BR>
<TT>height</TT>-the height of the
component's bounding rectangle to repaint.
</BLOCKQUOTE>
<H4><TT>print</TT></H4>
<BLOCKQUOTE>
<TT>void print(Graphics g)<BR>
</TT>The <TT>print method</TT>
should print the component using the specified <TT>Graphics</TT>
object.<BR>
<I><B>Parameters: </B></I><TT>g</TT>-a
<TT>Graphics</TT> object used for
drawing purposes.
</BLOCKQUOTE>
<H4><TT>reshape</TT></H4>
<BLOCKQUOTE>
<TT>void reshape(int x, int y, int width,
int height)<BR>
</TT>The <TT>reshape method</TT>
reshapes the component to the specified bounding rectangle.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>x</TT>-the x coordinate of the
component's new bounding rectangle.<BR>
<TT>y</TT>-the y coordinate of the
component's new bounding rectangle.<BR>
<TT>width</TT>-the width of the component's
new bounding rectangle.<BR>
<TT>height</TT>-the height of the
component's new bounding rectangle.
</BLOCKQUOTE>
<H4><TT>handleEvent</TT></H4>
<BLOCKQUOTE>
<TT>boolean handleEvent(Event e)<BR>
</TT>The <TT>handleEvent method</TT>
should handle the specified event for the component.<BR>
<I><B>Parameters: </B></I><TT>e</TT>-an
<TT>Event</TT> object encapsulating
some system event.
</BLOCKQUOTE>
<H4><TT>minimumSize</TT></H4>
<BLOCKQUOTE>
<TT>Dimension minimumSize()<BR>
</TT>The <TT>minimumSize method</TT>
returns the minimum size allowable for the component.<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object containing the component's minimum size.
</BLOCKQUOTE>
<H4><TT>preferredSize</TT></H4>
<BLOCKQUOTE>
<TT>Dimension preferredSize()<BR>
</TT>The <TT>preferredSize method</TT>
returns the preferred size allowable for the component.<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object containing the component's preferred size.
</BLOCKQUOTE>
<H4><TT>getColorModel</TT></H4>
<BLOCKQUOTE>
<TT>ColorModel getColorModel()<BR>
</TT>The <TT>getColorModel method</TT>
returns the color model used for this component.<BR>
<I><B>Returns: </B></I>A <TT>ColorModel</TT>
object that contains the component's color model information.
</BLOCKQUOTE>
<H4><TT>getToolkit</TT></H4>
<BLOCKQUOTE>
<TT>Toolkit getToolkit()<BR>
</TT>The <TT>getToolkit method</TT>
returns the component's managing tool kit.<BR>
<I><B>Returns: </B></I>A <TT>Toolkit</TT>
object.
</BLOCKQUOTE>
<H4><TT>getGraphics</TT></H4>
<BLOCKQUOTE>
<TT>Graphics getGraphics()<BR>
</TT>The <TT>getGraphics method</TT>
returns a <TT>Graphics</TT> context
for the component.<BR>
<I><B>Returns: </B></I>A <TT>Graphics</TT>
object used for drawing purposes.
</BLOCKQUOTE>
<H4><TT>getFontMetrics</TT></H4>
<BLOCKQUOTE>
<TT>FontMetrics getFontMetrics(Font font)
<BR>
</TT>The <TT>getFontMetrics method</TT>
returns the font metrics information for the specified <TT>Font</TT>.
<BR>
<I><B>Parameters: </B></I><TT>font</TT>-a
<TT>Font</TT> object.<BR>
<I><B>Returns: </B></I>A <TT>FontMetrics</TT>
object containing metrics information on the specified font.
</BLOCKQUOTE>
<H4><TT>dispose</TT></H4>
<BLOCKQUOTE>
<TT>void dispose()<BR>
</TT>The <TT>dispose method</TT>
disposes of a component's resources and the component itself.
</BLOCKQUOTE>
<H4><TT>setForeground</TT></H4>
<BLOCKQUOTE>
<TT>void setForeground(Color c)<BR>
</TT>The <TT>setForeground method</TT>
sets the foreground color for the component using the specified
color.<BR>
<I><B>Parameters: </B></I><TT>c</TT>-a
<TT>Color</TT> object specifying which
color to use for the foreground color.
</BLOCKQUOTE>
<H4><TT>setBackground</TT></H4>
<BLOCKQUOTE>
<TT>void setBackground(Color c)<BR>
</TT>The <TT>setBackground method</TT>
sets the background color for the component using the specified
color.<BR>
<I><B>Parameters: </B></I><TT>c</TT>-a
<TT>Color</TT> object specifying which
color to use for the background color.
</BLOCKQUOTE>
<H4><TT>setFont</TT></H4>
<BLOCKQUOTE>
<TT>void setFont(Font f)<BR>
</TT>The <TT>setFont method</TT>
sets the font to use for this component using the specified font.
<BR>
<I><B>Parameters: </B></I><TT>f</TT>-a
<TT>Font</TT> object specifying which
font to use for the component.
</BLOCKQUOTE>
<H4><TT>requestFocus</TT></H4>
<BLOCKQUOTE>
<TT>void requestFocus()<BR>
</TT>The <TT>requestFocus method</TT>
requests the input focus for the component.
</BLOCKQUOTE>
<H4><TT>nextFocus</TT></H4>
<BLOCKQUOTE>
<TT>void nextFocus()<BR>
</TT>The <TT>nextFocus method</TT>
shifts the focus to the next component on the screen.
</BLOCKQUOTE>
<H4><TT>createImage</TT></H4>
<BLOCKQUOTE>
<TT>Image createImage(ImageProducer producer)
<BR>
</TT>The <TT>createImage method</TT>
creates an <TT>Image</TT> object using
the specified <TT>ImageProducer</TT>
interface.<BR>
<I><B>Parameters: </B></I><TT>producer</TT>-an
<TT>ImageProducer</TT> derived object
used to produce an image.<BR>
<I><B>Returns: </B></I>An <TT>Image</TT>
object.
</BLOCKQUOTE>
<H4><TT>createImage</TT></H4>
<BLOCKQUOTE>
<TT>Image createImage(int width, int height)
<BR>
</TT>This <TT>createImage method</TT>
creates an image for offscreen use using the specified sizes.
<BR>
<I><B>Parameters:<BR>
</B></I><TT>width</TT>-the width of
the image to be created.<BR>
<TT>height</TT>-the height of the
image to be created.<BR>
<I><B>Returns: </B></I>An <TT>Image</TT>
object.
</BLOCKQUOTE>
<H4><TT>prepareImage</TT></H4>
<BLOCKQUOTE>
<TT>boolean prepareImage(Image img, int w,
int h, ImageObserver o)<BR>
</TT>The <TT>prepareImage method</TT>
prepares the image for rendering on this component using the specified
parameters.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>img</TT>-an <TT>Image</TT>
object to be rendered.<BR>
<TT>w</TT>-the width of the rectangle
to render the image in.<BR>
<TT>h</TT>-the height of the rectangle
to render the image in.<BR>
<TT>o</TT>-the image observer used
to monitor the image rendering.<BR>
<I><B>Returns: </B></I>A boolean value that is true if the image
was rendered successfully, false if not.
</BLOCKQUOTE>
<H4><TT>checkImage</TT></H4>
<BLOCKQUOTE>
<TT>int checkImage(Image img, int w, int
h, ImageObserver o)<BR>
</TT>The <TT>checkImage method</TT>
returns the status of a scaled rendering of a specified <TT>Image</TT>.
<BR>
<I><B>Parameters:<BR>
</B></I><TT>img</TT>-an <TT>Image</TT>
object to be rendered.<BR>
<TT>w</TT>-the width of the rectangle
to render the image in.<BR>
<TT>h</TT>-the height of the rectangle
to render the image in.<BR>
<TT>o</TT>-the image observer used
to monitor the image rendering.<BR>
<I><B>Returns: </B></I>An integer value containing the boolean
OR of the image observer status flags.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierContainerPeerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>ContainerPeer</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>ComponentPeer</TT>
<BR>
The <TT>ContainerPeer</TT> interface
extends interface <TT>java.awt.peer.ComponentPeer</TT>.
The <TT>ContainerPeer</TT> interface
provides the basic structure required for container component
functionality.
</BLOCKQUOTE>
<H4><TT>insets</TT></H4>
<BLOCKQUOTE>
<TT>Insets insets()<BR>
</TT>The <TT>insets method</TT>
returns an <TT>Insets</TT> object
representing the insets of the container.<BR>
<I><B>Returns: </B></I>An <TT>Insets</TT>
object.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierDialogPeerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>DialogPeer</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>WindowPeer</TT>
<BR>
The <TT>DialogPeer</TT> interface
extends interface <TT>java.awt.peer.WindowPeer</TT>.
The <TT>DialogPeer</TT> interface
provides the basic structure required for dialog box component
functionality.
</BLOCKQUOTE>
<H4><TT>setTitle</TT></H4>
<BLOCKQUOTE>
<TT>void setTitle(String title)<BR>
</TT>The <TT>setTitle method</TT>
sets the title to be displayed on the dialog's title bar.<BR>
<I><B>Parameters: </B></I><TT>title</TT>-a
string value that will be used as the dialog's title.
</BLOCKQUOTE>
<H4><TT>setResizable</TT></H4>
<BLOCKQUOTE>
<TT>void setResizable(boolean resizeable)
<BR>
</TT>The <TT>setResizable method</TT>
determines the dialog's resize state.<BR>
<I><B>Parameters: </B></I><TT>resizeable</TT>-a
boolean value that is <TT>true</TT>
if the dialog can be resized, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierFileDialogPeerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>FileDialogPeer</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>DialogPeer</TT>
<BR>
The <TT>FileDialogPeer</TT> interface
extends interface <TT>java.awt.peer.DialogPeer</TT>.
The <TT>FileDialogPeer</TT> interface
provides the basic structure required for file selection dialog
component func-tionality.
</BLOCKQUOTE>
<H4><TT>setFile</TT></H4>
<BLOCKQUOTE>
<TT>void setFile(String file)<BR>
</TT>The <TT>setFile method</TT>
sets the filename to be displayed in the file dialog.<BR>
<I><B>Parameters: </B></I><TT>file</TT>-a
string value representing a filename.
</BLOCKQUOTE>
<H4><TT>setDirectory</TT></H4>
<BLOCKQUOTE>
<TT>void setDirectory(String dir)<BR>
</TT>The <TT>setDirectory method</TT>
sets the directory to be selected in the file dialog.<BR>
<I><B>Parameters: </B></I><TT>dir</TT>-a
string value representing the directory name.
</BLOCKQUOTE>
<H4><TT>setFilenameFilter</TT></H4>
<BLOCKQUOTE>
<TT>void setFilenameFilter(FilenameFilter
filter)<BR>
</TT>The <TT>setFilenameFilter()</TT>
sets the filter to be used in the file dialog.<BR>
<I><B>Parameters: </B></I><TT>filter</TT>-a
<TT>FilenameFilter</TT> object used
to filter filenames.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierFramePeerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>FramePeer</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>WindowPeer</TT>
<BR>
The <TT>FramePeer</TT> interface extends
interface <TT>java.awt.peer.WindowPeer</TT>.
The <TT>FramePeer</TT> interface provides
the basic structure required for frame component functionality.
</BLOCKQUOTE>
<H4><TT>setTitle</TT></H4>
<BLOCKQUOTE>
<TT>void setTitle(String title)<BR>
</TT>The <TT>setTitle method</TT>
sets the title of the frame to the specified title string.<BR>
<I><B>Parameters: </B></I><TT>title</TT>-a
string value representing the frame's title.
</BLOCKQUOTE>
<H4><TT>setIconImage</TT></H4>
<BLOCKQUOTE>
<TT>void setIconImage(Image im)<BR>
</TT>The <TT>setIconImage method</TT>
sets the image to be used when the frame is iconized.<BR>
<I><B>Parameters: </B></I><TT>im</TT>-an
<TT>Image</TT> object.
</BLOCKQUOTE>
<H4><TT>setMenuBar</TT></H4>
<BLOCKQUOTE>
<TT>void setMenuBar(MenuBar mb)<BR>
</TT>The <TT>setMenuBar method</TT>
sets the menu bar to be used for the frame.<BR>
<I><B>Parameters: </B></I><TT>mb</TT>-A
<TT>MenuBar</TT> object.
</BLOCKQUOTE>
<H4><TT>setResizable</TT></H4>
<BLOCKQUOTE>
<TT>void setResizable(boolean resizeable)
<BR>
</TT>The <TT>setResizable method</TT>
determines the resize state of the frame.<BR>
<I><B>Parameters: </B></I><TT>resizeable</TT>-a
boolean value that is <TT>true</TT>
if the frame can be resized, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>setCursor</TT></H4>
<BLOCKQUOTE>
<TT>void setCursor(int cursorType)<BR>
</TT>The <TT>setCursor method</TT>
sets the cursor type for the frame.<BR>
<I><B>Parameters: </B></I><TT>cursorType</TT>-an
integer value representing the cursor type.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierLabelPeerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>LabelPeer</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>ComponentPeer</TT>
<BR>
The <TT>LabelPeer</TT> interface extends
interface <TT>java.awt.peer.ComponentPeer</TT>.
The <TT>LabelPeer</TT> interface provides
the basic structure required for label component functionality.
</BLOCKQUOTE>
<H4><TT>setText</TT></H4>
<BLOCKQUOTE>
<TT>void setText(String label)<BR>
</TT>The <TT>setText method</TT>
sets the text to be displayed on the label.<BR>
<I><B>Parameters: </B></I><TT>label</TT>-a
string value that is used as the label string.
</BLOCKQUOTE>
<H4><TT>setAlignment</TT></H4>
<BLOCKQUOTE>
<TT>void setAlignment(int alignment)<BR>
</TT>The <TT>setAlignment method</TT>
sets the alignment type of the label.<BR>
<I><B>Parameters: </B></I><TT>alignment</TT>-an
integer value that determines the alignment of the label (<TT>LEFT</TT>,
<TT>RIGHT</TT>, or <TT>CENTER</TT>).
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierListPeerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>ListPeer</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>ComponentPeer</TT>
<BR>
The <TT>ListPeer</TT> interface extends
interface <TT>java.awt.peer.ComponentPeer</TT>.
The <TT>ListPeer</TT> interface provides
the basic structure required for list component functionality.
</BLOCKQUOTE>
<H4><TT>getSelectedIndexes</TT></H4>
<BLOCKQUOTE>
<TT>int[] getSelectedIndexes()<BR>
</TT>The <TT>getSelectedIndexes method</TT>
returns an array containing the selected indexes in the list.
<BR>
<I><B>Returns: </B></I>An integer array containing the indexes
that are currently selected in the list.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourieraddItemFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>addItem</TT></FONT></A></H2>
<BLOCKQUOTE>
<TT>void addItem(String item, int index)
<BR>
</TT>The <TT>addItem method</TT>
adds a <TT>String</TT> item at the
specified index.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>item</TT>-a string value to be
added to the list.<BR>
<TT>index</TT>-an integer value representing
the index into the list.
</BLOCKQUOTE>
<H4><TT>delItems</TT></H4>
<BLOCKQUOTE>
<TT>void delItems(int start, int end)<BR>
</TT>The <TT>delItems method</TT>
deletes a range of values from the list using the specified range
values.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>start</TT>-an integer value marking
the start of the deletion range.<BR>
<TT>end</TT>-an integer value marking
the end of the deletion range.
</BLOCKQUOTE>
<H4><TT>clear</TT></H4>
<BLOCKQUOTE>
<TT>void clear()<BR>
</TT>The <TT>clear method</TT>
clears all elements from the list.
</BLOCKQUOTE>
<H4><TT>select</TT></H4>
<BLOCKQUOTE>
<TT>void select(int index)<BR>
</TT>This <TT>select method</TT>
selects the specified index.<BR>
<I><B>Parameters: </B></I><TT>index</TT>-an
integer value specifying the item in the list to be selected.
</BLOCKQUOTE>
<H4><TT>deselect</TT></H4>
<BLOCKQUOTE>
<TT>void deselect(int index)<BR>
</TT>The <TT>deselect method</TT>
deselects an item within the list.<BR>
<I><B>Parameters: </B></I><TT>index</TT>-an
integer value specifying the item in the list to be deselected.
</BLOCKQUOTE>
<H4><TT>makeVisible</TT></H4>
<BLOCKQUOTE>
<TT>void makeVisible(int index)<BR>
</TT>The <TT>makeVisible method</TT>
forces the list to scroll, if necessary, so that the specified
index will be made visible to the user.<BR>
<I><B>Parameters: </B></I><TT>index</TT>-an
integer value representing the index to be made visible.
</BLOCKQUOTE>
<H4><TT>setMultipleSelections</TT>
</H4>
<BLOCKQUOTE>
<TT>void setMultipleSelections(boolean v)
<BR>
</TT>The <TT>setMultipleSelections
method</TT> specifies whether the list should allow multiple
selections or not.<BR>
<I><B>Parameters: </B></I><TT>v</TT>-a
boolean value that is <TT>true</TT>
if multiple selections are to be allowed, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>preferredSize</TT></H4>
<BLOCKQUOTE>
<TT>Dimension preferredSize(int v)<BR>
</TT>The <TT>preferredSize method</TT>
sets the preferred size for a list of the specified number of
items.<BR>
<I><B>Parameters: </B></I><TT>v</TT>-an
integer value specifying the number of items within the list.
<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object containing the preferred size of the list.
</BLOCKQUOTE>
<H4><TT>minimumSize</TT></H4>
<BLOCKQUOTE>
<TT>Dimension minimumSize(int v)<BR>
</TT>The <TT>minimumSize method</TT>
sets the minimum size for a list of the specified number of items.
<BR>
<I><B>Parameters: </B></I><TT>v</TT>-an
integer value specifying the number of items within the list.
<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object containing the minimum size of the list.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierMenuBarPeerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>MenuBarPeer</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>MenuComponentPeer</TT>
<BR>
The <TT>MenuBarPeer</TT> interface
extends interface <TT>java.awt.peer.MenuComponentPeer</TT>.
The <TT>MenuBarPeer</TT> interface
provides the basic structure required for menu bar component functionality.
</BLOCKQUOTE>
<H4><TT>addMenu</TT></H4>
<BLOCKQUOTE>
<TT>void addMenu(Menu m)<BR>
</TT>The <TT>addMenu method</TT>
adds the specified <TT>Menu</TT> to
the menu bar.<BR>
<I><B>Parameters: </B></I><TT>m</TT>-the
<TT>Menu</TT> object to be added to
the menu bar.
</BLOCKQUOTE>
<H4><TT>delMenu</TT></H4>
<BLOCKQUOTE>
<TT>void delMenu(int index)<BR>
</TT>The <TT>delMenu method</TT>
deletes the menu at the specified index from the menu bar.<BR>
<I><B>Parameters: </B></I><TT>index</TT>-an
integer value representing the index to be deleted from the menu
bar.
</BLOCKQUOTE>
<H4><TT>addHelpMenu</TT></H4>
<BLOCKQUOTE>
<TT>void addHelpMenu(Menu m)<BR>
</TT>The <TT>addHelpMenu</TT>
adds a help menu to the menu bar.<BR>
<I><B>Parameters: </B></I><TT>m</TT>-the
<TT>Menu</TT> object to be added to
the menu bar.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierMenuComponentPeerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>MenuComponentPeer</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>MenuComponentPeer</TT>
<BR>
The <TT>MenuComponentPeer</TT> interface
extends interface <TT>java.awt.peer.MenuComponentPeer</TT>.
The <TT>MenuComponentPeer</TT> interface
provides the basic structure required for menu component functionality.
</BLOCKQUOTE>
<H4><TT>dispose</TT></H4>
<BLOCKQUOTE>
<TT>void dispose()<BR>
</TT>The <TT>dispose method</TT>
disposes of a <TT>MenuComponent</TT>'s
allocated resources.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierMenuItemPeerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>MenuItemPeer</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>MenuComponentPeer</TT>
<BR>
The <TT>MenuItemPeer</TT> interface
extends interface <TT>java.awt.peer.MenuComponentPeer</TT>.
The <TT>MenuItemPeer</TT> interface
provides the basic structure required for menu item component
functionality.
</BLOCKQUOTE>
<H4><TT>setLabel</TT></H4>
<BLOCKQUOTE>
<TT>void setLabel(String label)<BR>
</TT>The <TT>setLabel method</TT>
sets the label string that will be displayed on the menu item.
<BR>
<I><B>Parameters: </B></I><TT>label</TT>-a
string value that will be displayed as the menu item's label.
</BLOCKQUOTE>
<H4><TT>enable</TT></H4>
<BLOCKQUOTE>
<TT>void enable()<BR>
</TT>The <TT>enable method</TT>
enables the menu item for user selection.
</BLOCKQUOTE>
<H4><TT>disable</TT></H4>
<BLOCKQUOTE>
<TT>void disable()<BR>
</TT>The <TT>disable method</TT>
disables the menu item for user selection.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierMenuPeerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>MenuPeer</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>MenuItemPeer</TT>
<BR>
The <TT>MenuPeer</TT> interface extends
interface <TT>java.awt.peer.MenuItemPeer</TT>.
The <TT>MenuPeer</TT> interface provides
the basic structure required for menu component functionality.
</BLOCKQUOTE>
<H4><TT>addSeparator</TT></H4>
<BLOCKQUOTE>
<TT>void addSeparator()<BR>
</TT>The <TT>addSeparator method</TT>
adds a separator element to the menu. A separator is an item like
a line that cannot be selected by the user and that will not trigger
a menu selection event.
</BLOCKQUOTE>
<H4><TT>addItem</TT></H4>
<BLOCKQUOTE>
<TT>void addItem(MenuItem item)<BR>
</TT>The <TT>addItem method</TT>
adds a menu item to the menu.<BR>
<I><B>Parameters: </B></I><TT>item</TT>-a
<TT>MenuItem</TT> object.
</BLOCKQUOTE>
<H4><TT>delItem</TT></H4>
<BLOCKQUOTE>
<TT>void delItem(int index)<BR>
</TT>The <TT>delItem method</TT>
deletes the menu item at the specified index.<BR>
<I><B>Parameters: </B></I><TT>index</TT>-an
integer value representing the index on the menu to be deleted.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierPanelPeerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>PanelPeer</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>ContainerPeer</TT>
<BR>
The <TT>PanelPeer</TT> interface extends
interface <TT>java.awt.peer.ContainerPeer</TT>.
The <TT>PanelPeer</TT> interface provides
the basic structure required for panel component functionality.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierScrollbarPeerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>ScrollbarPeer</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>ComponentPeer</TT>
<BR>
The <TT>ScrollbarPeer</TT> interface
extends interface <TT>java.awt.peer.ComponentPeer</TT>.
The <TT>ScrollbarPeer</TT> interface
provides the basic structure required for scrollbar component
functionality.
</BLOCKQUOTE>
<H4><TT>setValue</TT></H4>
<BLOCKQUOTE>
<TT>void setValue(int value)<BR>
</TT>The <TT>setValue method</TT>
sets the value of the scrollbar.<BR>
<I><B>Parameters: </B></I><TT>value</TT>-an
integer value representing the value (position) of the scrollbar.
</BLOCKQUOTE>
<H4><TT>setValues</TT></H4>
<BLOCKQUOTE>
<TT>void setValues(int value, int visible,
int minimum, int maximum)<BR>
</TT>The setValues method sets the specified properties
of the scrollbar.
</BLOCKQUOTE>
<P>
<I><B>Parameters: </B></I>
<BLOCKQUOTE>
<TT>value</TT>-the new value of the
scrollbar.<BR>
<TT>visible</TT>-the number of units
to be displayed by the scrollbar.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>minimum</TT>-the minimum value
of the scrollbar.<BR>
<TT>maximum</TT>-the maximum value
of the scrollbar.
</BLOCKQUOTE>
<H4><TT>setLineIncrement</TT></H4>
<BLOCKQUOTE>
<TT>void setLineIncrement(int l)<BR>
</TT>The <TT>setLineIncrement method</TT>
sets the increment value represented by a user clicking on a scrollbar
line up/down widget.<BR>
<I><B>Parameters: </B></I><TT>l</TT>-an
integer value representing the line increment value.
</BLOCKQUOTE>
<H4><TT>setPageIncrement</TT></H4>
<BLOCKQUOTE>
<TT>void setPageIncrement(int l)<BR>
</TT>The <TT>setPageIncrement method</TT>
sets the increment value represented by a user clicking on a scrollbar
page up/down widget.<BR>
<I><B>Parameters: </B></I><TT>l</TT>-an
integer value representing the page increment value.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierTextAreaPeerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>TextAreaPeer</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>TextComponentPeer</TT>
<BR>
The <TT>TextAreaPeer</TT> interface
extends interface <TT>java.awt.peer.TextAreaPeer</TT>.
The <TT>TextAreaPeer</TT> interface
provides the basic structure required for text area component
functionality.
</BLOCKQUOTE>
<H4><TT>insertText</TT></H4>
<BLOCKQUOTE>
<TT>void insertText(String txt, int pos)
<BR>
</TT>The <TT>insertText method</TT>
inserts the specified text at the specified position within the
text area.<BR>
<I><B>Parameters:</B></I> <BR>
<TT>txt</TT>-a string value representing
the text to be inserted.<BR>
<TT>pos</TT>-an integer value representing
the position within the text area to insert the text at.
</BLOCKQUOTE>
<H4><TT>replaceText</TT></H4>
<BLOCKQUOTE>
<TT>void replaceText(String txt, int start,
int end)<BR>
</TT>The <TT>replaceText</TT>
method replaces text at the specified positions with the new text.
<BR>
<I><B>Parameters:</B></I> <BR>
<TT>txt</TT>-a string value representing
the text to be inserted into the text area.<BR>
<TT>start</TT>-an integer value containing
the start position of the text to be replaced.<BR>
<TT>end</TT>-an integer value containing
the end position of the text to be replaced.
</BLOCKQUOTE>
<H4><TT>preferredSize</TT></H4>
<BLOCKQUOTE>
<TT>Dimension preferredSize(int rows, int
cols)<BR>
</TT>The <TT>preferredSize method</TT>
returns the preferred size of a text area of the specified dimensions.
<BR>
<I><B>Parameters:</B></I> <BR>
<TT>rows</TT>-the number of rows in
the text area.<BR>
<TT>cols</TT>-the number of columns
in the text area.<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object containing the preferred size of the text area.
</BLOCKQUOTE>
<H4><TT>minimumSize</TT></H4>
<BLOCKQUOTE>
<TT>Dimension minimumSize(int rows, int cols)
<BR>
</TT>The <TT>minimumSize method</TT>
returns the minimum size of a text area of the specified dimensions.
<BR>
<I><B>Parameters:</B></I> <BR>
<TT>rows</TT>-the number of rows in
the text area.<BR>
<TT>cols</TT>-the number of columns
in the text area.<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object containing the minimum size of the text area.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierTextComponentPeerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>TextComponentPeer</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>ComponentPeer</TT>
<BR>
The <TT>TextComponentPeer</TT> interface
extends interface <TT>java.awt.peer.ComponentPeer</TT>.
The <TT>TextComponentPeer</TT> interface
provides the basic structure required for text component functionality.
</BLOCKQUOTE>
<H4><TT>setEditable</TT></H4>
<BLOCKQUOTE>
<TT>void setEditable(boolean editable)<BR>
</TT>The <TT>setEditable method</TT>
is used to set the text component's editable state.<BR>
<I><B>Parameters: </B></I>A boolean value that is <TT>true</TT>
if the text can be edited, <TT>false</TT>
if not.
</BLOCKQUOTE>
<H4><TT>getText</TT></H4>
<BLOCKQUOTE>
<TT>String getText()<BR>
</TT>The <TT>getText method</TT>
returns the text component's displayed text.<BR>
<I><B>Returns: </B></I>A string value representing the text contained
in the text component.
</BLOCKQUOTE>
<H4><TT>setText</TT></H4>
<BLOCKQUOTE>
<TT>void setText(String l)<BR>
</TT>The <TT>setText method</TT>
sets the text to be displayed in the text component.<BR>
<I><B>Parameters: </B></I><TT>l</TT>-a
string value to be displayed by the text component.
</BLOCKQUOTE>
<H4><TT>getSelectionStart</TT></H4>
<BLOCKQUOTE>
<TT>int getSelectionStart()<BR>
</TT>The <TT>getSelectionStart method</TT>
returns the position of the first selected character in the text
component.<BR>
<I><B>Returns: </B></I>An integer value specifying the position
of the first selected character in the text component.
</BLOCKQUOTE>
<H4><TT>getSelectionEnd</TT></H4>
<BLOCKQUOTE>
<TT>int getSelectionEnd()<BR>
</TT>The <TT>getSelectionEnd method</TT>
returns the position of the last selected character in the text
component.<BR>
<I><B>Returns: </B></I>An integer value specifying the position
of the last selected character in the text component.
</BLOCKQUOTE>
<H4><TT>select</TT></H4>
<BLOCKQUOTE>
<TT>void select(int selStart, int selEnd)
<BR>
</TT>The <TT>select method</TT>
selects the specified text within the <TT>TextComponent</TT>.
<BR>
<I><B>Parameters:</B></I> <BR>
<TT>selStart</TT>-an integer value
representing the starting character to be selected.<BR>
<TT>selEnd</TT>-an integer value representing
the ending character to be selected.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierTextFieldPeerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>TextFieldPeer</TT>
</FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>TextComponentPeer</TT>
<BR>
The <TT>TextFieldPeer</TT> interface
extends <TT>class java.lang.Object</TT>.
The <TT>TextFieldPeer</TT> interface
provides the basic structure required for text field component
functionality.
</BLOCKQUOTE>
<H4><TT>setEchoCharacter</TT></H4>
<BLOCKQUOTE>
<TT>void setEchoCharacter(char c)<BR>
</TT>The <TT>setEchoCharacter method</TT>
sets the echo character to be echoed to the screen as the user
types.<BR>
<I><B>Parameters: </B></I><TT>c</TT>-a
character value to be displayed no matter what character the user
types.
</BLOCKQUOTE>
<H4><TT>preferredSize</TT></H4>
<BLOCKQUOTE>
<TT>Dimension preferredSize(int cols)<BR>
</TT>The <TT>preferredSize method</TT>
returns the preferred size of the text field based on the specified
number of characters.<BR>
<I><B>Parameters: </B></I><TT>cols</TT>-an
integer value containing the number of characters in the text
field.<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object containing the preferred size of the text field.
</BLOCKQUOTE>
<H4><TT>minimumSize</TT></H4>
<BLOCKQUOTE>
<TT>Dimension minimumSize(int cols)<BR>
</TT>The <TT>minimumSize method</TT>
returns the minimum size of the text field based on the specified
number of characters.<BR>
<I><B>Parameters: </B></I><TT>cols</TT>-an
integer value containing the number of characters in the text
field.<BR>
<I><B>Returns: </B></I>A <TT>Dimension</TT>
object containing the minimum size of the text field.
</BLOCKQUOTE>
<H2><A NAME="TTFONTSIZEFACECourierWindowPeerFONTTT"><FONT SIZE=5 COLOR=#FF0000>
<TT>WindowPeer</TT></FONT></A></H2>
<BLOCKQUOTE>
<I><B>Extends: </B></I><TT>ContainerPeer</TT>
<BR>
The <TT>WindowPeer</TT> interface
extends interface <TT>java.awt.peer.ContainerPeer</TT>.
The <TT>WindowPeer</TT> interface
provides the basic structure required for window component functionality.
</BLOCKQUOTE>
<H4><TT>toFront</TT></H4>
<BLOCKQUOTE>
<TT>void toFront()<BR>
</TT>The <TT>toFront method</TT>
moves the window to the front of the display.
</BLOCKQUOTE>
<H4><TT>toBack</TT></H4>
<BLOCKQUOTE>
<TT>void toBack()<BR>
</TT>The <TT>toBack method</TT>
moves the window to the back of the display.
</BLOCKQUOTE>
<HR>

<CENTER><P><A HREF="ch35.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch37.htm"><IMG SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
