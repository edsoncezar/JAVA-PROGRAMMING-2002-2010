<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<META NAME="VPSiteProject" CONTENT="file:///D|/6i-2_migration-guide/migration_guide_vpp/6i-2_migration_guide.vpp">

	<META NAME="GENERATOR" Content="Visual Page 2.0 for Windows">
	<TITLE>Oracle Designer 6i Migration Guide Part 4</TITLE>
	<LINK REL="stylesheet" TYPE="text/css" HREF="feb2002.css">
</HEAD>

<BODY>

<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" WIDTH="96%" summary>
	<TR>
		<TD ALIGN="LEFT" VALIGN="TOP">
			<P><B><SPAN CLASS="header">Oracle Designer 6<I>i</I> Migration Guide<BR>
			Part 4. Migrating generated Forms applications to Oracle Designer&nbsp;6<I>i</I></SPAN></B>
		</TD>
		<TD ALIGN="RIGHT" VALIGN="BOTTOM">
			<DIV ALIGN="RIGHT">
				<DIV ALIGN="RIGHT">
					<DIV ALIGN="RIGHT">
						<DIV ALIGN="RIGHT">
							<DIV ALIGN="RIGHT">
								<DIV ALIGN="RIGHT">
									<DIV ALIGN="RIGHT">
										<DIV ALIGN="RIGHT">
											<DIV ALIGN="RIGHT">
												<DIV ALIGN="RIGHT">
													<DIV ALIGN="RIGHT">
														<DIV ALIGN="RIGHT">
															<DIV ALIGN="RIGHT">
																<DIV ALIGN="RIGHT">
																	<DIV ALIGN="RIGHT">
																		<DIV ALIGN="RIGHT">
																			<DIV ALIGN="RIGHT">
																				<DIV ALIGN="RIGHT">
																					<DIV ALIGN="RIGHT">
																						<DIV ALIGN="RIGHT">
																							<DIV ALIGN="RIGHT">
																								<DIV ALIGN="RIGHT">
																									<DIV ALIGN="RIGHT">
																										<DIV ALIGN="RIGHT">
																											<DIV ALIGN="RIGHT">
																												<DIV ALIGN="RIGHT">
																													<DIV ALIGN="RIGHT">
																														<DIV ALIGN="RIGHT">
																															<DIV ALIGN="RIGHT">
																																<DIV ALIGN="RIGHT">
																																	<DIV ALIGN="RIGHT">
																																		<DIV ALIGN="RIGHT">
																																			<DIV ALIGN="RIGHT">
																																				<DIV ALIGN="RIGHT">
																																					<DIV ALIGN="RIGHT">
																																						<DIV ALIGN="RIGHT">
																																							<DIV ALIGN="RIGHT">
																																								<DIV ALIGN="RIGHT">
																																									<DIV ALIGN="RIGHT">
																																										<DIV ALIGN="RIGHT">
																																											<DIV ALIGN="RIGHT">
																																												<DIV ALIGN="RIGHT">
																																													<DIV ALIGN="RIGHT">
																																														<DIV ALIGN="RIGHT">
																																															<DIV ALIGN="RIGHT">
																																																<DIV ALIGN="RIGHT">
																																																	<DIV ALIGN="RIGHT">
																																																		<DIV ALIGN="RIGHT">
																																																			<DIV ALIGN="RIGHT">
																																																				<DIV ALIGN="RIGHT">
																																																					<DIV ALIGN="RIGHT">
																																																						<DIV ALIGN="RIGHT">
																																																							<DIV ALIGN="RIGHT">
																																																								<DIV ALIGN="RIGHT">
																																																									<DIV ALIGN="RIGHT">
																																																									<P>
																																																									<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" summary>
																																																										<TR>
																																																											<TD ALIGN="CENTER" VALIGN="TOP">
																																																												<P ALIGN="CENTER"><A HREF="mg_toc_6i-2.htm"><IMG SRC="images/conticon.gif" WIDTH="30" HEIGHT="30" ALIGN="BOTTOM"
																																																												ALT="Contents icon" BORDER="0"></A>
																																																											</TD>
																																																										</TR>
																																																										<TR>
																																																											<TD>
																																																												<P ALIGN="CENTER"><A HREF="mg_toc_6i-2.htm"><SPAN CLASS="copyright">Contents</SPAN></A>
																																																											</TD>
																																																										</TR>
																																																									</TABLE>

</DIV>
																																																								</DIV>
																																																							</DIV>
																																																						</DIV>
																																																					</DIV>
																																																				</DIV>
																																																			</DIV>
																																																		</DIV>
																																																	</DIV>
																																																</DIV>
																																															</DIV>
																																														</DIV>
																																													</DIV>
																																												</DIV>
																																											</DIV>
																																										</DIV>
																																									</DIV>
																																								</DIV>
																																							</DIV>
																																						</DIV>
																																					</DIV>
																																				</DIV>
																																			</DIV>
																																		</DIV>
																																	</DIV>
																																</DIV>
																															</DIV>
																														</DIV>
																													</DIV>
																												</DIV>
																											</DIV>
																										</DIV>
																									</DIV>
																								</DIV>
																							</DIV>
																						</DIV>
																					</DIV>
																				</DIV>
																			</DIV>
																		</DIV>
																	</DIV>
																</DIV>
															</DIV>
														</DIV>
													</DIV>
												</DIV>
											</DIV>
										</DIV>
									</DIV>
								</DIV>
							</DIV>
						</DIV>
					</DIV>
				</DIV>
			</DIV>
		</TD>
	</TR>
</TABLE>

<HR ALIGN="CENTER">
</P>
<P><A HREF="mg_part3_6i-2.htm"><IMG SRC="images/larrow.gif" WIDTH="30" HEIGHT="30" ALIGN="BOTTOM" ALT="Prev" BORDER="0"></A><A
HREF="mg_part5_6i-2.htm"><IMG SRC="images/rarrow.gif" WIDTH="30" HEIGHT="30" ALIGN="BOTTOM" ALT="Next" BORDER="0"></A></P>
<H1><A NAME="Chapter%201%20Introduction"></A>Chapter 1 Introduction</H1>
<P>This migration guide provides the information necessary for upgrading Forms Applications that were designed
and generated using earlier releases of Designer to Oracle Designer 6i.</P>
<P>The document discusses migration from the following earlier releases:</P>

<UL>
	<LI>1.3.2
	<LI>2.1.2
	<LI>6.0
</UL>

<P>This document assumes that you have already installed Oracle Designer 6i and migrated your repository.&nbsp;
(See the instructions in <A HREF="mg_part2_6i-2.htm">Part 2</A> of this Migration Guide.)&nbsp; The document then
explains steps that you have to take so that you can:</P>

<UL>
	<LI>Generate your application from Oracle Designer 6i and achieve the same generated results you had from earlier
	releases, and
	<LI>Take advantage of new features that have been added to Designer since your previous release.
</UL>

<P>Throughout the document, special mention is made of any migration issues known at the time of publication of
this document.</P>
<P>There are a number of migration scenarios that are possible in bringing your Designer generated applications
forward into Oracle Designer 6i.&nbsp;</P>
<H2><A NAME="Scenario%201. %20Migrate,%20Regenerate"></A>Scenario 1.&nbsp; Migrate, Regenerate All, No Redesign</H2>
<P>In this scenario, you will regenerate your entire application from Oracle Designer 6i, including all forms,
libraries, menus and reports.&nbsp; However, you will continue to use your existing template forms and object libraries.</P>
<P>The goal of this scenario is to be able to generate your application out of Oracle Designer 6i and achieve the
same results you got when generating out of your previous Designer release. No attempt is made to redesign your
existing application to make use of new features available in Oracle Designer 6i.</P>
<P>This scenario has the following characteristics:</P>

<UL>
	<LI>It is fast and requires minimal changes in the application definition in the Oracle Designer repository
	<LI>It uses your existing templates and libraries, upgraded to Forms 6<I>i</I>.&nbsp; Any customizations made to
	the templates and libraries are preserved.
	<LI>It does not take advantage of any new features in Oracle Designer 6i.&nbsp; It is merely a 'technical' upgrade.
</UL>

<P>This scenario is appropriate when:</P>

<UL>
	<LI>Your application is already in production.
	<LI>Your application is stable, no major functional modifications are expected.
	<LI>Maintenance is limited to simple bug fixing.
	<LI>Your application is 100% generated, or post-generation modifications are minor.
</UL>

<H2><A NAME="Scenario%202. %20Migrate,%20Regenerate"></A>Scenario 2.&nbsp; Migrate, Regenerate All, With Redesign</H2>
<P>In this scenario, you will regenerate your entire application from Oracle Designer 6i, including all forms,
libraries, menus and reports.&nbsp; As you regenerate each module, you will make use of new features as appropriate.</P>
<P>The goal of this scenario is to take advantage of the new features available in Oracle Designer 6i.&nbsp; As
with Scenario 1, you want to be able to generate your application and get the same user interface you got from
your previous release of Designer. However, many new features have been added to Designer to make achieving the
desired result easier.&nbsp; Many features that were difficult or impossible to generate with earlier releases
of Designer are now supported.&nbsp; Thus, in one pass, you can eliminate post generation modifications and difficult
constructs that were used only to work around limitations of earlier releases of Designer.</P>
<P>This scenario has the following characteristics:</P>

<UL>
	<LI>Any customizations made to the templates need to be applied to the Oracle Designer 6i versions.
	<LI>It requires modifications in many module definitions, and is therefore more time-consuming
	<LI>It fully leverages the new features in Oracle Designer 6<I>i</I>.
</UL>

<P>This scenario is appropriate when:</P>

<UL>
	<LI>Your application is still in development.
	<LI>Your application is in production, but major functional modifications are to be made, or expected.
	<LI>Your application requires modifications that can only be implemented using new functionality in Designer.
	<LI>Your application has been heavily modified post-generation, but the majority of the modifications are no longer
	needed due to the new functionality in Designer.
</UL>

<H2><A NAME="Scenario%203. %20Migrate,%20Regenerate"></A>Scenario 3.&nbsp; Migrate, Regenerate Incrementally</H2>
<P>This is the most complex scenario.&nbsp; In this scenario, you will migrate your application a little at a time,
rather than all at once.&nbsp; You will begin by upgrading all of your forms, libraries, menus and reports to Forms
6i.&nbsp; You will then make the changes required to run forms generated from your previous release of Designer
alongside of forms generated from Oracle Designer 6i.&nbsp; Finally, over some arbitrarily long period of time,
you will regenerate all of your modules out of Oracle Designer 6i.</P>
<P>The goal of this scenario is to allow you to regenerate your whole application, taking into account new features,
but in such a way that you do not have to migrate your entire application in one go.&nbsp; This means you will
be able to move the deployed application to the new tool stack before you have completely migrated every form.&nbsp;
Thus, you can continue with bug fixes and new development in parallel with the continuing migration effort.</P>
<P>This scenario has the following characteristics:</P>

<UL>
	<LI>It requires you to do work to allow old and new generated forms to run side by side.&nbsp; This is extra work
	that is not required for Scenarios 1 and 2, and that will eventually be discarded.&nbsp; Thus, the total effort
	required is greater.
	<LI>It allows you to perform a phased migration.&nbsp; You can take advantage of the new Designer features right
	away, without the need to regenerate all your forms at once.
</UL>

<P>This scenario is appropriate when:</P>

<UL>
	<LI>Your application is in production, but major functional modifications are to be made, or expected.
	<LI>Your application requires modifications which can only be implemented using new functionality in Designer
	<LI>Your application is too large to migrate in one big bang.
</UL>

<H2><A NAME="Scenario%204. %20Forms%20Migration%20Onl"></A>Scenario 4.&nbsp; Forms Migration Only</H2>
<P>The first three scenarios all eventually require you to regenerate your application.&nbsp; Any post-generation
modifications will be lost.&nbsp; If you heavily modified your application post-generation, and the characteristics
of Scenario 1 apply to your situation, you might consider only upgrading the runtime environment to Forms 6<I>i</I>,
and not upgrading to Oracle Designer 6i.&nbsp; This implies that all future maintenance has to be done manually
in Developer.</P>
<P>This part of the migration guide does not cover a 'Forms only' migration.&nbsp; For information on migrating
Forms to 6i, see the Oracle Technology Network at <A HREF="http://otn.oracle.com/products/forms" target="_blank">http://otn.oracle.com/products/forms</A>
and select Migration under Oracle Forms Technical Information.</P>
<P>Note that, even though you may choose not to use Oracle Designer 6i for continued form generation, you may still
use Oracle Designer 6i to maintain your database definitions.&nbsp; You may also choose to use the Software Configuration
Management features of Oracle Designer 6i to manage your application source code (.fmb, .mmb, .pll, and.rdf files).</P>
<P>For information on Software Configuration Management with Oracle Designer 6i, see the Oracle Technology Network
at <A HREF="http://otn.oracle.com/products/repository" target="_blank">http://otn.oracle.com/products/repository</A>
.</P>
<H2><A NAME="Scenario%205. %20Design%20Capture"></A>Scenario 5.&nbsp; Design Capture</H2>
<P>If you heavily modified your application post-generation, and the characteristics of Scenario 2 apply, you may
want to consider using the Design Capture features of Oracle Designer 6i.&nbsp;</P>
<P>This part of the migration guide does not cover Design Capture.&nbsp; For information on Design Capture, see
the Oracle Designer online help.</P>
<H1><A NAME="Chapter%202%20Designer%209i%20New%20Featur"></A>Chapter 2 Oracle Designer 6i New Features</H1>
<P>Depending on which Designer release you are coming from, many features of Oracle Designer 6i may be new to you.&nbsp;</P>
<P>This chapter presents a brief overview of new features that are of particular interest when migrating a generated
forms application.&nbsp; It is by no means an exhaustive list of all new features, and it does not try to explain
each new feature in detail.&nbsp; Rather, it introduces the relevant features and points you to where you can find
more information in the Oracle Designer 6i online help.&nbsp; For a complete description of new features in Oracle
Designer 6i, see the online help.</P>
<P>This chapter is organized by Designer release.&nbsp; You should begin reading at the section for your &quot;from&quot;
Designer release, and then continue reading the sections for any later releases.&nbsp; For example, if you are
migrating from Designer 1.3.2, you need to read all the sections below.&nbsp; If you are migrating from Designer
2.1.2, you may skip the section on Designer 1.3.2 and read the sections for Designer 2.1.2 and 6.0.</P>
<H2><A NAME="2-Migrating%20from%20Designer%201.3.2"></A>Migrating from Designer 1.3.2</H2>
<P>This section describes new features added as of release 2.1.2.&nbsp; If you are already at release 2.1.2 or
higher, skip this section.</P>
<H3><A NAME="2-Design%20Editor"></A>Design Editor</H3>
<P>The functionality provided by individual Release 1 design level tools is now incorporated into a single tool
called the Design Editor.&nbsp; Each of the Release 1 tools maps onto a Design Editor component.&nbsp; It is essential
that you understand how to use the Design Editor before beginning your migration.</P>
<P>
<TABLE BORDER="1" CELLPADDING="6" CELLSPACING="0" WIDTH="492">
<thead> 
  																				<TR>
		<TD WIDTH="156" VALIGN="TOP">
			<P>Release 1.x tool
		</TD>
		<TD WIDTH="336" VALIGN="TOP">
			<P>Release 2.x Design Editor components
		</TD>
	</TR>
</thead> 
  																				<TR>
		<TD WIDTH="156" VALIGN="TOP">
			<P>RON
		</TD>
		<TD WIDTH="336" VALIGN="TOP">
			<P>Design Editor Navigator<BR>
			<BR>
			The Design Editor Navigator is a key component within the Design Editor.&nbsp; It is similar to the RON, but contains
			only objects specific to the design phase.<BR>
			<BR>
			You can use drag and drop, instead of clicking on menu options or toolbar buttons, to perform a wide range of tasks.&nbsp;
			For example, you can create a module diagram from a module definition by dragging the module from the Design Editor
			Navigator component onto the worksurface.&nbsp; You can also drag existing Repository definitions from the Navigator
			onto the diagrams.<BR>
			<BR>
			Most of the tasks that can be performed using other Design Editor components can also be performed from the Design
			Editor Navigator.
		</TD>
	</TR>
	<TR>
		<TD WIDTH="156" VALIGN="TOP">
			<P>RON Property Palette
		</TD>
		<TD WIDTH="336" VALIGN="TOP">
			<P>Design Editor Property Palettes and Property Dialog boxes<BR>
			<BR>
			When you create and edit Repository definitions in the Design Editor, you can use either Property Dialog boxes
			(new for Release 2) or Property Palettes.<BR>
			<BR>
			Property Dialog boxes are wizard style elements that walk you through complex tasks.&nbsp; They are especially
			useful when creating whole new modules or module components as they walk you through all of the required tasks
			in order.&nbsp; They are also useful as a tool for learning Designer.<BR>
			<BR>
			Property Palettes provide you with a direct way of entering/editing information for all of the properties that
			exist for an object.&nbsp; Property palettes are the quickest way of setting properties for existing objects, because
			all properties are displayed in a single palette.
		</TD>
	</TR>
	<TR>
		<TD WIDTH="156" VALIGN="TOP">
			<P>Module Diagrammer
		</TD>
		<TD WIDTH="336" VALIGN="TOP">
			<P>Module Diagrams<BR>
			<BR>
			Module Diagrams are created by dragging a module from the Design Editor Navigator to the worksurface.
		</TD>
	</TR>
	<TR>
		<TD WIDTH="156" VALIGN="TOP">
			<P>Preferences Navigator
		</TD>
		<TD WIDTH="336" VALIGN="TOP">
			<P>Preferences Palette<BR>
			<BR>
			Preference values are set using the Preference Palette within the Design Editor.&nbsp; Some behaviors that used
			to be governed by preferences (for example Item Group Orientation) are now properties in the associated objects
			property palette.&nbsp; Many new preferences have been added.
		</TD>
	</TR>
	<TR>
		<TD WIDTH="156" VALIGN="TOP">
			<P>Module Logic Navigator
		</TD>
		<TD WIDTH="336" VALIGN="TOP">
			<P>Logic Editor<BR>
			<BR>
			In previous releases you could define server-side procedural logic by recording PL/SQL functions, packages and
			procedures.&nbsp; In this release you can also record 'application logic which corresponds to Form Level, Block
			Level and Item Level Triggers in Forms.
		</TD>
	</TR>
	<TR>
		<TD WIDTH="156" VALIGN="TOP">
			<P>Module Structure Diagrammer
		</TD>
		<TD WIDTH="336" VALIGN="TOP">
			<P>Module Network/ PL/SQL Composition viewer<BR>
			<BR>
			A module network viewer enables you to display module networks horizontally in the Design Editor Navigator.&nbsp;
			This allows you to clearly see the relationships between the modules in a network.
		</TD>
	</TR>
</TABLE>

<H3><A NAME="2-Module%20Components"></A>Module Components</H3>
<P>The structure of a module changed after Designer 1.3.2. &nbsp;Modules are now broken down into module components.&nbsp;
Each module component consists of one base table usage and zero or more lookup table usages.</P>
<P>Module components can also contain so-called unbound items that are items that are not part of the base or lookup
tables.&nbsp; This eliminates the need for secondary column usages.</P>
<P>Module components can also be designated as re-usable.&nbsp; This means that a single module component can
be included in multiple modules.</P>
<H3><A NAME="2-Form%20Logic%20in%20Designer"></A>Form Logic in Designer</H3>
<P>One of the most important changes in Designer is the ability to record form level, block level and item ievel
triggers in Designer.&nbsp; Each module, module component and item has a node for adding application logic.&nbsp;
This can consist of one or more pl/sql code segments.&nbsp; Designer lets you intersperse your custom code segments
before, between, after and instead of code segments that Designer itself will generate.</P>
<H3><A NAME="2-Preferences%20and%20the%20Object%20Libra"></A>Preferences and the Object Library</H3>
<P>Form Builder has introduced the new concept of the object library.&nbsp; An object library is the collection
of forms objects into a file that uses the .olb suffix.&nbsp; Objects from the object library can be subclassed
into forms.&nbsp; Thus, the object is a sort of super template.&nbsp; Designer allows you to use the object library
for subclassing into generated forms.&nbsp; Designer comes with a pre-defined object library that contains a number
of objects recognized and used by Form Generator.&nbsp; You can also extend this object library to add your own
objects.&nbsp;</P>
<P>Designer still uses (and provides) a template form, but this template form now works very closely with the object
library.</P>
<P>Designer also provides a utility for building an object library from a maintenance form.&nbsp; This form has
a name like [designer home]\bin\fm2libxx.exe where xx is the major Designer release number.&nbsp; There is also
a .txt document that explains how to use the utility.</P>
<P>See the Form Builder online help for information about how to use the object library.&nbsp;</P>
<P>The object library can now govern many of the settings and behaviors that used to be governed by preferences.&nbsp;
Thus, many of the old preferences are now obsolete.&nbsp; See the Design Editor online help about preferences for
information on which preferences are now obsolete.</P>
<H3><A NAME="2-TAPI%20(some%20logic%20can%20go%20in%20the%20s"></A>TAPI (some logic can go in the server instead
of in the form)</H3>
<P>Designer now allows you to generate a table API that acts as a server-side wrapper for your tables to enforce
business logic.&nbsp; Essentially, this boils down to one pl/sql package per table.&nbsp; The PL/SQL package is
stored in the database.&nbsp; Each table has database triggers that invoke the TAPI.</P>
<P>Logic that used to be placed in your form can now be placed in the TAPI.&nbsp; For example:</P>

<UL>
	<LI>Populating a primary key from a sequence
	<LI>Populating audit columns
	<LI>Populating default values
	<LI>Validating dynamic domains
	<LI>Simple business rule validation
</UL>

<P>Generated forms use the new Returning clause to refresh data generated by the TAPI into the form record buffer.</P>
<P>See the Designer online documentation for more details about the TAPI.</P>
<H3><A NAME="2-PL/SQL%20Libraries%20in%20Designer"></A>PL/SQL Libraries in Designer</H3>
<P>Library generation is a major new feature in this release.&nbsp; Features of the new Library Generator are:</P>

<UL>
	<LI>Generation of library modules (.pll files) from Repository library module definitions (either as a separate
	operation or during generation of a module to which it is attached).
	<LI>Design capture of existing library modules into the repository.
</UL>

<H3><A NAME="2-Reports"></A>Reports</H3>
<P>The <B><I>module component</I></B>, a new Repository object, provides a container for the tables, columns, and
derived items that Report Generator uses to generate a query.&nbsp; A module component contains one base table
usage.&nbsp; It also may contain one or more lookup table usages and two new types of table usages:</P>

<UL>
	<LI>subquery table usages
	<LI>single-row SQL aggregate table usages.
</UL>

<P>In this release, groups are generated from the <B><I>Item Groups</I></B> that are defined in the module component.&nbsp;
In addition, some of the properties that control group generation are now item group properties.&nbsp; For example,
you can define a layout style for each break item group.</P>
<P>In this release, Report Generator provides a simpler interface for defining break groups in Group Left (Break)
reports.&nbsp; To define the &quot;break&quot; column or columns, create a new break item group and add the break
columns to it.</P>
<P>To define the column values that you want to display in a generated report, you define a new type of Repository
object, a <B><I>bound item</I></B>.</P>
<P>You can now add Oracle Developer Report Builder <B><I>report triggers</I></B> and <B><I>named routines</I></B>
directly to Oracle Designer Repository objects.</P>
<P>This release includes a new type of Repository object for defining navigation between report modules or between
a report module and another type of module: the <B><I>Navigation Action Item</I></B>.</P>
<P>You can now generate a matrix report from a single module component.&nbsp; In previous releases, you could only
generate a matrix report from three base table usages (module components): one for each of the matrix groups.</P>
<P>There is now a distinction between two types of summaries:</P>

<UL>
	<LI>Computed summaries, which are calculated on the client
	<LI>SQL Aggregate summaries, which are calculated on the server
</UL>

<P>There is now a distinction between three types of derived items:</P>

<UL>
	<LI>SQL Expressions, which are evaluated on the server
	<LI>Client Side Functions, which are evaluated on the client
	<LI>Server Side Functions, which are evaluated on the server
</UL>

<H4>Reports on the Web</H4>
<P>In the previous release of Report Generator, you generated a report for Web output by attaching the CGWEBP.RDF
(PDF) or CGWEBH.RDF (HTML) template to the report module.&nbsp; This release of Report Generator includes a new
preference, DSPFMT, for specifying the type of report output.</P>
<P>In this release, you can generate HTMLCSS output to support cascading style sheets.</P>
<P>In the previous release of Report Generator, the CGWEB.pll library contained PL/SQL code for generating Web
functionality such as hypertext links and tags.&nbsp; The library was attached to the default template report.&nbsp;
In this release, Report Generator generates calls to Report Builder SRW built-in procedures instead of calls to
procedures in the CGWEB.pll library.&nbsp; The CGWEB.pll library is no longer necessary and is therefore no longer
attached to the default template report.&nbsp; However, CGWEB.pll is still supplied with this release of Report
Generator to support generation of report modules that have been upgraded from the previous release.&nbsp; To attach
CGWEB.pll to reports generated using this release of Report Generator either set MODLIB to CGWEB.pll or use Report
Builder to attach CGWEB.pll to the template report.</P>
<H4>Report Queries</H4>
<P>In this release, Report Generator does not automatically generate a parameter that specifies the START WITH
clause for treewalk links.&nbsp; To specify the START WITH clause and other treewalk link properties, use the table
usage repository properties.</P>
<P>This release includes a new type of table usage: the subquery table usage.&nbsp; The subquery table usage enables
you to explicitly define a subquery.&nbsp; In previous releases, you created subqueries by defining a table usage
and hiding all the items (detailed column usages) in that table usage.&nbsp; In this release, you simply select
the parent table usage and define a new table usage, specifying &quot;Subquery&quot; as the type.&nbsp; Use the
WHERE clause property of the subquery table usage to define the restriction that you want the subquery to apply.&nbsp;
This release also provides a more direct way of adding the NOT operator to reverse the logic of the query.&nbsp;
Instead of setting a preference (ANNOTR), reverse the logic by setting the 'Not Exist?' Repository table usage
property.</P>
<P>The new preference DETLNK controls how Report Generator creates the link between master and detail rows and
enables you to use correlated subqueries to increase network efficiency.</P>
<P>You can now retrieve all rows from two or more tables by defining a SQL query set.&nbsp; When you define a SQL
query set, Report Generator adds the UNION operator to the generated query to return all rows from all SELECT statements.</P>
<P>In this release, Report Generator adds all bound items to the generated SELECT list.&nbsp; In previous releases,
if you specified that a detailed column usage should not be displayed on the generated report, Report Generator
removed the column from the SELECT list.&nbsp; You do not need to define bound items for foreign key columns unless
you want to generate a field for the foreign key column.&nbsp; Report Generator adds the foreign key column to
the SELECT list when needed to join module components or table usages.</P>
<H4>Report Parameter Forms</H4>
<P>If you create parameters in the report module definition, the parameter form is created whenever you run the
generated report.&nbsp; Report Generator no longer supports parameter form generation, parameter form templates,
or parameter form layout preferences.</P>
<P>Domain validation of parameters is now controlled on the server.&nbsp; For more information, refer to 'About
reference code tables' in the Server Generator on-line help.</P>
<H4>Template Definition Files</H4>
<P>This release of Report Generator supports template definition files (TDFs), which are new in Oracle Developer
Report Builder 3.0.&nbsp; If you upgrade report modules from previous releases of Oracle Designer, Report Generator
automatically converts RDF templates to TDF format.</P>
<P>The close integration between Report Generator and Report Builder templates also means that some of the customization
via preference settings and post-generation modifications is now consolidated.&nbsp; For example, spacing between
labels, fields, and groups can now be set using Template properties.</P>
<P>In the previous release of Report Generator you were able to add default boilerplate object keywords to your
layout model template and apply formatting styles to these objects.&nbsp; This was to allow generated objects in
the report to inherit the format that you applied to the boilerplate object.&nbsp; In this release, the font and
visual attributes can be specified in the template definition file.</P>
<P>
<TABLE BORDER="1" CELLPADDING="0" CELLSPACING="0">
	<TR>
		<TD WIDTH="234" VALIGN="TOP">
			<P>Removed boilerplate object keywords
		</TD>
		<TD WIDTH="234" VALIGN="TOP">
			<P>How to customize in Release 2
		</TD>
	</TR>
	<TR>
		<TD WIDTH="234" VALIGN="TOP">
			<P>CG$M1 and CG$M2
		</TD>
		<TD WIDTH="234" VALIGN="TOP">
			<P>Combined into one object CG$MT
		</TD>
	</TR>
	<TR>
		<TD WIDTH="234" VALIGN="TOP">
			<P>CG$BUTTON
		</TD>
		<TD WIDTH="234" VALIGN="TOP">
			<P>Use the repository item properties width and height
		</TD>
	</TR>
	<TR>
		<TD WIDTH="234" VALIGN="TOP">
			<P>CG$SIZING
		</TD>
		<TD WIDTH="234" VALIGN="TOP">
			<P>Use the Report Builder with the Layout Model open
		</TD>
	</TR>
	<TR>
		<TD WIDTH="234" VALIGN="TOP">
			<P>CG$DCU_GRP_FRM
		</TD>
		<TD WIDTH="234" VALIGN="TOP">
			<P>Use the Template properties in the Oracle Designer Item Group Style/Title sections
		</TD>
	</TR>
	<TR>
		<TD WIDTH="234" VALIGN="TOP">
			<P>CG$HEADER
		</TD>
		<TD WIDTH="234" VALIGN="TOP">
			<P>Use the Template properties in the Frames section of the Layout Model Body
		</TD>
	</TR>
	<TR>
		<TD WIDTH="234" VALIGN="TOP">
			<P>CG$PARAMETER
		</TD>
		<TD WIDTH="234" VALIGN="TOP">
			<P>This functionality is not supported in this release
		</TD>
	</TR>
	<TR>
		<TD WIDTH="234" VALIGN="TOP">
			<P>CG$PROMPT
		</TD>
		<TD WIDTH="234" VALIGN="TOP">
			<P>Use the Template properties in the Field/Labels Headings section of the Layout Model Body
		</TD>
	</TR>
	<TR>
		<TD WIDTH="234" VALIGN="TOP">
			<P>CG$FIELD
		</TD>
		<TD WIDTH="234" VALIGN="TOP">
			<P>Use the Template properties in the Fields section of the Layout Model Body
		</TD>
	</TR>
	<TR>
		<TD WIDTH="234" VALIGN="TOP">
			<P>CG$US
		</TD>
		<TD WIDTH="234" VALIGN="TOP">
			<P>Use the Report Builder Layout Editor to create a field in the Report Builder template, and set the source to
			be a column that is of datatype char (e.g., DESNAME).&nbsp; Add the following Report built-in function call to
			the Format Trigger: srw.set_field_char (0, user)
		</TD>
	</TR>
</TABLE>

<H2><A NAME="2-Migrating%20from%20Designer%202.1.2"></A>Migrating from Designer 2.1.2</H2>
<P>This section describes new features added as of release 6.0.&nbsp; If you are already at release 6.0 or higher,
skip this section.</P>
<P>The biggest change for Form Generation in moving from Designer 2.1.2 to Designer 6.0 was the change from Forms
5 to Forms 6.&nbsp; There were a few minor changes in addition to this:</P>

<UL>
	<LI>generation of bean area items containing Java Beans
	<LI>generation of custom (java) user interface components (which includes support for the Oracle Look and Feel)
	<LI>full screen menu generation no longer supported.
</UL>

<H2><A NAME="2-Migrating%20from%20Designer%206.0"></A>Migrating from Designer 6.0</H2>
<P>This section describes new features added as of release 6i.&nbsp;</P>
<H3><A NAME="2-LOV%20components"></A>LOV components</H3>
<P>The new repository LOV element simplifies the process of LOV generation by decoupling LOVs from lookup table
usages.&nbsp; This not only makes it easier to define LOVs, it also enables you to:</P>

<UL>
	<LI>define multiple LOVs for the same block
	<LI>reuse the same LOV in multiple blocks and multiple forms
	<LI>define LOVs for unbound items.
</UL>

<H3><A NAME="2-New%20Layout%20Features"></A>New Layout Features</H3>
<P>This release includes a number of new layout features.&nbsp; Some of these new features can cause changes to
the layout of your migrated applications.</P>
<P>There are a number of new layout styles available:</P>

<UL>
	<LI>support for the splitting of blocks across multiple canvases by generating multi-region blocks, and also the
	design capture of multi-region blocks
	<LI>support for the placing of blocks beside each other on the same canvas
	<LI>generation of navigator style forms (to provide a user interface similar to that of the Design Editor) and
	navigator style items.
</UL>

<P>You can now generate spreadtables onto tab canvases.</P>
<P>This release introduced <B><I>relative tab stops</I></B> (as distinct from <I>absolute tab stops</I> in previous
releases) as a means to position and align items and item groups.&nbsp; Your migrated applications will continue
to use the old absolute tab stops unless you specifically change them to use the new relative tab stops.</P>
<P>Enhancements have been added to layout functionality, including:</P>

<UL>
	<LI>Specification of real units when setting the decoration preferences.
	<LI>Extra line above decoration options for the preferences BLKDEC, CONDEC, GRPDEC, OFADEC, RADDEC, STBDEC.
	<LI>Using BLKSBP, you can position a block scrollbar to the right or left of the multi-record area within a block
	instead of to the right or left edge of the block itself.
	<LI>In multi-record blocks in which the lines do not wrap, Form Generator now positions a summary item below the
	item it summarizes (instead of repeating the summary item for each displayed row).
	<LI>If a module component's Width property was not explicitly set, Form Generator reduces the width of the generated
	block to optimize side-by-side block layout by removing any unused space to the right of the rightmost item.
	<LI>The new LAYFRA preference gives you the option to generate frames instead of graphic objects/text as decoration.
	<LI>Increased coverage for the preferences ITMPPE and ITMMPW to allow expansion of other types of generated text
	as well as item prompts.
	<LI>You can now display values from a lookup table in a combo box, as well as in a text list or a poplist.
</UL>

<H3><A NAME="Support%20for%20New%20Oracle%20Forms%20Fea"></A>Support for New Oracle Forms Features</H3>
<P>Enhancements have been added to support native Oracle Forms features, including:</P>

<UL>
	<LI>Native Oracle Forms tooltip support for generated items using ITMTIP.
	<LI>Generation of Oracle Forms display items is now supported, along with a corresponding new standard source object
	called CGSO$DISPLAY_ITEM.
	<LI>Generation of Oracle Forms hierarchical tree items is now supported, along with a corresponding new standard
	source object called CGSO$HTREE.
	<LI>Generation of mirror items from unbound items.
	<LI>Placing all generated code into a generated module library attached to the generated form rather than into
	the generated form itself using the new PGULIB preference.
</UL>

<H3><A NAME="Support%20for%20New%20Oracle8%20Features"></A>Support for New Oracle8 Features</H3>
<P>Enhancements have been added to support new Oracle8 features available in Oracle Forms, including:</P>

<UL>
	<LI>Use of the Oracle8 RETURNING clause when inserting or updating records, enabling the form to populate a base
	table item with the value returned from a derived column without having to requery the database.
</UL>

<H1><A NAME="Chapter%203%20General%20Migration%20Issu"></A>Chapter 3 General Migration Issues</H1>
<P>There are a number of actions you must take regardless of which migration scenario you choose.</P>
<P>This chapter is organized by Designer release.&nbsp; You should begin reading at the section for your &quot;from&quot;
Designer release, and then continue reading the sections for any later releases.&nbsp; For example, if you are
migrating from Designer 1.3.2, you need to read all sections below.&nbsp; If you are migrating from Designer 2.1.2,
you may skip the section on Designer 1.3.2 and read the sections for Designer 2.1.2 and 6.0.</P>
<H2><A NAME="3-Migrating%20from%201.3.2"></A>Migrating from 1.3.2</H2>
<P>This section covers general migration issues when migrating from Designer 1.3.2.&nbsp; If you are migrating
from a later release, you may skip this section.</P>
<H3><A NAME="Add%20System%20Folder%20to%20Designer%209i"></A>Add System Folder to Oracle Designer 6i Workarea</H3>
<P>If your migrated modules have '*******' in the Language property, it means that they are referencing the language
from another folder, usually the System Folder.&nbsp; If this happens, modify your workarea to include the System
Folder.</P>
<H3><A NAME="Generating%20Context-Sensitive%20HTM"></A>Generating Context-Sensitive HTML Help</H3>
<P>When application systems are upgraded to Oracle Designer 6i, the Help Context Id Prefix is nullified for all
Repository objects.&nbsp; The ID's are cleared because Oracle Designer 6i uses a different format for the help
ID's (see bug 656392).</P>
<P>If you have context-sensitive online help, <B>you must generate the Help file(s) before you start generating
the forms!</B>&nbsp; By generating the Help file(s), new Context ID's are generated.</P>
<H3><A NAME="Module%20Implementation%20Name"></A>Module Implementation Name</H3>
<P>In earlier releases, Form Generator derived the name of generated source and executable files from the module's
Short Name property and ignored a module's Implementation Name property.&nbsp; MS Help Generator did use the module's
Implementation Name property and required that its value was six characters or less.</P>
<P>It is therefore quite likely that a module developed using Oracle Designer 1.3.2 has its Short Name property
and Implementation Name property set to two different values.</P>
<P>In Oracle Designer 6i, Form Generator uses a module's Implementation Name property to derive the name of generated
source and executable files.&nbsp; The (HTML) Help Generator continues to use a module's Implementation Name property,
but the six-character limit has been removed.</P>
<P>This may be an issue where:</P>

<UL>
	<LI>You have added code in one module to call another module (i.e. If user code or template code in a generated
	form calls another generated executable).
	<LI>The called module's Implementation Name and Short Name properties are different.
</UL>

<P>If you generate the called module in Oracle Designer 6i, the call will fail because the called executable will
have a different name to that expected in the code.</P>

<UL>
	<LI>Change the Implementation Name property of every form and menu module to the value of the module's Short Name
	property.
</UL>

<H3><A NAME="Where/Validation%20Condition%20on%20Lo"></A>Where/Validation Condition on Lookup Table Usages</H3>
<P>In version 1.3, the where/validation condition on Lookup Table Usages could be used to restrict the allowable
foreign key values.&nbsp; The where validation condition entered was applied in three places:</P>

<UL>
	<LI>in the LOV record group query to restrict the records displayed in the LOV
	<LI>in the WHEN-VALIDATE-ITEM trigger on the foreign key column(s), to make sure the restriction was also applied
	when the value was entered manually without using the LOV
	<LI>in the POST-QUERY (or POST-CHANGE in case of a hidden FK column) trigger to apply the restriction to <I>existing
	</I>rows
</UL>

<P>However, using the same where clause for the POST-QUERY places a limitation on the use of foreign keys.&nbsp;
With this schema, you cannot create a relationship where all lookup rows are valid on existing records, but only
some subset of the lookups can be used when creating a new record.</P>
<P>To address this issue, many developers specified sophisticated conditions in the WHERE/Validation Condition
property.</P>
<P>In Oracle Designer 6i, the WHERE/Validation condition property has been replaced with two properties to handle
the two different operations:</P>

<UL>
	<LI>The Lookup validation WHERE Clause property is used to restrict the value in the LOV and validate values entered
	directly into a field.
	<LI>The Where Clause of Query property is used to restrict the existing records returned by querying the block.
</UL>

<P>On upgrade, both the 'Lookup validation Where Clause' property and the 'Where Clause of Query' property are
populated with the value of the Designer 1.3.2 'Where/Validation Condition' property.&nbsp; If you have included
sophisticated conditions in the Where/Validation Condition property of lookup table usages to avoid inappropriate
constraint violation messages, these are unlikely to be suitable for the new Where Clause of Query property.</P>
<P>You will probably need to clear the Where Clause of Query property on lookup table usages after upgrading.&nbsp;
You may also need to clear it on base table usages, though only if it is related to the old LOV&nbsp; (i.e. the
base table usage may also have its own valid where clause that you don't want to delete).</P>
<P>In addition to splitting the 'Where/Validation Clause', the implementation of the 'Where Clause of Query' no
longer uses the POST-QUERY or POST-CHANGE trigger.&nbsp; The 'Where Clause of Query' on the lookup table usage
is now added as a sub-select to the 'Where Clause' of the base table block in the generated form.&nbsp; This is
a much better implementation, as you no longer get an error message when querying an existing record that violates
the restriction.&nbsp; A side effect of the implementation is that if you have used system variables in the old
'Where Clause' and you fail to clear the 'Where Clause of Query' property, your form will fail to compile as references
to System variables are not allowed in the block 'Where Clause'.</P>
<H3><A NAME="Titling%20of%20First%20Block"></A>Titling of First Block</H3>
<P>Preference PAGTFB governs the titling of the first block on a page.&nbsp; This preference did not work when
set to Yes in version 1.3.&nbsp; In version 9<I>i</I> the preference works fine, which means that if the value
is set to Yes, and you generate the form again with version 9<I>i</I>, the layout will be different from the 1.3
generation as the block title will appear now.</P>
<H3><A NAME="Names%20of%20Lookup%20Items%20Changed"></A>Names of Lookup Items Changed</H3>
<P>In Designer 1.3.2, the user could not control the name assigned to lookup items in the generated form.&nbsp;
The generator typically determined the item name by prefixing the column name with DSP_.&nbsp; In Oracle Designer
6i, the user is able to explicitly set the name of lookup items, and the default is set to L_&lt;column name&gt;.&nbsp;
But, the migration from Designer 1.3.2 to Oracle Designer 6i sets the lookup item names to the new style names,
rather than the old style names.&nbsp; Thus, if you have any PL/SQL code in your libraries that refers to lookup
items, the code will now be incorrect.</P>
<P>You will need to either:</P>

<UL>
	<LI>update the lookup names (where necessary) in Oracle Designer 6i to the old names, or
	<LI>update the PL/SQL code to use the new names.
</UL>

<H3><A NAME="Display%20in%20LOV%20Property%20Lost"></A>Display in LOV Property Lost</H3>
<P>In migrating from Designer 1.3.2 to Designer 6.0, the Display in LOV property is lost for all items except the
FK item.&nbsp; Since this is lost in 6.0, it is also not present in 6i.</P>
<P>You can either:</P>

<UL>
	<LI>Correct the lookup column usages in Designer 6.0 before migrating to Oracle Designer 6i, or
	<LI>Correct the LOV components in Oracle Deisgner 6i.
</UL>

<H3><A NAME="Long%20Item%20Names%20Truncated%20to%2028%20"></A>Long Item Names Truncated to 28 characters</H3>
<P>If a column usage name was longer than 28 characters in Designer 1.3.2, it will be truncated in Oracle Designer
6i.&nbsp; If you have written pl/sql code in your modules that uses the long column name, it will no longer compile.</P>
<P>You will need to either:</P>

<UL>
	<LI>update the column names (where necessary) in Oracle Designer 6i to the old names, or
	<LI>update the PL/SQL code to use the new names.
</UL>

<H3><A NAME="LOV%20Tile%20lost%20during%20upgrade"></A>LOV Tile lost during upgrade</H3>
<P>The LOV title is lost during the upgrade from Designer 1.3.2 to Designer 6.0.&nbsp;&nbsp;&nbsp; Since this is
lost in 6.0, it is also not present in 6i.</P>
<P>You will have to manually add the title back to each LOV.</P>
<H3><A NAME="Space%20Added%20below%20Spreadtable%20Ho"></A>Space Added below Spreadtable Horizontal Scrollbar</H3>
<P>In Designer 1.3.2, if you set SPRSBH=1, there was no vertical space below the horizontal scrollbar for a spreadtable.&nbsp;
In this release, there is always at least one line of vertical space below the scrollbar.&nbsp; There is no workaround.&nbsp;
This has been logged as bug #1781417.</P>
<H3><A NAME="Review%20the%20setting%20of%20USEPKR"></A>Review the setting of USEPKR</H3>
<P>In earlier releases, if the AUTOQY preference was set to Yes:</P>

<UL>
	<LI>Form Generator generated a POST-FORM trigger to save the primary key of the current row into a global variable
	upon exit from a form.
	<LI>If the first block of a generated form is not insertable, Form Generator generated a WHEN-NEW-FORM-INSTANCE
	trigger that uses the value of the global variable to query the base table of the block.
</UL>

<P>In Designer 6i, the USEPKR preference replaces AUTOQY and the requirements for the first block have changed.&nbsp;
If you set USEPKR to Query, the first block in the generated form must be query only (i.e. it must not be insertable
<B>or updatable</B>).&nbsp; If you set USEPKR to All, the first block can be insertable and/or updatable.</P>
<P>So Form Generator will no longer generate auto-queried forms where the first block must not be insertable but
can be updatable.</P>

<UL>
	<LI>If it is acceptable for the first block to be query-only (i.e. Not insertable or updatable), set USEPKR to
	Query.
	<LI>If the first block must be updatable, set USEPKR to All.&nbsp; Be aware that blocks that previously did not
	meet the conditions for AUTOQY (i.e. blocks that are insertable) will also be autoqueried.
</UL>

<H3><A NAME="Menu%20Separators"></A>Menu Separators</H3>
<P>You generate menu separators by defining a module with the Language set to null.&nbsp; During the upgrade process,
the module language is defaulted to Developer/2000 Forms.&nbsp; Therefore, you must clear the Language property
again for the menu separator modules before you generate the menu.</P>
<H3><A NAME="Name%20Resolution%20in%20Forms%209i"></A>Name Resolution in Forms 6i</H3>
<P>Strange behavior may occur whenever you have a routine in one .pll library that calls a routine in another .pll
library.&nbsp; It does not occur when the routine in the .pll library is called directly from the form.</P>
<P>This is actually a Forms migration issue, rather than a Designer issue.&nbsp; However, since Designer 1.3.2
required extensive use of pl/sql libraries for application code, you are likely to run into this issue, so we will
discuss it here.</P>
<P>With Forms 4.5, you could define a program unit in one library, and then override it by creating a program unit
of the same name in a second library and adding the second library before the first library in the list of attached
libraries.</P>
<P>For example, suppose you created a library, general_form_handler.pll with a procedure initialize_form.&nbsp;
This procedure calls a number of standard routines that are stored in core_routines.pll.</P>
<P>You attach core_routines.pll to general_form_handler.pll, and you attach general_form_handler.pll to your generater
template form so that it is automatically attached to all generated forms.</P>
<P><IMG SRC="images/image1.gif" WIDTH="439" HEIGHT="64" ALIGN="BOTTOM" BORDER="0"></P>
<P>Now, suppose in myform4, you want to customize the procedure init_block from core_routines.pll.&nbsp; With Forms
4.5, you could simply do the following.</P>
<P><IMG SRC="images/image2.gif" WIDTH="439" HEIGHT="103" ALIGN="BOTTOM" BORDER="0"></P>
<P>When you called initialize_form from myform1, 2 or 3, it would call init_block from core_routines.pll.&nbsp;
When you called initialize_form from myform4, it would call init_block from form4.pll.&nbsp;</P>
<P>This worked because form4.pll is placed on top of core_routines.pll in myform4s list of attached libraries.&nbsp;
Internally, this happens because, in Forms 4.5, every time a call is made to a procedure, a new search for a
procedure with that name is executed, finding the one closest to the form.&nbsp; This process is called&nbsp; 'Name
Resolution'.</P>
<P>In Forms 6i (and all forms versions 5.0 and higher), the algorithm for name resolution has changed to improve
performance.&nbsp; When a library procedure calls another library procedure for the first time, name resolution
is performed, and the program unit that is called is cached in memory.&nbsp; The next time the same call is made,
it uses the cached routine.</P>
<P>In our example, this results in seemingly strange behavior at runtime.&nbsp; If the user runs the application
and opens myform4 first, and then later opens myform1, 2 or 3, then all of the forms will use the version of init_block
from form4.pll.&nbsp; On the other hand, if the user opens myform1, 2 or 3 first, and then opens myform4, all of
the forms will use the version of init_block from core_routines.pll.&nbsp; The behavior of all forms depends on
which version of init_block was opened <I>first</I>.</P>
<P>There are two workarounds for this problem.</P>

<UL>
	<LI>Copy the chain of calling program unit(s) to the module specific library, even if you do not want to customize
	these program units.&nbsp;
</UL>


<BLOCKQUOTE>
	<P><IMG SRC="images/image3.gif" WIDTH="455" HEIGHT="118" ALIGN="BOTTOM" BORDER="0"></P>
</BLOCKQUOTE>

<P>Since name resolution is always performed for routines that are called directly from a form, myform1, 2 and
3 will call initialize_form from general_form_handler.pll and myform4 will call initialize_form from form4.pll.&nbsp;
Then, since these two versions of initialize_form are not the same 'calling' routine, name resolution will be performed
again, and each version of initialize_form will call its own init_block.&nbsp; Thus, each form will correctly call
its own version of both initialize_form and init_block.</P>
<P>This is the preferred workaround, but not always feasible if the program unit being customized is called from
various places.</P>

<UL>
	<LI>Copy the calling program unit (initialize_form) to the module specific library.&nbsp; Copy and <I>rename</I>
	the program unit you want to customize.&nbsp; Modify the calling program unit to call the renamed version of this
	program unit.
</UL>


<BLOCKQUOTE>
	<P><IMG SRC="images/image4.gif" WIDTH="470" HEIGHT="118" ALIGN="BOTTOM" BORDER="0"></P>
</BLOCKQUOTE>

<P>For migration scenarios 1 and 3, where the original libraries continue to be used in the migrated application,
you are more likely to run into this behavior.</P>
<H3><A NAME="Generating%20Reports"></A>Generating Reports</H3>
<P>The report generation process has changed dramatically.&nbsp; Report Generator now leverages the powerful new
features in Reports 6i, including the new concept of a report template file (.tdf extension).</P>
<P>Report templates allow you to define standard layout settings, like font, font size, margins between frames,
labels and fields, etc.&nbsp; Refer to the Report Builder online help for more information.</P>
<P>With the introduction of report templates, many layout preferences have become obsolete.&nbsp; These preferences
have been removed from Report Generator.&nbsp; Refer to the Report Generator online help for a complete list of
new, modified and removed report generator preferences.</P>
<P>As a consequence, you cannot use the old report generator template, since it contains a number of boilerplate
objects that are no longer supported, and relies on a number of layout preferences that have been removed.&nbsp;
You should create new report templates from scratch, or use the ones supplied with Oracle Designer 6i.</P>
<H4>Reports with Item Groups</H4>
<P>The Layout Format of an item group used to be inherited from the module component in which it was contained.&nbsp;
Now, the module component and item group can each have a Layout Format.&nbsp; This means that for all item groups
that have the Layout Format set to 'Standard', you should change the item group's Layout Format to match the value
of the Layout Style of its module component.</P>
<H4>Money Items</H4>
<P>The display datatype Money is no longer supported.&nbsp; You will have to set the Format Mask property to get
the money format you like.</P>
<H4>Reports with Across Style Layout</H4>
<P>If the module component layout style is set to 'Across', and you have defined an item group within the module
component, you should make the following changes to the definition of the item group.</P>

<UL>
	<LI>Set the item group's Layout Style to Across
	<LI>Set the item group's Break Style to Across
</UL>

<H4>Review the setting of PARNME</H4>
<P>This preference is used when naming parameters for generated reports.&nbsp; Set it to Null to ensure that generated
parameter names are the same as the names defined in the repository.</P>
<H2><A NAME="3-Migrating%20from%201.3.2,%202.1.2%20or%206"></A>Migrating from 1.3.2, 2.1.2 or 6.0</H2>
<P>This section covers general migration issues when migrating from Designer 2.1.2 or Designer 6.0.&nbsp; These
issues can also affect migrations from Designer 1.3.2.&nbsp; The upgrade from these two releases is the same.&nbsp;
If you are migrating from a later release, you may skip this section.</P>
<H3><A NAME="Copy%20Where%20Clause%20of%20Lookup%20to%20L"></A>Copy Where Clause of Lookup to LOV</H3>
<P>The Designer migration fails to copy the where clause on the lookup table usage to the list of values.&nbsp;
You will have to copy this manually wherever you have used such a where clause.</P>
<H3><A NAME="Where%20Clause%20of%20LOV"></A>Where Clause of LOV</H3>
<P>If you have a where clause in an LOV, and that where clause references more than one column, the generated record
group query will be generated incorrectly.&nbsp; The first column references the LOV's table usage alias while
subsequent columns references the item in the form.</P>
<P>Example:&nbsp;&nbsp; the where clause&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REL_TYPE='S' and NAME like 'F%'</P>
<P>This is generated into:</P>
<PRE STYLE="line-height : normal">SELECT REL1.ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    ID, </PRE>
<PRE STYLE="line-height : normal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REL1.NAME&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    NAME, </PRE>
<PRE STYLE="line-height : normal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REL1.DEL_STREET    DEL_STREET, </PRE>
<PRE STYLE="line-height : normal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REL1.DEL_CITY&nbsp;&nbsp;    DEL_CITY, </PRE>
<PRE STYLE="line-height : normal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REL1.REL_TYPE&nbsp;&nbsp;    REL_TYPE </PRE>
<PRE STYLE="line-height : normal">&nbsp; FROM CLR_RELATIONS&nbsp;&nbsp;    REL1 </PRE>
<PRE STYLE="line-height : normal">&nbsp;WHERE /*    CG$LOVI_WC_START REL 10 */ </PRE>
<PRE STYLE="line-height : normal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (REL1.REL_TYPE='S'    and :REL.NAME like 'F%') </PRE>
<PRE STYLE="line-height : normal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*    CG$LOVI_WC_END REL 10 */ </PRE>
<P>Workaround:&nbsp; You must explicitly enter the table alias in front of the column names. In the example above,
this would be :</P>
<PRE>REL1.REL_TYPE='S' and REL1.NAME like 'F%'</PRE>
<P>This has been recorded as bug # Bug 1422339.</P>
<H3><A NAME="Display%20Properties%20of%20LOV%20items"></A>Display Properties of LOV items</H3>
<P>The Designer migration fails to copy the display properties from the lookup table usage to the list of values
column usages.&nbsp; You will have to copy these manually.</P>
<P>Further, the migration includes the primary key column in the LOV column usages, and sets the Display Property
= Yes.&nbsp; Unless you want the primary key visible as the first item in the LOV, you must change this display
property to No.</P>
<H3><A NAME="LOVs%20using%20Filter%20Before%20Query"></A>LOVs using Filter Before Query</H3>
<P>The old forms bug which causes a runtime error when using aliases in the select clause of an LOV that has Filter
Before Query set to Yes has returned in Forms 6<I>i</I>.&nbsp; This has been logged as forms bug #1347776.</P>
<P>You must repair all LOVs that have Filter Before Display? = Yes.</P>

<UL>
	<LI>Determine which field will be the first displayed field in the generated LOV.
	<LI>In the LOV component in Designer 6<I>i</I>, change the Name property of the column usage to match exactly its
	associated column name.&nbsp; (Usually, remove the L_&lt;alias&gt;_ from the beginning of the Name.)
</UL>

<H3><A NAME="New%20Possibility%20for%20LOV%20Buttons"></A>New Possibility for LOV Buttons</H3>
<P>Designer now lets you define a runtime webforms paramater in your Registry.dat file which causes a field with
an LOV to display a '' in the field body when the user places the cursor in the field.&nbsp; Thus, you are no
longer required to generate LOV buttons to give the users a visual clue that an LOV exists.</P>
<P>If you want to take advantage of this, you will need to change preference LOVBUT to No.&nbsp; In the Registry.dat
file, set parameter:&nbsp; app.ui.lovButtons=true</P>
<H3><A NAME="Data%20Source%20Type%20%3D%20Query"></A>Data Source Type = Query</H3>
<P>There is a problem using Datasource Type = Query with a module component which includes a Lookup.&nbsp; When
you use this Datasource Type, Designer generates a post-query trigger to retrieve the lookup data.&nbsp; The problem
shows up at runtime when you query more records than will display on the screen, go to the last record displayed
on the screen, and then attempt to go to the next record,</P>
<P>At this point, running through the web-browser, the form locks.&nbsp; Running client server, the form closes.</P>
<P>When the post-query trigger is fired, Forms also fires the on-lock trigger to lock the record.&nbsp; It does
this because, with this datasource type, it thinks that the lookup field is a base table field.&nbsp; For some
reason, on all records that did not show on the first screenful of records, Forms is unable to obtain a lock on
the record and returns FRM-40654.&nbsp; At this point, the form hangs or exits.</P>
<P>With this datasource type, it is not necessary to generate a post-query trigger.&nbsp; The lookup information
is already being retrieved as part of the base table query.&nbsp;</P>
<P>Solution: Either do not use this datasource type or you will have to do a post-generation change to remove the
post-query trigger generated by Designer.</P>
<P>This has been recorded as bug #1351904.</P>
<H3><A NAME="Updateable%20Views"></A>Updateable Views</H3>
<P>Form Generator has changed how it handles views.&nbsp; Forms based on views can now retrieve server-generated
values from the database without any extra coding.&nbsp; In order to support this, Form Generator now requires
that if a view usage is updateable, the associated view must have a primary key defined in Designer.</P>
<P>To avoid this problem, add a primary key to all your views.</P>
<H3><A NAME="Views%20or%20Tables%20with%20No%20Primary%20"></A>Views or Tables with No Primary Key</H3>
<P>If you have a module component based on a view or table that does not have a primary key, you must set the NXTKEY
preference to No.&nbsp; If you don't, you will get a compile error on the form.&nbsp; Alternatively, you can add
a dummy primary key to the table or view.</P>
<H3><A NAME="Views%20with%20Derived%20Columns"></A>Views with Derived Columns</H3>
<P>You can create a column on a view from an expression (such as the concatenation of two columns).&nbsp; However,
the view column will be generated with a default width of 4000 on the database.&nbsp; If you then use this column
in an LOV, the generated record group will not compile.&nbsp; A column in a record group is limited to a width
of 2000.</P>
<H3><A NAME="Check%20the%20width%20of%20generated%20but"></A>Check the width of generated buttons</H3>
<P>In earlier releases, Form Generator used two different sizing algorithms when determining the dimensions of
generated items and buttons.</P>
<P>In Designer 6i, Form Generator uses the same algorithm to size both items and buttons.&nbsp; As a result, buttons
are generated with slightly smaller dimensions.</P>
<P>The change in dimensions will be particularly noticable where the generated application contains large buttons,
and the button label occupies the entire button face.</P>
<P>If changed button dimensions are unacceptable, increase the Width property of the repository item from which
the button was generated.</P>
<H3><A NAME="Variety%20of%20Layout%20Differences"></A>Variety of Layout Differences</H3>
<P>This issue cannot be assessed until after you have followed your chosen migration scenario and begun generating
forms.&nbsp; However, it is included in the General Migration Issues chapter since the same issues apply regardless
of which migration path you choose.</P>
<P>Once you start generating your forms from Designer 6<I>i</I>&nbsp; you will notice a variety of problems with
layout.&nbsp; Depending on your forms, the following issues may or may not cause problems for you.</P>

<UL>
	<LI>Due to the addition of Relative Tab Stops and Side by Side canvases, Designer has changed its algorithm for
	determining the width and height of a generated canvas and the blocks it contains.&nbsp;In previous releases, if
	the Module Component's height and width were set to null, Form Generator set the width to the value in preference
	PAGCWD, and set the height just large enough to contain all the data (up to a maximum set in preference PAGCHT).&nbsp;
	Now, the algorithm is much more complex.&nbsp; (See the Designer online help for all the details.)&nbsp; If you
	leave the height and width null, you will not get the same layout you got from earlier releases.&nbsp; Chances
	are, the generated canvases and blocks will be larger.&nbsp; So, where we used to advise that you always leave
	the module component Height and Width properties blank, it is better now to fill them in.&nbsp; Designer no longer
	just uses the values you key in.&nbsp; It now calculates a good fit height and width from these values.
	<LI>In previous releases, if you had a module component that was narrower than the canvas and you set the block
	justification preference to CENTER, the data in the module component would be centered in the module component
	and the module component itself would be centered on the content canvas.&nbsp; In this release, form generator
	centers the data in the module component, but unfortunately it left-justifies the module component on the canvas.&nbsp;
	If you want a block centered, you will have to explicitly set the block width to the same value as the canvas width
	in order to get the block contents centered on the canvas.
	<LI>Designer has changed how it handles multi-line text display.&nbsp; If the field width is too large for the
	canvas, it used to expand the canvas.&nbsp; Now it shrinks the multi-line text item.&nbsp; You will have to adjust
	your item sizes accordingly.
	<LI>Tab handling has changed considerably with the introduction of relative tabs and changing the Horizontal vs.
	Vertical item group property from a preference to a property.&nbsp; You may find you have to revisit your tab definitions.
	<LI>A multi-record block with an overflow right may need to have the number of rows reduced so that the multi-row
	section is not taller than the overflow section.
	<LI>Designer 6<I>i</I> has changed its functionality regarding the handling of scrollbars on a multi-record block
	whose data is placed on tabbed item groups.&nbsp; In the previous release, there was no scrollbar on these screens.&nbsp;
	Designer now displays a scrollbar on the context canvas next to the tabbed canvases.
	<LI>Designer has changed its algorithm for calculating item widths.&nbsp; In general, the widths of items being
	generated are slightly different.
	<LI>Designer has changed how it determines the width of action items.&nbsp; Be aware that action item button width
	may not generate correctly.
</UL>

<H1><A NAME="Chapter%204  %20Scenario%201| %20Migrate"></A>Chapter 4&nbsp;&nbsp; Scenario 1:&nbsp; Migrate, Regenerate
All, No Redesign</H1>
<P>In this scenario, you will regenerate your entire application from Oracle Designer 6i, including all forms,
libraries, menus and reports.&nbsp; However, you will use your existing template form(s) and object libraries (if
applicable).</P>
<P>The goal of this scenario is to be able to generate your application out of Oracle Designer 6i and achieve the
same results you got when generating out of your previous Designer release.&nbsp; No attempt is made to redesign
your existing application to make use of new features available in Oracle Designer 6i.</P>
<P>This chapter assumes that you have performed all the actions described in Chapter 3, General Migration Issues.</P>
<H2><A NAME="4-Migrating%20from%201.3.2"></A>Migrating from 1.3.2</H2>
<P>This section covers migrating from Designer 1.3.2.&nbsp; If you are migrating from a later release, you may
skip this section.</P>
<H3><A NAME="Upgrading%20existing%20Forms%204.5%20tem"></A>Upgrading existing Forms 4.5 template forms</H3>
<P>A number of changes to template forms created with Developer/2000 (Forms 4.5) are necessary before Form Generator
6i can use them:</P>

<UL>
	<LI>If a template visual attribute's Background Color property is set to Arrows, it must be set to None.
	<LI>Add comment CGAP$TES_SEQUENCE_BEFORE to each template trigger.&nbsp; This comment is needed because it is now
	possible to sequence template trigger code either before or after the code that will be generated into the trigger
	by Forms Generator.
	<LI>Add comment CGAP$TNR to each template program unit.
	<LI>The template form must be upgraded from Forms 4.5 to Forms 6i.
</UL>

<P>Oracle Designer supplies a utility to perform these changes.</P>

<UL>
	<LI>Read the PFRMxx.txt file in &lt;oracle_home&gt;\cgenfxx or &lt;oracle_home&gt;\bin.
	<LI>Run the PFRMxx utility to upgrade Forms 4.5 templates for use with Form Generator in Oracle Designer 6i.
</UL>

<P>You must run this utility for all template forms as well as referenced forms.&nbsp; You can do this in batch
by creating a .bat file containing the following line of code once for each form to be upgraded.</P>
<P>pfrmxx -i &lt;input&gt;.fmb -o &lt;output&gt;.fmb ChVisAt(arrows%none) AddTrg(CGAP$TES_SEQUENCE_BEFORE)</P>
<P>Review the Designer online help topics Release 1.x style to determine any changes you may need to make to
your template form before generating.</P>
<H3><A NAME="Upgrade%20existing%20Forms%204.5%20templ"></A>Upgrade existing Forms 4.5 template menus</H3>
<P>You cannot use the PFRMxx utility to upgrade template menus.</P>

<UL>
	<LI>Open and save each template menu module using Form Builder 6i
</UL>

<H3><A NAME="Upgrade%20Forms%204.5%20Libraries"></A>Upgrade Forms 4.5 Libraries</H3>
<P>Upgrading the libraries is straightforward.&nbsp; To upgrade manually, you open the library in Form Builder
6i (or Report Builder 6i).&nbsp; Form Builder will automatically start converting PL/SQL version&nbsp; to PL/SQL
version 2.&nbsp; During this PL/SQL conversion it will ask you to confirm certain conversion operations.&nbsp;
You can safely press the 'Convert All' button if you are prompted for such a conversion operation.</P>
<P>You can also create a .bat file to perform this upgrade in batch.&nbsp; Include the following line of code once
for each library to be upgraded.</P>
<P>ifcmpxx module=&lt;library&gt;.pll userid=&lt;user&gt;/&lt;pass&gt;@&lt;connect&gt; module_type=LIBRARY Logon=YES
Batch=Yes upgrade=YES version=45 build=No window_state=Minimize</P>
<H3><A NAME="Attached%20OFG%20Libraries"></A>Attached OFG Libraries</H3>
<P>Designer release 1.3.2 attached a number of OFG libraries to generated forms.&nbsp; You may also have attached
some of those libraries to your custom PL/SQL libraries.</P>
<P>The Form Generator does not use these libraries anymore.&nbsp; Form Generator now uses a new, renamed version
for each of these libraries.&nbsp;</P>
<P>
<TABLE BORDER="1" CELLPADDING="6" CELLSPACING="0">
	<TR>
		<TD WIDTH="132" VALIGN="TOP">
			<P><B>Designer 1.3.2 Library</B>
		</TD>
		<TD WIDTH="138" VALIGN="TOP">
			<P><B>Oracle Designer 6i Library</B>
		</TD>
	</TR>
	<TR>
		<TD WIDTH="132" VALIGN="TOP">
			<P>OFG4BSL
		</TD>
		<TD WIDTH="138" VALIGN="TOP">
			<P>OFGBSL
		</TD>
	</TR>
	<TR>
		<TD WIDTH="132" VALIGN="TOP">
			<P>OFG4CALL
		</TD>
		<TD WIDTH="138" VALIGN="TOP">
			<P>OFGCALL
		</TD>
	</TR>
	<TR>
		<TD WIDTH="132" VALIGN="TOP">
			<P>OFG4HPL
		</TD>
		<TD WIDTH="138" VALIGN="TOP">
			<P>OFGHPL
		</TD>
	</TR>
	<TR>
		<TD WIDTH="132" VALIGN="TOP">
			<P>OFG4MES
		</TD>
		<TD WIDTH="138" VALIGN="TOP">
			<P>OFGMES
		</TD>
	</TR>
	<TR>
		<TD WIDTH="132" VALIGN="TOP">
			<P>OFG4MNL
		</TD>
		<TD WIDTH="138" VALIGN="TOP">
			<P>OFGMNL
		</TD>
	</TR>
	<TR>
		<TD WIDTH="132" VALIGN="TOP">
			<P>OFG4TEL
		</TD>
		<TD WIDTH="138" VALIGN="TOP">
			<P>OFGTEL
		</TD>
	</TR>
</TABLE>
</P>
<P>You must ensure the program units in the new libraries (which still have the same names as the old version)
are used at runtime instead of the old versions.</P>
<P>When you regenerate your forms from Oracle Designer 6i, they will automatically get the new libraries attached.</P>
<P>However, if you attached the OFG4 libraries to your pl/sql libraries you will have to correct each library
manually.</P>

<UL>
	<LI>De-attach the obsolete OFG4 libraries from all libraries
	<LI>Attach the new OFG libraries
</UL>

<H3><A NAME="Review%20use%20of%20the%20obsolete%20prefe"></A>Review use of the obsolete preferences and the setting
of OLBOLD</H3>
<P>This preference enables you to specify that Form Generator is to continue to use preferences made obsolete by
the support for object libraries.</P>
<P>The obsolete preferences are:</P>
<P>
<TABLE BORDER="1" CELLPADDING="6" CELLSPACING="0" WIDTH="341">
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P><B>Preference</B>
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P><B>Equivalent object library object property</B>
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>AUTOHP
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Display Hint Automatically
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>BLKVSB
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Show Vertical Scroll Bar
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>COLSEC
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Enforce Column Security
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>IMGBEV
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Image Item  Bevel
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>IMGCMP
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Image Item - Compression Quality
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>IMGDHT
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Image Item  Height
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>IMGDWD
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Image Item  Width
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>IMGHSB
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Image Item - Show Horizontal Scroll Bar
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>IMGQLT
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Image Item - Display Quality
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>IMGSZS
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Image Item - Sizing Style
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>IMGVSB
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Image Item - Show Vertical Scroll Bar
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>LOVNAV
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Push Button - Keyboard Navigable
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>TXTBEV
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Text Item  Bevel
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>WINCLO
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Window - Close Allowed
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>WINDLG
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Window - Window Style
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>WINFHT
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Window - Height
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>WINFIX
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Window  Resize Allowed
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>WINFWD
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Window  Width
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>WINFXP
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Window  X Position
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>WINFYP
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Window  Y Position
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>WINHSB
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Window  Show Horizontal Scrollbar
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>WINICN
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Window - Icon Filename
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>WINICO
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Window - Minimize Allowed
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>WINICT
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Window - Minimized Title
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>WINMOV
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Window - Move Allowed
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>WINVSB
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Window - Show Vertical Scrollbar
		</TD>
	</TR>
	<TR>
		<TD WIDTH="78" VALIGN="TOP">
			<P>WINZOO
		</TD>
		<TD WIDTH="263" VALIGN="TOP">
			<P>Window - Maximize Allowed
		</TD>
	</TR>
</TABLE>
</P>
<P>Note that the default setting of OLBOLD is No, so you will have to change this preference if you want to continue
using the obsolete preferences.&nbsp; Also note that the OLBOLD preference is provided for backwards compatibility
only.&nbsp; This preference and the obsolete preferences will be removed in future releases of Form Generator.</P>
<H3><A NAME="Review%20Template%20Window%20Propertie"></A>Review Template Window Properties</H3>
<P>Check if your old templates have windows which have 'Primary Canvas', 'Horizontal Toolbar' or 'Vertical Toolbar'
properties set explicitly to Null instead of inheriting null from the factory settings. (A small green box is dipslayed
to the left of the property name.)&nbsp; If so, re-inherit these properties.&nbsp; (The small green box will change
to a bullet.)</P>
<H3><A NAME="Review%20the%20setting%20of%20STOOLB"></A>Review the setting of STOOLB</H3>
<P>This preference enables you to specify the name and extension (in the fomat myobjlib.olb) of a default object
library.&nbsp; The value of STOOLB is used as the default in the Object Library Name field on the Generate Form
dialog box.</P>
<P>Since you have decided not to use an object library (by choosing this migration scenario), you must set STOOLB
to null.</P>
<H3><A NAME="Review%20use%20of%20color%20palettes"></A>Review use of color palettes</H3>
<P>When generating a form, Form Generator determines which color palette to give the generated form as follows:</P>

<UL>
	<LI>If a template form is being used, Form Generator gives the generated form the template form's color palette.
	<LI>If a template form is not being used, Form Generator gives the generated form the default Form Builder color
	palette.
</UL>

<P>In earlier releases, the template forms supplied with Form Generator did not use the default Form Builder template.&nbsp;
Instead, they used a color palette similar to that used in Oracle Applications forms.</P>
<P>In this release, the shipped template forms supplied with Form Generator have been given the default Form Builder
color palette.&nbsp; If you compare a form generated using the old templates and a form generated using the new
templates you will notice significant color differences.</P>
<P>However, the earlier template forms are still supplied (as .fmb files with names beginning with OFG4) to enable
you to continue using the non-default color palette.</P>
<P>If you have used one of the template forms supplied with Form Generator to generate forms, continue to use the
same template form.</P>
<P><B>Note:</B>&nbsp; If you intend to use an object library as well as the template form you used in earlier versions,
be aware that the objects in the shipped object libraries supplied in this release were created in forms that had
the default Form Builder color palette.&nbsp; To generate forms using both an object library and a template form,
make sure objects in the object library were originally created in a form with the same color palette as the template
form.&nbsp; For more information, refer to the online help topic 'Notes on color palettes and Form Generator'.</P>
<H3><A NAME="Review%20use%20of%20coordinate%20systems"></A>Review use of coordinate systems</H3>
<P>Form Generator applies the coordinate system and the default character cell specified for the template form
to the generated form.</P>
<P><B>Note:</B>&nbsp; If you intend to use an object library during generation as well as the template form you
used in an earlier version, there is an issue you must be aware of.&nbsp;</P>
<P>If the object library contains objects that are subclassed or copied into the generated form, the generated
objects might be sized incorrectly.&nbsp; This situation occurs where objects in the object library were originally
created in forms with a different co-ordinate system to that of the template form.</P>

<UL>
	<LI>To ensure generated objects are sized correctly, make sure any object library objects that will be copied or
	subclassed into the generated form (e.g CGSO$LOVBUT) are created in a form with the same coordinate system as the
	template form you are using.
</UL>

<H3><A NAME="Review%20the%20setting%20of%20MSGSFT"></A>Review the setting of MSGSFT</H3>
<P>In earlier releases, you could use MSGSFT to specify a form-level procedure for displaying soft-coded messages
for use instead of the standard Forms message handling procedures.</P>
<P>In Oracle Designer 6i, MSGSFT specifies the name of a package.&nbsp; Form Generator is supplied with a suitable
message-handling package called CG$FORM_ERRORS in the ofgtel.pll library.&nbsp; If you specify a package other
than CG$FORM_ERRORS, the package you specify must contain the following three program units:</P>

<UL>
	<LI>a procedure called PUSH
	<LI>a function called MSGGETTEXT
	<LI>a procedure called RAISE_FAILURE.
</UL>

<P>There are also other naming conventions and parameter requirements you must follow if you decide to specify
a package other than CG$FORM_ERRORS.&nbsp; For these reasons, we recommend you copy CG$FORM_ERRORS and then modify
the copy.&nbsp; For more information, refer to the help topic 'About customizing the CG$FORM_ERRORS package'.</P>
<P>Refer to the help system to find out more about the requirements for a suitable message-handling package.</P>
<H3><A NAME="Review%20the%20setting%20of%20CANNTC"></A>Review the setting of CANNTC</H3>
<P>In earlier releases, you could use Form Generator to generate stacked item groups onto different stacked canvases
displayed in the same area on a form.&nbsp; Only one of the stacked canvases is visible at any one time.&nbsp;
Users of the generated form select which stacked canvas to display using a control poplist.&nbsp; This was an effective
alternative implementation to Form Builder's native implementation of tab canvases.</P>
<P>In Oracle Designer 6i, Form Generator enables you to generate a native Form Builder tab canvas with a number
of tab pages.&nbsp; Each tab page contains a stacked item group.</P>
<P>Form Generator continues to support the alternative implementation (using stacked canvases and an item group),
and uses the CANNTC preference to determine whether to generate native Form Builder tab canvases or the alternative
implementation.&nbsp; However, the default setting of CANNTC (Yes) indicates that Form Generator is to generate
native tab canvases.</P>
<P>Note that native tab canvases require more vertical space.&nbsp; If the increased vertical space required by
tab canavases is not available, set CANNTC to No.</P>
<H3><A NAME="Re-Generating%20the%20Application%20Sy"></A>Re-Generating the Application System</H3>
<P>In the Preferences Editor, at the application level, change the preferences STFFMB and STMMMB to the names of
your (upgraded) form and menu templates.</P>
<P>Use the Batch Generation option under the Tools menu in the Design Editor to generate your application.</P>
<P>You must generate the following object types.</P>

<UL>
	<LI>Libraries (if you have Design Captured them)
	<LI>Menus
	<LI>Forms
	<LI>Reports
</UL>

<H2><A NAME="4-Migrating%20from%202.1.2"></A>Migrating from 2.1.2</H2>
<P>This section covers general migration issues when migrating from Designer 2.1.2.&nbsp; If you are migrating
from a later release, you may skip this section.</P>
<P>First perform all the steps described in the section 'Migrating from 2.1.2 or 6.0' in the Chapter 3 &quot;General
Migration Issues&quot;, earlier in this part.</P>
<H3><A NAME="Upgrade%20Forms%205.0%20Libraries"></A>Upgrade Forms 5.0 Libraries</H3>
<P>Upgrading the libraries is straightforward.&nbsp; To upgrade manually, perform the following steps.</P>

<UL>
	<LI>Open the library in Form Builder 6i (or Report Builder 6i)
	<LI>Choose Program -&gt; Compile -&gt; All
	<LI>Save
</UL>

<P>You can also create a .bat file to perform this upgrade by including the following line of code once for each
library.</P>
<P>ifcmpxx module=&lt;library&gt;.pll userid=&lt;user&gt;/&lt;pass&gt;@&lt;connect&gt; module_type=LIBRARY Logon=YES
Batch=Yes build=No window_state=Minimize</P>
<H3><A NAME="Re-Generating%20the%20Application%20Sy"></A>Re-Generating the Application System</H3>
<P>In the Preferences Editor, at the application level, change the preferences STFFMB and STMMMB to the names of
your old form and menu templates.</P>
<P>Use the Batch Generation option under the Tools menu in the Design Editor to generate your application.</P>
<P>You must generate the following object types.</P>

<UL>
	<LI>Libraries (if you have design captured them)
	<LI>Menus
	<LI>Forms
	<LI>Reports.
</UL>

<H2><A NAME="4-Migrating%20from%206.0"></A>Migrating from 6.0</H2>
<P>This section covers general migration issues when migrating from Designer Release 6.0.&nbsp; If you are migrating
from a later release, you may skip this section.</P>
<P>First perform all the steps described in the section 'Migrating from 2.1.2 or 6.0' in Chapter 3 &quot;General
Migration Issues&quot;, earlier in this document.</P>
<H3><A NAME="Re-Generating%20the%20Application%20Sy"></A>Re-Generating the Application System</H3>
<P>In the Preferences Editor, at the application level, change the preferences STFFMB and STMMMB to the names of
your old form and menu templates.</P>
<P>Use the Batch Generation option under the Tools menu in the Design Editor to generate your application.</P>
<P>You must generate the following object types:</P>

<UL>
	<LI>Libraries
	<LI>Menus
	<LI>Forms
	<LI>Reports.
</UL>

<H3><A NAME="Re-Generating%20the%20Application%20Sy"></A>Regenerating the Application System</H3>
<P>In the Preferences Editor at the application level, change the preferences STFFMB and STMMMB to the names of
your old form and menu templates.</P>
<P>Use the Batch Generation option under the Tools menu in the Design Editor to generate your application.</P>
<P>You must generate the following object types.</P>

<UL>
	<LI>Libraries
	<LI>Menus
	<LI>Forms
	<LI>Reports
</UL>

<P>
<H1><A NAME="Chapter%205  %20Scenario%202| %20Migrate"></A>Chapter 5&nbsp;&nbsp; Scenario 2:&nbsp; Migrate, Regenerate
All, with Redesign</H1>
<P>In this scenario, you will regenerate your entire application from Oracle Designer 6i, including all forms,
libraries, menus and reports.&nbsp; You will use the new templates and object library provided by Oracle Designer
6i.&nbsp; As you regenerate each module, you will make use of new features as appropriate.</P>
<P>The goal of this scenario is to take advantage of the new features available in Oracle Designer 6i.&nbsp; As
with Scenario 1, you want to be able to generate your application and get the same user interface you got from
your previous release of Designer.&nbsp; However, many new features have been added to Designer to make achieving
the desired result easier.&nbsp; Many features that were difficult or impossible to generate with earlier releases
of Designer are now supported.&nbsp; Thus, in one pass, you can eliminate post generation modifications and difficult
constructs that were used only to work around limitations of earlier releases of Designer.</P>
<P>This chapter is organized by Designer release.&nbsp; You should begin reading at the section for your &quot;from&quot;
Designer release, and then continue reading the sections for any later releases.&nbsp; For example, if you are
migrating from Designer 1.3.2, you need to read all the sections below.&nbsp; If you are migrating from Designer
2.1.2, you may skip the section on Designer 1.3.2 and read the sections for Designer 2.1.2 and 6.0.</P>
<H2><A NAME="5-Migrating%20from%201.3.2"></A>Migrating from 1.3.2</H2>
<P>This section covers migration from Designer 1.3.2.&nbsp; If you are migrating from a later release, you may
skip this section.</P>
<H3><A NAME="Object%20libraries"></A>Object libraries</H3>
<P>To take full advantage of the the new features of Oracle Designer 6i, you must use an Object Library.&nbsp;
You can use the default object library provided with Designer, create an object library from your old reference
form, or a combination of the two.</P>
<H4>Benefits</H4>
<P>Object libraries are a new feature in Oracle Developer and are used by Form Generator in Oracle Designer.&nbsp;
In earlier versions of Form Generator, much of the functionality provided by object libraries was available using
preferences and objects defined in templates.</P>
<P>Since Oracle Designer Release 2, Form Generator has been able to use source objects in the object library to
set the properties of generated objects.&nbsp; This method is more flexible since you can change object properties
in the object library and propagate those changes to subclassed objects in generated forms simply by recompiling
the forms (i.e. You do not have to generate the forms again).&nbsp; We strongly recommend you make use of the flexibility
offered by object libraries to set and maintain standards in the applications you generate.</P>
<H4>About object libraries</H4>
<P>An Oracle Developer object library is a container for reusable objects.&nbsp; Object libraries enable you to:</P>

<UL>
	<LI>reuse an object in many forms
	<LI>apply standards to existing objects.
</UL>

<P>You can copy both objects and subclass objects from object libraries.</P>
<P>Object libraries are the recommended method for subclassing objects.&nbsp; Changes made to a source object in
an object library can be propagated to any objects subclassed from that object by recompiling the appropriate forms.</P>
<H4>About subclassed objects</H4>
<P>A subclassed object is similar to a copied object, except that a subclassed object maintains a link to its source
object.</P>
<P>Subclassing objects is an efficient way to reuse objects and enforce standards.&nbsp; A subclassed object automatically
inherits any changes that have been made to the source object when you recompile a module containing it.</P>
<P>Object libraries are the recommended method for subclassing objects, since it is convenient to keep the source
of subclassed objects separately.&nbsp; Changes made to properties of a source object in an object library can
be propagated to any objects subclassed from that object by subsequently recompiling the appropriate forms.</P>
<P><B>Note:</B> &nbsp;&nbsp; If you make changes to a subclassed object property that has been inherited from a
source object, subsequently recompiling the form will not modify the changed property.&nbsp; Changing the subclassed
property removes the link between that property and the source object.&nbsp; However, the link between unchanged
subclassed properties and the source object remains in force.</P>
<H5>Form Generator and object libraries</H5>
<P>When you generate forms using Form Generator, you can specify that Form Generator creates generated objects
by either copying or subclassing from properties of source objects in an object library specified by the STOOLB
preference.</P>
<P>You will typically want generated objects to inherit their properties from source objects, although you can
direct Form Generator to use preference settings or Repository information instead.&nbsp; But because source objects
have all the properties of generated objects, using source objects enables you to set generated object properties
that cannot be set using preferences or Repository information.</P>
<P>Object libraries used by Form Generator can contain two types of source object:</P>

<UL>
	<LI>standard source objects
	<LI>implementation source objects.
</UL>

<H5>Standard source objects</H5>
<P>A standard source object is an object in the object library that Form Generator is programmed to recognize and
use when creating a particular type of generated object. Form Generator uses the names of standard source objects
to determine which to use during generation.&nbsp; Standard source objects have names prefixed with CGSO$.&nbsp;
The rest of the object's name indicates the generated objects for which it can be the source.&nbsp; For example,
the CGSO$CHECK_BOX standard source object is the source object for generated check boxes.&nbsp; You can find a
complete list of standard source objects in the Designer online help as well as in the default object library shipped
with Designer.</P>
<H5>Implementation source objects</H5>
<P>An implementation source object is an object that can be used to override a standard source object.&nbsp; You
can explicitly direct the Form Generator to use an implementation source object (instead of a standard source object)
when generating a particular object.&nbsp; You use the repository object definition's Template/Library Object property
to specify the implementation source object Form Generator is to use.</P>
<P>You can specify two types of implementation source object:</P>

<UL>
	<LI>user-defined implementation source objects, which you have created and named yourself
	<LI>shipped implementation source objects, which provide default Oracle Developer functionality and which have
	names prefixed with CGAI$.
</UL>

<H5>User-defined implementation source objects</H5>
<P>You can add your own implementation source objects for any type of object.&nbsp; When creating a user-defined
implementation source object, we recommend you do not give it a name that begins with CGSO$ or CGAI$.</P>
<P>If Form Generator copies or subclasses properties of a generated block from an object library block, any items
belonging to the object library block are also included in the generated form.&nbsp; If such an item has a name
that begins CGAI$, Form Generator places the item below other items in the generated block and beside buttons generated
from action items defined for the module component.&nbsp; For more information, refer to the help topic 'Items
copied or subclassed from items in object library blocks'.</P>
<H5>Shipped implementation source objects</H5>
<P>The shipped object library ofgstnd1.olb contains a number of implementation source objects that provide default
Oracle Developer functionality.&nbsp; The names of these implementation source objects begin with CGAI$.&nbsp;
You can specify one of these implementation source objects for the object Form Generator to use when generating:</P>

<UL>
	<LI>an action item
	<LI>an unbound item with a Display Type of Button.
</UL>

<P>Note:&nbsp; This same functionality was provided in earlier versions of Form Generator by CG$ button items in
the template.&nbsp; Although the CG$ button item method continues to be supported in this release, we recommend
you use CGAI$ implementation source objects instead.</P>
<P>For a list of the shipped implementation source objects and the equivalent CG$ template button items, refer
to the help topic 'Alphabetical list of shipped Implementation source objects'.</P>
<H4>Creating an object library using the FM2LIBxx utility</H4>
<H5>Creating an Object Library the Hard Way</H5>
<P>To create an object library using only Form Builder, you would have to perform the following steps:</P>

<UL>
	<LI>Create an empty object library (.olb file).
	<LI>Create a dummy form (.fmb file).
	<LI>Add objects to the dummy form.
	<LI>Drag and drop the objects into the object library.
	<LI>Discard the dummy form.
</UL>

<P>To maintain the object library, you would have to perform the following steps:</P>

<UL>
	<LI>Open the object library.
	<LI>Create a dummy form.
	<LI>Drag and drop the object you wish to modify from the object library to the dummy form.
	<LI>Make the desired changes.
	<LI>Drag and drop the object back to the object library.
	<LI>Discard the dummy form.
</UL>

<P>This method has a number of disadvantages.&nbsp; First, the process itself is cumbersome and error prone.&nbsp;
Much worse though is the fact that if you have objects that are subclassed amongst themselves, then when you drag
them out and back into the object library for maintenance, all the subclassing is lost.</P>
<H5>Creating an Object Library the Easy Way</H5>
<P>Designer supplies a utility called FM2LIBxx (where xx is the Designer version number) that will automatically
create an object library from a form.&nbsp;</P>
<P>This utility enables you to create and maintain source objects in form.&nbsp; Essentially, you create an 'object
library maintenance' form which includes everything you want to have in your object library.&nbsp; This form is
not discarded, but kept as part of your template set.&nbsp; Whenever you need to modify your object library, you
make the changes in this maintenance form.</P>
<P>You use the FM2LIBxx utility to generate the object library .olb file from the maintenance form.</P>
<P>There are several advantages to this approach, including:</P>

<UL>
	<LI>Ease of maintenance - you do not have to drag objects into a form module for editing and then drag them back
	into the object library.
	<LI>Subclassing information is retained when editing objects - subclassing information is lost when you drag objects
	into an object library from a form module for editing.
</UL>

<P>For more information about using the FM2LIBxx utility, refer to the file fm2libxx.txt in the &lt;ORACLE_HOME&gt;\CGENFxx
directory.</P>
<H4>Object libraries and earlier versions of Form Generator</H4>
<H5>Object libraries, obsolete preferences, and OLBOLD</H5>
<P>In previous versions, Form Generator used a number of preferences to set object properties.&nbsp; For example,
you might have set the IMGBEV preference to determine the style of the border surrounding images.</P>
<P>The support for object libraries has resulted in a number of preferences becoming obsolete.&nbsp; For a full
list of obsolete preferences, refer to the online help topic 'Alphabetical list of obsolete preferences and the
equivalent object library properties'.</P>
<P>We strongly recommend you do not use the obsolete preferences.&nbsp; However, to ensure backwards-compatability,
you can set the OLBOLD preference to specify that Form Generator continues to use these preferences instead of
properties in the object library.</P>
<P><B>Note:</B> The OLBOLD preference and the obsolete preferences will be removed in future releases of Form Generator.</P>
<H5>Object libraries and CG$ template objects</H5>
<P>In previous versions, Form Generator used a number of objects from the template form to control properties of
generated objects.</P>
<P>In Oracle Designer Release 2, Form Generator continues to use CG$ template objects as in previous releases -
with one exception.&nbsp; When creating an LOV indicator button, Form Generator first searches the object library
for a standard source object called CGSO$LOV_BUT and uses that instead of a CG$LB template object if one has been
defined.</P>
<P><B>Note:</B> It is likely that CG$ template objects will be replaced by object library functionality in future
releases of Form Generator.</P>
<H5>Object libraries and CG$ template button items</H5>
<P>In previous versions, Form Generator used a number of CG$ template button items from the template form to provide
default Form Builder functionality.</P>
<P>In this release, Form Generator continues to use CG$ template button items.&nbsp; However, equivalent functionality
is also available through the use of shipped implementation source objects (prefixed CGAI$) in the object library.&nbsp;
For a list of the shipped implementation source objects and the equivalent CG$ template button items, refer to
the help topic 'Alphabetical list<B> </B>of shipped implementation source objects'.</P>
<P>Note that the behavior of Form Generator with regard to shipped implementation source objects and CG$ template
button items is slightly different.&nbsp; If a template contains CG$ template buttons, every form generated with
that template contains those CG$ template buttons.&nbsp; To include the same functionality in every generated form
using CGAI$ objects, either explicitly specify implementation source objects for individual unbound items in every
module (potentially difficult to maintain and not recommended), or follow the instructions below to generate a
common control block:</P>

<UL>
	<LI>Create a reusable module component.
	<LI>Create an unbound item for each generated item you want in the control block.
	<LI>Set the Template/Library Object property for each unbound item to the appropriate CGAI$ implementation source
	object.
	<LI>Include the reusable module component as the first or last component in every module.
</UL>

<H5>Object libraries and Generator named visual attributes</H5>
<P>In previous versions, Form Generator applied a number of Generator named visual attributes (NVAs) from the template
form to generated objects.</P>
<P>In this release, Form Generator can use the properties of standard source objects in the object library to set
the properties of generated objects in much the same way as using Generator NVAs.&nbsp; This method is more flexible
since you can change object properties in the object library and propagate those changes to subclassed objects
in generated forms simply by recompiling the forms.&nbsp; We strongly recommend you make use of the flexibility
offered by object libraries to set and maintain standards in the applications you generate.</P>
<P>However, to ensure backwards-compatability, Form Generator continues to use Generator NVAs on objects that have
not been subclassed or copied from an object library as follows:</P>

<UL>
	<LI>If an implementation object in the object library has been specified for an object, use this if it exists.
	<LI>If an implementation object has been specified and it does not exist, or if no implementation object has been
	specified, use an appropriate standard source object from the object library.
	<LI>If no appropriate standard source object exists in the object library, apply the appropriate visual attribute
	from the template form.
</UL>

<P><B>Note:</B> &nbsp;&nbsp; Generator NVAs will be removed in future releases of Form Generator.</P>
<H5>Object libraries and generated items' widths, lengths, and formats</H5>
<P>In previous versions, if information about an item's width, length, and format were not recorded in the repository
(either against the column definition or the item definition), Form Generator obtained this information from a
number of preferences (prefixed TXT).</P>
<P>In this release, if information about an item's width, length, and format are not recorded in the repository,
Form Generator obtains this information from source objects in the object library.&nbsp; Form Generator only uses
the corresponding TXT preferences if no appropriate source object exists in the object library, or if an appropriate
source object exists but the relevent property has not been set.</P>
<H4>Standard source objects and object libraries</H4>
<P>During generation, Form Generator analyzes each object it creates to determine which standard source object
it expects to use in the object library.&nbsp; Form Generator can use a standard source object from an object library
during generation providing the standard source object:</P>

<UL>
	<LI>has one of the recognized names
	<LI>is of the correct object type.
</UL>

<P>Form Generator uses the names of standard source objects to determine which to use during generation.&nbsp;
Standard source objects have names prefixed with CGSO$.&nbsp; The rest of the object's name indicates the generated
objects for which it can be the source.&nbsp; For example, the CGSO$CHECK_BOX standard source object is the source
object for generated check boxes.&nbsp; For a list of the recognized names of standard source objects, refer to
the online help topic 'Alphabetical list of standard source objects and object types'.</P>
<P>The standard source objects are arranged in a predefined hierarchy.&nbsp; If Form Generator does not find the
expected standard source object, it searches the object library for the parent of the standard source object and
uses that instead.&nbsp; For a graphical representation of the standard source object hierarchy, refer to the online
help topic 'Hierarchy of standard source objects'.</P>
<H5>Standard source object suffixes</H5>
<P>In some cases, you can further refine the standard source objects from which Form Generator obtains properties
for generated objects by adding the suffixes below to the standard source object name:</P>
<P>
<TABLE BORDER="1" CELLPADDING="6" CELLSPACING="0">
	<TR>
		<TD WIDTH="72" VALIGN="TOP">
			<P><B>Order</B>
		</TD>
		<TD WIDTH="60" VALIGN="TOP">
			<P><B>Suffix</B>
		</TD>
		<TD WIDTH="336" VALIGN="TOP">
			<P><B>Use if generated object will be a...</B>
		</TD>
	</TR>
	<TR>
		<TD WIDTH="72" VALIGN="TOP">
			<P>1
		</TD>
		<TD WIDTH="60" VALIGN="TOP">
			<P>_MR
		</TD>
		<TD WIDTH="336" VALIGN="TOP">
			<P>...multi-record block, or an item in a multi-record block
		</TD>
	</TR>
	<TR>
		<TD WIDTH="72" VALIGN="TOP">
			<P>2
		</TD>
		<TD WIDTH="60" VALIGN="TOP">
			<P>_CT
		</TD>
		<TD WIDTH="336" VALIGN="TOP">
			<P>...control block (i.e. the module component contains only unbound items)
		</TD>
	</TR>
	<TR>
		<TD WIDTH="72" VALIGN="TOP">
			<P>3
		</TD>
		<TD WIDTH="60" VALIGN="TOP">
			<P>_DO
		</TD>
		<TD WIDTH="336" VALIGN="TOP">
			<P>...display only item
		</TD>
	</TR>
	<TR>
		<TD WIDTH="72" VALIGN="TOP">
			<P>4
		</TD>
		<TD WIDTH="60" VALIGN="TOP">
			<P>_MD
		</TD>
		<TD WIDTH="336" VALIGN="TOP">
			<P>...mandatory item
		</TD>
	</TR>
</TABLE>
</P>
<P>You can use the above suffixes individually or in combination.&nbsp; Form Generator will use the most appropriate
standard source item, according to the order of precedence indicated.</P>
<P>Form Generator first searches the object library for a standard source object name containing all of the applicable
suffixes.&nbsp; If no such standard source object exists, Form Generator searches the object library for the standard
source object name that contains the greatest number of appropriate suffixes.&nbsp; If two or more standard source
objects contain the same number of appropriate source objects, Form Generator uses the one containing the suffixes
highest in the order of precedence (see table above).</P>
<P>Note that Form Generator ignores a standard source object if any of the suffixes are not applicable.</P>
<H5>Examples</H5>
<P><B>Example 1:</B>&nbsp; Form Generator is going to create a display-only check box in a multi-record block.</P>
<P>Form Generator searches the object library for each of the following objects, in the order shown:</P>
<PRE>CGSO$CHECK_BOX_MR_DO</PRE>
<PRE>CGSO$CHECK_BOX_MR</PRE>
<PRE>CGSO$CHECK_BOX_DO</PRE>
<PRE>CGSO$CHECK_BOX</PRE>
<PRE>CGSO$DEFAULT_ITEM_MR_DO</PRE>
<PRE>CGSO$DEFAULT_ITEM_MR</PRE>
<PRE>CGSO$DEFAULT_ITEM_DO</PRE>
<PRE>CGSO$DEFAULT_ITEM</PRE>
<P>As soon as Form Generator finds one of these objects, it subclasses or copies the object into the generated
form and abandons the search.&nbsp; If Form Generator fails to find any of these standard source objects, it creates
a check box item using default item properties.</P>
<P><B>Example 2:</B>&nbsp; The object library contains the following objects:</P>
<PRE>CGSO$CHAR_MD_DO</PRE>
<PRE>CGSO$CHAR_MR</PRE>
<PRE>CGSO$CHAR_DO</PRE>
<PRE>CGSO$CHAR</PRE>
<P>Form Generator is generating a form from a module that contains a display-only character item in a multi-record
block.&nbsp; Form Generator subclasses or copies the CGSO$CHAR_MR standard source object into the generated form
because:</P>

<UL>
	<LI>the _MD suffix in CGSO$CHAR_MD_DO is inappropriate
	<LI>the _DO suffix in CGSO$CHAR_DO is lower in the suffix order of precedence than _MR.
</UL>

<P><B>Example 3:</B>&nbsp; The object library contains the following objects:</P>
<PRE>CGSO$DATE_MR</PRE>
<PRE>CGSO$CHAR_MR_MD</PRE>
<PRE>CGSO$CHAR_DO</PRE>
<PRE>CGSO$DEFAULT_ITEM</PRE>
<P>Form Generator is generating a form from a module that contains a mandatory date item in a single record block.&nbsp;
Form Generator subclasses or copies the CGSO$DEFAULT_ITEM standard source object into the generated form because:</P>

<UL>
	<LI>the _MR suffix in CGSO$DATE_MR is inappropriate
	<LI>the only occurrences of CGSO$CHAR (i.e.&nbsp; the parent of CGSO$DATE) have inappropriate suffixes (_MR_MD
	and _DO).
</UL>

<P>If the object library had contained a standard source object called CGSO$CHAR, or failing that an object called
CGSO$DEFAULT_ITEM_MD, Form Generator would have used these objects instead.</P>
<H4>Current Record Indicator and the Object Library</H4>
<P>If you want to use the Current Record Indicator in your forms, you must create a Visual Attribute called CG$CURRENT_RECORD
in your object library.&nbsp; This is not included in the Designer default object library, so you will need to
add it.</P>
<H3><A NAME="Application%20logic"></A>Application logic</H3>
<H4>Benefits</H4>
<P>The ability to record client-side code or 'application logic' in the repository is a new feature in Oracle Designer
since release 1.3.2.</P>
<P>In earlier releases, you could only include your own code in generated applications by entering code for template
objects or in attached libraries.&nbsp; This method was cumbersome and prone to error.</P>
<P>In this release, not only can you enter the code in the repository but you can also:</P>

<UL>
	<LI>specify which events in the generated application cause the code to execute
	<LI>specify whether your code executes before, after, or instead of code created by Form Generator.
</UL>

<P>Storing the code within the repository also enables you to make use of Oracle Designer's dependency analysis
features to assess the impact of proposed changes.</P>
<H4>About application logic</H4>
<P>'Application logic' is the name given both to code created by the Form Generator and to code you enter by hand.&nbsp;
Application logic comprises event code (code that executes in response to particular events) and named routines
(code that is called by event code).</P>
<P>There are different types of application logic:</P>

<UL>
	<LI>Generated application logic - event code and named routines created by Form Generator.
	<LI>User-modified generated application logic - event code and named routines created by Form Generator and subsequently
	modified by the user (and optionally captured into the repository).
	<LI>User application logic - event code and named routines defined by the user in the repository.
	<LI>Object library (OL) application logic - event code and named routines for particular objects that are copied
	into the generated application from a specified object library during generation.
	<LI>Template application logic - form-level event code and named routines that are copied into the generated application
	from a template during generation.
</UL>

<P>You can record application logic at the module level, the module component level and the item level.</P>
<P>In Form Builder, event code is implemented as trigger code.&nbsp; Event code segments are individual pieces
of trigger code.&nbsp; A named routine becomes a program unit held at module level or in an attached library, or
on the server.</P>
<H4>Where to enter application logic</H4>
<P>The answer to this question depends on the complexity of the code involved.&nbsp; If the code is very simple
(a few lines of code), then you can enter the code directly in the event logic in the form module.&nbsp; However,
if the code is complex, we recommend you include as little code in the generated form as possible.&nbsp; In practice,
this means including event code in the form that simply calls procedures on the server or in an attached library.&nbsp;
This strategy offers several advantages:</P>

<UL>
	<LI>Maintaining generated applications is easier because code on the server or in a library can be modified without
	recompiling generated forms.
	<LI>In the case of server-side procedures, network traffic is minimized and performance improved.
	<LI>It promotes reusability, since the same code can be used by different forms.
	<LI>It reduces the size of .fmx.
</UL>

<P>The recommended scenario is shown in the diagram below.</P>
<P><IMG SRC="images/4image002.gif" WIDTH="489" HEIGHT="354" ALIGN="BOTTOM" BORDER="0" v:shapes="_x0000_i1025"></P>
<P>We recommend that named routines that require database access (where the code includes SQL commands) be placed
in stored procedures on the server and not in an attached library.</P>
<H5>Where to enter event code</H5>
<P>If the event code (or calls to code stored on the server or in an attached library) is to be included in every
form:</P>

<UL>
	<LI>Enter block level and item level event code in an object library.
	<LI>Enter form level event code in the template form.
</UL>

<P>If event code is to be included in a single form or in some but not all forms, enter the event code in the repository
against the required modules, module components and items.</P>
<H5>Where to enter named routines</H5>
<P>In a typical client server environment, we recommend you create named routines (e.g. procedures) either on the
server or in a library attached to the generated form.&nbsp; These named routines are then called by the event
code incorporated in the generated form from the repository, an object library or the template.</P>
<P>If the named routines are to be held on the server:</P>

<UL>
	<LI>Enter the named routine in the Oracle Designer repository using the Logic Editor, and then run the Server Generator
	to create the named routines on the server.
	<LI>Enter the named routines manually in a text file, and then run the text file using SQL*Plus.
</UL>

<P>If the named routines are to be held in an attached library:</P>

<UL>
	<LI>Enter the named routines in a library manually using Form Builder and attach the library to the template form.
	<LI>Enter the named routines as application logic in a repository module of type Library, link the repository module
	to one or more modules of language Oracle Developer Forms (or Oracle Developer Reports) in a module network, and
	use Library Generator to generate the library module.
</UL>

<H4>Capturing application logic from Form Builder applications</H4>
<P>You can capture (or 'reverse engineer') application logic into the repository from:</P>

<UL>
	<LI>Forms you did not generate using Form Generator
	<LI>Forms you did generate using Form Generator and subsequently modified using Form Builder
	<LI>PLL modules (which can now be stored in Designer).
</UL>

<P>During design capture, any user application logic or user modified generated application logic is captured into
the repository.&nbsp; However, Form Generator uses comments in the code to identify and ignore:</P>

<UL>
	<LI>generated application logic
	<LI>template application logic
	<LI>object library application logic.
</UL>

<P>Where a trigger is captured, the execution style property of the corresponding event is set to the same value.</P>
<P>Note that BEGIN and END; statements must appear on separate lines.</P>
<H4>About generated application logic</H4>
<H5>What is generated application logic?</H5>
<P>Generated application logic is the code generated by Form Generator each time a form is generated.&nbsp; Generated
application logic is not held in the repository.</P>
<P>If the form has already been generated, any existing generated application logic is overwritten.</P>
<P>Generated application logic comprises:</P>

<UL>
	<LI>generated code groups
	<LI>generated named routines.
</UL>

<P>Although generated application logic is not stored in the repository, generated code groups are represented
in the Design Navigator window.&nbsp; This enables you to sequence user code groups and user-modified generated
code groups before and after generated code groups.</P>
<P>Note that generated named routines are not represented in the Design Navigator window.</P>
<H5>What are generated code groups?</H5>
<P>Generated code groups are the standard sections of trigger code (and any called program units) generated by
Form Generator.</P>
<P>Generated code groups are identified by a unique comment (e.g. /*CGRI$CHECK_ON_DELETE*/).&nbsp; If the generated
form is captured into the repository, these comments will enable Form Generator to identify the code as generated
application logic.&nbsp; Generated application logic is not captured into the repository during design capture.</P>
<P>For a list of generated code groups, refer to the following help topics:</P>

<UL>
	<LI>Form Generator code groups (grouped alphabetically)
	<LI>Form Generator code groups (grouped by functionality).
</UL>

<H5>What are generated named routines?</H5>
<P>Generated named routines are the standard program units created at module level by Form Generator.</P>
<H4>About user-modified generated application logic</H4>
<P>Using Form Builder, you can modify the application logic Form Generator has generated.</P>
<P>To prevent user-modified generated application logic from being overwritten if the form is generated again,
you must capture the application logic into the repository.</P>
<P>Capturing the user-modified generated application logic into the repository enables you to generate the form
again, incorporating the changes you have made in Form Builder.</P>
<H4>About user application logic</H4>
<P>User application logic is both:</P>

<UL>
	<LI>code you enter into the repository using the Design Editor and the Logic Editor
	<LI>code you enter using Form Builder and then capture into the repository.
</UL>

<P>When you enter user application logic, you specify it as being one of the following:</P>

<UL>
	<LI>A named routine, which is generated as a Form Builder program unit and called from triggers or other program
	units
	<LI>An event code segment, which is generated as Form Builder trigger code
</UL>

<H4>About OLB application logic</H4>
<P>Object Library (OLB) application logic is code (event code and named routines) associated with objects in the
object library that is added to blocks and items created during form generation.</P>
<P>When Form Generator includes an object from the object library in a generated form, any code associated with
that object is also included in the generated form.</P>
<H4>About template application logic</H4>
<P>Template application logic is the name given to named routines or event code (program units or form level triggers)
that you create in the template form.&nbsp; You might create template application logic to perform a common function
that you want in all the forms you generate.</P>
<P>Form Generator copies program units from the template form straight into the generated form.</P>
<P>Form Generator copies form level trigger code from the template into the generated form.&nbsp; Form Generator
uses comments in the template trigger code to determine whether to sequence it before or after generated code and
user code for the same trigger.</P>
<P>Form Generator also copies form-level sub-classed triggers into the generated form.&nbsp; In this case, note
that Form Generator is unable to modify the sub-classed trigger code.&nbsp; Therefore, any functionality Form Generator
would have added to the trigger had it been non-sub-classed is not included in the generated form.</P>
<H3><A NAME="Unbound%20Items"></A>Unbound Items</H3>
<P>In Designer 1.3.2, if you wanted to create a non-base table item you used a concept called Secondary Column
Usages.&nbsp; This release of Designer allows you to create Unbound Items, a much more flexible implementation
of non-base table items.</P>
<P>Unbound items are items that exist within a module component, but are not associated with any table usage.&nbsp;
You can define the type, placement and display, as well as application logic, for unbound items.&nbsp; You can
also define an LOV against an unbound item.</P>
<P>Your Secondary Column Usages will be automatically migrated to unbound items.&nbsp; However, they will retain
the old (ugly) names from 1.3.2.&nbsp; Consider renaming the unbound items to more descriptive names.&nbsp; Be
aware however, that any code referencing the old names will need to be updated to use the new names.</P>
<H3><A NAME="Action%20Items"></A>Action Items</H3>
<P>Action items are a shortcut method to creating buttons in your application.&nbsp; There are two types of action
items:</P>

<UL>
	<LI>Navigation Action Items  used to navigate to other blocks in the same form or to navigate to other forms
	<LI>Custom Action Items  used to generate all other button items.
</UL>

<P>Navigation action items are quick and easy to create and the code for the WHEN-BUTTON-PRESSED trigger is automatically
generated.</P>
<P>However, action items are always displayed on the bottom of the current window.&nbsp; Designer does not provide
a mechanism for specifying where you want the action item placed on the screen.&nbsp; If you want to control where
the buttons are placed, you can:</P>

<UL>
	<LI>Write a PRE-FORM trigger that explicitly sets the x and y coordinates of the generated buttons.
	<LI>Use an Unbound Item with display type Button instead (and write your own WHEN-BUTTON-PRESSED trigger).
</UL>

<P>You should replace all buttons that were generated as secondary column usages with either unbound items or action
items.</P>
<P>Again, you can rename the action items to more descriptive names.&nbsp; You will need to update any code that
references the old names.</P>
<H3><A NAME="Reusable%20module%20components"></A>Reusable module components</H3>
<H4>Benefits</H4>
<P>In previous releases, the only way to copy part of one module to a new module was to copy the complete module,
delete those elements that you did not want, and then use the remainder as the basis for the new module.</P>
<P>In this release, you can simply specify that a module component be made reusable.&nbsp; Making a module component
reusable encapsulates the properties, preferences and event code.&nbsp; You can then include this reusable component
in any number of modules.</P>
<P>Reusing module components in this way increases developer productivity and encourages consistency.&nbsp; The
modules that use the reusable component automatically inherit all changes that you make to the reusable component,
its application logic, and its associated preferences.</P>
<P>Reusable module components are an ideal way of defining control blocks to help give generated forms a common
look and feel.&nbsp; For example, placing standard Form Builder functionality in a common control block at the
top of every form presents users with a consistent interface.</P>
<H3><A NAME="Native%20Form%20Builder%20tab%20canvases"></A>Native Form Builder tab canvases</H3>
<H4>Benefits</H4>
<P>Screen real estate on which to layout the items that comprise an application is often severely limited, either
by the physical size of the screen or by the number of fields that have to be displayed.&nbsp; Users frequently
have to navigate through many screens to enter information.</P>
<P>In previous releases, a number of strategies were available to increase the virtual size of the screen:</P>

<UL>
	<LI>Multiple content canvases
	<LI>Multiple stacked canvases
	<LI>Spread tables
	<LI>Different stacked canvases displayed in the same area on a form and accessed via a poplist.
</UL>

<P>In this release, Form Generator can generate native Form Builder tab canvases, each containing two or more tab
pages.</P>
<P><IMG SRC="images/4image004.gif" WIDTH="179" HEIGHT="146" ALIGN="BOTTOM" BORDER="0" v:shapes="_x0000_i1026"></P>
<P>Native Form Builder tab canvases have standard Windows look-and-feel and an intuitive behavior.&nbsp; They can
form an integral part of your screen layout strategy.</P>
<H4>About tab canvases and tab pages</H4>
<H5>What is a tab canvas?</H5>
<P>A tab canvas enables you to group and display a large amount of related information on a single, dynamic canvas
object.&nbsp; Like stacked canvases, tab canvases are displayed on top of a content canvas, partly obscuring it.&nbsp;</P>
<P>A tab canvas is made up of one or more tab pages.&nbsp; Tab pages each display a subset of the information displayed
on the entire tab canvas.</P>
<H5>What are tab pages?</H5>
<P>A tab canvas can have many tab pages, and must have at least one.&nbsp; Think of tab pages as the folders in
a filing system.&nbsp; Each individual tab page (folder) has a labeled tab that developers and end users click
to access the page.&nbsp; You click the labeled tab to display the page at the front of the tab canvas, thereby
obscuring any other page(s).</P>
<P>Each tab page occupies an equal amount of space on the tab canvas, roughly equal to the size of the canvas itself.&nbsp;
This layering of related canvas sections enables you to display more information on a single canvas.</P>
<P>Tab pages are sub-objects of a tab canvas.&nbsp; Like the canvas to which it is attached, each tab page has
properties.</P>
<H4>About generated tab canvases and tab pages</H4>
<H5>What are generated native Form Builder tab canvases?</H5>
<P>Form Generator generates a native Form Builder tab canvas and tab pages on which to place:</P>

<UL>
	<LI>Generated blocks, if two or more Repository module components have their Placement properties set to New tab
	canvas page
	<LI>Generated stacked item groups, if two or more Repository item groups in a module component have their Stacked
	property set to Yes.
</UL>

<P>If the above conditions are met and CANNTC is set to Yes, Form Generator places each block generated from a
module component and each stacked item group onto different tab pages.</P>
<P>On selection of a tab label, the corresponding tab page is displayed and the cursor navigates to the first enterable
item on that tab page.&nbsp; When users navigate to an item on a tab page that is not currently displayed (by pressing
the [Next Item] key), the appropriate tab page is displayed.</P>
<H5>An alternative implementation in earlier releases</H5>
<P>In earlier releases, Form Generator enabled you to generate similar functionality using stacked item groups
placed onto different stacked canvases displayed in the same area on a form.&nbsp; The different stacked canvases
could be accessed via a poplist.</P>
<P>You might have existing module designs that include this alternative implementation.&nbsp; The CANNTC preference
enables you to either make use of the new Form Generator functionality to place the stacked item groups on the
native Form Builder tab canvases, or to continue to place the groups on stacked canvases.</P>
<H4>Notes on the use of tab canvases for displaying blocks</H4>
<P>Note the following when generating tab canvases to display blocks:</P>

<UL>
	<LI>A tab canvas (and its tab pages) generated from module components will appear at the position of the first
	module component that has its Placement property set to New Tab Canvas Page.&nbsp;It is your responsibility to
	make sure that blocks in the resulting form do not appear to users to be out of sequence.
	<LI>A content canvas can contain only one tab canvas generated from module components.
	<LI>If a generated form contains multiple content canvases, each content canvas can contain one tab canvas generated
	from module components.
	<LI>All block layout preferences apply to blocks generated onto tab pages.
	<LI>If the block you are generating onto a tab canvas page contains stacked item groups that are themselves to
	be generated onto a native Form Builder tab canvas, the first item in the block must not be in one of the stacked
	item groups.&nbsp;The first item must be placed on the underlying tab canvas page.
	<LI>The label for a tab canvas page is derived from the title given to the first block displayed on that tab canvas
	page.&nbsp; If you do not want both the label and the block title to appear on the tab canvas page, set POPTFB
	to No to prevent the block title being displayed (if the first block on a tab canvas page is the first block on
	the content canvas, use PAGTFB).
	<LI>If you set the X Position and Y Position properties of the first module component to be placed on the first
	tab canvas page, Form Generator will use those properties to position the generated tab canvas on the underlying
	content canvas.
	<LI>If the first block in a content canvas is generated onto a tab canvas and you set the Width and Height properties
	of the module component from which that block was generated, Form Generator will use the dimensions you specified
	as dimensions for the underlying content canvas.
</UL>

<P>By default, Form Generator determines the dimensions of a generated tab canvas as follows:

<UL>
	<LI>Form Generator determines the width of a generated tab canvas from the width of the underlying content canvas.
	<LI>Form Generator determines the height of a generated tab canvas from the height of the highest block placed
	on a tab canvas page.
</UL>

<P>However, you can override the default dimensions of a generated tab canvas using module component Width and
Height properties.&nbsp; If you do use the Width and Height properties, Form Generator determines the dimensions
of a generated tab canvas as follows:</P>

<UL>
	<LI>Form Generator determines the width of a generated tab canvas either from the largest Width property specified
	for any module component placed on a tab canvas page or from the width of the widest block to be displayed on a
	tab canvas page, whichever is the greater.
	<LI>Form Generator determines the height of a generated tab canvas either from the largest Height property specified
	for any module component placed on a tab canvas page or from the height of the highest block to be displayed on
	a tab canvas page, whichever is the greater.
</UL>

<H4>Notes on the use of tab canvases for displaying stacked item groups</H4>
<P>Note the following when generating tab canvases to display stacked item groups:</P>

<UL>
	<LI>A block cannot contain more than one tab canvas displaying stacked item groups.
	<LI>Tab canvases displaying stacked item groups can be laid out within blocks that are themselves displayed on
	tab canvases <A NAME="4-7"></A>(for more information, refer to &quot;Examples of blocks generated onto tab canvases/tab
	pages&quot; in the Designer online help).
	<LI>Tab canvases displaying stacked item groups cannot appear on other stacked canvases (including spreadtables
	and overflow context areas).
	<LI>A tab canvas displaying stacked item groups cannot contain items from more than one block.
	<LI>To ensure items in stacked item groups on a tab canvas in a detail block are synchronized with a master block
	(on a different canvas), set the BSCSCP preference to Window or Form.
	<LI>If all the items in a detail block are in stacked item groups on tab pages on a tab canvas, Form Generator
	creates a block context area above the tab canvas for any context items from the master block <A NAME="4-8"></A>(for
	more information, refer to &quot;Block context area and block context item generation&quot; in the Designer online
	help).
</UL>

<H3><A NAME="Server%20API"></A>Server API</H3>
<P>In this release, you can base a generated block on a procedure stored on the server and pass a PL/SQL table
of records between the block and the procedure.&nbsp; It is the procedure that queries and performs DML on the
base table.&nbsp; Basing a generated block containing lookup items on stored procedures is significantly more efficient
in terms of network traffic than the other options outlined above.&nbsp; An Oracle Designer utility enables you
to create suitable server-side procedures on which to base blocks by generating the Server API from table and module
component definitions in the repository.</P>
<H4>What is the Server API?</H4>
<P>The Server API provides a powerful and easy-to-use PL/SQL interface that generated client applications can call
to perform queries and DML operations on base tables in the Oracle Server.</P>
<P>The Oracle Designer Server Generator is the tool to use to generate the Server API.</P>
<P>The Server API is made up of:</P>

<UL>
	<LI>the Module Component API (comprising procedures to perform queries on the tables used by a generated application,
	and calls to Table API procedures to perform DML operations on those tables).
	<LI>the Table API (comprising procedures to perform inserts, updates, deletions and locks on the tables used by
	a generated application).
</UL>

<P>If you specify Procedure as the query datasource for a generated block, the block is populated by a procedure
in the Module Component API (this procedure is referred to as a 'module handler') that passes a PL/SQL table of
records to the generated form.</P>
<P>Similarly, if you specify Procedure as the DML datasource for a generated block, a table of records is passed
from the block back to the module handler on the server, which in turn calls a procedure in the Table API (this
procedure is referred to as a 'table handler') to update the base table.</P>
<P>If you intend to base a generated block on a server-side procedure generated as part of the Server API, you
must generate the API before you attempt to run the generated form.</P>
<H3><A NAME="Library%20generation"></A>Library generation</H3>
<P>A new addition to the Oracle Designer toolset is the Library Generator.&nbsp; Using Library Generator, you can:</P>

<UL>
	<LI>generate Oracle Developer library modules from module definitions recorded in the Oracle Designer repository
	<LI>capture existing Oracle Developer library modules into the Oracle Designer repository.
</UL>

<P>When generating library modules, you can run Library Generator in one of two ways:</P>

<UL>
	<LI>To generate specific library modules, you can run Library Generator standalone.
	<LI>When using Form Generator or Report Generator to generate an Oracle Developer module, you can run Library Generator
	automatically to generate any attached library modules.
</UL>

<P>All Oracle Developer modules can use a generated library module, unless the generated library includes calls
to language-specific built-ins.&nbsp; If the generated library does include calls to such built-ins, Library Generator
uses the appropriate Oracle Developer compiler to compile the library.</P>
<P>Note that it is the repository module's Language property that Library Generator uses to determine which Oracle
Developer compiler to use.&nbsp; It is your responsibility to ensure that:</P>

<UL>
	<LI>the repository module's Language property is appropriate for the built-ins called in the module
	<LI>built-ins from different languages are not called by the same library module
	<LI>the compiler from the appropriate Oracle Developer component is available (for generating and capturing repository
	modules of Language Oracle Developer Common Library, both the Oracle Developer Form Builder and the Oracle Developer
	Report Builder compilers are suitable)
</UL>

<H4>Module Specific Libraries</H4>
<P>You will need to re-evaluate all of your module specific libraries that you created for forms generated from
Designer 1.3.2.&nbsp; In many cases, the logic will no longer be necessary at all because of new features that
have been added to Designer.&nbsp; In other cases, the logic may be so simple that you choose to record it as application
logic in the form module itself, rather than having a separate library.</P>
<P>Where you do still require a separate library, you should capture the library into Designer.&nbsp; You can attach
the library module to its related form module using the module network link, or you can continue to use the MODLIB
preference if you like.</P>
<H3><A NAME="Templates%20cut%20down%20to%20size"></A>Templates cut down to size</H3>
<P>In earlier releases, template forms were often the only mechanism for:</P>

<UL>
	<LI>controlling properties of generated objects
	<LI>including generator objects and user code in generated forms.
</UL>

<P>In this release, application logic and object libraries provide powerful alternatives to the existing template
technology.&nbsp; In many cases, these alternatives are more efficient since:</P>

<UL>
	<LI>Using object library objects enables you to change the properties of objects in a generated form simply by
	changing the properties of source objects and recompiling the form.&nbsp; It is not necessary to generate the form
	again.
	<LI>Recording application logic in the repository enables you to specify when code is to execute, and to make use
	of Oracle Designer's dependency analysis features to assess the impact of proposed changes.
</UL>

<P>As you take advantage of other new features in Oracle Designer, you should also consider how those new features
enable you to move functionality from the template and into object libraries and application logic.</P>
<P>However, continue to use template forms for:</P>

<UL>
	<LI>functionality requiring control blocks (e.g. toolbars, calendar widgets)
	<LI>form level code and objects (e.g. alerts, object groups, popup menus) that you want in multiple forms
	<LI>setting the character cell size and the coordinate system of generated forms
	<LI>defining the color palette used in generated forms
	<LI>attaching libraries to multiple generated forms (note that although this method is quicker than using repository
	module networks, you will not have access to Oracle Designer's impact analysis features)
	<LI>defining current record visual attributes
	<LI>property classes.
</UL>

<H2><A NAME="5-Migrating%20from%202.1.2%20or%206.0"></A>Migrating from 2.1.2 or 6.0</H2>
<P>This section covers general migration issues when migrating from Designer 6.0.&nbsp; If you are migrating from
a later release, you may skip this section.</P>
<H3><A NAME="Lookup%20Usages"></A>Lookup Usages</H3>
<P>In Designer 1.3.2, you used a lookup table usage to create both lookup items on the main canvas as well as to
generate a Forms LOV.&nbsp; In this release of Designer, the concepts of lookup usages and LOVs have been separated.&nbsp;</P>
<P>The lookup table usage now has only one purpose - to display values from a lookup table on the canvas.&nbsp;
These lookup items can be enterable, queriable and sortable.</P>
<P>You can attach a List of Values to base table column usage, a lookup column usage, or an unbound item.&nbsp;
The only requirement is that the item must be explicitly defined as Insertable and/or Updateable.</P>
<P>See the next section for information on creating a list of values.</P>
<H4>LOV generation</H4>
<P>The new repository LOV element simplifies the process of LOV generation by decoupling LOVs from lookup table
usages. This not only makes it easier to define LOVs, it also enables you to:</P>

<UL>
	<LI>define multiple LOVs for the same block
	<LI>reuse the same LOV in multiple blocks and multiple forms
	<LI>define LOVs for unbound items.
</UL>

<H4>Native Oracle Forms LOVs</H4>
<P>Using Form Generator you can generate Oracle Forms LOVs to populate two kinds of generated text items:</P>

<UL>
	<LI>Items generated from repository bound or unbound item definitions that are explicitly associated with repository
	LOV definitions
</UL>


<BLOCKQUOTE>
	<P>In this case, the generated LOV is always based on a query.&nbsp; The generated LOV will be available for those
	items explicitly associated with the repository LOV definition.&nbsp; You can specify which values are returned
	from the LOV to the form and which items in the form are populated with the returned values.&nbsp; In addition,
	you can specify different LOVs to use for querying information and for entering information.</P>
	<P>You can associate LOV definitions with both foreign key bound items and non-foreign key bound items.&nbsp; If
	you associate an LOV definition with a foreign key item in a base table usage, the lookup table at the other end
	of the foreign key might be the same as the LOV base table usage.&nbsp; If this is the case, note that:</P>
</BLOCKQUOTE>


<UL>
	<UL>
		<LI>You do not have to define a module component lookup table usage of the lookup table as well
		<LI>If you do define a module component lookup table usage of the lookup table as well, the module component lookup
		table usage's 'Where Clause of Query' property and 'Validation Where Clause' property will be used to restrict
		the values in the LOV when querying data and entering data respectively
	</UL>
</UL>


<BLOCKQUOTE>
	<P>The repository LOV definitions you create can be either specific to a single module or reusable by multiple
	modules.</P>
</BLOCKQUOTE>


<UL>
	<LI>Items generated from repository bound or unbound item definitions for which allowable values have been recorded
</UL>


<BLOCKQUOTE>
	<P>In this case, the generated LOV can either be based on a static record group hard coded into the generated form
	or on a query record group populated dynamically by a query on a reference code table.&nbsp; <A NAME="4-9"></A>For
	more information about reference code tables, refer to &quot;Reference code table generation&quot; in the Designer
	online help.<FONT COLOR="red"></FONT></P>
</BLOCKQUOTE>

<H4>Lists of Values forms</H4>
<P>By default, Form Generator generates native Oracle Forms LOV objects.&nbsp; However, you can also create a list
of values form.&nbsp; This is a separate form that behaves like a list of values.&nbsp; It is called whenever the
user presses the list of values button.&nbsp; It can return data to the calling form.&nbsp; The advantage of a
list of values form is that the user can perform complex queries to find the requested records.&nbsp; It is also
much better when a large number of records need to be displayed.</P>
<P>To create a list of values form, you create a form module in Designer and set its Layout Format property to
LOV, using the FKLOVT preference.</P>
<P>To call a list of values form, specify the form you want to call using the DVLOVF and DVHLVF preferences in
the calling form.</P>
<H4>Poplists</H4>
<P>You can use repository LOV definitions to generate poplist, text list and combo box items by associating a repository
LOV definition with an item that has its Display Type property set to Poplist, Text list or Combo box.</P>
<H3><A NAME="Reusable%20LOV%20Components"></A>Reusable LOV Components</H3>
<P>Oracle Designer 6i also allows you to create reusable LOV components that can then be included in any form module.</P>
<H3><A NAME="Multi%20Region%20Blocks"></A>Multi Region Blocks</H3>
<P>Most blocks you generate will be single region blocks. Single region blocks are based on a single table and
comprise one rectangular layout region that cannot be split across different canvases or windows. You generate
a single region block from a single module component.</P>
<P>In some cases, you will want to generate multi-region blocks. As with single region blocks, a multi-region block
is based on a single table. However, a multi-region block comprises a number of different rectangular layout regions.
The layout regions in a multi-region block can be placed on:</P>

<UL>
	<LI>different places on the same canvas
	<LI>different canvases in the same window
	<LI>different canvases in different windows.
</UL>

<P>You generate a multi-region block by defining:</P>

<UL>
	<LI>a primary module component with one base table usage and (optionally) one or more lookup table usages
	<LI>one or more module sub-components, each with a usage of the same base table as the primary module component,
	and (optionally) each with one or more lookup table usages.
</UL>

<P>Form Generator creates a rectangular layout region for the primary module component and for each module sub-component.
Although they contain items based on columns from the same table, the different layout regions can display different
numbers of rows. The data in different regions in a multi-region block is always synchronized (i.e. the regions
all display data for the same current record).</P>
<P>You can create bound items based on the same columns as bound items in the primary module component (or any
other module sub-component). Note that Form Generator will generate second and subsequent items as mirror items.
Also note the standard source objects for these mirror items will be the same as for the first bound item (i.e.
not CGSO$CONTEXT, which is the usual standard source object for mirror items).</P>
<H3><A NAME="Side%20By%20Side%20Blocks"></A>Side By Side Blocks</H3>
<P>By default, Form Generator places the second and subsequent blocks on the same canvas below the previous blocks
on that canvas. Use a module component's Placement property and Right of Component property to place a block beside
a previous block instead of below it.</P>
<P>When you create a new module component, it is automatically placed in a new window and on a different canvas.
To generate two blocks side-by-side on the same canvas, you must first include the corresponding module components
in the same window and on the same canvas.</P>
<P>To place a block beside a previous block on the same canvas:</P>

<UL>
	<LI>Set the module component's Placement property to Right of.
	<LI>Set the module component's Right of Component property to the name of a previous module component.
</UL>

<H3><A NAME="Navigator%20Style%20Forms"></A>Navigator Style Forms</H3>
<P>A navigator style form enables users to quickly navigate through hierarchical data to locate a particular record
and comprises:</P>

<UL>
	<LI>a hierarchical tree item in a navigator window
	<LI>one or more detail windows in which record details can be viewed and edited.
</UL>

<P>The look and feel of the expanding and collapsing tree is similar to the tree in the Design Editor's navigator
window.</P>
<P>You can use Form Generator to generate a navigator style form by setting a module's Layout Format property to
Navigator.</P>
<P>Form Generator generates the first block in the form on a new content canvas into a new window (the navigator
window) and creates an item in the block of type Hierarchical Tree (note that the window, canvas, block and item
are not modeled in the repository).</P>
<P>All blocks and records in the generated form are represented as nodes in the hierarchical tree item. When the
form is opened, the navigator window displays all master blocks in the form as unexpanded 'block nodes'. If the
user expands one of the block nodes, the records in the block appear as 'record nodes'. If the master block is
linked to one or more detail blocks, each record node can be expanded to display a block node for the detail block(s).
If the user expands the detail block node, the records in the detail block appear as record nodes.</P>
<P>At any point, the user can select a record node and view or edit that record in the corresponding block in a
separate detail window.</P>
<P>You can also include buttons on vertical and horizontal toolbars in the navigator window to provide extra functionality.
For example, you might want to include buttons to expand all nodes and collapse all nodes.</P>
<P>See the Oracle Designer online help for more information about generator Navigator Style Forms.</P>
<H3><A NAME="Relative%20Tab%20Stops"></A>Relative Tab Stops</H3>
<P>Form Generator enables you to specify the points at which Form Generator is to position the starts and ends
of items and their prompts.&nbsp; These points are referred to as tab stops.</P>
<P>In this release of Designer, there are now two kinds of tab stop:</P>

<UL>
	<LI>Absolute tab stops (old style - tab stop positions are specified in character cells and items are placed at
	those positions)
	<LI>Relative tab stops (new style - items sharing the same tab stop are positioned relative to each other).
</UL>

<P>Note that the use of absolute tab stops and relative tab stops are mutually exclusive.</P>
<P>Relative tab stops are numeric values that enable you to position and align items and item groups relative to
each other (i.e. next to each other or below each other).&nbsp; Using relative tab stops also enables you to explicitly
specify that you want a particular item or item group to appear on a new line.</P>
<P>You set relative tab stops for both items and item groups using either or both of the following relative tab
stop properties:</P>

<UL>
	<LI>Start Tab Stop property
	<LI>End Tab Stop property
</UL>

<P>If you specify relative tab stops, during generation Form Generator horizontally positions items/item groups
so that any items/item groups with the same relative tab values are vertically aligned below one another.&nbsp;
The Start Tab Stop property and the End Tab Stop property determine whether it is the left hand edge, the right
hand edge, or both edges of the item/item group that are aligned.</P>
<P>In addition, an item's Align Prompt property enables you to vertically align the starts of prompts of items
that are vertically aligned (note that Form Generator might ignore this property to optimize the use of space).</P>
<P>When using relative tab stops, you can set the Tab Stop Scope property of a container object (i.e. an item group
or module component) to align:</P>

<UL>
	<LI>items within an item group with items outside the item group
	<LI>items within one module component with items in another module component.
</UL>

<P>For detailed illustrations of how to use relative tab stops, refer to the online help topic 'Examples of the
use of relative tab stops'.</P>
<H4>Notes on the use of relative tab stops</H4>
<P>Note the following when using relative tab stops:</P>

<UL>
	<LI>In general, Form Generator only uses relative tab stops if relative tab stops have been defined and the Tab
	Stop Scope property of an item group or module component is set to Self or Parent.&nbsp; Form Generator also uses
	relative tab stops to position items in an item group with its Tab Stop Scope property set to None if the object
	that contains the item group (i.e. a module component or another item group) has its Tab Stop Scope property set
	to Self or Parent.&nbsp; In this case, Form Generator positions items as if the item group's Tab Stop Scope property
	was set to Self.
	<LI>Items are always sequenced (for navigation purposes) according to the value of their Usage Sequence property.&nbsp;
	Relative tab stops are sequenced in their numeric order.&nbsp; If the relative tab setting of the next item in
	the usage sequence is lower than the relative tab setting of the previous item, Form Generator places the next
	item on a new line and aligns it appropriately.
	<LI>The interaction between relative tab stops and the BLKVFL preference is complex.&nbsp; <A NAME="4-10"></A>For
	more information, refer to &quot;Notes on relative tab stops and BLKVFL&quot; in the Designer online help.
	<LI>We recommend you increase the numbers for relative tab stops in increments to allow for the subsequent insertion
	of new tab stops between existing ones.
	<LI>Post prompts cannot be aligned using relative tab stops.
	<LI>If you have specified relative tab stops, Form Generator increases the width of the canvas sufficiently to
	display all the items and item groups.&nbsp; In other words, block overflow does not occur.
</UL>

<H1><A NAME="Chapter"></A>Chapter 6&nbsp;&nbsp; Scenario 3:&nbsp; Migrate, Regenerate Incrementally</H1>
<P>This is the most complex scenario.&nbsp; In this scenario, you will migrate your application a little at a time,
rather than all at once.&nbsp;</P>

<UL>
	<LI>You will begin by upgrading all of your forms, libraries, menus and reports to Forms 6i.&nbsp;
	<LI>You will then make the changes required to run forms generated from your previous release of Designer alongside
	forms generated from Oracle Designer 6i.&nbsp;
	<LI>Finally, over some arbitrarily long period of time, you will regenerate all of your modules out of Oracle Designer
	6i.
</UL>

<P>The goal of this scenario is to allow you to regenerate your whole application, taking into account new features,
but in such a way that you do not have to migrate your entire application in one go.&nbsp; This means you will
be able to move the deployed application to the new tool stack before you have completely migrated every form.&nbsp;
Thus, you can continue with bug fixes and new development in parallel with the continuing migration effort.</P>
<H2><A NAME="6-Migrating%20from%201.3.2"></A>Migrating from 1.3.2</H2>
<P>This section covers general migration issues when migrating from Designer Release 1.3.2.&nbsp; If you are migrating
from a later release, you may skip this section.</P>
<H3><A NAME="6from132Review%20use%20of%20color%20palettes"></A>Review use of color palettes</H3>
<P>When generating a form, Form Generator determines which color palette to give the generated form as follows:</P>

<UL>
	<LI>If a template form is being used, Form Generator gives the generated form the template form's color palette.
	<LI>If a template form is not being used, Form Generator gives the generated form the default Form Builder color
	palette.
</UL>

<P>In earlier releases, the template forms supplied with Form Generator did not use the default Form Builder template.&nbsp;
Instead, they used a color palette similar to that used in Oracle Applications forms.</P>
<P>In this release, the shipped template forms supplied with Form Generator have been given the default Form Builder
color palette.</P>
<P>The color palette consists of a grid, 38 colors wide by 6 colors high.&nbsp; The primary problems are caused
in the first 14 columns of the grid.&nbsp; The remainder of the grid is very slightly different, but only noticable
to the most discerning eye.</P>
<P><BR>

<TABLE BORDER="1" CELLPADDING="6" CELLSPACING="0" WIDTH="714">
	<CAPTION>
		<P>Designer 1.3.2, Custom Color Palette, first 14 columns
	</CAPTION>
	<TR>
		<TD WIDTH="42" VALIGN="TOP">
			<P>Black
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>White
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r0g0b0
		</TD>
		<TD WIDTH="60" VALIGN="TOP">
			<P>r40g0b0
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r55g0b0
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r70g0b0
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r85g0b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r100g0b0
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r0g0b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r40g0b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r55g0b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r70g0b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r85g0b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r100g0b40
		</TD>
	</TR>
	<TR>
		<TD WIDTH="42" VALIGN="TOP">
			<P>Control
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Blue
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r0g40b0
		</TD>
		<TD WIDTH="60" VALIGN="TOP">
			<P>r40g40b0
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r55g40b0
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r70g40b0
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r85g40b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r100g40b0
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r0g40b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r40g40b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r55g40b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r70g40b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r85g40b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r100g40b40
		</TD>
	</TR>
	<TR>
		<TD WIDTH="42" VALIGN="TOP">
			<P>Button
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Magenta
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r0g55b0
		</TD>
		<TD WIDTH="60" VALIGN="TOP">
			<P>r40g55b0
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r55g55b0
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r70g55b0
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r85g55b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r100g55b0
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r0g55b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r40g55b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r55g55b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r70g55b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r85g55b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r100g55b40
		</TD>
	</TR>
	<TR>
		<TD WIDTH="42" VALIGN="TOP">
			<P>Canvas
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Red
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r0g70b0
		</TD>
		<TD WIDTH="60" VALIGN="TOP">
			<P>r40g70b0
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r55g70b0
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r70g70b0
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r85g70b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r100g70b0
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r0g70b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r40g70b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r55g70b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r70g70b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r85g70b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r100g70b40
		</TD>
	</TR>
	<TR>
		<TD WIDTH="42" VALIGN="TOP">
			<P>Gray
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Cyan
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r0g85b0
		</TD>
		<TD WIDTH="60" VALIGN="TOP">
			<P>r40g85b0
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r55g85b0
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r70g85b0
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r85g85b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r100g85b0
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r0g85b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r40g85b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r55g85b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r70g85b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r85g85b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r100g85b40
		</TD>
	</TR>
	<TR>
		<TD WIDTH="42" VALIGN="TOP">
			<P>Yellow
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Green
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r0g100b0
		</TD>
		<TD WIDTH="60" VALIGN="TOP">
			<P>r40g100b0
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r55g100b0
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r70g100b0
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r85g100b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r100g100b0
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r0g100b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r40g100b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r55g100b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r70g100b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r85g100b40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r100g100b40
		</TD>
	</TR>
</TABLE>
</P>
<P><BR>

<TABLE BORDER="1" CELLPADDING="6" CELLSPACING="0" WIDTH="714">
	<CAPTION>
		<P>Oracle Designer 6i, Default Forms Color Palette, first 14 columns
	</CAPTION>
	<TR>
		<TD WIDTH="42" VALIGN="TOP">
			<P>Black
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>White
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Green
		</TD>
		<TD WIDTH="60" VALIGN="TOP">
			<P>Darkgreen
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Gray96
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Gray92
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Gray88
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>Gray84
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r0g0b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r25g0b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r50g0b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r75g0b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r88g0b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r100g0b0
		</TD>
	</TR>
	<TR>
		<TD WIDTH="42" VALIGN="TOP">
			<P>Gray
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Darkgray
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Cyan
		</TD>
		<TD WIDTH="60" VALIGN="TOP">
			<P>Darkcyan
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Gray80
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Gray76
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Gray72
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>Gray68
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r0g25b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r25g25b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r50g25b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r75g25b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r88g25b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r100g25b0
		</TD>
	</TR>
	<TR>
		<TD WIDTH="42" VALIGN="TOP">
			<P>Red
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Darkred
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Blue
		</TD>
		<TD WIDTH="60" VALIGN="TOP">
			<P>Darkblue
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Gray64
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Gray60
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Gray56
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>Gray52
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r0g50b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r25g50b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r50g50b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r75g50b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r88g50b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r100g50b0
		</TD>
	</TR>
	<TR>
		<TD WIDTH="42" VALIGN="TOP">
			<P>Yellow
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Darkyellow
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Magenta
		</TD>
		<TD WIDTH="60" VALIGN="TOP">
			<P>Darkmagenta
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Gray48
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Gray44
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Gray40
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>Gray36
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r0g75b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r25g75b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r50g75b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r75g75b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r88g75b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r100g75b0
		</TD>
	</TR>
	<TR>
		<TD WIDTH="42" VALIGN="TOP">
			<P>Custom1
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Custom2
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Custom3
		</TD>
		<TD WIDTH="60" VALIGN="TOP">
			<P>Custom4
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Gray32
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Gray28
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Gray24
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>Gray20
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r0g88b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r25g88b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r50g88b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r75g88b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r88g88b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r100g88b0
		</TD>
	</TR>
	<TR>
		<TD WIDTH="42" VALIGN="TOP">
			<P>Custom5
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Custom6
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Custom7
		</TD>
		<TD WIDTH="60" VALIGN="TOP">
			<P>Custom8
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Gray16
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Gray12
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>Gray8
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>Gray4
		</TD>
		<TD WIDTH="48" VALIGN="TOP">
			<P>r0g100b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r25g100b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r50g100b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r75g100b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r88g100b0
		</TD>
		<TD WIDTH="54" VALIGN="TOP">
			<P>r100g100b0
		</TD>
	</TR>
</TABLE>
</P>
<P>Using both color palettes in the same application causes problems, because the color palette is loaded with
the first form and then not reloaded.&nbsp; So, since your start form will be re-generated with the new color palette,
<B>all</B> of your forms will use the new color palette.</P>
<P>Unfortunately, the colors are mapped by their position in the color palette, not by the actual color name.&nbsp;
Thus, when one of your old forms uses a color, it is actually just using whichever color is in that position in
the color palette.</P>
<P>So, given the two color palettes above:</P>
<P>
<TABLE BORDER="1" CELLPADDING="6" CELLSPACING="0">
	<TR>
		<TD WIDTH="168" VALIGN="TOP">
			<P>If the old form asks for
		</TD>
		<TD WIDTH="126" VALIGN="TOP">
			<P>It actually gets
		</TD>
	</TR>
	<TR>
		<TD WIDTH="168" VALIGN="TOP">
			<P>Black
		</TD>
		<TD WIDTH="126" VALIGN="TOP">
			<P>Black
		</TD>
	</TR>
	<TR>
		<TD WIDTH="168" VALIGN="TOP">
			<P>White
		</TD>
		<TD WIDTH="126" VALIGN="TOP">
			<P>White
		</TD>
	</TR>
	<TR>
		<TD WIDTH="168" VALIGN="TOP">
			<P>Control
		</TD>
		<TD WIDTH="126" VALIGN="TOP">
			<P>Gray
		</TD>
	</TR>
	<TR>
		<TD WIDTH="168" VALIGN="TOP">
			<P>Button
		</TD>
		<TD WIDTH="126" VALIGN="TOP">
			<P>Red
		</TD>
	</TR>
	<TR>
		<TD WIDTH="168" VALIGN="TOP">
			<P>Red
		</TD>
		<TD WIDTH="126" VALIGN="TOP">
			<P>Darkyellow
		</TD>
	</TR>
	<TR>
		<TD WIDTH="168" VALIGN="TOP">
			<P>Cyan
		</TD>
		<TD WIDTH="126" VALIGN="TOP">
			<P>Custom2
		</TD>
	</TR>
</TABLE>
</P>
<P>To further complicate matters, with Webforms, you don't have to specify colors in your forms at all.&nbsp; You
can set all of your colors to 'undefined' or to the keyword 'automatic' in your object library.&nbsp; Then, you
can pass a runtime parameter to the Forms60 Server that specifies the Look and Feel (Oracle or Generic) and the
desired colorscheme.&nbsp; (There are 8 pre-defined color schemes.)&nbsp; At runtime, all items whose color is
'undefined' or 'automatic' will automatically be rendered with the proper colors for the selected colorscheme.</P>
<P>Unfortunately, the item prompts in the old forms that were generated by Designer 1.3.2 are generated as boilerplate
and not using the prompt property.&nbsp; This means they will not be automatically changed at runtime.</P>
<H4>Changing the Color Palette</H4>
<P>You basically have two options to solve this problem:</P>

<UL>
	<LI>Modify the old forms to use the new color palette.
	<LI>Modify the new template form to use the old custom color palette.
</UL>

<P>To be able to change the color palette of an .fmb, Form Builder needs to be opened in a special mode. To do
this, launch Form Builder, navigate to Tools &gt; Preferences, and set Color Mode to editable. Now close Form
Builder, and open it again (this step is necessary).</P>
<P>Export the color palette you want to use to a file:</P>

<UL>
	<LI>Open a form which has the color palette that you want to use.
	<LI>Open the layout editor by double-clicking on a canvas (it doesn't matter which one)
	<LI>Choose File &gt; Export &gt; Color Palette.&nbsp; (If this option is grayed out, you have not successfully
	changed the Color Mode of Forms Builder.)&nbsp; Save the color palette to your file system.&nbsp; The file should
	have the extension '.pal'.
</UL>

<P>Import the color palette into the form(s) you want to change:</P>

<UL>
	<LI>Open the form whose color palette you want to change.
	<LI>Open the layout editor by double-clicking on a canvas (it doesnt matter which one).
	<LI>Navigate to File &gt; Import &gt; Color Palette. (If this option is grayed out, you have not successfully changed
	the Color Mode of Forms Builder.)
	<LI>Choose File as Data Source, and click Browse to locate the color palette you exported.
	<LI>Click OK.
</UL>

<P>With your old forms, you will have to import the color palette into each form individually even if you used
a reference form, because the color palette is not inherited from a reference form.</P>
<P>Unfortunately, we still have one more problem to overcome.&nbsp;</P>
<P>You have successfully installed the new color palette.&nbsp; If you look at the &quot;Foreground Color&quot;
and &quot;Background Color&quot; properties for any given item, they appear to have the right values because the
color names are correct.&nbsp; But, internally they are STILL pointing to the old position of that color in the
color palette.</P>
<P>Even trickier is the fact that if you click on the LOV button next to the color value, the correct color in
the color palette is highlighted, but internally it is STILL pointing to the wrong color.</P>
<P>The only way to correct this inconsistent state is to go to the property palette of the visual attribute used
on the item, go to the &quot;Background Color&quot; and &quot;Foreground Color&quot; properties, first select any
other color, and then change the color back to its original value. Now, not only the color name but also the underlying
index value will point to the &quot;true&quot; color in the new color palette.</P>

<UL>
	<LI>The bad news is that you need to do this for ALL explicit color references.&nbsp; If you used a reference form
	to define visual attributes, and then used these visual attributes in your old template form, you only have to
	do this for each visual attribute in the reference form.&nbsp; However, if the visual attributes were directly
	in the template form, or if you set the colors directly in the template form, then you will have to open each form
	and 'fix' every color reference.
	<LI>Two exceptions are the colors &quot;white&quot; and &quot;black&quot;.&nbsp; It is not necessary to 'fix' these
	colors, because they were not relocated between the two palettes.
	<LI>Another exception is the color &quot;canvas&quot;.&nbsp; Since this color doesn't exist in the new color palette,
	all occurrences of &quot;canvas&quot; must be replaced with the color &quot;gray&quot;.
</UL>

<P>What this all boils down to is this:&nbsp;</P>

<UL>
	<LI>Unless your old application is very small and you don't mind a lot of tedious work, you are going to have to
	continue to use the old custom color palette in your newly generated forms
	<LI>You probably won't be able to use the automatic color schemes with the new Oracle Look and Feel
</UL>

<H3><A NAME="6from132Toolbar%20vs.%20Smartbar"></A>Toolbar vs. Smartbar</H3>
<P>The Oracle Designer 6i menu template makes use of the Smartbar feature of Forms.&nbsp; The toolbar is now defined
declaratively in the menu rather than in every form.</P>
<P>In your old forms, you will now see both the Smartbar and the old toolbar canvas.</P>
<P>You have two options:</P>

<UL>
	<LI>Remove the toolbar block and canvas from your old forms.
</UL>


<BLOCKQUOTE>
	<P>If you used a reference form with Designer 1.3.2, you can easily remove the toolbar block and canvas from all
	your forms by removing it from the reference form and then recompiling new .fmx files.</P>
	<P>If your toolbar block and canvas were directly in the 1.3.2 template form, then you would have to open each
	generated form and remove them.</P>
</BLOCKQUOTE>


<UL>
	<LI>Remove the Smartbar from the new menu template and add a toolbar block and canvas to the new form template
	(subclassed from the object library of course).
</UL>

<P>To remove the Smartbar from the new menu template, you simply change the 'Visible in Horizontal Menu' property
to 'No' for each item where it currently is set to 'Yes'.</P>
<P>You can copy your old toolbar block and canvas to your new template form.</P>
<H3><A NAME="6from132Dummy%20LOV%20Objects"></A>Dummy LOV Objects</H3>
<P>For modules that call an LOV module (not a native Forms LOV), the Generator creates a dummy LOV object named
CGxx$DUMMY_LOV and a corresponding Record Group object with the same name.</P>
<P>In Forms generated from Designer 1.3.2, the record group will have a Column Specification with one dummy column,
also named CGxx$DUMMY_LOV, of type character, length = 1, with a default value of (again) CGxx$DUMMY_LOV.</P>
<P>Notice that the default value is longer than the length of the column.&nbsp; This now causes a compile error
in forms.&nbsp; To resolve this, you must either clear the default value in the Column Specification of the record
group or increase its length to 14.</P>
<P>Unfortunately, this has to be done manually.</P>
<H3><A NAME="6from132Upgrading%20forms%20to%20Forms%209i"></A>Upgrading forms to Forms 6i</H3>
<P>You must upgrade all your existing forms to Forms 6i.&nbsp; You can use the Forms compiler to perform this upgrade.</P>
<P>ifcmpxx module= myform userid= scott/tiger upgrade=YES Logon=YES Batch=YES build=Yes Window_state=Minimize</P>
<P>You can run this in batch by creating a .bat file containing the above line of code once for each form to be
upgraded.</P>
<H3><A NAME="6from132Regenerate%20Your%20Menu%20and%20Start%20F"></A>Regenerate Your Menu and Start Form</H3>
<P>You will need to re-generate your menu(s) and start form.&nbsp; This ensures that all your forms run in the
context of your new application.</P>
<H3><A NAME="6from132Upgrade%20Libraries%20to%20Forms%20or%20Re"></A>Upgrade Libraries to Forms or Reports 6i</H3>
<P>Upgrading the libraries is straightforward.&nbsp; To upgrade manually, you open the library in Form Builder
6i (or Report Builder 6i).&nbsp; Form Builder will automatically start converting PL/SQL version to PL/SQL version
2.&nbsp; During this PL/SQL conversion it will ask you to confirm certain conversion operations.&nbsp; You can
safely press the 'Convert All' button if you are prompted for such a conversion operation.</P>
<P>You can also create a .bat file to perform this upgrade in batch.&nbsp; Include the following line of code once
for each library to be upgraded.</P>
<P>ifcmpxx module=&lt;library&gt;.pll userid=&lt;user&gt;/&lt;pass&gt;@&lt;connect&gt; module_type=LIBRARY Logon=YES
Batch=Yes upgrade=YES version=45 build=No window_state=Minimize</P>
<H3><A NAME="6from132Attached%20OFG%20Libraries"></A>Attached OFG Libraries</H3>
<P>Designer release 1.3.2 attached a number of OFG libraries to generated forms.&nbsp; You may also have attached
some of those libraries to your custom PL/SQL libraries.</P>
<P>Form Generator does not use these libraries anymore.&nbsp; Form Generator now uses a new, renamed version for
each of these libraries.&nbsp;</P>
<P>
<TABLE BORDER="1" CELLPADDING="6" CELLSPACING="0">
	<TR>
		<TD WIDTH="132" VALIGN="TOP">
			<P><B>Designer 1.3.2 Library</B>
		</TD>
		<TD WIDTH="138" VALIGN="TOP">
			<P><B>Oracle Designer 6i Library</B>
		</TD>
	</TR>
	<TR>
		<TD WIDTH="132" VALIGN="TOP">
			<P>OFG4BSL
		</TD>
		<TD WIDTH="138" VALIGN="TOP">
			<P>OFGBSL
		</TD>
	</TR>
	<TR>
		<TD WIDTH="132" VALIGN="TOP">
			<P>OFG4CALL
		</TD>
		<TD WIDTH="138" VALIGN="TOP">
			<P>OFGCALL
		</TD>
	</TR>
	<TR>
		<TD WIDTH="132" VALIGN="TOP">
			<P>OFG4HPL
		</TD>
		<TD WIDTH="138" VALIGN="TOP">
			<P>OFGHPL
		</TD>
	</TR>
	<TR>
		<TD WIDTH="132" VALIGN="TOP">
			<P>OFG4MES
		</TD>
		<TD WIDTH="138" VALIGN="TOP">
			<P>OFGMES
		</TD>
	</TR>
	<TR>
		<TD WIDTH="132" VALIGN="TOP">
			<P>OFG4MNL
		</TD>
		<TD WIDTH="138" VALIGN="TOP">
			<P>OFGMNL
		</TD>
	</TR>
	<TR>
		<TD WIDTH="132" VALIGN="TOP">
			<P>OFG4TEL
		</TD>
		<TD WIDTH="138" VALIGN="TOP">
			<P>OFGTEL
		</TD>
	</TR>
	<TR>
		<TD WIDTH="132" VALIGN="TOP">
			<P>&nbsp;
		</TD>
		<TD WIDTH="138" VALIGN="TOP">
			<P>OFGNAVL
		</TD>
	</TR>
	<TR>
		<TD WIDTH="132" VALIGN="TOP">
			<P>&nbsp;
		</TD>
		<TD WIDTH="138" VALIGN="TOP">
			<P>OFGTAB
		</TD>
	</TR>
	<TR>
		<TD WIDTH="132" VALIGN="TOP">
			<P>&nbsp;
		</TD>
		<TD WIDTH="138" VALIGN="TOP">
			<P>OFGTREEN
		</TD>
	</TR>
</TABLE>
</P>
<P>You must make both sets of libraries available in your runtime environment.&nbsp; The old forms will continue
to run with the old libraries until they have been upgraded.</P>
<P>When you re-generate your forms from Oracle Designer 6i, they will automatically get the new libraries attached.</P>
<P>However, if you attached the OFG4 libraries to your pl/sql libraries you will have to upgrade each library
manually.</P>

<UL>
	<LI>De-attach the obsolete OFG4 libraries from all libraries
	<LI>Attach the new OFG libraries
</UL>

<H3><A NAME="6from132Name%20Resolution%20in%209i"></A>Name Resolution in 6i</H3>
<P>Carefully read the section 'Name Resolution in 6i' in the <A HREF="#Chapter%203%20General%20Migration%20Issu">Chapter
3</A> &quot;General Migration Issues&quot;.&nbsp; It is highly likely you will run into these issues described
there if your application has generic library routines that are overridden in module specific libraries.</P>
<H3><A NAME="6from132Replace%20Designer%201.3.2%20forms%20wit"></A>Replace Designer 1.3.2 forms with Oracle Designer
6i forms</H3>
<P>This step can be performed on a form-by-form basis.&nbsp; The actions required depend on the type of module.&nbsp;
Refer to the chapters on 'General Migration Issues' and 'Scenario 2' for detailed information on regenerating your
forms.</P>
<P>If you have a form that calls another form, you should replace both forms at the same time.</P>
<P>Once all forms have been replaced, you can remove the old OFG4 libraries from your runtime environment as well
as any other old libraries, reference forms, and templates.</P>
<H2><A NAME="6-Migrating%20from%202.1.2"></A>Migrating from 2.1.2</H2>
<P>This section covers general migration issues when migrating from Designer Release 2.1.2.&nbsp; If you are migrating
from a later release, you may skip this section.</P>
<H3><A NAME="6from212Toolbar%20vs.%20Smartbar"></A>Toolbar vs. Smartbar</H3>
<P>The Oracle Designer 6i menu template makes use of the Smartbar feature of Forms.&nbsp; The toolbar is now defined
declaratively in the menu rather than in every form.</P>
<P>In your old forms, you will now see both the Smartbar and the old toolbar canvas.</P>
<P>You have two options:</P>

<UL>
	<LI>Remove the toolbar block and canvas from your old forms.
</UL>


<BLOCKQUOTE>
	<P>If you used an object library with Designer 2.1.2, you can easily remove the toolbar block and canvas from all
	your forms by removing it from the object library and then recompiling new .fmx files.</P>
	<P>If your toolbar block and canvas were directly in the 2.1.2 template form, then you would have to open each
	generated form and remove them.</P>
</BLOCKQUOTE>


<UL>
	<LI>Remove the Smartbar from the new menu template and add a toolbar block and canvas to the new form template
	(subclassed from the object library of course).
</UL>

<P>To remove the Smartbar from the new menu template, you simply change the 'Visible in Horizontal Menu' property
to 'No' for each item where it currently is set to 'Yes'.</P>
<P>You can copy your old toolbar block and canvas to your new template form.</P>
<H3><A NAME="6from212Upgrading%20forms%20to%20Forms%209i"></A>Upgrading forms to Forms 6i</H3>
<P>You must upgrade all your existing 5.0 forms to Forms 6i.&nbsp; You can use the Forms compiler to perform this
upgrade.</P>
<P>ifcmpxx module= myform userid= scott/tiger upgrade=YES Logon=YES Batch=YES build=Yes Window_state=Minimize</P>
<P>You can run this in batch by creating a .bat file containing the above line of code once for each form to be
upgraded.</P>
<H3><A NAME="6from212Regenerate%20Your%20Menu%20and%20Start%20F"></A>Regenerate Your Menu and Start Form</H3>
<P>You will need to re-generate your menu(s) and start form.&nbsp; This ensures that all your forms run in the
context of your new application.</P>
<H3><A NAME="6from212Upgrade%20Libraries%20to%20Forms%20or%20Re"></A>Upgrade Libraries to Forms or Reports 6i</H3>
<P>Upgrading the libraries is straightforward.&nbsp; To upgrade manually, you open the library in Form Builder
6i (or Report Builder 6i).&nbsp; Form Builder will automatically start converting PL/SQL version to PL/SQL version
2.&nbsp; During this PL/SQL conversion it will ask you to confirm certain conversion operations.&nbsp; You can
safely press the 'Convert All' button if you are prompted for such a conversion operation.</P>
<P>You can also create a .bat file to perform this upgrade in batch.&nbsp; Include the following line of code once
for each library to be upgraded.</P>
<P>ifcmpxx module=&lt;library&gt;.pll userid=&lt;user&gt;/&lt;pass&gt;@&lt;connect&gt; module_type=LIBRARY Logon=YES
Batch=Yes upgrade=YES version=50 build=No window_state=Minimize</P>
<H3><A NAME="6from212Replace%20Designer%202.1.2%20forms%20wit"></A>Replace Designer 2.1.2 forms with Oracle Designer
6i forms</H3>
<P>This step can be performed on a form-by-form basis.&nbsp; The actions required depend on the type of module.&nbsp;
Refer to the chapters on 'General Migration Issues' and 'Scenario 2' for detailed information on regenerating your
forms.</P>
<P>If you have a form that calls another form, you should replace both forms at the same time.</P>
<P>Once all forms have been replaced, you can remove the old OFG4 libraries from your runtime environment as well
as any other old libraries, reference forms, and templates.</P>
<H2><A NAME="6-Migrating%20from%206.0"></A>Migrating from 6.0</H2>
<P>This section covers general migration issues when migrating from Designer Release 6.0.&nbsp; <FONT COLOR="red"></FONT></P>
<H3><A NAME="6from6Toolbar%20vs.%20Smartbar"></A>Toolbar vs. Smartbar</H3>
<P>The Oracle Designer 6i menu template makes use of the Smartbar feature of Forms.&nbsp; The toolbar is now defined
declaratively in the menu rather than in every form.</P>
<P>In your old forms, you will now see both the Smartbar and the old toolbar canvas.</P>
<P>You have two options:</P>

<UL>
	<LI>Remove the toolbar block and canvas from your old forms.
</UL>


<BLOCKQUOTE>
	<P>If you used an object library with Designer 6.0, you can easily remove the toolbar block and canvas from all
	your forms by removing it from the object library and then recompiling new .fmx files.</P>
	<P>If your toolbar block and canvas were directly in the 6.0 template form, then you would have to open each generated
	form and remove them.</P>
</BLOCKQUOTE>


<UL>
	<LI>Remove the Smartbar from the new menu template and add a toolbar block and canvas to the new form template
	(subclassed from the object library of course).
</UL>

<P>To remove the Smartbar from the new menu template, you simply change the 'Visible in Horizontal Menu' property
to 'No' for each item where it currently is set to 'Yes'.</P>
<P>You can copy your old toolbar block and canvas to your new template form.</P>
<H3><A NAME="6from6Regenerate%20Your%20Menu%20and%20Start%20F"></A>Regenerate Your Menu and Start Form</H3>
<P>You will need to re-generate your menu(s) and start form.&nbsp; This ensures that all your forms run in the
context of your new application.</P>
<H3><A NAME="6from6Replace%20Designer%206.0%20forms%20with%20"></A>Replace Designer 6.0 forms with Oracle Designer
6i forms</H3>
<P>This step can be performed on a form-by-form basis.&nbsp; The actions required depend on the type of module.&nbsp;
Refer to the chapters on 'General Migration Issues' and 'Scenario 2' for detailed information on regenerating your
forms.</P>
<P>If you have a form that calls another form, you should replace both forms at the same time.</P>
<P>Once all forms have been replaced, you can remove the old OFG4 libraries from your runtime environment as well
as any other old libraries, reference forms, and templates.</P>

<P>
<HR ALIGN="CENTER">

<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" WIDTH="96%" summary>
	<TR>
		<TD VALIGN="TOP">
			<P>
			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" summary>
				<TR>
					<TD ALIGN="CENTER">
						<P ALIGN="CENTER"><A HREF="mg_part3_6i-2.htm"><IMG SRC="images/larrow.gif" WIDTH="30" HEIGHT="30" ALIGN="BOTTOM"
						ALT="Previous" BORDER="0"></A>
					</TD>
					<TD>
						<P ALIGN="CENTER"><A HREF="mg_part5_6i-2.htm"><IMG SRC="images/rarrow.gif" WIDTH="30" HEIGHT="30" ALIGN="BOTTOM"
						ALT="Next" BORDER="0"></A>
					</TD>
				</TR>
				<TR>
					<TD VALIGN="TOP">
						<P ALIGN="CENTER"><A HREF="mg_part3_6i-2.htm"><SPAN CLASS="copyright">Prev</SPAN></A>
					</TD>
					<TD>
						<P ALIGN="CENTER"><A HREF="mg_part5_6i-2.htm"><SPAN CLASS="copyright">Next</SPAN></A>
					</TD>
				</TR>
			</TABLE>

		</TD>
		<TD ALIGN="CENTER">
			<P ALIGN="CENTER"><IMG SRC="images/oracle.gif" WIDTH="105" HEIGHT="20" ALIGN="BOTTOM" ALT="Oracle logo" BORDER="0">&nbsp;
			<BR>
			<A HREF="mg_ttl_6i-2.htm"><SPAN CLASS="copyright">Copyright &copy; 2002, Oracle Corporation.</SPAN></A>&nbsp; <BR>
			<SPAN CLASS="copyright">All Rights Reserved.&nbsp;</SPAN>
		</TD>
		<TD ALIGN="RIGHT" VALIGN="TOP">
			<DIV ALIGN="RIGHT">
				<DIV ALIGN="RIGHT">
					<DIV ALIGN="RIGHT">
						<DIV ALIGN="RIGHT">
							<DIV ALIGN="RIGHT">
								<DIV ALIGN="RIGHT">
									<DIV ALIGN="RIGHT">
										<DIV ALIGN="RIGHT">
											<DIV ALIGN="RIGHT">
												<DIV ALIGN="RIGHT">
													<DIV ALIGN="RIGHT">
														<DIV ALIGN="RIGHT">
															<DIV ALIGN="RIGHT">
																<DIV ALIGN="RIGHT">
																	<DIV ALIGN="RIGHT">
																		<DIV ALIGN="RIGHT">
																			<DIV ALIGN="RIGHT">
																				<DIV ALIGN="RIGHT">
																					<DIV ALIGN="RIGHT">
																						<DIV ALIGN="RIGHT">
																							<DIV ALIGN="RIGHT">
																								<DIV ALIGN="RIGHT">
																									<DIV ALIGN="RIGHT">
																										<DIV ALIGN="RIGHT">
																											<DIV ALIGN="RIGHT">
																												<DIV ALIGN="RIGHT">
																													<DIV ALIGN="RIGHT">
																														<DIV ALIGN="RIGHT">
																															<DIV ALIGN="RIGHT">
																																<DIV ALIGN="RIGHT">
																																	<DIV ALIGN="RIGHT">
																																		<DIV ALIGN="RIGHT">
																																			<DIV ALIGN="RIGHT">
																																				<DIV ALIGN="RIGHT">
																																					<DIV ALIGN="RIGHT">
																																						<DIV ALIGN="RIGHT">
																																							<DIV ALIGN="RIGHT">
																																								<DIV ALIGN="RIGHT">
																																									<DIV ALIGN="RIGHT">
																																										<DIV ALIGN="RIGHT">
																																											<DIV ALIGN="RIGHT">
																																												<DIV ALIGN="RIGHT">
																																													<DIV ALIGN="RIGHT">
																																														<DIV ALIGN="RIGHT">
																																															<DIV ALIGN="RIGHT">
																																																<DIV ALIGN="RIGHT">
																																																	<DIV ALIGN="RIGHT">
																																																		<DIV ALIGN="RIGHT">
																																																			<DIV ALIGN="RIGHT">
																																																				<DIV ALIGN="RIGHT">
																																																					<DIV ALIGN="RIGHT">
																																																						<DIV ALIGN="RIGHT">
																																																							<DIV ALIGN="RIGHT">
																																																								<DIV ALIGN="RIGHT">
																																																									<DIV ALIGN="RIGHT">
																																																										<DIV ALIGN="RIGHT">
																																																											<DIV ALIGN="RIGHT">
																																																											<P>
																																																											<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" summary>
																																																												<TR>
																																																													<TD ALIGN="CENTER">
																																																														<P ALIGN="CENTER"><A HREF="mg_toc_6i-2.htm"><IMG SRC="images/conticon.gif" WIDTH="30" HEIGHT="30" ALIGN="BOTTOM"
																																																														ALT="Contents icon" BORDER="0"></A>
																																																													</TD>
																																																												</TR>
																																																												<TR>
																																																													<TD VALIGN="TOP">
																																																														<P ALIGN="CENTER"><A HREF="mg_toc_6i-2.htm"><SPAN CLASS="copyright">Contents</SPAN></A>
																																																													</TD>
																																																												</TR>
																																																											</TABLE>

</DIV>
																																																										</DIV>
																																																									</DIV>
																																																								</DIV>
																																																							</DIV>
																																																						</DIV>
																																																					</DIV>
																																																				</DIV>
																																																			</DIV>
																																																		</DIV>
																																																	</DIV>
																																																</DIV>
																																															</DIV>
																																														</DIV>
																																													</DIV>
																																												</DIV>
																																											</DIV>
																																										</DIV>
																																									</DIV>
																																								</DIV>
																																							</DIV>
																																						</DIV>
																																					</DIV>
																																				</DIV>
																																			</DIV>
																																		</DIV>
																																	</DIV>
																																</DIV>
																															</DIV>
																														</DIV>
																													</DIV>
																												</DIV>
																											</DIV>
																										</DIV>
																									</DIV>
																								</DIV>
																							</DIV>
																						</DIV>
																					</DIV>
																				</DIV>
																			</DIV>
																		</DIV>
																	</DIV>
																</DIV>
															</DIV>
														</DIV>
													</DIV>
												</DIV>
											</DIV>
										</DIV>
									</DIV>
								</DIV>
							</DIV>
						</DIV>
					</DIV>
				</DIV>
			</DIV>
		</TD>
	</TR>
</TABLE>


</BODY>

</HTML>